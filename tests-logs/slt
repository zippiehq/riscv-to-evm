Running in EVM:
0	 0	PUSH4	0520	 	 
- stack 0: 0x520
1	 5	PUSH2	04B3	 ;; _rambegin	 
- stack 1: 0x520
- stack 0: 0x4B3
2	 8	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x4B3
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x520
- stack 0: 0x4B4
4	 B	PUSH2	0400	 	 
- stack 2: 0x520
- stack 1: 0x4B4
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F91000530042006600000086000000A0000000BA000000D70000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F91000530042006600000086000000A0000000BA000000D70000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F91000530042006600000086000000A0000000BA000000D7000000F10002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F910
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F910
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF910
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF910
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF910
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x910
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x910
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BA000000D7000000F10002010B04B4
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BA000000D7000000F10002010B04B4
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BA000000D7000000F10002010B04B400860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BA000000D7000000F10002010B04B400860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_e743965b54305b1d3ba2c392444ff7c1a45a7eb4b3495e6fd07b32616f5b1e06	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_e743965b54305b1d3ba2c392444ff7c1a45a7eb4b3495e6fd07b32616f5b1e06	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x910
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D7000000F10002010B04B40086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D7000000F10002010B04B40086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D7000000F10002010B04B40086000100A0000100BA000000D70000
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D7000000F10002010B04B40086000100A0000100BA000000D70000
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0040	 	 
- stack 1: 0x418
- stack 0: 0x40
113	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x418
- stack 0: 0x0
114	 BF	PUSH1	03	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x3
115	 C1	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
116	 C2	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x20
117	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
118	 C6	PUSH1	03	 	 
- stack 3: 0x418
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
119	 C8	SIGNEXTEND		 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
120	 C9	SLT		 	 
- stack 1: 0x418
- stack 0: 0x0
121	 CA	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x60
122	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
123	 CE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
124	 D0	ADD		 	 
- stack 0: 0x41C
125	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
126	 D2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
127	 D3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
- stack 0: 0xF0
128	 D5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7
129	 D6	JUMP		 	 
- stack 0: 0x41C
130	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x41C
131	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
132	 D9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
133	 DA	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD7000000F10002010B04B40086000100A0000100BA000000D7000000F10003
- stack 0: 0xE0
134	 DC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD70000
135	 DD	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD70000
- stack 0: 0xFFFF
136	 E0	AND		 	 
- stack 1: 0x41C
- stack 0: 0x0
137	 E1	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
138	 E3	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
139	 E4	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
140	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
141	 E8	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
142	 EA	ADD		 	 
- stack 0: 0x420
143	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
144	 EC	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
145	 ED	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
- stack 0: 0xF0
146	 EF	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF1
147	 F0	JUMP		 	 
- stack 0: 0x420
148	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
149	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
150	 F3	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
151	 F4	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xF10002010B04B40086000100A0000100BA000000D7000000F10003010B049C
- stack 0: 0xE0
152	 F6	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF10002
153	 F7	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xF10002
- stack 0: 0xFFFF
154	 FA	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
155	 FB	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
156	 FD	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
157	 FE	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
158	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
159	 102	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
160	 104	ADD		 	 
- stack 0: 0x424
161	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
162	 106	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10B04B40086000100A0000100BA000000D7000000F10003010B049C00860003
163	 107	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10B04B40086000100A0000100BA000000D7000000F10003010B049C00860003
- stack 0: 0xF0
164	 109	SHR		 	 
- stack 1: 0x424
- stack 0: 0x10B
165	 10A	JUMP		 	 
- stack 0: 0x424
166	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x424
167	 10C	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
168	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x0
169	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
170	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
171	 116	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x3A0
172	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
173	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
174	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
175	 120	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
176	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x129
177	 124	JUMPI		 	 
- stack 0: 0x424
178	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x424
- stack 0: 0x143
179	 128	JUMP		 	 
- stack 0: 0x424
180	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x424
181	 144	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
182	 146	ADD		 	 
- stack 0: 0x428
183	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
184	 148	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
185	 149	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
- stack 0: 0xF0
186	 14B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
187	 14C	JUMP		 	 
- stack 0: 0x428
188	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x428
189	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
190	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
191	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D7000000F10003010B049C0086000300A00007
- stack 0: 0xE0
192	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
193	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
194	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
195	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
196	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
197	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
198	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
199	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
200	 99	ADD		 	 
- stack 0: 0x42C
201	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
202	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
203	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
- stack 0: 0xF0
204	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
205	 9F	JUMP		 	 
- stack 0: 0x42C
206	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
207	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
208	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
209	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D7000000F10003010B049C0086000300A0000700BA0000
- stack 0: 0xE0
210	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
211	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
212	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
213	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
214	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
215	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
216	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
217	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
218	 B3	ADD		 	 
- stack 0: 0x430
219	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
220	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000D7000000F10003010B049C0086000300A0000700BA000000D70001
221	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000D7000000F10003010B049C0086000300A0000700BA000000D70001
- stack 0: 0xF0
222	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
223	 B9	JUMP		 	 
- stack 0: 0x430
224	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x430
225	 BB	PUSH2	0040	 	 
- stack 1: 0x430
- stack 0: 0x40
226	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x430
- stack 0: 0x1
227	 BF	PUSH1	03	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x3
228	 C1	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x1
229	 C2	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x20
230	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
231	 C6	PUSH1	03	 	 
- stack 3: 0x430
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x3
232	 C8	SIGNEXTEND		 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
233	 C9	SLT		 	 
- stack 1: 0x430
- stack 0: 0x0
234	 CA	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x60
235	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
236	 CE	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
237	 D0	ADD		 	 
- stack 0: 0x434
238	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
239	 D2	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000100F10004
240	 D3	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000100F10004
- stack 0: 0xF0
241	 D5	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD7
242	 D6	JUMP		 	 
- stack 0: 0x434
243	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x434
244	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
245	 D9	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000100F10004
246	 DA	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xD7000000F10003010B049C0086000300A0000700BA000000D7000100F10004
- stack 0: 0xE0
247	 DC	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD70000
248	 DD	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xD70000
- stack 0: 0xFFFF
249	 E0	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
250	 E1	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
251	 E3	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
252	 E4	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
253	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
254	 E8	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
255	 EA	ADD		 	 
- stack 0: 0x438
256	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
257	 EC	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF10003010B049C0086000300A0000700BA000000D7000100F10004010B0484
258	 ED	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xF10003010B049C0086000300A0000700BA000000D7000100F10004010B0484
- stack 0: 0xF0
259	 EF	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF1
260	 F0	JUMP		 	 
- stack 0: 0x438
261	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
262	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
263	 F3	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xF10003010B049C0086000300A0000700BA000000D7000100F10004010B0484
264	 F4	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xF10003010B049C0086000300A0000700BA000000D7000100F10004010B0484
- stack 0: 0xE0
265	 F6	SHR		 	 
- stack 1: 0x438
- stack 0: 0xF10003
266	 F7	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xF10003
- stack 0: 0xFFFF
267	 FA	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
268	 FB	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
269	 FD	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
270	 FE	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
271	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
272	 102	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
273	 104	ADD		 	 
- stack 0: 0x43C
274	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
275	 106	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10B049C0086000300A0000700BA000000D7000100F10004010B048400860007
276	 107	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10B049C0086000300A0000700BA000000D7000100F10004010B048400860007
- stack 0: 0xF0
277	 109	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x10B
278	 10A	JUMP		 	 
- stack 0: 0x43C
279	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x43C
280	 10C	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
281	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x0
282	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
283	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x0
284	 116	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x3A0
285	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
286	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
287	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
288	 120	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
289	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x129
290	 124	JUMPI		 	 
- stack 0: 0x43C
291	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x43C
- stack 0: 0x143
292	 128	JUMP		 	 
- stack 0: 0x43C
293	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x43C
294	 144	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
295	 146	ADD		 	 
- stack 0: 0x440
296	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
297	 148	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D7000100F10004010B04840086000700A00003
298	 149	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D7000100F10004010B04840086000700A00003
- stack 0: 0xF0
299	 14B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
300	 14C	JUMP		 	 
- stack 0: 0x440
301	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x440
302	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
303	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D7000100F10004010B04840086000700A00003
304	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D7000100F10004010B04840086000700A00003
- stack 0: 0xE0
305	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
306	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
307	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
308	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
309	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
310	 93	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x20
311	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
312	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
313	 99	ADD		 	 
- stack 0: 0x444
314	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
315	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D7000100F10004010B04840086000700A0000300BA0000
316	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D7000100F10004010B04840086000700A0000300BA0000
- stack 0: 0xF0
317	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
318	 9F	JUMP		 	 
- stack 0: 0x444
319	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
320	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
321	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D7000100F10004010B04840086000700A0000300BA0000
322	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D7000100F10004010B04840086000700A0000300BA0000
- stack 0: 0xE0
323	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00007
324	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00007
- stack 0: 0xFFFF
325	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
326	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
327	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
328	 AD	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
329	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
330	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
331	 B3	ADD		 	 
- stack 0: 0x448
332	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
333	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xBA000000D7000100F10004010B04840086000700A0000300BA000000D70000
334	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xBA000000D7000100F10004010B04840086000700A0000300BA000000D70000
- stack 0: 0xF0
335	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xBA
336	 B9	JUMP		 	 
- stack 0: 0x448
337	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x448
338	 BB	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
339	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x7
340	 BF	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
341	 C1	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x7
342	 C2	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x20
343	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
344	 C6	PUSH1	03	 	 
- stack 3: 0x448
- stack 2: 0x7
- stack 1: 0x3
- stack 0: 0x3
345	 C8	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
346	 C9	SLT		 	 
- stack 1: 0x448
- stack 0: 0x1
347	 CA	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x60
348	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
349	 CE	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
350	 D0	ADD		 	 
- stack 0: 0x44C
351	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
352	 D2	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD7000100F10004010B04840086000700A0000300BA000000D7000000F10005
353	 D3	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xD7000100F10004010B04840086000700A0000300BA000000D7000000F10005
- stack 0: 0xF0
354	 D5	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD7
355	 D6	JUMP		 	 
- stack 0: 0x44C
356	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x44C
357	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
358	 D9	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD7000100F10004010B04840086000700A0000300BA000000D7000000F10005
359	 DA	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xD7000100F10004010B04840086000700A0000300BA000000D7000000F10005
- stack 0: 0xE0
360	 DC	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD70001
361	 DD	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xD70001
- stack 0: 0xFFFF
362	 E0	AND		 	 
- stack 1: 0x44C
- stack 0: 0x1
363	 E1	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x1
- stack 0: 0x1
364	 E3	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x1
365	 E4	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x1
- stack 0: 0x3A0
366	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
367	 E8	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
368	 EA	ADD		 	 
- stack 0: 0x450
369	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
370	 EC	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF10004010B04840086000700A0000300BA000000D7000000F10005010B046C
371	 ED	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xF10004010B04840086000700A0000300BA000000D7000000F10005010B046C
- stack 0: 0xF0
372	 EF	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF1
373	 F0	JUMP		 	 
- stack 0: 0x450
374	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
375	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
376	 F3	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xF10004010B04840086000700A0000300BA000000D7000000F10005010B046C
377	 F4	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xF10004010B04840086000700A0000300BA000000D7000000F10005010B046C
- stack 0: 0xE0
378	 F6	SHR		 	 
- stack 1: 0x450
- stack 0: 0xF10004
379	 F7	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xF10004
- stack 0: 0xFFFF
380	 FA	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
381	 FB	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
382	 FD	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
383	 FE	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
384	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
385	 102	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
386	 104	ADD		 	 
- stack 0: 0x454
387	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
388	 106	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x10B04840086000700A0000300BA000000D7000000F10005010B046C00860000
389	 107	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x10B04840086000700A0000300BA000000D7000000F10005010B046C00860000
- stack 0: 0xF0
390	 109	SHR		 	 
- stack 1: 0x454
- stack 0: 0x10B
391	 10A	JUMP		 	 
- stack 0: 0x454
392	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x454
393	 10C	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
394	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0x1
395	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
396	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0x1
397	 116	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x3A0
398	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x1
399	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
400	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0x1
- stack 0: 0x1
401	 120	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
402	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x129
403	 124	JUMPI		 	 
- stack 0: 0x454
404	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x454
- stack 0: 0x143
405	 128	JUMP		 	 
- stack 0: 0x454
406	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x454
407	 144	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
408	 146	ADD		 	 
- stack 0: 0x458
409	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
410	 148	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x86000700A0000300BA000000D7000000F10005010B046C00860000014DFFF8
411	 149	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x86000700A0000300BA000000D7000000F10005010B046C00860000014DFFF8
- stack 0: 0xF0
412	 14B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
413	 14C	JUMP		 	 
- stack 0: 0x458
414	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x458
415	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
416	 88	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x86000700A0000300BA000000D7000000F10005010B046C00860000014DFFF8
417	 89	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x86000700A0000300BA000000D7000000F10005010B046C00860000014DFFF8
- stack 0: 0xE0
418	 8B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x860007
419	 8C	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x860007
- stack 0: 0xFFFF
420	 8F	AND		 	 
- stack 1: 0x458
- stack 0: 0x7
421	 90	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x7
- stack 0: 0x1
422	 92	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x7
423	 93	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x7
- stack 0: 0x20
424	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
425	 97	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
426	 99	ADD		 	 
- stack 0: 0x45C
427	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
428	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xA0000300BA000000D7000000F10005010B046C00860000014DFFF800BA0000
429	 9C	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xA0000300BA000000D7000000F10005010B046C00860000014DFFF800BA0000
- stack 0: 0xF0
430	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xA0
431	 9F	JUMP		 	 
- stack 0: 0x45C
432	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x45C
433	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
434	 A2	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xA0000300BA000000D7000000F10005010B046C00860000014DFFF800BA0000
435	 A3	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0xA0000300BA000000D7000000F10005010B046C00860000014DFFF800BA0000
- stack 0: 0xE0
436	 A5	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xA00003
437	 A6	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0xA00003
- stack 0: 0xFFFF
438	 A9	AND		 	 
- stack 1: 0x45C
- stack 0: 0x3
439	 AA	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x3
- stack 0: 0x1
440	 AC	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x3
441	 AD	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0x3
- stack 0: 0x40
442	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
443	 B1	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
444	 B3	ADD		 	 
- stack 0: 0x460
445	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
446	 B5	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xBA000000D7000000F10005010B046C00860000014DFFF800BA000000D70000
447	 B6	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xBA000000D7000000F10005010B046C00860000014DFFF800BA000000D70000
- stack 0: 0xF0
448	 B8	SHR		 	 
- stack 1: 0x460
- stack 0: 0xBA
449	 B9	JUMP		 	 
- stack 0: 0x460
450	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x460
451	 BB	PUSH2	0040	 	 
- stack 1: 0x460
- stack 0: 0x40
452	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x460
- stack 0: 0x3
453	 BF	PUSH1	03	 	 
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x3
454	 C1	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x3
455	 C2	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x20
456	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x7
457	 C6	PUSH1	03	 	 
- stack 3: 0x460
- stack 2: 0x3
- stack 1: 0x7
- stack 0: 0x3
458	 C8	SIGNEXTEND		 	 
- stack 2: 0x460
- stack 1: 0x3
- stack 0: 0x7
459	 C9	SLT		 	 
- stack 1: 0x460
- stack 0: 0x0
460	 CA	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x60
461	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
462	 CE	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
463	 D0	ADD		 	 
- stack 0: 0x464
464	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
465	 D2	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xD7000000F10005010B046C00860000014DFFF800BA000000D7000000F10006
466	 D3	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xD7000000F10005010B046C00860000014DFFF800BA000000D7000000F10006
- stack 0: 0xF0
467	 D5	SHR		 	 
- stack 1: 0x464
- stack 0: 0xD7
468	 D6	JUMP		 	 
- stack 0: 0x464
469	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x464
470	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
471	 D9	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xD7000000F10005010B046C00860000014DFFF800BA000000D7000000F10006
472	 DA	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xD7000000F10005010B046C00860000014DFFF800BA000000D7000000F10006
- stack 0: 0xE0
473	 DC	SHR		 	 
- stack 1: 0x464
- stack 0: 0xD70000
474	 DD	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xD70000
- stack 0: 0xFFFF
475	 E0	AND		 	 
- stack 1: 0x464
- stack 0: 0x0
476	 E1	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x1
477	 E3	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x0
478	 E4	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x3A0
479	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
480	 E8	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
481	 EA	ADD		 	 
- stack 0: 0x468
482	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
483	 EC	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xF10005010B046C00860000014DFFF800BA000000D7000000F10006010B0454
484	 ED	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xF10005010B046C00860000014DFFF800BA000000D7000000F10006010B0454
- stack 0: 0xF0
485	 EF	SHR		 	 
- stack 1: 0x468
- stack 0: 0xF1
486	 F0	JUMP		 	 
- stack 0: 0x468
487	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
488	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
489	 F3	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xF10005010B046C00860000014DFFF800BA000000D7000000F10006010B0454
490	 F4	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xF10005010B046C00860000014DFFF800BA000000D7000000F10006010B0454
- stack 0: 0xE0
491	 F6	SHR		 	 
- stack 1: 0x468
- stack 0: 0xF10005
492	 F7	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xF10005
- stack 0: 0xFFFF
493	 FA	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
494	 FB	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
495	 FD	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
496	 FE	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
497	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
498	 102	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
499	 104	ADD		 	 
- stack 0: 0x46C
500	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
501	 106	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x10B046C00860000014DFFF800BA000000D7000000F10006010B045401600000
502	 107	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x10B046C00860000014DFFF800BA000000D7000000F10006010B045401600000
- stack 0: 0xF0
503	 109	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x10B
504	 10A	JUMP		 	 
- stack 0: 0x46C
505	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x46C
506	 10C	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
507	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0x0
508	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
509	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x0
510	 116	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x3A0
511	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x0
512	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
513	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x0
514	 120	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
515	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x129
516	 124	JUMPI		 	 
- stack 0: 0x46C
517	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x46C
- stack 0: 0x143
518	 128	JUMP		 	 
- stack 0: 0x46C
519	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x46C
520	 144	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
521	 146	ADD		 	 
- stack 0: 0x470
522	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
523	 148	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x860000014DFFF800BA000000D7000000F10006010B04540160000000A00000
524	 149	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x860000014DFFF800BA000000D7000000F10006010B04540160000000A00000
- stack 0: 0xF0
525	 14B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
526	 14C	JUMP		 	 
- stack 0: 0x470
527	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x470
528	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
529	 88	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x860000014DFFF800BA000000D7000000F10006010B04540160000000A00000
530	 89	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x860000014DFFF800BA000000D7000000F10006010B04540160000000A00000
- stack 0: 0xE0
531	 8B	SHR		 	 
- stack 1: 0x470
- stack 0: 0x860000
532	 8C	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x860000
- stack 0: 0xFFFF
533	 8F	AND		 	 
- stack 1: 0x470
- stack 0: 0x0
534	 90	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x1
535	 92	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x0
536	 93	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x20
537	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
538	 97	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
539	 99	ADD		 	 
- stack 0: 0x474
540	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
541	 9B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x14DFFF800BA000000D7000000F10006010B04540160000000A0000000BA0000
542	 9C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x14DFFF800BA000000D7000000F10006010B04540160000000A0000000BA0000
- stack 0: 0xF0
543	 9E	SHR		 	 
- stack 1: 0x474
- stack 0: 0x14D
544	 9F	JUMP		 	 
- stack 0: 0x474
545	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x474
546	 14E	PUSH4	ffff8000	 	 
- stack 1: 0x474
- stack 0: 0xFFFF8000
547	 153	PUSH2	0040	 	 
- stack 2: 0x474
- stack 1: 0xFFFF8000
- stack 0: 0x40
548	 156	MSTORE		 	  ;; # store to x2
- stack 0: 0x474
549	 157	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
550	 159	ADD		 	 
- stack 0: 0x478
551	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
552	 15B	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA000000D7000000F10006010B04540160000000A0000000BA000000D70001
553	 15C	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA000000D7000000F10006010B04540160000000A0000000BA000000D70001
- stack 0: 0xF0
554	 15E	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
555	 15F	JUMP		 	 
- stack 0: 0x478
556	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x478
557	 BB	PUSH2	0040	 	 
- stack 1: 0x478
- stack 0: 0x40
558	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x478
- stack 0: 0xFFFF8000
559	 BF	PUSH1	03	 	 
- stack 2: 0x478
- stack 1: 0xFFFF8000
- stack 0: 0x3
560	 C1	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
561	 C2	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x20
562	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x0
563	 C6	PUSH1	03	 	 
- stack 3: 0x478
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 1: 0x0
- stack 0: 0x3
564	 C8	SIGNEXTEND		 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x0
565	 C9	SLT		 	 
- stack 1: 0x478
- stack 0: 0x0
566	 CA	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x60
567	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
568	 CE	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
569	 D0	ADD		 	 
- stack 0: 0x47C
570	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
571	 D2	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD7000000F10006010B04540160000000A0000000BA000000D7000100F10007
572	 D3	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xD7000000F10006010B04540160000000A0000000BA000000D7000100F10007
- stack 0: 0xF0
573	 D5	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD7
574	 D6	JUMP		 	 
- stack 0: 0x47C
575	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x47C
576	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
577	 D9	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xD7000000F10006010B04540160000000A0000000BA000000D7000100F10007
578	 DA	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xD7000000F10006010B04540160000000A0000000BA000000D7000100F10007
- stack 0: 0xE0
579	 DC	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xD70000
580	 DD	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xD70000
- stack 0: 0xFFFF
581	 E0	AND		 	 
- stack 1: 0x47C
- stack 0: 0x0
582	 E1	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x1
583	 E3	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x0
584	 E4	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x3A0
585	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
586	 E8	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
587	 EA	ADD		 	 
- stack 0: 0x480
588	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
589	 EC	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xF10006010B04540160000000A0000000BA000000D7000100F10007010B043C
590	 ED	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xF10006010B04540160000000A0000000BA000000D7000100F10007010B043C
- stack 0: 0xF0
591	 EF	SHR		 	 
- stack 1: 0x480
- stack 0: 0xF1
592	 F0	JUMP		 	 
- stack 0: 0x480
593	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
594	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
595	 F3	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xF10006010B04540160000000A0000000BA000000D7000100F10007010B043C
596	 F4	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xF10006010B04540160000000A0000000BA000000D7000100F10007010B043C
- stack 0: 0xE0
597	 F6	SHR		 	 
- stack 1: 0x480
- stack 0: 0xF10006
598	 F7	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xF10006
- stack 0: 0xFFFF
599	 FA	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
600	 FB	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
601	 FD	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
602	 FE	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
603	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
604	 102	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
605	 104	ADD		 	 
- stack 0: 0x484
606	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
607	 106	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x10B04540160000000A0000000BA000000D7000100F10007010B043C01600000
608	 107	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x10B04540160000000A0000000BA000000D7000100F10007010B043C01600000
- stack 0: 0xF0
609	 109	SHR		 	 
- stack 1: 0x484
- stack 0: 0x10B
610	 10A	JUMP		 	 
- stack 0: 0x484
611	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x484
612	 10C	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
613	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0x0
614	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
615	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x0
616	 116	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x3A0
617	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x0
618	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
619	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x0
620	 120	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
621	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x129
622	 124	JUMPI		 	 
- stack 0: 0x484
623	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x484
- stack 0: 0x143
624	 128	JUMP		 	 
- stack 0: 0x484
625	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x484
626	 144	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
627	 146	ADD		 	 
- stack 0: 0x488
628	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
629	 148	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x160000000A0000000BA000000D7000100F10007010B043C01600000014DFFF8
630	 149	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x160000000A0000000BA000000D7000100F10007010B043C01600000014DFFF8
- stack 0: 0xF0
631	 14B	SHR		 	 
- stack 1: 0x488
- stack 0: 0x160
632	 14C	JUMP		 	 
- stack 0: 0x488
633	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x488
634	 161	PUSH4	80000000	 	 
- stack 1: 0x488
- stack 0: 0x80000000
635	 166	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x80000000
- stack 0: 0x20
636	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
637	 16A	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
638	 16C	ADD		 	 
- stack 0: 0x48C
639	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
640	 16E	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0000000BA000000D7000100F10007010B043C01600000014DFFF800BA0000
641	 16F	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xA0000000BA000000D7000100F10007010B043C01600000014DFFF800BA0000
- stack 0: 0xF0
642	 171	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA0
643	 172	JUMP		 	 
- stack 0: 0x48C
644	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x48C
645	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
646	 A2	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0000000BA000000D7000100F10007010B043C01600000014DFFF800BA0000
647	 A3	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0xA0000000BA000000D7000100F10007010B043C01600000014DFFF800BA0000
- stack 0: 0xE0
648	 A5	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA00000
649	 A6	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0xA00000
- stack 0: 0xFFFF
650	 A9	AND		 	 
- stack 1: 0x48C
- stack 0: 0x0
651	 AA	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x1
652	 AC	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x0
653	 AD	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0x0
- stack 0: 0x40
654	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x48C
655	 B1	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
656	 B3	ADD		 	 
- stack 0: 0x490
657	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
658	 B5	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xBA000000D7000100F10007010B043C01600000014DFFF800BA000000D70001
659	 B6	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xBA000000D7000100F10007010B043C01600000014DFFF800BA000000D70001
- stack 0: 0xF0
660	 B8	SHR		 	 
- stack 1: 0x490
- stack 0: 0xBA
661	 B9	JUMP		 	 
- stack 0: 0x490
662	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x490
663	 BB	PUSH2	0040	 	 
- stack 1: 0x490
- stack 0: 0x40
664	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x490
- stack 0: 0x0
665	 BF	PUSH1	03	 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x3
666	 C1	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x0
667	 C2	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x20
668	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x80000000
669	 C6	PUSH1	03	 	 
- stack 3: 0x490
- stack 2: 0x0
- stack 1: 0x80000000
- stack 0: 0x3
670	 C8	SIGNEXTEND		 	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
671	 C9	SLT		 	 
- stack 1: 0x490
- stack 0: 0x1
672	 CA	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x60
673	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
674	 CE	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
675	 D0	ADD		 	 
- stack 0: 0x494
676	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
677	 D2	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xD7000100F10007010B043C01600000014DFFF800BA000000D7000100F10008
678	 D3	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xD7000100F10007010B043C01600000014DFFF800BA000000D7000100F10008
- stack 0: 0xF0
679	 D5	SHR		 	 
- stack 1: 0x494
- stack 0: 0xD7
680	 D6	JUMP		 	 
- stack 0: 0x494
681	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x494
682	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
683	 D9	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xD7000100F10007010B043C01600000014DFFF800BA000000D7000100F10008
684	 DA	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xD7000100F10007010B043C01600000014DFFF800BA000000D7000100F10008
- stack 0: 0xE0
685	 DC	SHR		 	 
- stack 1: 0x494
- stack 0: 0xD70001
686	 DD	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xD70001
- stack 0: 0xFFFF
687	 E0	AND		 	 
- stack 1: 0x494
- stack 0: 0x1
688	 E1	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x1
- stack 0: 0x1
689	 E3	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x1
690	 E4	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x1
- stack 0: 0x3A0
691	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
692	 E8	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
693	 EA	ADD		 	 
- stack 0: 0x498
694	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
695	 EC	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF10007010B043C01600000014DFFF800BA000000D7000100F10008010B0424
696	 ED	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xF10007010B043C01600000014DFFF800BA000000D7000100F10008010B0424
- stack 0: 0xF0
697	 EF	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF1
698	 F0	JUMP		 	 
- stack 0: 0x498
699	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
700	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
701	 F3	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF10007010B043C01600000014DFFF800BA000000D7000100F10008010B0424
702	 F4	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xF10007010B043C01600000014DFFF800BA000000D7000100F10008010B0424
- stack 0: 0xE0
703	 F6	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF10007
704	 F7	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xF10007
- stack 0: 0xFFFF
705	 FA	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
706	 FB	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
707	 FD	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
708	 FE	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
709	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
710	 102	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
711	 104	ADD		 	 
- stack 0: 0x49C
712	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
713	 106	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x10B043C01600000014DFFF800BA000000D7000100F10008010B042400860000
714	 107	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x10B043C01600000014DFFF800BA000000D7000100F10008010B042400860000
- stack 0: 0xF0
715	 109	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x10B
716	 10A	JUMP		 	 
- stack 0: 0x49C
717	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x49C
718	 10C	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
719	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0x1
720	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
721	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x1
722	 116	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0x3A0
723	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0x1
724	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
725	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x1
- stack 0: 0x1
726	 120	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
727	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x129
728	 124	JUMPI		 	 
- stack 0: 0x49C
729	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x49C
- stack 0: 0x143
730	 128	JUMP		 	 
- stack 0: 0x49C
731	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x49C
732	 144	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
733	 146	ADD		 	 
- stack 0: 0x4A0
734	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
735	 148	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1600000014DFFF800BA000000D7000100F10008010B04240086000001730008
736	 149	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1600000014DFFF800BA000000D7000100F10008010B04240086000001730008
- stack 0: 0xF0
737	 14B	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x160
738	 14C	JUMP		 	 
- stack 0: 0x4A0
739	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4A0
740	 161	PUSH4	80000000	 	 
- stack 1: 0x4A0
- stack 0: 0x80000000
741	 166	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x80000000
- stack 0: 0x20
742	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
743	 16A	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
744	 16C	ADD		 	 
- stack 0: 0x4A4
745	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
746	 16E	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x14DFFF800BA000000D7000100F10008010B042400860000017300080186FFFF
747	 16F	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x14DFFF800BA000000D7000100F10008010B042400860000017300080186FFFF
- stack 0: 0xF0
748	 171	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x14D
749	 172	JUMP		 	 
- stack 0: 0x4A4
750	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x4A4
751	 14E	PUSH4	ffff8000	 	 
- stack 1: 0x4A4
- stack 0: 0xFFFF8000
752	 153	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFF8000
- stack 0: 0x40
753	 156	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A4
754	 157	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
755	 159	ADD		 	 
- stack 0: 0x4A8
756	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
757	 15B	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xBA000000D7000100F10008010B042400860000017300080186FFFF00BA0000
758	 15C	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xBA000000D7000100F10008010B042400860000017300080186FFFF00BA0000
- stack 0: 0xF0
759	 15E	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xBA
760	 15F	JUMP		 	 
- stack 0: 0x4A8
761	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x4A8
762	 BB	PUSH2	0040	 	 
- stack 1: 0x4A8
- stack 0: 0x40
763	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4A8
- stack 0: 0xFFFF8000
764	 BF	PUSH1	03	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFF8000
- stack 0: 0x3
765	 C1	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
766	 C2	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x20
767	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x80000000
768	 C6	PUSH1	03	 	 
- stack 3: 0x4A8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 1: 0x80000000
- stack 0: 0x3
769	 C8	SIGNEXTEND		 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
770	 C9	SLT		 	 
- stack 1: 0x4A8
- stack 0: 0x1
771	 CA	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0x1
- stack 0: 0x60
772	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
773	 CE	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
774	 D0	ADD		 	 
- stack 0: 0x4AC
775	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
776	 D2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xD7000100F10008010B042400860000017300080186FFFF00BA000000D70001
777	 D3	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xD7000100F10008010B042400860000017300080186FFFF00BA000000D70001
- stack 0: 0xF0
778	 D5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xD7
779	 D6	JUMP		 	 
- stack 0: 0x4AC
780	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4AC
781	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
782	 D9	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xD7000100F10008010B042400860000017300080186FFFF00BA000000D70001
783	 DA	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xD7000100F10008010B042400860000017300080186FFFF00BA000000D70001
- stack 0: 0xE0
784	 DC	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xD70001
785	 DD	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xD70001
- stack 0: 0xFFFF
786	 E0	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
787	 E1	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
788	 E3	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x1
789	 E4	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x3A0
790	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x4AC
791	 E8	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
792	 EA	ADD		 	 
- stack 0: 0x4B0
793	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
794	 EC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xF10008010B042400860000017300080186FFFF00BA000000D7000100F10009
795	 ED	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0xF10008010B042400860000017300080186FFFF00BA000000D7000100F10009
- stack 0: 0xF0
796	 EF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xF1
797	 F0	JUMP		 	 
- stack 0: 0x4B0
798	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B0
799	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
800	 F3	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0xF10008010B042400860000017300080186FFFF00BA000000D7000100F10009
801	 F4	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0xF10008010B042400860000017300080186FFFF00BA000000D7000100F10009
- stack 0: 0xE0
802	 F6	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0xF10008
803	 F7	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0xF10008
- stack 0: 0xFFFF
804	 FA	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
805	 FB	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x1
806	 FD	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x8
807	 FE	PUSH2	0380	 	 
- stack 2: 0x4B0
- stack 1: 0x8
- stack 0: 0x380
808	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B0
809	 102	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
810	 104	ADD		 	 
- stack 0: 0x4B4
811	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
812	 106	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x10B042400860000017300080186FFFF00BA000000D7000100F10009010B0408
813	 107	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x10B042400860000017300080186FFFF00BA000000D7000100F10009010B0408
- stack 0: 0xF0
814	 109	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x10B
815	 10A	JUMP		 	 
- stack 0: 0x4B4
816	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x4B4
817	 10C	PUSH2	0060	 	 
- stack 1: 0x4B4
- stack 0: 0x60
818	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x4B4
- stack 0: 0x1
819	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
820	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0x1
821	 116	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x3A0
822	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
823	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B4
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
824	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
825	 120	SUB		 	 
- stack 1: 0x4B4
- stack 0: 0x0
826	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x4B4
- stack 1: 0x0
- stack 0: 0x129
827	 124	JUMPI		 	 
- stack 0: 0x4B4
828	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x4B4
- stack 0: 0x143
829	 128	JUMP		 	 
- stack 0: 0x4B4
830	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x4B4
831	 144	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
832	 146	ADD		 	 
- stack 0: 0x4B8
833	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
834	 148	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x860000017300080186FFFF00BA000000D7000100F10009010B040801600000
835	 149	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x860000017300080186FFFF00BA000000D7000100F10009010B040801600000
- stack 0: 0xF0
836	 14B	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x86
837	 14C	JUMP		 	 
- stack 0: 0x4B8
838	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4B8
839	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
840	 88	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x860000017300080186FFFF00BA000000D7000100F10009010B040801600000
841	 89	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x860000017300080186FFFF00BA000000D7000100F10009010B040801600000
- stack 0: 0xE0
842	 8B	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x860000
843	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x860000
- stack 0: 0xFFFF
844	 8F	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
845	 90	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x1
846	 92	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
847	 93	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x20
848	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B8
849	 97	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
850	 99	ADD		 	 
- stack 0: 0x4BC
851	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
852	 9B	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x17300080186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF
853	 9C	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x17300080186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF
- stack 0: 0xF0
854	 9E	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x173
855	 9F	JUMP		 	 
- stack 0: 0x4BC
856	 173	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4BC
857	 174	PUSH4	00008000	 	 
- stack 1: 0x4BC
- stack 0: 0x8000
858	 179	PUSH2	0040	 	 
- stack 2: 0x4BC
- stack 1: 0x8000
- stack 0: 0x40
859	 17C	MSTORE		 	  ;; # store to x2
- stack 0: 0x4BC
860	 17D	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
861	 17F	ADD		 	 
- stack 0: 0x4C0
862	 180	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
863	 181	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF00A00000
864	 182	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF00A00000
- stack 0: 0xF0
865	 184	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x186
866	 185	JUMP		 	 
- stack 0: 0x4C0
867	 186	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4C0
868	 187	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
869	 188	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF00A00000
870	 189	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x186FFFF00BA000000D7000100F10009010B04080160000001A5FFFF00A00000
- stack 0: 0xE0
871	 18B	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x186FFFF
872	 18C	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x186FFFF
- stack 0: 0xFFFF
873	 18F	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFF
874	 190	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFF
- stack 0: 0x1
875	 192	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
876	 193	PUSH2	0040	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
877	 196	MLOAD		 	  ;; # read from x2
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
878	 197	ADD		 	  ;; # ADDI 2
- stack 1: 0x4C0
- stack 0: 0x7FFF
879	 198	PUSH2	0040	 	 
- stack 2: 0x4C0
- stack 1: 0x7FFF
- stack 0: 0x40
880	 19B	MSTORE		 	  ;; # store to x2
- stack 0: 0x4C0
881	 19C	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
882	 19E	ADD		 	 
- stack 0: 0x4C4
883	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
884	 1A0	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xBA000000D7000100F10009010B04080160000001A5FFFF00A0000000BA0000
885	 1A1	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xBA000000D7000100F10009010B04080160000001A5FFFF00A0000000BA0000
- stack 0: 0xF0
886	 1A3	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xBA
887	 1A4	JUMP		 	 
- stack 0: 0x4C4
888	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x4C4
889	 BB	PUSH2	0040	 	 
- stack 1: 0x4C4
- stack 0: 0x40
890	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4C4
- stack 0: 0x7FFF
891	 BF	PUSH1	03	 	 
- stack 2: 0x4C4
- stack 1: 0x7FFF
- stack 0: 0x3
892	 C1	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x7FFF
893	 C2	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x7FFF
- stack 0: 0x20
894	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0x7FFF
- stack 0: 0x0
895	 C6	PUSH1	03	 	 
- stack 3: 0x4C4
- stack 2: 0x7FFF
- stack 1: 0x0
- stack 0: 0x3
896	 C8	SIGNEXTEND		 	 
- stack 2: 0x4C4
- stack 1: 0x7FFF
- stack 0: 0x0
897	 C9	SLT		 	 
- stack 1: 0x4C4
- stack 0: 0x1
898	 CA	PUSH2	0060	 	 
- stack 2: 0x4C4
- stack 1: 0x1
- stack 0: 0x60
899	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C4
900	 CE	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
901	 D0	ADD		 	 
- stack 0: 0x4C8
902	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
903	 D2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD7000100F10009010B04080160000001A5FFFF00A0000000BA000000D70000
904	 D3	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xD7000100F10009010B04080160000001A5FFFF00A0000000BA000000D70000
- stack 0: 0xF0
905	 D5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD7
906	 D6	JUMP		 	 
- stack 0: 0x4C8
907	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4C8
908	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
909	 D9	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xD7000100F10009010B04080160000001A5FFFF00A0000000BA000000D70000
910	 DA	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xD7000100F10009010B04080160000001A5FFFF00A0000000BA000000D70000
- stack 0: 0xE0
911	 DC	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xD70001
912	 DD	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xD70001
- stack 0: 0xFFFF
913	 E0	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
914	 E1	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x1
915	 E3	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x1
916	 E4	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0x1
- stack 0: 0x3A0
917	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C8
918	 E8	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
919	 EA	ADD		 	 
- stack 0: 0x4CC
920	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
921	 EC	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xF10009010B04080160000001A5FFFF00A0000000BA000000D7000000F1000A
922	 ED	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xF10009010B04080160000001A5FFFF00A0000000BA000000D7000000F1000A
- stack 0: 0xF0
923	 EF	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xF1
924	 F0	JUMP		 	 
- stack 0: 0x4CC
925	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4CC
926	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
927	 F3	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xF10009010B04080160000001A5FFFF00A0000000BA000000D7000000F1000A
928	 F4	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0xF10009010B04080160000001A5FFFF00A0000000BA000000D7000000F1000A
- stack 0: 0xE0
929	 F6	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xF10009
930	 F7	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xF10009
- stack 0: 0xFFFF
931	 FA	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x9
932	 FB	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x9
- stack 0: 0x1
933	 FD	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x9
934	 FE	PUSH2	0380	 	 
- stack 2: 0x4CC
- stack 1: 0x9
- stack 0: 0x380
935	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x4CC
936	 102	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
937	 104	ADD		 	 
- stack 0: 0x4D0
938	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
939	 106	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x10B04080160000001A5FFFF00A0000000BA000000D7000000F1000A010B03EC
940	 107	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x10B04080160000001A5FFFF00A0000000BA000000D7000000F1000A010B03EC
- stack 0: 0xF0
941	 109	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x10B
942	 10A	JUMP		 	 
- stack 0: 0x4D0
943	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x4D0
944	 10C	PUSH2	0060	 	 
- stack 1: 0x4D0
- stack 0: 0x60
945	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D0
- stack 0: 0x1
946	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
947	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D0
- stack 0: 0x1
948	 116	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x3A0
949	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x1
950	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D0
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
951	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D0
- stack 1: 0x1
- stack 0: 0x1
952	 120	SUB		 	 
- stack 1: 0x4D0
- stack 0: 0x0
953	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x4D0
- stack 1: 0x0
- stack 0: 0x129
954	 124	JUMPI		 	 
- stack 0: 0x4D0
955	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x4D0
- stack 0: 0x143
956	 128	JUMP		 	 
- stack 0: 0x4D0
957	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x4D0
958	 144	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
959	 146	ADD		 	 
- stack 0: 0x4D4
960	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
961	 148	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x160000001A5FFFF00A0000000BA000000D7000000F1000A010B03EC01600000
962	 149	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x160000001A5FFFF00A0000000BA000000D7000000F1000A010B03EC01600000
- stack 0: 0xF0
963	 14B	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x160
964	 14C	JUMP		 	 
- stack 0: 0x4D4
965	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4D4
966	 161	PUSH4	80000000	 	 
- stack 1: 0x4D4
- stack 0: 0x80000000
967	 166	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0x80000000
- stack 0: 0x20
968	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
969	 16A	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
970	 16C	ADD		 	 
- stack 0: 0x4D8
971	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
972	 16E	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1A5FFFF00A0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF
973	 16F	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x1A5FFFF00A0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF
- stack 0: 0xF0
974	 171	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1A5
975	 172	JUMP		 	 
- stack 0: 0x4D8
976	 1A5	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4D8
977	 1A6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
978	 1A7	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1A5FFFF00A0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF
979	 1A8	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0x1A5FFFF00A0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF
- stack 0: 0xE0
980	 1AA	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1A5FFFF
981	 1AB	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0x1A5FFFF
- stack 0: 0xFFFF
982	 1AE	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFF
983	 1AF	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFF
- stack 0: 0x1
984	 1B1	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
985	 1B2	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
986	 1B5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
987	 1B6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D8
- stack 0: 0x7FFFFFFF
988	 1B7	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
989	 1BA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
990	 1BB	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
991	 1BD	ADD		 	 
- stack 0: 0x4DC
992	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
993	 1BF	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xA0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF01730008
994	 1C0	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xA0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF01730008
- stack 0: 0xF0
995	 1C2	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xA0
996	 1C3	JUMP		 	 
- stack 0: 0x4DC
997	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4DC
998	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
999	 A2	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xA0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF01730008
1000	 A3	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0xA0000000BA000000D7000000F1000A010B03EC0160000001A5FFFF01730008
- stack 0: 0xE0
1001	 A5	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xA00000
1002	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0xA00000
- stack 0: 0xFFFF
1003	 A9	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1004	 AA	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x1
1005	 AC	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1006	 AD	PUSH2	0040	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x40
1007	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4DC
1008	 B1	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1009	 B3	ADD		 	 
- stack 0: 0x4E0
1010	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1011	 B5	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xBA000000D7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF
1012	 B6	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xBA000000D7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF
- stack 0: 0xF0
1013	 B8	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xBA
1014	 B9	JUMP		 	 
- stack 0: 0x4E0
1015	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x4E0
1016	 BB	PUSH2	0040	 	 
- stack 1: 0x4E0
- stack 0: 0x40
1017	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E0
- stack 0: 0x0
1018	 BF	PUSH1	03	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x3
1019	 C1	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1020	 C2	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x20
1021	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
1022	 C6	PUSH1	03	 	 
- stack 3: 0x4E0
- stack 2: 0x0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1023	 C8	SIGNEXTEND		 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
1024	 C9	SLT		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1025	 CA	PUSH2	0060	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x60
1026	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4E0
1027	 CE	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1028	 D0	ADD		 	 
- stack 0: 0x4E4
1029	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1030	 D2	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xD7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF00BA0000
1031	 D3	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xD7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF00BA0000
- stack 0: 0xF0
1032	 D5	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xD7
1033	 D6	JUMP		 	 
- stack 0: 0x4E4
1034	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4E4
1035	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1036	 D9	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xD7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF00BA0000
1037	 DA	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xD7000000F1000A010B03EC0160000001A5FFFF017300080186FFFF00BA0000
- stack 0: 0xE0
1038	 DC	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xD70000
1039	 DD	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xD70000
- stack 0: 0xFFFF
1040	 E0	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1041	 E1	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x1
1042	 E3	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1043	 E4	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x3A0
1044	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E4
1045	 E8	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1046	 EA	ADD		 	 
- stack 0: 0x4E8
1047	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1048	 EC	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xF1000A010B03EC0160000001A5FFFF017300080186FFFF00BA000000D70000
1049	 ED	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xF1000A010B03EC0160000001A5FFFF017300080186FFFF00BA000000D70000
- stack 0: 0xF0
1050	 EF	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xF1
1051	 F0	JUMP		 	 
- stack 0: 0x4E8
1052	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E8
1053	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1054	 F3	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xF1000A010B03EC0160000001A5FFFF017300080186FFFF00BA000000D70000
1055	 F4	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xF1000A010B03EC0160000001A5FFFF017300080186FFFF00BA000000D70000
- stack 0: 0xE0
1056	 F6	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xF1000A
1057	 F7	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xF1000A
- stack 0: 0xFFFF
1058	 FA	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xA
1059	 FB	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xA
- stack 0: 0x1
1060	 FD	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xA
1061	 FE	PUSH2	0380	 	 
- stack 2: 0x4E8
- stack 1: 0xA
- stack 0: 0x380
1062	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E8
1063	 102	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1064	 104	ADD		 	 
- stack 0: 0x4EC
1065	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1066	 106	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x10B03EC0160000001A5FFFF017300080186FFFF00BA000000D7000000F1000B
1067	 107	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x10B03EC0160000001A5FFFF017300080186FFFF00BA000000D7000000F1000B
- stack 0: 0xF0
1068	 109	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x10B
1069	 10A	JUMP		 	 
- stack 0: 0x4EC
1070	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x4EC
1071	 10C	PUSH2	0060	 	 
- stack 1: 0x4EC
- stack 0: 0x60
1072	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x4EC
- stack 0: 0x0
1073	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1074	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x0
1075	 116	PUSH2	03A0	 	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x3A0
1076	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x0
1077	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1078	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x0
1079	 120	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1080	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x129
1081	 124	JUMPI		 	 
- stack 0: 0x4EC
1082	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x4EC
- stack 0: 0x143
1083	 128	JUMP		 	 
- stack 0: 0x4EC
1084	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x4EC
1085	 144	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1086	 146	ADD		 	 
- stack 0: 0x4F0
1087	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1088	 148	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x160000001A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC
1089	 149	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x160000001A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC
- stack 0: 0xF0
1090	 14B	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x160
1091	 14C	JUMP		 	 
- stack 0: 0x4F0
1092	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4F0
1093	 161	PUSH4	80000000	 	 
- stack 1: 0x4F0
- stack 0: 0x80000000
1094	 166	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x80000000
- stack 0: 0x20
1095	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1096	 16A	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1097	 16C	ADD		 	 
- stack 0: 0x4F4
1098	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1099	 16E	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC01600000
1100	 16F	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC01600000
- stack 0: 0xF0
1101	 171	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1A5
1102	 172	JUMP		 	 
- stack 0: 0x4F4
1103	 1A5	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4F4
1104	 1A6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1105	 1A7	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC01600000
1106	 1A8	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x1A5FFFF017300080186FFFF00BA000000D7000000F1000B010B03CC01600000
- stack 0: 0xE0
1107	 1AA	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1A5FFFF
1108	 1AB	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x1A5FFFF
- stack 0: 0xFFFF
1109	 1AE	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFF
1110	 1AF	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFF
- stack 0: 0x1
1111	 1B1	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1112	 1B2	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1113	 1B5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1114	 1B6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F4
- stack 0: 0x7FFFFFFF
1115	 1B7	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1116	 1BA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1117	 1BB	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1118	 1BD	ADD		 	 
- stack 0: 0x4F8
1119	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1120	 1BF	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x17300080186FFFF00BA000000D7000000F1000B010B03CC0160000001730008
1121	 1C0	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x17300080186FFFF00BA000000D7000000F1000B010B03CC0160000001730008
- stack 0: 0xF0
1122	 1C2	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x173
1123	 1C3	JUMP		 	 
- stack 0: 0x4F8
1124	 173	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4F8
1125	 174	PUSH4	00008000	 	 
- stack 1: 0x4F8
- stack 0: 0x8000
1126	 179	PUSH2	0040	 	 
- stack 2: 0x4F8
- stack 1: 0x8000
- stack 0: 0x40
1127	 17C	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F8
1128	 17D	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1129	 17F	ADD		 	 
- stack 0: 0x4FC
1130	 180	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1131	 181	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x186FFFF00BA000000D7000000F1000B010B03CC01600000017300080186FFFF
1132	 182	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x186FFFF00BA000000D7000000F1000B010B03CC01600000017300080186FFFF
- stack 0: 0xF0
1133	 184	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x186
1134	 185	JUMP		 	 
- stack 0: 0x4FC
1135	 186	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4FC
1136	 187	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1137	 188	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x186FFFF00BA000000D7000000F1000B010B03CC01600000017300080186FFFF
1138	 189	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0x186FFFF00BA000000D7000000F1000B010B03CC01600000017300080186FFFF
- stack 0: 0xE0
1139	 18B	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x186FFFF
1140	 18C	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x186FFFF
- stack 0: 0xFFFF
1141	 18F	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFF
1142	 190	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xFFFF
- stack 0: 0x1
1143	 192	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1144	 193	PUSH2	0040	 	 
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1145	 196	MLOAD		 	  ;; # read from x2
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1146	 197	ADD		 	  ;; # ADDI 2
- stack 1: 0x4FC
- stack 0: 0x7FFF
1147	 198	PUSH2	0040	 	 
- stack 2: 0x4FC
- stack 1: 0x7FFF
- stack 0: 0x40
1148	 19B	MSTORE		 	  ;; # store to x2
- stack 0: 0x4FC
1149	 19C	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1150	 19E	ADD		 	 
- stack 0: 0x500
1151	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1152	 1A0	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xBA000000D7000000F1000B010B03CC01600000017300080186FFFF00BA0000
1153	 1A1	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0xBA000000D7000000F1000B010B03CC01600000017300080186FFFF00BA0000
- stack 0: 0xF0
1154	 1A3	SHR		 	 
- stack 1: 0x500
- stack 0: 0xBA
1155	 1A4	JUMP		 	 
- stack 0: 0x500
1156	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x500
1157	 BB	PUSH2	0040	 	 
- stack 1: 0x500
- stack 0: 0x40
1158	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x500
- stack 0: 0x7FFF
1159	 BF	PUSH1	03	 	 
- stack 2: 0x500
- stack 1: 0x7FFF
- stack 0: 0x3
1160	 C1	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x7FFF
1161	 C2	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x7FFF
- stack 0: 0x20
1162	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x500
- stack 1: 0x7FFF
- stack 0: 0x7FFFFFFF
1163	 C6	PUSH1	03	 	 
- stack 3: 0x500
- stack 2: 0x7FFF
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1164	 C8	SIGNEXTEND		 	 
- stack 2: 0x500
- stack 1: 0x7FFF
- stack 0: 0x7FFFFFFF
1165	 C9	SLT		 	 
- stack 1: 0x500
- stack 0: 0x0
1166	 CA	PUSH2	0060	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x60
1167	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x500
1168	 CE	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1169	 D0	ADD		 	 
- stack 0: 0x504
1170	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1171	 D2	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD7000000F1000B010B03CC01600000017300080186FFFF00BA000000D70001
1172	 D3	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xD7000000F1000B010B03CC01600000017300080186FFFF00BA000000D70001
- stack 0: 0xF0
1173	 D5	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD7
1174	 D6	JUMP		 	 
- stack 0: 0x504
1175	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x504
1176	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1177	 D9	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xD7000000F1000B010B03CC01600000017300080186FFFF00BA000000D70001
1178	 DA	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0xD7000000F1000B010B03CC01600000017300080186FFFF00BA000000D70001
- stack 0: 0xE0
1179	 DC	SHR		 	 
- stack 1: 0x504
- stack 0: 0xD70000
1180	 DD	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0xD70000
- stack 0: 0xFFFF
1181	 E0	AND		 	 
- stack 1: 0x504
- stack 0: 0x0
1182	 E1	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x1
1183	 E3	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x0
1184	 E4	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x0
- stack 0: 0x3A0
1185	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x504
1186	 E8	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1187	 EA	ADD		 	 
- stack 0: 0x508
1188	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1189	 EC	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xF1000B010B03CC01600000017300080186FFFF00BA000000D7000100F1000C
1190	 ED	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xF1000B010B03CC01600000017300080186FFFF00BA000000D7000100F1000C
- stack 0: 0xF0
1191	 EF	SHR		 	 
- stack 1: 0x508
- stack 0: 0xF1
1192	 F0	JUMP		 	 
- stack 0: 0x508
1193	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1194	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1195	 F3	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xF1000B010B03CC01600000017300080186FFFF00BA000000D7000100F1000C
1196	 F4	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xF1000B010B03CC01600000017300080186FFFF00BA000000D7000100F1000C
- stack 0: 0xE0
1197	 F6	SHR		 	 
- stack 1: 0x508
- stack 0: 0xF1000B
1198	 F7	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xF1000B
- stack 0: 0xFFFF
1199	 FA	AND		 	 
- stack 1: 0x508
- stack 0: 0xB
1200	 FB	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xB
- stack 0: 0x1
1201	 FD	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xB
1202	 FE	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xB
- stack 0: 0x380
1203	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1204	 102	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1205	 104	ADD		 	 
- stack 0: 0x50C
1206	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1207	 106	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x10B03CC01600000017300080186FFFF00BA000000D7000100F1000C010B03B0
1208	 107	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x10B03CC01600000017300080186FFFF00BA000000D7000100F1000C010B03B0
- stack 0: 0xF0
1209	 109	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x10B
1210	 10A	JUMP		 	 
- stack 0: 0x50C
1211	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x50C
1212	 10C	PUSH2	0060	 	 
- stack 1: 0x50C
- stack 0: 0x60
1213	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x50C
- stack 0: 0x0
1214	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1215	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x0
1216	 116	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x3A0
1217	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x0
1218	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1219	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x0
1220	 120	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x0
1221	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x129
1222	 124	JUMPI		 	 
- stack 0: 0x50C
1223	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x50C
- stack 0: 0x143
1224	 128	JUMP		 	 
- stack 0: 0x50C
1225	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x50C
1226	 144	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1227	 146	ADD		 	 
- stack 0: 0x510
1228	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1229	 148	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1600000017300080186FFFF00BA000000D7000100F1000C010B03B001600000
1230	 149	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1600000017300080186FFFF00BA000000D7000100F1000C010B03B001600000
- stack 0: 0xF0
1231	 14B	SHR		 	 
- stack 1: 0x510
- stack 0: 0x160
1232	 14C	JUMP		 	 
- stack 0: 0x510
1233	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x510
1234	 161	PUSH4	80000000	 	 
- stack 1: 0x510
- stack 0: 0x80000000
1235	 166	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x80000000
- stack 0: 0x20
1236	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1237	 16A	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1238	 16C	ADD		 	 
- stack 0: 0x514
1239	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1240	 16E	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x17300080186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF
1241	 16F	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x17300080186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF
- stack 0: 0xF0
1242	 171	SHR		 	 
- stack 1: 0x514
- stack 0: 0x173
1243	 172	JUMP		 	 
- stack 0: 0x514
1244	 173	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x514
1245	 174	PUSH4	00008000	 	 
- stack 1: 0x514
- stack 0: 0x8000
1246	 179	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0x8000
- stack 0: 0x40
1247	 17C	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1248	 17D	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1249	 17F	ADD		 	 
- stack 0: 0x518
1250	 180	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1251	 181	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF8
1252	 182	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF8
- stack 0: 0xF0
1253	 184	SHR		 	 
- stack 1: 0x518
- stack 0: 0x186
1254	 185	JUMP		 	 
- stack 0: 0x518
1255	 186	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x518
1256	 187	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1257	 188	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF8
1258	 189	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x186FFFF00BA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF8
- stack 0: 0xE0
1259	 18B	SHR		 	 
- stack 1: 0x518
- stack 0: 0x186FFFF
1260	 18C	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x186FFFF
- stack 0: 0xFFFF
1261	 18F	AND		 	 
- stack 1: 0x518
- stack 0: 0xFFFF
1262	 190	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xFFFF
- stack 0: 0x1
1263	 192	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1264	 193	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1265	 196	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1266	 197	ADD		 	  ;; # ADDI 2
- stack 1: 0x518
- stack 0: 0x7FFF
1267	 198	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0x7FFF
- stack 0: 0x40
1268	 19B	MSTORE		 	  ;; # store to x2
- stack 0: 0x518
1269	 19C	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1270	 19E	ADD		 	 
- stack 0: 0x51C
1271	 19F	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1272	 1A0	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xBA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF800BA0000
1273	 1A1	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0xBA000000D7000100F1000C010B03B00160000001A5FFFF014DFFF800BA0000
- stack 0: 0xF0
1274	 1A3	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xBA
1275	 1A4	JUMP		 	 
- stack 0: 0x51C
1276	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x51C
1277	 BB	PUSH2	0040	 	 
- stack 1: 0x51C
- stack 0: 0x40
1278	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x51C
- stack 0: 0x7FFF
1279	 BF	PUSH1	03	 	 
- stack 2: 0x51C
- stack 1: 0x7FFF
- stack 0: 0x3
1280	 C1	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x7FFF
1281	 C2	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x7FFF
- stack 0: 0x20
1282	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x51C
- stack 1: 0x7FFF
- stack 0: 0x80000000
1283	 C6	PUSH1	03	 	 
- stack 3: 0x51C
- stack 2: 0x7FFF
- stack 1: 0x80000000
- stack 0: 0x3
1284	 C8	SIGNEXTEND		 	 
- stack 2: 0x51C
- stack 1: 0x7FFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
1285	 C9	SLT		 	 
- stack 1: 0x51C
- stack 0: 0x1
1286	 CA	PUSH2	0060	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x60
1287	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x51C
1288	 CE	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1289	 D0	ADD		 	 
- stack 0: 0x520
1290	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1291	 D2	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD7000100F1000C010B03B00160000001A5FFFF014DFFF800BA000000D70000
1292	 D3	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xD7000100F1000C010B03B00160000001A5FFFF014DFFF800BA000000D70000
- stack 0: 0xF0
1293	 D5	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD7
1294	 D6	JUMP		 	 
- stack 0: 0x520
1295	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x520
1296	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1297	 D9	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xD7000100F1000C010B03B00160000001A5FFFF014DFFF800BA000000D70000
1298	 DA	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xD7000100F1000C010B03B00160000001A5FFFF014DFFF800BA000000D70000
- stack 0: 0xE0
1299	 DC	SHR		 	 
- stack 1: 0x520
- stack 0: 0xD70001
1300	 DD	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xD70001
- stack 0: 0xFFFF
1301	 E0	AND		 	 
- stack 1: 0x520
- stack 0: 0x1
1302	 E1	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x1
1303	 E3	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x1
1304	 E4	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x1
- stack 0: 0x3A0
1305	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1306	 E8	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1307	 EA	ADD		 	 
- stack 0: 0x524
1308	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1309	 EC	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xF1000C010B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D
1310	 ED	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xF1000C010B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D
- stack 0: 0xF0
1311	 EF	SHR		 	 
- stack 1: 0x524
- stack 0: 0xF1
1312	 F0	JUMP		 	 
- stack 0: 0x524
1313	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1314	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1315	 F3	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xF1000C010B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D
1316	 F4	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xF1000C010B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D
- stack 0: 0xE0
1317	 F6	SHR		 	 
- stack 1: 0x524
- stack 0: 0xF1000C
1318	 F7	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xF1000C
- stack 0: 0xFFFF
1319	 FA	AND		 	 
- stack 1: 0x524
- stack 0: 0xC
1320	 FB	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xC
- stack 0: 0x1
1321	 FD	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xC
1322	 FE	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xC
- stack 0: 0x380
1323	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1324	 102	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1325	 104	ADD		 	 
- stack 0: 0x528
1326	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1327	 106	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x10B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D010B0394
1328	 107	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x10B03B00160000001A5FFFF014DFFF800BA000000D7000000F1000D010B0394
- stack 0: 0xF0
1329	 109	SHR		 	 
- stack 1: 0x528
- stack 0: 0x10B
1330	 10A	JUMP		 	 
- stack 0: 0x528
1331	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x528
1332	 10C	PUSH2	0060	 	 
- stack 1: 0x528
- stack 0: 0x60
1333	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x528
- stack 0: 0x1
1334	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1335	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x1
1336	 116	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x3A0
1337	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1338	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1339	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1340	 120	SUB		 	 
- stack 1: 0x528
- stack 0: 0x0
1341	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x129
1342	 124	JUMPI		 	 
- stack 0: 0x528
1343	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x528
- stack 0: 0x143
1344	 128	JUMP		 	 
- stack 0: 0x528
1345	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x528
1346	 144	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1347	 146	ADD		 	 
- stack 0: 0x52C
1348	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1349	 148	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x160000001A5FFFF014DFFF800BA000000D7000000F1000D010B039400860000
1350	 149	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x160000001A5FFFF014DFFF800BA000000D7000000F1000D010B039400860000
- stack 0: 0xF0
1351	 14B	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x160
1352	 14C	JUMP		 	 
- stack 0: 0x52C
1353	 160	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x52C
1354	 161	PUSH4	80000000	 	 
- stack 1: 0x52C
- stack 0: 0x80000000
1355	 166	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x80000000
- stack 0: 0x20
1356	 169	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1357	 16A	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1358	 16C	ADD		 	 
- stack 0: 0x530
1359	 16D	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1360	 16E	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x1A5FFFF014DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF
1361	 16F	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x1A5FFFF014DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF
- stack 0: 0xF0
1362	 171	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1A5
1363	 172	JUMP		 	 
- stack 0: 0x530
1364	 1A5	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x530
1365	 1A6	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1366	 1A7	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x1A5FFFF014DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF
1367	 1A8	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x1A5FFFF014DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF
- stack 0: 0xE0
1368	 1AA	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1A5FFFF
1369	 1AB	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1A5FFFF
- stack 0: 0xFFFF
1370	 1AE	AND		 	 
- stack 1: 0x530
- stack 0: 0xFFFF
1371	 1AF	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xFFFF
- stack 0: 0x1
1372	 1B1	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1373	 1B2	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1374	 1B5	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1375	 1B6	ADD		 	  ;; # ADDI 1
- stack 1: 0x530
- stack 0: 0x7FFFFFFF
1376	 1B7	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1377	 1BA	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1378	 1BB	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1379	 1BD	ADD		 	 
- stack 0: 0x534
1380	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1381	 1BF	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x14DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF00BA0000
1382	 1C0	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x14DFFF800BA000000D7000000F1000D010B03940086000000A0FFFF00BA0000
- stack 0: 0xF0
1383	 1C2	SHR		 	 
- stack 1: 0x534
- stack 0: 0x14D
1384	 1C3	JUMP		 	 
- stack 0: 0x534
1385	 14D	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x534
1386	 14E	PUSH4	ffff8000	 	 
- stack 1: 0x534
- stack 0: 0xFFFF8000
1387	 153	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0xFFFF8000
- stack 0: 0x40
1388	 156	MSTORE		 	  ;; # store to x2
- stack 0: 0x534
1389	 157	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1390	 159	ADD		 	 
- stack 0: 0x538
1391	 15A	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1392	 15B	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xBA000000D7000000F1000D010B03940086000000A0FFFF00BA000000D70000
1393	 15C	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xBA000000D7000000F1000D010B03940086000000A0FFFF00BA000000D70000
- stack 0: 0xF0
1394	 15E	SHR		 	 
- stack 1: 0x538
- stack 0: 0xBA
1395	 15F	JUMP		 	 
- stack 0: 0x538
1396	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x538
1397	 BB	PUSH2	0040	 	 
- stack 1: 0x538
- stack 0: 0x40
1398	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x538
- stack 0: 0xFFFF8000
1399	 BF	PUSH1	03	 	 
- stack 2: 0x538
- stack 1: 0xFFFF8000
- stack 0: 0x3
1400	 C1	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
1401	 C2	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x20
1402	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x7FFFFFFF
1403	 C6	PUSH1	03	 	 
- stack 3: 0x538
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1404	 C8	SIGNEXTEND		 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8000
- stack 0: 0x7FFFFFFF
1405	 C9	SLT		 	 
- stack 1: 0x538
- stack 0: 0x0
1406	 CA	PUSH2	0060	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x60
1407	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x538
1408	 CE	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1409	 D0	ADD		 	 
- stack 0: 0x53C
1410	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1411	 D2	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD7000000F1000D010B03940086000000A0FFFF00BA000000D7000000F1000E
1412	 D3	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xD7000000F1000D010B03940086000000A0FFFF00BA000000D7000000F1000E
- stack 0: 0xF0
1413	 D5	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD7
1414	 D6	JUMP		 	 
- stack 0: 0x53C
1415	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x53C
1416	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1417	 D9	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xD7000000F1000D010B03940086000000A0FFFF00BA000000D7000000F1000E
1418	 DA	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xD7000000F1000D010B03940086000000A0FFFF00BA000000D7000000F1000E
- stack 0: 0xE0
1419	 DC	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xD70000
1420	 DD	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0xD70000
- stack 0: 0xFFFF
1421	 E0	AND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1422	 E1	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1
1423	 E3	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1424	 E4	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x3A0
1425	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1426	 E8	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1427	 EA	ADD		 	 
- stack 0: 0x540
1428	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1429	 EC	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xF1000D010B03940086000000A0FFFF00BA000000D7000000F1000E010B037C
1430	 ED	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xF1000D010B03940086000000A0FFFF00BA000000D7000000F1000E010B037C
- stack 0: 0xF0
1431	 EF	SHR		 	 
- stack 1: 0x540
- stack 0: 0xF1
1432	 F0	JUMP		 	 
- stack 0: 0x540
1433	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1434	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1435	 F3	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xF1000D010B03940086000000A0FFFF00BA000000D7000000F1000E010B037C
1436	 F4	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xF1000D010B03940086000000A0FFFF00BA000000D7000000F1000E010B037C
- stack 0: 0xE0
1437	 F6	SHR		 	 
- stack 1: 0x540
- stack 0: 0xF1000D
1438	 F7	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xF1000D
- stack 0: 0xFFFF
1439	 FA	AND		 	 
- stack 1: 0x540
- stack 0: 0xD
1440	 FB	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xD
- stack 0: 0x1
1441	 FD	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xD
1442	 FE	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xD
- stack 0: 0x380
1443	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1444	 102	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1445	 104	ADD		 	 
- stack 0: 0x544
1446	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1447	 106	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x10B03940086000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF
1448	 107	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x10B03940086000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF
- stack 0: 0xF0
1449	 109	SHR		 	 
- stack 1: 0x544
- stack 0: 0x10B
1450	 10A	JUMP		 	 
- stack 0: 0x544
1451	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x544
1452	 10C	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
1453	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0x0
1454	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1455	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x0
1456	 116	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x3A0
1457	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x0
1458	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1459	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x0
1460	 120	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1461	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x129
1462	 124	JUMPI		 	 
- stack 0: 0x544
1463	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x544
- stack 0: 0x143
1464	 128	JUMP		 	 
- stack 0: 0x544
1465	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x544
1466	 144	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1467	 146	ADD		 	 
- stack 0: 0x548
1468	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1469	 148	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x86000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A00001
1470	 149	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x86000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A00001
- stack 0: 0xF0
1471	 14B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x86
1472	 14C	JUMP		 	 
- stack 0: 0x548
1473	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x548
1474	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1475	 88	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x86000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A00001
1476	 89	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x86000000A0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A00001
- stack 0: 0xE0
1477	 8B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x860000
1478	 8C	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x860000
- stack 0: 0xFFFF
1479	 8F	AND		 	 
- stack 1: 0x548
- stack 0: 0x0
1480	 90	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x1
1481	 92	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x0
1482	 93	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x0
- stack 0: 0x20
1483	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1484	 97	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1485	 99	ADD		 	 
- stack 0: 0x54C
1486	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1487	 9B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xA0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A0000100BA0000
1488	 9C	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xA0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A0000100BA0000
- stack 0: 0xF0
1489	 9E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xA0
1490	 9F	JUMP		 	 
- stack 0: 0x54C
1491	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x54C
1492	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1493	 A2	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xA0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A0000100BA0000
1494	 A3	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xA0FFFF00BA000000D7000000F1000E010B037C0086FFFF00A0000100BA0000
- stack 0: 0xE0
1495	 A5	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xA0FFFF
1496	 A6	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1497	 A9	AND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFF
1498	 AA	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xFFFF
- stack 0: 0x1
1499	 AC	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1500	 AD	PUSH2	0040	 	 
- stack 2: 0x54C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1501	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x54C
1502	 B1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1503	 B3	ADD		 	 
- stack 0: 0x550
1504	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1505	 B5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xBA000000D7000000F1000E010B037C0086FFFF00A0000100BA000000D70001
1506	 B6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xBA000000D7000000F1000E010B037C0086FFFF00A0000100BA000000D70001
- stack 0: 0xF0
1507	 B8	SHR		 	 
- stack 1: 0x550
- stack 0: 0xBA
1508	 B9	JUMP		 	 
- stack 0: 0x550
1509	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x550
1510	 BB	PUSH2	0040	 	 
- stack 1: 0x550
- stack 0: 0x40
1511	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1512	 BF	PUSH1	03	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1513	 C1	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1514	 C2	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1515	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1516	 C6	PUSH1	03	 	 
- stack 3: 0x550
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1517	 C8	SIGNEXTEND		 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1518	 C9	SLT		 	 
- stack 1: 0x550
- stack 0: 0x0
1519	 CA	PUSH2	0060	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x60
1520	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x550
1521	 CE	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1522	 D0	ADD		 	 
- stack 0: 0x554
1523	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1524	 D2	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xD7000000F1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F
1525	 D3	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xD7000000F1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F
- stack 0: 0xF0
1526	 D5	SHR		 	 
- stack 1: 0x554
- stack 0: 0xD7
1527	 D6	JUMP		 	 
- stack 0: 0x554
1528	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x554
1529	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1530	 D9	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xD7000000F1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F
1531	 DA	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xD7000000F1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F
- stack 0: 0xE0
1532	 DC	SHR		 	 
- stack 1: 0x554
- stack 0: 0xD70000
1533	 DD	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xD70000
- stack 0: 0xFFFF
1534	 E0	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1535	 E1	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1536	 E3	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1537	 E4	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x3A0
1538	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
1539	 E8	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1540	 EA	ADD		 	 
- stack 0: 0x558
1541	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1542	 EC	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F010B0364
1543	 ED	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xF1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F010B0364
- stack 0: 0xF0
1544	 EF	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF1
1545	 F0	JUMP		 	 
- stack 0: 0x558
1546	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x558
1547	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1548	 F3	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xF1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F010B0364
1549	 F4	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xF1000E010B037C0086FFFF00A0000100BA000000D7000100F1000F010B0364
- stack 0: 0xE0
1550	 F6	SHR		 	 
- stack 1: 0x558
- stack 0: 0xF1000E
1551	 F7	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xF1000E
- stack 0: 0xFFFF
1552	 FA	AND		 	 
- stack 1: 0x558
- stack 0: 0xE
1553	 FB	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xE
- stack 0: 0x1
1554	 FD	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xE
1555	 FE	PUSH2	0380	 	 
- stack 2: 0x558
- stack 1: 0xE
- stack 0: 0x380
1556	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x558
1557	 102	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1558	 104	ADD		 	 
- stack 0: 0x55C
1559	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1560	 106	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x10B037C0086FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF
1561	 107	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x10B037C0086FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF
- stack 0: 0xF0
1562	 109	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x10B
1563	 10A	JUMP		 	 
- stack 0: 0x55C
1564	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x55C
1565	 10C	PUSH2	0060	 	 
- stack 1: 0x55C
- stack 0: 0x60
1566	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x55C
- stack 0: 0x0
1567	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1568	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x55C
- stack 0: 0x0
1569	 116	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x3A0
1570	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x0
1571	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x55C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1572	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x0
1573	 120	SUB		 	 
- stack 1: 0x55C
- stack 0: 0x0
1574	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x129
1575	 124	JUMPI		 	 
- stack 0: 0x55C
1576	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x55C
- stack 0: 0x143
1577	 128	JUMP		 	 
- stack 0: 0x55C
1578	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x55C
1579	 144	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1580	 146	ADD		 	 
- stack 0: 0x560
1581	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1582	 148	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF
1583	 149	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x86FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF
- stack 0: 0xF0
1584	 14B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86
1585	 14C	JUMP		 	 
- stack 0: 0x560
1586	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x560
1587	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1588	 88	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF
1589	 89	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x86FFFF00A0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF
- stack 0: 0xE0
1590	 8B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86FFFF
1591	 8C	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1592	 8F	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFFF
1593	 90	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFFF
- stack 0: 0x1
1594	 92	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1595	 93	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1596	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1597	 97	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1598	 99	ADD		 	 
- stack 0: 0x564
1599	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1600	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA0000
1601	 9C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xA0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA0000
- stack 0: 0xF0
1602	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA0
1603	 9F	JUMP		 	 
- stack 0: 0x564
1604	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x564
1605	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1606	 A2	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA0000
1607	 A3	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0xA0000100BA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA0000
- stack 0: 0xE0
1608	 A5	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA00001
1609	 A6	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0xA00001
- stack 0: 0xFFFF
1610	 A9	AND		 	 
- stack 1: 0x564
- stack 0: 0x1
1611	 AA	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x1
1612	 AC	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x1
1613	 AD	PUSH2	0040	 	 
- stack 2: 0x564
- stack 1: 0x1
- stack 0: 0x40
1614	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x564
1615	 B1	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1616	 B3	ADD		 	 
- stack 0: 0x568
1617	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1618	 B5	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xBA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA000000D70000
1619	 B6	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xBA000000D7000100F1000F010B03640086FFFF00A0FFFF00BA000000D70000
- stack 0: 0xF0
1620	 B8	SHR		 	 
- stack 1: 0x568
- stack 0: 0xBA
1621	 B9	JUMP		 	 
- stack 0: 0x568
1622	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x568
1623	 BB	PUSH2	0040	 	 
- stack 1: 0x568
- stack 0: 0x40
1624	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x568
- stack 0: 0x1
1625	 BF	PUSH1	03	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x3
1626	 C1	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x1
1627	 C2	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x20
1628	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1629	 C6	PUSH1	03	 	 
- stack 3: 0x568
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1630	 C8	SIGNEXTEND		 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1631	 C9	SLT		 	 
- stack 1: 0x568
- stack 0: 0x1
1632	 CA	PUSH2	0060	 	 
- stack 2: 0x568
- stack 1: 0x1
- stack 0: 0x60
1633	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x568
1634	 CE	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1635	 D0	ADD		 	 
- stack 0: 0x56C
1636	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1637	 D2	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xD7000100F1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010
1638	 D3	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xD7000100F1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010
- stack 0: 0xF0
1639	 D5	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xD7
1640	 D6	JUMP		 	 
- stack 0: 0x56C
1641	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x56C
1642	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1643	 D9	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xD7000100F1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010
1644	 DA	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0xD7000100F1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010
- stack 0: 0xE0
1645	 DC	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xD70001
1646	 DD	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0xD70001
- stack 0: 0xFFFF
1647	 E0	AND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1648	 E1	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1
1649	 E3	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1650	 E4	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x3A0
1651	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x56C
1652	 E8	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1653	 EA	ADD		 	 
- stack 0: 0x570
1654	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1655	 EC	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xF1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C
1656	 ED	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0xF1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C
- stack 0: 0xF0
1657	 EF	SHR		 	 
- stack 1: 0x570
- stack 0: 0xF1
1658	 F0	JUMP		 	 
- stack 0: 0x570
1659	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x570
1660	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1661	 F3	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0xF1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C
1662	 F4	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0xF1000F010B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C
- stack 0: 0xE0
1663	 F6	SHR		 	 
- stack 1: 0x570
- stack 0: 0xF1000F
1664	 F7	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0xF1000F
- stack 0: 0xFFFF
1665	 FA	AND		 	 
- stack 1: 0x570
- stack 0: 0xF
1666	 FB	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xF
- stack 0: 0x1
1667	 FD	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xF
1668	 FE	PUSH2	0380	 	 
- stack 2: 0x570
- stack 1: 0xF
- stack 0: 0x380
1669	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x570
1670	 102	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1671	 104	ADD		 	 
- stack 0: 0x574
1672	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1673	 106	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x10B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E
1674	 107	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x10B03640086FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E
- stack 0: 0xF0
1675	 109	SHR		 	 
- stack 1: 0x574
- stack 0: 0x10B
1676	 10A	JUMP		 	 
- stack 0: 0x574
1677	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x574
1678	 10C	PUSH2	0060	 	 
- stack 1: 0x574
- stack 0: 0x60
1679	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x574
- stack 0: 0x1
1680	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1681	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x1
1682	 116	PUSH2	03A0	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x3A0
1683	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
1684	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1685	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x1
1686	 120	SUB		 	 
- stack 1: 0x574
- stack 0: 0x0
1687	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x129
1688	 124	JUMPI		 	 
- stack 0: 0x574
1689	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x574
- stack 0: 0x143
1690	 128	JUMP		 	 
- stack 0: 0x574
1691	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x574
1692	 144	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1693	 146	ADD		 	 
- stack 0: 0x578
1694	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1695	 148	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D
1696	 149	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x86FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D
- stack 0: 0xF0
1697	 14B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86
1698	 14C	JUMP		 	 
- stack 0: 0x578
1699	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x578
1700	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1701	 88	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x86FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D
1702	 89	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x86FFFF00A0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D
- stack 0: 0xE0
1703	 8B	SHR		 	 
- stack 1: 0x578
- stack 0: 0x86FFFF
1704	 8C	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1705	 8F	AND		 	 
- stack 1: 0x578
- stack 0: 0xFFFF
1706	 90	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0xFFFF
- stack 0: 0x1
1707	 92	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1708	 93	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1709	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1710	 97	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1711	 99	ADD		 	 
- stack 0: 0x57C
1712	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1713	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D01C40000
1714	 9C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xA0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D01C40000
- stack 0: 0xF0
1715	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0
1716	 9F	JUMP		 	 
- stack 0: 0x57C
1717	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x57C
1718	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1719	 A2	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xA0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D01C40000
1720	 A3	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xA0FFFF00BA000000D7000000F10010010B034C0086000E00A0000D01C40000
- stack 0: 0xE0
1721	 A5	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xA0FFFF
1722	 A6	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1723	 A9	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFF
1724	 AA	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFFFF
- stack 0: 0x1
1725	 AC	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1726	 AD	PUSH2	0040	 	 
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1727	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x57C
1728	 B1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1729	 B3	ADD		 	 
- stack 0: 0x580
1730	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1731	 B5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xBA000000D7000000F10010010B034C0086000E00A0000D01C4000000D70000
1732	 B6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xBA000000D7000000F10010010B034C0086000E00A0000D01C4000000D70000
- stack 0: 0xF0
1733	 B8	SHR		 	 
- stack 1: 0x580
- stack 0: 0xBA
1734	 B9	JUMP		 	 
- stack 0: 0x580
1735	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x580
1736	 BB	PUSH2	0040	 	 
- stack 1: 0x580
- stack 0: 0x40
1737	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1738	 BF	PUSH1	03	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1739	 C1	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1740	 C2	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1741	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1742	 C6	PUSH1	03	 	 
- stack 3: 0x580
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1743	 C8	SIGNEXTEND		 	 
- stack 2: 0x580
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1744	 C9	SLT		 	 
- stack 1: 0x580
- stack 0: 0x0
1745	 CA	PUSH2	0060	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x60
1746	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x580
1747	 CE	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1748	 D0	ADD		 	 
- stack 0: 0x584
1749	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1750	 D2	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xD7000000F10010010B034C0086000E00A0000D01C4000000D7000000F10011
1751	 D3	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xD7000000F10010010B034C0086000E00A0000D01C4000000D7000000F10011
- stack 0: 0xF0
1752	 D5	SHR		 	 
- stack 1: 0x584
- stack 0: 0xD7
1753	 D6	JUMP		 	 
- stack 0: 0x584
1754	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x584
1755	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1756	 D9	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xD7000000F10010010B034C0086000E00A0000D01C4000000D7000000F10011
1757	 DA	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xD7000000F10010010B034C0086000E00A0000D01C4000000D7000000F10011
- stack 0: 0xE0
1758	 DC	SHR		 	 
- stack 1: 0x584
- stack 0: 0xD70000
1759	 DD	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xD70000
- stack 0: 0xFFFF
1760	 E0	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
1761	 E1	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
1762	 E3	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
1763	 E4	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
1764	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
1765	 E8	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1766	 EA	ADD		 	 
- stack 0: 0x588
1767	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1768	 EC	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xF10010010B034C0086000E00A0000D01C4000000D7000000F1001101E10334
1769	 ED	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xF10010010B034C0086000E00A0000D01C4000000D7000000F1001101E10334
- stack 0: 0xF0
1770	 EF	SHR		 	 
- stack 1: 0x588
- stack 0: 0xF1
1771	 F0	JUMP		 	 
- stack 0: 0x588
1772	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x588
1773	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1774	 F3	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xF10010010B034C0086000E00A0000D01C4000000D7000000F1001101E10334
1775	 F4	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xF10010010B034C0086000E00A0000D01C4000000D7000000F1001101E10334
- stack 0: 0xE0
1776	 F6	SHR		 	 
- stack 1: 0x588
- stack 0: 0xF10010
1777	 F7	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xF10010
- stack 0: 0xFFFF
1778	 FA	AND		 	 
- stack 1: 0x588
- stack 0: 0x10
1779	 FB	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x10
- stack 0: 0x1
1780	 FD	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x10
1781	 FE	PUSH2	0380	 	 
- stack 2: 0x588
- stack 1: 0x10
- stack 0: 0x380
1782	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x588
1783	 102	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1784	 104	ADD		 	 
- stack 0: 0x58C
1785	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1786	 106	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x10B034C0086000E00A0000D01C4000000D7000000F1001101E103340086000B
1787	 107	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x10B034C0086000E00A0000D01C4000000D7000000F1001101E103340086000B
- stack 0: 0xF0
1788	 109	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x10B
1789	 10A	JUMP		 	 
- stack 0: 0x58C
1790	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x58C
1791	 10C	PUSH2	0060	 	 
- stack 1: 0x58C
- stack 0: 0x60
1792	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x58C
- stack 0: 0x0
1793	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1794	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x0
1795	 116	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x3A0
1796	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
1797	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1798	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x0
1799	 120	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
1800	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x129
1801	 124	JUMPI		 	 
- stack 0: 0x58C
1802	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x58C
- stack 0: 0x143
1803	 128	JUMP		 	 
- stack 0: 0x58C
1804	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x58C
1805	 144	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1806	 146	ADD		 	 
- stack 0: 0x590
1807	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1808	 148	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x86000E00A0000D01C4000000D7000000F1001101E103340086000B00A0000D
1809	 149	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x86000E00A0000D01C4000000D7000000F1001101E103340086000B00A0000D
- stack 0: 0xF0
1810	 14B	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86
1811	 14C	JUMP		 	 
- stack 0: 0x590
1812	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x590
1813	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1814	 88	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x86000E00A0000D01C4000000D7000000F1001101E103340086000B00A0000D
1815	 89	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x86000E00A0000D01C4000000D7000000F1001101E103340086000B00A0000D
- stack 0: 0xE0
1816	 8B	SHR		 	 
- stack 1: 0x590
- stack 0: 0x86000E
1817	 8C	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x86000E
- stack 0: 0xFFFF
1818	 8F	AND		 	 
- stack 1: 0x590
- stack 0: 0xE
1819	 90	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x1
1820	 92	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0xE
1821	 93	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x20
1822	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
1823	 97	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1824	 99	ADD		 	 
- stack 0: 0x594
1825	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1826	 9B	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xA0000D01C4000000D7000000F1001101E103340086000B00A0000D02230000
1827	 9C	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xA0000D01C4000000D7000000F1001101E103340086000B00A0000D02230000
- stack 0: 0xF0
1828	 9E	SHR		 	 
- stack 1: 0x594
- stack 0: 0xA0
1829	 9F	JUMP		 	 
- stack 0: 0x594
1830	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x594
1831	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
1832	 A2	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xA0000D01C4000000D7000000F1001101E103340086000B00A0000D02230000
1833	 A3	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0xA0000D01C4000000D7000000F1001101E103340086000B00A0000D02230000
- stack 0: 0xE0
1834	 A5	SHR		 	 
- stack 1: 0x594
- stack 0: 0xA0000D
1835	 A6	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0xA0000D
- stack 0: 0xFFFF
1836	 A9	AND		 	 
- stack 1: 0x594
- stack 0: 0xD
1837	 AA	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xD
- stack 0: 0x1
1838	 AC	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xD
1839	 AD	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0xD
- stack 0: 0x40
1840	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x594
1841	 B1	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1842	 B3	ADD		 	 
- stack 0: 0x598
1843	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1844	 B5	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x1C4000000D7000000F1001101E103340086000B00A0000D0223000000D70001
1845	 B6	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x1C4000000D7000000F1001101E103340086000B00A0000D0223000000D70001
- stack 0: 0xF0
1846	 B8	SHR		 	 
- stack 1: 0x598
- stack 0: 0x1C4
1847	 B9	JUMP		 	 
- stack 0: 0x598
1848	 1C4	JUMPDEST		 ;; __riscvimpl_SLT_1_1_2	  ;; # instr: slt ra,ra,sp(ignore imm)
- stack 0: 0x598
1849	 1C5	PUSH2	0040	 	 
- stack 1: 0x598
- stack 0: 0x40
1850	 1C8	MLOAD		 	  ;; # read from x2
- stack 1: 0x598
- stack 0: 0xD
1851	 1C9	PUSH1	03	 	 
- stack 2: 0x598
- stack 1: 0xD
- stack 0: 0x3
1852	 1CB	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0xD
1853	 1CC	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0xD
- stack 0: 0x20
1854	 1CF	MLOAD		 	  ;; # read from x1
- stack 2: 0x598
- stack 1: 0xD
- stack 0: 0xE
1855	 1D0	PUSH1	03	 	 
- stack 3: 0x598
- stack 2: 0xD
- stack 1: 0xE
- stack 0: 0x3
1856	 1D2	SIGNEXTEND		 	 
- stack 2: 0x598
- stack 1: 0xD
- stack 0: 0xE
1857	 1D3	SLT		 	 
- stack 1: 0x598
- stack 0: 0x0
1858	 1D4	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x20
1859	 1D7	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
1860	 1D8	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1861	 1DA	ADD		 	 
- stack 0: 0x59C
1862	 1DB	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1863	 1DC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xD7000000F1001101E103340086000B00A0000D0223000000D7000100F10012
1864	 1DD	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0xD7000000F1001101E103340086000B00A0000D0223000000D7000100F10012
- stack 0: 0xF0
1865	 1DF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xD7
1866	 1E0	JUMP		 	 
- stack 0: 0x59C
1867	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x59C
1868	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1869	 D9	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0xD7000000F1001101E103340086000B00A0000D0223000000D7000100F10012
1870	 DA	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0xD7000000F1001101E103340086000B00A0000D0223000000D7000100F10012
- stack 0: 0xE0
1871	 DC	SHR		 	 
- stack 1: 0x59C
- stack 0: 0xD70000
1872	 DD	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0xD70000
- stack 0: 0xFFFF
1873	 E0	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1874	 E1	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
1875	 E3	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1876	 E4	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x3A0
1877	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x59C
1878	 E8	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1879	 EA	ADD		 	 
- stack 0: 0x5A0
1880	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1881	 EC	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xF1001101E103340086000B00A0000D0223000000D7000100F100120240031C
1882	 ED	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xF1001101E103340086000B00A0000D0223000000D7000100F100120240031C
- stack 0: 0xF0
1883	 EF	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xF1
1884	 F0	JUMP		 	 
- stack 0: 0x5A0
1885	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A0
1886	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1887	 F3	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xF1001101E103340086000B00A0000D0223000000D7000100F100120240031C
1888	 F4	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xF1001101E103340086000B00A0000D0223000000D7000100F100120240031C
- stack 0: 0xE0
1889	 F6	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xF10011
1890	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xF10011
- stack 0: 0xFFFF
1891	 FA	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x11
1892	 FB	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x11
- stack 0: 0x1
1893	 FD	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x11
1894	 FE	PUSH2	0380	 	 
- stack 2: 0x5A0
- stack 1: 0x11
- stack 0: 0x380
1895	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A0
1896	 102	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1897	 104	ADD		 	 
- stack 0: 0x5A4
1898	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1899	 106	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1E103340086000B00A0000D0223000000D7000100F100120240031C0086000D
1900	 107	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1E103340086000B00A0000D0223000000D7000100F100120240031C0086000D
- stack 0: 0xF0
1901	 109	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1E1
1902	 10A	JUMP		 	 
- stack 0: 0x5A4
1903	 1E1	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x5A4
1904	 1E2	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
1905	 1E5	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x0
1906	 1E6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1907	 1EB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0x0
1908	 1EC	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x3A0
1909	 1EF	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x0
1910	 1F0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1911	 1F5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x0
1912	 1F6	SUB		 	 
- stack 1: 0x5A4
- stack 0: 0x0
1913	 1F7	PUSH2	01FF	 ;; _neq_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1FF
1914	 1FA	JUMPI		 	 
- stack 0: 0x5A4
1915	 1FB	PUSH2	0219	 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 1: 0x5A4
- stack 0: 0x219
1916	 1FE	JUMP		 	 
- stack 0: 0x5A4
1917	 219	JUMPDEST		 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 0: 0x5A4
1918	 21A	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1919	 21C	ADD		 	 
- stack 0: 0x5A8
1920	 21D	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1921	 21E	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x86000B00A0000D0223000000D7000100F100120240031C0086000D02820000
1922	 21F	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x86000B00A0000D0223000000D7000100F100120240031C0086000D02820000
- stack 0: 0xF0
1923	 221	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x86
1924	 222	JUMP		 	 
- stack 0: 0x5A8
1925	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A8
1926	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
1927	 88	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x86000B00A0000D0223000000D7000100F100120240031C0086000D02820000
1928	 89	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x86000B00A0000D0223000000D7000100F100120240031C0086000D02820000
- stack 0: 0xE0
1929	 8B	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x86000B
1930	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x86000B
- stack 0: 0xFFFF
1931	 8F	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xB
1932	 90	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0x1
1933	 92	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xB
1934	 93	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0x20
1935	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
1936	 97	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1937	 99	ADD		 	 
- stack 0: 0x5AC
1938	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1939	 9B	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000D0223000000D7000100F100120240031C0086000D0282000000D70000
1940	 9C	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000D0223000000D7000100F100120240031C0086000D0282000000D70000
- stack 0: 0xF0
1941	 9E	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xA0
1942	 9F	JUMP		 	 
- stack 0: 0x5AC
1943	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5AC
1944	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1945	 A2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000D0223000000D7000100F100120240031C0086000D0282000000D70000
1946	 A3	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000D0223000000D7000100F100120240031C0086000D0282000000D70000
- stack 0: 0xE0
1947	 A5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xA0000D
1948	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
1949	 A9	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xD
1950	 AA	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xD
- stack 0: 0x1
1951	 AC	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xD
1952	 AD	PUSH2	0040	 	 
- stack 2: 0x5AC
- stack 1: 0xD
- stack 0: 0x40
1953	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5AC
1954	 B1	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1955	 B3	ADD		 	 
- stack 0: 0x5B0
1956	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1957	 B5	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x223000000D7000100F100120240031C0086000D0282000000D7000000F10013
1958	 B6	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x223000000D7000100F100120240031C0086000D0282000000D7000000F10013
- stack 0: 0xF0
1959	 B8	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x223
1960	 B9	JUMP		 	 
- stack 0: 0x5B0
1961	 223	JUMPDEST		 ;; __riscvimpl_SLT_2_1_2	  ;; # instr: slt sp,ra,sp(ignore imm)
- stack 0: 0x5B0
1962	 224	PUSH2	0040	 	 
- stack 1: 0x5B0
- stack 0: 0x40
1963	 227	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B0
- stack 0: 0xD
1964	 228	PUSH1	03	 	 
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0x3
1965	 22A	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xD
1966	 22B	PUSH2	0020	 	 
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0x20
1967	 22E	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0xB
1968	 22F	PUSH1	03	 	 
- stack 3: 0x5B0
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
1969	 231	SIGNEXTEND		 	 
- stack 2: 0x5B0
- stack 1: 0xD
- stack 0: 0xB
1970	 232	SLT		 	 
- stack 1: 0x5B0
- stack 0: 0x1
1971	 233	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x1
- stack 0: 0x40
1972	 236	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
1973	 237	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1974	 239	ADD		 	 
- stack 0: 0x5B4
1975	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1976	 23B	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD7000100F100120240031C0086000D0282000000D7000000F1001301E10308
1977	 23C	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xD7000100F100120240031C0086000D0282000000D7000000F1001301E10308
- stack 0: 0xF0
1978	 23E	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD7
1979	 23F	JUMP		 	 
- stack 0: 0x5B4
1980	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5B4
1981	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
1982	 D9	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xD7000100F100120240031C0086000D0282000000D7000000F1001301E10308
1983	 DA	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0xD7000100F100120240031C0086000D0282000000D7000000F1001301E10308
- stack 0: 0xE0
1984	 DC	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xD70001
1985	 DD	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0xD70001
- stack 0: 0xFFFF
1986	 E0	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
1987	 E1	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x1
1988	 E3	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x1
1989	 E4	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x3A0
1990	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B4
1991	 E8	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1992	 EA	ADD		 	 
- stack 0: 0x5B8
1993	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1994	 EC	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF100120240031C0086000D0282000000D7000000F1001301E10308029F0000
1995	 ED	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xF100120240031C0086000D0282000000D7000000F1001301E10308029F0000
- stack 0: 0xF0
1996	 EF	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF1
1997	 F0	JUMP		 	 
- stack 0: 0x5B8
1998	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B8
1999	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2000	 F3	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xF100120240031C0086000D0282000000D7000000F1001301E10308029F0000
2001	 F4	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xF100120240031C0086000D0282000000D7000000F1001301E10308029F0000
- stack 0: 0xE0
2002	 F6	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xF10012
2003	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xF10012
- stack 0: 0xFFFF
2004	 FA	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x12
2005	 FB	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x12
- stack 0: 0x1
2006	 FD	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x12
2007	 FE	PUSH2	0380	 	 
- stack 2: 0x5B8
- stack 1: 0x12
- stack 0: 0x380
2008	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B8
2009	 102	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2010	 104	ADD		 	 
- stack 0: 0x5BC
2011	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2012	 106	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x240031C0086000D0282000000D7000000F1001301E10308029F00000086000B
2013	 107	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x240031C0086000D0282000000D7000000F1001301E10308029F00000086000B
- stack 0: 0xF0
2014	 109	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x240
2015	 10A	JUMP		 	 
- stack 0: 0x5BC
2016	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x5BC
2017	 241	PUSH2	0040	 	 
- stack 1: 0x5BC
- stack 0: 0x40
2018	 244	MLOAD		 	  ;; # read from x2
- stack 1: 0x5BC
- stack 0: 0x1
2019	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2020	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5BC
- stack 0: 0x1
2021	 24B	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x3A0
2022	 24E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x1
2023	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5BC
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2024	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5BC
- stack 1: 0x1
- stack 0: 0x1
2025	 255	SUB		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2026	 256	PUSH2	025E	 ;; _neq_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x25E
2027	 259	JUMPI		 	 
- stack 0: 0x5BC
2028	 25A	PUSH2	0278	 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 1: 0x5BC
- stack 0: 0x278
2029	 25D	JUMP		 	 
- stack 0: 0x5BC
2030	 278	JUMPDEST		 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 0: 0x5BC
2031	 279	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2032	 27B	ADD		 	 
- stack 0: 0x5C0
2033	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2034	 27D	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000D0282000000D7000000F1001301E10308029F00000086000B00A0000D
2035	 27E	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000D0282000000D7000000F1001301E10308029F00000086000B00A0000D
- stack 0: 0xF0
2036	 280	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86
2037	 281	JUMP		 	 
- stack 0: 0x5C0
2038	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5C0
2039	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2040	 88	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x86000D0282000000D7000000F1001301E10308029F00000086000B00A0000D
2041	 89	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x86000D0282000000D7000000F1001301E10308029F00000086000B00A0000D
- stack 0: 0xE0
2042	 8B	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x86000D
2043	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2044	 8F	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xD
2045	 90	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xD
- stack 0: 0x1
2046	 92	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xD
2047	 93	PUSH2	0020	 	 
- stack 2: 0x5C0
- stack 1: 0xD
- stack 0: 0x20
2048	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C0
2049	 97	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2050	 99	ADD		 	 
- stack 0: 0x5C4
2051	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2052	 9B	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x282000000D7000000F1001301E10308029F00000086000B00A0000D00BA0000
2053	 9C	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x282000000D7000000F1001301E10308029F00000086000B00A0000D00BA0000
- stack 0: 0xF0
2054	 9E	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x282
2055	 9F	JUMP		 	 
- stack 0: 0x5C4
2056	 282	JUMPDEST		 ;; __riscvimpl_SLT_1_1_1	  ;; # instr: slt ra,ra,ra(ignore imm)
- stack 0: 0x5C4
2057	 283	PUSH2	0020	 	 
- stack 1: 0x5C4
- stack 0: 0x20
2058	 286	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C4
- stack 0: 0xD
2059	 287	PUSH1	03	 	 
- stack 2: 0x5C4
- stack 1: 0xD
- stack 0: 0x3
2060	 289	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xD
2061	 28A	PUSH2	0020	 	 
- stack 2: 0x5C4
- stack 1: 0xD
- stack 0: 0x20
2062	 28D	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C4
- stack 1: 0xD
- stack 0: 0xD
2063	 28E	PUSH1	03	 	 
- stack 3: 0x5C4
- stack 2: 0xD
- stack 1: 0xD
- stack 0: 0x3
2064	 290	SIGNEXTEND		 	 
- stack 2: 0x5C4
- stack 1: 0xD
- stack 0: 0xD
2065	 291	SLT		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2066	 292	PUSH2	0020	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x20
2067	 295	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C4
2068	 296	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2069	 298	ADD		 	 
- stack 0: 0x5C8
2070	 299	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2071	 29A	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xD7000000F1001301E10308029F00000086000B00A0000D00BA000002B90000
2072	 29B	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xD7000000F1001301E10308029F00000086000B00A0000D00BA000002B90000
- stack 0: 0xF0
2073	 29D	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xD7
2074	 29E	JUMP		 	 
- stack 0: 0x5C8
2075	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5C8
2076	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2077	 D9	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xD7000000F1001301E10308029F00000086000B00A0000D00BA000002B90000
2078	 DA	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0xD7000000F1001301E10308029F00000086000B00A0000D00BA000002B90000
- stack 0: 0xE0
2079	 DC	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xD70000
2080	 DD	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0xD70000
- stack 0: 0xFFFF
2081	 E0	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2082	 E1	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
2083	 E3	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2084	 E4	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x3A0
2085	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C8
2086	 E8	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2087	 EA	ADD		 	 
- stack 0: 0x5CC
2088	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2089	 EC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xF1001301E10308029F00000086000B00A0000D00BA000002B9000002D80001
2090	 ED	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xF1001301E10308029F00000086000B00A0000D00BA000002B9000002D80001
- stack 0: 0xF0
2091	 EF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xF1
2092	 F0	JUMP		 	 
- stack 0: 0x5CC
2093	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5CC
2094	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2095	 F3	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xF1001301E10308029F00000086000B00A0000D00BA000002B9000002D80001
2096	 F4	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xF1001301E10308029F00000086000B00A0000D00BA000002B9000002D80001
- stack 0: 0xE0
2097	 F6	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xF10013
2098	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0xF10013
- stack 0: 0xFFFF
2099	 FA	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x13
2100	 FB	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x13
- stack 0: 0x1
2101	 FD	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x13
2102	 FE	PUSH2	0380	 	 
- stack 2: 0x5CC
- stack 1: 0x13
- stack 0: 0x380
2103	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5CC
2104	 102	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2105	 104	ADD		 	 
- stack 0: 0x5D0
2106	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2107	 106	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x1E10308029F00000086000B00A0000D00BA000002B9000002D8000102F70002
2108	 107	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x1E10308029F00000086000B00A0000D00BA000002B9000002D8000102F70002
- stack 0: 0xF0
2109	 109	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x1E1
2110	 10A	JUMP		 	 
- stack 0: 0x5D0
2111	 1E1	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x5D0
2112	 1E2	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
2113	 1E5	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x0
2114	 1E6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2115	 1EB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x0
2116	 1EC	PUSH2	03A0	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x3A0
2117	 1EF	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x0
2118	 1F0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2119	 1F5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x0
2120	 1F6	SUB		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2121	 1F7	PUSH2	01FF	 ;; _neq_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1FF
2122	 1FA	JUMPI		 	 
- stack 0: 0x5D0
2123	 1FB	PUSH2	0219	 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 1: 0x5D0
- stack 0: 0x219
2124	 1FE	JUMP		 	 
- stack 0: 0x5D0
2125	 219	JUMPDEST		 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 0: 0x5D0
2126	 21A	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2127	 21C	ADD		 	 
- stack 0: 0x5D4
2128	 21D	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2129	 21E	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x29F00000086000B00A0000D00BA000002B9000002D8000102F700020311FFE8
2130	 21F	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x29F00000086000B00A0000D00BA000002B9000002D8000102F700020311FFE8
- stack 0: 0xF0
2131	 221	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x29F
2132	 222	JUMP		 	 
- stack 0: 0x5D4
2133	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5D4
2134	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2135	 2A1	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x29F00000086000B00A0000D00BA000002B9000002D8000102F700020311FFE8
2136	 2A2	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x29F00000086000B00A0000D00BA000002B9000002D8000102F700020311FFE8
- stack 0: 0xE0
2137	 2A4	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x29F0000
2138	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x29F0000
- stack 0: 0xFFFF
2139	 2A8	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2140	 2A9	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2141	 2AB	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2142	 2AC	PUSH2	0080	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x80
2143	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D4
2144	 2B0	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2145	 2B2	ADD		 	 
- stack 0: 0x5D8
2146	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2147	 2B4	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
2148	 2B5	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
2149	 2B7	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86
2150	 2B8	JUMP		 	 
- stack 0: 0x5D8
2151	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D8
2152	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2153	 88	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
2154	 89	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
2155	 8B	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B
2156	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B
- stack 0: 0xFFFF
2157	 8F	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xB
2158	 90	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x1
2159	 92	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xB
2160	 93	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x20
2161	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2162	 97	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2163	 99	ADD		 	 
- stack 0: 0x5DC
2164	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2165	 9B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
2166	 9C	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
- stack 0: 0xF0
2167	 9E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xA0
2168	 9F	JUMP		 	 
- stack 0: 0x5DC
2169	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5DC
2170	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2171	 A2	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
2172	 A3	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
- stack 0: 0xE0
2173	 A5	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D
2174	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
2175	 A9	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xD
2176	 AA	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0x1
2177	 AC	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xD
2178	 AD	PUSH2	0040	 	 
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0x40
2179	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5DC
2180	 B1	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2181	 B3	ADD		 	 
- stack 0: 0x5E0
2182	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2183	 B5	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000002B9000002D8000102F700020311FFE800D7000100F10014035302DC
2184	 B6	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000002B9000002D8000102F700020311FFE800D7000100F10014035302DC
- stack 0: 0xF0
2185	 B8	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA
2186	 B9	JUMP		 	 
- stack 0: 0x5E0
2187	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x5E0
2188	 BB	PUSH2	0040	 	 
- stack 1: 0x5E0
- stack 0: 0x40
2189	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5E0
- stack 0: 0xD
2190	 BF	PUSH1	03	 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0x3
2191	 C1	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xD
2192	 C2	PUSH2	0020	 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0x20
2193	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0xB
2194	 C6	PUSH1	03	 	 
- stack 3: 0x5E0
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
2195	 C8	SIGNEXTEND		 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0xB
2196	 C9	SLT		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2197	 CA	PUSH2	0060	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x60
2198	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E0
2199	 CE	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2200	 D0	ADD		 	 
- stack 0: 0x5E4
2201	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2202	 D2	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
2203	 D3	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
- stack 0: 0xF0
2204	 D5	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9
2205	 D6	JUMP		 	 
- stack 0: 0x5E4
2206	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5E4
2207	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2208	 2BB	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
2209	 2BC	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
- stack 0: 0xE0
2210	 2BE	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2B90000
2211	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2B90000
- stack 0: 0xFFFF
2212	 2C2	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2213	 2C3	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2214	 2C5	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2215	 2C6	PUSH2	0060	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x60
2216	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2217	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x5E4
- stack 0: 0x1
2218	 2CB	PUSH2	00C0	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xC0
2219	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x5E4
2220	 2CF	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2221	 2D1	ADD		 	 
- stack 0: 0x5E8
2222	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2223	 2D3	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
2224	 2D4	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
- stack 0: 0xF0
2225	 2D6	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8
2226	 2D7	JUMP		 	 
- stack 0: 0x5E8
2227	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E8
2228	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2229	 2DA	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
2230	 2DB	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
- stack 0: 0xE0
2231	 2DD	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2D80001
2232	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2D80001
- stack 0: 0xFFFF
2233	 2E1	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2234	 2E2	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x1
2235	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2236	 2E5	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x80
2237	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x0
2238	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E8
- stack 0: 0x1
2239	 2EA	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x80
2240	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2241	 2EE	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2242	 2F0	ADD		 	 
- stack 0: 0x5EC
2243	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2244	 2F2	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
2245	 2F3	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
- stack 0: 0xF0
2246	 2F5	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F7
2247	 2F6	JUMP		 	 
- stack 0: 0x5EC
2248	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5EC
2249	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2250	 2F9	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
2251	 2FA	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
- stack 0: 0xE0
2252	 2FC	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F70002
2253	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2F70002
- stack 0: 0xFFFF
2254	 300	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2255	 301	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x1
2256	 303	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2257	 304	PUSH2	00A0	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0xA0
2258	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x5EC
2259	 308	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2260	 30A	ADD		 	 
- stack 0: 0x5F0
2261	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2262	 30C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
2263	 30D	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
- stack 0: 0xF0
2264	 30F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x311
2265	 310	JUMP		 	 
- stack 0: 0x5F0
2266	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5F0
2267	 312	PUSH2	0080	 	 
- stack 1: 0x5F0
- stack 0: 0x80
2268	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F0
- stack 0: 0x1
2269	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2270	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x1
2271	 31C	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x1
- stack 0: 0xA0
2272	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F0
- stack 1: 0x1
- stack 0: 0x2
2273	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2274	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0x1
- stack 0: 0x2
2275	 326	SUB		 	 
- stack 1: 0x5F0
- stack 0: 0x1
2276	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x5F0
- stack 1: 0x1
- stack 0: 0x32F
2277	 32A	JUMPI		 	 
- stack 0: 0x5F0
2278	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x5F0
2279	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2280	 331	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
2281	 332	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
- stack 0: 0xE0
2282	 334	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x311FFE8
2283	 335	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x311FFE8
- stack 0: 0xFFFF
2284	 338	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFE8
2285	 339	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFE8
- stack 0: 0x1
2286	 33B	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2287	 33C	ADD		 	 
- stack 0: 0x5D8
2288	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5D8
- stack 0: 0xFFFFFFFF
2289	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5D8
2290	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2291	 344	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
2292	 345	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
2293	 347	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86
2294	 348	JUMP		 	 
- stack 0: 0x5D8
2295	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D8
2296	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2297	 88	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
2298	 89	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B00A0000D00BA000002B9000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
2299	 8B	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x86000B
2300	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x86000B
- stack 0: 0xFFFF
2301	 8F	AND		 	 
- stack 1: 0x5D8
- stack 0: 0xB
2302	 90	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x1
2303	 92	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0xB
2304	 93	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x20
2305	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2306	 97	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2307	 99	ADD		 	 
- stack 0: 0x5DC
2308	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2309	 9B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
2310	 9C	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
- stack 0: 0xF0
2311	 9E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xA0
2312	 9F	JUMP		 	 
- stack 0: 0x5DC
2313	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5DC
2314	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2315	 A2	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
2316	 A3	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D00BA000002B9000002D8000102F700020311FFE800D7000100F10014
- stack 0: 0xE0
2317	 A5	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xA0000D
2318	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
2319	 A9	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xD
2320	 AA	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0x1
2321	 AC	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xD
2322	 AD	PUSH2	0040	 	 
- stack 2: 0x5DC
- stack 1: 0xD
- stack 0: 0x40
2323	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5DC
2324	 B1	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2325	 B3	ADD		 	 
- stack 0: 0x5E0
2326	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2327	 B5	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xBA000002B9000002D8000102F700020311FFE800D7000100F10014035302DC
2328	 B6	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xBA000002B9000002D8000102F700020311FFE800D7000100F10014035302DC
- stack 0: 0xF0
2329	 B8	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xBA
2330	 B9	JUMP		 	 
- stack 0: 0x5E0
2331	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x5E0
2332	 BB	PUSH2	0040	 	 
- stack 1: 0x5E0
- stack 0: 0x40
2333	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5E0
- stack 0: 0xD
2334	 BF	PUSH1	03	 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0x3
2335	 C1	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xD
2336	 C2	PUSH2	0020	 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0x20
2337	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0xB
2338	 C6	PUSH1	03	 	 
- stack 3: 0x5E0
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
2339	 C8	SIGNEXTEND		 	 
- stack 2: 0x5E0
- stack 1: 0xD
- stack 0: 0xB
2340	 C9	SLT		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2341	 CA	PUSH2	0060	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x60
2342	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E0
2343	 CE	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2344	 D0	ADD		 	 
- stack 0: 0x5E4
2345	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2346	 D2	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
2347	 D3	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
- stack 0: 0xF0
2348	 D5	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9
2349	 D6	JUMP		 	 
- stack 0: 0x5E4
2350	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5E4
2351	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2352	 2BB	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
2353	 2BC	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x2B9000002D8000102F700020311FFE800D7000100F10014035302DC029F0000
- stack 0: 0xE0
2354	 2BE	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x2B90000
2355	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2B90000
- stack 0: 0xFFFF
2356	 2C2	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2357	 2C3	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2358	 2C5	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2359	 2C6	PUSH2	0060	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x60
2360	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
2361	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x5E4
- stack 0: 0x1
2362	 2CB	PUSH2	00C0	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xC0
2363	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x5E4
2364	 2CF	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2365	 2D1	ADD		 	 
- stack 0: 0x5E8
2366	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2367	 2D3	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
2368	 2D4	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
- stack 0: 0xF0
2369	 2D6	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8
2370	 2D7	JUMP		 	 
- stack 0: 0x5E8
2371	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E8
2372	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2373	 2DA	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
2374	 2DB	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x2D8000102F700020311FFE800D7000100F10014035302DC029F00000086000E
- stack 0: 0xE0
2375	 2DD	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2D80001
2376	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2D80001
- stack 0: 0xFFFF
2377	 2E1	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2378	 2E2	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x1
2379	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2380	 2E5	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x80
2381	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x1
2382	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E8
- stack 0: 0x2
2383	 2EA	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x80
2384	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2385	 2EE	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2386	 2F0	ADD		 	 
- stack 0: 0x5EC
2387	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2388	 2F2	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
2389	 2F3	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
- stack 0: 0xF0
2390	 2F5	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F7
2391	 2F6	JUMP		 	 
- stack 0: 0x5EC
2392	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5EC
2393	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2394	 2F9	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
2395	 2FA	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x2F700020311FFE800D7000100F10014035302DC029F00000086000E00A0000D
- stack 0: 0xE0
2396	 2FC	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2F70002
2397	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2F70002
- stack 0: 0xFFFF
2398	 300	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2399	 301	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x1
2400	 303	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2401	 304	PUSH2	00A0	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0xA0
2402	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x5EC
2403	 308	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2404	 30A	ADD		 	 
- stack 0: 0x5F0
2405	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2406	 30C	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
2407	 30D	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x311FFE800D7000100F10014035302DC029F00000086000E00A0000D00BA0000
- stack 0: 0xF0
2408	 30F	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x311
2409	 310	JUMP		 	 
- stack 0: 0x5F0
2410	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5F0
2411	 312	PUSH2	0080	 	 
- stack 1: 0x5F0
- stack 0: 0x80
2412	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F0
- stack 0: 0x2
2413	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2414	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x2
2415	 31C	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
2416	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x2
2417	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2418	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x2
2419	 326	SUB		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2420	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x32F
2421	 32A	JUMPI		 	 
- stack 0: 0x5F0
2422	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x5F0
- stack 0: 0x349
2423	 32E	JUMP		 	 
- stack 0: 0x5F0
2424	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x5F0
2425	 34A	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2426	 34C	ADD		 	 
- stack 0: 0x5F4
2427	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2428	 34E	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD7000100F10014035302DC029F00000086000E00A0000D00BA000003950000
2429	 34F	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0xD7000100F10014035302DC029F00000086000E00A0000D00BA000003950000
- stack 0: 0xF0
2430	 351	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD7
2431	 352	JUMP		 	 
- stack 0: 0x5F4
2432	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5F4
2433	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2434	 D9	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0xD7000100F10014035302DC029F00000086000E00A0000D00BA000003950000
2435	 DA	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0xD7000100F10014035302DC029F00000086000E00A0000D00BA000003950000
- stack 0: 0xE0
2436	 DC	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0xD70001
2437	 DD	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0xD70001
- stack 0: 0xFFFF
2438	 E0	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
2439	 E1	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x1
2440	 E3	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x1
2441	 E4	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x3A0
2442	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F4
2443	 E8	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2444	 EA	ADD		 	 
- stack 0: 0x5F8
2445	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2446	 EC	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xF10014035302DC029F00000086000E00A0000D00BA00000395000002B90000
2447	 ED	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xF10014035302DC029F00000086000E00A0000D00BA00000395000002B90000
- stack 0: 0xF0
2448	 EF	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xF1
2449	 F0	JUMP		 	 
- stack 0: 0x5F8
2450	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F8
2451	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2452	 F3	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xF10014035302DC029F00000086000E00A0000D00BA00000395000002B90000
2453	 F4	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xF10014035302DC029F00000086000E00A0000D00BA00000395000002B90000
- stack 0: 0xE0
2454	 F6	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xF10014
2455	 F7	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xF10014
- stack 0: 0xFFFF
2456	 FA	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x14
2457	 FB	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x14
- stack 0: 0x1
2458	 FD	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x14
2459	 FE	PUSH2	0380	 	 
- stack 2: 0x5F8
- stack 1: 0x14
- stack 0: 0x380
2460	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F8
2461	 102	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2462	 104	ADD		 	 
- stack 0: 0x5FC
2463	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2464	 106	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x35302DC029F00000086000E00A0000D00BA00000395000002B9000002D80001
2465	 107	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x35302DC029F00000086000E00A0000D00BA00000395000002B9000002D80001
- stack 0: 0xF0
2466	 109	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x353
2467	 10A	JUMP		 	 
- stack 0: 0x5FC
2468	 353	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x5FC
2469	 354	PUSH2	00C0	 	 
- stack 1: 0x5FC
- stack 0: 0xC0
2470	 357	MLOAD		 	  ;; # read from x6
- stack 1: 0x5FC
- stack 0: 0x1
2471	 358	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2472	 35D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5FC
- stack 0: 0x1
2473	 35E	PUSH2	03A0	 	 
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x3A0
2474	 361	MLOAD		 	  ;; # read from x29
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x1
2475	 362	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5FC
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2476	 367	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5FC
- stack 1: 0x1
- stack 0: 0x1
2477	 368	SUB		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2478	 369	PUSH2	0371	 ;; _neq_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x371
2479	 36C	JUMPI		 	 
- stack 0: 0x5FC
2480	 36D	PUSH2	038B	 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 1: 0x5FC
- stack 0: 0x38B
2481	 370	JUMP		 	 
- stack 0: 0x5FC
2482	 38B	JUMPDEST		 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 0: 0x5FC
2483	 38C	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2484	 38E	ADD		 	 
- stack 0: 0x600
2485	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2486	 390	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x29F00000086000E00A0000D00BA00000395000002B9000002D8000102F70002
2487	 391	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x29F00000086000E00A0000D00BA00000395000002B9000002D8000102F70002
- stack 0: 0xF0
2488	 393	SHR		 	 
- stack 1: 0x600
- stack 0: 0x29F
2489	 394	JUMP		 	 
- stack 0: 0x600
2490	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x600
2491	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2492	 2A1	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x29F00000086000E00A0000D00BA00000395000002B9000002D8000102F70002
2493	 2A2	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x29F00000086000E00A0000D00BA00000395000002B9000002D8000102F70002
- stack 0: 0xE0
2494	 2A4	SHR		 	 
- stack 1: 0x600
- stack 0: 0x29F0000
2495	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x29F0000
- stack 0: 0xFFFF
2496	 2A8	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
2497	 2A9	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
2498	 2AB	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
2499	 2AC	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x80
2500	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2501	 2B0	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2502	 2B2	ADD		 	 
- stack 0: 0x604
2503	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2504	 2B4	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
2505	 2B5	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
- stack 0: 0xF0
2506	 2B7	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86
2507	 2B8	JUMP		 	 
- stack 0: 0x604
2508	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x604
2509	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2510	 88	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
2511	 89	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
- stack 0: 0xE0
2512	 8B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86000E
2513	 8C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x86000E
- stack 0: 0xFFFF
2514	 8F	AND		 	 
- stack 1: 0x604
- stack 0: 0xE
2515	 90	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0xE
- stack 0: 0x1
2516	 92	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0xE
2517	 93	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xE
- stack 0: 0x20
2518	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x604
2519	 97	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2520	 99	ADD		 	 
- stack 0: 0x608
2521	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2522	 9B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
2523	 9C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
2524	 9E	SHR		 	 
- stack 1: 0x608
- stack 0: 0xA0
2525	 9F	JUMP		 	 
- stack 0: 0x608
2526	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x608
2527	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2528	 A2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
2529	 A3	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
2530	 A5	SHR		 	 
- stack 1: 0x608
- stack 0: 0xA0000D
2531	 A6	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xA0000D
- stack 0: 0xFFFF
2532	 A9	AND		 	 
- stack 1: 0x608
- stack 0: 0xD
2533	 AA	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xD
- stack 0: 0x1
2534	 AC	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xD
2535	 AD	PUSH2	0040	 	 
- stack 2: 0x608
- stack 1: 0xD
- stack 0: 0x40
2536	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x608
2537	 B1	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2538	 B3	ADD		 	 
- stack 0: 0x60C
2539	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2540	 B5	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA00000395000002B9000002D8000102F700020311FFE400D7000000F10015
2541	 B6	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xBA00000395000002B9000002D8000102F700020311FFE400D7000000F10015
- stack 0: 0xF0
2542	 B8	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA
2543	 B9	JUMP		 	 
- stack 0: 0x60C
2544	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x60C
2545	 BB	PUSH2	0040	 	 
- stack 1: 0x60C
- stack 0: 0x40
2546	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x60C
- stack 0: 0xD
2547	 BF	PUSH1	03	 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0x3
2548	 C1	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xD
2549	 C2	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0x20
2550	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0xE
2551	 C6	PUSH1	03	 	 
- stack 3: 0x60C
- stack 2: 0xD
- stack 1: 0xE
- stack 0: 0x3
2552	 C8	SIGNEXTEND		 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0xE
2553	 C9	SLT		 	 
- stack 1: 0x60C
- stack 0: 0x0
2554	 CA	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x60
2555	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x60C
2556	 CE	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2557	 D0	ADD		 	 
- stack 0: 0x610
2558	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2559	 D2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
2560	 D3	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
- stack 0: 0xF0
2561	 D5	SHR		 	 
- stack 1: 0x610
- stack 0: 0x395
2562	 D6	JUMP		 	 
- stack 0: 0x610
2563	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x610
2564	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2565	 397	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
2566	 398	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
- stack 0: 0xE0
2567	 39A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x3950000
2568	 39B	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x3950000
- stack 0: 0xFFFF
2569	 39E	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
2570	 39F	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
2571	 3A1	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
2572	 3A2	POP		 	 
- stack 0: 0x610
2573	 3A3	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2574	 3A5	ADD		 	 
- stack 0: 0x614
2575	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2576	 3A7	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
2577	 3A8	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
- stack 0: 0xF0
2578	 3AA	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2B9
2579	 3AB	JUMP		 	 
- stack 0: 0x614
2580	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x614
2581	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2582	 2BB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
2583	 2BC	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
- stack 0: 0xE0
2584	 2BE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2B90000
2585	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2B90000
- stack 0: 0xFFFF
2586	 2C2	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
2587	 2C3	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
2588	 2C5	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
2589	 2C6	PUSH2	0060	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x60
2590	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x0
2591	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x614
- stack 0: 0x0
2592	 2CB	PUSH2	00C0	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0xC0
2593	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x614
2594	 2CF	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2595	 2D1	ADD		 	 
- stack 0: 0x618
2596	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2597	 2D3	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
2598	 2D4	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
- stack 0: 0xF0
2599	 2D6	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2D8
2600	 2D7	JUMP		 	 
- stack 0: 0x618
2601	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x618
2602	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2603	 2DA	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
2604	 2DB	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
- stack 0: 0xE0
2605	 2DD	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2D80001
2606	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x2D80001
- stack 0: 0xFFFF
2607	 2E1	AND		 	 
- stack 1: 0x618
- stack 0: 0x1
2608	 2E2	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
2609	 2E4	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x1
2610	 2E5	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
2611	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x0
2612	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x618
- stack 0: 0x1
2613	 2EA	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
2614	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
2615	 2EE	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2616	 2F0	ADD		 	 
- stack 0: 0x61C
2617	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2618	 2F2	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
2619	 2F3	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
- stack 0: 0xF0
2620	 2F5	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2F7
2621	 2F6	JUMP		 	 
- stack 0: 0x61C
2622	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x61C
2623	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2624	 2F9	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
2625	 2FA	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
- stack 0: 0xE0
2626	 2FC	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2F70002
2627	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2F70002
- stack 0: 0xFFFF
2628	 300	AND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2629	 301	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x1
2630	 303	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2631	 304	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
2632	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x61C
2633	 308	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2634	 30A	ADD		 	 
- stack 0: 0x620
2635	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2636	 30C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
2637	 30D	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
- stack 0: 0xF0
2638	 30F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x311
2639	 310	JUMP		 	 
- stack 0: 0x620
2640	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x620
2641	 312	PUSH2	0080	 	 
- stack 1: 0x620
- stack 0: 0x80
2642	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x620
- stack 0: 0x1
2643	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2644	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x1
2645	 31C	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0xA0
2646	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x2
2647	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2648	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x2
2649	 326	SUB		 	 
- stack 1: 0x620
- stack 0: 0x1
2650	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x32F
2651	 32A	JUMPI		 	 
- stack 0: 0x620
2652	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x620
2653	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2654	 331	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
2655	 332	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
- stack 0: 0xE0
2656	 334	SHR		 	 
- stack 1: 0x620
- stack 0: 0x311FFE4
2657	 335	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
2658	 338	AND		 	 
- stack 1: 0x620
- stack 0: 0xFFE4
2659	 339	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xFFE4
- stack 0: 0x1
2660	 33B	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2661	 33C	ADD		 	 
- stack 0: 0x604
2662	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x604
- stack 0: 0xFFFFFFFF
2663	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x604
2664	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2665	 344	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
2666	 345	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
- stack 0: 0xF0
2667	 347	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86
2668	 348	JUMP		 	 
- stack 0: 0x604
2669	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x604
2670	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2671	 88	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
2672	 89	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x86000E00A0000D00BA00000395000002B9000002D8000102F700020311FFE4
- stack 0: 0xE0
2673	 8B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x86000E
2674	 8C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x86000E
- stack 0: 0xFFFF
2675	 8F	AND		 	 
- stack 1: 0x604
- stack 0: 0xE
2676	 90	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0xE
- stack 0: 0x1
2677	 92	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0xE
2678	 93	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xE
- stack 0: 0x20
2679	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x604
2680	 97	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2681	 99	ADD		 	 
- stack 0: 0x608
2682	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2683	 9B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
2684	 9C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
2685	 9E	SHR		 	 
- stack 1: 0x608
- stack 0: 0xA0
2686	 9F	JUMP		 	 
- stack 0: 0x608
2687	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x608
2688	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2689	 A2	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
2690	 A3	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xA0000D00BA00000395000002B9000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
2691	 A5	SHR		 	 
- stack 1: 0x608
- stack 0: 0xA0000D
2692	 A6	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0xA0000D
- stack 0: 0xFFFF
2693	 A9	AND		 	 
- stack 1: 0x608
- stack 0: 0xD
2694	 AA	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xD
- stack 0: 0x1
2695	 AC	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xD
2696	 AD	PUSH2	0040	 	 
- stack 2: 0x608
- stack 1: 0xD
- stack 0: 0x40
2697	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x608
2698	 B1	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2699	 B3	ADD		 	 
- stack 0: 0x60C
2700	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2701	 B5	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0xBA00000395000002B9000002D8000102F700020311FFE400D7000000F10015
2702	 B6	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0xBA00000395000002B9000002D8000102F700020311FFE400D7000000F10015
- stack 0: 0xF0
2703	 B8	SHR		 	 
- stack 1: 0x60C
- stack 0: 0xBA
2704	 B9	JUMP		 	 
- stack 0: 0x60C
2705	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x60C
2706	 BB	PUSH2	0040	 	 
- stack 1: 0x60C
- stack 0: 0x40
2707	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x60C
- stack 0: 0xD
2708	 BF	PUSH1	03	 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0x3
2709	 C1	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xD
2710	 C2	PUSH2	0020	 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0x20
2711	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0xE
2712	 C6	PUSH1	03	 	 
- stack 3: 0x60C
- stack 2: 0xD
- stack 1: 0xE
- stack 0: 0x3
2713	 C8	SIGNEXTEND		 	 
- stack 2: 0x60C
- stack 1: 0xD
- stack 0: 0xE
2714	 C9	SLT		 	 
- stack 1: 0x60C
- stack 0: 0x0
2715	 CA	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x60
2716	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x60C
2717	 CE	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2718	 D0	ADD		 	 
- stack 0: 0x610
2719	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2720	 D2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
2721	 D3	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
- stack 0: 0xF0
2722	 D5	SHR		 	 
- stack 1: 0x610
- stack 0: 0x395
2723	 D6	JUMP		 	 
- stack 0: 0x610
2724	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x610
2725	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2726	 397	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
2727	 398	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x395000002B9000002D8000102F700020311FFE400D7000000F10015035302AC
- stack 0: 0xE0
2728	 39A	SHR		 	 
- stack 1: 0x610
- stack 0: 0x3950000
2729	 39B	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x3950000
- stack 0: 0xFFFF
2730	 39E	AND		 	 
- stack 1: 0x610
- stack 0: 0x0
2731	 39F	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x1
2732	 3A1	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x0
2733	 3A2	POP		 	 
- stack 0: 0x610
2734	 3A3	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2735	 3A5	ADD		 	 
- stack 0: 0x614
2736	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2737	 3A7	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
2738	 3A8	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
- stack 0: 0xF0
2739	 3AA	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2B9
2740	 3AB	JUMP		 	 
- stack 0: 0x614
2741	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x614
2742	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2743	 2BB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
2744	 2BC	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x2B9000002D8000102F700020311FFE400D7000000F10015035302AC029F0000
- stack 0: 0xE0
2745	 2BE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2B90000
2746	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2B90000
- stack 0: 0xFFFF
2747	 2C2	AND		 	 
- stack 1: 0x614
- stack 0: 0x0
2748	 2C3	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1
2749	 2C5	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x0
2750	 2C6	PUSH2	0060	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x60
2751	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x0
2752	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x614
- stack 0: 0x0
2753	 2CB	PUSH2	00C0	 	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0xC0
2754	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x614
2755	 2CF	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2756	 2D1	ADD		 	 
- stack 0: 0x618
2757	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2758	 2D3	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
2759	 2D4	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
- stack 0: 0xF0
2760	 2D6	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2D8
2761	 2D7	JUMP		 	 
- stack 0: 0x618
2762	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x618
2763	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2764	 2DA	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
2765	 2DB	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x2D8000102F700020311FFE400D7000000F10015035302AC029F00000086000C
- stack 0: 0xE0
2766	 2DD	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2D80001
2767	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x2D80001
- stack 0: 0xFFFF
2768	 2E1	AND		 	 
- stack 1: 0x618
- stack 0: 0x1
2769	 2E2	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
2770	 2E4	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x1
2771	 2E5	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
2772	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
2773	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x618
- stack 0: 0x2
2774	 2EA	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x80
2775	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
2776	 2EE	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2777	 2F0	ADD		 	 
- stack 0: 0x61C
2778	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2779	 2F2	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
2780	 2F3	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
- stack 0: 0xF0
2781	 2F5	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2F7
2782	 2F6	JUMP		 	 
- stack 0: 0x61C
2783	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x61C
2784	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2785	 2F9	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
2786	 2FA	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x2F700020311FFE400D7000000F10015035302AC029F00000086000C00A0000D
- stack 0: 0xE0
2787	 2FC	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2F70002
2788	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2F70002
- stack 0: 0xFFFF
2789	 300	AND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2790	 301	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x1
2791	 303	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2792	 304	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
2793	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x61C
2794	 308	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2795	 30A	ADD		 	 
- stack 0: 0x620
2796	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2797	 30C	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
2798	 30D	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x311FFE400D7000000F10015035302AC029F00000086000C00A0000D00BA0000
- stack 0: 0xF0
2799	 30F	SHR		 	 
- stack 1: 0x620
- stack 0: 0x311
2800	 310	JUMP		 	 
- stack 0: 0x620
2801	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x620
2802	 312	PUSH2	0080	 	 
- stack 1: 0x620
- stack 0: 0x80
2803	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x620
- stack 0: 0x2
2804	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2805	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x2
2806	 31C	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
2807	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x2
2808	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2809	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x2
2810	 326	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
2811	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x32F
2812	 32A	JUMPI		 	 
- stack 0: 0x620
2813	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x620
- stack 0: 0x349
2814	 32E	JUMP		 	 
- stack 0: 0x620
2815	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x620
2816	 34A	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2817	 34C	ADD		 	 
- stack 0: 0x624
2818	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2819	 34E	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xD7000000F10015035302AC029F00000086000C00A0000D00BA000003950000
2820	 34F	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xD7000000F10015035302AC029F00000086000C00A0000D00BA000003950000
- stack 0: 0xF0
2821	 351	SHR		 	 
- stack 1: 0x624
- stack 0: 0xD7
2822	 352	JUMP		 	 
- stack 0: 0x624
2823	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x624
2824	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
2825	 D9	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xD7000000F10015035302AC029F00000086000C00A0000D00BA000003950000
2826	 DA	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0xD7000000F10015035302AC029F00000086000C00A0000D00BA000003950000
- stack 0: 0xE0
2827	 DC	SHR		 	 
- stack 1: 0x624
- stack 0: 0xD70000
2828	 DD	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0xD70000
- stack 0: 0xFFFF
2829	 E0	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
2830	 E1	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
2831	 E3	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
2832	 E4	PUSH2	03A0	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x3A0
2833	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x624
2834	 E8	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2835	 EA	ADD		 	 
- stack 0: 0x628
2836	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2837	 EC	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xF10015035302AC029F00000086000C00A0000D00BA00000395000003950000
2838	 ED	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xF10015035302AC029F00000086000C00A0000D00BA00000395000003950000
- stack 0: 0xF0
2839	 EF	SHR		 	 
- stack 1: 0x628
- stack 0: 0xF1
2840	 F0	JUMP		 	 
- stack 0: 0x628
2841	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x628
2842	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2843	 F3	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xF10015035302AC029F00000086000C00A0000D00BA00000395000003950000
2844	 F4	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0xF10015035302AC029F00000086000C00A0000D00BA00000395000003950000
- stack 0: 0xE0
2845	 F6	SHR		 	 
- stack 1: 0x628
- stack 0: 0xF10015
2846	 F7	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0xF10015
- stack 0: 0xFFFF
2847	 FA	AND		 	 
- stack 1: 0x628
- stack 0: 0x15
2848	 FB	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x15
- stack 0: 0x1
2849	 FD	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x15
2850	 FE	PUSH2	0380	 	 
- stack 2: 0x628
- stack 1: 0x15
- stack 0: 0x380
2851	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x628
2852	 102	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2853	 104	ADD		 	 
- stack 0: 0x62C
2854	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2855	 106	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x35302AC029F00000086000C00A0000D00BA0000039500000395000002B90000
2856	 107	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x35302AC029F00000086000C00A0000D00BA0000039500000395000002B90000
- stack 0: 0xF0
2857	 109	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x353
2858	 10A	JUMP		 	 
- stack 0: 0x62C
2859	 353	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x62C
2860	 354	PUSH2	00C0	 	 
- stack 1: 0x62C
- stack 0: 0xC0
2861	 357	MLOAD		 	  ;; # read from x6
- stack 1: 0x62C
- stack 0: 0x0
2862	 358	PUSH4	FFFFFFFF	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2863	 35D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x62C
- stack 0: 0x0
2864	 35E	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x3A0
2865	 361	MLOAD		 	  ;; # read from x29
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x0
2866	 362	PUSH4	FFFFFFFF	 	 
- stack 3: 0x62C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2867	 367	AND		 	  ;; # mask to 32 bits
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x0
2868	 368	SUB		 	 
- stack 1: 0x62C
- stack 0: 0x0
2869	 369	PUSH2	0371	 ;; _neq_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x371
2870	 36C	JUMPI		 	 
- stack 0: 0x62C
2871	 36D	PUSH2	038B	 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 1: 0x62C
- stack 0: 0x38B
2872	 370	JUMP		 	 
- stack 0: 0x62C
2873	 38B	JUMPDEST		 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 0: 0x62C
2874	 38C	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2875	 38E	ADD		 	 
- stack 0: 0x630
2876	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2877	 390	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x29F00000086000C00A0000D00BA0000039500000395000002B9000002D80001
2878	 391	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x29F00000086000C00A0000D00BA0000039500000395000002B9000002D80001
- stack 0: 0xF0
2879	 393	SHR		 	 
- stack 1: 0x630
- stack 0: 0x29F
2880	 394	JUMP		 	 
- stack 0: 0x630
2881	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x630
2882	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2883	 2A1	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x29F00000086000C00A0000D00BA0000039500000395000002B9000002D80001
2884	 2A2	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x29F00000086000C00A0000D00BA0000039500000395000002B9000002D80001
- stack 0: 0xE0
2885	 2A4	SHR		 	 
- stack 1: 0x630
- stack 0: 0x29F0000
2886	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x29F0000
- stack 0: 0xFFFF
2887	 2A8	AND		 	 
- stack 1: 0x630
- stack 0: 0x0
2888	 2A9	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x1
2889	 2AB	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x0
2890	 2AC	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x80
2891	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
2892	 2B0	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2893	 2B2	ADD		 	 
- stack 0: 0x634
2894	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2895	 2B4	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
2896	 2B5	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
- stack 0: 0xF0
2897	 2B7	SHR		 	 
- stack 1: 0x634
- stack 0: 0x86
2898	 2B8	JUMP		 	 
- stack 0: 0x634
2899	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
2900	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
2901	 88	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
2902	 89	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
- stack 0: 0xE0
2903	 8B	SHR		 	 
- stack 1: 0x634
- stack 0: 0x86000C
2904	 8C	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x86000C
- stack 0: 0xFFFF
2905	 8F	AND		 	 
- stack 1: 0x634
- stack 0: 0xC
2906	 90	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xC
- stack 0: 0x1
2907	 92	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xC
2908	 93	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xC
- stack 0: 0x20
2909	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
2910	 97	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2911	 99	ADD		 	 
- stack 0: 0x638
2912	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2913	 9B	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
2914	 9C	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
- stack 0: 0xF0
2915	 9E	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0
2916	 9F	JUMP		 	 
- stack 0: 0x638
2917	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x638
2918	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
2919	 A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
2920	 A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
- stack 0: 0xE0
2921	 A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0000D
2922	 A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xA0000D
- stack 0: 0xFFFF
2923	 A9	AND		 	 
- stack 1: 0x638
- stack 0: 0xD
2924	 AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xD
- stack 0: 0x1
2925	 AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xD
2926	 AD	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xD
- stack 0: 0x40
2927	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
2928	 B1	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2929	 B3	ADD		 	 
- stack 0: 0x63C
2930	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2931	 B5	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBA0000039500000395000002B9000002D8000102F700020311FFE000D70001
2932	 B6	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBA0000039500000395000002B9000002D8000102F700020311FFE000D70001
- stack 0: 0xF0
2933	 B8	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
2934	 B9	JUMP		 	 
- stack 0: 0x63C
2935	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x63C
2936	 BB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
2937	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xD
2938	 BF	PUSH1	03	 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0x3
2939	 C1	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xD
2940	 C2	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0x20
2941	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0xC
2942	 C6	PUSH1	03	 	 
- stack 3: 0x63C
- stack 2: 0xD
- stack 1: 0xC
- stack 0: 0x3
2943	 C8	SIGNEXTEND		 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0xC
2944	 C9	SLT		 	 
- stack 1: 0x63C
- stack 0: 0x1
2945	 CA	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x60
2946	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
2947	 CE	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2948	 D0	ADD		 	 
- stack 0: 0x640
2949	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2950	 D2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
2951	 D3	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
- stack 0: 0xF0
2952	 D5	SHR		 	 
- stack 1: 0x640
- stack 0: 0x395
2953	 D6	JUMP		 	 
- stack 0: 0x640
2954	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
2955	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2956	 397	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
2957	 398	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
- stack 0: 0xE0
2958	 39A	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3950000
2959	 39B	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3950000
- stack 0: 0xFFFF
2960	 39E	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
2961	 39F	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
2962	 3A1	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
2963	 3A2	POP		 	 
- stack 0: 0x640
2964	 3A3	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2965	 3A5	ADD		 	 
- stack 0: 0x644
2966	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2967	 3A7	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
2968	 3A8	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
- stack 0: 0xF0
2969	 3AA	SHR		 	 
- stack 1: 0x644
- stack 0: 0x395
2970	 3AB	JUMP		 	 
- stack 0: 0x644
2971	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x644
2972	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
2973	 397	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
2974	 398	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
- stack 0: 0xE0
2975	 39A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3950000
2976	 39B	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3950000
- stack 0: 0xFFFF
2977	 39E	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
2978	 39F	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
2979	 3A1	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
2980	 3A2	POP		 	 
- stack 0: 0x644
2981	 3A3	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2982	 3A5	ADD		 	 
- stack 0: 0x648
2983	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2984	 3A7	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
2985	 3A8	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
- stack 0: 0xF0
2986	 3AA	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B9
2987	 3AB	JUMP		 	 
- stack 0: 0x648
2988	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x648
2989	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2990	 2BB	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
2991	 2BC	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
- stack 0: 0xE0
2992	 2BE	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B90000
2993	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x2B90000
- stack 0: 0xFFFF
2994	 2C2	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
2995	 2C3	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
2996	 2C5	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
2997	 2C6	PUSH2	0060	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x60
2998	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
2999	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x648
- stack 0: 0x1
3000	 2CB	PUSH2	00C0	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xC0
3001	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x648
3002	 2CF	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3003	 2D1	ADD		 	 
- stack 0: 0x64C
3004	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3005	 2D3	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
3006	 2D4	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
- stack 0: 0xF0
3007	 2D6	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2D8
3008	 2D7	JUMP		 	 
- stack 0: 0x64C
3009	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x64C
3010	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3011	 2DA	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
3012	 2DB	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
- stack 0: 0xE0
3013	 2DD	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2D80001
3014	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3015	 2E1	AND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3016	 2E2	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1
3017	 2E4	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3018	 2E5	PUSH2	0080	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x80
3019	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x0
3020	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x64C
- stack 0: 0x1
3021	 2EA	PUSH2	0080	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x80
3022	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x64C
3023	 2EE	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3024	 2F0	ADD		 	 
- stack 0: 0x650
3025	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3026	 2F2	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
3027	 2F3	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
- stack 0: 0xF0
3028	 2F5	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F7
3029	 2F6	JUMP		 	 
- stack 0: 0x650
3030	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x650
3031	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3032	 2F9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
3033	 2FA	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
- stack 0: 0xE0
3034	 2FC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F70002
3035	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3036	 300	AND		 	 
- stack 1: 0x650
- stack 0: 0x2
3037	 301	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x1
3038	 303	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x2
3039	 304	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xA0
3040	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x650
3041	 308	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3042	 30A	ADD		 	 
- stack 0: 0x654
3043	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3044	 30C	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
3045	 30D	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
- stack 0: 0xF0
3046	 30F	SHR		 	 
- stack 1: 0x654
- stack 0: 0x311
3047	 310	JUMP		 	 
- stack 0: 0x654
3048	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x654
3049	 312	PUSH2	0080	 	 
- stack 1: 0x654
- stack 0: 0x80
3050	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x654
- stack 0: 0x1
3051	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3052	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x1
3053	 31C	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0xA0
3054	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x2
3055	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3056	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x2
3057	 326	SUB		 	 
- stack 1: 0x654
- stack 0: 0x1
3058	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x32F
3059	 32A	JUMPI		 	 
- stack 0: 0x654
3060	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x654
3061	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3062	 331	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
3063	 332	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
- stack 0: 0xE0
3064	 334	SHR		 	 
- stack 1: 0x654
- stack 0: 0x311FFE0
3065	 335	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x311FFE0
- stack 0: 0xFFFF
3066	 338	AND		 	 
- stack 1: 0x654
- stack 0: 0xFFE0
3067	 339	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xFFE0
- stack 0: 0x1
3068	 33B	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3069	 33C	ADD		 	 
- stack 0: 0x634
3070	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x634
- stack 0: 0xFFFFFFFF
3071	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x634
3072	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3073	 344	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
3074	 345	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
- stack 0: 0xF0
3075	 347	SHR		 	 
- stack 1: 0x634
- stack 0: 0x86
3076	 348	JUMP		 	 
- stack 0: 0x634
3077	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x634
3078	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3079	 88	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
3080	 89	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x86000C00A0000D00BA0000039500000395000002B9000002D8000102F70002
- stack 0: 0xE0
3081	 8B	SHR		 	 
- stack 1: 0x634
- stack 0: 0x86000C
3082	 8C	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x86000C
- stack 0: 0xFFFF
3083	 8F	AND		 	 
- stack 1: 0x634
- stack 0: 0xC
3084	 90	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0xC
- stack 0: 0x1
3085	 92	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0xC
3086	 93	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xC
- stack 0: 0x20
3087	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x634
3088	 97	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3089	 99	ADD		 	 
- stack 0: 0x638
3090	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3091	 9B	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
3092	 9C	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
- stack 0: 0xF0
3093	 9E	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0
3094	 9F	JUMP		 	 
- stack 0: 0x638
3095	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x638
3096	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3097	 A2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
3098	 A3	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xA0000D00BA0000039500000395000002B9000002D8000102F700020311FFE0
- stack 0: 0xE0
3099	 A5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xA0000D
3100	 A6	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xA0000D
- stack 0: 0xFFFF
3101	 A9	AND		 	 
- stack 1: 0x638
- stack 0: 0xD
3102	 AA	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xD
- stack 0: 0x1
3103	 AC	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xD
3104	 AD	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0xD
- stack 0: 0x40
3105	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
3106	 B1	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3107	 B3	ADD		 	 
- stack 0: 0x63C
3108	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3109	 B5	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xBA0000039500000395000002B9000002D8000102F700020311FFE000D70001
3110	 B6	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xBA0000039500000395000002B9000002D8000102F700020311FFE000D70001
- stack 0: 0xF0
3111	 B8	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xBA
3112	 B9	JUMP		 	 
- stack 0: 0x63C
3113	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x63C
3114	 BB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
3115	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xD
3116	 BF	PUSH1	03	 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0x3
3117	 C1	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xD
3118	 C2	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0x20
3119	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0xC
3120	 C6	PUSH1	03	 	 
- stack 3: 0x63C
- stack 2: 0xD
- stack 1: 0xC
- stack 0: 0x3
3121	 C8	SIGNEXTEND		 	 
- stack 2: 0x63C
- stack 1: 0xD
- stack 0: 0xC
3122	 C9	SLT		 	 
- stack 1: 0x63C
- stack 0: 0x1
3123	 CA	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x60
3124	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3125	 CE	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3126	 D0	ADD		 	 
- stack 0: 0x640
3127	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3128	 D2	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
3129	 D3	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
- stack 0: 0xF0
3130	 D5	SHR		 	 
- stack 1: 0x640
- stack 0: 0x395
3131	 D6	JUMP		 	 
- stack 0: 0x640
3132	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
3133	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3134	 397	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
3135	 398	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x39500000395000002B9000002D8000102F700020311FFE000D7000100F10016
- stack 0: 0xE0
3136	 39A	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3950000
3137	 39B	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3950000
- stack 0: 0xFFFF
3138	 39E	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3139	 39F	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3140	 3A1	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3141	 3A2	POP		 	 
- stack 0: 0x640
3142	 3A3	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3143	 3A5	ADD		 	 
- stack 0: 0x644
3144	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3145	 3A7	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
3146	 3A8	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
- stack 0: 0xF0
3147	 3AA	SHR		 	 
- stack 1: 0x644
- stack 0: 0x395
3148	 3AB	JUMP		 	 
- stack 0: 0x644
3149	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x644
3150	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3151	 397	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
3152	 398	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x395000002B9000002D8000102F700020311FFE000D7000100F1001603530278
- stack 0: 0xE0
3153	 39A	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3950000
3154	 39B	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x3950000
- stack 0: 0xFFFF
3155	 39E	AND		 	 
- stack 1: 0x644
- stack 0: 0x0
3156	 39F	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x1
3157	 3A1	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x0
3158	 3A2	POP		 	 
- stack 0: 0x644
3159	 3A3	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3160	 3A5	ADD		 	 
- stack 0: 0x648
3161	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3162	 3A7	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
3163	 3A8	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
- stack 0: 0xF0
3164	 3AA	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B9
3165	 3AB	JUMP		 	 
- stack 0: 0x648
3166	 2B9	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x648
3167	 2BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3168	 2BB	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
3169	 2BC	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x2B9000002D8000102F700020311FFE000D7000100F1001603530278029F0000
- stack 0: 0xE0
3170	 2BE	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B90000
3171	 2BF	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x2B90000
- stack 0: 0xFFFF
3172	 2C2	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3173	 2C3	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3174	 2C5	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3175	 2C6	PUSH2	0060	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x60
3176	 2C9	MLOAD		 	  ;; # read from x3
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3177	 2CA	ADD		 	  ;; # ADDI 3
- stack 1: 0x648
- stack 0: 0x1
3178	 2CB	PUSH2	00C0	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xC0
3179	 2CE	MSTORE		 	  ;; # store to x6
- stack 0: 0x648
3180	 2CF	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3181	 2D1	ADD		 	 
- stack 0: 0x64C
3182	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3183	 2D3	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
3184	 2D4	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
- stack 0: 0xF0
3185	 2D6	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2D8
3186	 2D7	JUMP		 	 
- stack 0: 0x64C
3187	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x64C
3188	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3189	 2DA	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
3190	 2DB	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x2D8000102F700020311FFE000D7000100F1001603530278029F00000086000E
- stack 0: 0xE0
3191	 2DD	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x2D80001
3192	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3193	 2E1	AND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3194	 2E2	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1
3195	 2E4	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3196	 2E5	PUSH2	0080	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x80
3197	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1
3198	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x64C
- stack 0: 0x2
3199	 2EA	PUSH2	0080	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x80
3200	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x64C
3201	 2EE	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3202	 2F0	ADD		 	 
- stack 0: 0x650
3203	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3204	 2F2	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
3205	 2F3	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
- stack 0: 0xF0
3206	 2F5	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F7
3207	 2F6	JUMP		 	 
- stack 0: 0x650
3208	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x650
3209	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3210	 2F9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
3211	 2FA	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2F700020311FFE000D7000100F1001603530278029F00000086000E00A0000D
- stack 0: 0xE0
3212	 2FC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F70002
3213	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3214	 300	AND		 	 
- stack 1: 0x650
- stack 0: 0x2
3215	 301	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x1
3216	 303	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x2
3217	 304	PUSH2	00A0	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0xA0
3218	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x650
3219	 308	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3220	 30A	ADD		 	 
- stack 0: 0x654
3221	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3222	 30C	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
3223	 30D	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x311FFE000D7000100F1001603530278029F00000086000E00A0000D00BA0000
- stack 0: 0xF0
3224	 30F	SHR		 	 
- stack 1: 0x654
- stack 0: 0x311
3225	 310	JUMP		 	 
- stack 0: 0x654
3226	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x654
3227	 312	PUSH2	0080	 	 
- stack 1: 0x654
- stack 0: 0x80
3228	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x654
- stack 0: 0x2
3229	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3230	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x2
3231	 31C	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xA0
3232	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
3233	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3234	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x2
3235	 326	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
3236	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x32F
3237	 32A	JUMPI		 	 
- stack 0: 0x654
3238	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x654
- stack 0: 0x349
3239	 32E	JUMP		 	 
- stack 0: 0x654
3240	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x654
3241	 34A	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3242	 34C	ADD		 	 
- stack 0: 0x658
3243	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3244	 34E	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xD7000100F1001603530278029F00000086000E00A0000D00BA000002D80001
3245	 34F	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xD7000100F1001603530278029F00000086000E00A0000D00BA000002D80001
- stack 0: 0xF0
3246	 351	SHR		 	 
- stack 1: 0x658
- stack 0: 0xD7
3247	 352	JUMP		 	 
- stack 0: 0x658
3248	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x658
3249	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3250	 D9	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xD7000100F1001603530278029F00000086000E00A0000D00BA000002D80001
3251	 DA	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xD7000100F1001603530278029F00000086000E00A0000D00BA000002D80001
- stack 0: 0xE0
3252	 DC	SHR		 	 
- stack 1: 0x658
- stack 0: 0xD70001
3253	 DD	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xD70001
- stack 0: 0xFFFF
3254	 E0	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3255	 E1	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3256	 E3	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3257	 E4	PUSH2	03A0	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x3A0
3258	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x658
3259	 E8	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3260	 EA	ADD		 	 
- stack 0: 0x65C
3261	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3262	 EC	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xF1001603530278029F00000086000E00A0000D00BA000002D8000102F70002
3263	 ED	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0xF1001603530278029F00000086000E00A0000D00BA000002D8000102F70002
- stack 0: 0xF0
3264	 EF	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xF1
3265	 F0	JUMP		 	 
- stack 0: 0x65C
3266	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x65C
3267	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3268	 F3	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xF1001603530278029F00000086000E00A0000D00BA000002D8000102F70002
3269	 F4	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0xF1001603530278029F00000086000E00A0000D00BA000002D8000102F70002
- stack 0: 0xE0
3270	 F6	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xF10016
3271	 F7	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0xF10016
- stack 0: 0xFFFF
3272	 FA	AND		 	 
- stack 1: 0x65C
- stack 0: 0x16
3273	 FB	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x16
- stack 0: 0x1
3274	 FD	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x16
3275	 FE	PUSH2	0380	 	 
- stack 2: 0x65C
- stack 1: 0x16
- stack 0: 0x380
3276	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x65C
3277	 102	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3278	 104	ADD		 	 
- stack 0: 0x660
3279	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3280	 106	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x3530278029F00000086000E00A0000D00BA000002D8000102F700020311FFEC
3281	 107	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x3530278029F00000086000E00A0000D00BA000002D8000102F700020311FFEC
- stack 0: 0xF0
3282	 109	SHR		 	 
- stack 1: 0x660
- stack 0: 0x353
3283	 10A	JUMP		 	 
- stack 0: 0x660
3284	 353	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x660
3285	 354	PUSH2	00C0	 	 
- stack 1: 0x660
- stack 0: 0xC0
3286	 357	MLOAD		 	  ;; # read from x6
- stack 1: 0x660
- stack 0: 0x1
3287	 358	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3288	 35D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x1
3289	 35E	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x3A0
3290	 361	MLOAD		 	  ;; # read from x29
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x1
3291	 362	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3292	 367	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x1
3293	 368	SUB		 	 
- stack 1: 0x660
- stack 0: 0x0
3294	 369	PUSH2	0371	 ;; _neq_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x371
3295	 36C	JUMPI		 	 
- stack 0: 0x660
3296	 36D	PUSH2	038B	 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 1: 0x660
- stack 0: 0x38B
3297	 370	JUMP		 	 
- stack 0: 0x660
3298	 38B	JUMPDEST		 ;; _neq_after_2c68a87fb235a703b0b45e8fbc476c6b3272e8d0f185019472673dcc5b0f33eb	 
- stack 0: 0x660
3299	 38C	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3300	 38E	ADD		 	 
- stack 0: 0x664
3301	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3302	 390	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x29F00000086000E00A0000D00BA000002D8000102F700020311FFEC00D70000
3303	 391	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x29F00000086000E00A0000D00BA000002D8000102F700020311FFEC00D70000
- stack 0: 0xF0
3304	 393	SHR		 	 
- stack 1: 0x664
- stack 0: 0x29F
3305	 394	JUMP		 	 
- stack 0: 0x664
3306	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x664
3307	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3308	 2A1	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x29F00000086000E00A0000D00BA000002D8000102F700020311FFEC00D70000
3309	 2A2	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x29F00000086000E00A0000D00BA000002D8000102F700020311FFEC00D70000
- stack 0: 0xE0
3310	 2A4	SHR		 	 
- stack 1: 0x664
- stack 0: 0x29F0000
3311	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x29F0000
- stack 0: 0xFFFF
3312	 2A8	AND		 	 
- stack 1: 0x664
- stack 0: 0x0
3313	 2A9	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1
3314	 2AB	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x0
3315	 2AC	PUSH2	0080	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x80
3316	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x664
3317	 2B0	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3318	 2B2	ADD		 	 
- stack 0: 0x668
3319	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3320	 2B4	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
3321	 2B5	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
- stack 0: 0xF0
3322	 2B7	SHR		 	 
- stack 1: 0x668
- stack 0: 0x86
3323	 2B8	JUMP		 	 
- stack 0: 0x668
3324	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x668
3325	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3326	 88	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
3327	 89	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
- stack 0: 0xE0
3328	 8B	SHR		 	 
- stack 1: 0x668
- stack 0: 0x86000E
3329	 8C	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x86000E
- stack 0: 0xFFFF
3330	 8F	AND		 	 
- stack 1: 0x668
- stack 0: 0xE
3331	 90	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xE
- stack 0: 0x1
3332	 92	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xE
3333	 93	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xE
- stack 0: 0x20
3334	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3335	 97	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3336	 99	ADD		 	 
- stack 0: 0x66C
3337	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3338	 9B	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
3339	 9C	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
- stack 0: 0xF0
3340	 9E	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0
3341	 9F	JUMP		 	 
- stack 0: 0x66C
3342	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x66C
3343	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3344	 A2	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
3345	 A3	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
- stack 0: 0xE0
3346	 A5	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D
3347	 A6	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D
- stack 0: 0xFFFF
3348	 A9	AND		 	 
- stack 1: 0x66C
- stack 0: 0xD
3349	 AA	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xD
- stack 0: 0x1
3350	 AC	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xD
3351	 AD	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xD
- stack 0: 0x40
3352	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3353	 B1	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3354	 B3	ADD		 	 
- stack 0: 0x670
3355	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3356	 B5	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000002D8000102F700020311FFEC00D7000000F10017010B0250029F0000
3357	 B6	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xBA000002D8000102F700020311FFEC00D7000000F10017010B0250029F0000
- stack 0: 0xF0
3358	 B8	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA
3359	 B9	JUMP		 	 
- stack 0: 0x670
3360	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x670
3361	 BB	PUSH2	0040	 	 
- stack 1: 0x670
- stack 0: 0x40
3362	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x670
- stack 0: 0xD
3363	 BF	PUSH1	03	 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0x3
3364	 C1	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xD
3365	 C2	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0x20
3366	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0xE
3367	 C6	PUSH1	03	 	 
- stack 3: 0x670
- stack 2: 0xD
- stack 1: 0xE
- stack 0: 0x3
3368	 C8	SIGNEXTEND		 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0xE
3369	 C9	SLT		 	 
- stack 1: 0x670
- stack 0: 0x0
3370	 CA	PUSH2	0060	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x60
3371	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x670
3372	 CE	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3373	 D0	ADD		 	 
- stack 0: 0x674
3374	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3375	 D2	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
3376	 D3	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
- stack 0: 0xF0
3377	 D5	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2D8
3378	 D6	JUMP		 	 
- stack 0: 0x674
3379	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x674
3380	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3381	 2DA	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
3382	 2DB	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
- stack 0: 0xE0
3383	 2DD	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2D80001
3384	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3385	 2E1	AND		 	 
- stack 1: 0x674
- stack 0: 0x1
3386	 2E2	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x1
3387	 2E4	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x1
3388	 2E5	PUSH2	0080	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x80
3389	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x0
3390	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x674
- stack 0: 0x1
3391	 2EA	PUSH2	0080	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x80
3392	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x674
3393	 2EE	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3394	 2F0	ADD		 	 
- stack 0: 0x678
3395	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3396	 2F2	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
3397	 2F3	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
- stack 0: 0xF0
3398	 2F5	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2F7
3399	 2F6	JUMP		 	 
- stack 0: 0x678
3400	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x678
3401	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3402	 2F9	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
3403	 2FA	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
- stack 0: 0xE0
3404	 2FC	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2F70002
3405	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3406	 300	AND		 	 
- stack 1: 0x678
- stack 0: 0x2
3407	 301	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x1
3408	 303	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x2
3409	 304	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xA0
3410	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x678
3411	 308	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3412	 30A	ADD		 	 
- stack 0: 0x67C
3413	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3414	 30C	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
3415	 30D	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
- stack 0: 0xF0
3416	 30F	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x311
3417	 310	JUMP		 	 
- stack 0: 0x67C
3418	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x67C
3419	 312	PUSH2	0080	 	 
- stack 1: 0x67C
- stack 0: 0x80
3420	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x67C
- stack 0: 0x1
3421	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3422	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0x1
3423	 31C	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0xA0
3424	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x2
3425	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x67C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3426	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x2
3427	 326	SUB		 	 
- stack 1: 0x67C
- stack 0: 0x1
3428	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x67C
- stack 1: 0x1
- stack 0: 0x32F
3429	 32A	JUMPI		 	 
- stack 0: 0x67C
3430	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x67C
3431	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3432	 331	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
3433	 332	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
- stack 0: 0xE0
3434	 334	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x311FFEC
3435	 335	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x311FFEC
- stack 0: 0xFFFF
3436	 338	AND		 	 
- stack 1: 0x67C
- stack 0: 0xFFEC
3437	 339	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0xFFEC
- stack 0: 0x1
3438	 33B	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3439	 33C	ADD		 	 
- stack 0: 0x668
3440	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFF
3441	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x668
3442	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3443	 344	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
3444	 345	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
- stack 0: 0xF0
3445	 347	SHR		 	 
- stack 1: 0x668
- stack 0: 0x86
3446	 348	JUMP		 	 
- stack 0: 0x668
3447	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x668
3448	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3449	 88	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
3450	 89	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x86000E00A0000D00BA000002D8000102F700020311FFEC00D7000000F10017
- stack 0: 0xE0
3451	 8B	SHR		 	 
- stack 1: 0x668
- stack 0: 0x86000E
3452	 8C	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x86000E
- stack 0: 0xFFFF
3453	 8F	AND		 	 
- stack 1: 0x668
- stack 0: 0xE
3454	 90	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0xE
- stack 0: 0x1
3455	 92	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xE
3456	 93	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xE
- stack 0: 0x20
3457	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3458	 97	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3459	 99	ADD		 	 
- stack 0: 0x66C
3460	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3461	 9B	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
3462	 9C	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
- stack 0: 0xF0
3463	 9E	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0
3464	 9F	JUMP		 	 
- stack 0: 0x66C
3465	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x66C
3466	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3467	 A2	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
3468	 A3	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D00BA000002D8000102F700020311FFEC00D7000000F10017010B0250
- stack 0: 0xE0
3469	 A5	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xA0000D
3470	 A6	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0xA0000D
- stack 0: 0xFFFF
3471	 A9	AND		 	 
- stack 1: 0x66C
- stack 0: 0xD
3472	 AA	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xD
- stack 0: 0x1
3473	 AC	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xD
3474	 AD	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xD
- stack 0: 0x40
3475	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3476	 B1	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3477	 B3	ADD		 	 
- stack 0: 0x670
3478	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3479	 B5	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xBA000002D8000102F700020311FFEC00D7000000F10017010B0250029F0000
3480	 B6	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xBA000002D8000102F700020311FFEC00D7000000F10017010B0250029F0000
- stack 0: 0xF0
3481	 B8	SHR		 	 
- stack 1: 0x670
- stack 0: 0xBA
3482	 B9	JUMP		 	 
- stack 0: 0x670
3483	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x670
3484	 BB	PUSH2	0040	 	 
- stack 1: 0x670
- stack 0: 0x40
3485	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x670
- stack 0: 0xD
3486	 BF	PUSH1	03	 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0x3
3487	 C1	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xD
3488	 C2	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0x20
3489	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0xE
3490	 C6	PUSH1	03	 	 
- stack 3: 0x670
- stack 2: 0xD
- stack 1: 0xE
- stack 0: 0x3
3491	 C8	SIGNEXTEND		 	 
- stack 2: 0x670
- stack 1: 0xD
- stack 0: 0xE
3492	 C9	SLT		 	 
- stack 1: 0x670
- stack 0: 0x0
3493	 CA	PUSH2	0060	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x60
3494	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x670
3495	 CE	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3496	 D0	ADD		 	 
- stack 0: 0x674
3497	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3498	 D2	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
3499	 D3	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
- stack 0: 0xF0
3500	 D5	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2D8
3501	 D6	JUMP		 	 
- stack 0: 0x674
3502	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x674
3503	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3504	 2DA	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
3505	 2DB	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x2D8000102F700020311FFEC00D7000000F10017010B0250029F00000086000B
- stack 0: 0xE0
3506	 2DD	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2D80001
3507	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3508	 2E1	AND		 	 
- stack 1: 0x674
- stack 0: 0x1
3509	 2E2	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x1
3510	 2E4	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x1
3511	 2E5	PUSH2	0080	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x80
3512	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x1
3513	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x674
- stack 0: 0x2
3514	 2EA	PUSH2	0080	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x80
3515	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x674
3516	 2EE	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3517	 2F0	ADD		 	 
- stack 0: 0x678
3518	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3519	 2F2	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
3520	 2F3	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
- stack 0: 0xF0
3521	 2F5	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2F7
3522	 2F6	JUMP		 	 
- stack 0: 0x678
3523	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x678
3524	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3525	 2F9	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
3526	 2FA	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x2F700020311FFEC00D7000000F10017010B0250029F00000086000B00A0000D
- stack 0: 0xE0
3527	 2FC	SHR		 	 
- stack 1: 0x678
- stack 0: 0x2F70002
3528	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3529	 300	AND		 	 
- stack 1: 0x678
- stack 0: 0x2
3530	 301	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x1
3531	 303	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x2
3532	 304	PUSH2	00A0	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0xA0
3533	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x678
3534	 308	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3535	 30A	ADD		 	 
- stack 0: 0x67C
3536	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3537	 30C	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
3538	 30D	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x311FFEC00D7000000F10017010B0250029F00000086000B00A0000D03950000
- stack 0: 0xF0
3539	 30F	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x311
3540	 310	JUMP		 	 
- stack 0: 0x67C
3541	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x67C
3542	 312	PUSH2	0080	 	 
- stack 1: 0x67C
- stack 0: 0x80
3543	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x67C
- stack 0: 0x2
3544	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3545	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0x2
3546	 31C	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xA0
3547	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x2
3548	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x67C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3549	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x2
3550	 326	SUB		 	 
- stack 1: 0x67C
- stack 0: 0x0
3551	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x32F
3552	 32A	JUMPI		 	 
- stack 0: 0x67C
3553	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x67C
- stack 0: 0x349
3554	 32E	JUMP		 	 
- stack 0: 0x67C
3555	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x67C
3556	 34A	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3557	 34C	ADD		 	 
- stack 0: 0x680
3558	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3559	 34E	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xD7000000F10017010B0250029F00000086000B00A0000D0395000000BA0000
3560	 34F	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xD7000000F10017010B0250029F00000086000B00A0000D0395000000BA0000
- stack 0: 0xF0
3561	 351	SHR		 	 
- stack 1: 0x680
- stack 0: 0xD7
3562	 352	JUMP		 	 
- stack 0: 0x680
3563	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x680
3564	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3565	 D9	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xD7000000F10017010B0250029F00000086000B00A0000D0395000000BA0000
3566	 DA	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xD7000000F10017010B0250029F00000086000B00A0000D0395000000BA0000
- stack 0: 0xE0
3567	 DC	SHR		 	 
- stack 1: 0x680
- stack 0: 0xD70000
3568	 DD	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xD70000
- stack 0: 0xFFFF
3569	 E0	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
3570	 E1	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
3571	 E3	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
3572	 E4	PUSH2	03A0	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x3A0
3573	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x680
3574	 E8	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3575	 EA	ADD		 	 
- stack 0: 0x684
3576	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3577	 EC	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xF10017010B0250029F00000086000B00A0000D0395000000BA000002D80001
3578	 ED	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xF10017010B0250029F00000086000B00A0000D0395000000BA000002D80001
- stack 0: 0xF0
3579	 EF	SHR		 	 
- stack 1: 0x684
- stack 0: 0xF1
3580	 F0	JUMP		 	 
- stack 0: 0x684
3581	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x684
3582	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3583	 F3	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xF10017010B0250029F00000086000B00A0000D0395000000BA000002D80001
3584	 F4	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xF10017010B0250029F00000086000B00A0000D0395000000BA000002D80001
- stack 0: 0xE0
3585	 F6	SHR		 	 
- stack 1: 0x684
- stack 0: 0xF10017
3586	 F7	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0xF10017
- stack 0: 0xFFFF
3587	 FA	AND		 	 
- stack 1: 0x684
- stack 0: 0x17
3588	 FB	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x17
- stack 0: 0x1
3589	 FD	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x17
3590	 FE	PUSH2	0380	 	 
- stack 2: 0x684
- stack 1: 0x17
- stack 0: 0x380
3591	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x684
3592	 102	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3593	 104	ADD		 	 
- stack 0: 0x688
3594	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3595	 106	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x10B0250029F00000086000B00A0000D0395000000BA000002D8000102F70002
3596	 107	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x10B0250029F00000086000B00A0000D0395000000BA000002D8000102F70002
- stack 0: 0xF0
3597	 109	SHR		 	 
- stack 1: 0x688
- stack 0: 0x10B
3598	 10A	JUMP		 	 
- stack 0: 0x688
3599	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x688
3600	 10C	PUSH2	0060	 	 
- stack 1: 0x688
- stack 0: 0x60
3601	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x688
- stack 0: 0x0
3602	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3603	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x0
3604	 116	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x3A0
3605	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x0
3606	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3607	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x0
3608	 120	SUB		 	 
- stack 1: 0x688
- stack 0: 0x0
3609	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x129
3610	 124	JUMPI		 	 
- stack 0: 0x688
3611	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x688
- stack 0: 0x143
3612	 128	JUMP		 	 
- stack 0: 0x688
3613	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x688
3614	 144	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3615	 146	ADD		 	 
- stack 0: 0x68C
3616	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3617	 148	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x29F00000086000B00A0000D0395000000BA000002D8000102F700020311FFE8
3618	 149	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x29F00000086000B00A0000D0395000000BA000002D8000102F700020311FFE8
- stack 0: 0xF0
3619	 14B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x29F
3620	 14C	JUMP		 	 
- stack 0: 0x68C
3621	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x68C
3622	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3623	 2A1	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x29F00000086000B00A0000D0395000000BA000002D8000102F700020311FFE8
3624	 2A2	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x29F00000086000B00A0000D0395000000BA000002D8000102F700020311FFE8
- stack 0: 0xE0
3625	 2A4	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x29F0000
3626	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x29F0000
- stack 0: 0xFFFF
3627	 2A8	AND		 	 
- stack 1: 0x68C
- stack 0: 0x0
3628	 2A9	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x1
3629	 2AB	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x0
3630	 2AC	PUSH2	0080	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x80
3631	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x68C
3632	 2B0	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3633	 2B2	ADD		 	 
- stack 0: 0x690
3634	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3635	 2B4	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
3636	 2B5	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
3637	 2B7	SHR		 	 
- stack 1: 0x690
- stack 0: 0x86
3638	 2B8	JUMP		 	 
- stack 0: 0x690
3639	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x690
3640	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3641	 88	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
3642	 89	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
3643	 8B	SHR		 	 
- stack 1: 0x690
- stack 0: 0x86000B
3644	 8C	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x86000B
- stack 0: 0xFFFF
3645	 8F	AND		 	 
- stack 1: 0x690
- stack 0: 0xB
3646	 90	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xB
- stack 0: 0x1
3647	 92	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xB
3648	 93	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xB
- stack 0: 0x20
3649	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x690
3650	 97	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3651	 99	ADD		 	 
- stack 0: 0x694
3652	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3653	 9B	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
3654	 9C	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
- stack 0: 0xF0
3655	 9E	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0
3656	 9F	JUMP		 	 
- stack 0: 0x694
3657	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x694
3658	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3659	 A2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
3660	 A3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
- stack 0: 0xE0
3661	 A5	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0000D
3662	 A6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xA0000D
- stack 0: 0xFFFF
3663	 A9	AND		 	 
- stack 1: 0x694
- stack 0: 0xD
3664	 AA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xD
- stack 0: 0x1
3665	 AC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xD
3666	 AD	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0xD
- stack 0: 0x40
3667	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x694
3668	 B1	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3669	 B3	ADD		 	 
- stack 0: 0x698
3670	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3671	 B5	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
3672	 B6	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
- stack 0: 0xF0
3673	 B8	SHR		 	 
- stack 1: 0x698
- stack 0: 0x395
3674	 B9	JUMP		 	 
- stack 0: 0x698
3675	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x698
3676	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3677	 397	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
3678	 398	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
- stack 0: 0xE0
3679	 39A	SHR		 	 
- stack 1: 0x698
- stack 0: 0x3950000
3680	 39B	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x3950000
- stack 0: 0xFFFF
3681	 39E	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
3682	 39F	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
3683	 3A1	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
3684	 3A2	POP		 	 
- stack 0: 0x698
3685	 3A3	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3686	 3A5	ADD		 	 
- stack 0: 0x69C
3687	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3688	 3A7	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F10018010B0224029F0000
3689	 3A8	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F10018010B0224029F0000
- stack 0: 0xF0
3690	 3AA	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA
3691	 3AB	JUMP		 	 
- stack 0: 0x69C
3692	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x69C
3693	 BB	PUSH2	0040	 	 
- stack 1: 0x69C
- stack 0: 0x40
3694	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x69C
- stack 0: 0xD
3695	 BF	PUSH1	03	 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0x3
3696	 C1	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xD
3697	 C2	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0x20
3698	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0xB
3699	 C6	PUSH1	03	 	 
- stack 3: 0x69C
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
3700	 C8	SIGNEXTEND		 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0xB
3701	 C9	SLT		 	 
- stack 1: 0x69C
- stack 0: 0x1
3702	 CA	PUSH2	0060	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x60
3703	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x69C
3704	 CE	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3705	 D0	ADD		 	 
- stack 0: 0x6A0
3706	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3707	 D2	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
3708	 D3	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
- stack 0: 0xF0
3709	 D5	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8
3710	 D6	JUMP		 	 
- stack 0: 0x6A0
3711	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A0
3712	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
3713	 2DA	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
3714	 2DB	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
- stack 0: 0xE0
3715	 2DD	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2D80001
3716	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3717	 2E1	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
3718	 2E2	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3719	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
3720	 2E5	PUSH2	0080	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x80
3721	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x0
3722	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A0
- stack 0: 0x1
3723	 2EA	PUSH2	0080	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x80
3724	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A0
3725	 2EE	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3726	 2F0	ADD		 	 
- stack 0: 0x6A4
3727	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3728	 2F2	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
3729	 2F3	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
- stack 0: 0xF0
3730	 2F5	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2F7
3731	 2F6	JUMP		 	 
- stack 0: 0x6A4
3732	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A4
3733	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3734	 2F9	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
3735	 2FA	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
- stack 0: 0xE0
3736	 2FC	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2F70002
3737	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3738	 300	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x2
3739	 301	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x1
3740	 303	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x2
3741	 304	PUSH2	00A0	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0xA0
3742	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A4
3743	 308	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3744	 30A	ADD		 	 
- stack 0: 0x6A8
3745	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3746	 30C	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
3747	 30D	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
- stack 0: 0xF0
3748	 30F	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x311
3749	 310	JUMP		 	 
- stack 0: 0x6A8
3750	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A8
3751	 312	PUSH2	0080	 	 
- stack 1: 0x6A8
- stack 0: 0x80
3752	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A8
- stack 0: 0x1
3753	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3754	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0x1
3755	 31C	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0xA0
3756	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x2
3757	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3758	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x2
3759	 326	SUB		 	 
- stack 1: 0x6A8
- stack 0: 0x1
3760	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x6A8
- stack 1: 0x1
- stack 0: 0x32F
3761	 32A	JUMPI		 	 
- stack 0: 0x6A8
3762	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x6A8
3763	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3764	 331	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
3765	 332	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
- stack 0: 0xE0
3766	 334	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x311FFE8
3767	 335	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x311FFE8
- stack 0: 0xFFFF
3768	 338	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xFFE8
3769	 339	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xFFE8
- stack 0: 0x1
3770	 33B	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3771	 33C	ADD		 	 
- stack 0: 0x690
3772	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFF
3773	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x690
3774	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3775	 344	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
3776	 345	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
3777	 347	SHR		 	 
- stack 1: 0x690
- stack 0: 0x86
3778	 348	JUMP		 	 
- stack 0: 0x690
3779	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x690
3780	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3781	 88	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
3782	 89	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x86000B00A0000D0395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
3783	 8B	SHR		 	 
- stack 1: 0x690
- stack 0: 0x86000B
3784	 8C	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x86000B
- stack 0: 0xFFFF
3785	 8F	AND		 	 
- stack 1: 0x690
- stack 0: 0xB
3786	 90	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xB
- stack 0: 0x1
3787	 92	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xB
3788	 93	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0xB
- stack 0: 0x20
3789	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x690
3790	 97	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3791	 99	ADD		 	 
- stack 0: 0x694
3792	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3793	 9B	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
3794	 9C	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
- stack 0: 0xF0
3795	 9E	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0
3796	 9F	JUMP		 	 
- stack 0: 0x694
3797	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x694
3798	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3799	 A2	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
3800	 A3	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE800D7000100F10018
- stack 0: 0xE0
3801	 A5	SHR		 	 
- stack 1: 0x694
- stack 0: 0xA0000D
3802	 A6	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xA0000D
- stack 0: 0xFFFF
3803	 A9	AND		 	 
- stack 1: 0x694
- stack 0: 0xD
3804	 AA	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xD
- stack 0: 0x1
3805	 AC	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xD
3806	 AD	PUSH2	0040	 	 
- stack 2: 0x694
- stack 1: 0xD
- stack 0: 0x40
3807	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x694
3808	 B1	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3809	 B3	ADD		 	 
- stack 0: 0x698
3810	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3811	 B5	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
3812	 B6	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
- stack 0: 0xF0
3813	 B8	SHR		 	 
- stack 1: 0x698
- stack 0: 0x395
3814	 B9	JUMP		 	 
- stack 0: 0x698
3815	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x698
3816	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3817	 397	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
3818	 398	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F10018010B0224
- stack 0: 0xE0
3819	 39A	SHR		 	 
- stack 1: 0x698
- stack 0: 0x3950000
3820	 39B	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x3950000
- stack 0: 0xFFFF
3821	 39E	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
3822	 39F	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
3823	 3A1	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
3824	 3A2	POP		 	 
- stack 0: 0x698
3825	 3A3	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3826	 3A5	ADD		 	 
- stack 0: 0x69C
3827	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3828	 3A7	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F10018010B0224029F0000
3829	 3A8	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F10018010B0224029F0000
- stack 0: 0xF0
3830	 3AA	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xBA
3831	 3AB	JUMP		 	 
- stack 0: 0x69C
3832	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x69C
3833	 BB	PUSH2	0040	 	 
- stack 1: 0x69C
- stack 0: 0x40
3834	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x69C
- stack 0: 0xD
3835	 BF	PUSH1	03	 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0x3
3836	 C1	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xD
3837	 C2	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0x20
3838	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0xB
3839	 C6	PUSH1	03	 	 
- stack 3: 0x69C
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
3840	 C8	SIGNEXTEND		 	 
- stack 2: 0x69C
- stack 1: 0xD
- stack 0: 0xB
3841	 C9	SLT		 	 
- stack 1: 0x69C
- stack 0: 0x1
3842	 CA	PUSH2	0060	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x60
3843	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x69C
3844	 CE	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3845	 D0	ADD		 	 
- stack 0: 0x6A0
3846	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3847	 D2	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
3848	 D3	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
- stack 0: 0xF0
3849	 D5	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8
3850	 D6	JUMP		 	 
- stack 0: 0x6A0
3851	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6A0
3852	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
3853	 2DA	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
3854	 2DB	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x2D8000102F700020311FFE800D7000100F10018010B0224029F00000086000F
- stack 0: 0xE0
3855	 2DD	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x2D80001
3856	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
3857	 2E1	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
3858	 2E2	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3859	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x1
3860	 2E5	PUSH2	0080	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x80
3861	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x1
3862	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6A0
- stack 0: 0x2
3863	 2EA	PUSH2	0080	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x80
3864	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A0
3865	 2EE	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3866	 2F0	ADD		 	 
- stack 0: 0x6A4
3867	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3868	 2F2	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
3869	 2F3	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
- stack 0: 0xF0
3870	 2F5	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2F7
3871	 2F6	JUMP		 	 
- stack 0: 0x6A4
3872	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6A4
3873	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3874	 2F9	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
3875	 2FA	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x2F700020311FFE800D7000100F10018010B0224029F00000086000F00A0000D
- stack 0: 0xE0
3876	 2FC	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x2F70002
3877	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
3878	 300	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x2
3879	 301	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0x1
3880	 303	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x2
3881	 304	PUSH2	00A0	 	 
- stack 2: 0x6A4
- stack 1: 0x2
- stack 0: 0xA0
3882	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x6A4
3883	 308	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3884	 30A	ADD		 	 
- stack 0: 0x6A8
3885	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3886	 30C	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
3887	 30D	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x311FFE800D7000100F10018010B0224029F00000086000F00A0000D03950000
- stack 0: 0xF0
3888	 30F	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x311
3889	 310	JUMP		 	 
- stack 0: 0x6A8
3890	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A8
3891	 312	PUSH2	0080	 	 
- stack 1: 0x6A8
- stack 0: 0x80
3892	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A8
- stack 0: 0x2
3893	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3894	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0x2
3895	 31C	PUSH2	00A0	 	 
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0xA0
3896	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x2
3897	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3898	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A8
- stack 1: 0x2
- stack 0: 0x2
3899	 326	SUB		 	 
- stack 1: 0x6A8
- stack 0: 0x0
3900	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x32F
3901	 32A	JUMPI		 	 
- stack 0: 0x6A8
3902	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x6A8
- stack 0: 0x349
3903	 32E	JUMP		 	 
- stack 0: 0x6A8
3904	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x6A8
3905	 34A	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3906	 34C	ADD		 	 
- stack 0: 0x6AC
3907	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3908	 34E	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xD7000100F10018010B0224029F00000086000F00A0000D0395000003950000
3909	 34F	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0xD7000100F10018010B0224029F00000086000F00A0000D0395000003950000
- stack 0: 0xF0
3910	 351	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xD7
3911	 352	JUMP		 	 
- stack 0: 0x6AC
3912	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6AC
3913	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3914	 D9	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0xD7000100F10018010B0224029F00000086000F00A0000D0395000003950000
3915	 DA	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0xD7000100F10018010B0224029F00000086000F00A0000D0395000003950000
- stack 0: 0xE0
3916	 DC	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0xD70001
3917	 DD	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0xD70001
- stack 0: 0xFFFF
3918	 E0	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x1
3919	 E1	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x1
3920	 E3	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x1
3921	 E4	PUSH2	03A0	 	 
- stack 2: 0x6AC
- stack 1: 0x1
- stack 0: 0x3A0
3922	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x6AC
3923	 E8	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3924	 EA	ADD		 	 
- stack 0: 0x6B0
3925	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3926	 EC	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xF10018010B0224029F00000086000F00A0000D039500000395000000BA0000
3927	 ED	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xF10018010B0224029F00000086000F00A0000D039500000395000000BA0000
- stack 0: 0xF0
3928	 EF	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xF1
3929	 F0	JUMP		 	 
- stack 0: 0x6B0
3930	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6B0
3931	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3932	 F3	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xF10018010B0224029F00000086000F00A0000D039500000395000000BA0000
3933	 F4	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0xF10018010B0224029F00000086000F00A0000D039500000395000000BA0000
- stack 0: 0xE0
3934	 F6	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xF10018
3935	 F7	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0xF10018
- stack 0: 0xFFFF
3936	 FA	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x18
3937	 FB	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x18
- stack 0: 0x1
3938	 FD	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x18
3939	 FE	PUSH2	0380	 	 
- stack 2: 0x6B0
- stack 1: 0x18
- stack 0: 0x380
3940	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x6B0
3941	 102	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3942	 104	ADD		 	 
- stack 0: 0x6B4
3943	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3944	 106	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x10B0224029F00000086000F00A0000D039500000395000000BA000002D80001
3945	 107	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x10B0224029F00000086000F00A0000D039500000395000000BA000002D80001
- stack 0: 0xF0
3946	 109	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x10B
3947	 10A	JUMP		 	 
- stack 0: 0x6B4
3948	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x6B4
3949	 10C	PUSH2	0060	 	 
- stack 1: 0x6B4
- stack 0: 0x60
3950	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x6B4
- stack 0: 0x1
3951	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3952	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B4
- stack 0: 0x1
3953	 116	PUSH2	03A0	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x3A0
3954	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
3955	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6B4
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3956	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
3957	 120	SUB		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3958	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x129
3959	 124	JUMPI		 	 
- stack 0: 0x6B4
3960	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x6B4
- stack 0: 0x143
3961	 128	JUMP		 	 
- stack 0: 0x6B4
3962	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x6B4
3963	 144	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3964	 146	ADD		 	 
- stack 0: 0x6B8
3965	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3966	 148	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x29F00000086000F00A0000D039500000395000000BA000002D8000102F70002
3967	 149	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x29F00000086000F00A0000D039500000395000000BA000002D8000102F70002
- stack 0: 0xF0
3968	 14B	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x29F
3969	 14C	JUMP		 	 
- stack 0: 0x6B8
3970	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6B8
3971	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3972	 2A1	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x29F00000086000F00A0000D039500000395000000BA000002D8000102F70002
3973	 2A2	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x29F00000086000F00A0000D039500000395000000BA000002D8000102F70002
- stack 0: 0xE0
3974	 2A4	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x29F0000
3975	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x29F0000
- stack 0: 0xFFFF
3976	 2A8	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
3977	 2A9	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x1
3978	 2AB	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
3979	 2AC	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x80
3980	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3981	 2B0	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3982	 2B2	ADD		 	 
- stack 0: 0x6BC
3983	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3984	 2B4	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
3985	 2B5	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
3986	 2B7	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x86
3987	 2B8	JUMP		 	 
- stack 0: 0x6BC
3988	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6BC
3989	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3990	 88	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
3991	 89	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
3992	 8B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F
3993	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F
- stack 0: 0xFFFF
3994	 8F	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xF
3995	 90	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xF
- stack 0: 0x1
3996	 92	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xF
3997	 93	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0xF
- stack 0: 0x20
3998	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
3999	 97	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4000	 99	ADD		 	 
- stack 0: 0x6C0
4001	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4002	 9B	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
4003	 9C	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
4004	 9E	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xA0
4005	 9F	JUMP		 	 
- stack 0: 0x6C0
4006	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6C0
4007	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4008	 A2	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
4009	 A3	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
4010	 A5	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D
4011	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4012	 A9	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xD
4013	 AA	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xD
- stack 0: 0x1
4014	 AC	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xD
4015	 AD	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xD
- stack 0: 0x40
4016	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
4017	 B1	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4018	 B3	ADD		 	 
- stack 0: 0x6C4
4019	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4020	 B5	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
4021	 B6	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
- stack 0: 0xF0
4022	 B8	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x395
4023	 B9	JUMP		 	 
- stack 0: 0x6C4
4024	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4025	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4026	 397	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
4027	 398	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
- stack 0: 0xE0
4028	 39A	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x3950000
4029	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x3950000
- stack 0: 0xFFFF
4030	 39E	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4031	 39F	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4032	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4033	 3A2	POP		 	 
- stack 0: 0x6C4
4034	 3A3	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4035	 3A5	ADD		 	 
- stack 0: 0x6C8
4036	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4037	 3A7	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
4038	 3A8	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
- stack 0: 0xF0
4039	 3AA	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x395
4040	 3AB	JUMP		 	 
- stack 0: 0x6C8
4041	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C8
4042	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4043	 397	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
4044	 398	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
- stack 0: 0xE0
4045	 39A	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x3950000
4046	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x3950000
- stack 0: 0xFFFF
4047	 39E	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4048	 39F	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x1
4049	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4050	 3A2	POP		 	 
- stack 0: 0x6C8
4051	 3A3	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4052	 3A5	ADD		 	 
- stack 0: 0x6CC
4053	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4054	 3A7	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F10019010B01F4029F0000
4055	 3A8	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F10019010B01F4029F0000
- stack 0: 0xF0
4056	 3AA	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0xBA
4057	 3AB	JUMP		 	 
- stack 0: 0x6CC
4058	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x6CC
4059	 BB	PUSH2	0040	 	 
- stack 1: 0x6CC
- stack 0: 0x40
4060	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6CC
- stack 0: 0xD
4061	 BF	PUSH1	03	 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0x3
4062	 C1	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0xD
4063	 C2	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0x20
4064	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0xF
4065	 C6	PUSH1	03	 	 
- stack 3: 0x6CC
- stack 2: 0xD
- stack 1: 0xF
- stack 0: 0x3
4066	 C8	SIGNEXTEND		 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0xF
4067	 C9	SLT		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4068	 CA	PUSH2	0060	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x60
4069	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x6CC
4070	 CE	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4071	 D0	ADD		 	 
- stack 0: 0x6D0
4072	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4073	 D2	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
4074	 D3	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
- stack 0: 0xF0
4075	 D5	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8
4076	 D6	JUMP		 	 
- stack 0: 0x6D0
4077	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6D0
4078	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4079	 2DA	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
4080	 2DB	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
- stack 0: 0xE0
4081	 2DD	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2D80001
4082	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4083	 2E1	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4084	 2E2	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4085	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4086	 2E5	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4087	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x0
4088	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D0
- stack 0: 0x1
4089	 2EA	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4090	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4091	 2EE	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4092	 2F0	ADD		 	 
- stack 0: 0x6D4
4093	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4094	 2F2	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
4095	 2F3	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
- stack 0: 0xF0
4096	 2F5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F7
4097	 2F6	JUMP		 	 
- stack 0: 0x6D4
4098	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D4
4099	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4100	 2F9	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
4101	 2FA	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
- stack 0: 0xE0
4102	 2FC	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F70002
4103	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4104	 300	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4105	 301	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
4106	 303	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4107	 304	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xA0
4108	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D4
4109	 308	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4110	 30A	ADD		 	 
- stack 0: 0x6D8
4111	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4112	 30C	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
4113	 30D	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
- stack 0: 0xF0
4114	 30F	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x311
4115	 310	JUMP		 	 
- stack 0: 0x6D8
4116	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D8
4117	 312	PUSH2	0080	 	 
- stack 1: 0x6D8
- stack 0: 0x80
4118	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D8
- stack 0: 0x1
4119	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4120	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D8
- stack 0: 0x1
4121	 31C	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0xA0
4122	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x2
4123	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4124	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x2
4125	 326	SUB		 	 
- stack 1: 0x6D8
- stack 0: 0x1
4126	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x6D8
- stack 1: 0x1
- stack 0: 0x32F
4127	 32A	JUMPI		 	 
- stack 0: 0x6D8
4128	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x6D8
4129	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4130	 331	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
4131	 332	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
- stack 0: 0xE0
4132	 334	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x311FFE4
4133	 335	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
4134	 338	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFFE4
4135	 339	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFFE4
- stack 0: 0x1
4136	 33B	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4137	 33C	ADD		 	 
- stack 0: 0x6BC
4138	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFF
4139	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6BC
4140	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4141	 344	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
4142	 345	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
4143	 347	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x86
4144	 348	JUMP		 	 
- stack 0: 0x6BC
4145	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6BC
4146	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4147	 88	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
4148	 89	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F00A0000D039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
4149	 8B	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x86000F
4150	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x86000F
- stack 0: 0xFFFF
4151	 8F	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xF
4152	 90	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xF
- stack 0: 0x1
4153	 92	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xF
4154	 93	PUSH2	0020	 	 
- stack 2: 0x6BC
- stack 1: 0xF
- stack 0: 0x20
4155	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6BC
4156	 97	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4157	 99	ADD		 	 
- stack 0: 0x6C0
4158	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4159	 9B	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
4160	 9C	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
4161	 9E	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xA0
4162	 9F	JUMP		 	 
- stack 0: 0x6C0
4163	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6C0
4164	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4165	 A2	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
4166	 A3	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
4167	 A5	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xA0000D
4168	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4169	 A9	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xD
4170	 AA	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xD
- stack 0: 0x1
4171	 AC	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xD
4172	 AD	PUSH2	0040	 	 
- stack 2: 0x6C0
- stack 1: 0xD
- stack 0: 0x40
4173	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6C0
4174	 B1	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4175	 B3	ADD		 	 
- stack 0: 0x6C4
4176	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4177	 B5	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
4178	 B6	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
- stack 0: 0xF0
4179	 B8	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x395
4180	 B9	JUMP		 	 
- stack 0: 0x6C4
4181	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C4
4182	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4183	 397	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
4184	 398	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F10019
- stack 0: 0xE0
4185	 39A	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x3950000
4186	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x3950000
- stack 0: 0xFFFF
4187	 39E	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4188	 39F	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x1
4189	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x0
4190	 3A2	POP		 	 
- stack 0: 0x6C4
4191	 3A3	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4192	 3A5	ADD		 	 
- stack 0: 0x6C8
4193	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4194	 3A7	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
4195	 3A8	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
- stack 0: 0xF0
4196	 3AA	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x395
4197	 3AB	JUMP		 	 
- stack 0: 0x6C8
4198	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C8
4199	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4200	 397	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
4201	 398	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10019010B01F4
- stack 0: 0xE0
4202	 39A	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x3950000
4203	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x3950000
- stack 0: 0xFFFF
4204	 39E	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4205	 39F	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x1
4206	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
4207	 3A2	POP		 	 
- stack 0: 0x6C8
4208	 3A3	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4209	 3A5	ADD		 	 
- stack 0: 0x6CC
4210	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4211	 3A7	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F10019010B01F4029F0000
4212	 3A8	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F10019010B01F4029F0000
- stack 0: 0xF0
4213	 3AA	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0xBA
4214	 3AB	JUMP		 	 
- stack 0: 0x6CC
4215	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x6CC
4216	 BB	PUSH2	0040	 	 
- stack 1: 0x6CC
- stack 0: 0x40
4217	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6CC
- stack 0: 0xD
4218	 BF	PUSH1	03	 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0x3
4219	 C1	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0xD
4220	 C2	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0x20
4221	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0xF
4222	 C6	PUSH1	03	 	 
- stack 3: 0x6CC
- stack 2: 0xD
- stack 1: 0xF
- stack 0: 0x3
4223	 C8	SIGNEXTEND		 	 
- stack 2: 0x6CC
- stack 1: 0xD
- stack 0: 0xF
4224	 C9	SLT		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4225	 CA	PUSH2	0060	 	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x60
4226	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x6CC
4227	 CE	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4228	 D0	ADD		 	 
- stack 0: 0x6D0
4229	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4230	 D2	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
4231	 D3	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
- stack 0: 0xF0
4232	 D5	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8
4233	 D6	JUMP		 	 
- stack 0: 0x6D0
4234	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6D0
4235	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4236	 2DA	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
4237	 2DB	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x2D8000102F700020311FFE400D7000000F10019010B01F4029F00000086000A
- stack 0: 0xE0
4238	 2DD	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2D80001
4239	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4240	 2E1	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4241	 2E2	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4242	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x1
4243	 2E5	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x80
4244	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x1
4245	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D0
- stack 0: 0x2
4246	 2EA	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x80
4247	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4248	 2EE	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4249	 2F0	ADD		 	 
- stack 0: 0x6D4
4250	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4251	 2F2	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
4252	 2F3	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
- stack 0: 0xF0
4253	 2F5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F7
4254	 2F6	JUMP		 	 
- stack 0: 0x6D4
4255	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D4
4256	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4257	 2F9	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
4258	 2FA	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x2F700020311FFE400D7000000F10019010B01F4029F00000086000A03950000
- stack 0: 0xE0
4259	 2FC	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x2F70002
4260	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4261	 300	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4262	 301	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x1
4263	 303	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x2
4264	 304	PUSH2	00A0	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0xA0
4265	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D4
4266	 308	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4267	 30A	ADD		 	 
- stack 0: 0x6D8
4268	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4269	 30C	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
4270	 30D	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x311FFE400D7000000F10019010B01F4029F00000086000A0395000000A0000D
- stack 0: 0xF0
4271	 30F	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x311
4272	 310	JUMP		 	 
- stack 0: 0x6D8
4273	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D8
4274	 312	PUSH2	0080	 	 
- stack 1: 0x6D8
- stack 0: 0x80
4275	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D8
- stack 0: 0x2
4276	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4277	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D8
- stack 0: 0x2
4278	 31C	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
4279	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x2
4280	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4281	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x2
4282	 326	SUB		 	 
- stack 1: 0x6D8
- stack 0: 0x0
4283	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x6D8
- stack 1: 0x0
- stack 0: 0x32F
4284	 32A	JUMPI		 	 
- stack 0: 0x6D8
4285	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x6D8
- stack 0: 0x349
4286	 32E	JUMP		 	 
- stack 0: 0x6D8
4287	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x6D8
4288	 34A	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4289	 34C	ADD		 	 
- stack 0: 0x6DC
4290	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4291	 34E	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xD7000000F10019010B01F4029F00000086000A0395000000A0000D00BA0000
4292	 34F	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0xD7000000F10019010B01F4029F00000086000A0395000000A0000D00BA0000
- stack 0: 0xF0
4293	 351	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xD7
4294	 352	JUMP		 	 
- stack 0: 0x6DC
4295	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6DC
4296	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4297	 D9	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xD7000000F10019010B01F4029F00000086000A0395000000A0000D00BA0000
4298	 DA	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0xD7000000F10019010B01F4029F00000086000A0395000000A0000D00BA0000
- stack 0: 0xE0
4299	 DC	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xD70000
4300	 DD	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0xD70000
- stack 0: 0xFFFF
4301	 E0	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4302	 E1	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4303	 E3	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4304	 E4	PUSH2	03A0	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x3A0
4305	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x6DC
4306	 E8	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4307	 EA	ADD		 	 
- stack 0: 0x6E0
4308	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4309	 EC	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xF10019010B01F4029F00000086000A0395000000A0000D00BA000002D80001
4310	 ED	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0xF10019010B01F4029F00000086000A0395000000A0000D00BA000002D80001
- stack 0: 0xF0
4311	 EF	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xF1
4312	 F0	JUMP		 	 
- stack 0: 0x6E0
4313	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6E0
4314	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4315	 F3	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0xF10019010B01F4029F00000086000A0395000000A0000D00BA000002D80001
4316	 F4	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0xF10019010B01F4029F00000086000A0395000000A0000D00BA000002D80001
- stack 0: 0xE0
4317	 F6	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0xF10019
4318	 F7	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0xF10019
- stack 0: 0xFFFF
4319	 FA	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x19
4320	 FB	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x19
- stack 0: 0x1
4321	 FD	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x19
4322	 FE	PUSH2	0380	 	 
- stack 2: 0x6E0
- stack 1: 0x19
- stack 0: 0x380
4323	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x6E0
4324	 102	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4325	 104	ADD		 	 
- stack 0: 0x6E4
4326	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4327	 106	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x10B01F4029F00000086000A0395000000A0000D00BA000002D8000102F70002
4328	 107	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x10B01F4029F00000086000A0395000000A0000D00BA000002D8000102F70002
- stack 0: 0xF0
4329	 109	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x10B
4330	 10A	JUMP		 	 
- stack 0: 0x6E4
4331	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x6E4
4332	 10C	PUSH2	0060	 	 
- stack 1: 0x6E4
- stack 0: 0x60
4333	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x6E4
- stack 0: 0x0
4334	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4335	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6E4
- stack 0: 0x0
4336	 116	PUSH2	03A0	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x3A0
4337	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x0
4338	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6E4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4339	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x0
4340	 120	SUB		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4341	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x129
4342	 124	JUMPI		 	 
- stack 0: 0x6E4
4343	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x6E4
- stack 0: 0x143
4344	 128	JUMP		 	 
- stack 0: 0x6E4
4345	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x6E4
4346	 144	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4347	 146	ADD		 	 
- stack 0: 0x6E8
4348	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4349	 148	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x29F00000086000A0395000000A0000D00BA000002D8000102F700020311FFE8
4350	 149	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x29F00000086000A0395000000A0000D00BA000002D8000102F700020311FFE8
- stack 0: 0xF0
4351	 14B	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x29F
4352	 14C	JUMP		 	 
- stack 0: 0x6E8
4353	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6E8
4354	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4355	 2A1	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x29F00000086000A0395000000A0000D00BA000002D8000102F700020311FFE8
4356	 2A2	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x29F00000086000A0395000000A0000D00BA000002D8000102F700020311FFE8
- stack 0: 0xE0
4357	 2A4	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x29F0000
4358	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x29F0000
- stack 0: 0xFFFF
4359	 2A8	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4360	 2A9	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
4361	 2AB	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4362	 2AC	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x80
4363	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E8
4364	 2B0	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4365	 2B2	ADD		 	 
- stack 0: 0x6EC
4366	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4367	 2B4	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
4368	 2B5	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
4369	 2B7	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x86
4370	 2B8	JUMP		 	 
- stack 0: 0x6EC
4371	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6EC
4372	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4373	 88	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
4374	 89	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
4375	 8B	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A
4376	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A
- stack 0: 0xFFFF
4377	 8F	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xA
4378	 90	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xA
- stack 0: 0x1
4379	 92	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xA
4380	 93	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xA
- stack 0: 0x20
4381	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6EC
4382	 97	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4383	 99	ADD		 	 
- stack 0: 0x6F0
4384	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4385	 9B	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
4386	 9C	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
- stack 0: 0xF0
4387	 9E	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x395
4388	 9F	JUMP		 	 
- stack 0: 0x6F0
4389	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F0
4390	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4391	 397	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
4392	 398	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
- stack 0: 0xE0
4393	 39A	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3950000
4394	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3950000
- stack 0: 0xFFFF
4395	 39E	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4396	 39F	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x1
4397	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4398	 3A2	POP		 	 
- stack 0: 0x6F0
4399	 3A3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4400	 3A5	ADD		 	 
- stack 0: 0x6F4
4401	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4402	 3A7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
4403	 3A8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
- stack 0: 0xF0
4404	 3AA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xA0
4405	 3AB	JUMP		 	 
- stack 0: 0x6F4
4406	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6F4
4407	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4408	 A2	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
4409	 A3	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
- stack 0: 0xE0
4410	 A5	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D
4411	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4412	 A9	AND		 	 
- stack 1: 0x6F4
- stack 0: 0xD
4413	 AA	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0xD
- stack 0: 0x1
4414	 AC	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0xD
4415	 AD	PUSH2	0040	 	 
- stack 2: 0x6F4
- stack 1: 0xD
- stack 0: 0x40
4416	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F4
4417	 B1	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4418	 B3	ADD		 	 
- stack 0: 0x6F8
4419	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4420	 B5	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F1001A010B01C8029F0000
4421	 B6	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F1001A010B01C8029F0000
- stack 0: 0xF0
4422	 B8	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xBA
4423	 B9	JUMP		 	 
- stack 0: 0x6F8
4424	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x6F8
4425	 BB	PUSH2	0040	 	 
- stack 1: 0x6F8
- stack 0: 0x40
4426	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F8
- stack 0: 0xD
4427	 BF	PUSH1	03	 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0x3
4428	 C1	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0xD
4429	 C2	PUSH2	0020	 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0x20
4430	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0xA
4431	 C6	PUSH1	03	 	 
- stack 3: 0x6F8
- stack 2: 0xD
- stack 1: 0xA
- stack 0: 0x3
4432	 C8	SIGNEXTEND		 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0xA
4433	 C9	SLT		 	 
- stack 1: 0x6F8
- stack 0: 0x1
4434	 CA	PUSH2	0060	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x60
4435	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F8
4436	 CE	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4437	 D0	ADD		 	 
- stack 0: 0x6FC
4438	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4439	 D2	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
4440	 D3	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
- stack 0: 0xF0
4441	 D5	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8
4442	 D6	JUMP		 	 
- stack 0: 0x6FC
4443	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6FC
4444	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
4445	 2DA	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
4446	 2DB	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
- stack 0: 0xE0
4447	 2DD	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x2D80001
4448	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4449	 2E1	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4450	 2E2	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
4451	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4452	 2E5	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
4453	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x0
4454	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6FC
- stack 0: 0x1
4455	 2EA	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
4456	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6FC
4457	 2EE	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4458	 2F0	ADD		 	 
- stack 0: 0x700
4459	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4460	 2F2	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
4461	 2F3	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
- stack 0: 0xF0
4462	 2F5	SHR		 	 
- stack 1: 0x700
- stack 0: 0x2F7
4463	 2F6	JUMP		 	 
- stack 0: 0x700
4464	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x700
4465	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4466	 2F9	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
4467	 2FA	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
- stack 0: 0xE0
4468	 2FC	SHR		 	 
- stack 1: 0x700
- stack 0: 0x2F70002
4469	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4470	 300	AND		 	 
- stack 1: 0x700
- stack 0: 0x2
4471	 301	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x1
4472	 303	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x2
4473	 304	PUSH2	00A0	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0xA0
4474	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x700
4475	 308	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4476	 30A	ADD		 	 
- stack 0: 0x704
4477	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4478	 30C	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
4479	 30D	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
- stack 0: 0xF0
4480	 30F	SHR		 	 
- stack 1: 0x704
- stack 0: 0x311
4481	 310	JUMP		 	 
- stack 0: 0x704
4482	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x704
4483	 312	PUSH2	0080	 	 
- stack 1: 0x704
- stack 0: 0x80
4484	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x704
- stack 0: 0x1
4485	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4486	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x1
4487	 31C	PUSH2	00A0	 	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0xA0
4488	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x2
4489	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4490	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x2
4491	 326	SUB		 	 
- stack 1: 0x704
- stack 0: 0x1
4492	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x704
- stack 1: 0x1
- stack 0: 0x32F
4493	 32A	JUMPI		 	 
- stack 0: 0x704
4494	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x704
4495	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4496	 331	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
4497	 332	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
- stack 0: 0xE0
4498	 334	SHR		 	 
- stack 1: 0x704
- stack 0: 0x311FFE8
4499	 335	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x311FFE8
- stack 0: 0xFFFF
4500	 338	AND		 	 
- stack 1: 0x704
- stack 0: 0xFFE8
4501	 339	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xFFE8
- stack 0: 0x1
4502	 33B	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4503	 33C	ADD		 	 
- stack 0: 0x6EC
4504	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFF
4505	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6EC
4506	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4507	 344	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
4508	 345	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
4509	 347	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x86
4510	 348	JUMP		 	 
- stack 0: 0x6EC
4511	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6EC
4512	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4513	 88	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
4514	 89	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A0395000000A0000D00BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
4515	 8B	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x86000A
4516	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x86000A
- stack 0: 0xFFFF
4517	 8F	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xA
4518	 90	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xA
- stack 0: 0x1
4519	 92	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xA
4520	 93	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xA
- stack 0: 0x20
4521	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6EC
4522	 97	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4523	 99	ADD		 	 
- stack 0: 0x6F0
4524	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4525	 9B	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
4526	 9C	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
- stack 0: 0xF0
4527	 9E	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x395
4528	 9F	JUMP		 	 
- stack 0: 0x6F0
4529	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F0
4530	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4531	 397	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
4532	 398	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE800D7000100F1001A
- stack 0: 0xE0
4533	 39A	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3950000
4534	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3950000
- stack 0: 0xFFFF
4535	 39E	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4536	 39F	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x1
4537	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4538	 3A2	POP		 	 
- stack 0: 0x6F0
4539	 3A3	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4540	 3A5	ADD		 	 
- stack 0: 0x6F4
4541	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4542	 3A7	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
4543	 3A8	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
- stack 0: 0xF0
4544	 3AA	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xA0
4545	 3AB	JUMP		 	 
- stack 0: 0x6F4
4546	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6F4
4547	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4548	 A2	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
4549	 A3	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE800D7000100F1001A010B01C8
- stack 0: 0xE0
4550	 A5	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xA0000D
4551	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4552	 A9	AND		 	 
- stack 1: 0x6F4
- stack 0: 0xD
4553	 AA	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0xD
- stack 0: 0x1
4554	 AC	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0xD
4555	 AD	PUSH2	0040	 	 
- stack 2: 0x6F4
- stack 1: 0xD
- stack 0: 0x40
4556	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F4
4557	 B1	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4558	 B3	ADD		 	 
- stack 0: 0x6F8
4559	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4560	 B5	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F1001A010B01C8029F0000
4561	 B6	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F1001A010B01C8029F0000
- stack 0: 0xF0
4562	 B8	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xBA
4563	 B9	JUMP		 	 
- stack 0: 0x6F8
4564	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x6F8
4565	 BB	PUSH2	0040	 	 
- stack 1: 0x6F8
- stack 0: 0x40
4566	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F8
- stack 0: 0xD
4567	 BF	PUSH1	03	 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0x3
4568	 C1	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0xD
4569	 C2	PUSH2	0020	 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0x20
4570	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0xA
4571	 C6	PUSH1	03	 	 
- stack 3: 0x6F8
- stack 2: 0xD
- stack 1: 0xA
- stack 0: 0x3
4572	 C8	SIGNEXTEND		 	 
- stack 2: 0x6F8
- stack 1: 0xD
- stack 0: 0xA
4573	 C9	SLT		 	 
- stack 1: 0x6F8
- stack 0: 0x1
4574	 CA	PUSH2	0060	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x60
4575	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F8
4576	 CE	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4577	 D0	ADD		 	 
- stack 0: 0x6FC
4578	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4579	 D2	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
4580	 D3	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
- stack 0: 0xF0
4581	 D5	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8
4582	 D6	JUMP		 	 
- stack 0: 0x6FC
4583	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6FC
4584	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
4585	 2DA	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
4586	 2DB	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001A010B01C8029F000000860010
- stack 0: 0xE0
4587	 2DD	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x2D80001
4588	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4589	 2E1	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4590	 2E2	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
4591	 2E4	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4592	 2E5	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x80
4593	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x1
4594	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x6FC
- stack 0: 0x2
4595	 2EA	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x80
4596	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x6FC
4597	 2EE	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4598	 2F0	ADD		 	 
- stack 0: 0x700
4599	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4600	 2F2	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
4601	 2F3	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
- stack 0: 0xF0
4602	 2F5	SHR		 	 
- stack 1: 0x700
- stack 0: 0x2F7
4603	 2F6	JUMP		 	 
- stack 0: 0x700
4604	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x700
4605	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4606	 2F9	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
4607	 2FA	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x2F700020311FFE800D7000100F1001A010B01C8029F00000086001003950000
- stack 0: 0xE0
4608	 2FC	SHR		 	 
- stack 1: 0x700
- stack 0: 0x2F70002
4609	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4610	 300	AND		 	 
- stack 1: 0x700
- stack 0: 0x2
4611	 301	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x1
4612	 303	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x2
4613	 304	PUSH2	00A0	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0xA0
4614	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x700
4615	 308	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4616	 30A	ADD		 	 
- stack 0: 0x704
4617	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4618	 30C	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
4619	 30D	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x311FFE800D7000100F1001A010B01C8029F0000008600100395000000A0000D
- stack 0: 0xF0
4620	 30F	SHR		 	 
- stack 1: 0x704
- stack 0: 0x311
4621	 310	JUMP		 	 
- stack 0: 0x704
4622	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x704
4623	 312	PUSH2	0080	 	 
- stack 1: 0x704
- stack 0: 0x80
4624	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x704
- stack 0: 0x2
4625	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4626	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x2
4627	 31C	PUSH2	00A0	 	 
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0xA0
4628	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0x2
4629	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x704
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4630	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x704
- stack 1: 0x2
- stack 0: 0x2
4631	 326	SUB		 	 
- stack 1: 0x704
- stack 0: 0x0
4632	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x704
- stack 1: 0x0
- stack 0: 0x32F
4633	 32A	JUMPI		 	 
- stack 0: 0x704
4634	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x704
- stack 0: 0x349
4635	 32E	JUMP		 	 
- stack 0: 0x704
4636	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x704
4637	 34A	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4638	 34C	ADD		 	 
- stack 0: 0x708
4639	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4640	 34E	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0xD7000100F1001A010B01C8029F0000008600100395000000A0000D03950000
4641	 34F	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0xD7000100F1001A010B01C8029F0000008600100395000000A0000D03950000
- stack 0: 0xF0
4642	 351	SHR		 	 
- stack 1: 0x708
- stack 0: 0xD7
4643	 352	JUMP		 	 
- stack 0: 0x708
4644	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x708
4645	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
4646	 D9	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0xD7000100F1001A010B01C8029F0000008600100395000000A0000D03950000
4647	 DA	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0xD7000100F1001A010B01C8029F0000008600100395000000A0000D03950000
- stack 0: 0xE0
4648	 DC	SHR		 	 
- stack 1: 0x708
- stack 0: 0xD70001
4649	 DD	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0xD70001
- stack 0: 0xFFFF
4650	 E0	AND		 	 
- stack 1: 0x708
- stack 0: 0x1
4651	 E1	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x1
4652	 E3	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1
4653	 E4	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0x1
- stack 0: 0x3A0
4654	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x708
4655	 E8	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4656	 EA	ADD		 	 
- stack 0: 0x70C
4657	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4658	 EC	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xF1001A010B01C8029F0000008600100395000000A0000D0395000000BA0000
4659	 ED	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xF1001A010B01C8029F0000008600100395000000A0000D0395000000BA0000
- stack 0: 0xF0
4660	 EF	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xF1
4661	 F0	JUMP		 	 
- stack 0: 0x70C
4662	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x70C
4663	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4664	 F3	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xF1001A010B01C8029F0000008600100395000000A0000D0395000000BA0000
4665	 F4	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0xF1001A010B01C8029F0000008600100395000000A0000D0395000000BA0000
- stack 0: 0xE0
4666	 F6	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xF1001A
4667	 F7	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0xF1001A
- stack 0: 0xFFFF
4668	 FA	AND		 	 
- stack 1: 0x70C
- stack 0: 0x1A
4669	 FB	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x1A
- stack 0: 0x1
4670	 FD	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x1A
4671	 FE	PUSH2	0380	 	 
- stack 2: 0x70C
- stack 1: 0x1A
- stack 0: 0x380
4672	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x70C
4673	 102	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4674	 104	ADD		 	 
- stack 0: 0x710
4675	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4676	 106	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x10B01C8029F0000008600100395000000A0000D0395000000BA000002D80001
4677	 107	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x10B01C8029F0000008600100395000000A0000D0395000000BA000002D80001
- stack 0: 0xF0
4678	 109	SHR		 	 
- stack 1: 0x710
- stack 0: 0x10B
4679	 10A	JUMP		 	 
- stack 0: 0x710
4680	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x710
4681	 10C	PUSH2	0060	 	 
- stack 1: 0x710
- stack 0: 0x60
4682	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x710
- stack 0: 0x1
4683	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4684	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0x1
4685	 116	PUSH2	03A0	 	 
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x3A0
4686	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x1
4687	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x710
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4688	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x710
- stack 1: 0x1
- stack 0: 0x1
4689	 120	SUB		 	 
- stack 1: 0x710
- stack 0: 0x0
4690	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x129
4691	 124	JUMPI		 	 
- stack 0: 0x710
4692	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x710
- stack 0: 0x143
4693	 128	JUMP		 	 
- stack 0: 0x710
4694	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x710
4695	 144	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4696	 146	ADD		 	 
- stack 0: 0x714
4697	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4698	 148	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x29F0000008600100395000000A0000D0395000000BA000002D8000102F70002
4699	 149	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x29F0000008600100395000000A0000D0395000000BA000002D8000102F70002
- stack 0: 0xF0
4700	 14B	SHR		 	 
- stack 1: 0x714
- stack 0: 0x29F
4701	 14C	JUMP		 	 
- stack 0: 0x714
4702	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x714
4703	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4704	 2A1	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x29F0000008600100395000000A0000D0395000000BA000002D8000102F70002
4705	 2A2	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x29F0000008600100395000000A0000D0395000000BA000002D8000102F70002
- stack 0: 0xE0
4706	 2A4	SHR		 	 
- stack 1: 0x714
- stack 0: 0x29F0000
4707	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x29F0000
- stack 0: 0xFFFF
4708	 2A8	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
4709	 2A9	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
4710	 2AB	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
4711	 2AC	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x80
4712	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
4713	 2B0	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4714	 2B2	ADD		 	 
- stack 0: 0x718
4715	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4716	 2B4	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
4717	 2B5	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
4718	 2B7	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
4719	 2B8	JUMP		 	 
- stack 0: 0x718
4720	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x718
4721	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4722	 88	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
4723	 89	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
4724	 8B	SHR		 	 
- stack 1: 0x718
- stack 0: 0x860010
4725	 8C	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x860010
- stack 0: 0xFFFF
4726	 8F	AND		 	 
- stack 1: 0x718
- stack 0: 0x10
4727	 90	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x10
- stack 0: 0x1
4728	 92	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x10
4729	 93	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0x10
- stack 0: 0x20
4730	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
4731	 97	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4732	 99	ADD		 	 
- stack 0: 0x71C
4733	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4734	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
4735	 9C	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
4736	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x395
4737	 9F	JUMP		 	 
- stack 0: 0x71C
4738	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
4739	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4740	 397	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
4741	 398	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
4742	 39A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3950000
4743	 39B	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3950000
- stack 0: 0xFFFF
4744	 39E	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4745	 39F	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
4746	 3A1	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4747	 3A2	POP		 	 
- stack 0: 0x71C
4748	 3A3	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4749	 3A5	ADD		 	 
- stack 0: 0x720
4750	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4751	 3A7	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
4752	 3A8	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
- stack 0: 0xF0
4753	 3AA	SHR		 	 
- stack 1: 0x720
- stack 0: 0xA0
4754	 3AB	JUMP		 	 
- stack 0: 0x720
4755	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x720
4756	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
4757	 A2	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
4758	 A3	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
- stack 0: 0xE0
4759	 A5	SHR		 	 
- stack 1: 0x720
- stack 0: 0xA0000D
4760	 A6	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4761	 A9	AND		 	 
- stack 1: 0x720
- stack 0: 0xD
4762	 AA	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0xD
- stack 0: 0x1
4763	 AC	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0xD
4764	 AD	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0xD
- stack 0: 0x40
4765	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
4766	 B1	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4767	 B3	ADD		 	 
- stack 0: 0x724
4768	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4769	 B5	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
4770	 B6	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
- stack 0: 0xF0
4771	 B8	SHR		 	 
- stack 1: 0x724
- stack 0: 0x395
4772	 B9	JUMP		 	 
- stack 0: 0x724
4773	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x724
4774	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4775	 397	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
4776	 398	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
- stack 0: 0xE0
4777	 39A	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3950000
4778	 39B	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3950000
- stack 0: 0xFFFF
4779	 39E	AND		 	 
- stack 1: 0x724
- stack 0: 0x0
4780	 39F	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0x1
4781	 3A1	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x0
4782	 3A2	POP		 	 
- stack 0: 0x724
4783	 3A3	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4784	 3A5	ADD		 	 
- stack 0: 0x728
4785	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4786	 3A7	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F1001B010B0198029F0000
4787	 3A8	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F1001B010B0198029F0000
- stack 0: 0xF0
4788	 3AA	SHR		 	 
- stack 1: 0x728
- stack 0: 0xBA
4789	 3AB	JUMP		 	 
- stack 0: 0x728
4790	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x728
4791	 BB	PUSH2	0040	 	 
- stack 1: 0x728
- stack 0: 0x40
4792	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x728
- stack 0: 0xD
4793	 BF	PUSH1	03	 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x3
4794	 C1	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0xD
4795	 C2	PUSH2	0020	 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x20
4796	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x10
4797	 C6	PUSH1	03	 	 
- stack 3: 0x728
- stack 2: 0xD
- stack 1: 0x10
- stack 0: 0x3
4798	 C8	SIGNEXTEND		 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x10
4799	 C9	SLT		 	 
- stack 1: 0x728
- stack 0: 0x0
4800	 CA	PUSH2	0060	 	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x60
4801	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x728
4802	 CE	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4803	 D0	ADD		 	 
- stack 0: 0x72C
4804	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4805	 D2	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
4806	 D3	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
- stack 0: 0xF0
4807	 D5	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2D8
4808	 D6	JUMP		 	 
- stack 0: 0x72C
4809	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x72C
4810	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4811	 2DA	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
4812	 2DB	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
- stack 0: 0xE0
4813	 2DD	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2D80001
4814	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4815	 2E1	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1
4816	 2E2	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x1
4817	 2E4	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1
4818	 2E5	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x80
4819	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x0
4820	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x72C
- stack 0: 0x1
4821	 2EA	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x80
4822	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x72C
4823	 2EE	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4824	 2F0	ADD		 	 
- stack 0: 0x730
4825	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4826	 2F2	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
4827	 2F3	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
- stack 0: 0xF0
4828	 2F5	SHR		 	 
- stack 1: 0x730
- stack 0: 0x2F7
4829	 2F6	JUMP		 	 
- stack 0: 0x730
4830	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x730
4831	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4832	 2F9	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
4833	 2FA	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
- stack 0: 0xE0
4834	 2FC	SHR		 	 
- stack 1: 0x730
- stack 0: 0x2F70002
4835	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4836	 300	AND		 	 
- stack 1: 0x730
- stack 0: 0x2
4837	 301	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x1
4838	 303	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0x2
4839	 304	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xA0
4840	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x730
4841	 308	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4842	 30A	ADD		 	 
- stack 0: 0x734
4843	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4844	 30C	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
4845	 30D	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
- stack 0: 0xF0
4846	 30F	SHR		 	 
- stack 1: 0x734
- stack 0: 0x311
4847	 310	JUMP		 	 
- stack 0: 0x734
4848	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x734
4849	 312	PUSH2	0080	 	 
- stack 1: 0x734
- stack 0: 0x80
4850	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x734
- stack 0: 0x1
4851	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4852	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x1
4853	 31C	PUSH2	00A0	 	 
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0xA0
4854	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0x2
4855	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x734
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4856	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0x2
4857	 326	SUB		 	 
- stack 1: 0x734
- stack 0: 0x1
4858	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x734
- stack 1: 0x1
- stack 0: 0x32F
4859	 32A	JUMPI		 	 
- stack 0: 0x734
4860	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x734
4861	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4862	 331	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
4863	 332	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
- stack 0: 0xE0
4864	 334	SHR		 	 
- stack 1: 0x734
- stack 0: 0x311FFE4
4865	 335	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
4866	 338	AND		 	 
- stack 1: 0x734
- stack 0: 0xFFE4
4867	 339	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0xFFE4
- stack 0: 0x1
4868	 33B	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4869	 33C	ADD		 	 
- stack 0: 0x718
4870	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x718
- stack 0: 0xFFFFFFFF
4871	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x718
4872	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4873	 344	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
4874	 345	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
4875	 347	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
4876	 348	JUMP		 	 
- stack 0: 0x718
4877	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x718
4878	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4879	 88	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
4880	 89	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x8600100395000000A0000D0395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
4881	 8B	SHR		 	 
- stack 1: 0x718
- stack 0: 0x860010
4882	 8C	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x860010
- stack 0: 0xFFFF
4883	 8F	AND		 	 
- stack 1: 0x718
- stack 0: 0x10
4884	 90	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x10
- stack 0: 0x1
4885	 92	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x10
4886	 93	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0x10
- stack 0: 0x20
4887	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
4888	 97	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4889	 99	ADD		 	 
- stack 0: 0x71C
4890	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4891	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
4892	 9C	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
4893	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x395
4894	 9F	JUMP		 	 
- stack 0: 0x71C
4895	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
4896	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4897	 397	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
4898	 398	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x395000000A0000D0395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
4899	 39A	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3950000
4900	 39B	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3950000
- stack 0: 0xFFFF
4901	 39E	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4902	 39F	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
4903	 3A1	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4904	 3A2	POP		 	 
- stack 0: 0x71C
4905	 3A3	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4906	 3A5	ADD		 	 
- stack 0: 0x720
4907	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4908	 3A7	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
4909	 3A8	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
- stack 0: 0xF0
4910	 3AA	SHR		 	 
- stack 1: 0x720
- stack 0: 0xA0
4911	 3AB	JUMP		 	 
- stack 0: 0x720
4912	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x720
4913	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
4914	 A2	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
4915	 A3	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0xA0000D0395000000BA000002D8000102F700020311FFE400D7000000F1001B
- stack 0: 0xE0
4916	 A5	SHR		 	 
- stack 1: 0x720
- stack 0: 0xA0000D
4917	 A6	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0xA0000D
- stack 0: 0xFFFF
4918	 A9	AND		 	 
- stack 1: 0x720
- stack 0: 0xD
4919	 AA	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0xD
- stack 0: 0x1
4920	 AC	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0xD
4921	 AD	PUSH2	0040	 	 
- stack 2: 0x720
- stack 1: 0xD
- stack 0: 0x40
4922	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x720
4923	 B1	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4924	 B3	ADD		 	 
- stack 0: 0x724
4925	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4926	 B5	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
4927	 B6	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
- stack 0: 0xF0
4928	 B8	SHR		 	 
- stack 1: 0x724
- stack 0: 0x395
4929	 B9	JUMP		 	 
- stack 0: 0x724
4930	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x724
4931	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4932	 397	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
4933	 398	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001B010B0198
- stack 0: 0xE0
4934	 39A	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3950000
4935	 39B	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3950000
- stack 0: 0xFFFF
4936	 39E	AND		 	 
- stack 1: 0x724
- stack 0: 0x0
4937	 39F	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0x1
4938	 3A1	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x0
4939	 3A2	POP		 	 
- stack 0: 0x724
4940	 3A3	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4941	 3A5	ADD		 	 
- stack 0: 0x728
4942	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4943	 3A7	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F1001B010B0198029F0000
4944	 3A8	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F1001B010B0198029F0000
- stack 0: 0xF0
4945	 3AA	SHR		 	 
- stack 1: 0x728
- stack 0: 0xBA
4946	 3AB	JUMP		 	 
- stack 0: 0x728
4947	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x728
4948	 BB	PUSH2	0040	 	 
- stack 1: 0x728
- stack 0: 0x40
4949	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x728
- stack 0: 0xD
4950	 BF	PUSH1	03	 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x3
4951	 C1	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0xD
4952	 C2	PUSH2	0020	 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x20
4953	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x10
4954	 C6	PUSH1	03	 	 
- stack 3: 0x728
- stack 2: 0xD
- stack 1: 0x10
- stack 0: 0x3
4955	 C8	SIGNEXTEND		 	 
- stack 2: 0x728
- stack 1: 0xD
- stack 0: 0x10
4956	 C9	SLT		 	 
- stack 1: 0x728
- stack 0: 0x0
4957	 CA	PUSH2	0060	 	 
- stack 2: 0x728
- stack 1: 0x0
- stack 0: 0x60
4958	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x728
4959	 CE	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4960	 D0	ADD		 	 
- stack 0: 0x72C
4961	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4962	 D2	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
4963	 D3	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
- stack 0: 0xF0
4964	 D5	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2D8
4965	 D6	JUMP		 	 
- stack 0: 0x72C
4966	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x72C
4967	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4968	 2DA	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
4969	 2DB	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001B010B0198029F000000860009
- stack 0: 0xE0
4970	 2DD	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x2D80001
4971	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
4972	 2E1	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1
4973	 2E2	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x1
4974	 2E4	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1
4975	 2E5	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x80
4976	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x1
4977	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x72C
- stack 0: 0x2
4978	 2EA	PUSH2	0080	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x80
4979	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x72C
4980	 2EE	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4981	 2F0	ADD		 	 
- stack 0: 0x730
4982	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4983	 2F2	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
4984	 2F3	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
- stack 0: 0xF0
4985	 2F5	SHR		 	 
- stack 1: 0x730
- stack 0: 0x2F7
4986	 2F6	JUMP		 	 
- stack 0: 0x730
4987	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x730
4988	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4989	 2F9	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
4990	 2FA	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0x2F700020311FFE400D7000000F1001B010B0198029F00000086000903950000
- stack 0: 0xE0
4991	 2FC	SHR		 	 
- stack 1: 0x730
- stack 0: 0x2F70002
4992	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0x2F70002
- stack 0: 0xFFFF
4993	 300	AND		 	 
- stack 1: 0x730
- stack 0: 0x2
4994	 301	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0x1
4995	 303	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0x2
4996	 304	PUSH2	00A0	 	 
- stack 2: 0x730
- stack 1: 0x2
- stack 0: 0xA0
4997	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x730
4998	 308	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4999	 30A	ADD		 	 
- stack 0: 0x734
5000	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5001	 30C	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
5002	 30D	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x311FFE400D7000000F1001B010B0198029F0000008600090395000003950000
- stack 0: 0xF0
5003	 30F	SHR		 	 
- stack 1: 0x734
- stack 0: 0x311
5004	 310	JUMP		 	 
- stack 0: 0x734
5005	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x734
5006	 312	PUSH2	0080	 	 
- stack 1: 0x734
- stack 0: 0x80
5007	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x734
- stack 0: 0x2
5008	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x734
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5009	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x734
- stack 0: 0x2
5010	 31C	PUSH2	00A0	 	 
- stack 2: 0x734
- stack 1: 0x2
- stack 0: 0xA0
5011	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x734
- stack 1: 0x2
- stack 0: 0x2
5012	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x734
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5013	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x734
- stack 1: 0x2
- stack 0: 0x2
5014	 326	SUB		 	 
- stack 1: 0x734
- stack 0: 0x0
5015	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x32F
5016	 32A	JUMPI		 	 
- stack 0: 0x734
5017	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x734
- stack 0: 0x349
5018	 32E	JUMP		 	 
- stack 0: 0x734
5019	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x734
5020	 34A	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5021	 34C	ADD		 	 
- stack 0: 0x738
5022	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5023	 34E	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xD7000000F1001B010B0198029F000000860009039500000395000000A0000D
5024	 34F	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0xD7000000F1001B010B0198029F000000860009039500000395000000A0000D
- stack 0: 0xF0
5025	 351	SHR		 	 
- stack 1: 0x738
- stack 0: 0xD7
5026	 352	JUMP		 	 
- stack 0: 0x738
5027	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x738
5028	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
5029	 D9	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0xD7000000F1001B010B0198029F000000860009039500000395000000A0000D
5030	 DA	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0xD7000000F1001B010B0198029F000000860009039500000395000000A0000D
- stack 0: 0xE0
5031	 DC	SHR		 	 
- stack 1: 0x738
- stack 0: 0xD70000
5032	 DD	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0xD70000
- stack 0: 0xFFFF
5033	 E0	AND		 	 
- stack 1: 0x738
- stack 0: 0x0
5034	 E1	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x1
5035	 E3	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x0
5036	 E4	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x3A0
5037	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x738
5038	 E8	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5039	 EA	ADD		 	 
- stack 0: 0x73C
5040	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5041	 EC	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0xF1001B010B0198029F000000860009039500000395000000A0000D00BA0000
5042	 ED	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0xF1001B010B0198029F000000860009039500000395000000A0000D00BA0000
- stack 0: 0xF0
5043	 EF	SHR		 	 
- stack 1: 0x73C
- stack 0: 0xF1
5044	 F0	JUMP		 	 
- stack 0: 0x73C
5045	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x73C
5046	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
5047	 F3	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0xF1001B010B0198029F000000860009039500000395000000A0000D00BA0000
5048	 F4	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0xF1001B010B0198029F000000860009039500000395000000A0000D00BA0000
- stack 0: 0xE0
5049	 F6	SHR		 	 
- stack 1: 0x73C
- stack 0: 0xF1001B
5050	 F7	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0xF1001B
- stack 0: 0xFFFF
5051	 FA	AND		 	 
- stack 1: 0x73C
- stack 0: 0x1B
5052	 FB	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x1B
- stack 0: 0x1
5053	 FD	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x1B
5054	 FE	PUSH2	0380	 	 
- stack 2: 0x73C
- stack 1: 0x1B
- stack 0: 0x380
5055	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x73C
5056	 102	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5057	 104	ADD		 	 
- stack 0: 0x740
5058	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5059	 106	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x10B0198029F000000860009039500000395000000A0000D00BA000002D80001
5060	 107	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x10B0198029F000000860009039500000395000000A0000D00BA000002D80001
- stack 0: 0xF0
5061	 109	SHR		 	 
- stack 1: 0x740
- stack 0: 0x10B
5062	 10A	JUMP		 	 
- stack 0: 0x740
5063	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x740
5064	 10C	PUSH2	0060	 	 
- stack 1: 0x740
- stack 0: 0x60
5065	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x740
- stack 0: 0x0
5066	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5067	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x740
- stack 0: 0x0
5068	 116	PUSH2	03A0	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x3A0
5069	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x0
5070	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x740
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5071	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x0
5072	 120	SUB		 	 
- stack 1: 0x740
- stack 0: 0x0
5073	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x129
5074	 124	JUMPI		 	 
- stack 0: 0x740
5075	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x740
- stack 0: 0x143
5076	 128	JUMP		 	 
- stack 0: 0x740
5077	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x740
5078	 144	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5079	 146	ADD		 	 
- stack 0: 0x744
5080	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5081	 148	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x29F000000860009039500000395000000A0000D00BA000002D8000102F70002
5082	 149	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x29F000000860009039500000395000000A0000D00BA000002D8000102F70002
- stack 0: 0xF0
5083	 14B	SHR		 	 
- stack 1: 0x744
- stack 0: 0x29F
5084	 14C	JUMP		 	 
- stack 0: 0x744
5085	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x744
5086	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5087	 2A1	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x29F000000860009039500000395000000A0000D00BA000002D8000102F70002
5088	 2A2	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x29F000000860009039500000395000000A0000D00BA000002D8000102F70002
- stack 0: 0xE0
5089	 2A4	SHR		 	 
- stack 1: 0x744
- stack 0: 0x29F0000
5090	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x29F0000
- stack 0: 0xFFFF
5091	 2A8	AND		 	 
- stack 1: 0x744
- stack 0: 0x0
5092	 2A9	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x1
5093	 2AB	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x0
5094	 2AC	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x80
5095	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
5096	 2B0	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5097	 2B2	ADD		 	 
- stack 0: 0x748
5098	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5099	 2B4	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
5100	 2B5	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
- stack 0: 0xF0
5101	 2B7	SHR		 	 
- stack 1: 0x748
- stack 0: 0x86
5102	 2B8	JUMP		 	 
- stack 0: 0x748
5103	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x748
5104	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5105	 88	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
5106	 89	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
- stack 0: 0xE0
5107	 8B	SHR		 	 
- stack 1: 0x748
- stack 0: 0x860009
5108	 8C	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x860009
- stack 0: 0xFFFF
5109	 8F	AND		 	 
- stack 1: 0x748
- stack 0: 0x9
5110	 90	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x9
- stack 0: 0x1
5111	 92	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x9
5112	 93	PUSH2	0020	 	 
- stack 2: 0x748
- stack 1: 0x9
- stack 0: 0x20
5113	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x748
5114	 97	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5115	 99	ADD		 	 
- stack 0: 0x74C
5116	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5117	 9B	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
5118	 9C	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
- stack 0: 0xF0
5119	 9E	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x395
5120	 9F	JUMP		 	 
- stack 0: 0x74C
5121	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x74C
5122	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5123	 397	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
5124	 398	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
- stack 0: 0xE0
5125	 39A	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3950000
5126	 39B	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x3950000
- stack 0: 0xFFFF
5127	 39E	AND		 	 
- stack 1: 0x74C
- stack 0: 0x0
5128	 39F	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x1
5129	 3A1	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x0
5130	 3A2	POP		 	 
- stack 0: 0x74C
5131	 3A3	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5132	 3A5	ADD		 	 
- stack 0: 0x750
5133	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5134	 3A7	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
5135	 3A8	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
- stack 0: 0xF0
5136	 3AA	SHR		 	 
- stack 1: 0x750
- stack 0: 0x395
5137	 3AB	JUMP		 	 
- stack 0: 0x750
5138	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x750
5139	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5140	 397	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
5141	 398	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
- stack 0: 0xE0
5142	 39A	SHR		 	 
- stack 1: 0x750
- stack 0: 0x3950000
5143	 39B	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x3950000
- stack 0: 0xFFFF
5144	 39E	AND		 	 
- stack 1: 0x750
- stack 0: 0x0
5145	 39F	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x0
- stack 0: 0x1
5146	 3A1	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x0
5147	 3A2	POP		 	 
- stack 0: 0x750
5148	 3A3	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5149	 3A5	ADD		 	 
- stack 0: 0x754
5150	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5151	 3A7	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
5152	 3A8	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
- stack 0: 0xF0
5153	 3AA	SHR		 	 
- stack 1: 0x754
- stack 0: 0xA0
5154	 3AB	JUMP		 	 
- stack 0: 0x754
5155	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x754
5156	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5157	 A2	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
5158	 A3	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
- stack 0: 0xE0
5159	 A5	SHR		 	 
- stack 1: 0x754
- stack 0: 0xA0000D
5160	 A6	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5161	 A9	AND		 	 
- stack 1: 0x754
- stack 0: 0xD
5162	 AA	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0xD
- stack 0: 0x1
5163	 AC	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0xD
5164	 AD	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0xD
- stack 0: 0x40
5165	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
5166	 B1	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5167	 B3	ADD		 	 
- stack 0: 0x758
5168	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5169	 B5	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xBA000002D8000102F700020311FFE400D7000100F1001C010B0168029F0000
5170	 B6	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xBA000002D8000102F700020311FFE400D7000100F1001C010B0168029F0000
- stack 0: 0xF0
5171	 B8	SHR		 	 
- stack 1: 0x758
- stack 0: 0xBA
5172	 B9	JUMP		 	 
- stack 0: 0x758
5173	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x758
5174	 BB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5175	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xD
5176	 BF	PUSH1	03	 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x3
5177	 C1	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0xD
5178	 C2	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x20
5179	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x9
5180	 C6	PUSH1	03	 	 
- stack 3: 0x758
- stack 2: 0xD
- stack 1: 0x9
- stack 0: 0x3
5181	 C8	SIGNEXTEND		 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x9
5182	 C9	SLT		 	 
- stack 1: 0x758
- stack 0: 0x1
5183	 CA	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0x1
- stack 0: 0x60
5184	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5185	 CE	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5186	 D0	ADD		 	 
- stack 0: 0x75C
5187	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5188	 D2	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
5189	 D3	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
- stack 0: 0xF0
5190	 D5	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x2D8
5191	 D6	JUMP		 	 
- stack 0: 0x75C
5192	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5193	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5194	 2DA	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
5195	 2DB	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
- stack 0: 0xE0
5196	 2DD	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x2D80001
5197	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
5198	 2E1	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5199	 2E2	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5200	 2E4	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5201	 2E5	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5202	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x0
5203	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x1
5204	 2EA	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5205	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5206	 2EE	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5207	 2F0	ADD		 	 
- stack 0: 0x760
5208	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5209	 2F2	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
5210	 2F3	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
- stack 0: 0xF0
5211	 2F5	SHR		 	 
- stack 1: 0x760
- stack 0: 0x2F7
5212	 2F6	JUMP		 	 
- stack 0: 0x760
5213	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5214	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5215	 2F9	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
5216	 2FA	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
- stack 0: 0xE0
5217	 2FC	SHR		 	 
- stack 1: 0x760
- stack 0: 0x2F70002
5218	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x2F70002
- stack 0: 0xFFFF
5219	 300	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5220	 301	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5221	 303	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5222	 304	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5223	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5224	 308	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5225	 30A	ADD		 	 
- stack 0: 0x764
5226	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5227	 30C	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
5228	 30D	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
- stack 0: 0xF0
5229	 30F	SHR		 	 
- stack 1: 0x764
- stack 0: 0x311
5230	 310	JUMP		 	 
- stack 0: 0x764
5231	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x764
5232	 312	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5233	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x1
5234	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5235	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x1
5236	 31C	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xA0
5237	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5238	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5239	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5240	 326	SUB		 	 
- stack 1: 0x764
- stack 0: 0x1
5241	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x32F
5242	 32A	JUMPI		 	 
- stack 0: 0x764
5243	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x764
5244	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5245	 331	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
5246	 332	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
- stack 0: 0xE0
5247	 334	SHR		 	 
- stack 1: 0x764
- stack 0: 0x311FFE4
5248	 335	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
5249	 338	AND		 	 
- stack 1: 0x764
- stack 0: 0xFFE4
5250	 339	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0xFFE4
- stack 0: 0x1
5251	 33B	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5252	 33C	ADD		 	 
- stack 0: 0x748
5253	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x748
- stack 0: 0xFFFFFFFF
5254	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x748
5255	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5256	 344	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
5257	 345	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
- stack 0: 0xF0
5258	 347	SHR		 	 
- stack 1: 0x748
- stack 0: 0x86
5259	 348	JUMP		 	 
- stack 0: 0x748
5260	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x748
5261	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5262	 88	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
5263	 89	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x860009039500000395000000A0000D00BA000002D8000102F700020311FFE4
- stack 0: 0xE0
5264	 8B	SHR		 	 
- stack 1: 0x748
- stack 0: 0x860009
5265	 8C	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x860009
- stack 0: 0xFFFF
5266	 8F	AND		 	 
- stack 1: 0x748
- stack 0: 0x9
5267	 90	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x9
- stack 0: 0x1
5268	 92	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x9
5269	 93	PUSH2	0020	 	 
- stack 2: 0x748
- stack 1: 0x9
- stack 0: 0x20
5270	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x748
5271	 97	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5272	 99	ADD		 	 
- stack 0: 0x74C
5273	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5274	 9B	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
5275	 9C	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
- stack 0: 0xF0
5276	 9E	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x395
5277	 9F	JUMP		 	 
- stack 0: 0x74C
5278	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x74C
5279	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5280	 397	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
5281	 398	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x39500000395000000A0000D00BA000002D8000102F700020311FFE400D70001
- stack 0: 0xE0
5282	 39A	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3950000
5283	 39B	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x3950000
- stack 0: 0xFFFF
5284	 39E	AND		 	 
- stack 1: 0x74C
- stack 0: 0x0
5285	 39F	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x1
5286	 3A1	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x0
5287	 3A2	POP		 	 
- stack 0: 0x74C
5288	 3A3	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5289	 3A5	ADD		 	 
- stack 0: 0x750
5290	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5291	 3A7	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
5292	 3A8	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
- stack 0: 0xF0
5293	 3AA	SHR		 	 
- stack 1: 0x750
- stack 0: 0x395
5294	 3AB	JUMP		 	 
- stack 0: 0x750
5295	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x750
5296	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5297	 397	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
5298	 398	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x395000000A0000D00BA000002D8000102F700020311FFE400D7000100F1001C
- stack 0: 0xE0
5299	 39A	SHR		 	 
- stack 1: 0x750
- stack 0: 0x3950000
5300	 39B	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x3950000
- stack 0: 0xFFFF
5301	 39E	AND		 	 
- stack 1: 0x750
- stack 0: 0x0
5302	 39F	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x0
- stack 0: 0x1
5303	 3A1	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x0
5304	 3A2	POP		 	 
- stack 0: 0x750
5305	 3A3	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5306	 3A5	ADD		 	 
- stack 0: 0x754
5307	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5308	 3A7	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
5309	 3A8	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
- stack 0: 0xF0
5310	 3AA	SHR		 	 
- stack 1: 0x754
- stack 0: 0xA0
5311	 3AB	JUMP		 	 
- stack 0: 0x754
5312	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x754
5313	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5314	 A2	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
5315	 A3	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0xA0000D00BA000002D8000102F700020311FFE400D7000100F1001C010B0168
- stack 0: 0xE0
5316	 A5	SHR		 	 
- stack 1: 0x754
- stack 0: 0xA0000D
5317	 A6	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5318	 A9	AND		 	 
- stack 1: 0x754
- stack 0: 0xD
5319	 AA	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0xD
- stack 0: 0x1
5320	 AC	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0xD
5321	 AD	PUSH2	0040	 	 
- stack 2: 0x754
- stack 1: 0xD
- stack 0: 0x40
5322	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x754
5323	 B1	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5324	 B3	ADD		 	 
- stack 0: 0x758
5325	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5326	 B5	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xBA000002D8000102F700020311FFE400D7000100F1001C010B0168029F0000
5327	 B6	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xBA000002D8000102F700020311FFE400D7000100F1001C010B0168029F0000
- stack 0: 0xF0
5328	 B8	SHR		 	 
- stack 1: 0x758
- stack 0: 0xBA
5329	 B9	JUMP		 	 
- stack 0: 0x758
5330	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x758
5331	 BB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5332	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xD
5333	 BF	PUSH1	03	 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x3
5334	 C1	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0xD
5335	 C2	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x20
5336	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x9
5337	 C6	PUSH1	03	 	 
- stack 3: 0x758
- stack 2: 0xD
- stack 1: 0x9
- stack 0: 0x3
5338	 C8	SIGNEXTEND		 	 
- stack 2: 0x758
- stack 1: 0xD
- stack 0: 0x9
5339	 C9	SLT		 	 
- stack 1: 0x758
- stack 0: 0x1
5340	 CA	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0x1
- stack 0: 0x60
5341	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5342	 CE	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5343	 D0	ADD		 	 
- stack 0: 0x75C
5344	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5345	 D2	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
5346	 D3	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
- stack 0: 0xF0
5347	 D5	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x2D8
5348	 D6	JUMP		 	 
- stack 0: 0x75C
5349	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5350	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5351	 2DA	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
5352	 2DB	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x2D8000102F700020311FFE400D7000100F1001C010B0168029F000000A0000D
- stack 0: 0xE0
5353	 2DD	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x2D80001
5354	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
5355	 2E1	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5356	 2E2	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5357	 2E4	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5358	 2E5	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5359	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5360	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x2
5361	 2EA	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0x80
5362	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5363	 2EE	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5364	 2F0	ADD		 	 
- stack 0: 0x760
5365	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5366	 2F2	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
5367	 2F3	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
- stack 0: 0xF0
5368	 2F5	SHR		 	 
- stack 1: 0x760
- stack 0: 0x2F7
5369	 2F6	JUMP		 	 
- stack 0: 0x760
5370	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5371	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5372	 2F9	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
5373	 2FA	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x2F700020311FFE400D7000100F1001C010B0168029F000000A0000D00860011
- stack 0: 0xE0
5374	 2FC	SHR		 	 
- stack 1: 0x760
- stack 0: 0x2F70002
5375	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x2F70002
- stack 0: 0xFFFF
5376	 300	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5377	 301	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5378	 303	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5379	 304	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5380	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5381	 308	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5382	 30A	ADD		 	 
- stack 0: 0x764
5383	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5384	 30C	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
5385	 30D	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x311FFE400D7000100F1001C010B0168029F000000A0000D0086001100BA0000
- stack 0: 0xF0
5386	 30F	SHR		 	 
- stack 1: 0x764
- stack 0: 0x311
5387	 310	JUMP		 	 
- stack 0: 0x764
5388	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x764
5389	 312	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5390	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x2
5391	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5392	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x2
5393	 31C	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xA0
5394	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5395	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5396	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5397	 326	SUB		 	 
- stack 1: 0x764
- stack 0: 0x0
5398	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x32F
5399	 32A	JUMPI		 	 
- stack 0: 0x764
5400	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x764
- stack 0: 0x349
5401	 32E	JUMP		 	 
- stack 0: 0x764
5402	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x764
5403	 34A	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5404	 34C	ADD		 	 
- stack 0: 0x768
5405	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5406	 34E	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0xD7000100F1001C010B0168029F000000A0000D0086001100BA000002D80001
5407	 34F	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0xD7000100F1001C010B0168029F000000A0000D0086001100BA000002D80001
- stack 0: 0xF0
5408	 351	SHR		 	 
- stack 1: 0x768
- stack 0: 0xD7
5409	 352	JUMP		 	 
- stack 0: 0x768
5410	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x768
5411	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
5412	 D9	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0xD7000100F1001C010B0168029F000000A0000D0086001100BA000002D80001
5413	 DA	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0xD7000100F1001C010B0168029F000000A0000D0086001100BA000002D80001
- stack 0: 0xE0
5414	 DC	SHR		 	 
- stack 1: 0x768
- stack 0: 0xD70001
5415	 DD	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0xD70001
- stack 0: 0xFFFF
5416	 E0	AND		 	 
- stack 1: 0x768
- stack 0: 0x1
5417	 E1	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0x1
5418	 E3	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x1
5419	 E4	PUSH2	03A0	 	 
- stack 2: 0x768
- stack 1: 0x1
- stack 0: 0x3A0
5420	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x768
5421	 E8	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5422	 EA	ADD		 	 
- stack 0: 0x76C
5423	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5424	 EC	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xF1001C010B0168029F000000A0000D0086001100BA000002D8000102F70002
5425	 ED	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xF1001C010B0168029F000000A0000D0086001100BA000002D8000102F70002
- stack 0: 0xF0
5426	 EF	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xF1
5427	 F0	JUMP		 	 
- stack 0: 0x76C
5428	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x76C
5429	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5430	 F3	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xF1001C010B0168029F000000A0000D0086001100BA000002D8000102F70002
5431	 F4	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0xF1001C010B0168029F000000A0000D0086001100BA000002D8000102F70002
- stack 0: 0xE0
5432	 F6	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xF1001C
5433	 F7	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0xF1001C
- stack 0: 0xFFFF
5434	 FA	AND		 	 
- stack 1: 0x76C
- stack 0: 0x1C
5435	 FB	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x1C
- stack 0: 0x1
5436	 FD	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x1C
5437	 FE	PUSH2	0380	 	 
- stack 2: 0x76C
- stack 1: 0x1C
- stack 0: 0x380
5438	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x76C
5439	 102	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5440	 104	ADD		 	 
- stack 0: 0x770
5441	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5442	 106	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x10B0168029F000000A0000D0086001100BA000002D8000102F700020311FFEC
5443	 107	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x10B0168029F000000A0000D0086001100BA000002D8000102F700020311FFEC
- stack 0: 0xF0
5444	 109	SHR		 	 
- stack 1: 0x770
- stack 0: 0x10B
5445	 10A	JUMP		 	 
- stack 0: 0x770
5446	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x770
5447	 10C	PUSH2	0060	 	 
- stack 1: 0x770
- stack 0: 0x60
5448	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x770
- stack 0: 0x1
5449	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5450	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x770
- stack 0: 0x1
5451	 116	PUSH2	03A0	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x3A0
5452	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
5453	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x770
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5454	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
5455	 120	SUB		 	 
- stack 1: 0x770
- stack 0: 0x0
5456	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x770
- stack 1: 0x0
- stack 0: 0x129
5457	 124	JUMPI		 	 
- stack 0: 0x770
5458	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x770
- stack 0: 0x143
5459	 128	JUMP		 	 
- stack 0: 0x770
5460	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x770
5461	 144	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5462	 146	ADD		 	 
- stack 0: 0x774
5463	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5464	 148	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x29F000000A0000D0086001100BA000002D8000102F700020311FFEC00D70000
5465	 149	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x29F000000A0000D0086001100BA000002D8000102F700020311FFEC00D70000
- stack 0: 0xF0
5466	 14B	SHR		 	 
- stack 1: 0x774
- stack 0: 0x29F
5467	 14C	JUMP		 	 
- stack 0: 0x774
5468	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x774
5469	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5470	 2A1	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x29F000000A0000D0086001100BA000002D8000102F700020311FFEC00D70000
5471	 2A2	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x29F000000A0000D0086001100BA000002D8000102F700020311FFEC00D70000
- stack 0: 0xE0
5472	 2A4	SHR		 	 
- stack 1: 0x774
- stack 0: 0x29F0000
5473	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x29F0000
- stack 0: 0xFFFF
5474	 2A8	AND		 	 
- stack 1: 0x774
- stack 0: 0x0
5475	 2A9	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x1
5476	 2AB	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x0
5477	 2AC	PUSH2	0080	 	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x80
5478	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x774
5479	 2B0	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5480	 2B2	ADD		 	 
- stack 0: 0x778
5481	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5482	 2B4	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
5483	 2B5	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
- stack 0: 0xF0
5484	 2B7	SHR		 	 
- stack 1: 0x778
- stack 0: 0xA0
5485	 2B8	JUMP		 	 
- stack 0: 0x778
5486	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x778
5487	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5488	 A2	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
5489	 A3	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
- stack 0: 0xE0
5490	 A5	SHR		 	 
- stack 1: 0x778
- stack 0: 0xA0000D
5491	 A6	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5492	 A9	AND		 	 
- stack 1: 0x778
- stack 0: 0xD
5493	 AA	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0xD
- stack 0: 0x1
5494	 AC	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0xD
5495	 AD	PUSH2	0040	 	 
- stack 2: 0x778
- stack 1: 0xD
- stack 0: 0x40
5496	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x778
5497	 B1	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5498	 B3	ADD		 	 
- stack 0: 0x77C
5499	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5500	 B5	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
5501	 B6	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
- stack 0: 0xF0
5502	 B8	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x86
5503	 B9	JUMP		 	 
- stack 0: 0x77C
5504	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x77C
5505	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5506	 88	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
5507	 89	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
- stack 0: 0xE0
5508	 8B	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x860011
5509	 8C	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x860011
- stack 0: 0xFFFF
5510	 8F	AND		 	 
- stack 1: 0x77C
- stack 0: 0x11
5511	 90	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x11
- stack 0: 0x1
5512	 92	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x11
5513	 93	PUSH2	0020	 	 
- stack 2: 0x77C
- stack 1: 0x11
- stack 0: 0x20
5514	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x77C
5515	 97	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5516	 99	ADD		 	 
- stack 0: 0x780
5517	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5518	 9B	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xBA000002D8000102F700020311FFEC00D7000000F1001D010B0140029F0000
5519	 9C	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xBA000002D8000102F700020311FFEC00D7000000F1001D010B0140029F0000
- stack 0: 0xF0
5520	 9E	SHR		 	 
- stack 1: 0x780
- stack 0: 0xBA
5521	 9F	JUMP		 	 
- stack 0: 0x780
5522	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x780
5523	 BB	PUSH2	0040	 	 
- stack 1: 0x780
- stack 0: 0x40
5524	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x780
- stack 0: 0xD
5525	 BF	PUSH1	03	 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x3
5526	 C1	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xD
5527	 C2	PUSH2	0020	 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x20
5528	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x11
5529	 C6	PUSH1	03	 	 
- stack 3: 0x780
- stack 2: 0xD
- stack 1: 0x11
- stack 0: 0x3
5530	 C8	SIGNEXTEND		 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x11
5531	 C9	SLT		 	 
- stack 1: 0x780
- stack 0: 0x0
5532	 CA	PUSH2	0060	 	 
- stack 2: 0x780
- stack 1: 0x0
- stack 0: 0x60
5533	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x780
5534	 CE	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5535	 D0	ADD		 	 
- stack 0: 0x784
5536	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5537	 D2	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
5538	 D3	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
- stack 0: 0xF0
5539	 D5	SHR		 	 
- stack 1: 0x784
- stack 0: 0x2D8
5540	 D6	JUMP		 	 
- stack 0: 0x784
5541	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x784
5542	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5543	 2DA	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
5544	 2DB	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
- stack 0: 0xE0
5545	 2DD	SHR		 	 
- stack 1: 0x784
- stack 0: 0x2D80001
5546	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0x2D80001
- stack 0: 0xFFFF
5547	 2E1	AND		 	 
- stack 1: 0x784
- stack 0: 0x1
5548	 2E2	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x1
5549	 2E4	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x1
5550	 2E5	PUSH2	0080	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x80
5551	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x0
5552	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x784
- stack 0: 0x1
5553	 2EA	PUSH2	0080	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x80
5554	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x784
5555	 2EE	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5556	 2F0	ADD		 	 
- stack 0: 0x788
5557	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5558	 2F2	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
5559	 2F3	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
- stack 0: 0xF0
5560	 2F5	SHR		 	 
- stack 1: 0x788
- stack 0: 0x2F7
5561	 2F6	JUMP		 	 
- stack 0: 0x788
5562	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x788
5563	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5564	 2F9	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
5565	 2FA	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
- stack 0: 0xE0
5566	 2FC	SHR		 	 
- stack 1: 0x788
- stack 0: 0x2F70002
5567	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x2F70002
- stack 0: 0xFFFF
5568	 300	AND		 	 
- stack 1: 0x788
- stack 0: 0x2
5569	 301	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0x1
5570	 303	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x2
5571	 304	PUSH2	00A0	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0xA0
5572	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x788
5573	 308	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5574	 30A	ADD		 	 
- stack 0: 0x78C
5575	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5576	 30C	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
5577	 30D	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
- stack 0: 0xF0
5578	 30F	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x311
5579	 310	JUMP		 	 
- stack 0: 0x78C
5580	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x78C
5581	 312	PUSH2	0080	 	 
- stack 1: 0x78C
- stack 0: 0x80
5582	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x78C
- stack 0: 0x1
5583	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5584	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x78C
- stack 0: 0x1
5585	 31C	PUSH2	00A0	 	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0xA0
5586	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x2
5587	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x78C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5588	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x2
5589	 326	SUB		 	 
- stack 1: 0x78C
- stack 0: 0x1
5590	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x78C
- stack 1: 0x1
- stack 0: 0x32F
5591	 32A	JUMPI		 	 
- stack 0: 0x78C
5592	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x78C
5593	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5594	 331	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
5595	 332	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
- stack 0: 0xE0
5596	 334	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x311FFEC
5597	 335	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x311FFEC
- stack 0: 0xFFFF
5598	 338	AND		 	 
- stack 1: 0x78C
- stack 0: 0xFFEC
5599	 339	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0xFFEC
- stack 0: 0x1
5600	 33B	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
5601	 33C	ADD		 	 
- stack 0: 0x778
5602	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x778
- stack 0: 0xFFFFFFFF
5603	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x778
5604	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5605	 344	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
5606	 345	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
- stack 0: 0xF0
5607	 347	SHR		 	 
- stack 1: 0x778
- stack 0: 0xA0
5608	 348	JUMP		 	 
- stack 0: 0x778
5609	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x778
5610	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5611	 A2	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
5612	 A3	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0xA0000D0086001100BA000002D8000102F700020311FFEC00D7000000F1001D
- stack 0: 0xE0
5613	 A5	SHR		 	 
- stack 1: 0x778
- stack 0: 0xA0000D
5614	 A6	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5615	 A9	AND		 	 
- stack 1: 0x778
- stack 0: 0xD
5616	 AA	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0xD
- stack 0: 0x1
5617	 AC	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0xD
5618	 AD	PUSH2	0040	 	 
- stack 2: 0x778
- stack 1: 0xD
- stack 0: 0x40
5619	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x778
5620	 B1	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5621	 B3	ADD		 	 
- stack 0: 0x77C
5622	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5623	 B5	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
5624	 B6	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
- stack 0: 0xF0
5625	 B8	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x86
5626	 B9	JUMP		 	 
- stack 0: 0x77C
5627	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x77C
5628	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5629	 88	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
5630	 89	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x86001100BA000002D8000102F700020311FFEC00D7000000F1001D010B0140
- stack 0: 0xE0
5631	 8B	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x860011
5632	 8C	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x860011
- stack 0: 0xFFFF
5633	 8F	AND		 	 
- stack 1: 0x77C
- stack 0: 0x11
5634	 90	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x11
- stack 0: 0x1
5635	 92	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x11
5636	 93	PUSH2	0020	 	 
- stack 2: 0x77C
- stack 1: 0x11
- stack 0: 0x20
5637	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x77C
5638	 97	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5639	 99	ADD		 	 
- stack 0: 0x780
5640	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5641	 9B	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xBA000002D8000102F700020311FFEC00D7000000F1001D010B0140029F0000
5642	 9C	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xBA000002D8000102F700020311FFEC00D7000000F1001D010B0140029F0000
- stack 0: 0xF0
5643	 9E	SHR		 	 
- stack 1: 0x780
- stack 0: 0xBA
5644	 9F	JUMP		 	 
- stack 0: 0x780
5645	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x780
5646	 BB	PUSH2	0040	 	 
- stack 1: 0x780
- stack 0: 0x40
5647	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x780
- stack 0: 0xD
5648	 BF	PUSH1	03	 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x3
5649	 C1	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xD
5650	 C2	PUSH2	0020	 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x20
5651	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x11
5652	 C6	PUSH1	03	 	 
- stack 3: 0x780
- stack 2: 0xD
- stack 1: 0x11
- stack 0: 0x3
5653	 C8	SIGNEXTEND		 	 
- stack 2: 0x780
- stack 1: 0xD
- stack 0: 0x11
5654	 C9	SLT		 	 
- stack 1: 0x780
- stack 0: 0x0
5655	 CA	PUSH2	0060	 	 
- stack 2: 0x780
- stack 1: 0x0
- stack 0: 0x60
5656	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x780
5657	 CE	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5658	 D0	ADD		 	 
- stack 0: 0x784
5659	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5660	 D2	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
5661	 D3	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
- stack 0: 0xF0
5662	 D5	SHR		 	 
- stack 1: 0x784
- stack 0: 0x2D8
5663	 D6	JUMP		 	 
- stack 0: 0x784
5664	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x784
5665	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5666	 2DA	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
5667	 2DB	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0x2D8000102F700020311FFEC00D7000000F1001D010B0140029F000000A0000D
- stack 0: 0xE0
5668	 2DD	SHR		 	 
- stack 1: 0x784
- stack 0: 0x2D80001
5669	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0x2D80001
- stack 0: 0xFFFF
5670	 2E1	AND		 	 
- stack 1: 0x784
- stack 0: 0x1
5671	 2E2	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x1
5672	 2E4	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x1
5673	 2E5	PUSH2	0080	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x80
5674	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x1
5675	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x784
- stack 0: 0x2
5676	 2EA	PUSH2	0080	 	 
- stack 2: 0x784
- stack 1: 0x2
- stack 0: 0x80
5677	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x784
5678	 2EE	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5679	 2F0	ADD		 	 
- stack 0: 0x788
5680	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5681	 2F2	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
5682	 2F3	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
- stack 0: 0xF0
5683	 2F5	SHR		 	 
- stack 1: 0x788
- stack 0: 0x2F7
5684	 2F6	JUMP		 	 
- stack 0: 0x788
5685	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x788
5686	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5687	 2F9	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
5688	 2FA	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x2F700020311FFEC00D7000000F1001D010B0140029F000000A0000D00860008
- stack 0: 0xE0
5689	 2FC	SHR		 	 
- stack 1: 0x788
- stack 0: 0x2F70002
5690	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x2F70002
- stack 0: 0xFFFF
5691	 300	AND		 	 
- stack 1: 0x788
- stack 0: 0x2
5692	 301	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0x1
5693	 303	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x2
5694	 304	PUSH2	00A0	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0xA0
5695	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x788
5696	 308	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5697	 30A	ADD		 	 
- stack 0: 0x78C
5698	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5699	 30C	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
5700	 30D	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x311FFEC00D7000000F1001D010B0140029F000000A0000D0086000803950000
- stack 0: 0xF0
5701	 30F	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x311
5702	 310	JUMP		 	 
- stack 0: 0x78C
5703	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x78C
5704	 312	PUSH2	0080	 	 
- stack 1: 0x78C
- stack 0: 0x80
5705	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x78C
- stack 0: 0x2
5706	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5707	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x78C
- stack 0: 0x2
5708	 31C	PUSH2	00A0	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0xA0
5709	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0x2
5710	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x78C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5711	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0x2
5712	 326	SUB		 	 
- stack 1: 0x78C
- stack 0: 0x0
5713	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x32F
5714	 32A	JUMPI		 	 
- stack 0: 0x78C
5715	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x78C
- stack 0: 0x349
5716	 32E	JUMP		 	 
- stack 0: 0x78C
5717	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x78C
5718	 34A	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5719	 34C	ADD		 	 
- stack 0: 0x790
5720	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5721	 34E	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xD7000000F1001D010B0140029F000000A0000D008600080395000000BA0000
5722	 34F	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0xD7000000F1001D010B0140029F000000A0000D008600080395000000BA0000
- stack 0: 0xF0
5723	 351	SHR		 	 
- stack 1: 0x790
- stack 0: 0xD7
5724	 352	JUMP		 	 
- stack 0: 0x790
5725	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x790
5726	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5727	 D9	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0xD7000000F1001D010B0140029F000000A0000D008600080395000000BA0000
5728	 DA	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0xD7000000F1001D010B0140029F000000A0000D008600080395000000BA0000
- stack 0: 0xE0
5729	 DC	SHR		 	 
- stack 1: 0x790
- stack 0: 0xD70000
5730	 DD	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0xD70000
- stack 0: 0xFFFF
5731	 E0	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5732	 E1	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5733	 E3	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5734	 E4	PUSH2	03A0	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x3A0
5735	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x790
5736	 E8	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5737	 EA	ADD		 	 
- stack 0: 0x794
5738	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5739	 EC	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xF1001D010B0140029F000000A0000D008600080395000000BA000002D80001
5740	 ED	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xF1001D010B0140029F000000A0000D008600080395000000BA000002D80001
- stack 0: 0xF0
5741	 EF	SHR		 	 
- stack 1: 0x794
- stack 0: 0xF1
5742	 F0	JUMP		 	 
- stack 0: 0x794
5743	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x794
5744	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5745	 F3	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xF1001D010B0140029F000000A0000D008600080395000000BA000002D80001
5746	 F4	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0xF1001D010B0140029F000000A0000D008600080395000000BA000002D80001
- stack 0: 0xE0
5747	 F6	SHR		 	 
- stack 1: 0x794
- stack 0: 0xF1001D
5748	 F7	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0xF1001D
- stack 0: 0xFFFF
5749	 FA	AND		 	 
- stack 1: 0x794
- stack 0: 0x1D
5750	 FB	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x1D
- stack 0: 0x1
5751	 FD	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x1D
5752	 FE	PUSH2	0380	 	 
- stack 2: 0x794
- stack 1: 0x1D
- stack 0: 0x380
5753	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x794
5754	 102	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5755	 104	ADD		 	 
- stack 0: 0x798
5756	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5757	 106	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x10B0140029F000000A0000D008600080395000000BA000002D8000102F70002
5758	 107	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x10B0140029F000000A0000D008600080395000000BA000002D8000102F70002
- stack 0: 0xF0
5759	 109	SHR		 	 
- stack 1: 0x798
- stack 0: 0x10B
5760	 10A	JUMP		 	 
- stack 0: 0x798
5761	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x798
5762	 10C	PUSH2	0060	 	 
- stack 1: 0x798
- stack 0: 0x60
5763	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x798
- stack 0: 0x0
5764	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5765	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x798
- stack 0: 0x0
5766	 116	PUSH2	03A0	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x3A0
5767	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x0
5768	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x798
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
5769	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x0
5770	 120	SUB		 	 
- stack 1: 0x798
- stack 0: 0x0
5771	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x129
5772	 124	JUMPI		 	 
- stack 0: 0x798
5773	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x798
- stack 0: 0x143
5774	 128	JUMP		 	 
- stack 0: 0x798
5775	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x798
5776	 144	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5777	 146	ADD		 	 
- stack 0: 0x79C
5778	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5779	 148	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x29F000000A0000D008600080395000000BA000002D8000102F700020311FFE8
5780	 149	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x29F000000A0000D008600080395000000BA000002D8000102F700020311FFE8
- stack 0: 0xF0
5781	 14B	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x29F
5782	 14C	JUMP		 	 
- stack 0: 0x79C
5783	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x79C
5784	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5785	 2A1	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x29F000000A0000D008600080395000000BA000002D8000102F700020311FFE8
5786	 2A2	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x29F000000A0000D008600080395000000BA000002D8000102F700020311FFE8
- stack 0: 0xE0
5787	 2A4	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x29F0000
5788	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x29F0000
- stack 0: 0xFFFF
5789	 2A8	AND		 	 
- stack 1: 0x79C
- stack 0: 0x0
5790	 2A9	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x1
5791	 2AB	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x0
5792	 2AC	PUSH2	0080	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x80
5793	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x79C
5794	 2B0	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5795	 2B2	ADD		 	 
- stack 0: 0x7A0
5796	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5797	 2B4	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
5798	 2B5	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
5799	 2B7	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xA0
5800	 2B8	JUMP		 	 
- stack 0: 0x7A0
5801	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7A0
5802	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5803	 A2	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
5804	 A3	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
5805	 A5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D
5806	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5807	 A9	AND		 	 
- stack 1: 0x7A0
- stack 0: 0xD
5808	 AA	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0xD
- stack 0: 0x1
5809	 AC	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0xD
5810	 AD	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0xD
- stack 0: 0x40
5811	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7A0
5812	 B1	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5813	 B3	ADD		 	 
- stack 0: 0x7A4
5814	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5815	 B5	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
5816	 B6	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
- stack 0: 0xF0
5817	 B8	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x86
5818	 B9	JUMP		 	 
- stack 0: 0x7A4
5819	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7A4
5820	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5821	 88	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
5822	 89	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
- stack 0: 0xE0
5823	 8B	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x860008
5824	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x860008
- stack 0: 0xFFFF
5825	 8F	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x8
5826	 90	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x8
- stack 0: 0x1
5827	 92	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x8
5828	 93	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0x8
- stack 0: 0x20
5829	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A4
5830	 97	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5831	 99	ADD		 	 
- stack 0: 0x7A8
5832	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5833	 9B	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
5834	 9C	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
- stack 0: 0xF0
5835	 9E	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x395
5836	 9F	JUMP		 	 
- stack 0: 0x7A8
5837	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A8
5838	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5839	 397	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
5840	 398	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
- stack 0: 0xE0
5841	 39A	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3950000
5842	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x3950000
- stack 0: 0xFFFF
5843	 39E	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x0
5844	 39F	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x0
- stack 0: 0x1
5845	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x0
5846	 3A2	POP		 	 
- stack 0: 0x7A8
5847	 3A3	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5848	 3A5	ADD		 	 
- stack 0: 0x7AC
5849	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5850	 3A7	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F1001E010B0114029F0000
5851	 3A8	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F1001E010B0114029F0000
- stack 0: 0xF0
5852	 3AA	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xBA
5853	 3AB	JUMP		 	 
- stack 0: 0x7AC
5854	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x7AC
5855	 BB	PUSH2	0040	 	 
- stack 1: 0x7AC
- stack 0: 0x40
5856	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7AC
- stack 0: 0xD
5857	 BF	PUSH1	03	 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x3
5858	 C1	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0xD
5859	 C2	PUSH2	0020	 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x20
5860	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x8
5861	 C6	PUSH1	03	 	 
- stack 3: 0x7AC
- stack 2: 0xD
- stack 1: 0x8
- stack 0: 0x3
5862	 C8	SIGNEXTEND		 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x8
5863	 C9	SLT		 	 
- stack 1: 0x7AC
- stack 0: 0x1
5864	 CA	PUSH2	0060	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x60
5865	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x7AC
5866	 CE	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5867	 D0	ADD		 	 
- stack 0: 0x7B0
5868	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5869	 D2	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
5870	 D3	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
- stack 0: 0xF0
5871	 D5	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8
5872	 D6	JUMP		 	 
- stack 0: 0x7B0
5873	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7B0
5874	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
5875	 2DA	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
5876	 2DB	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
- stack 0: 0xE0
5877	 2DD	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2D80001
5878	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
5879	 2E1	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x1
5880	 2E2	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x1
5881	 2E4	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x1
5882	 2E5	PUSH2	0080	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x80
5883	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x0
5884	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7B0
- stack 0: 0x1
5885	 2EA	PUSH2	0080	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x80
5886	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B0
5887	 2EE	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5888	 2F0	ADD		 	 
- stack 0: 0x7B4
5889	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5890	 2F2	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
5891	 2F3	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
- stack 0: 0xF0
5892	 2F5	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F7
5893	 2F6	JUMP		 	 
- stack 0: 0x7B4
5894	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7B4
5895	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
5896	 2F9	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
5897	 2FA	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
- stack 0: 0xE0
5898	 2FC	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F70002
5899	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
5900	 300	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x2
5901	 301	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0x1
5902	 303	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x2
5903	 304	PUSH2	00A0	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0xA0
5904	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x7B4
5905	 308	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5906	 30A	ADD		 	 
- stack 0: 0x7B8
5907	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5908	 30C	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
5909	 30D	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
- stack 0: 0xF0
5910	 30F	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x311
5911	 310	JUMP		 	 
- stack 0: 0x7B8
5912	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7B8
5913	 312	PUSH2	0080	 	 
- stack 1: 0x7B8
- stack 0: 0x80
5914	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B8
- stack 0: 0x1
5915	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5916	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x1
5917	 31C	PUSH2	00A0	 	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0xA0
5918	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x2
5919	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5920	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x2
5921	 326	SUB		 	 
- stack 1: 0x7B8
- stack 0: 0x1
5922	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x7B8
- stack 1: 0x1
- stack 0: 0x32F
5923	 32A	JUMPI		 	 
- stack 0: 0x7B8
5924	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x7B8
5925	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5926	 331	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
5927	 332	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
- stack 0: 0xE0
5928	 334	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x311FFE8
5929	 335	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x311FFE8
- stack 0: 0xFFFF
5930	 338	AND		 	 
- stack 1: 0x7B8
- stack 0: 0xFFE8
5931	 339	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0xFFE8
- stack 0: 0x1
5932	 33B	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5933	 33C	ADD		 	 
- stack 0: 0x7A0
5934	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7A0
- stack 0: 0xFFFFFFFF
5935	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7A0
5936	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5937	 344	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
5938	 345	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
5939	 347	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xA0
5940	 348	JUMP		 	 
- stack 0: 0x7A0
5941	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7A0
5942	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5943	 A2	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
5944	 A3	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D008600080395000000BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
5945	 A5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xA0000D
5946	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xA0000D
- stack 0: 0xFFFF
5947	 A9	AND		 	 
- stack 1: 0x7A0
- stack 0: 0xD
5948	 AA	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0xD
- stack 0: 0x1
5949	 AC	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0xD
5950	 AD	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0xD
- stack 0: 0x40
5951	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7A0
5952	 B1	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5953	 B3	ADD		 	 
- stack 0: 0x7A4
5954	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5955	 B5	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
5956	 B6	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
- stack 0: 0xF0
5957	 B8	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x86
5958	 B9	JUMP		 	 
- stack 0: 0x7A4
5959	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7A4
5960	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5961	 88	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
5962	 89	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x8600080395000000BA000002D8000102F700020311FFE800D7000100F1001E
- stack 0: 0xE0
5963	 8B	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x860008
5964	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x860008
- stack 0: 0xFFFF
5965	 8F	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x8
5966	 90	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x8
- stack 0: 0x1
5967	 92	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x8
5968	 93	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0x8
- stack 0: 0x20
5969	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A4
5970	 97	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5971	 99	ADD		 	 
- stack 0: 0x7A8
5972	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5973	 9B	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
5974	 9C	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
- stack 0: 0xF0
5975	 9E	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x395
5976	 9F	JUMP		 	 
- stack 0: 0x7A8
5977	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A8
5978	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5979	 397	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
5980	 398	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x395000000BA000002D8000102F700020311FFE800D7000100F1001E010B0114
- stack 0: 0xE0
5981	 39A	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3950000
5982	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x3950000
- stack 0: 0xFFFF
5983	 39E	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x0
5984	 39F	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x0
- stack 0: 0x1
5985	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x0
5986	 3A2	POP		 	 
- stack 0: 0x7A8
5987	 3A3	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5988	 3A5	ADD		 	 
- stack 0: 0x7AC
5989	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5990	 3A7	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F1001E010B0114029F0000
5991	 3A8	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F1001E010B0114029F0000
- stack 0: 0xF0
5992	 3AA	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0xBA
5993	 3AB	JUMP		 	 
- stack 0: 0x7AC
5994	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x7AC
5995	 BB	PUSH2	0040	 	 
- stack 1: 0x7AC
- stack 0: 0x40
5996	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7AC
- stack 0: 0xD
5997	 BF	PUSH1	03	 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x3
5998	 C1	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0xD
5999	 C2	PUSH2	0020	 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x20
6000	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x8
6001	 C6	PUSH1	03	 	 
- stack 3: 0x7AC
- stack 2: 0xD
- stack 1: 0x8
- stack 0: 0x3
6002	 C8	SIGNEXTEND		 	 
- stack 2: 0x7AC
- stack 1: 0xD
- stack 0: 0x8
6003	 C9	SLT		 	 
- stack 1: 0x7AC
- stack 0: 0x1
6004	 CA	PUSH2	0060	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x60
6005	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x7AC
6006	 CE	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6007	 D0	ADD		 	 
- stack 0: 0x7B0
6008	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6009	 D2	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
6010	 D3	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
- stack 0: 0xF0
6011	 D5	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8
6012	 D6	JUMP		 	 
- stack 0: 0x7B0
6013	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7B0
6014	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
6015	 2DA	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
6016	 2DB	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x2D8000102F700020311FFE800D7000100F1001E010B0114029F000000A0000D
- stack 0: 0xE0
6017	 2DD	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x2D80001
6018	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6019	 2E1	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x1
6020	 2E2	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x1
6021	 2E4	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x1
6022	 2E5	PUSH2	0080	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x80
6023	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x1
6024	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7B0
- stack 0: 0x2
6025	 2EA	PUSH2	0080	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0x80
6026	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B0
6027	 2EE	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6028	 2F0	ADD		 	 
- stack 0: 0x7B4
6029	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6030	 2F2	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
6031	 2F3	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
- stack 0: 0xF0
6032	 2F5	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F7
6033	 2F6	JUMP		 	 
- stack 0: 0x7B4
6034	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7B4
6035	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
6036	 2F9	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
6037	 2FA	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F700020311FFE800D7000100F1001E010B0114029F000000A0000D00860012
- stack 0: 0xE0
6038	 2FC	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F70002
6039	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6040	 300	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x2
6041	 301	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0x1
6042	 303	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x2
6043	 304	PUSH2	00A0	 	 
- stack 2: 0x7B4
- stack 1: 0x2
- stack 0: 0xA0
6044	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x7B4
6045	 308	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6046	 30A	ADD		 	 
- stack 0: 0x7B8
6047	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6048	 30C	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
6049	 30D	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x311FFE800D7000100F1001E010B0114029F000000A0000D0086001203950000
- stack 0: 0xF0
6050	 30F	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x311
6051	 310	JUMP		 	 
- stack 0: 0x7B8
6052	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7B8
6053	 312	PUSH2	0080	 	 
- stack 1: 0x7B8
- stack 0: 0x80
6054	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B8
- stack 0: 0x2
6055	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6056	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x2
6057	 31C	PUSH2	00A0	 	 
- stack 2: 0x7B8
- stack 1: 0x2
- stack 0: 0xA0
6058	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B8
- stack 1: 0x2
- stack 0: 0x2
6059	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6060	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B8
- stack 1: 0x2
- stack 0: 0x2
6061	 326	SUB		 	 
- stack 1: 0x7B8
- stack 0: 0x0
6062	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x7B8
- stack 1: 0x0
- stack 0: 0x32F
6063	 32A	JUMPI		 	 
- stack 0: 0x7B8
6064	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x7B8
- stack 0: 0x349
6065	 32E	JUMP		 	 
- stack 0: 0x7B8
6066	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x7B8
6067	 34A	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6068	 34C	ADD		 	 
- stack 0: 0x7BC
6069	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6070	 34E	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xD7000100F1001E010B0114029F000000A0000D008600120395000003950000
6071	 34F	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xD7000100F1001E010B0114029F000000A0000D008600120395000003950000
- stack 0: 0xF0
6072	 351	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xD7
6073	 352	JUMP		 	 
- stack 0: 0x7BC
6074	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7BC
6075	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6076	 D9	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xD7000100F1001E010B0114029F000000A0000D008600120395000003950000
6077	 DA	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0xD7000100F1001E010B0114029F000000A0000D008600120395000003950000
- stack 0: 0xE0
6078	 DC	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xD70001
6079	 DD	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0xD70001
- stack 0: 0xFFFF
6080	 E0	AND		 	 
- stack 1: 0x7BC
- stack 0: 0x1
6081	 E1	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0x1
- stack 0: 0x1
6082	 E3	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0x1
6083	 E4	PUSH2	03A0	 	 
- stack 2: 0x7BC
- stack 1: 0x1
- stack 0: 0x3A0
6084	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x7BC
6085	 E8	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6086	 EA	ADD		 	 
- stack 0: 0x7C0
6087	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6088	 EC	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xF1001E010B0114029F000000A0000D00860012039500000395000000BA0000
6089	 ED	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0xF1001E010B0114029F000000A0000D00860012039500000395000000BA0000
- stack 0: 0xF0
6090	 EF	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xF1
6091	 F0	JUMP		 	 
- stack 0: 0x7C0
6092	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7C0
6093	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6094	 F3	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0xF1001E010B0114029F000000A0000D00860012039500000395000000BA0000
6095	 F4	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0xF1001E010B0114029F000000A0000D00860012039500000395000000BA0000
- stack 0: 0xE0
6096	 F6	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0xF1001E
6097	 F7	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0xF1001E
- stack 0: 0xFFFF
6098	 FA	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x1E
6099	 FB	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x1E
- stack 0: 0x1
6100	 FD	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x1E
6101	 FE	PUSH2	0380	 	 
- stack 2: 0x7C0
- stack 1: 0x1E
- stack 0: 0x380
6102	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x7C0
6103	 102	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6104	 104	ADD		 	 
- stack 0: 0x7C4
6105	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6106	 106	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x10B0114029F000000A0000D00860012039500000395000000BA000002D80001
6107	 107	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x10B0114029F000000A0000D00860012039500000395000000BA000002D80001
- stack 0: 0xF0
6108	 109	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x10B
6109	 10A	JUMP		 	 
- stack 0: 0x7C4
6110	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x7C4
6111	 10C	PUSH2	0060	 	 
- stack 1: 0x7C4
- stack 0: 0x60
6112	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x7C4
- stack 0: 0x1
6113	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6114	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C4
- stack 0: 0x1
6115	 116	PUSH2	03A0	 	 
- stack 2: 0x7C4
- stack 1: 0x1
- stack 0: 0x3A0
6116	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x7C4
- stack 1: 0x1
- stack 0: 0x1
6117	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7C4
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6118	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7C4
- stack 1: 0x1
- stack 0: 0x1
6119	 120	SUB		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6120	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x129
6121	 124	JUMPI		 	 
- stack 0: 0x7C4
6122	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x7C4
- stack 0: 0x143
6123	 128	JUMP		 	 
- stack 0: 0x7C4
6124	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x7C4
6125	 144	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6126	 146	ADD		 	 
- stack 0: 0x7C8
6127	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6128	 148	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x29F000000A0000D00860012039500000395000000BA000002D8000102F70002
6129	 149	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x29F000000A0000D00860012039500000395000000BA000002D8000102F70002
- stack 0: 0xF0
6130	 14B	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x29F
6131	 14C	JUMP		 	 
- stack 0: 0x7C8
6132	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7C8
6133	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6134	 2A1	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x29F000000A0000D00860012039500000395000000BA000002D8000102F70002
6135	 2A2	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x29F000000A0000D00860012039500000395000000BA000002D8000102F70002
- stack 0: 0xE0
6136	 2A4	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x29F0000
6137	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x29F0000
- stack 0: 0xFFFF
6138	 2A8	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
6139	 2A9	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
6140	 2AB	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
6141	 2AC	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x80
6142	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
6143	 2B0	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6144	 2B2	ADD		 	 
- stack 0: 0x7CC
6145	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6146	 2B4	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
6147	 2B5	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
6148	 2B7	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xA0
6149	 2B8	JUMP		 	 
- stack 0: 0x7CC
6150	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7CC
6151	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6152	 A2	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
6153	 A3	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
6154	 A5	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D
6155	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
6156	 A9	AND		 	 
- stack 1: 0x7CC
- stack 0: 0xD
6157	 AA	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0xD
- stack 0: 0x1
6158	 AC	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0xD
6159	 AD	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0xD
- stack 0: 0x40
6160	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
6161	 B1	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6162	 B3	ADD		 	 
- stack 0: 0x7D0
6163	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6164	 B5	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
6165	 B6	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
6166	 B8	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x86
6167	 B9	JUMP		 	 
- stack 0: 0x7D0
6168	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7D0
6169	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6170	 88	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
6171	 89	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
6172	 8B	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x860012
6173	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x860012
- stack 0: 0xFFFF
6174	 8F	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x12
6175	 90	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x12
- stack 0: 0x1
6176	 92	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x12
6177	 93	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0x12
- stack 0: 0x20
6178	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D0
6179	 97	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6180	 99	ADD		 	 
- stack 0: 0x7D4
6181	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6182	 9B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
6183	 9C	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
- stack 0: 0xF0
6184	 9E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x395
6185	 9F	JUMP		 	 
- stack 0: 0x7D4
6186	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D4
6187	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6188	 397	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
6189	 398	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
- stack 0: 0xE0
6190	 39A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3950000
6191	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3950000
- stack 0: 0xFFFF
6192	 39E	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
6193	 39F	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x1
6194	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
6195	 3A2	POP		 	 
- stack 0: 0x7D4
6196	 3A3	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6197	 3A5	ADD		 	 
- stack 0: 0x7D8
6198	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6199	 3A7	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
6200	 3A8	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
- stack 0: 0xF0
6201	 3AA	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x395
6202	 3AB	JUMP		 	 
- stack 0: 0x7D8
6203	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D8
6204	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6205	 397	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
6206	 398	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
- stack 0: 0xE0
6207	 39A	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3950000
6208	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3950000
- stack 0: 0xFFFF
6209	 39E	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6210	 39F	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x1
6211	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6212	 3A2	POP		 	 
- stack 0: 0x7D8
6213	 3A3	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6214	 3A5	ADD		 	 
- stack 0: 0x7DC
6215	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6216	 3A7	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F1001F010B00E4029F0000
6217	 3A8	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F1001F010B00E4029F0000
- stack 0: 0xF0
6218	 3AA	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xBA
6219	 3AB	JUMP		 	 
- stack 0: 0x7DC
6220	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x7DC
6221	 BB	PUSH2	0040	 	 
- stack 1: 0x7DC
- stack 0: 0x40
6222	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7DC
- stack 0: 0xD
6223	 BF	PUSH1	03	 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x3
6224	 C1	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0xD
6225	 C2	PUSH2	0020	 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x20
6226	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x12
6227	 C6	PUSH1	03	 	 
- stack 3: 0x7DC
- stack 2: 0xD
- stack 1: 0x12
- stack 0: 0x3
6228	 C8	SIGNEXTEND		 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x12
6229	 C9	SLT		 	 
- stack 1: 0x7DC
- stack 0: 0x0
6230	 CA	PUSH2	0060	 	 
- stack 2: 0x7DC
- stack 1: 0x0
- stack 0: 0x60
6231	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x7DC
6232	 CE	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6233	 D0	ADD		 	 
- stack 0: 0x7E0
6234	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6235	 D2	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
6236	 D3	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
- stack 0: 0xF0
6237	 D5	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8
6238	 D6	JUMP		 	 
- stack 0: 0x7E0
6239	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7E0
6240	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6241	 2DA	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
6242	 2DB	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
- stack 0: 0xE0
6243	 2DD	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x2D80001
6244	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6245	 2E1	AND		 	 
- stack 1: 0x7E0
- stack 0: 0x1
6246	 2E2	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
6247	 2E4	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0x1
6248	 2E5	PUSH2	0080	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x80
6249	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x0
6250	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7E0
- stack 0: 0x1
6251	 2EA	PUSH2	0080	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x80
6252	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E0
6253	 2EE	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6254	 2F0	ADD		 	 
- stack 0: 0x7E4
6255	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6256	 2F2	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
6257	 2F3	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
- stack 0: 0xF0
6258	 2F5	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2F7
6259	 2F6	JUMP		 	 
- stack 0: 0x7E4
6260	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7E4
6261	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6262	 2F9	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
6263	 2FA	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
- stack 0: 0xE0
6264	 2FC	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2F70002
6265	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6266	 300	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x2
6267	 301	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x2
- stack 0: 0x1
6268	 303	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x2
6269	 304	PUSH2	00A0	 	 
- stack 2: 0x7E4
- stack 1: 0x2
- stack 0: 0xA0
6270	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x7E4
6271	 308	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6272	 30A	ADD		 	 
- stack 0: 0x7E8
6273	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6274	 30C	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
6275	 30D	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
- stack 0: 0xF0
6276	 30F	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x311
6277	 310	JUMP		 	 
- stack 0: 0x7E8
6278	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7E8
6279	 312	PUSH2	0080	 	 
- stack 1: 0x7E8
- stack 0: 0x80
6280	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x7E8
- stack 0: 0x1
6281	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6282	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0x1
6283	 31C	PUSH2	00A0	 	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0xA0
6284	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x2
6285	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6286	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x2
6287	 326	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x1
6288	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x7E8
- stack 1: 0x1
- stack 0: 0x32F
6289	 32A	JUMPI		 	 
- stack 0: 0x7E8
6290	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x7E8
6291	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
6292	 331	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
6293	 332	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
- stack 0: 0xE0
6294	 334	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x311FFE4
6295	 335	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
6296	 338	AND		 	 
- stack 1: 0x7E8
- stack 0: 0xFFE4
6297	 339	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0xFFE4
- stack 0: 0x1
6298	 33B	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6299	 33C	ADD		 	 
- stack 0: 0x7CC
6300	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7CC
- stack 0: 0xFFFFFFFF
6301	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7CC
6302	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6303	 344	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
6304	 345	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
6305	 347	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xA0
6306	 348	JUMP		 	 
- stack 0: 0x7CC
6307	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7CC
6308	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6309	 A2	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
6310	 A3	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D00860012039500000395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
6311	 A5	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xA0000D
6312	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
6313	 A9	AND		 	 
- stack 1: 0x7CC
- stack 0: 0xD
6314	 AA	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0xD
- stack 0: 0x1
6315	 AC	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0xD
6316	 AD	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0xD
- stack 0: 0x40
6317	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
6318	 B1	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6319	 B3	ADD		 	 
- stack 0: 0x7D0
6320	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6321	 B5	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
6322	 B6	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
6323	 B8	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x86
6324	 B9	JUMP		 	 
- stack 0: 0x7D0
6325	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7D0
6326	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6327	 88	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
6328	 89	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x860012039500000395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
6329	 8B	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x860012
6330	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x860012
- stack 0: 0xFFFF
6331	 8F	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x12
6332	 90	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x12
- stack 0: 0x1
6333	 92	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x12
6334	 93	PUSH2	0020	 	 
- stack 2: 0x7D0
- stack 1: 0x12
- stack 0: 0x20
6335	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7D0
6336	 97	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6337	 99	ADD		 	 
- stack 0: 0x7D4
6338	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6339	 9B	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
6340	 9C	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
- stack 0: 0xF0
6341	 9E	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x395
6342	 9F	JUMP		 	 
- stack 0: 0x7D4
6343	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D4
6344	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6345	 397	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
6346	 398	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x39500000395000000BA000002D8000102F700020311FFE400D7000000F1001F
- stack 0: 0xE0
6347	 39A	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3950000
6348	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3950000
- stack 0: 0xFFFF
6349	 39E	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
6350	 39F	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x1
6351	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x0
6352	 3A2	POP		 	 
- stack 0: 0x7D4
6353	 3A3	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6354	 3A5	ADD		 	 
- stack 0: 0x7D8
6355	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6356	 3A7	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
6357	 3A8	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
- stack 0: 0xF0
6358	 3AA	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x395
6359	 3AB	JUMP		 	 
- stack 0: 0x7D8
6360	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D8
6361	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6362	 397	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
6363	 398	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F1001F010B00E4
- stack 0: 0xE0
6364	 39A	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3950000
6365	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3950000
- stack 0: 0xFFFF
6366	 39E	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6367	 39F	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x1
6368	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6369	 3A2	POP		 	 
- stack 0: 0x7D8
6370	 3A3	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6371	 3A5	ADD		 	 
- stack 0: 0x7DC
6372	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6373	 3A7	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F1001F010B00E4029F0000
6374	 3A8	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F1001F010B00E4029F0000
- stack 0: 0xF0
6375	 3AA	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xBA
6376	 3AB	JUMP		 	 
- stack 0: 0x7DC
6377	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x7DC
6378	 BB	PUSH2	0040	 	 
- stack 1: 0x7DC
- stack 0: 0x40
6379	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7DC
- stack 0: 0xD
6380	 BF	PUSH1	03	 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x3
6381	 C1	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0xD
6382	 C2	PUSH2	0020	 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x20
6383	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x12
6384	 C6	PUSH1	03	 	 
- stack 3: 0x7DC
- stack 2: 0xD
- stack 1: 0x12
- stack 0: 0x3
6385	 C8	SIGNEXTEND		 	 
- stack 2: 0x7DC
- stack 1: 0xD
- stack 0: 0x12
6386	 C9	SLT		 	 
- stack 1: 0x7DC
- stack 0: 0x0
6387	 CA	PUSH2	0060	 	 
- stack 2: 0x7DC
- stack 1: 0x0
- stack 0: 0x60
6388	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x7DC
6389	 CE	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6390	 D0	ADD		 	 
- stack 0: 0x7E0
6391	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6392	 D2	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
6393	 D3	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
- stack 0: 0xF0
6394	 D5	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8
6395	 D6	JUMP		 	 
- stack 0: 0x7E0
6396	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7E0
6397	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6398	 2DA	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
6399	 2DB	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x2D8000102F700020311FFE400D7000000F1001F010B00E4029F000000A0000D
- stack 0: 0xE0
6400	 2DD	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x2D80001
6401	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6402	 2E1	AND		 	 
- stack 1: 0x7E0
- stack 0: 0x1
6403	 2E2	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
6404	 2E4	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0x1
6405	 2E5	PUSH2	0080	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x80
6406	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x1
6407	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x7E0
- stack 0: 0x2
6408	 2EA	PUSH2	0080	 	 
- stack 2: 0x7E0
- stack 1: 0x2
- stack 0: 0x80
6409	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E0
6410	 2EE	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6411	 2F0	ADD		 	 
- stack 0: 0x7E4
6412	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6413	 2F2	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
6414	 2F3	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
- stack 0: 0xF0
6415	 2F5	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2F7
6416	 2F6	JUMP		 	 
- stack 0: 0x7E4
6417	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7E4
6418	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6419	 2F9	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
6420	 2FA	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x2F700020311FFE400D7000000F1001F010B00E4029F000000A0000D03950000
- stack 0: 0xE0
6421	 2FC	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x2F70002
6422	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6423	 300	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x2
6424	 301	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x2
- stack 0: 0x1
6425	 303	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x2
6426	 304	PUSH2	00A0	 	 
- stack 2: 0x7E4
- stack 1: 0x2
- stack 0: 0xA0
6427	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x7E4
6428	 308	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6429	 30A	ADD		 	 
- stack 0: 0x7E8
6430	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6431	 30C	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
6432	 30D	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x311FFE400D7000000F1001F010B00E4029F000000A0000D0395000000860007
- stack 0: 0xF0
6433	 30F	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x311
6434	 310	JUMP		 	 
- stack 0: 0x7E8
6435	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7E8
6436	 312	PUSH2	0080	 	 
- stack 1: 0x7E8
- stack 0: 0x80
6437	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x7E8
- stack 0: 0x2
6438	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6439	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0x2
6440	 31C	PUSH2	00A0	 	 
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0xA0
6441	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0x2
6442	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6443	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0x2
- stack 0: 0x2
6444	 326	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
6445	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x32F
6446	 32A	JUMPI		 	 
- stack 0: 0x7E8
6447	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x7E8
- stack 0: 0x349
6448	 32E	JUMP		 	 
- stack 0: 0x7E8
6449	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x7E8
6450	 34A	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6451	 34C	ADD		 	 
- stack 0: 0x7EC
6452	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6453	 34E	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0xD7000000F1001F010B00E4029F000000A0000D039500000086000700BA0000
6454	 34F	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0xD7000000F1001F010B00E4029F000000A0000D039500000086000700BA0000
- stack 0: 0xF0
6455	 351	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0xD7
6456	 352	JUMP		 	 
- stack 0: 0x7EC
6457	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7EC
6458	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
6459	 D9	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0xD7000000F1001F010B00E4029F000000A0000D039500000086000700BA0000
6460	 DA	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0xD7000000F1001F010B00E4029F000000A0000D039500000086000700BA0000
- stack 0: 0xE0
6461	 DC	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0xD70000
6462	 DD	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0xD70000
- stack 0: 0xFFFF
6463	 E0	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6464	 E1	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
6465	 E3	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6466	 E4	PUSH2	03A0	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x3A0
6467	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x7EC
6468	 E8	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6469	 EA	ADD		 	 
- stack 0: 0x7F0
6470	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6471	 EC	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0xF1001F010B00E4029F000000A0000D039500000086000700BA000002D80001
6472	 ED	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0xF1001F010B00E4029F000000A0000D039500000086000700BA000002D80001
- stack 0: 0xF0
6473	 EF	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0xF1
6474	 F0	JUMP		 	 
- stack 0: 0x7F0
6475	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7F0
6476	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
6477	 F3	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0xF1001F010B00E4029F000000A0000D039500000086000700BA000002D80001
6478	 F4	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0xF1001F010B00E4029F000000A0000D039500000086000700BA000002D80001
- stack 0: 0xE0
6479	 F6	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0xF1001F
6480	 F7	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0xF1001F
- stack 0: 0xFFFF
6481	 FA	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x1F
6482	 FB	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x1F
- stack 0: 0x1
6483	 FD	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x1F
6484	 FE	PUSH2	0380	 	 
- stack 2: 0x7F0
- stack 1: 0x1F
- stack 0: 0x380
6485	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x7F0
6486	 102	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6487	 104	ADD		 	 
- stack 0: 0x7F4
6488	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6489	 106	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x10B00E4029F000000A0000D039500000086000700BA000002D8000102F70002
6490	 107	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x10B00E4029F000000A0000D039500000086000700BA000002D8000102F70002
- stack 0: 0xF0
6491	 109	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x10B
6492	 10A	JUMP		 	 
- stack 0: 0x7F4
6493	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x7F4
6494	 10C	PUSH2	0060	 	 
- stack 1: 0x7F4
- stack 0: 0x60
6495	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x7F4
- stack 0: 0x0
6496	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
6497	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x0
6498	 116	PUSH2	03A0	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x3A0
6499	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x0
6500	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7F4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
6501	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x0
6502	 120	SUB		 	 
- stack 1: 0x7F4
- stack 0: 0x0
6503	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x129
6504	 124	JUMPI		 	 
- stack 0: 0x7F4
6505	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x7F4
- stack 0: 0x143
6506	 128	JUMP		 	 
- stack 0: 0x7F4
6507	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x7F4
6508	 144	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6509	 146	ADD		 	 
- stack 0: 0x7F8
6510	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6511	 148	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x29F000000A0000D039500000086000700BA000002D8000102F700020311FFE8
6512	 149	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x29F000000A0000D039500000086000700BA000002D8000102F700020311FFE8
- stack 0: 0xF0
6513	 14B	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x29F
6514	 14C	JUMP		 	 
- stack 0: 0x7F8
6515	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7F8
6516	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6517	 2A1	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x29F000000A0000D039500000086000700BA000002D8000102F700020311FFE8
6518	 2A2	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x29F000000A0000D039500000086000700BA000002D8000102F700020311FFE8
- stack 0: 0xE0
6519	 2A4	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x29F0000
6520	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x29F0000
- stack 0: 0xFFFF
6521	 2A8	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6522	 2A9	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6523	 2AB	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6524	 2AC	PUSH2	0080	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x80
6525	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x7F8
6526	 2B0	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6527	 2B2	ADD		 	 
- stack 0: 0x7FC
6528	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6529	 2B4	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
6530	 2B5	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
6531	 2B7	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0xA0
6532	 2B8	JUMP		 	 
- stack 0: 0x7FC
6533	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7FC
6534	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6535	 A2	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
6536	 A3	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
6537	 A5	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D
6538	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
6539	 A9	AND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6540	 AA	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x1
6541	 AC	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6542	 AD	PUSH2	0040	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x40
6543	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7FC
6544	 B1	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6545	 B3	ADD		 	 
- stack 0: 0x800
6546	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6547	 B5	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
6548	 B6	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
- stack 0: 0xF0
6549	 B8	SHR		 	 
- stack 1: 0x800
- stack 0: 0x395
6550	 B9	JUMP		 	 
- stack 0: 0x800
6551	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x800
6552	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6553	 397	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
6554	 398	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
- stack 0: 0xE0
6555	 39A	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3950000
6556	 39B	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3950000
- stack 0: 0xFFFF
6557	 39E	AND		 	 
- stack 1: 0x800
- stack 0: 0x0
6558	 39F	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x1
6559	 3A1	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x0
6560	 3A2	POP		 	 
- stack 0: 0x800
6561	 3A3	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6562	 3A5	ADD		 	 
- stack 0: 0x804
6563	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6564	 3A7	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
6565	 3A8	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
- stack 0: 0xF0
6566	 3AA	SHR		 	 
- stack 1: 0x804
- stack 0: 0x86
6567	 3AB	JUMP		 	 
- stack 0: 0x804
6568	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x804
6569	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6570	 88	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
6571	 89	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
- stack 0: 0xE0
6572	 8B	SHR		 	 
- stack 1: 0x804
- stack 0: 0x860007
6573	 8C	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x860007
- stack 0: 0xFFFF
6574	 8F	AND		 	 
- stack 1: 0x804
- stack 0: 0x7
6575	 90	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x7
- stack 0: 0x1
6576	 92	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x7
6577	 93	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0x7
- stack 0: 0x20
6578	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x804
6579	 97	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6580	 99	ADD		 	 
- stack 0: 0x808
6581	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6582	 9B	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F10020010B00B8029F0000
6583	 9C	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F10020010B00B8029F0000
- stack 0: 0xF0
6584	 9E	SHR		 	 
- stack 1: 0x808
- stack 0: 0xBA
6585	 9F	JUMP		 	 
- stack 0: 0x808
6586	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x808
6587	 BB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6588	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xD
6589	 BF	PUSH1	03	 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x3
6590	 C1	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0xD
6591	 C2	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x20
6592	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x7
6593	 C6	PUSH1	03	 	 
- stack 3: 0x808
- stack 2: 0xD
- stack 1: 0x7
- stack 0: 0x3
6594	 C8	SIGNEXTEND		 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x7
6595	 C9	SLT		 	 
- stack 1: 0x808
- stack 0: 0x1
6596	 CA	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0x1
- stack 0: 0x60
6597	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6598	 CE	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6599	 D0	ADD		 	 
- stack 0: 0x80C
6600	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6601	 D2	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
6602	 D3	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
- stack 0: 0xF0
6603	 D5	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x2D8
6604	 D6	JUMP		 	 
- stack 0: 0x80C
6605	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6606	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6607	 2DA	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
6608	 2DB	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
- stack 0: 0xE0
6609	 2DD	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x2D80001
6610	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6611	 2E1	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6612	 2E2	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6613	 2E4	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6614	 2E5	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6615	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x0
6616	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x1
6617	 2EA	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6618	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6619	 2EE	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6620	 2F0	ADD		 	 
- stack 0: 0x810
6621	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6622	 2F2	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
6623	 2F3	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
- stack 0: 0xF0
6624	 2F5	SHR		 	 
- stack 1: 0x810
- stack 0: 0x2F7
6625	 2F6	JUMP		 	 
- stack 0: 0x810
6626	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6627	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6628	 2F9	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
6629	 2FA	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
- stack 0: 0xE0
6630	 2FC	SHR		 	 
- stack 1: 0x810
- stack 0: 0x2F70002
6631	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6632	 300	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6633	 301	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6634	 303	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6635	 304	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6636	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6637	 308	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6638	 30A	ADD		 	 
- stack 0: 0x814
6639	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6640	 30C	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
6641	 30D	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
- stack 0: 0xF0
6642	 30F	SHR		 	 
- stack 1: 0x814
- stack 0: 0x311
6643	 310	JUMP		 	 
- stack 0: 0x814
6644	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x814
6645	 312	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6646	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x1
6647	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6648	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x1
6649	 31C	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xA0
6650	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6651	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6652	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6653	 326	SUB		 	 
- stack 1: 0x814
- stack 0: 0x1
6654	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x32F
6655	 32A	JUMPI		 	 
- stack 0: 0x814
6656	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x814
6657	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6658	 331	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
6659	 332	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
- stack 0: 0xE0
6660	 334	SHR		 	 
- stack 1: 0x814
- stack 0: 0x311FFE8
6661	 335	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x311FFE8
- stack 0: 0xFFFF
6662	 338	AND		 	 
- stack 1: 0x814
- stack 0: 0xFFE8
6663	 339	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xFFE8
- stack 0: 0x1
6664	 33B	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6665	 33C	ADD		 	 
- stack 0: 0x7FC
6666	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7FC
- stack 0: 0xFFFFFFFF
6667	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7FC
6668	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6669	 344	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
6670	 345	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
- stack 0: 0xF0
6671	 347	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0xA0
6672	 348	JUMP		 	 
- stack 0: 0x7FC
6673	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7FC
6674	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6675	 A2	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
6676	 A3	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D039500000086000700BA000002D8000102F700020311FFE800D70001
- stack 0: 0xE0
6677	 A5	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0xA0000D
6678	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0xA0000D
- stack 0: 0xFFFF
6679	 A9	AND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6680	 AA	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x1
6681	 AC	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6682	 AD	PUSH2	0040	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x40
6683	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7FC
6684	 B1	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6685	 B3	ADD		 	 
- stack 0: 0x800
6686	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6687	 B5	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
6688	 B6	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
- stack 0: 0xF0
6689	 B8	SHR		 	 
- stack 1: 0x800
- stack 0: 0x395
6690	 B9	JUMP		 	 
- stack 0: 0x800
6691	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x800
6692	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6693	 397	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
6694	 398	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x39500000086000700BA000002D8000102F700020311FFE800D7000100F10020
- stack 0: 0xE0
6695	 39A	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3950000
6696	 39B	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3950000
- stack 0: 0xFFFF
6697	 39E	AND		 	 
- stack 1: 0x800
- stack 0: 0x0
6698	 39F	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x1
6699	 3A1	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x0
6700	 3A2	POP		 	 
- stack 0: 0x800
6701	 3A3	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6702	 3A5	ADD		 	 
- stack 0: 0x804
6703	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6704	 3A7	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
6705	 3A8	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
- stack 0: 0xF0
6706	 3AA	SHR		 	 
- stack 1: 0x804
- stack 0: 0x86
6707	 3AB	JUMP		 	 
- stack 0: 0x804
6708	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x804
6709	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6710	 88	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
6711	 89	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x86000700BA000002D8000102F700020311FFE800D7000100F10020010B00B8
- stack 0: 0xE0
6712	 8B	SHR		 	 
- stack 1: 0x804
- stack 0: 0x860007
6713	 8C	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x860007
- stack 0: 0xFFFF
6714	 8F	AND		 	 
- stack 1: 0x804
- stack 0: 0x7
6715	 90	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x7
- stack 0: 0x1
6716	 92	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x7
6717	 93	PUSH2	0020	 	 
- stack 2: 0x804
- stack 1: 0x7
- stack 0: 0x20
6718	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x804
6719	 97	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6720	 99	ADD		 	 
- stack 0: 0x808
6721	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6722	 9B	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xBA000002D8000102F700020311FFE800D7000100F10020010B00B8029F0000
6723	 9C	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xBA000002D8000102F700020311FFE800D7000100F10020010B00B8029F0000
- stack 0: 0xF0
6724	 9E	SHR		 	 
- stack 1: 0x808
- stack 0: 0xBA
6725	 9F	JUMP		 	 
- stack 0: 0x808
6726	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x808
6727	 BB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6728	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xD
6729	 BF	PUSH1	03	 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x3
6730	 C1	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0xD
6731	 C2	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x20
6732	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x7
6733	 C6	PUSH1	03	 	 
- stack 3: 0x808
- stack 2: 0xD
- stack 1: 0x7
- stack 0: 0x3
6734	 C8	SIGNEXTEND		 	 
- stack 2: 0x808
- stack 1: 0xD
- stack 0: 0x7
6735	 C9	SLT		 	 
- stack 1: 0x808
- stack 0: 0x1
6736	 CA	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0x1
- stack 0: 0x60
6737	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6738	 CE	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6739	 D0	ADD		 	 
- stack 0: 0x80C
6740	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6741	 D2	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
6742	 D3	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
- stack 0: 0xF0
6743	 D5	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x2D8
6744	 D6	JUMP		 	 
- stack 0: 0x80C
6745	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6746	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6747	 2DA	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
6748	 2DB	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x2D8000102F700020311FFE800D7000100F10020010B00B8029F000000A0000D
- stack 0: 0xE0
6749	 2DD	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x2D80001
6750	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6751	 2E1	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6752	 2E2	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6753	 2E4	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6754	 2E5	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6755	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6756	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x2
6757	 2EA	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x80
6758	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6759	 2EE	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6760	 2F0	ADD		 	 
- stack 0: 0x810
6761	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6762	 2F2	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
6763	 2F3	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
- stack 0: 0xF0
6764	 2F5	SHR		 	 
- stack 1: 0x810
- stack 0: 0x2F7
6765	 2F6	JUMP		 	 
- stack 0: 0x810
6766	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6767	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6768	 2F9	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
6769	 2FA	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x2F700020311FFE800D7000100F10020010B00B8029F000000A0000D03950000
- stack 0: 0xE0
6770	 2FC	SHR		 	 
- stack 1: 0x810
- stack 0: 0x2F70002
6771	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6772	 300	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6773	 301	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6774	 303	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6775	 304	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6776	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6777	 308	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6778	 30A	ADD		 	 
- stack 0: 0x814
6779	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6780	 30C	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
6781	 30D	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x311FFE800D7000100F10020010B00B8029F000000A0000D0395000000860013
- stack 0: 0xF0
6782	 30F	SHR		 	 
- stack 1: 0x814
- stack 0: 0x311
6783	 310	JUMP		 	 
- stack 0: 0x814
6784	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x814
6785	 312	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6786	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x2
6787	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6788	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x2
6789	 31C	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xA0
6790	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6791	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6792	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6793	 326	SUB		 	 
- stack 1: 0x814
- stack 0: 0x0
6794	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x32F
6795	 32A	JUMPI		 	 
- stack 0: 0x814
6796	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x814
- stack 0: 0x349
6797	 32E	JUMP		 	 
- stack 0: 0x814
6798	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x814
6799	 34A	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6800	 34C	ADD		 	 
- stack 0: 0x818
6801	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6802	 34E	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xD7000100F10020010B00B8029F000000A0000D039500000086001303950000
6803	 34F	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0xD7000100F10020010B00B8029F000000A0000D039500000086001303950000
- stack 0: 0xF0
6804	 351	SHR		 	 
- stack 1: 0x818
- stack 0: 0xD7
6805	 352	JUMP		 	 
- stack 0: 0x818
6806	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x818
6807	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
6808	 D9	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xD7000100F10020010B00B8029F000000A0000D039500000086001303950000
6809	 DA	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0xD7000100F10020010B00B8029F000000A0000D039500000086001303950000
- stack 0: 0xE0
6810	 DC	SHR		 	 
- stack 1: 0x818
- stack 0: 0xD70001
6811	 DD	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0xD70001
- stack 0: 0xFFFF
6812	 E0	AND		 	 
- stack 1: 0x818
- stack 0: 0x1
6813	 E1	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0x1
6814	 E3	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x1
6815	 E4	PUSH2	03A0	 	 
- stack 2: 0x818
- stack 1: 0x1
- stack 0: 0x3A0
6816	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x818
6817	 E8	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6818	 EA	ADD		 	 
- stack 0: 0x81C
6819	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6820	 EC	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xF10020010B00B8029F000000A0000D03950000008600130395000000BA0000
6821	 ED	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0xF10020010B00B8029F000000A0000D03950000008600130395000000BA0000
- stack 0: 0xF0
6822	 EF	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xF1
6823	 F0	JUMP		 	 
- stack 0: 0x81C
6824	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x81C
6825	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6826	 F3	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xF10020010B00B8029F000000A0000D03950000008600130395000000BA0000
6827	 F4	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0xF10020010B00B8029F000000A0000D03950000008600130395000000BA0000
- stack 0: 0xE0
6828	 F6	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xF10020
6829	 F7	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0xF10020
- stack 0: 0xFFFF
6830	 FA	AND		 	 
- stack 1: 0x81C
- stack 0: 0x20
6831	 FB	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x20
- stack 0: 0x1
6832	 FD	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x20
6833	 FE	PUSH2	0380	 	 
- stack 2: 0x81C
- stack 1: 0x20
- stack 0: 0x380
6834	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x81C
6835	 102	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6836	 104	ADD		 	 
- stack 0: 0x820
6837	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6838	 106	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x10B00B8029F000000A0000D03950000008600130395000000BA000002D80001
6839	 107	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x10B00B8029F000000A0000D03950000008600130395000000BA000002D80001
- stack 0: 0xF0
6840	 109	SHR		 	 
- stack 1: 0x820
- stack 0: 0x10B
6841	 10A	JUMP		 	 
- stack 0: 0x820
6842	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x820
6843	 10C	PUSH2	0060	 	 
- stack 1: 0x820
- stack 0: 0x60
6844	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x820
- stack 0: 0x1
6845	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6846	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x820
- stack 0: 0x1
6847	 116	PUSH2	03A0	 	 
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x3A0
6848	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x1
6849	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x820
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6850	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x820
- stack 1: 0x1
- stack 0: 0x1
6851	 120	SUB		 	 
- stack 1: 0x820
- stack 0: 0x0
6852	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x129
6853	 124	JUMPI		 	 
- stack 0: 0x820
6854	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x820
- stack 0: 0x143
6855	 128	JUMP		 	 
- stack 0: 0x820
6856	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x820
6857	 144	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6858	 146	ADD		 	 
- stack 0: 0x824
6859	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6860	 148	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x29F000000A0000D03950000008600130395000000BA000002D8000102F70002
6861	 149	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x29F000000A0000D03950000008600130395000000BA000002D8000102F70002
- stack 0: 0xF0
6862	 14B	SHR		 	 
- stack 1: 0x824
- stack 0: 0x29F
6863	 14C	JUMP		 	 
- stack 0: 0x824
6864	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x824
6865	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6866	 2A1	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x29F000000A0000D03950000008600130395000000BA000002D8000102F70002
6867	 2A2	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x29F000000A0000D03950000008600130395000000BA000002D8000102F70002
- stack 0: 0xE0
6868	 2A4	SHR		 	 
- stack 1: 0x824
- stack 0: 0x29F0000
6869	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x29F0000
- stack 0: 0xFFFF
6870	 2A8	AND		 	 
- stack 1: 0x824
- stack 0: 0x0
6871	 2A9	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x1
6872	 2AB	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x0
6873	 2AC	PUSH2	0080	 	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x80
6874	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x824
6875	 2B0	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6876	 2B2	ADD		 	 
- stack 0: 0x828
6877	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6878	 2B4	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
6879	 2B5	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
6880	 2B7	SHR		 	 
- stack 1: 0x828
- stack 0: 0xA0
6881	 2B8	JUMP		 	 
- stack 0: 0x828
6882	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x828
6883	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6884	 A2	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
6885	 A3	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
6886	 A5	SHR		 	 
- stack 1: 0x828
- stack 0: 0xA0000D
6887	 A6	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0xA0000D
- stack 0: 0xFFFF
6888	 A9	AND		 	 
- stack 1: 0x828
- stack 0: 0xD
6889	 AA	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0xD
- stack 0: 0x1
6890	 AC	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xD
6891	 AD	PUSH2	0040	 	 
- stack 2: 0x828
- stack 1: 0xD
- stack 0: 0x40
6892	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x828
6893	 B1	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6894	 B3	ADD		 	 
- stack 0: 0x82C
6895	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6896	 B5	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
6897	 B6	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
6898	 B8	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x395
6899	 B9	JUMP		 	 
- stack 0: 0x82C
6900	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
6901	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6902	 397	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
6903	 398	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
6904	 39A	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3950000
6905	 39B	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3950000
- stack 0: 0xFFFF
6906	 39E	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6907	 39F	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
6908	 3A1	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6909	 3A2	POP		 	 
- stack 0: 0x82C
6910	 3A3	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6911	 3A5	ADD		 	 
- stack 0: 0x830
6912	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6913	 3A7	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
6914	 3A8	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
- stack 0: 0xF0
6915	 3AA	SHR		 	 
- stack 1: 0x830
- stack 0: 0x86
6916	 3AB	JUMP		 	 
- stack 0: 0x830
6917	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x830
6918	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
6919	 88	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
6920	 89	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
- stack 0: 0xE0
6921	 8B	SHR		 	 
- stack 1: 0x830
- stack 0: 0x860013
6922	 8C	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x860013
- stack 0: 0xFFFF
6923	 8F	AND		 	 
- stack 1: 0x830
- stack 0: 0x13
6924	 90	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x13
- stack 0: 0x1
6925	 92	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x13
6926	 93	PUSH2	0020	 	 
- stack 2: 0x830
- stack 1: 0x13
- stack 0: 0x20
6927	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x830
6928	 97	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6929	 99	ADD		 	 
- stack 0: 0x834
6930	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6931	 9B	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
6932	 9C	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
- stack 0: 0xF0
6933	 9E	SHR		 	 
- stack 1: 0x834
- stack 0: 0x395
6934	 9F	JUMP		 	 
- stack 0: 0x834
6935	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
6936	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
6937	 397	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
6938	 398	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
- stack 0: 0xE0
6939	 39A	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3950000
6940	 39B	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3950000
- stack 0: 0xFFFF
6941	 39E	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
6942	 39F	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
6943	 3A1	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
6944	 3A2	POP		 	 
- stack 0: 0x834
6945	 3A3	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6946	 3A5	ADD		 	 
- stack 0: 0x838
6947	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6948	 3A7	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F10021010B0088029F0000
6949	 3A8	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F10021010B0088029F0000
- stack 0: 0xF0
6950	 3AA	SHR		 	 
- stack 1: 0x838
- stack 0: 0xBA
6951	 3AB	JUMP		 	 
- stack 0: 0x838
6952	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x838
6953	 BB	PUSH2	0040	 	 
- stack 1: 0x838
- stack 0: 0x40
6954	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x838
- stack 0: 0xD
6955	 BF	PUSH1	03	 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x3
6956	 C1	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0xD
6957	 C2	PUSH2	0020	 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x20
6958	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x13
6959	 C6	PUSH1	03	 	 
- stack 3: 0x838
- stack 2: 0xD
- stack 1: 0x13
- stack 0: 0x3
6960	 C8	SIGNEXTEND		 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x13
6961	 C9	SLT		 	 
- stack 1: 0x838
- stack 0: 0x0
6962	 CA	PUSH2	0060	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x60
6963	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x838
6964	 CE	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6965	 D0	ADD		 	 
- stack 0: 0x83C
6966	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6967	 D2	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
6968	 D3	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
- stack 0: 0xF0
6969	 D5	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x2D8
6970	 D6	JUMP		 	 
- stack 0: 0x83C
6971	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x83C
6972	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6973	 2DA	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
6974	 2DB	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
- stack 0: 0xE0
6975	 2DD	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x2D80001
6976	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
6977	 2E1	AND		 	 
- stack 1: 0x83C
- stack 0: 0x1
6978	 2E2	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x1
6979	 2E4	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x1
6980	 2E5	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x80
6981	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x0
6982	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x83C
- stack 0: 0x1
6983	 2EA	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x80
6984	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x83C
6985	 2EE	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6986	 2F0	ADD		 	 
- stack 0: 0x840
6987	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6988	 2F2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
6989	 2F3	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
- stack 0: 0xF0
6990	 2F5	SHR		 	 
- stack 1: 0x840
- stack 0: 0x2F7
6991	 2F6	JUMP		 	 
- stack 0: 0x840
6992	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x840
6993	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6994	 2F9	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
6995	 2FA	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
- stack 0: 0xE0
6996	 2FC	SHR		 	 
- stack 1: 0x840
- stack 0: 0x2F70002
6997	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x2F70002
- stack 0: 0xFFFF
6998	 300	AND		 	 
- stack 1: 0x840
- stack 0: 0x2
6999	 301	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
7000	 303	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0x2
7001	 304	PUSH2	00A0	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0xA0
7002	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x840
7003	 308	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7004	 30A	ADD		 	 
- stack 0: 0x844
7005	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7006	 30C	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
7007	 30D	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
- stack 0: 0xF0
7008	 30F	SHR		 	 
- stack 1: 0x844
- stack 0: 0x311
7009	 310	JUMP		 	 
- stack 0: 0x844
7010	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x844
7011	 312	PUSH2	0080	 	 
- stack 1: 0x844
- stack 0: 0x80
7012	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x844
- stack 0: 0x1
7013	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7014	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x844
- stack 0: 0x1
7015	 31C	PUSH2	00A0	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0xA0
7016	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x2
7017	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x844
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7018	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x2
7019	 326	SUB		 	 
- stack 1: 0x844
- stack 0: 0x1
7020	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x32F
7021	 32A	JUMPI		 	 
- stack 0: 0x844
7022	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x844
7023	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
7024	 331	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
7025	 332	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
- stack 0: 0xE0
7026	 334	SHR		 	 
- stack 1: 0x844
- stack 0: 0x311FFE4
7027	 335	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
7028	 338	AND		 	 
- stack 1: 0x844
- stack 0: 0xFFE4
7029	 339	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0xFFE4
- stack 0: 0x1
7030	 33B	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7031	 33C	ADD		 	 
- stack 0: 0x828
7032	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x828
- stack 0: 0xFFFFFFFF
7033	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x828
7034	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
7035	 344	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
7036	 345	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
- stack 0: 0xF0
7037	 347	SHR		 	 
- stack 1: 0x828
- stack 0: 0xA0
7038	 348	JUMP		 	 
- stack 0: 0x828
7039	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x828
7040	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
7041	 A2	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
7042	 A3	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0xA0000D03950000008600130395000000BA000002D8000102F700020311FFE4
- stack 0: 0xE0
7043	 A5	SHR		 	 
- stack 1: 0x828
- stack 0: 0xA0000D
7044	 A6	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0xA0000D
- stack 0: 0xFFFF
7045	 A9	AND		 	 
- stack 1: 0x828
- stack 0: 0xD
7046	 AA	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0xD
- stack 0: 0x1
7047	 AC	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xD
7048	 AD	PUSH2	0040	 	 
- stack 2: 0x828
- stack 1: 0xD
- stack 0: 0x40
7049	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x828
7050	 B1	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
7051	 B3	ADD		 	 
- stack 0: 0x82C
7052	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7053	 B5	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
7054	 B6	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xF0
7055	 B8	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x395
7056	 B9	JUMP		 	 
- stack 0: 0x82C
7057	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
7058	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
7059	 397	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
7060	 398	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x3950000008600130395000000BA000002D8000102F700020311FFE400D70000
- stack 0: 0xE0
7061	 39A	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3950000
7062	 39B	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3950000
- stack 0: 0xFFFF
7063	 39E	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7064	 39F	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
7065	 3A1	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7066	 3A2	POP		 	 
- stack 0: 0x82C
7067	 3A3	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7068	 3A5	ADD		 	 
- stack 0: 0x830
7069	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7070	 3A7	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
7071	 3A8	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
- stack 0: 0xF0
7072	 3AA	SHR		 	 
- stack 1: 0x830
- stack 0: 0x86
7073	 3AB	JUMP		 	 
- stack 0: 0x830
7074	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x830
7075	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
7076	 88	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
7077	 89	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x8600130395000000BA000002D8000102F700020311FFE400D7000000F10021
- stack 0: 0xE0
7078	 8B	SHR		 	 
- stack 1: 0x830
- stack 0: 0x860013
7079	 8C	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x860013
- stack 0: 0xFFFF
7080	 8F	AND		 	 
- stack 1: 0x830
- stack 0: 0x13
7081	 90	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x13
- stack 0: 0x1
7082	 92	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x13
7083	 93	PUSH2	0020	 	 
- stack 2: 0x830
- stack 1: 0x13
- stack 0: 0x20
7084	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x830
7085	 97	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7086	 99	ADD		 	 
- stack 0: 0x834
7087	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7088	 9B	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
7089	 9C	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
- stack 0: 0xF0
7090	 9E	SHR		 	 
- stack 1: 0x834
- stack 0: 0x395
7091	 9F	JUMP		 	 
- stack 0: 0x834
7092	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
7093	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7094	 397	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
7095	 398	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x395000000BA000002D8000102F700020311FFE400D7000000F10021010B0088
- stack 0: 0xE0
7096	 39A	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3950000
7097	 39B	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3950000
- stack 0: 0xFFFF
7098	 39E	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
7099	 39F	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
7100	 3A1	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
7101	 3A2	POP		 	 
- stack 0: 0x834
7102	 3A3	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7103	 3A5	ADD		 	 
- stack 0: 0x838
7104	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7105	 3A7	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0xBA000002D8000102F700020311FFE400D7000000F10021010B0088029F0000
7106	 3A8	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0xBA000002D8000102F700020311FFE400D7000000F10021010B0088029F0000
- stack 0: 0xF0
7107	 3AA	SHR		 	 
- stack 1: 0x838
- stack 0: 0xBA
7108	 3AB	JUMP		 	 
- stack 0: 0x838
7109	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x838
7110	 BB	PUSH2	0040	 	 
- stack 1: 0x838
- stack 0: 0x40
7111	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x838
- stack 0: 0xD
7112	 BF	PUSH1	03	 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x3
7113	 C1	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0xD
7114	 C2	PUSH2	0020	 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x20
7115	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x13
7116	 C6	PUSH1	03	 	 
- stack 3: 0x838
- stack 2: 0xD
- stack 1: 0x13
- stack 0: 0x3
7117	 C8	SIGNEXTEND		 	 
- stack 2: 0x838
- stack 1: 0xD
- stack 0: 0x13
7118	 C9	SLT		 	 
- stack 1: 0x838
- stack 0: 0x0
7119	 CA	PUSH2	0060	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x60
7120	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x838
7121	 CE	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7122	 D0	ADD		 	 
- stack 0: 0x83C
7123	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7124	 D2	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
7125	 D3	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
- stack 0: 0xF0
7126	 D5	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x2D8
7127	 D6	JUMP		 	 
- stack 0: 0x83C
7128	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x83C
7129	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
7130	 2DA	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
7131	 2DB	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x2D8000102F700020311FFE400D7000000F10021010B0088029F000000A0000D
- stack 0: 0xE0
7132	 2DD	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x2D80001
7133	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
7134	 2E1	AND		 	 
- stack 1: 0x83C
- stack 0: 0x1
7135	 2E2	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x1
7136	 2E4	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x1
7137	 2E5	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x80
7138	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x1
7139	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x83C
- stack 0: 0x2
7140	 2EA	PUSH2	0080	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0x80
7141	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x83C
7142	 2EE	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7143	 2F0	ADD		 	 
- stack 0: 0x840
7144	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7145	 2F2	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
7146	 2F3	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
- stack 0: 0xF0
7147	 2F5	SHR		 	 
- stack 1: 0x840
- stack 0: 0x2F7
7148	 2F6	JUMP		 	 
- stack 0: 0x840
7149	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x840
7150	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
7151	 2F9	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
7152	 2FA	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x2F700020311FFE400D7000000F10021010B0088029F000000A0000D03950000
- stack 0: 0xE0
7153	 2FC	SHR		 	 
- stack 1: 0x840
- stack 0: 0x2F70002
7154	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x2F70002
- stack 0: 0xFFFF
7155	 300	AND		 	 
- stack 1: 0x840
- stack 0: 0x2
7156	 301	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x1
7157	 303	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0x2
7158	 304	PUSH2	00A0	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0xA0
7159	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x840
7160	 308	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7161	 30A	ADD		 	 
- stack 0: 0x844
7162	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7163	 30C	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
7164	 30D	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x311FFE400D7000000F10021010B0088029F000000A0000D0395000003950000
- stack 0: 0xF0
7165	 30F	SHR		 	 
- stack 1: 0x844
- stack 0: 0x311
7166	 310	JUMP		 	 
- stack 0: 0x844
7167	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x844
7168	 312	PUSH2	0080	 	 
- stack 1: 0x844
- stack 0: 0x80
7169	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x844
- stack 0: 0x2
7170	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x844
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7171	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x844
- stack 0: 0x2
7172	 31C	PUSH2	00A0	 	 
- stack 2: 0x844
- stack 1: 0x2
- stack 0: 0xA0
7173	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x844
- stack 1: 0x2
- stack 0: 0x2
7174	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x844
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7175	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x844
- stack 1: 0x2
- stack 0: 0x2
7176	 326	SUB		 	 
- stack 1: 0x844
- stack 0: 0x0
7177	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x32F
7178	 32A	JUMPI		 	 
- stack 0: 0x844
7179	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x844
- stack 0: 0x349
7180	 32E	JUMP		 	 
- stack 0: 0x844
7181	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x844
7182	 34A	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7183	 34C	ADD		 	 
- stack 0: 0x848
7184	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7185	 34E	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0xD7000000F10021010B0088029F000000A0000D039500000395000000860006
7186	 34F	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0xD7000000F10021010B0088029F000000A0000D039500000395000000860006
- stack 0: 0xF0
7187	 351	SHR		 	 
- stack 1: 0x848
- stack 0: 0xD7
7188	 352	JUMP		 	 
- stack 0: 0x848
7189	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x848
7190	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7191	 D9	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0xD7000000F10021010B0088029F000000A0000D039500000395000000860006
7192	 DA	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0xD7000000F10021010B0088029F000000A0000D039500000395000000860006
- stack 0: 0xE0
7193	 DC	SHR		 	 
- stack 1: 0x848
- stack 0: 0xD70000
7194	 DD	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0xD70000
- stack 0: 0xFFFF
7195	 E0	AND		 	 
- stack 1: 0x848
- stack 0: 0x0
7196	 E1	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x1
7197	 E3	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x0
7198	 E4	PUSH2	03A0	 	 
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x3A0
7199	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x848
7200	 E8	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7201	 EA	ADD		 	 
- stack 0: 0x84C
7202	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7203	 EC	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xF10021010B0088029F000000A0000D03950000039500000086000600BA0000
7204	 ED	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0xF10021010B0088029F000000A0000D03950000039500000086000600BA0000
- stack 0: 0xF0
7205	 EF	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xF1
7206	 F0	JUMP		 	 
- stack 0: 0x84C
7207	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x84C
7208	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7209	 F3	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xF10021010B0088029F000000A0000D03950000039500000086000600BA0000
7210	 F4	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0xF10021010B0088029F000000A0000D03950000039500000086000600BA0000
- stack 0: 0xE0
7211	 F6	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xF10021
7212	 F7	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0xF10021
- stack 0: 0xFFFF
7213	 FA	AND		 	 
- stack 1: 0x84C
- stack 0: 0x21
7214	 FB	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x21
- stack 0: 0x1
7215	 FD	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x21
7216	 FE	PUSH2	0380	 	 
- stack 2: 0x84C
- stack 1: 0x21
- stack 0: 0x380
7217	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x84C
7218	 102	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7219	 104	ADD		 	 
- stack 0: 0x850
7220	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7221	 106	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x10B0088029F000000A0000D03950000039500000086000600BA000002D80001
7222	 107	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x10B0088029F000000A0000D03950000039500000086000600BA000002D80001
- stack 0: 0xF0
7223	 109	SHR		 	 
- stack 1: 0x850
- stack 0: 0x10B
7224	 10A	JUMP		 	 
- stack 0: 0x850
7225	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x850
7226	 10C	PUSH2	0060	 	 
- stack 1: 0x850
- stack 0: 0x60
7227	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x850
- stack 0: 0x0
7228	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7229	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x0
7230	 116	PUSH2	03A0	 	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x3A0
7231	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x0
7232	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7233	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x0
7234	 120	SUB		 	 
- stack 1: 0x850
- stack 0: 0x0
7235	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x129
7236	 124	JUMPI		 	 
- stack 0: 0x850
7237	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x850
- stack 0: 0x143
7238	 128	JUMP		 	 
- stack 0: 0x850
7239	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x850
7240	 144	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7241	 146	ADD		 	 
- stack 0: 0x854
7242	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7243	 148	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x29F000000A0000D03950000039500000086000600BA000002D8000102F70002
7244	 149	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x29F000000A0000D03950000039500000086000600BA000002D8000102F70002
- stack 0: 0xF0
7245	 14B	SHR		 	 
- stack 1: 0x854
- stack 0: 0x29F
7246	 14C	JUMP		 	 
- stack 0: 0x854
7247	 29F	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x854
7248	 2A0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
7249	 2A1	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x29F000000A0000D03950000039500000086000600BA000002D8000102F70002
7250	 2A2	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x29F000000A0000D03950000039500000086000600BA000002D8000102F70002
- stack 0: 0xE0
7251	 2A4	SHR		 	 
- stack 1: 0x854
- stack 0: 0x29F0000
7252	 2A5	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x29F0000
- stack 0: 0xFFFF
7253	 2A8	AND		 	 
- stack 1: 0x854
- stack 0: 0x0
7254	 2A9	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x1
7255	 2AB	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x0
7256	 2AC	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x80
7257	 2AF	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
7258	 2B0	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7259	 2B2	ADD		 	 
- stack 0: 0x858
7260	 2B3	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7261	 2B4	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
7262	 2B5	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
- stack 0: 0xF0
7263	 2B7	SHR		 	 
- stack 1: 0x858
- stack 0: 0xA0
7264	 2B8	JUMP		 	 
- stack 0: 0x858
7265	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x858
7266	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7267	 A2	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
7268	 A3	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
- stack 0: 0xE0
7269	 A5	SHR		 	 
- stack 1: 0x858
- stack 0: 0xA0000D
7270	 A6	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0xA0000D
- stack 0: 0xFFFF
7271	 A9	AND		 	 
- stack 1: 0x858
- stack 0: 0xD
7272	 AA	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0xD
- stack 0: 0x1
7273	 AC	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0xD
7274	 AD	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0xD
- stack 0: 0x40
7275	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
7276	 B1	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7277	 B3	ADD		 	 
- stack 0: 0x85C
7278	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7279	 B5	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
7280	 B6	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
- stack 0: 0xF0
7281	 B8	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x395
7282	 B9	JUMP		 	 
- stack 0: 0x85C
7283	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x85C
7284	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7285	 397	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
7286	 398	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
- stack 0: 0xE0
7287	 39A	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x3950000
7288	 39B	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x3950000
- stack 0: 0xFFFF
7289	 39E	AND		 	 
- stack 1: 0x85C
- stack 0: 0x0
7290	 39F	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x0
- stack 0: 0x1
7291	 3A1	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x0
7292	 3A2	POP		 	 
- stack 0: 0x85C
7293	 3A3	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7294	 3A5	ADD		 	 
- stack 0: 0x860
7295	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7296	 3A7	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
7297	 3A8	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
- stack 0: 0xF0
7298	 3AA	SHR		 	 
- stack 1: 0x860
- stack 0: 0x395
7299	 3AB	JUMP		 	 
- stack 0: 0x860
7300	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x860
7301	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
7302	 397	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
7303	 398	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
- stack 0: 0xE0
7304	 39A	SHR		 	 
- stack 1: 0x860
- stack 0: 0x3950000
7305	 39B	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0x3950000
- stack 0: 0xFFFF
7306	 39E	AND		 	 
- stack 1: 0x860
- stack 0: 0x0
7307	 39F	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1
7308	 3A1	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x0
7309	 3A2	POP		 	 
- stack 0: 0x860
7310	 3A3	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7311	 3A5	ADD		 	 
- stack 0: 0x864
7312	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7313	 3A7	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
7314	 3A8	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
- stack 0: 0xF0
7315	 3AA	SHR		 	 
- stack 1: 0x864
- stack 0: 0x86
7316	 3AB	JUMP		 	 
- stack 0: 0x864
7317	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x864
7318	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
7319	 88	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
7320	 89	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
- stack 0: 0xE0
7321	 8B	SHR		 	 
- stack 1: 0x864
- stack 0: 0x860006
7322	 8C	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x860006
- stack 0: 0xFFFF
7323	 8F	AND		 	 
- stack 1: 0x864
- stack 0: 0x6
7324	 90	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x6
- stack 0: 0x1
7325	 92	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x6
7326	 93	PUSH2	0020	 	 
- stack 2: 0x864
- stack 1: 0x6
- stack 0: 0x20
7327	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x864
7328	 97	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7329	 99	ADD		 	 
- stack 0: 0x868
7330	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7331	 9B	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0xBA000002D8000102F700020311FFE400D7000100F10022010B00580086FFFF
7332	 9C	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0xBA000002D8000102F700020311FFE400D7000100F10022010B00580086FFFF
- stack 0: 0xF0
7333	 9E	SHR		 	 
- stack 1: 0x868
- stack 0: 0xBA
7334	 9F	JUMP		 	 
- stack 0: 0x868
7335	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x868
7336	 BB	PUSH2	0040	 	 
- stack 1: 0x868
- stack 0: 0x40
7337	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x868
- stack 0: 0xD
7338	 BF	PUSH1	03	 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x3
7339	 C1	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0xD
7340	 C2	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x20
7341	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x6
7342	 C6	PUSH1	03	 	 
- stack 3: 0x868
- stack 2: 0xD
- stack 1: 0x6
- stack 0: 0x3
7343	 C8	SIGNEXTEND		 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x6
7344	 C9	SLT		 	 
- stack 1: 0x868
- stack 0: 0x1
7345	 CA	PUSH2	0060	 	 
- stack 2: 0x868
- stack 1: 0x1
- stack 0: 0x60
7346	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x868
7347	 CE	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7348	 D0	ADD		 	 
- stack 0: 0x86C
7349	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7350	 D2	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
7351	 D3	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
- stack 0: 0xF0
7352	 D5	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x2D8
7353	 D6	JUMP		 	 
- stack 0: 0x86C
7354	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x86C
7355	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
7356	 2DA	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
7357	 2DB	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
- stack 0: 0xE0
7358	 2DD	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x2D80001
7359	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
7360	 2E1	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1
7361	 2E2	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x1
7362	 2E4	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1
7363	 2E5	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x80
7364	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x0
7365	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x86C
- stack 0: 0x1
7366	 2EA	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x80
7367	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x86C
7368	 2EE	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7369	 2F0	ADD		 	 
- stack 0: 0x870
7370	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7371	 2F2	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
7372	 2F3	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
- stack 0: 0xF0
7373	 2F5	SHR		 	 
- stack 1: 0x870
- stack 0: 0x2F7
7374	 2F6	JUMP		 	 
- stack 0: 0x870
7375	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x870
7376	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7377	 2F9	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
7378	 2FA	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
- stack 0: 0xE0
7379	 2FC	SHR		 	 
- stack 1: 0x870
- stack 0: 0x2F70002
7380	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x2F70002
- stack 0: 0xFFFF
7381	 300	AND		 	 
- stack 1: 0x870
- stack 0: 0x2
7382	 301	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x2
- stack 0: 0x1
7383	 303	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x2
7384	 304	PUSH2	00A0	 	 
- stack 2: 0x870
- stack 1: 0x2
- stack 0: 0xA0
7385	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x870
7386	 308	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7387	 30A	ADD		 	 
- stack 0: 0x874
7388	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7389	 30C	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
7390	 30D	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
- stack 0: 0xF0
7391	 30F	SHR		 	 
- stack 1: 0x874
- stack 0: 0x311
7392	 310	JUMP		 	 
- stack 0: 0x874
7393	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x874
7394	 312	PUSH2	0080	 	 
- stack 1: 0x874
- stack 0: 0x80
7395	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x874
- stack 0: 0x1
7396	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7397	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x1
7398	 31C	PUSH2	00A0	 	 
- stack 2: 0x874
- stack 1: 0x1
- stack 0: 0xA0
7399	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x874
- stack 1: 0x1
- stack 0: 0x2
7400	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x874
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7401	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x874
- stack 1: 0x1
- stack 0: 0x2
7402	 326	SUB		 	 
- stack 1: 0x874
- stack 0: 0x1
7403	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x874
- stack 1: 0x1
- stack 0: 0x32F
7404	 32A	JUMPI		 	 
- stack 0: 0x874
7405	 32F	JUMPDEST		 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x874
7406	 330	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7407	 331	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
7408	 332	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
- stack 0: 0xE0
7409	 334	SHR		 	 
- stack 1: 0x874
- stack 0: 0x311FFE4
7410	 335	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x311FFE4
- stack 0: 0xFFFF
7411	 338	AND		 	 
- stack 1: 0x874
- stack 0: 0xFFE4
7412	 339	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0xFFE4
- stack 0: 0x1
7413	 33B	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7414	 33C	ADD		 	 
- stack 0: 0x858
7415	 33D	PUSH4	FFFFFFFF	 	 
- stack 1: 0x858
- stack 0: 0xFFFFFFFF
7416	 342	AND		 	  ;; # mask to 32 bits
- stack 0: 0x858
7417	 343	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7418	 344	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
7419	 345	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
- stack 0: 0xF0
7420	 347	SHR		 	 
- stack 1: 0x858
- stack 0: 0xA0
7421	 348	JUMP		 	 
- stack 0: 0x858
7422	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x858
7423	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7424	 A2	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
7425	 A3	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0xA0000D03950000039500000086000600BA000002D8000102F700020311FFE4
- stack 0: 0xE0
7426	 A5	SHR		 	 
- stack 1: 0x858
- stack 0: 0xA0000D
7427	 A6	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0xA0000D
- stack 0: 0xFFFF
7428	 A9	AND		 	 
- stack 1: 0x858
- stack 0: 0xD
7429	 AA	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0xD
- stack 0: 0x1
7430	 AC	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0xD
7431	 AD	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0xD
- stack 0: 0x40
7432	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
7433	 B1	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7434	 B3	ADD		 	 
- stack 0: 0x85C
7435	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7436	 B5	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
7437	 B6	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
- stack 0: 0xF0
7438	 B8	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x395
7439	 B9	JUMP		 	 
- stack 0: 0x85C
7440	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x85C
7441	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7442	 397	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
7443	 398	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x3950000039500000086000600BA000002D8000102F700020311FFE400D70001
- stack 0: 0xE0
7444	 39A	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x3950000
7445	 39B	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x3950000
- stack 0: 0xFFFF
7446	 39E	AND		 	 
- stack 1: 0x85C
- stack 0: 0x0
7447	 39F	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x0
- stack 0: 0x1
7448	 3A1	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x0
7449	 3A2	POP		 	 
- stack 0: 0x85C
7450	 3A3	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7451	 3A5	ADD		 	 
- stack 0: 0x860
7452	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7453	 3A7	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
7454	 3A8	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
- stack 0: 0xF0
7455	 3AA	SHR		 	 
- stack 1: 0x860
- stack 0: 0x395
7456	 3AB	JUMP		 	 
- stack 0: 0x860
7457	 395	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x860
7458	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
7459	 397	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
7460	 398	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0x39500000086000600BA000002D8000102F700020311FFE400D7000100F10022
- stack 0: 0xE0
7461	 39A	SHR		 	 
- stack 1: 0x860
- stack 0: 0x3950000
7462	 39B	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0x3950000
- stack 0: 0xFFFF
7463	 39E	AND		 	 
- stack 1: 0x860
- stack 0: 0x0
7464	 39F	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1
7465	 3A1	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x0
7466	 3A2	POP		 	 
- stack 0: 0x860
7467	 3A3	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7468	 3A5	ADD		 	 
- stack 0: 0x864
7469	 3A6	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7470	 3A7	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
7471	 3A8	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
- stack 0: 0xF0
7472	 3AA	SHR		 	 
- stack 1: 0x864
- stack 0: 0x86
7473	 3AB	JUMP		 	 
- stack 0: 0x864
7474	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x864
7475	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
7476	 88	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
7477	 89	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x86000600BA000002D8000102F700020311FFE400D7000100F10022010B0058
- stack 0: 0xE0
7478	 8B	SHR		 	 
- stack 1: 0x864
- stack 0: 0x860006
7479	 8C	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x860006
- stack 0: 0xFFFF
7480	 8F	AND		 	 
- stack 1: 0x864
- stack 0: 0x6
7481	 90	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x6
- stack 0: 0x1
7482	 92	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x6
7483	 93	PUSH2	0020	 	 
- stack 2: 0x864
- stack 1: 0x6
- stack 0: 0x20
7484	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x864
7485	 97	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7486	 99	ADD		 	 
- stack 0: 0x868
7487	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7488	 9B	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0xBA000002D8000102F700020311FFE400D7000100F10022010B00580086FFFF
7489	 9C	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0xBA000002D8000102F700020311FFE400D7000100F10022010B00580086FFFF
- stack 0: 0xF0
7490	 9E	SHR		 	 
- stack 1: 0x868
- stack 0: 0xBA
7491	 9F	JUMP		 	 
- stack 0: 0x868
7492	 BA	JUMPDEST		 ;; __riscvimpl_SLT_3_1_2	  ;; # instr: slt gp,ra,sp(ignore imm)
- stack 0: 0x868
7493	 BB	PUSH2	0040	 	 
- stack 1: 0x868
- stack 0: 0x40
7494	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x868
- stack 0: 0xD
7495	 BF	PUSH1	03	 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x3
7496	 C1	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0xD
7497	 C2	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x20
7498	 C5	MLOAD		 	  ;; # read from x1
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x6
7499	 C6	PUSH1	03	 	 
- stack 3: 0x868
- stack 2: 0xD
- stack 1: 0x6
- stack 0: 0x3
7500	 C8	SIGNEXTEND		 	 
- stack 2: 0x868
- stack 1: 0xD
- stack 0: 0x6
7501	 C9	SLT		 	 
- stack 1: 0x868
- stack 0: 0x1
7502	 CA	PUSH2	0060	 	 
- stack 2: 0x868
- stack 1: 0x1
- stack 0: 0x60
7503	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x868
7504	 CE	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7505	 D0	ADD		 	 
- stack 0: 0x86C
7506	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7507	 D2	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
7508	 D3	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
- stack 0: 0xF0
7509	 D5	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x2D8
7510	 D6	JUMP		 	 
- stack 0: 0x86C
7511	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x86C
7512	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
7513	 2DA	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
7514	 2DB	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x2D8000102F700020311FFE400D7000100F10022010B00580086FFFF03AC0000
- stack 0: 0xE0
7515	 2DD	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x2D80001
7516	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x2D80001
- stack 0: 0xFFFF
7517	 2E1	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1
7518	 2E2	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x1
7519	 2E4	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1
7520	 2E5	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x80
7521	 2E8	MLOAD		 	  ;; # read from x4
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x1
7522	 2E9	ADD		 	  ;; # ADDI 4
- stack 1: 0x86C
- stack 0: 0x2
7523	 2EA	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x80
7524	 2ED	MSTORE		 	  ;; # store to x4
- stack 0: 0x86C
7525	 2EE	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7526	 2F0	ADD		 	 
- stack 0: 0x870
7527	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7528	 2F2	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
7529	 2F3	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
- stack 0: 0xF0
7530	 2F5	SHR		 	 
- stack 1: 0x870
- stack 0: 0x2F7
7531	 2F6	JUMP		 	 
- stack 0: 0x870
7532	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x870
7533	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7534	 2F9	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
7535	 2FA	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x2F700020311FFE400D7000100F10022010B00580086FFFF03AC000000D70000
- stack 0: 0xE0
7536	 2FC	SHR		 	 
- stack 1: 0x870
- stack 0: 0x2F70002
7537	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x2F70002
- stack 0: 0xFFFF
7538	 300	AND		 	 
- stack 1: 0x870
- stack 0: 0x2
7539	 301	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x2
- stack 0: 0x1
7540	 303	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x2
7541	 304	PUSH2	00A0	 	 
- stack 2: 0x870
- stack 1: 0x2
- stack 0: 0xA0
7542	 307	MSTORE		 	  ;; # store to x5
- stack 0: 0x870
7543	 308	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7544	 30A	ADD		 	 
- stack 0: 0x874
7545	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7546	 30C	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
7547	 30D	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x311FFE400D7000100F10022010B00580086FFFF03AC000000D7000000F10023
- stack 0: 0xF0
7548	 30F	SHR		 	 
- stack 1: 0x874
- stack 0: 0x311
7549	 310	JUMP		 	 
- stack 0: 0x874
7550	 311	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x874
7551	 312	PUSH2	0080	 	 
- stack 1: 0x874
- stack 0: 0x80
7552	 315	MLOAD		 	  ;; # read from x4
- stack 1: 0x874
- stack 0: 0x2
7553	 316	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7554	 31B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x2
7555	 31C	PUSH2	00A0	 	 
- stack 2: 0x874
- stack 1: 0x2
- stack 0: 0xA0
7556	 31F	MLOAD		 	  ;; # read from x5
- stack 2: 0x874
- stack 1: 0x2
- stack 0: 0x2
7557	 320	PUSH4	FFFFFFFF	 	 
- stack 3: 0x874
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7558	 325	AND		 	  ;; # mask to 32 bits
- stack 2: 0x874
- stack 1: 0x2
- stack 0: 0x2
7559	 326	SUB		 	 
- stack 1: 0x874
- stack 0: 0x0
7560	 327	PUSH2	032F	 ;; _neq_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 2: 0x874
- stack 1: 0x0
- stack 0: 0x32F
7561	 32A	JUMPI		 	 
- stack 0: 0x874
7562	 32B	PUSH2	0349	 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 1: 0x874
- stack 0: 0x349
7563	 32E	JUMP		 	 
- stack 0: 0x874
7564	 349	JUMPDEST		 ;; _neq_after_dd7155307ed63132bfb4330af5ff881151edffc99559e86759836fd39a34b982	 
- stack 0: 0x874
7565	 34A	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7566	 34C	ADD		 	 
- stack 0: 0x878
7567	 34D	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7568	 34E	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0xD7000100F10022010B00580086FFFF03AC000000D7000000F1002302400044
7569	 34F	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0xD7000100F10022010B00580086FFFF03AC000000D7000000F1002302400044
- stack 0: 0xF0
7570	 351	SHR		 	 
- stack 1: 0x878
- stack 0: 0xD7
7571	 352	JUMP		 	 
- stack 0: 0x878
7572	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x878
7573	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7574	 D9	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0xD7000100F10022010B00580086FFFF03AC000000D7000000F1002302400044
7575	 DA	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0xD7000100F10022010B00580086FFFF03AC000000D7000000F1002302400044
- stack 0: 0xE0
7576	 DC	SHR		 	 
- stack 1: 0x878
- stack 0: 0xD70001
7577	 DD	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0xD70001
- stack 0: 0xFFFF
7578	 E0	AND		 	 
- stack 1: 0x878
- stack 0: 0x1
7579	 E1	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x1
- stack 0: 0x1
7580	 E3	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x1
7581	 E4	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x1
- stack 0: 0x3A0
7582	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x878
7583	 E8	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7584	 EA	ADD		 	 
- stack 0: 0x87C
7585	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7586	 EC	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xF10022010B00580086FFFF03AC000000D7000000F10023024000440086FFFF
7587	 ED	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0xF10022010B00580086FFFF03AC000000D7000000F10023024000440086FFFF
- stack 0: 0xF0
7588	 EF	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xF1
7589	 F0	JUMP		 	 
- stack 0: 0x87C
7590	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x87C
7591	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
7592	 F3	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xF10022010B00580086FFFF03AC000000D7000000F10023024000440086FFFF
7593	 F4	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0xF10022010B00580086FFFF03AC000000D7000000F10023024000440086FFFF
- stack 0: 0xE0
7594	 F6	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xF10022
7595	 F7	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0xF10022
- stack 0: 0xFFFF
7596	 FA	AND		 	 
- stack 1: 0x87C
- stack 0: 0x22
7597	 FB	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x22
- stack 0: 0x1
7598	 FD	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x22
7599	 FE	PUSH2	0380	 	 
- stack 2: 0x87C
- stack 1: 0x22
- stack 0: 0x380
7600	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x87C
7601	 102	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7602	 104	ADD		 	 
- stack 0: 0x880
7603	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7604	 106	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x10B00580086FFFF03AC000000D7000000F10023024000440086FFFF03C70000
7605	 107	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x10B00580086FFFF03AC000000D7000000F10023024000440086FFFF03C70000
- stack 0: 0xF0
7606	 109	SHR		 	 
- stack 1: 0x880
- stack 0: 0x10B
7607	 10A	JUMP		 	 
- stack 0: 0x880
7608	 10B	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4b4(ignore imm)
- stack 0: 0x880
7609	 10C	PUSH2	0060	 	 
- stack 1: 0x880
- stack 0: 0x60
7610	 10F	MLOAD		 	  ;; # read from x3
- stack 1: 0x880
- stack 0: 0x1
7611	 110	PUSH4	FFFFFFFF	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7612	 115	AND		 	  ;; # mask to 32 bits
- stack 1: 0x880
- stack 0: 0x1
7613	 116	PUSH2	03A0	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x3A0
7614	 119	MLOAD		 	  ;; # read from x29
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
7615	 11A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x880
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7616	 11F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
7617	 120	SUB		 	 
- stack 1: 0x880
- stack 0: 0x0
7618	 121	PUSH2	0129	 ;; _neq_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 2: 0x880
- stack 1: 0x0
- stack 0: 0x129
7619	 124	JUMPI		 	 
- stack 0: 0x880
7620	 125	PUSH2	0143	 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 1: 0x880
- stack 0: 0x143
7621	 128	JUMP		 	 
- stack 0: 0x880
7622	 143	JUMPDEST		 ;; _neq_after_872fa30f9fcc28bb9ce4e0ab310e97fbdca584fee981beb140884b4a0c2ac58d	 
- stack 0: 0x880
7623	 144	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7624	 146	ADD		 	 
- stack 0: 0x884
7625	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7626	 148	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x86FFFF03AC000000D7000000F10023024000440086FFFF03C7000000D70001
7627	 149	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x86FFFF03AC000000D7000000F10023024000440086FFFF03C7000000D70001
- stack 0: 0xF0
7628	 14B	SHR		 	 
- stack 1: 0x884
- stack 0: 0x86
7629	 14C	JUMP		 	 
- stack 0: 0x884
7630	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x884
7631	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7632	 88	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x86FFFF03AC000000D7000000F10023024000440086FFFF03C7000000D70001
7633	 89	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x86FFFF03AC000000D7000000F10023024000440086FFFF03C7000000D70001
- stack 0: 0xE0
7634	 8B	SHR		 	 
- stack 1: 0x884
- stack 0: 0x86FFFF
7635	 8C	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
7636	 8F	AND		 	 
- stack 1: 0x884
- stack 0: 0xFFFF
7637	 90	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0xFFFF
- stack 0: 0x1
7638	 92	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7639	 93	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
7640	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x884
7641	 97	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7642	 99	ADD		 	 
- stack 0: 0x888
7643	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7644	 9B	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3AC000000D7000000F10023024000440086FFFF03C7000000D7000100F10024
7645	 9C	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x3AC000000D7000000F10023024000440086FFFF03C7000000D7000100F10024
- stack 0: 0xF0
7646	 9E	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3AC
7647	 9F	JUMP		 	 
- stack 0: 0x888
7648	 3AC	JUMPDEST		 ;; __riscvimpl_SLT_2_0_1	  ;; # instr: slt sp,zero,ra(ignore imm)
- stack 0: 0x888
7649	 3AD	PUSH2	0020	 	 
- stack 1: 0x888
- stack 0: 0x20
7650	 3B0	MLOAD		 	  ;; # read from x1
- stack 1: 0x888
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7651	 3B1	PUSH1	03	 	 
- stack 2: 0x888
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
7652	 3B3	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7653	 3B4	PUSH1	00	 	 
- stack 2: 0x888
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
7654	 3B6	PUSH1	03	 	 
- stack 3: 0x888
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
7655	 3B8	SIGNEXTEND		 	 
- stack 2: 0x888
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
7656	 3B9	SLT		 	 
- stack 1: 0x888
- stack 0: 0x0
7657	 3BA	PUSH2	0040	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x40
7658	 3BD	MSTORE		 	  ;; # store to x2
- stack 0: 0x888
7659	 3BE	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7660	 3C0	ADD		 	 
- stack 0: 0x88C
7661	 3C1	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7662	 3C2	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0xD7000000F10023024000440086FFFF03C7000000D7000100F1002402400030
7663	 3C3	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0xD7000000F10023024000440086FFFF03C7000000D7000100F1002402400030
- stack 0: 0xF0
7664	 3C5	SHR		 	 
- stack 1: 0x88C
- stack 0: 0xD7
7665	 3C6	JUMP		 	 
- stack 0: 0x88C
7666	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x88C
7667	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x88C
- stack 0: 0x88C
7668	 D9	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0xD7000000F10023024000440086FFFF03C7000000D7000100F1002402400030
7669	 DA	PUSH1	E0	 	 
- stack 2: 0x88C
- stack 1: 0xD7000000F10023024000440086FFFF03C7000000D7000100F1002402400030
- stack 0: 0xE0
7670	 DC	SHR		 	 
- stack 1: 0x88C
- stack 0: 0xD70000
7671	 DD	PUSH2	FFFF	 	 
- stack 2: 0x88C
- stack 1: 0xD70000
- stack 0: 0xFFFF
7672	 E0	AND		 	 
- stack 1: 0x88C
- stack 0: 0x0
7673	 E1	PUSH1	01	 	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x1
7674	 E3	SIGNEXTEND		 	 
- stack 1: 0x88C
- stack 0: 0x0
7675	 E4	PUSH2	03A0	 	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x3A0
7676	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x88C
7677	 E8	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7678	 EA	ADD		 	 
- stack 0: 0x890
7679	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7680	 EC	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xF10023024000440086FFFF03C7000000D7000100F100240240003003E20000
7681	 ED	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0xF10023024000440086FFFF03C7000000D7000100F100240240003003E20000
- stack 0: 0xF0
7682	 EF	SHR		 	 
- stack 1: 0x890
- stack 0: 0xF1
7683	 F0	JUMP		 	 
- stack 0: 0x890
7684	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x890
7685	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
7686	 F3	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xF10023024000440086FFFF03C7000000D7000100F100240240003003E20000
7687	 F4	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0xF10023024000440086FFFF03C7000000D7000100F100240240003003E20000
- stack 0: 0xE0
7688	 F6	SHR		 	 
- stack 1: 0x890
- stack 0: 0xF10023
7689	 F7	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0xF10023
- stack 0: 0xFFFF
7690	 FA	AND		 	 
- stack 1: 0x890
- stack 0: 0x23
7691	 FB	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x23
- stack 0: 0x1
7692	 FD	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x23
7693	 FE	PUSH2	0380	 	 
- stack 2: 0x890
- stack 1: 0x23
- stack 0: 0x380
7694	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x890
7695	 102	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7696	 104	ADD		 	 
- stack 0: 0x894
7697	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7698	 106	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x24000440086FFFF03C7000000D7000100F100240240003003E2000000D70000
7699	 107	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x24000440086FFFF03C7000000D7000100F100240240003003E2000000D70000
- stack 0: 0xF0
7700	 109	SHR		 	 
- stack 1: 0x894
- stack 0: 0x240
7701	 10A	JUMP		 	 
- stack 0: 0x894
7702	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x894
7703	 241	PUSH2	0040	 	 
- stack 1: 0x894
- stack 0: 0x40
7704	 244	MLOAD		 	  ;; # read from x2
- stack 1: 0x894
- stack 0: 0x0
7705	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7706	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x894
- stack 0: 0x0
7707	 24B	PUSH2	03A0	 	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x3A0
7708	 24E	MLOAD		 	  ;; # read from x29
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x0
7709	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x894
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7710	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x0
7711	 255	SUB		 	 
- stack 1: 0x894
- stack 0: 0x0
7712	 256	PUSH2	025E	 ;; _neq_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x25E
7713	 259	JUMPI		 	 
- stack 0: 0x894
7714	 25A	PUSH2	0278	 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 1: 0x894
- stack 0: 0x278
7715	 25D	JUMP		 	 
- stack 0: 0x894
7716	 278	JUMPDEST		 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 0: 0x894
7717	 279	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7718	 27B	ADD		 	 
- stack 0: 0x898
7719	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7720	 27D	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x86FFFF03C7000000D7000100F100240240003003E2000000D7000000F10025
7721	 27E	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x86FFFF03C7000000D7000100F100240240003003E2000000D7000000F10025
- stack 0: 0xF0
7722	 280	SHR		 	 
- stack 1: 0x898
- stack 0: 0x86
7723	 281	JUMP		 	 
- stack 0: 0x898
7724	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x898
7725	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
7726	 88	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x86FFFF03C7000000D7000100F100240240003003E2000000D7000000F10025
7727	 89	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x86FFFF03C7000000D7000100F100240240003003E2000000D7000000F10025
- stack 0: 0xE0
7728	 8B	SHR		 	 
- stack 1: 0x898
- stack 0: 0x86FFFF
7729	 8C	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
7730	 8F	AND		 	 
- stack 1: 0x898
- stack 0: 0xFFFF
7731	 90	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0xFFFF
- stack 0: 0x1
7732	 92	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7733	 93	PUSH2	0020	 	 
- stack 2: 0x898
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
7734	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x898
7735	 97	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7736	 99	ADD		 	 
- stack 0: 0x89C
7737	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7738	 9B	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x3C7000000D7000100F100240240003003E2000000D7000000F1002501E10020
7739	 9C	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x3C7000000D7000100F100240240003003E2000000D7000000F1002501E10020
- stack 0: 0xF0
7740	 9E	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x3C7
7741	 9F	JUMP		 	 
- stack 0: 0x89C
7742	 3C7	JUMPDEST		 ;; __riscvimpl_SLT_2_1_0	  ;; # instr: slt sp,ra,zero(ignore imm)
- stack 0: 0x89C
7743	 3C8	PUSH1	00	 	 
- stack 1: 0x89C
- stack 0: 0x0
7744	 3CA	PUSH1	03	 	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0x3
7745	 3CC	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x0
7746	 3CD	PUSH2	0020	 	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0x20
7747	 3D0	MLOAD		 	  ;; # read from x1
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7748	 3D1	PUSH1	03	 	 
- stack 3: 0x89C
- stack 2: 0x0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
7749	 3D3	SIGNEXTEND		 	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7750	 3D4	SLT		 	 
- stack 1: 0x89C
- stack 0: 0x1
7751	 3D5	PUSH2	0040	 	 
- stack 2: 0x89C
- stack 1: 0x1
- stack 0: 0x40
7752	 3D8	MSTORE		 	  ;; # store to x2
- stack 0: 0x89C
7753	 3D9	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7754	 3DB	ADD		 	 
- stack 0: 0x8A0
7755	 3DC	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7756	 3DD	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0xD7000100F100240240003003E2000000D7000000F1002501E1002000860010
7757	 3DE	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0xD7000100F100240240003003E2000000D7000000F1002501E1002000860010
- stack 0: 0xF0
7758	 3E0	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0xD7
7759	 3E1	JUMP		 	 
- stack 0: 0x8A0
7760	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8A0
7761	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
7762	 D9	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0xD7000100F100240240003003E2000000D7000000F1002501E1002000860010
7763	 DA	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0xD7000100F100240240003003E2000000D7000000F1002501E1002000860010
- stack 0: 0xE0
7764	 DC	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0xD70001
7765	 DD	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0xD70001
- stack 0: 0xFFFF
7766	 E0	AND		 	 
- stack 1: 0x8A0
- stack 0: 0x1
7767	 E1	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0x1
- stack 0: 0x1
7768	 E3	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0x1
7769	 E4	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0x1
- stack 0: 0x3A0
7770	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A0
7771	 E8	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7772	 EA	ADD		 	 
- stack 0: 0x8A4
7773	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7774	 EC	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xF100240240003003E2000000D7000000F1002501E100200086001000A0001E
7775	 ED	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0xF100240240003003E2000000D7000000F1002501E100200086001000A0001E
- stack 0: 0xF0
7776	 EF	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xF1
7777	 F0	JUMP		 	 
- stack 0: 0x8A4
7778	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8A4
7779	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7780	 F3	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xF100240240003003E2000000D7000000F1002501E100200086001000A0001E
7781	 F4	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0xF100240240003003E2000000D7000000F1002501E100200086001000A0001E
- stack 0: 0xE0
7782	 F6	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xF10024
7783	 F7	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0xF10024
- stack 0: 0xFFFF
7784	 FA	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x24
7785	 FB	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x24
- stack 0: 0x1
7786	 FD	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x24
7787	 FE	PUSH2	0380	 	 
- stack 2: 0x8A4
- stack 1: 0x24
- stack 0: 0x380
7788	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x8A4
7789	 102	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7790	 104	ADD		 	 
- stack 0: 0x8A8
7791	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7792	 106	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x240003003E2000000D7000000F1002501E100200086001000A0001E03FB0000
7793	 107	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x240003003E2000000D7000000F1002501E100200086001000A0001E03FB0000
- stack 0: 0xF0
7794	 109	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x240
7795	 10A	JUMP		 	 
- stack 0: 0x8A8
7796	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x8A8
7797	 241	PUSH2	0040	 	 
- stack 1: 0x8A8
- stack 0: 0x40
7798	 244	MLOAD		 	  ;; # read from x2
- stack 1: 0x8A8
- stack 0: 0x1
7799	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7800	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A8
- stack 0: 0x1
7801	 24B	PUSH2	03A0	 	 
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x3A0
7802	 24E	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x1
7803	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8A8
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7804	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8A8
- stack 1: 0x1
- stack 0: 0x1
7805	 255	SUB		 	 
- stack 1: 0x8A8
- stack 0: 0x0
7806	 256	PUSH2	025E	 ;; _neq_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x25E
7807	 259	JUMPI		 	 
- stack 0: 0x8A8
7808	 25A	PUSH2	0278	 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 1: 0x8A8
- stack 0: 0x278
7809	 25D	JUMP		 	 
- stack 0: 0x8A8
7810	 278	JUMPDEST		 ;; _neq_after_b48bd3ff22a56959456c25b9017737fc5ad7e5d9333e488f27aeca4a9d6c5509	 
- stack 0: 0x8A8
7811	 279	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7812	 27B	ADD		 	 
- stack 0: 0x8AC
7813	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7814	 27D	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x3E2000000D7000000F1002501E100200086001000A0001E03FB000000D70000
7815	 27E	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x3E2000000D7000000F1002501E100200086001000A0001E03FB000000D70000
- stack 0: 0xF0
7816	 280	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x3E2
7817	 281	JUMP		 	 
- stack 0: 0x8AC
7818	 3E2	JUMPDEST		 ;; __riscvimpl_SLT_1_0_0	  ;; # instr: slt ra,zero,zero(ignore imm)
- stack 0: 0x8AC
7819	 3E3	PUSH1	00	 	 
- stack 1: 0x8AC
- stack 0: 0x0
7820	 3E5	PUSH1	03	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x3
7821	 3E7	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0x0
7822	 3E8	PUSH1	00	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x0
7823	 3EA	PUSH1	03	 	 
- stack 3: 0x8AC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
7824	 3EC	SIGNEXTEND		 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x0
7825	 3ED	SLT		 	 
- stack 1: 0x8AC
- stack 0: 0x0
7826	 3EE	PUSH2	0020	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x20
7827	 3F1	MSTORE		 	  ;; # store to x1
- stack 0: 0x8AC
7828	 3F2	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7829	 3F4	ADD		 	 
- stack 0: 0x8B0
7830	 3F5	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7831	 3F6	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0xD7000000F1002501E100200086001000A0001E03FB000000D7000000F10026
7832	 3F7	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0xD7000000F1002501E100200086001000A0001E03FB000000D7000000F10026
- stack 0: 0xF0
7833	 3F9	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0xD7
7834	 3FA	JUMP		 	 
- stack 0: 0x8B0
7835	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8B0
7836	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7837	 D9	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0xD7000000F1002501E100200086001000A0001E03FB000000D7000000F10026
7838	 DA	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0xD7000000F1002501E100200086001000A0001E03FB000000D7000000F10026
- stack 0: 0xE0
7839	 DC	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0xD70000
7840	 DD	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0xD70000
- stack 0: 0xFFFF
7841	 E0	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x0
7842	 E1	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x1
7843	 E3	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x0
7844	 E4	PUSH2	03A0	 	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x3A0
7845	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x8B0
7846	 E8	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7847	 EA	ADD		 	 
- stack 0: 0x8B4
7848	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7849	 EC	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0xF1002501E100200086001000A0001E03FB000000D7000000F1002604150008
7850	 ED	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0xF1002501E100200086001000A0001E03FB000000D7000000F1002604150008
- stack 0: 0xF0
7851	 EF	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0xF1
7852	 F0	JUMP		 	 
- stack 0: 0x8B4
7853	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8B4
7854	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
7855	 F3	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0xF1002501E100200086001000A0001E03FB000000D7000000F1002604150008
7856	 F4	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0xF1002501E100200086001000A0001E03FB000000D7000000F1002604150008
- stack 0: 0xE0
7857	 F6	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0xF10025
7858	 F7	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0xF10025
- stack 0: 0xFFFF
7859	 FA	AND		 	 
- stack 1: 0x8B4
- stack 0: 0x25
7860	 FB	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0x25
- stack 0: 0x1
7861	 FD	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0x25
7862	 FE	PUSH2	0380	 	 
- stack 2: 0x8B4
- stack 1: 0x25
- stack 0: 0x380
7863	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x8B4
7864	 102	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7865	 104	ADD		 	 
- stack 0: 0x8B8
7866	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7867	 106	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x1E100200086001000A0001E03FB000000D7000000F100260415000804550018
7868	 107	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x1E100200086001000A0001E03FB000000D7000000F100260415000804550018
- stack 0: 0xF0
7869	 109	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x1E1
7870	 10A	JUMP		 	 
- stack 0: 0x8B8
7871	 1E1	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x8B8
7872	 1E2	PUSH2	0020	 	 
- stack 1: 0x8B8
- stack 0: 0x20
7873	 1E5	MLOAD		 	  ;; # read from x1
- stack 1: 0x8B8
- stack 0: 0x0
7874	 1E6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7875	 1EB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B8
- stack 0: 0x0
7876	 1EC	PUSH2	03A0	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x3A0
7877	 1EF	MLOAD		 	  ;; # read from x29
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x0
7878	 1F0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7879	 1F5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x0
7880	 1F6	SUB		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7881	 1F7	PUSH2	01FF	 ;; _neq_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x1FF
7882	 1FA	JUMPI		 	 
- stack 0: 0x8B8
7883	 1FB	PUSH2	0219	 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 1: 0x8B8
- stack 0: 0x219
7884	 1FE	JUMP		 	 
- stack 0: 0x8B8
7885	 219	JUMPDEST		 ;; _neq_after_97d87d8e69024ba0ce05724a02cdab96e5d4818acb04fc66e01c6a357500fdb4	 
- stack 0: 0x8B8
7886	 21A	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7887	 21C	ADD		 	 
- stack 0: 0x8BC
7888	 21D	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7889	 21E	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x86001000A0001E03FB000000D7000000F10026041500080455001800210001
7890	 21F	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x86001000A0001E03FB000000D7000000F10026041500080455001800210001
- stack 0: 0xF0
7891	 221	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x86
7892	 222	JUMP		 	 
- stack 0: 0x8BC
7893	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x8BC
7894	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7895	 88	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x86001000A0001E03FB000000D7000000F10026041500080455001800210001
7896	 89	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0x86001000A0001E03FB000000D7000000F10026041500080455001800210001
- stack 0: 0xE0
7897	 8B	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x860010
7898	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0x860010
- stack 0: 0xFFFF
7899	 8F	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x10
7900	 90	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x10
- stack 0: 0x1
7901	 92	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x10
7902	 93	PUSH2	0020	 	 
- stack 2: 0x8BC
- stack 1: 0x10
- stack 0: 0x20
7903	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8BC
7904	 97	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7905	 99	ADD		 	 
- stack 0: 0x8C0
7906	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7907	 9B	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xA0001E03FB000000D7000000F100260415000804550018002100010034F918
7908	 9C	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0xA0001E03FB000000D7000000F100260415000804550018002100010034F918
- stack 0: 0xF0
7909	 9E	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xA0
7910	 9F	JUMP		 	 
- stack 0: 0x8C0
7911	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8C0
7912	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C0
- stack 0: 0x8C0
7913	 A2	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xA0001E03FB000000D7000000F100260415000804550018002100010034F918
7914	 A3	PUSH1	E0	 	 
- stack 2: 0x8C0
- stack 1: 0xA0001E03FB000000D7000000F100260415000804550018002100010034F918
- stack 0: 0xE0
7915	 A5	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xA0001E
7916	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8C0
- stack 1: 0xA0001E
- stack 0: 0xFFFF
7917	 A9	AND		 	 
- stack 1: 0x8C0
- stack 0: 0x1E
7918	 AA	PUSH1	01	 	 
- stack 2: 0x8C0
- stack 1: 0x1E
- stack 0: 0x1
7919	 AC	SIGNEXTEND		 	 
- stack 1: 0x8C0
- stack 0: 0x1E
7920	 AD	PUSH2	0040	 	 
- stack 2: 0x8C0
- stack 1: 0x1E
- stack 0: 0x40
7921	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8C0
7922	 B1	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7923	 B3	ADD		 	 
- stack 0: 0x8C4
7924	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7925	 B5	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x3FB000000D7000000F100260415000804550018002100010034F91800530042
7926	 B6	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x3FB000000D7000000F100260415000804550018002100010034F91800530042
- stack 0: 0xF0
7927	 B8	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x3FB
7928	 B9	JUMP		 	 
- stack 0: 0x8C4
7929	 3FB	JUMPDEST		 ;; __riscvimpl_SLT_0_1_2	  ;; # instr: slt zero,ra,sp(ignore imm)
- stack 0: 0x8C4
7930	 3FC	PUSH2	0040	 	 
- stack 1: 0x8C4
- stack 0: 0x40
7931	 3FF	MLOAD		 	  ;; # read from x2
- stack 1: 0x8C4
- stack 0: 0x1E
7932	 400	PUSH1	03	 	 
- stack 2: 0x8C4
- stack 1: 0x1E
- stack 0: 0x3
7933	 402	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x1E
7934	 403	PUSH2	0020	 	 
- stack 2: 0x8C4
- stack 1: 0x1E
- stack 0: 0x20
7935	 406	MLOAD		 	  ;; # read from x1
- stack 2: 0x8C4
- stack 1: 0x1E
- stack 0: 0x10
7936	 407	PUSH1	03	 	 
- stack 3: 0x8C4
- stack 2: 0x1E
- stack 1: 0x10
- stack 0: 0x3
7937	 409	SIGNEXTEND		 	 
- stack 2: 0x8C4
- stack 1: 0x1E
- stack 0: 0x10
7938	 40A	SLT		 	 
- stack 1: 0x8C4
- stack 0: 0x1
7939	 40B	POP		 	 
- stack 0: 0x8C4
7940	 40C	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7941	 40E	ADD		 	 
- stack 0: 0x8C8
7942	 40F	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7943	 410	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xD7000000F100260415000804550018002100010034F9180053004200660000
7944	 411	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0xD7000000F100260415000804550018002100010034F9180053004200660000
- stack 0: 0xF0
7945	 413	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xD7
7946	 414	JUMP		 	 
- stack 0: 0x8C8
7947	 D7	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8C8
7948	 D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7949	 D9	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0xD7000000F100260415000804550018002100010034F9180053004200660000
7950	 DA	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0xD7000000F100260415000804550018002100010034F9180053004200660000
- stack 0: 0xE0
7951	 DC	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0xD70000
7952	 DD	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0xD70000
- stack 0: 0xFFFF
7953	 E0	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7954	 E1	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x1
7955	 E3	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7956	 E4	PUSH2	03A0	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x3A0
7957	 E7	MSTORE		 	  ;; # store to x29
- stack 0: 0x8C8
7958	 E8	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7959	 EA	ADD		 	 
- stack 0: 0x8CC
7960	 EB	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7961	 EC	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0xF100260415000804550018002100010034F918005300420066000004950001
7962	 ED	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0xF100260415000804550018002100010034F918005300420066000004950001
- stack 0: 0xF0
7963	 EF	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0xF1
7964	 F0	JUMP		 	 
- stack 0: 0x8CC
7965	 F1	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8CC
7966	 F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7967	 F3	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0xF100260415000804550018002100010034F918005300420066000004950001
7968	 F4	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0xF100260415000804550018002100010034F918005300420066000004950001
- stack 0: 0xE0
7969	 F6	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0xF10026
7970	 F7	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0xF10026
- stack 0: 0xFFFF
7971	 FA	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x26
7972	 FB	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x26
- stack 0: 0x1
7973	 FD	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x26
7974	 FE	PUSH2	0380	 	 
- stack 2: 0x8CC
- stack 1: 0x26
- stack 0: 0x380
7975	 101	MSTORE		 	  ;; # store to x28
- stack 0: 0x8CC
7976	 102	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7977	 104	ADD		 	 
- stack 0: 0x8D0
7978	 105	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7979	 106	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x415000804550018002100010034F91800530042006600000495000100210001
7980	 107	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x415000804550018002100010034F91800530042006600000495000100210001
- stack 0: 0xF0
7981	 109	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x415
7982	 10A	JUMP		 	 
- stack 0: 0x8D0
7983	 415	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8D0
7984	 416	PUSH1	00	 	 
- stack 1: 0x8D0
- stack 0: 0x0
7985	 418	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7986	 41D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D0
- stack 0: 0x0
7987	 41E	PUSH2	03A0	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x3A0
7988	 421	MLOAD		 	  ;; # read from x29
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x0
7989	 422	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8D0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7990	 427	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x0
7991	 428	SUB		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7992	 429	PUSH2	0431	 ;; _neq_4d1ded633d9ec0627e95ff8344ad1d59780c9dd42a89a2131a70f10bdc496b90	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x431
7993	 42C	JUMPI		 	 
- stack 0: 0x8D0
7994	 42D	PUSH2	044B	 ;; _neq_after_4d1ded633d9ec0627e95ff8344ad1d59780c9dd42a89a2131a70f10bdc496b90	 
- stack 1: 0x8D0
- stack 0: 0x44B
7995	 430	JUMP		 	 
- stack 0: 0x8D0
7996	 44B	JUMPDEST		 ;; _neq_after_4d1ded633d9ec0627e95ff8344ad1d59780c9dd42a89a2131a70f10bdc496b90	 
- stack 0: 0x8D0
7997	 44C	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7998	 44E	ADD		 	 
- stack 0: 0x8D4
7999	 44F	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
8000	 450	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x4550018002100010034F918005300420066000004950001002100010034F91C
8001	 451	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x4550018002100010034F918005300420066000004950001002100010034F91C
- stack 0: 0xF0
8002	 453	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x455
8003	 454	JUMP		 	 
- stack 0: 0x8D4
8004	 455	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8D4
8005	 456	PUSH1	00	 	 
- stack 1: 0x8D4
- stack 0: 0x0
8006	 458	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8007	 45D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8D4
- stack 0: 0x0
8008	 45E	PUSH2	0380	 	 
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0x380
8009	 461	MLOAD		 	  ;; # read from x28
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0x26
8010	 462	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8D4
- stack 2: 0x0
- stack 1: 0x26
- stack 0: 0xFFFFFFFF
8011	 467	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8D4
- stack 1: 0x0
- stack 0: 0x26
8012	 468	SUB		 	 
- stack 1: 0x8D4
- stack 0: 0x26
8013	 469	PUSH2	0471	 ;; _neq_0502f315f621282759d2c06d036271fc3fb9b6c993e64a7ad609ead86ec77dce	 
- stack 2: 0x8D4
- stack 1: 0x26
- stack 0: 0x471
8014	 46C	JUMPI		 	 
- stack 0: 0x8D4
8015	 471	JUMPDEST		 ;; _neq_0502f315f621282759d2c06d036271fc3fb9b6c993e64a7ad609ead86ec77dce	 
- stack 0: 0x8D4
8016	 472	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D4
- stack 0: 0x8D4
8017	 473	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x4550018002100010034F918005300420066000004950001002100010034F91C
8018	 474	PUSH1	E0	 	 
- stack 2: 0x8D4
- stack 1: 0x4550018002100010034F918005300420066000004950001002100010034F91C
- stack 0: 0xE0
8019	 476	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x4550018
8020	 477	PUSH2	FFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x4550018
- stack 0: 0xFFFF
8021	 47A	AND		 	 
- stack 1: 0x8D4
- stack 0: 0x18
8022	 47B	PUSH1	01	 	 
- stack 2: 0x8D4
- stack 1: 0x18
- stack 0: 0x1
8023	 47D	SIGNEXTEND		 	 
- stack 1: 0x8D4
- stack 0: 0x18
8024	 47E	ADD		 	 
- stack 0: 0x8EC
8025	 47F	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
8026	 484	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8EC
8027	 485	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
8028	 486	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x2100010034F91C005300420066000004A00000006600000000000000000000
8029	 487	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x2100010034F91C005300420066000004A00000006600000000000000000000
- stack 0: 0xF0
8030	 489	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x21
8031	 48A	JUMP		 	 
- stack 0: 0x8EC
8032	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8EC
8033	 22	PUSH4	00001000	 	 
- stack 1: 0x8EC
- stack 0: 0x1000
8034	 27	PUSH2	0160	 	 
- stack 2: 0x8EC
- stack 1: 0x1000
- stack 0: 0x160
8035	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8EC
8036	 2B	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
8037	 2D	ADD		 	 
- stack 0: 0x8F0
8038	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
8039	 2F	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x34F91C005300420066000004A0000000660000000000000000000000000000
8040	 30	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x34F91C005300420066000004A0000000660000000000000000000000000000
- stack 0: 0xF0
8041	 32	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x34
8042	 33	JUMP		 	 
- stack 0: 0x8F0
8043	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1776(ignore imm)
- stack 0: 0x8F0
8044	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F0
- stack 0: 0x8F0
8045	 36	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x34F91C005300420066000004A0000000660000000000000000000000000000
8046	 37	PUSH1	E0	 	 
- stack 2: 0x8F0
- stack 1: 0x34F91C005300420066000004A0000000660000000000000000000000000000
- stack 0: 0xE0
8047	 39	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x34F91C
8048	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8F0
- stack 1: 0x34F91C
- stack 0: 0xFFFF
8049	 3D	AND		 	 
- stack 1: 0x8F0
- stack 0: 0xF91C
8050	 3E	PUSH1	01	 	 
- stack 2: 0x8F0
- stack 1: 0xF91C
- stack 0: 0x1
8051	 40	SIGNEXTEND		 	 
- stack 1: 0x8F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91C
8052	 41	PUSH2	0160	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91C
- stack 0: 0x160
8053	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF91C
- stack 0: 0x1000
8054	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8F0
- stack 0: 0x91C
8055	 46	PUSH2	0160	 	 
- stack 2: 0x8F0
- stack 1: 0x91C
- stack 0: 0x160
8056	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8F0
8057	 4A	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
8058	 4C	ADD		 	 
- stack 0: 0x8F4
8059	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
8060	 4E	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x5300420066000004A00000006600000000000000000000000000006574796D
8061	 4F	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x5300420066000004A00000006600000000000000000000000000006574796D
- stack 0: 0xF0
8062	 51	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x53
8063	 52	JUMP		 	 
- stack 0: 0x8F4
8064	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8F4
8065	 54	PUSH4	00042000	 	 
- stack 1: 0x8F4
- stack 0: 0x42000
8066	 59	PUSH2	0140	 	 
- stack 2: 0x8F4
- stack 1: 0x42000
- stack 0: 0x140
8067	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8F4
8068	 5D	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
8069	 5F	ADD		 	 
- stack 0: 0x8F8
8070	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
8071	 61	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x66000004A00000006600000000000000000000000000006574796D00007473
8072	 62	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x66000004A00000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
8073	 64	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x66
8074	 65	JUMP		 	 
- stack 0: 0x8F8
8075	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F8
8076	 67	PUSH2	0140	 	 
- stack 1: 0x8F8
- stack 0: 0x140
8077	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F8
- stack 0: 0x42000
8078	 6B	PUSH2	0075	 ;; _ecall_e743965b54305b1d3ba2c392444ff7c1a45a7eb4b3495e6fd07b32616f5b1e06	 
- stack 2: 0x8F8
- stack 1: 0x42000
- stack 0: 0x75
8079	 6E	JUMPI		 	 
- stack 0: 0x8F8
8080	 75	JUMPDEST		 ;; _ecall_e743965b54305b1d3ba2c392444ff7c1a45a7eb4b3495e6fd07b32616f5b1e06	 
- stack 0: 0x8F8
8081	 76	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
8082	 78	PUSH2	0160	 	 
- stack 2: 0x8F8
- stack 1: 0x4
- stack 0: 0x160
8083	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8F8
- stack 1: 0x4
- stack 0: 0x91C
8084	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8F8
8085	 7D	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
8086	 7F	ADD		 	 
- stack 0: 0x8FC
8087	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
8088	 81	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4A00000006600000000000000000000000000006574796D0000747300525245
8089	 82	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x4A00000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
8090	 84	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x4A0
8091	 85	JUMP		 	 
- stack 0: 0x8FC
8092	 4A0	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8FC
8093	 4A1	PUSH4	00000000	 	 
- stack 1: 0x8FC
- stack 0: 0x0
8094	 4A6	PUSH2	0140	 	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x140
8095	 4A9	MSTORE		 	  ;; # store to x10
- stack 0: 0x8FC
8096	 4AA	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
8097	 4AC	ADD		 	 
- stack 0: 0x900
8098	 4AD	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
8099	 4AE	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
8100	 4AF	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8101	 4B1	SHR		 	 
- stack 1: 0x900
- stack 0: 0x66
8102	 4B2	JUMP		 	 
- stack 0: 0x900
8103	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x900
8104	 67	PUSH2	0140	 	 
- stack 1: 0x900
- stack 0: 0x140
8105	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x900
- stack 0: 0x0
8106	 6B	PUSH2	0075	 ;; _ecall_e743965b54305b1d3ba2c392444ff7c1a45a7eb4b3495e6fd07b32616f5b1e06	 
- stack 2: 0x900
- stack 1: 0x0
- stack 0: 0x75
8107	 6E	JUMPI		 	 
- stack 0: 0x900
8108	 6F	PUSH1	20	 	 
- stack 1: 0x900
- stack 0: 0x20
8109	 71	PUSH2	0160	 	 
- stack 2: 0x900
- stack 1: 0x20
- stack 0: 0x160
8110	 74	RETURN		 	 
Final bytecode length; 2516
Returned: 000000000000000000000000000000000000000000000000000000000000091c
gasUsed : 28171
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4
** HOT: 4b8 - range: 4b8,4bc,4c0,4c4,4c8,4cc,4d0
** HOT: 4d4 - range: 4d4,4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4f0 - range: 4f0,4f4,4f8,4fc,500,504,508,50c
** HOT: 510 - range: 510,514,518,51c,520,524,528
** HOT: 52c - range: 52c,530,534,538,53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c
** HOT: 560 - range: 560,564,568,56c,570,574
** HOT: 578 - range: 578,57c,580,584,588,58c
** HOT: 590 - range: 590,594,598,59c,5a0,5a4
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4,5b8,5bc
** HOT: 5c0 - range: 5c0,5c4,5c8,5cc,5d0
** HOT: 5d4 - range: 5d4,5d8,5dc,5e0,5e4,5e8,5ec,5f0
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8,5ec,5f0
** HOT: 5f4 - range: 5f4,5f8,5fc
** HOT: 600 - range: 600,604,608,60c,610,614,618,61c,620
** HOT: 604 - range: 604,608,60c,610,614,618,61c,620
** HOT: 624 - range: 624,628,62c
** HOT: 630 - range: 630,634,638,63c,640,644,648,64c,650,654
** HOT: 634 - range: 634,638,63c,640,644,648,64c,650,654
** HOT: 658 - range: 658,65c,660
** HOT: 664 - range: 664,668,66c,670,674,678,67c
** HOT: 668 - range: 668,66c,670,674,678,67c
** HOT: 680 - range: 680,684,688
** HOT: 68c - range: 68c,690,694,698,69c,6a0,6a4,6a8
** HOT: 690 - range: 690,694,698,69c,6a0,6a4,6a8
** HOT: 6ac - range: 6ac,6b0,6b4
** HOT: 6b8 - range: 6b8,6bc,6c0,6c4,6c8,6cc,6d0,6d4,6d8
** HOT: 6bc - range: 6bc,6c0,6c4,6c8,6cc,6d0,6d4,6d8
** HOT: 6dc - range: 6dc,6e0,6e4
** HOT: 6e8 - range: 6e8,6ec,6f0,6f4,6f8,6fc,700,704
** HOT: 6ec - range: 6ec,6f0,6f4,6f8,6fc,700,704
** HOT: 708 - range: 708,70c,710
** HOT: 714 - range: 714,718,71c,720,724,728,72c,730,734
** HOT: 718 - range: 718,71c,720,724,728,72c,730,734
** HOT: 738 - range: 738,73c,740
** HOT: 744 - range: 744,748,74c,750,754,758,75c,760,764
** HOT: 748 - range: 748,74c,750,754,758,75c,760,764
** HOT: 768 - range: 768,76c,770
** HOT: 774 - range: 774,778,77c,780,784,788,78c
** HOT: 778 - range: 778,77c,780,784,788,78c
** HOT: 790 - range: 790,794,798
** HOT: 79c - range: 79c,7a0,7a4,7a8,7ac,7b0,7b4,7b8
** HOT: 7a0 - range: 7a0,7a4,7a8,7ac,7b0,7b4,7b8
** HOT: 7bc - range: 7bc,7c0,7c4
** HOT: 7c8 - range: 7c8,7cc,7d0,7d4,7d8,7dc,7e0,7e4,7e8
** HOT: 7cc - range: 7cc,7d0,7d4,7d8,7dc,7e0,7e4,7e8
** HOT: 7ec - range: 7ec,7f0,7f4
** HOT: 7f8 - range: 7f8,7fc,800,804,808,80c,810,814
** HOT: 7fc - range: 7fc,800,804,808,80c,810,814
** HOT: 818 - range: 818,81c,820
** HOT: 824 - range: 824,828,82c,830,834,838,83c,840,844
** HOT: 828 - range: 828,82c,830,834,838,83c,840,844
** HOT: 848 - range: 848,84c,850
** HOT: 854 - range: 854,858,85c,860,864,868,86c,870,874
** HOT: 858 - range: 858,85c,860,864,868,86c,870,874
** HOT: 878 - range: 878,87c,880
** HOT: 884 - range: 884,888,88c,890,894
** HOT: 898 - range: 898,89c,8a0,8a4,8a8
** HOT: 8ac - range: 8ac,8b0,8b4,8b8
** HOT: 8bc - range: 8bc,8c0,8c4,8c8,8cc,8d0
