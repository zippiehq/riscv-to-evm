Running in EVM:
0	 0	PUSH4	02C0	 	 
- stack 0: 0x2C0
1	 5	PUSH2	03CB	 ;; _rambegin	 
- stack 1: 0x2C0
- stack 0: 0x3CB
2	 8	PUSH1	01	 	 
- stack 2: 0x2C0
- stack 1: 0x3CB
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x2C0
- stack 0: 0x3CC
4	 B	PUSH2	0400	 	 
- stack 2: 0x2C0
- stack 1: 0x3CC
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406B000530042006600000086000000A0000000C2000000DC0002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406B000530042006600000086000000A0000000C2000000DC0002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406B000530042006600000086000000A0000000C2000000DC000200F60264
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406B000530042006600000086000000A0000000C2000000DC000200F60264
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1712(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406B000530042006600000086000000A0000000C2000000DC000200F60264
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406B000530042006600000086000000A0000000C2000000DC000200F60264
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406B0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406B0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6B0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6B0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6B0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6B0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000C2000000DC000200F6026400860001
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000C2000000DC000200F6026400860001
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000C2000000DC000200F602640086000100A00001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000C2000000DC000200F602640086000100A00001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_1ee132391ba830adaa71288c21e192c5ca4bf879569b8cdf9f4268c29d372128	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_1ee132391ba830adaa71288c21e192c5ca4bf879569b8cdf9f4268c29d372128	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6B0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000C2000000DC000200F602640086000100A0000100C20000
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000C2000000DC000200F602640086000100A0000100C20000
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000C2000000DC000200F602640086000100A0000100C20000
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000C2000000DC000200F602640086000100A0000100C20000
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000C2000000DC000200F602640086000100A0000100C2000000DC0003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000C2000000DC000200F602640086000100A0000100C2000000DC0003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000C2000000DC000200F602640086000100A0000100C2000000DC0003
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000C2000000DC000200F602640086000100A0000100C2000000DC0003
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x20
103	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x0
104	 B1	PUSH1	03	 	 
- stack 3: 0x414
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x3
105	 B3	SIGNEXTEND		 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x0
106	 B4	SLT		 	 
- stack 1: 0x414
- stack 0: 0x0
107	 B5	PUSH2	0060	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x60
108	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x414
109	 B9	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
110	 BB	ADD		 	 
- stack 0: 0x418
111	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
112	 BD	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xC2000000DC000200F602640086000100A0000100C2000000DC000300F60250
113	 BE	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xC2000000DC000200F602640086000100A0000100C2000000DC000300F60250
- stack 0: 0xF0
114	 C0	SHR		 	 
- stack 1: 0x418
- stack 0: 0xC2
115	 C1	JUMP		 	 
- stack 0: 0x418
116	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x418
117	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
118	 C4	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xC2000000DC000200F602640086000100A0000100C2000000DC000300F60250
119	 C5	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xC2000000DC000200F602640086000100A0000100C2000000DC000300F60250
- stack 0: 0xE0
120	 C7	SHR		 	 
- stack 1: 0x418
- stack 0: 0xC20000
121	 C8	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xC20000
- stack 0: 0xFFFF
122	 CB	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
123	 CC	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
124	 CE	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
125	 CF	PUSH2	03A0	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x3A0
126	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x418
127	 D3	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
128	 D5	ADD		 	 
- stack 0: 0x41C
129	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
130	 D7	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDC000200F602640086000100A0000100C2000000DC000300F6025000860003
131	 D8	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xDC000200F602640086000100A0000100C2000000DC000300F6025000860003
- stack 0: 0xF0
132	 DA	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDC
133	 DB	JUMP		 	 
- stack 0: 0x41C
134	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x41C
135	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
136	 DE	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xDC000200F602640086000100A0000100C2000000DC000300F6025000860003
137	 DF	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xDC000200F602640086000100A0000100C2000000DC000300F6025000860003
- stack 0: 0xE0
138	 E1	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xDC0002
139	 E2	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xDC0002
- stack 0: 0xFFFF
140	 E5	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
141	 E6	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
142	 E8	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
143	 E9	PUSH2	0380	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x380
144	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x41C
145	 ED	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
146	 EF	ADD		 	 
- stack 0: 0x420
147	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
148	 F1	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF602640086000100A0000100C2000000DC000300F602500086000300A00007
149	 F2	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF602640086000100A0000100C2000000DC000300F602500086000300A00007
- stack 0: 0xF0
150	 F4	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF6
151	 F5	JUMP		 	 
- stack 0: 0x420
152	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x420
153	 F7	PUSH2	0060	 	 
- stack 1: 0x420
- stack 0: 0x60
154	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x420
- stack 0: 0x0
155	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
156	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x0
157	 101	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x3A0
158	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
159	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
160	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
161	 10B	SUB		 	 
- stack 1: 0x420
- stack 0: 0x0
162	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x114
163	 10F	JUMPI		 	 
- stack 0: 0x420
164	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x420
- stack 0: 0x12E
165	 113	JUMP		 	 
- stack 0: 0x420
166	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x420
167	 12F	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
168	 131	ADD		 	 
- stack 0: 0x424
169	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
170	 133	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100C2000000DC000300F602500086000300A0000700C20001
171	 134	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100C2000000DC000300F602500086000300A0000700C20001
- stack 0: 0xF0
172	 136	SHR		 	 
- stack 1: 0x424
- stack 0: 0x86
173	 137	JUMP		 	 
- stack 0: 0x424
174	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x424
175	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
176	 88	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86000100A0000100C2000000DC000300F602500086000300A0000700C20001
177	 89	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x86000100A0000100C2000000DC000300F602500086000300A0000700C20001
- stack 0: 0xE0
178	 8B	SHR		 	 
- stack 1: 0x424
- stack 0: 0x860001
179	 8C	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x860001
- stack 0: 0xFFFF
180	 8F	AND		 	 
- stack 1: 0x424
- stack 0: 0x1
181	 90	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x1
182	 92	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x1
183	 93	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0x1
- stack 0: 0x20
184	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
185	 97	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
186	 99	ADD		 	 
- stack 0: 0x428
187	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
188	 9B	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA0000100C2000000DC000300F602500086000300A0000700C2000100DC0004
189	 9C	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xA0000100C2000000DC000300F602500086000300A0000700C2000100DC0004
- stack 0: 0xF0
190	 9E	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA0
191	 9F	JUMP		 	 
- stack 0: 0x428
192	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x428
193	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
194	 A2	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA0000100C2000000DC000300F602500086000300A0000700C2000100DC0004
195	 A3	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0xA0000100C2000000DC000300F602500086000300A0000700C2000100DC0004
- stack 0: 0xE0
196	 A5	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA00001
197	 A6	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0xA00001
- stack 0: 0xFFFF
198	 A9	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
199	 AA	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
200	 AC	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
201	 AD	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
202	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
203	 B1	PUSH1	03	 	 
- stack 3: 0x428
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0x3
204	 B3	SIGNEXTEND		 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
205	 B4	SLT		 	 
- stack 1: 0x428
- stack 0: 0x0
206	 B5	PUSH2	0060	 	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x60
207	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x428
208	 B9	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
209	 BB	ADD		 	 
- stack 0: 0x42C
210	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
211	 BD	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xC2000000DC000300F602500086000300A0000700C2000100DC000400F6023C
212	 BE	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xC2000000DC000300F602500086000300A0000700C2000100DC000400F6023C
- stack 0: 0xF0
213	 C0	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xC2
214	 C1	JUMP		 	 
- stack 0: 0x42C
215	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x42C
216	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
217	 C4	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xC2000000DC000300F602500086000300A0000700C2000100DC000400F6023C
218	 C5	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xC2000000DC000300F602500086000300A0000700C2000100DC000400F6023C
- stack 0: 0xE0
219	 C7	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xC20000
220	 C8	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xC20000
- stack 0: 0xFFFF
221	 CB	AND		 	 
- stack 1: 0x42C
- stack 0: 0x0
222	 CC	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x0
- stack 0: 0x1
223	 CE	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x0
224	 CF	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0x0
- stack 0: 0x3A0
225	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
226	 D3	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
227	 D5	ADD		 	 
- stack 0: 0x430
228	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
229	 D7	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xDC000300F602500086000300A0000700C2000100DC000400F6023C00860007
230	 D8	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xDC000300F602500086000300A0000700C2000100DC000400F6023C00860007
- stack 0: 0xF0
231	 DA	SHR		 	 
- stack 1: 0x430
- stack 0: 0xDC
232	 DB	JUMP		 	 
- stack 0: 0x430
233	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
234	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
235	 DE	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xDC000300F602500086000300A0000700C2000100DC000400F6023C00860007
236	 DF	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xDC000300F602500086000300A0000700C2000100DC000400F6023C00860007
- stack 0: 0xE0
237	 E1	SHR		 	 
- stack 1: 0x430
- stack 0: 0xDC0003
238	 E2	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xDC0003
- stack 0: 0xFFFF
239	 E5	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
240	 E6	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
241	 E8	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
242	 E9	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
243	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
244	 ED	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
245	 EF	ADD		 	 
- stack 0: 0x434
246	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
247	 F1	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xF602500086000300A0000700C2000100DC000400F6023C0086000700A00003
248	 F2	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xF602500086000300A0000700C2000100DC000400F6023C0086000700A00003
- stack 0: 0xF0
249	 F4	SHR		 	 
- stack 1: 0x434
- stack 0: 0xF6
250	 F5	JUMP		 	 
- stack 0: 0x434
251	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x434
252	 F7	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
253	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0x0
254	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
255	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x0
256	 101	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
257	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x0
258	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
259	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x0
260	 10B	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
261	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x114
262	 10F	JUMPI		 	 
- stack 0: 0x434
263	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x434
- stack 0: 0x12E
264	 113	JUMP		 	 
- stack 0: 0x434
265	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x434
266	 12F	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
267	 131	ADD		 	 
- stack 0: 0x438
268	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
269	 133	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000300A0000700C2000100DC000400F6023C0086000700A0000300C20000
270	 134	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x86000300A0000700C2000100DC000400F6023C0086000700A0000300C20000
- stack 0: 0xF0
271	 136	SHR		 	 
- stack 1: 0x438
- stack 0: 0x86
272	 137	JUMP		 	 
- stack 0: 0x438
273	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x438
274	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
275	 88	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86000300A0000700C2000100DC000400F6023C0086000700A0000300C20000
276	 89	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x86000300A0000700C2000100DC000400F6023C0086000700A0000300C20000
- stack 0: 0xE0
277	 8B	SHR		 	 
- stack 1: 0x438
- stack 0: 0x860003
278	 8C	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x860003
- stack 0: 0xFFFF
279	 8F	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
280	 90	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
281	 92	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
282	 93	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x20
283	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
284	 97	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
285	 99	ADD		 	 
- stack 0: 0x43C
286	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
287	 9B	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA0000700C2000100DC000400F6023C0086000700A0000300C2000000DC0005
288	 9C	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xA0000700C2000100DC000400F6023C0086000700A0000300C2000000DC0005
- stack 0: 0xF0
289	 9E	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA0
290	 9F	JUMP		 	 
- stack 0: 0x43C
291	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x43C
292	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
293	 A2	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA0000700C2000100DC000400F6023C0086000700A0000300C2000000DC0005
294	 A3	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xA0000700C2000100DC000400F6023C0086000700A0000300C2000000DC0005
- stack 0: 0xE0
295	 A5	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA00007
296	 A6	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xA00007
- stack 0: 0xFFFF
297	 A9	AND		 	 
- stack 1: 0x43C
- stack 0: 0x7
298	 AA	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x1
299	 AC	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x7
300	 AD	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x20
301	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x3
302	 B1	PUSH1	03	 	 
- stack 3: 0x43C
- stack 2: 0x7
- stack 1: 0x3
- stack 0: 0x3
303	 B3	SIGNEXTEND		 	 
- stack 2: 0x43C
- stack 1: 0x7
- stack 0: 0x3
304	 B4	SLT		 	 
- stack 1: 0x43C
- stack 0: 0x1
305	 B5	PUSH2	0060	 	 
- stack 2: 0x43C
- stack 1: 0x1
- stack 0: 0x60
306	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x43C
307	 B9	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
308	 BB	ADD		 	 
- stack 0: 0x440
309	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
310	 BD	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xC2000100DC000400F6023C0086000700A0000300C2000000DC000500F60228
311	 BE	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xC2000100DC000400F6023C0086000700A0000300C2000000DC000500F60228
- stack 0: 0xF0
312	 C0	SHR		 	 
- stack 1: 0x440
- stack 0: 0xC2
313	 C1	JUMP		 	 
- stack 0: 0x440
314	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x440
315	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
316	 C4	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xC2000100DC000400F6023C0086000700A0000300C2000000DC000500F60228
317	 C5	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xC2000100DC000400F6023C0086000700A0000300C2000000DC000500F60228
- stack 0: 0xE0
318	 C7	SHR		 	 
- stack 1: 0x440
- stack 0: 0xC20001
319	 C8	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xC20001
- stack 0: 0xFFFF
320	 CB	AND		 	 
- stack 1: 0x440
- stack 0: 0x1
321	 CC	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x1
- stack 0: 0x1
322	 CE	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x1
323	 CF	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0x1
- stack 0: 0x3A0
324	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
325	 D3	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
326	 D5	ADD		 	 
- stack 0: 0x444
327	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
328	 D7	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xDC000400F6023C0086000700A0000300C2000000DC000500F6022800860000
329	 D8	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xDC000400F6023C0086000700A0000300C2000000DC000500F6022800860000
- stack 0: 0xF0
330	 DA	SHR		 	 
- stack 1: 0x444
- stack 0: 0xDC
331	 DB	JUMP		 	 
- stack 0: 0x444
332	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x444
333	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
334	 DE	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xDC000400F6023C0086000700A0000300C2000000DC000500F6022800860000
335	 DF	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xDC000400F6023C0086000700A0000300C2000000DC000500F6022800860000
- stack 0: 0xE0
336	 E1	SHR		 	 
- stack 1: 0x444
- stack 0: 0xDC0004
337	 E2	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xDC0004
- stack 0: 0xFFFF
338	 E5	AND		 	 
- stack 1: 0x444
- stack 0: 0x4
339	 E6	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x1
340	 E8	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x4
341	 E9	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x380
342	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x444
343	 ED	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
344	 EF	ADD		 	 
- stack 0: 0x448
345	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
346	 F1	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF6023C0086000700A0000300C2000000DC000500F602280086000000A0F800
347	 F2	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xF6023C0086000700A0000300C2000000DC000500F602280086000000A0F800
- stack 0: 0xF0
348	 F4	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF6
349	 F5	JUMP		 	 
- stack 0: 0x448
350	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x448
351	 F7	PUSH2	0060	 	 
- stack 1: 0x448
- stack 0: 0x60
352	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x448
- stack 0: 0x1
353	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
354	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x1
355	 101	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x3A0
356	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
357	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
358	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0x1
- stack 0: 0x1
359	 10B	SUB		 	 
- stack 1: 0x448
- stack 0: 0x0
360	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x114
361	 10F	JUMPI		 	 
- stack 0: 0x448
362	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x448
- stack 0: 0x12E
363	 113	JUMP		 	 
- stack 0: 0x448
364	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x448
365	 12F	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
366	 131	ADD		 	 
- stack 0: 0x44C
367	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
368	 133	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000700A0000300C2000000DC000500F602280086000000A0F80000C20000
369	 134	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x86000700A0000300C2000000DC000500F602280086000000A0F80000C20000
- stack 0: 0xF0
370	 136	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x86
371	 137	JUMP		 	 
- stack 0: 0x44C
372	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x44C
373	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
374	 88	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x86000700A0000300C2000000DC000500F602280086000000A0F80000C20000
375	 89	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x86000700A0000300C2000000DC000500F602280086000000A0F80000C20000
- stack 0: 0xE0
376	 8B	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x860007
377	 8C	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x860007
- stack 0: 0xFFFF
378	 8F	AND		 	 
- stack 1: 0x44C
- stack 0: 0x7
379	 90	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0x7
- stack 0: 0x1
380	 92	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0x7
381	 93	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x7
- stack 0: 0x20
382	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
383	 97	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
384	 99	ADD		 	 
- stack 0: 0x450
385	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
386	 9B	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0000300C2000000DC000500F602280086000000A0F80000C2000000DC0006
387	 9C	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xA0000300C2000000DC000500F602280086000000A0F80000C2000000DC0006
- stack 0: 0xF0
388	 9E	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA0
389	 9F	JUMP		 	 
- stack 0: 0x450
390	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x450
391	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
392	 A2	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0000300C2000000DC000500F602280086000000A0F80000C2000000DC0006
393	 A3	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xA0000300C2000000DC000500F602280086000000A0F80000C2000000DC0006
- stack 0: 0xE0
394	 A5	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA00003
395	 A6	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xA00003
- stack 0: 0xFFFF
396	 A9	AND		 	 
- stack 1: 0x450
- stack 0: 0x3
397	 AA	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x1
398	 AC	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x3
399	 AD	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x20
400	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x7
401	 B1	PUSH1	03	 	 
- stack 3: 0x450
- stack 2: 0x3
- stack 1: 0x7
- stack 0: 0x3
402	 B3	SIGNEXTEND		 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x7
403	 B4	SLT		 	 
- stack 1: 0x450
- stack 0: 0x0
404	 B5	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0x0
- stack 0: 0x60
405	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
406	 B9	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
407	 BB	ADD		 	 
- stack 0: 0x454
408	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
409	 BD	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xC2000000DC000500F602280086000000A0F80000C2000000DC000600F60214
410	 BE	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xC2000000DC000500F602280086000000A0F80000C2000000DC000600F60214
- stack 0: 0xF0
411	 C0	SHR		 	 
- stack 1: 0x454
- stack 0: 0xC2
412	 C1	JUMP		 	 
- stack 0: 0x454
413	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x454
414	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
415	 C4	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xC2000000DC000500F602280086000000A0F80000C2000000DC000600F60214
416	 C5	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xC2000000DC000500F602280086000000A0F80000C2000000DC000600F60214
- stack 0: 0xE0
417	 C7	SHR		 	 
- stack 1: 0x454
- stack 0: 0xC20000
418	 C8	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xC20000
- stack 0: 0xFFFF
419	 CB	AND		 	 
- stack 1: 0x454
- stack 0: 0x0
420	 CC	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x1
421	 CE	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x0
422	 CF	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x3A0
423	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
424	 D3	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
425	 D5	ADD		 	 
- stack 0: 0x458
426	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
427	 D7	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xDC000500F602280086000000A0F80000C2000000DC000600F6021401380000
428	 D8	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xDC000500F602280086000000A0F80000C2000000DC000600F6021401380000
- stack 0: 0xF0
429	 DA	SHR		 	 
- stack 1: 0x458
- stack 0: 0xDC
430	 DB	JUMP		 	 
- stack 0: 0x458
431	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
432	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
433	 DE	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xDC000500F602280086000000A0F80000C2000000DC000600F6021401380000
434	 DF	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xDC000500F602280086000000A0F80000C2000000DC000600F6021401380000
- stack 0: 0xE0
435	 E1	SHR		 	 
- stack 1: 0x458
- stack 0: 0xDC0005
436	 E2	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xDC0005
- stack 0: 0xFFFF
437	 E5	AND		 	 
- stack 1: 0x458
- stack 0: 0x5
438	 E6	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x1
439	 E8	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x5
440	 E9	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x380
441	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
442	 ED	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
443	 EF	ADD		 	 
- stack 0: 0x45C
444	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
445	 F1	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xF602280086000000A0F80000C2000000DC000600F602140138000000A00000
446	 F2	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xF602280086000000A0F80000C2000000DC000600F602140138000000A00000
- stack 0: 0xF0
447	 F4	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xF6
448	 F5	JUMP		 	 
- stack 0: 0x45C
449	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x45C
450	 F7	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
451	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0x0
452	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
453	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0x0
454	 101	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x3A0
455	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x0
456	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
457	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x0
458	 10B	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
459	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x114
460	 10F	JUMPI		 	 
- stack 0: 0x45C
461	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x45C
- stack 0: 0x12E
462	 113	JUMP		 	 
- stack 0: 0x45C
463	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x45C
464	 12F	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
465	 131	ADD		 	 
- stack 0: 0x460
466	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
467	 133	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x86000000A0F80000C2000000DC000600F602140138000000A0000000C20001
468	 134	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x86000000A0F80000C2000000DC000600F602140138000000A0000000C20001
- stack 0: 0xF0
469	 136	SHR		 	 
- stack 1: 0x460
- stack 0: 0x86
470	 137	JUMP		 	 
- stack 0: 0x460
471	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x460
472	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
473	 88	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x86000000A0F80000C2000000DC000600F602140138000000A0000000C20001
474	 89	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x86000000A0F80000C2000000DC000600F602140138000000A0000000C20001
- stack 0: 0xE0
475	 8B	SHR		 	 
- stack 1: 0x460
- stack 0: 0x860000
476	 8C	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x860000
- stack 0: 0xFFFF
477	 8F	AND		 	 
- stack 1: 0x460
- stack 0: 0x0
478	 90	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x1
479	 92	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x0
480	 93	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x20
481	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
482	 97	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
483	 99	ADD		 	 
- stack 0: 0x464
484	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
485	 9B	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xA0F80000C2000000DC000600F602140138000000A0000000C2000100DC0007
486	 9C	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xA0F80000C2000000DC000600F602140138000000A0000000C2000100DC0007
- stack 0: 0xF0
487	 9E	SHR		 	 
- stack 1: 0x464
- stack 0: 0xA0
488	 9F	JUMP		 	 
- stack 0: 0x464
489	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x464
490	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
491	 A2	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xA0F80000C2000000DC000600F602140138000000A0000000C2000100DC0007
492	 A3	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xA0F80000C2000000DC000600F602140138000000A0000000C2000100DC0007
- stack 0: 0xE0
493	 A5	SHR		 	 
- stack 1: 0x464
- stack 0: 0xA0F800
494	 A6	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xA0F800
- stack 0: 0xFFFF
495	 A9	AND		 	 
- stack 1: 0x464
- stack 0: 0xF800
496	 AA	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xF800
- stack 0: 0x1
497	 AC	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
498	 AD	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
499	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x0
500	 B1	PUSH1	03	 	 
- stack 3: 0x464
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 1: 0x0
- stack 0: 0x3
501	 B3	SIGNEXTEND		 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x0
502	 B4	SLT		 	 
- stack 1: 0x464
- stack 0: 0x0
503	 B5	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x60
504	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
505	 B9	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
506	 BB	ADD		 	 
- stack 0: 0x468
507	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
508	 BD	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xC2000000DC000600F602140138000000A0000000C2000100DC000700F60200
509	 BE	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xC2000000DC000600F602140138000000A0000000C2000100DC000700F60200
- stack 0: 0xF0
510	 C0	SHR		 	 
- stack 1: 0x468
- stack 0: 0xC2
511	 C1	JUMP		 	 
- stack 0: 0x468
512	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x468
513	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
514	 C4	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xC2000000DC000600F602140138000000A0000000C2000100DC000700F60200
515	 C5	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xC2000000DC000600F602140138000000A0000000C2000100DC000700F60200
- stack 0: 0xE0
516	 C7	SHR		 	 
- stack 1: 0x468
- stack 0: 0xC20000
517	 C8	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xC20000
- stack 0: 0xFFFF
518	 CB	AND		 	 
- stack 1: 0x468
- stack 0: 0x0
519	 CC	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x1
520	 CE	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x0
521	 CF	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x0
- stack 0: 0x3A0
522	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
523	 D3	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
524	 D5	ADD		 	 
- stack 0: 0x46C
525	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
526	 D7	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xDC000600F602140138000000A0000000C2000100DC000700F6020001380000
527	 D8	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xDC000600F602140138000000A0000000C2000100DC000700F6020001380000
- stack 0: 0xF0
528	 DA	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xDC
529	 DB	JUMP		 	 
- stack 0: 0x46C
530	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x46C
531	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
532	 DE	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xDC000600F602140138000000A0000000C2000100DC000700F6020001380000
533	 DF	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xDC000600F602140138000000A0000000C2000100DC000700F6020001380000
- stack 0: 0xE0
534	 E1	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xDC0006
535	 E2	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xDC0006
- stack 0: 0xFFFF
536	 E5	AND		 	 
- stack 1: 0x46C
- stack 0: 0x6
537	 E6	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x1
538	 E8	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x6
539	 E9	PUSH2	0380	 	 
- stack 2: 0x46C
- stack 1: 0x6
- stack 0: 0x380
540	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x46C
541	 ED	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
542	 EF	ADD		 	 
- stack 0: 0x470
543	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
544	 F1	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xF602140138000000A0000000C2000100DC000700F602000138000000A0F800
545	 F2	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xF602140138000000A0000000C2000100DC000700F602000138000000A0F800
- stack 0: 0xF0
546	 F4	SHR		 	 
- stack 1: 0x470
- stack 0: 0xF6
547	 F5	JUMP		 	 
- stack 0: 0x470
548	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x470
549	 F7	PUSH2	0060	 	 
- stack 1: 0x470
- stack 0: 0x60
550	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x470
- stack 0: 0x0
551	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
552	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0x0
553	 101	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x3A0
554	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x0
555	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x470
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
556	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x0
557	 10B	SUB		 	 
- stack 1: 0x470
- stack 0: 0x0
558	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x470
- stack 1: 0x0
- stack 0: 0x114
559	 10F	JUMPI		 	 
- stack 0: 0x470
560	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x470
- stack 0: 0x12E
561	 113	JUMP		 	 
- stack 0: 0x470
562	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x470
563	 12F	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
564	 131	ADD		 	 
- stack 0: 0x474
565	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
566	 133	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x138000000A0000000C2000100DC000700F602000138000000A0F80000C20001
567	 134	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x138000000A0000000C2000100DC000700F602000138000000A0F80000C20001
- stack 0: 0xF0
568	 136	SHR		 	 
- stack 1: 0x474
- stack 0: 0x138
569	 137	JUMP		 	 
- stack 0: 0x474
570	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x474
571	 139	PUSH4	80000000	 	 
- stack 1: 0x474
- stack 0: 0x80000000
572	 13E	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x80000000
- stack 0: 0x20
573	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
574	 142	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
575	 144	ADD		 	 
- stack 0: 0x478
576	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
577	 146	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xA0000000C2000100DC000700F602000138000000A0F80000C2000100DC0008
578	 147	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xA0000000C2000100DC000700F602000138000000A0F80000C2000100DC0008
- stack 0: 0xF0
579	 149	SHR		 	 
- stack 1: 0x478
- stack 0: 0xA0
580	 14A	JUMP		 	 
- stack 0: 0x478
581	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x478
582	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
583	 A2	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xA0000000C2000100DC000700F602000138000000A0F80000C2000100DC0008
584	 A3	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0xA0000000C2000100DC000700F602000138000000A0F80000C2000100DC0008
- stack 0: 0xE0
585	 A5	SHR		 	 
- stack 1: 0x478
- stack 0: 0xA00000
586	 A6	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0xA00000
- stack 0: 0xFFFF
587	 A9	AND		 	 
- stack 1: 0x478
- stack 0: 0x0
588	 AA	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x1
589	 AC	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x0
590	 AD	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x20
591	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x80000000
592	 B1	PUSH1	03	 	 
- stack 3: 0x478
- stack 2: 0x0
- stack 1: 0x80000000
- stack 0: 0x3
593	 B3	SIGNEXTEND		 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
594	 B4	SLT		 	 
- stack 1: 0x478
- stack 0: 0x1
595	 B5	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x1
- stack 0: 0x60
596	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
597	 B9	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
598	 BB	ADD		 	 
- stack 0: 0x47C
599	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
600	 BD	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xC2000100DC000700F602000138000000A0F80000C2000100DC000800F601EC
601	 BE	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xC2000100DC000700F602000138000000A0F80000C2000100DC000800F601EC
- stack 0: 0xF0
602	 C0	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xC2
603	 C1	JUMP		 	 
- stack 0: 0x47C
604	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x47C
605	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
606	 C4	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xC2000100DC000700F602000138000000A0F80000C2000100DC000800F601EC
607	 C5	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xC2000100DC000700F602000138000000A0F80000C2000100DC000800F601EC
- stack 0: 0xE0
608	 C7	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xC20001
609	 C8	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xC20001
- stack 0: 0xFFFF
610	 CB	AND		 	 
- stack 1: 0x47C
- stack 0: 0x1
611	 CC	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0x1
612	 CE	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x1
613	 CF	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0x3A0
614	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
615	 D3	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
616	 D5	ADD		 	 
- stack 0: 0x480
617	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
618	 D7	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xDC000700F602000138000000A0F80000C2000100DC000800F601EC00860000
619	 D8	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xDC000700F602000138000000A0F80000C2000100DC000800F601EC00860000
- stack 0: 0xF0
620	 DA	SHR		 	 
- stack 1: 0x480
- stack 0: 0xDC
621	 DB	JUMP		 	 
- stack 0: 0x480
622	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
623	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
624	 DE	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xDC000700F602000138000000A0F80000C2000100DC000800F601EC00860000
625	 DF	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xDC000700F602000138000000A0F80000C2000100DC000800F601EC00860000
- stack 0: 0xE0
626	 E1	SHR		 	 
- stack 1: 0x480
- stack 0: 0xDC0007
627	 E2	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xDC0007
- stack 0: 0xFFFF
628	 E5	AND		 	 
- stack 1: 0x480
- stack 0: 0x7
629	 E6	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x7
- stack 0: 0x1
630	 E8	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x7
631	 E9	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x7
- stack 0: 0x380
632	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
633	 ED	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
634	 EF	ADD		 	 
- stack 0: 0x484
635	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
636	 F1	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xF602000138000000A0F80000C2000100DC000800F601EC0086000000A007FF
637	 F2	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xF602000138000000A0F80000C2000100DC000800F601EC0086000000A007FF
- stack 0: 0xF0
638	 F4	SHR		 	 
- stack 1: 0x484
- stack 0: 0xF6
639	 F5	JUMP		 	 
- stack 0: 0x484
640	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x484
641	 F7	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
642	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0x1
643	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
644	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x1
645	 101	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x1
- stack 0: 0x3A0
646	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0x1
- stack 0: 0x1
647	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
648	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x1
- stack 0: 0x1
649	 10B	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
650	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x114
651	 10F	JUMPI		 	 
- stack 0: 0x484
652	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x484
- stack 0: 0x12E
653	 113	JUMP		 	 
- stack 0: 0x484
654	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x484
655	 12F	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
656	 131	ADD		 	 
- stack 0: 0x488
657	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
658	 133	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x138000000A0F80000C2000100DC000800F601EC0086000000A007FF00C20001
659	 134	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x138000000A0F80000C2000100DC000800F601EC0086000000A007FF00C20001
- stack 0: 0xF0
660	 136	SHR		 	 
- stack 1: 0x488
- stack 0: 0x138
661	 137	JUMP		 	 
- stack 0: 0x488
662	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x488
663	 139	PUSH4	80000000	 	 
- stack 1: 0x488
- stack 0: 0x80000000
664	 13E	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x80000000
- stack 0: 0x20
665	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
666	 142	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
667	 144	ADD		 	 
- stack 0: 0x48C
668	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
669	 146	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0F80000C2000100DC000800F601EC0086000000A007FF00C2000100DC0009
670	 147	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xA0F80000C2000100DC000800F601EC0086000000A007FF00C2000100DC0009
- stack 0: 0xF0
671	 149	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA0
672	 14A	JUMP		 	 
- stack 0: 0x48C
673	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x48C
674	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
675	 A2	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xA0F80000C2000100DC000800F601EC0086000000A007FF00C2000100DC0009
676	 A3	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0xA0F80000C2000100DC000800F601EC0086000000A007FF00C2000100DC0009
- stack 0: 0xE0
677	 A5	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xA0F800
678	 A6	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0xA0F800
- stack 0: 0xFFFF
679	 A9	AND		 	 
- stack 1: 0x48C
- stack 0: 0xF800
680	 AA	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xF800
- stack 0: 0x1
681	 AC	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
682	 AD	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
683	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x80000000
684	 B1	PUSH1	03	 	 
- stack 3: 0x48C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 1: 0x80000000
- stack 0: 0x3
685	 B3	SIGNEXTEND		 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
686	 B4	SLT		 	 
- stack 1: 0x48C
- stack 0: 0x1
687	 B5	PUSH2	0060	 	 
- stack 2: 0x48C
- stack 1: 0x1
- stack 0: 0x60
688	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x48C
689	 B9	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
690	 BB	ADD		 	 
- stack 0: 0x490
691	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
692	 BD	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xC2000100DC000800F601EC0086000000A007FF00C2000100DC000900F601D8
693	 BE	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xC2000100DC000800F601EC0086000000A007FF00C2000100DC000900F601D8
- stack 0: 0xF0
694	 C0	SHR		 	 
- stack 1: 0x490
- stack 0: 0xC2
695	 C1	JUMP		 	 
- stack 0: 0x490
696	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x490
697	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
698	 C4	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xC2000100DC000800F601EC0086000000A007FF00C2000100DC000900F601D8
699	 C5	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xC2000100DC000800F601EC0086000000A007FF00C2000100DC000900F601D8
- stack 0: 0xE0
700	 C7	SHR		 	 
- stack 1: 0x490
- stack 0: 0xC20001
701	 C8	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xC20001
- stack 0: 0xFFFF
702	 CB	AND		 	 
- stack 1: 0x490
- stack 0: 0x1
703	 CC	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x1
704	 CE	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x1
705	 CF	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0x1
- stack 0: 0x3A0
706	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
707	 D3	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
708	 D5	ADD		 	 
- stack 0: 0x494
709	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
710	 D7	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDC000800F601EC0086000000A007FF00C2000100DC000900F601D801380000
711	 D8	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xDC000800F601EC0086000000A007FF00C2000100DC000900F601D801380000
- stack 0: 0xF0
712	 DA	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDC
713	 DB	JUMP		 	 
- stack 0: 0x494
714	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x494
715	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
716	 DE	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xDC000800F601EC0086000000A007FF00C2000100DC000900F601D801380000
717	 DF	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xDC000800F601EC0086000000A007FF00C2000100DC000900F601D801380000
- stack 0: 0xE0
718	 E1	SHR		 	 
- stack 1: 0x494
- stack 0: 0xDC0008
719	 E2	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xDC0008
- stack 0: 0xFFFF
720	 E5	AND		 	 
- stack 1: 0x494
- stack 0: 0x8
721	 E6	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x8
- stack 0: 0x1
722	 E8	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x8
723	 E9	PUSH2	0380	 	 
- stack 2: 0x494
- stack 1: 0x8
- stack 0: 0x380
724	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x494
725	 ED	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
726	 EF	ADD		 	 
- stack 0: 0x498
727	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
728	 F1	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xF601EC0086000000A007FF00C2000100DC000900F601D801380000014BFFFF
729	 F2	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xF601EC0086000000A007FF00C2000100DC000900F601D801380000014BFFFF
- stack 0: 0xF0
730	 F4	SHR		 	 
- stack 1: 0x498
- stack 0: 0xF6
731	 F5	JUMP		 	 
- stack 0: 0x498
732	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x498
733	 F7	PUSH2	0060	 	 
- stack 1: 0x498
- stack 0: 0x60
734	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x498
- stack 0: 0x1
735	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
736	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0x1
737	 101	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x3A0
738	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x1
739	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
740	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0x1
- stack 0: 0x1
741	 10B	SUB		 	 
- stack 1: 0x498
- stack 0: 0x0
742	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x114
743	 10F	JUMPI		 	 
- stack 0: 0x498
744	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x498
- stack 0: 0x12E
745	 113	JUMP		 	 
- stack 0: 0x498
746	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x498
747	 12F	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
748	 131	ADD		 	 
- stack 0: 0x49C
749	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
750	 133	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x86000000A007FF00C2000100DC000900F601D801380000014BFFFF00A00000
751	 134	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x86000000A007FF00C2000100DC000900F601D801380000014BFFFF00A00000
- stack 0: 0xF0
752	 136	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x86
753	 137	JUMP		 	 
- stack 0: 0x49C
754	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x49C
755	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
756	 88	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x86000000A007FF00C2000100DC000900F601D801380000014BFFFF00A00000
757	 89	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x86000000A007FF00C2000100DC000900F601D801380000014BFFFF00A00000
- stack 0: 0xE0
758	 8B	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x860000
759	 8C	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x860000
- stack 0: 0xFFFF
760	 8F	AND		 	 
- stack 1: 0x49C
- stack 0: 0x0
761	 90	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x1
762	 92	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x0
763	 93	PUSH2	0020	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x20
764	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x49C
765	 97	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
766	 99	ADD		 	 
- stack 0: 0x4A0
767	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
768	 9B	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xA007FF00C2000100DC000900F601D801380000014BFFFF00A0000000C20000
769	 9C	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0xA007FF00C2000100DC000900F601D801380000014BFFFF00A0000000C20000
- stack 0: 0xF0
770	 9E	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xA0
771	 9F	JUMP		 	 
- stack 0: 0x4A0
772	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x4A0
773	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
774	 A2	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xA007FF00C2000100DC000900F601D801380000014BFFFF00A0000000C20000
775	 A3	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0xA007FF00C2000100DC000900F601D801380000014BFFFF00A0000000C20000
- stack 0: 0xE0
776	 A5	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xA007FF
777	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0xA007FF
- stack 0: 0xFFFF
778	 A9	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x7FF
779	 AA	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x7FF
- stack 0: 0x1
780	 AC	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x7FF
781	 AD	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x7FF
- stack 0: 0x20
782	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A0
- stack 1: 0x7FF
- stack 0: 0x0
783	 B1	PUSH1	03	 	 
- stack 3: 0x4A0
- stack 2: 0x7FF
- stack 1: 0x0
- stack 0: 0x3
784	 B3	SIGNEXTEND		 	 
- stack 2: 0x4A0
- stack 1: 0x7FF
- stack 0: 0x0
785	 B4	SLT		 	 
- stack 1: 0x4A0
- stack 0: 0x1
786	 B5	PUSH2	0060	 	 
- stack 2: 0x4A0
- stack 1: 0x1
- stack 0: 0x60
787	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A0
788	 B9	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
789	 BB	ADD		 	 
- stack 0: 0x4A4
790	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
791	 BD	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xC2000100DC000900F601D801380000014BFFFF00A0000000C2000000DC000A
792	 BE	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xC2000100DC000900F601D801380000014BFFFF00A0000000C2000000DC000A
- stack 0: 0xF0
793	 C0	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xC2
794	 C1	JUMP		 	 
- stack 0: 0x4A4
795	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4A4
796	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
797	 C4	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xC2000100DC000900F601D801380000014BFFFF00A0000000C2000000DC000A
798	 C5	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xC2000100DC000900F601D801380000014BFFFF00A0000000C2000000DC000A
- stack 0: 0xE0
799	 C7	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xC20001
800	 C8	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xC20001
- stack 0: 0xFFFF
801	 CB	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x1
802	 CC	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x1
803	 CE	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x1
804	 CF	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0x1
- stack 0: 0x3A0
805	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
806	 D3	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
807	 D5	ADD		 	 
- stack 0: 0x4A8
808	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
809	 D7	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xDC000900F601D801380000014BFFFF00A0000000C2000000DC000A00F601C0
810	 D8	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xDC000900F601D801380000014BFFFF00A0000000C2000000DC000A00F601C0
- stack 0: 0xF0
811	 DA	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xDC
812	 DB	JUMP		 	 
- stack 0: 0x4A8
813	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
814	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
815	 DE	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xDC000900F601D801380000014BFFFF00A0000000C2000000DC000A00F601C0
816	 DF	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xDC000900F601D801380000014BFFFF00A0000000C2000000DC000A00F601C0
- stack 0: 0xE0
817	 E1	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xDC0009
818	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xDC0009
- stack 0: 0xFFFF
819	 E5	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x9
820	 E6	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x9
- stack 0: 0x1
821	 E8	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x9
822	 E9	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x9
- stack 0: 0x380
823	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
824	 ED	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
825	 EF	ADD		 	 
- stack 0: 0x4AC
826	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
827	 F1	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xF601D801380000014BFFFF00A0000000C2000000DC000A00F601C001380000
828	 F2	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xF601D801380000014BFFFF00A0000000C2000000DC000A00F601C001380000
- stack 0: 0xF0
829	 F4	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xF6
830	 F5	JUMP		 	 
- stack 0: 0x4AC
831	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x4AC
832	 F7	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
833	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0x1
834	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
835	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0x1
836	 101	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x3A0
837	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
838	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
839	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0x1
- stack 0: 0x1
840	 10B	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
841	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x114
842	 10F	JUMPI		 	 
- stack 0: 0x4AC
843	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x4AC
- stack 0: 0x12E
844	 113	JUMP		 	 
- stack 0: 0x4AC
845	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x4AC
846	 12F	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
847	 131	ADD		 	 
- stack 0: 0x4B0
848	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
849	 133	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1380000014BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF
850	 134	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1380000014BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF
- stack 0: 0xF0
851	 136	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x138
852	 137	JUMP		 	 
- stack 0: 0x4B0
853	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4B0
854	 139	PUSH4	80000000	 	 
- stack 1: 0x4B0
- stack 0: 0x80000000
855	 13E	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x80000000
- stack 0: 0x20
856	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
857	 142	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
858	 144	ADD		 	 
- stack 0: 0x4B4
859	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
860	 146	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x14BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF00A007FF
861	 147	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x14BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF00A007FF
- stack 0: 0xF0
862	 149	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x14B
863	 14A	JUMP		 	 
- stack 0: 0x4B4
864	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4B4
865	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
866	 14D	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x14BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF00A007FF
867	 14E	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x14BFFFF00A0000000C2000000DC000A00F601C001380000014BFFFF00A007FF
- stack 0: 0xE0
868	 150	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x14BFFFF
869	 151	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x14BFFFF
- stack 0: 0xFFFF
870	 154	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFF
871	 155	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF
- stack 0: 0x1
872	 157	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
873	 158	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
874	 15B	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
875	 15C	ADD		 	  ;; # ADDI 1
- stack 1: 0x4B4
- stack 0: 0x7FFFFFFF
876	 15D	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
877	 160	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
878	 161	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
879	 163	ADD		 	 
- stack 0: 0x4B8
880	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
881	 165	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xA0000000C2000000DC000A00F601C001380000014BFFFF00A007FF00C20000
882	 166	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xA0000000C2000000DC000A00F601C001380000014BFFFF00A007FF00C20000
- stack 0: 0xF0
883	 168	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xA0
884	 169	JUMP		 	 
- stack 0: 0x4B8
885	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x4B8
886	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
887	 A2	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xA0000000C2000000DC000A00F601C001380000014BFFFF00A007FF00C20000
888	 A3	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0xA0000000C2000000DC000A00F601C001380000014BFFFF00A007FF00C20000
- stack 0: 0xE0
889	 A5	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xA00000
890	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xA00000
- stack 0: 0xFFFF
891	 A9	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
892	 AA	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x1
893	 AC	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x0
894	 AD	PUSH2	0020	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x20
895	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
896	 B1	PUSH1	03	 	 
- stack 3: 0x4B8
- stack 2: 0x0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
897	 B3	SIGNEXTEND		 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
898	 B4	SLT		 	 
- stack 1: 0x4B8
- stack 0: 0x0
899	 B5	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x60
900	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
901	 B9	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
902	 BB	ADD		 	 
- stack 0: 0x4BC
903	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
904	 BD	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xC2000000DC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B
905	 BE	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xC2000000DC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B
- stack 0: 0xF0
906	 C0	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xC2
907	 C1	JUMP		 	 
- stack 0: 0x4BC
908	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4BC
909	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
910	 C4	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xC2000000DC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B
911	 C5	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xC2000000DC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B
- stack 0: 0xE0
912	 C7	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xC20000
913	 C8	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xC20000
- stack 0: 0xFFFF
914	 CB	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
915	 CC	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x1
916	 CE	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x0
917	 CF	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x3A0
918	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
919	 D3	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
920	 D5	ADD		 	 
- stack 0: 0x4C0
921	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
922	 D7	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xDC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B00F601A8
923	 D8	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xDC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B00F601A8
- stack 0: 0xF0
924	 DA	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xDC
925	 DB	JUMP		 	 
- stack 0: 0x4C0
926	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C0
927	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
928	 DE	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xDC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B00F601A8
929	 DF	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xDC000A00F601C001380000014BFFFF00A007FF00C2000000DC000B00F601A8
- stack 0: 0xE0
930	 E1	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xDC000A
931	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xDC000A
- stack 0: 0xFFFF
932	 E5	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xA
933	 E6	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xA
- stack 0: 0x1
934	 E8	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xA
935	 E9	PUSH2	0380	 	 
- stack 2: 0x4C0
- stack 1: 0xA
- stack 0: 0x380
936	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C0
937	 ED	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
938	 EF	ADD		 	 
- stack 0: 0x4C4
939	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
940	 F1	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xF601C001380000014BFFFF00A007FF00C2000000DC000B00F601A801380000
941	 F2	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xF601C001380000014BFFFF00A007FF00C2000000DC000B00F601A801380000
- stack 0: 0xF0
942	 F4	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xF6
943	 F5	JUMP		 	 
- stack 0: 0x4C4
944	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x4C4
945	 F7	PUSH2	0060	 	 
- stack 1: 0x4C4
- stack 0: 0x60
946	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C4
- stack 0: 0x0
947	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
948	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x0
949	 101	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x3A0
950	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x0
951	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
952	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x0
953	 10B	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x0
954	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x114
955	 10F	JUMPI		 	 
- stack 0: 0x4C4
956	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x4C4
- stack 0: 0x12E
957	 113	JUMP		 	 
- stack 0: 0x4C4
958	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x4C4
959	 12F	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
960	 131	ADD		 	 
- stack 0: 0x4C8
961	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
962	 133	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1380000014BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF
963	 134	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1380000014BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF
- stack 0: 0xF0
964	 136	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x138
965	 137	JUMP		 	 
- stack 0: 0x4C8
966	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4C8
967	 139	PUSH4	80000000	 	 
- stack 1: 0x4C8
- stack 0: 0x80000000
968	 13E	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0x80000000
- stack 0: 0x20
969	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
970	 142	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
971	 144	ADD		 	 
- stack 0: 0x4CC
972	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
973	 146	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x14BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF00C20001
974	 147	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x14BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF00C20001
- stack 0: 0xF0
975	 149	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x14B
976	 14A	JUMP		 	 
- stack 0: 0x4CC
977	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4CC
978	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
979	 14D	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x14BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF00C20001
980	 14E	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x14BFFFF00A007FF00C2000000DC000B00F601A80138000000A007FF00C20001
- stack 0: 0xE0
981	 150	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x14BFFFF
982	 151	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x14BFFFF
- stack 0: 0xFFFF
983	 154	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFF
984	 155	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFF
- stack 0: 0x1
985	 157	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
986	 158	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
987	 15B	MLOAD		 	  ;; # read from x1
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
988	 15C	ADD		 	  ;; # ADDI 1
- stack 1: 0x4CC
- stack 0: 0x7FFFFFFF
989	 15D	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
990	 160	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
991	 161	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
992	 163	ADD		 	 
- stack 0: 0x4D0
993	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
994	 165	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xA007FF00C2000000DC000B00F601A80138000000A007FF00C2000100DC000C
995	 166	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xA007FF00C2000000DC000B00F601A80138000000A007FF00C2000100DC000C
- stack 0: 0xF0
996	 168	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xA0
997	 169	JUMP		 	 
- stack 0: 0x4D0
998	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x4D0
999	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1000	 A2	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xA007FF00C2000000DC000B00F601A80138000000A007FF00C2000100DC000C
1001	 A3	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xA007FF00C2000000DC000B00F601A80138000000A007FF00C2000100DC000C
- stack 0: 0xE0
1002	 A5	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xA007FF
1003	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xA007FF
- stack 0: 0xFFFF
1004	 A9	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x7FF
1005	 AA	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x7FF
- stack 0: 0x1
1006	 AC	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x7FF
1007	 AD	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x7FF
- stack 0: 0x20
1008	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0x7FF
- stack 0: 0x7FFFFFFF
1009	 B1	PUSH1	03	 	 
- stack 3: 0x4D0
- stack 2: 0x7FF
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1010	 B3	SIGNEXTEND		 	 
- stack 2: 0x4D0
- stack 1: 0x7FF
- stack 0: 0x7FFFFFFF
1011	 B4	SLT		 	 
- stack 1: 0x4D0
- stack 0: 0x0
1012	 B5	PUSH2	0060	 	 
- stack 2: 0x4D0
- stack 1: 0x0
- stack 0: 0x60
1013	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D0
1014	 B9	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1015	 BB	ADD		 	 
- stack 0: 0x4D4
1016	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1017	 BD	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xC2000000DC000B00F601A80138000000A007FF00C2000100DC000C00F60194
1018	 BE	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xC2000000DC000B00F601A80138000000A007FF00C2000100DC000C00F60194
- stack 0: 0xF0
1019	 C0	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xC2
1020	 C1	JUMP		 	 
- stack 0: 0x4D4
1021	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4D4
1022	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1023	 C4	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xC2000000DC000B00F601A80138000000A007FF00C2000100DC000C00F60194
1024	 C5	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0xC2000000DC000B00F601A80138000000A007FF00C2000100DC000C00F60194
- stack 0: 0xE0
1025	 C7	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xC20000
1026	 C8	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xC20000
- stack 0: 0xFFFF
1027	 CB	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1028	 CC	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x1
1029	 CE	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1030	 CF	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x3A0
1031	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
1032	 D3	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1033	 D5	ADD		 	 
- stack 0: 0x4D8
1034	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1035	 D7	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xDC000B00F601A80138000000A007FF00C2000100DC000C00F6019401380000
1036	 D8	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xDC000B00F601A80138000000A007FF00C2000100DC000C00F6019401380000
- stack 0: 0xF0
1037	 DA	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xDC
1038	 DB	JUMP		 	 
- stack 0: 0x4D8
1039	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D8
1040	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1041	 DE	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xDC000B00F601A80138000000A007FF00C2000100DC000C00F6019401380000
1042	 DF	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xDC000B00F601A80138000000A007FF00C2000100DC000C00F6019401380000
- stack 0: 0xE0
1043	 E1	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xDC000B
1044	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xDC000B
- stack 0: 0xFFFF
1045	 E5	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xB
1046	 E6	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xB
- stack 0: 0x1
1047	 E8	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xB
1048	 E9	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0xB
- stack 0: 0x380
1049	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D8
1050	 ED	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1051	 EF	ADD		 	 
- stack 0: 0x4DC
1052	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1053	 F1	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xF601A80138000000A007FF00C2000100DC000C00F6019401380000014BFFFF
1054	 F2	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xF601A80138000000A007FF00C2000100DC000C00F6019401380000014BFFFF
- stack 0: 0xF0
1055	 F4	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xF6
1056	 F5	JUMP		 	 
- stack 0: 0x4DC
1057	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x4DC
1058	 F7	PUSH2	0060	 	 
- stack 1: 0x4DC
- stack 0: 0x60
1059	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4DC
- stack 0: 0x0
1060	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1061	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x0
1062	 101	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x3A0
1063	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x0
1064	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1065	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x0
1066	 10B	SUB		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1067	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x114
1068	 10F	JUMPI		 	 
- stack 0: 0x4DC
1069	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x4DC
- stack 0: 0x12E
1070	 113	JUMP		 	 
- stack 0: 0x4DC
1071	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x4DC
1072	 12F	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1073	 131	ADD		 	 
- stack 0: 0x4E0
1074	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1075	 133	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x138000000A007FF00C2000100DC000C00F6019401380000014BFFFF00A0F800
1076	 134	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x138000000A007FF00C2000100DC000C00F6019401380000014BFFFF00A0F800
- stack 0: 0xF0
1077	 136	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x138
1078	 137	JUMP		 	 
- stack 0: 0x4E0
1079	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4E0
1080	 139	PUSH4	80000000	 	 
- stack 1: 0x4E0
- stack 0: 0x80000000
1081	 13E	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x80000000
- stack 0: 0x20
1082	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E0
1083	 142	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1084	 144	ADD		 	 
- stack 0: 0x4E4
1085	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1086	 146	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xA007FF00C2000100DC000C00F6019401380000014BFFFF00A0F80000C20000
1087	 147	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xA007FF00C2000100DC000C00F6019401380000014BFFFF00A0F80000C20000
- stack 0: 0xF0
1088	 149	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xA0
1089	 14A	JUMP		 	 
- stack 0: 0x4E4
1090	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x4E4
1091	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1092	 A2	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xA007FF00C2000100DC000C00F6019401380000014BFFFF00A0F80000C20000
1093	 A3	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xA007FF00C2000100DC000C00F6019401380000014BFFFF00A0F80000C20000
- stack 0: 0xE0
1094	 A5	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xA007FF
1095	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xA007FF
- stack 0: 0xFFFF
1096	 A9	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x7FF
1097	 AA	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x1
1098	 AC	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x7FF
1099	 AD	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x20
1100	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0x80000000
1101	 B1	PUSH1	03	 	 
- stack 3: 0x4E4
- stack 2: 0x7FF
- stack 1: 0x80000000
- stack 0: 0x3
1102	 B3	SIGNEXTEND		 	 
- stack 2: 0x4E4
- stack 1: 0x7FF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
1103	 B4	SLT		 	 
- stack 1: 0x4E4
- stack 0: 0x1
1104	 B5	PUSH2	0060	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x60
1105	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4E4
1106	 B9	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1107	 BB	ADD		 	 
- stack 0: 0x4E8
1108	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1109	 BD	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xC2000100DC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D
1110	 BE	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xC2000100DC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D
- stack 0: 0xF0
1111	 C0	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xC2
1112	 C1	JUMP		 	 
- stack 0: 0x4E8
1113	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4E8
1114	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1115	 C4	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xC2000100DC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D
1116	 C5	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0xC2000100DC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D
- stack 0: 0xE0
1117	 C7	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xC20001
1118	 C8	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xC20001
- stack 0: 0xFFFF
1119	 CB	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1120	 CC	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x1
1121	 CE	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1122	 CF	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x3A0
1123	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E8
1124	 D3	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1125	 D5	ADD		 	 
- stack 0: 0x4EC
1126	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1127	 D7	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C
1128	 D8	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C
- stack 0: 0xF0
1129	 DA	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xDC
1130	 DB	JUMP		 	 
- stack 0: 0x4EC
1131	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4EC
1132	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1133	 DE	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C
1134	 DF	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C00F6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C
- stack 0: 0xE0
1135	 E1	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xDC000C
1136	 E2	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xDC000C
- stack 0: 0xFFFF
1137	 E5	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xC
1138	 E6	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xC
- stack 0: 0x1
1139	 E8	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xC
1140	 E9	PUSH2	0380	 	 
- stack 2: 0x4EC
- stack 1: 0xC
- stack 0: 0x380
1141	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x4EC
1142	 ED	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1143	 EF	ADD		 	 
- stack 0: 0x4F0
1144	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1145	 F1	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xF6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C00860000
1146	 F2	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xF6019401380000014BFFFF00A0F80000C2000000DC000D00F6017C00860000
- stack 0: 0xF0
1147	 F4	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xF6
1148	 F5	JUMP		 	 
- stack 0: 0x4F0
1149	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x4F0
1150	 F7	PUSH2	0060	 	 
- stack 1: 0x4F0
- stack 0: 0x60
1151	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x4F0
- stack 0: 0x1
1152	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1153	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0x1
1154	 101	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x3A0
1155	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x1
1156	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1157	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x1
1158	 10B	SUB		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1159	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x114
1160	 10F	JUMPI		 	 
- stack 0: 0x4F0
1161	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x4F0
- stack 0: 0x12E
1162	 113	JUMP		 	 
- stack 0: 0x4F0
1163	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x4F0
1164	 12F	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1165	 131	ADD		 	 
- stack 0: 0x4F4
1166	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1167	 133	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1380000014BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF
1168	 134	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1380000014BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF
- stack 0: 0xF0
1169	 136	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x138
1170	 137	JUMP		 	 
- stack 0: 0x4F4
1171	 138	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4F4
1172	 139	PUSH4	80000000	 	 
- stack 1: 0x4F4
- stack 0: 0x80000000
1173	 13E	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x80000000
- stack 0: 0x20
1174	 141	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1175	 142	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1176	 144	ADD		 	 
- stack 0: 0x4F8
1177	 145	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1178	 146	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x14BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF00C20000
1179	 147	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x14BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF00C20000
- stack 0: 0xF0
1180	 149	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x14B
1181	 14A	JUMP		 	 
- stack 0: 0x4F8
1182	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4F8
1183	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1184	 14D	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x14BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF00C20000
1185	 14E	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x14BFFFF00A0F80000C2000000DC000D00F6017C0086000000A0FFFF00C20000
- stack 0: 0xE0
1186	 150	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x14BFFFF
1187	 151	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x14BFFFF
- stack 0: 0xFFFF
1188	 154	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFF
1189	 155	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFF
- stack 0: 0x1
1190	 157	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1191	 158	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1192	 15B	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1193	 15C	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x7FFFFFFF
1194	 15D	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1195	 160	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1196	 161	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1197	 163	ADD		 	 
- stack 0: 0x4FC
1198	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1199	 165	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xA0F80000C2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E
1200	 166	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xA0F80000C2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E
- stack 0: 0xF0
1201	 168	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xA0
1202	 169	JUMP		 	 
- stack 0: 0x4FC
1203	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x4FC
1204	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1205	 A2	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xA0F80000C2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E
1206	 A3	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xA0F80000C2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E
- stack 0: 0xE0
1207	 A5	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xA0F800
1208	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xA0F800
- stack 0: 0xFFFF
1209	 A9	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xF800
1210	 AA	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xF800
- stack 0: 0x1
1211	 AC	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
1212	 AD	PUSH2	0020	 	 
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x20
1213	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x7FFFFFFF
1214	 B1	PUSH1	03	 	 
- stack 3: 0x4FC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1215	 B3	SIGNEXTEND		 	 
- stack 2: 0x4FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x7FFFFFFF
1216	 B4	SLT		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1217	 B5	PUSH2	0060	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x60
1218	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x4FC
1219	 B9	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1220	 BB	ADD		 	 
- stack 0: 0x500
1221	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1222	 BD	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xC2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E00F60168
1223	 BE	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0xC2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E00F60168
- stack 0: 0xF0
1224	 C0	SHR		 	 
- stack 1: 0x500
- stack 0: 0xC2
1225	 C1	JUMP		 	 
- stack 0: 0x500
1226	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x500
1227	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1228	 C4	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0xC2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E00F60168
1229	 C5	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0xC2000000DC000D00F6017C0086000000A0FFFF00C2000000DC000E00F60168
- stack 0: 0xE0
1230	 C7	SHR		 	 
- stack 1: 0x500
- stack 0: 0xC20000
1231	 C8	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0xC20000
- stack 0: 0xFFFF
1232	 CB	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1233	 CC	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1234	 CE	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1235	 CF	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x3A0
1236	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1237	 D3	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1238	 D5	ADD		 	 
- stack 0: 0x504
1239	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1240	 D7	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xDC000D00F6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF
1241	 D8	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xDC000D00F6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF
- stack 0: 0xF0
1242	 DA	SHR		 	 
- stack 1: 0x504
- stack 0: 0xDC
1243	 DB	JUMP		 	 
- stack 0: 0x504
1244	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x504
1245	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1246	 DE	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xDC000D00F6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF
1247	 DF	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0xDC000D00F6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF
- stack 0: 0xE0
1248	 E1	SHR		 	 
- stack 1: 0x504
- stack 0: 0xDC000D
1249	 E2	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0xDC000D
- stack 0: 0xFFFF
1250	 E5	AND		 	 
- stack 1: 0x504
- stack 0: 0xD
1251	 E6	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xD
- stack 0: 0x1
1252	 E8	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xD
1253	 E9	PUSH2	0380	 	 
- stack 2: 0x504
- stack 1: 0xD
- stack 0: 0x380
1254	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x504
1255	 ED	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1256	 EF	ADD		 	 
- stack 0: 0x508
1257	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1258	 F1	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xF6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF00A00001
1259	 F2	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xF6017C0086000000A0FFFF00C2000000DC000E00F601680086FFFF00A00001
- stack 0: 0xF0
1260	 F4	SHR		 	 
- stack 1: 0x508
- stack 0: 0xF6
1261	 F5	JUMP		 	 
- stack 0: 0x508
1262	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x508
1263	 F7	PUSH2	0060	 	 
- stack 1: 0x508
- stack 0: 0x60
1264	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x508
- stack 0: 0x0
1265	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1266	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x0
1267	 101	PUSH2	03A0	 	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x3A0
1268	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x0
1269	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x508
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1270	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x0
1271	 10B	SUB		 	 
- stack 1: 0x508
- stack 0: 0x0
1272	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x114
1273	 10F	JUMPI		 	 
- stack 0: 0x508
1274	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x508
- stack 0: 0x12E
1275	 113	JUMP		 	 
- stack 0: 0x508
1276	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x508
1277	 12F	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1278	 131	ADD		 	 
- stack 0: 0x50C
1279	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1280	 133	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x86000000A0FFFF00C2000000DC000E00F601680086FFFF00A0000100C20001
1281	 134	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x86000000A0FFFF00C2000000DC000E00F601680086FFFF00A0000100C20001
- stack 0: 0xF0
1282	 136	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x86
1283	 137	JUMP		 	 
- stack 0: 0x50C
1284	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x50C
1285	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1286	 88	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x86000000A0FFFF00C2000000DC000E00F601680086FFFF00A0000100C20001
1287	 89	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0x86000000A0FFFF00C2000000DC000E00F601680086FFFF00A0000100C20001
- stack 0: 0xE0
1288	 8B	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x860000
1289	 8C	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0x860000
- stack 0: 0xFFFF
1290	 8F	AND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1291	 90	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x1
1292	 92	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0x0
1293	 93	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x20
1294	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1295	 97	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1296	 99	ADD		 	 
- stack 0: 0x510
1297	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1298	 9B	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF00C2000000DC000E00F601680086FFFF00A0000100C2000100DC000F
1299	 9C	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF00C2000000DC000E00F601680086FFFF00A0000100C2000100DC000F
- stack 0: 0xF0
1300	 9E	SHR		 	 
- stack 1: 0x510
- stack 0: 0xA0
1301	 9F	JUMP		 	 
- stack 0: 0x510
1302	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x510
1303	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1304	 A2	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF00C2000000DC000E00F601680086FFFF00A0000100C2000100DC000F
1305	 A3	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF00C2000000DC000E00F601680086FFFF00A0000100C2000100DC000F
- stack 0: 0xE0
1306	 A5	SHR		 	 
- stack 1: 0x510
- stack 0: 0xA0FFFF
1307	 A6	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1308	 A9	AND		 	 
- stack 1: 0x510
- stack 0: 0xFFFF
1309	 AA	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFFFF
- stack 0: 0x1
1310	 AC	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1311	 AD	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1312	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1313	 B1	PUSH1	03	 	 
- stack 3: 0x510
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
1314	 B3	SIGNEXTEND		 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1315	 B4	SLT		 	 
- stack 1: 0x510
- stack 0: 0x0
1316	 B5	PUSH2	0060	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x60
1317	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x510
1318	 B9	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1319	 BB	ADD		 	 
- stack 0: 0x514
1320	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1321	 BD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xC2000000DC000E00F601680086FFFF00A0000100C2000100DC000F00F60154
1322	 BE	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xC2000000DC000E00F601680086FFFF00A0000100C2000100DC000F00F60154
- stack 0: 0xF0
1323	 C0	SHR		 	 
- stack 1: 0x514
- stack 0: 0xC2
1324	 C1	JUMP		 	 
- stack 0: 0x514
1325	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x514
1326	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1327	 C4	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xC2000000DC000E00F601680086FFFF00A0000100C2000100DC000F00F60154
1328	 C5	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xC2000000DC000E00F601680086FFFF00A0000100C2000100DC000F00F60154
- stack 0: 0xE0
1329	 C7	SHR		 	 
- stack 1: 0x514
- stack 0: 0xC20000
1330	 C8	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xC20000
- stack 0: 0xFFFF
1331	 CB	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1332	 CC	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1333	 CE	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1334	 CF	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x3A0
1335	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1336	 D3	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1337	 D5	ADD		 	 
- stack 0: 0x518
1338	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1339	 D7	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xDC000E00F601680086FFFF00A0000100C2000100DC000F00F601540086FFFF
1340	 D8	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xDC000E00F601680086FFFF00A0000100C2000100DC000F00F601540086FFFF
- stack 0: 0xF0
1341	 DA	SHR		 	 
- stack 1: 0x518
- stack 0: 0xDC
1342	 DB	JUMP		 	 
- stack 0: 0x518
1343	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1344	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1345	 DE	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xDC000E00F601680086FFFF00A0000100C2000100DC000F00F601540086FFFF
1346	 DF	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0xDC000E00F601680086FFFF00A0000100C2000100DC000F00F601540086FFFF
- stack 0: 0xE0
1347	 E1	SHR		 	 
- stack 1: 0x518
- stack 0: 0xDC000E
1348	 E2	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0xDC000E
- stack 0: 0xFFFF
1349	 E5	AND		 	 
- stack 1: 0x518
- stack 0: 0xE
1350	 E6	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xE
- stack 0: 0x1
1351	 E8	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xE
1352	 E9	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0xE
- stack 0: 0x380
1353	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1354	 ED	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1355	 EF	ADD		 	 
- stack 0: 0x51C
1356	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1357	 F1	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0xF601680086FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF
1358	 F2	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0xF601680086FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF
- stack 0: 0xF0
1359	 F4	SHR		 	 
- stack 1: 0x51C
- stack 0: 0xF6
1360	 F5	JUMP		 	 
- stack 0: 0x51C
1361	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x51C
1362	 F7	PUSH2	0060	 	 
- stack 1: 0x51C
- stack 0: 0x60
1363	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x51C
- stack 0: 0x0
1364	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1365	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0x0
1366	 101	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x3A0
1367	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x0
1368	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x51C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1369	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x0
1370	 10B	SUB		 	 
- stack 1: 0x51C
- stack 0: 0x0
1371	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x114
1372	 10F	JUMPI		 	 
- stack 0: 0x51C
1373	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x51C
- stack 0: 0x12E
1374	 113	JUMP		 	 
- stack 0: 0x51C
1375	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x51C
1376	 12F	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1377	 131	ADD		 	 
- stack 0: 0x520
1378	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1379	 133	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF00C20000
1380	 134	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF00C20000
- stack 0: 0xF0
1381	 136	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86
1382	 137	JUMP		 	 
- stack 0: 0x520
1383	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x520
1384	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1385	 88	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF00C20000
1386	 89	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF00A0000100C2000100DC000F00F601540086FFFF00A0FFFF00C20000
- stack 0: 0xE0
1387	 8B	SHR		 	 
- stack 1: 0x520
- stack 0: 0x86FFFF
1388	 8C	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1389	 8F	AND		 	 
- stack 1: 0x520
- stack 0: 0xFFFF
1390	 90	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xFFFF
- stack 0: 0x1
1391	 92	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1392	 93	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1393	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1394	 97	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1395	 99	ADD		 	 
- stack 0: 0x524
1396	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1397	 9B	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xA0000100C2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC0010
1398	 9C	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xA0000100C2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC0010
- stack 0: 0xF0
1399	 9E	SHR		 	 
- stack 1: 0x524
- stack 0: 0xA0
1400	 9F	JUMP		 	 
- stack 0: 0x524
1401	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x524
1402	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1403	 A2	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xA0000100C2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC0010
1404	 A3	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xA0000100C2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC0010
- stack 0: 0xE0
1405	 A5	SHR		 	 
- stack 1: 0x524
- stack 0: 0xA00001
1406	 A6	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xA00001
- stack 0: 0xFFFF
1407	 A9	AND		 	 
- stack 1: 0x524
- stack 0: 0x1
1408	 AA	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x1
1409	 AC	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x1
1410	 AD	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x20
1411	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1412	 B1	PUSH1	03	 	 
- stack 3: 0x524
- stack 2: 0x1
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1413	 B3	SIGNEXTEND		 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1414	 B4	SLT		 	 
- stack 1: 0x524
- stack 0: 0x1
1415	 B5	PUSH2	0060	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x60
1416	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x524
1417	 B9	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1418	 BB	ADD		 	 
- stack 0: 0x528
1419	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1420	 BD	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xC2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC001000F60140
1421	 BE	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xC2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC001000F60140
- stack 0: 0xF0
1422	 C0	SHR		 	 
- stack 1: 0x528
- stack 0: 0xC2
1423	 C1	JUMP		 	 
- stack 0: 0x528
1424	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x528
1425	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x528
- stack 0: 0x528
1426	 C4	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xC2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC001000F60140
1427	 C5	PUSH1	E0	 	 
- stack 2: 0x528
- stack 1: 0xC2000100DC000F00F601540086FFFF00A0FFFF00C2000000DC001000F60140
- stack 0: 0xE0
1428	 C7	SHR		 	 
- stack 1: 0x528
- stack 0: 0xC20001
1429	 C8	PUSH2	FFFF	 	 
- stack 2: 0x528
- stack 1: 0xC20001
- stack 0: 0xFFFF
1430	 CB	AND		 	 
- stack 1: 0x528
- stack 0: 0x1
1431	 CC	PUSH1	01	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x1
1432	 CE	SIGNEXTEND		 	 
- stack 1: 0x528
- stack 0: 0x1
1433	 CF	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0x1
- stack 0: 0x3A0
1434	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1435	 D3	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1436	 D5	ADD		 	 
- stack 0: 0x52C
1437	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1438	 D7	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xDC000F00F601540086FFFF00A0FFFF00C2000000DC001000F601400086000B
1439	 D8	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xDC000F00F601540086FFFF00A0FFFF00C2000000DC001000F601400086000B
- stack 0: 0xF0
1440	 DA	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xDC
1441	 DB	JUMP		 	 
- stack 0: 0x52C
1442	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x52C
1443	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1444	 DE	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xDC000F00F601540086FFFF00A0FFFF00C2000000DC001000F601400086000B
1445	 DF	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xDC000F00F601540086FFFF00A0FFFF00C2000000DC001000F601400086000B
- stack 0: 0xE0
1446	 E1	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xDC000F
1447	 E2	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xDC000F
- stack 0: 0xFFFF
1448	 E5	AND		 	 
- stack 1: 0x52C
- stack 0: 0xF
1449	 E6	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xF
- stack 0: 0x1
1450	 E8	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xF
1451	 E9	PUSH2	0380	 	 
- stack 2: 0x52C
- stack 1: 0xF
- stack 0: 0x380
1452	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x52C
1453	 ED	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1454	 EF	ADD		 	 
- stack 0: 0x530
1455	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1456	 F1	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xF601540086FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D
1457	 F2	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xF601540086FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D
- stack 0: 0xF0
1458	 F4	SHR		 	 
- stack 1: 0x530
- stack 0: 0xF6
1459	 F5	JUMP		 	 
- stack 0: 0x530
1460	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x530
1461	 F7	PUSH2	0060	 	 
- stack 1: 0x530
- stack 0: 0x60
1462	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x530
- stack 0: 0x1
1463	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1464	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x530
- stack 0: 0x1
1465	 101	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x3A0
1466	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x1
1467	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x530
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1468	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x530
- stack 1: 0x1
- stack 0: 0x1
1469	 10B	SUB		 	 
- stack 1: 0x530
- stack 0: 0x0
1470	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x114
1471	 10F	JUMPI		 	 
- stack 0: 0x530
1472	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x530
- stack 0: 0x12E
1473	 113	JUMP		 	 
- stack 0: 0x530
1474	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x530
1475	 12F	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1476	 131	ADD		 	 
- stack 0: 0x534
1477	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1478	 133	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D00C20001
1479	 134	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D00C20001
- stack 0: 0xF0
1480	 136	SHR		 	 
- stack 1: 0x534
- stack 0: 0x86
1481	 137	JUMP		 	 
- stack 0: 0x534
1482	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x534
1483	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1484	 88	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D00C20001
1485	 89	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF00A0FFFF00C2000000DC001000F601400086000B016A000D00C20001
- stack 0: 0xE0
1486	 8B	SHR		 	 
- stack 1: 0x534
- stack 0: 0x86FFFF
1487	 8C	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1488	 8F	AND		 	 
- stack 1: 0x534
- stack 0: 0xFFFF
1489	 90	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xFFFF
- stack 0: 0x1
1490	 92	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1491	 93	PUSH2	0020	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1492	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x534
1493	 97	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1494	 99	ADD		 	 
- stack 0: 0x538
1495	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1496	 9B	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF00C2000000DC001000F601400086000B016A000D00C2000100DC0011
1497	 9C	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF00C2000000DC001000F601400086000B016A000D00C2000100DC0011
- stack 0: 0xF0
1498	 9E	SHR		 	 
- stack 1: 0x538
- stack 0: 0xA0
1499	 9F	JUMP		 	 
- stack 0: 0x538
1500	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x538
1501	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1502	 A2	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF00C2000000DC001000F601400086000B016A000D00C2000100DC0011
1503	 A3	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF00C2000000DC001000F601400086000B016A000D00C2000100DC0011
- stack 0: 0xE0
1504	 A5	SHR		 	 
- stack 1: 0x538
- stack 0: 0xA0FFFF
1505	 A6	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1506	 A9	AND		 	 
- stack 1: 0x538
- stack 0: 0xFFFF
1507	 AA	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xFFFF
- stack 0: 0x1
1508	 AC	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1509	 AD	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1510	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1511	 B1	PUSH1	03	 	 
- stack 3: 0x538
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3
1512	 B3	SIGNEXTEND		 	 
- stack 2: 0x538
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1513	 B4	SLT		 	 
- stack 1: 0x538
- stack 0: 0x0
1514	 B5	PUSH2	0060	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x60
1515	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x538
1516	 B9	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1517	 BB	ADD		 	 
- stack 0: 0x53C
1518	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1519	 BD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xC2000000DC001000F601400086000B016A000D00C2000100DC0011018C012C
1520	 BE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0xC2000000DC001000F601400086000B016A000D00C2000100DC0011018C012C
- stack 0: 0xF0
1521	 C0	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xC2
1522	 C1	JUMP		 	 
- stack 0: 0x53C
1523	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x53C
1524	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1525	 C4	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xC2000000DC001000F601400086000B016A000D00C2000100DC0011018C012C
1526	 C5	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xC2000000DC001000F601400086000B016A000D00C2000100DC0011018C012C
- stack 0: 0xE0
1527	 C7	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xC20000
1528	 C8	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0xC20000
- stack 0: 0xFFFF
1529	 CB	AND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1530	 CC	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x1
1531	 CE	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x0
1532	 CF	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x3A0
1533	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1534	 D3	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1535	 D5	ADD		 	 
- stack 0: 0x540
1536	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1537	 D7	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xDC001000F601400086000B016A000D00C2000100DC0011018C012C01CE0000
1538	 D8	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xDC001000F601400086000B016A000D00C2000100DC0011018C012C01CE0000
- stack 0: 0xF0
1539	 DA	SHR		 	 
- stack 1: 0x540
- stack 0: 0xDC
1540	 DB	JUMP		 	 
- stack 0: 0x540
1541	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1542	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1543	 DE	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xDC001000F601400086000B016A000D00C2000100DC0011018C012C01CE0000
1544	 DF	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xDC001000F601400086000B016A000D00C2000100DC0011018C012C01CE0000
- stack 0: 0xE0
1545	 E1	SHR		 	 
- stack 1: 0x540
- stack 0: 0xDC0010
1546	 E2	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xDC0010
- stack 0: 0xFFFF
1547	 E5	AND		 	 
- stack 1: 0x540
- stack 0: 0x10
1548	 E6	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x10
- stack 0: 0x1
1549	 E8	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x10
1550	 E9	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0x10
- stack 0: 0x380
1551	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1552	 ED	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1553	 EF	ADD		 	 
- stack 0: 0x544
1554	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1555	 F1	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xF601400086000B016A000D00C2000100DC0011018C012C01CE00000086000F
1556	 F2	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xF601400086000B016A000D00C2000100DC0011018C012C01CE00000086000F
- stack 0: 0xF0
1557	 F4	SHR		 	 
- stack 1: 0x544
- stack 0: 0xF6
1558	 F5	JUMP		 	 
- stack 0: 0x544
1559	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x544
1560	 F7	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
1561	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0x0
1562	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1563	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x0
1564	 101	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x3A0
1565	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x0
1566	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1567	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x0
1568	 10B	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1569	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x114
1570	 10F	JUMPI		 	 
- stack 0: 0x544
1571	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x544
- stack 0: 0x12E
1572	 113	JUMP		 	 
- stack 0: 0x544
1573	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x544
1574	 12F	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1575	 131	ADD		 	 
- stack 0: 0x548
1576	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1577	 133	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x86000B016A000D00C2000100DC0011018C012C01CE00000086000F00A0000A
1578	 134	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x86000B016A000D00C2000100DC0011018C012C01CE00000086000F00A0000A
- stack 0: 0xF0
1579	 136	SHR		 	 
- stack 1: 0x548
- stack 0: 0x86
1580	 137	JUMP		 	 
- stack 0: 0x548
1581	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x548
1582	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1583	 88	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x86000B016A000D00C2000100DC0011018C012C01CE00000086000F00A0000A
1584	 89	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x86000B016A000D00C2000100DC0011018C012C01CE00000086000F00A0000A
- stack 0: 0xE0
1585	 8B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x86000B
1586	 8C	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x86000B
- stack 0: 0xFFFF
1587	 8F	AND		 	 
- stack 1: 0x548
- stack 0: 0xB
1588	 90	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xB
- stack 0: 0x1
1589	 92	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xB
1590	 93	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0xB
- stack 0: 0x20
1591	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1592	 97	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1593	 99	ADD		 	 
- stack 0: 0x54C
1594	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1595	 9B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x16A000D00C2000100DC0011018C012C01CE00000086000F00A0000A01E80000
1596	 9C	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x16A000D00C2000100DC0011018C012C01CE00000086000F00A0000A01E80000
- stack 0: 0xF0
1597	 9E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x16A
1598	 9F	JUMP		 	 
- stack 0: 0x54C
1599	 16A	JUMPDEST		 ;; __riscvimpl_SLTIU_1_1_0	  ;; # instr: sltiu ra,ra,13(ignore imm)
- stack 0: 0x54C
1600	 16B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1601	 16C	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x16A000D00C2000100DC0011018C012C01CE00000086000F00A0000A01E80000
1602	 16D	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x16A000D00C2000100DC0011018C012C01CE00000086000F00A0000A01E80000
- stack 0: 0xE0
1603	 16F	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x16A000D
1604	 170	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x16A000D
- stack 0: 0xFFFF
1605	 173	AND		 	 
- stack 1: 0x54C
- stack 0: 0xD
1606	 174	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xD
- stack 0: 0x1
1607	 176	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xD
1608	 177	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xD
- stack 0: 0x20
1609	 17A	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xD
- stack 0: 0xB
1610	 17B	PUSH1	03	 	 
- stack 3: 0x54C
- stack 2: 0xD
- stack 1: 0xB
- stack 0: 0x3
1611	 17D	SIGNEXTEND		 	 
- stack 2: 0x54C
- stack 1: 0xD
- stack 0: 0xB
1612	 17E	LT		 	 
- stack 1: 0x54C
- stack 0: 0x1
1613	 17F	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x20
1614	 182	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1615	 183	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1616	 185	ADD		 	 
- stack 0: 0x550
1617	 186	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1618	 187	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xC2000100DC0011018C012C01CE00000086000F00A0000A01E8000002070001
1619	 188	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xC2000100DC0011018C012C01CE00000086000F00A0000A01E8000002070001
- stack 0: 0xF0
1620	 18A	SHR		 	 
- stack 1: 0x550
- stack 0: 0xC2
1621	 18B	JUMP		 	 
- stack 0: 0x550
1622	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x550
1623	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1624	 C4	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xC2000100DC0011018C012C01CE00000086000F00A0000A01E8000002070001
1625	 C5	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xC2000100DC0011018C012C01CE00000086000F00A0000A01E8000002070001
- stack 0: 0xE0
1626	 C7	SHR		 	 
- stack 1: 0x550
- stack 0: 0xC20001
1627	 C8	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xC20001
- stack 0: 0xFFFF
1628	 CB	AND		 	 
- stack 1: 0x550
- stack 0: 0x1
1629	 CC	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1630	 CE	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x1
1631	 CF	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x3A0
1632	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1633	 D3	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1634	 D5	ADD		 	 
- stack 0: 0x554
1635	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1636	 D7	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xDC0011018C012C01CE00000086000F00A0000A01E800000207000102260002
1637	 D8	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xDC0011018C012C01CE00000086000F00A0000A01E800000207000102260002
- stack 0: 0xF0
1638	 DA	SHR		 	 
- stack 1: 0x554
- stack 0: 0xDC
1639	 DB	JUMP		 	 
- stack 0: 0x554
1640	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x554
1641	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1642	 DE	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xDC0011018C012C01CE00000086000F00A0000A01E800000207000102260002
1643	 DF	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xDC0011018C012C01CE00000086000F00A0000A01E800000207000102260002
- stack 0: 0xE0
1644	 E1	SHR		 	 
- stack 1: 0x554
- stack 0: 0xDC0011
1645	 E2	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xDC0011
- stack 0: 0xFFFF
1646	 E5	AND		 	 
- stack 1: 0x554
- stack 0: 0x11
1647	 E6	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x11
- stack 0: 0x1
1648	 E8	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x11
1649	 E9	PUSH2	0380	 	 
- stack 2: 0x554
- stack 1: 0x11
- stack 0: 0x380
1650	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x554
1651	 ED	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1652	 EF	ADD		 	 
- stack 0: 0x558
1653	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1654	 F1	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x18C012C01CE00000086000F00A0000A01E8000002070001022600020240FFEC
1655	 F2	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x18C012C01CE00000086000F00A0000A01E8000002070001022600020240FFEC
- stack 0: 0xF0
1656	 F4	SHR		 	 
- stack 1: 0x558
- stack 0: 0x18C
1657	 F5	JUMP		 	 
- stack 0: 0x558
1658	 18C	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,12c(ignore imm)
- stack 0: 0x558
1659	 18D	PUSH2	0020	 	 
- stack 1: 0x558
- stack 0: 0x20
1660	 190	MLOAD		 	  ;; # read from x1
- stack 1: 0x558
- stack 0: 0x1
1661	 191	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1662	 196	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x1
1663	 197	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x3A0
1664	 19A	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1665	 19B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1666	 1A0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1667	 1A1	SUB		 	 
- stack 1: 0x558
- stack 0: 0x0
1668	 1A2	PUSH2	01AA	 ;; _neq_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x1AA
1669	 1A5	JUMPI		 	 
- stack 0: 0x558
1670	 1A6	PUSH2	01C4	 ;; _neq_after_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 1: 0x558
- stack 0: 0x1C4
1671	 1A9	JUMP		 	 
- stack 0: 0x558
1672	 1C4	JUMPDEST		 ;; _neq_after_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 0: 0x558
1673	 1C5	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1674	 1C7	ADD		 	 
- stack 0: 0x55C
1675	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1676	 1C9	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1CE00000086000F00A0000A01E8000002070001022600020240FFEC00C20000
1677	 1CA	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1CE00000086000F00A0000A01E8000002070001022600020240FFEC00C20000
- stack 0: 0xF0
1678	 1CC	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1CE
1679	 1CD	JUMP		 	 
- stack 0: 0x55C
1680	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x55C
1681	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1682	 1D0	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1CE00000086000F00A0000A01E8000002070001022600020240FFEC00C20000
1683	 1D1	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1CE00000086000F00A0000A01E8000002070001022600020240FFEC00C20000
- stack 0: 0xE0
1684	 1D3	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1CE0000
1685	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
1686	 1D7	AND		 	 
- stack 1: 0x55C
- stack 0: 0x0
1687	 1D8	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x1
1688	 1DA	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x0
1689	 1DB	PUSH2	0080	 	 
- stack 2: 0x55C
- stack 1: 0x0
- stack 0: 0x80
1690	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x55C
1691	 1DF	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1692	 1E1	ADD		 	 
- stack 0: 0x560
1693	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1694	 1E3	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
1695	 1E4	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
- stack 0: 0xF0
1696	 1E6	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86
1697	 1E7	JUMP		 	 
- stack 0: 0x560
1698	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x560
1699	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1700	 88	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
1701	 89	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
- stack 0: 0xE0
1702	 8B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86000F
1703	 8C	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x86000F
- stack 0: 0xFFFF
1704	 8F	AND		 	 
- stack 1: 0x560
- stack 0: 0xF
1705	 90	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xF
- stack 0: 0x1
1706	 92	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xF
1707	 93	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xF
- stack 0: 0x20
1708	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1709	 97	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1710	 99	ADD		 	 
- stack 0: 0x564
1711	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1712	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
1713	 9C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
- stack 0: 0xF0
1714	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA0
1715	 9F	JUMP		 	 
- stack 0: 0x564
1716	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x564
1717	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1718	 A2	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
1719	 A3	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
- stack 0: 0xE0
1720	 A5	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA0000A
1721	 A6	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0xA0000A
- stack 0: 0xFFFF
1722	 A9	AND		 	 
- stack 1: 0x564
- stack 0: 0xA
1723	 AA	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x1
1724	 AC	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xA
1725	 AD	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x20
1726	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0xF
1727	 B1	PUSH1	03	 	 
- stack 3: 0x564
- stack 2: 0xA
- stack 1: 0xF
- stack 0: 0x3
1728	 B3	SIGNEXTEND		 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0xF
1729	 B4	SLT		 	 
- stack 1: 0x564
- stack 0: 0x0
1730	 B5	PUSH2	0060	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x60
1731	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x564
1732	 B9	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1733	 BB	ADD		 	 
- stack 0: 0x568
1734	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1735	 BD	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
1736	 BE	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
- stack 0: 0xF0
1737	 C0	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1E8
1738	 C1	JUMP		 	 
- stack 0: 0x568
1739	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x568
1740	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1741	 1EA	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
1742	 1EB	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
- stack 0: 0xE0
1743	 1ED	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1E80000
1744	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1E80000
- stack 0: 0xFFFF
1745	 1F1	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
1746	 1F2	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
1747	 1F4	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
1748	 1F5	PUSH2	0060	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x60
1749	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x0
1750	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x568
- stack 0: 0x0
1751	 1FA	PUSH2	00C0	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0xC0
1752	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x568
1753	 1FE	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1754	 200	ADD		 	 
- stack 0: 0x56C
1755	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1756	 202	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
1757	 203	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
- stack 0: 0xF0
1758	 205	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x207
1759	 206	JUMP		 	 
- stack 0: 0x56C
1760	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x56C
1761	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1762	 209	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
1763	 20A	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
- stack 0: 0xE0
1764	 20C	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x2070001
1765	 20D	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x2070001
- stack 0: 0xFFFF
1766	 210	AND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1767	 211	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1
1768	 213	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1769	 214	PUSH2	0080	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x80
1770	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x0
1771	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x56C
- stack 0: 0x1
1772	 219	PUSH2	0080	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x80
1773	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x56C
1774	 21D	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1775	 21F	ADD		 	 
- stack 0: 0x570
1776	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1777	 221	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
1778	 222	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
- stack 0: 0xF0
1779	 224	SHR		 	 
- stack 1: 0x570
- stack 0: 0x226
1780	 225	JUMP		 	 
- stack 0: 0x570
1781	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x570
1782	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1783	 228	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
1784	 229	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
- stack 0: 0xE0
1785	 22B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x2260002
1786	 22C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x2260002
- stack 0: 0xFFFF
1787	 22F	AND		 	 
- stack 1: 0x570
- stack 0: 0x2
1788	 230	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0x1
1789	 232	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x2
1790	 233	PUSH2	00A0	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0xA0
1791	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x570
1792	 237	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1793	 239	ADD		 	 
- stack 0: 0x574
1794	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1795	 23B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
1796	 23C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
- stack 0: 0xF0
1797	 23E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x240
1798	 23F	JUMP		 	 
- stack 0: 0x574
1799	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x574
1800	 241	PUSH2	0080	 	 
- stack 1: 0x574
- stack 0: 0x80
1801	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x574
- stack 0: 0x1
1802	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1803	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x1
1804	 24B	PUSH2	00A0	 	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0xA0
1805	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x2
1806	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1807	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x2
1808	 255	SUB		 	 
- stack 1: 0x574
- stack 0: 0x1
1809	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x574
- stack 1: 0x1
- stack 0: 0x25E
1810	 259	JUMPI		 	 
- stack 0: 0x574
1811	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x574
1812	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1813	 260	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
1814	 261	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
- stack 0: 0xE0
1815	 263	SHR		 	 
- stack 1: 0x574
- stack 0: 0x240FFEC
1816	 264	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x240FFEC
- stack 0: 0xFFFF
1817	 267	AND		 	 
- stack 1: 0x574
- stack 0: 0xFFEC
1818	 268	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xFFEC
- stack 0: 0x1
1819	 26A	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1820	 26B	ADD		 	 
- stack 0: 0x560
1821	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFF
1822	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x560
1823	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1824	 273	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
1825	 274	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
- stack 0: 0xF0
1826	 276	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86
1827	 277	JUMP		 	 
- stack 0: 0x560
1828	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x560
1829	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1830	 88	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
1831	 89	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x86000F00A0000A01E8000002070001022600020240FFEC00C2000000DC0012
- stack 0: 0xE0
1832	 8B	SHR		 	 
- stack 1: 0x560
- stack 0: 0x86000F
1833	 8C	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x86000F
- stack 0: 0xFFFF
1834	 8F	AND		 	 
- stack 1: 0x560
- stack 0: 0xF
1835	 90	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xF
- stack 0: 0x1
1836	 92	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xF
1837	 93	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xF
- stack 0: 0x20
1838	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1839	 97	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1840	 99	ADD		 	 
- stack 0: 0x564
1841	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1842	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
1843	 9C	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
- stack 0: 0xF0
1844	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA0
1845	 9F	JUMP		 	 
- stack 0: 0x564
1846	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x564
1847	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1848	 A2	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
1849	 A3	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0xA0000A01E8000002070001022600020240FFEC00C2000000DC001202820104
- stack 0: 0xE0
1850	 A5	SHR		 	 
- stack 1: 0x564
- stack 0: 0xA0000A
1851	 A6	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0xA0000A
- stack 0: 0xFFFF
1852	 A9	AND		 	 
- stack 1: 0x564
- stack 0: 0xA
1853	 AA	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x1
1854	 AC	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xA
1855	 AD	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0x20
1856	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0xF
1857	 B1	PUSH1	03	 	 
- stack 3: 0x564
- stack 2: 0xA
- stack 1: 0xF
- stack 0: 0x3
1858	 B3	SIGNEXTEND		 	 
- stack 2: 0x564
- stack 1: 0xA
- stack 0: 0xF
1859	 B4	SLT		 	 
- stack 1: 0x564
- stack 0: 0x0
1860	 B5	PUSH2	0060	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x60
1861	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x564
1862	 B9	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1863	 BB	ADD		 	 
- stack 0: 0x568
1864	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1865	 BD	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
1866	 BE	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
- stack 0: 0xF0
1867	 C0	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1E8
1868	 C1	JUMP		 	 
- stack 0: 0x568
1869	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x568
1870	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1871	 1EA	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
1872	 1EB	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x1E8000002070001022600020240FFEC00C2000000DC00120282010401CE0000
- stack 0: 0xE0
1873	 1ED	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1E80000
1874	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1E80000
- stack 0: 0xFFFF
1875	 1F1	AND		 	 
- stack 1: 0x568
- stack 0: 0x0
1876	 1F2	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x1
1877	 1F4	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x0
1878	 1F5	PUSH2	0060	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x60
1879	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0x0
1880	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x568
- stack 0: 0x0
1881	 1FA	PUSH2	00C0	 	 
- stack 2: 0x568
- stack 1: 0x0
- stack 0: 0xC0
1882	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x568
1883	 1FE	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1884	 200	ADD		 	 
- stack 0: 0x56C
1885	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1886	 202	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
1887	 203	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
- stack 0: 0xF0
1888	 205	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x207
1889	 206	JUMP		 	 
- stack 0: 0x56C
1890	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x56C
1891	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1892	 209	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
1893	 20A	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x2070001022600020240FFEC00C2000000DC00120282010401CE00000086000A
- stack 0: 0xE0
1894	 20C	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x2070001
1895	 20D	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x2070001
- stack 0: 0xFFFF
1896	 210	AND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1897	 211	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1
1898	 213	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x1
1899	 214	PUSH2	0080	 	 
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x80
1900	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x56C
- stack 1: 0x1
- stack 0: 0x1
1901	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x56C
- stack 0: 0x2
1902	 219	PUSH2	0080	 	 
- stack 2: 0x56C
- stack 1: 0x2
- stack 0: 0x80
1903	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x56C
1904	 21D	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1905	 21F	ADD		 	 
- stack 0: 0x570
1906	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1907	 221	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
1908	 222	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
- stack 0: 0xF0
1909	 224	SHR		 	 
- stack 1: 0x570
- stack 0: 0x226
1910	 225	JUMP		 	 
- stack 0: 0x570
1911	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x570
1912	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1913	 228	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
1914	 229	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x22600020240FFEC00C2000000DC00120282010401CE00000086000A00A00010
- stack 0: 0xE0
1915	 22B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x2260002
1916	 22C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x2260002
- stack 0: 0xFFFF
1917	 22F	AND		 	 
- stack 1: 0x570
- stack 0: 0x2
1918	 230	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0x1
1919	 232	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x2
1920	 233	PUSH2	00A0	 	 
- stack 2: 0x570
- stack 1: 0x2
- stack 0: 0xA0
1921	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x570
1922	 237	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1923	 239	ADD		 	 
- stack 0: 0x574
1924	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1925	 23B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
1926	 23C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x240FFEC00C2000000DC00120282010401CE00000086000A00A0001002C40000
- stack 0: 0xF0
1927	 23E	SHR		 	 
- stack 1: 0x574
- stack 0: 0x240
1928	 23F	JUMP		 	 
- stack 0: 0x574
1929	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x574
1930	 241	PUSH2	0080	 	 
- stack 1: 0x574
- stack 0: 0x80
1931	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x574
- stack 0: 0x2
1932	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1933	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x574
- stack 0: 0x2
1934	 24B	PUSH2	00A0	 	 
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0xA0
1935	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0x2
1936	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x574
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1937	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x574
- stack 1: 0x2
- stack 0: 0x2
1938	 255	SUB		 	 
- stack 1: 0x574
- stack 0: 0x0
1939	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x25E
1940	 259	JUMPI		 	 
- stack 0: 0x574
1941	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x574
- stack 0: 0x278
1942	 25D	JUMP		 	 
- stack 0: 0x574
1943	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x574
1944	 279	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1945	 27B	ADD		 	 
- stack 0: 0x578
1946	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1947	 27D	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xC2000000DC00120282010401CE00000086000A00A0001002C4000001E80000
1948	 27E	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xC2000000DC00120282010401CE00000086000A00A0001002C4000001E80000
- stack 0: 0xF0
1949	 280	SHR		 	 
- stack 1: 0x578
- stack 0: 0xC2
1950	 281	JUMP		 	 
- stack 0: 0x578
1951	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x578
1952	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
1953	 C4	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xC2000000DC00120282010401CE00000086000A00A0001002C4000001E80000
1954	 C5	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0xC2000000DC00120282010401CE00000086000A00A0001002C4000001E80000
- stack 0: 0xE0
1955	 C7	SHR		 	 
- stack 1: 0x578
- stack 0: 0xC20000
1956	 C8	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0xC20000
- stack 0: 0xFFFF
1957	 CB	AND		 	 
- stack 1: 0x578
- stack 0: 0x0
1958	 CC	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1
1959	 CE	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x0
1960	 CF	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x3A0
1961	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x578
1962	 D3	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1963	 D5	ADD		 	 
- stack 0: 0x57C
1964	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1965	 D7	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xDC00120282010401CE00000086000A00A0001002C4000001E8000002070001
1966	 D8	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xDC00120282010401CE00000086000A00A0001002C4000001E8000002070001
- stack 0: 0xF0
1967	 DA	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xDC
1968	 DB	JUMP		 	 
- stack 0: 0x57C
1969	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x57C
1970	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1971	 DE	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xDC00120282010401CE00000086000A00A0001002C4000001E8000002070001
1972	 DF	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xDC00120282010401CE00000086000A00A0001002C4000001E8000002070001
- stack 0: 0xE0
1973	 E1	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xDC0012
1974	 E2	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xDC0012
- stack 0: 0xFFFF
1975	 E5	AND		 	 
- stack 1: 0x57C
- stack 0: 0x12
1976	 E6	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x12
- stack 0: 0x1
1977	 E8	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x12
1978	 E9	PUSH2	0380	 	 
- stack 2: 0x57C
- stack 1: 0x12
- stack 0: 0x380
1979	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x57C
1980	 ED	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1981	 EF	ADD		 	 
- stack 0: 0x580
1982	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1983	 F1	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x282010401CE00000086000A00A0001002C4000001E800000207000102260002
1984	 F2	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x282010401CE00000086000A00A0001002C4000001E800000207000102260002
- stack 0: 0xF0
1985	 F4	SHR		 	 
- stack 1: 0x580
- stack 0: 0x282
1986	 F5	JUMP		 	 
- stack 0: 0x580
1987	 282	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,104(ignore imm)
- stack 0: 0x580
1988	 283	PUSH2	00C0	 	 
- stack 1: 0x580
- stack 0: 0xC0
1989	 286	MLOAD		 	  ;; # read from x6
- stack 1: 0x580
- stack 0: 0x0
1990	 287	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1991	 28C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x0
1992	 28D	PUSH2	03A0	 	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x3A0
1993	 290	MLOAD		 	  ;; # read from x29
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
1994	 291	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1995	 296	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x0
1996	 297	SUB		 	 
- stack 1: 0x580
- stack 0: 0x0
1997	 298	PUSH2	02A0	 ;; _neq_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x2A0
1998	 29B	JUMPI		 	 
- stack 0: 0x580
1999	 29C	PUSH2	02BA	 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 1: 0x580
- stack 0: 0x2BA
2000	 29F	JUMP		 	 
- stack 0: 0x580
2001	 2BA	JUMPDEST		 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 0: 0x580
2002	 2BB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2003	 2BD	ADD		 	 
- stack 0: 0x584
2004	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2005	 2BF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1CE00000086000A00A0001002C4000001E8000002070001022600020240FFE8
2006	 2C0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x1CE00000086000A00A0001002C4000001E8000002070001022600020240FFE8
- stack 0: 0xF0
2007	 2C2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1CE
2008	 2C3	JUMP		 	 
- stack 0: 0x584
2009	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x584
2010	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2011	 1D0	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x1CE00000086000A00A0001002C4000001E8000002070001022600020240FFE8
2012	 1D1	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x1CE00000086000A00A0001002C4000001E8000002070001022600020240FFE8
- stack 0: 0xE0
2013	 1D3	SHR		 	 
- stack 1: 0x584
- stack 0: 0x1CE0000
2014	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2015	 1D7	AND		 	 
- stack 1: 0x584
- stack 0: 0x0
2016	 1D8	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x1
2017	 1DA	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0x0
2018	 1DB	PUSH2	0080	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x80
2019	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x584
2020	 1DF	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2021	 1E1	ADD		 	 
- stack 0: 0x588
2022	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2023	 1E3	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
2024	 1E4	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
- stack 0: 0xF0
2025	 1E6	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86
2026	 1E7	JUMP		 	 
- stack 0: 0x588
2027	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x588
2028	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2029	 88	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
2030	 89	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
- stack 0: 0xE0
2031	 8B	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86000A
2032	 8C	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x86000A
- stack 0: 0xFFFF
2033	 8F	AND		 	 
- stack 1: 0x588
- stack 0: 0xA
2034	 90	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xA
- stack 0: 0x1
2035	 92	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xA
2036	 93	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xA
- stack 0: 0x20
2037	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
2038	 97	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2039	 99	ADD		 	 
- stack 0: 0x58C
2040	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2041	 9B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
2042	 9C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
- stack 0: 0xF0
2043	 9E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0
2044	 9F	JUMP		 	 
- stack 0: 0x58C
2045	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x58C
2046	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2047	 A2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
2048	 A3	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
- stack 0: 0xE0
2049	 A5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA00010
2050	 A6	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xA00010
- stack 0: 0xFFFF
2051	 A9	AND		 	 
- stack 1: 0x58C
- stack 0: 0x10
2052	 AA	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0x1
2053	 AC	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x10
2054	 AD	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0x20
2055	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0xA
2056	 B1	PUSH1	03	 	 
- stack 3: 0x58C
- stack 2: 0x10
- stack 1: 0xA
- stack 0: 0x3
2057	 B3	SIGNEXTEND		 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0xA
2058	 B4	SLT		 	 
- stack 1: 0x58C
- stack 0: 0x1
2059	 B5	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x60
2060	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2061	 B9	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2062	 BB	ADD		 	 
- stack 0: 0x590
2063	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2064	 BD	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
2065	 BE	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
- stack 0: 0xF0
2066	 C0	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2C4
2067	 C1	JUMP		 	 
- stack 0: 0x590
2068	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2069	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2070	 2C6	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
2071	 2C7	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
- stack 0: 0xE0
2072	 2C9	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2C40000
2073	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2074	 2CD	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2075	 2CE	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2076	 2D0	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2077	 2D1	POP		 	 
- stack 0: 0x590
2078	 2D2	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2079	 2D4	ADD		 	 
- stack 0: 0x594
2080	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2081	 2D6	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
2082	 2D7	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
- stack 0: 0xF0
2083	 2D9	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E8
2084	 2DA	JUMP		 	 
- stack 0: 0x594
2085	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2086	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2087	 1EA	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
2088	 1EB	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
- stack 0: 0xE0
2089	 1ED	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E80000
2090	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1E80000
- stack 0: 0xFFFF
2091	 1F1	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2092	 1F2	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2093	 1F4	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2094	 1F5	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2095	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2096	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0x1
2097	 1FA	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xC0
2098	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2099	 1FE	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2100	 200	ADD		 	 
- stack 0: 0x598
2101	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2102	 202	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
2103	 203	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
- stack 0: 0xF0
2104	 205	SHR		 	 
- stack 1: 0x598
- stack 0: 0x207
2105	 206	JUMP		 	 
- stack 0: 0x598
2106	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2107	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2108	 209	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
2109	 20A	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
- stack 0: 0xE0
2110	 20C	SHR		 	 
- stack 1: 0x598
- stack 0: 0x2070001
2111	 20D	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x2070001
- stack 0: 0xFFFF
2112	 210	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2113	 211	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2114	 213	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2115	 214	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2116	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x0
2117	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x1
2118	 219	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2119	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2120	 21D	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2121	 21F	ADD		 	 
- stack 0: 0x59C
2122	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2123	 221	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
2124	 222	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
- stack 0: 0xF0
2125	 224	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x226
2126	 225	JUMP		 	 
- stack 0: 0x59C
2127	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2128	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2129	 228	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
2130	 229	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
- stack 0: 0xE0
2131	 22B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2260002
2132	 22C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2260002
- stack 0: 0xFFFF
2133	 22F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2134	 230	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2135	 232	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2136	 233	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2137	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2138	 237	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2139	 239	ADD		 	 
- stack 0: 0x5A0
2140	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2141	 23B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
2142	 23C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
- stack 0: 0xF0
2143	 23E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x240
2144	 23F	JUMP		 	 
- stack 0: 0x5A0
2145	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A0
2146	 241	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2147	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x1
2148	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2149	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x1
2150	 24B	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0
2151	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2152	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2153	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2154	 255	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2155	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x25E
2156	 259	JUMPI		 	 
- stack 0: 0x5A0
2157	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5A0
2158	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2159	 260	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
2160	 261	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
- stack 0: 0xE0
2161	 263	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x240FFE8
2162	 264	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x240FFE8
- stack 0: 0xFFFF
2163	 267	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFE8
2164	 268	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xFFE8
- stack 0: 0x1
2165	 26A	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2166	 26B	ADD		 	 
- stack 0: 0x588
2167	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFF
2168	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x588
2169	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2170	 273	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
2171	 274	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
- stack 0: 0xF0
2172	 276	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86
2173	 277	JUMP		 	 
- stack 0: 0x588
2174	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x588
2175	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2176	 88	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
2177	 89	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x86000A00A0001002C4000001E8000002070001022600020240FFE800C20001
- stack 0: 0xE0
2178	 8B	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86000A
2179	 8C	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x86000A
- stack 0: 0xFFFF
2180	 8F	AND		 	 
- stack 1: 0x588
- stack 0: 0xA
2181	 90	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xA
- stack 0: 0x1
2182	 92	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xA
2183	 93	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xA
- stack 0: 0x20
2184	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
2185	 97	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2186	 99	ADD		 	 
- stack 0: 0x58C
2187	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2188	 9B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
2189	 9C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
- stack 0: 0xF0
2190	 9E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0
2191	 9F	JUMP		 	 
- stack 0: 0x58C
2192	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x58C
2193	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2194	 A2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
2195	 A3	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xA0001002C4000001E8000002070001022600020240FFE800C2000100DC0013
- stack 0: 0xE0
2196	 A5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA00010
2197	 A6	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xA00010
- stack 0: 0xFFFF
2198	 A9	AND		 	 
- stack 1: 0x58C
- stack 0: 0x10
2199	 AA	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0x1
2200	 AC	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x10
2201	 AD	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0x20
2202	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0xA
2203	 B1	PUSH1	03	 	 
- stack 3: 0x58C
- stack 2: 0x10
- stack 1: 0xA
- stack 0: 0x3
2204	 B3	SIGNEXTEND		 	 
- stack 2: 0x58C
- stack 1: 0x10
- stack 0: 0xA
2205	 B4	SLT		 	 
- stack 1: 0x58C
- stack 0: 0x1
2206	 B5	PUSH2	0060	 	 
- stack 2: 0x58C
- stack 1: 0x1
- stack 0: 0x60
2207	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x58C
2208	 B9	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2209	 BB	ADD		 	 
- stack 0: 0x590
2210	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2211	 BD	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
2212	 BE	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
- stack 0: 0xF0
2213	 C0	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2C4
2214	 C1	JUMP		 	 
- stack 0: 0x590
2215	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2216	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2217	 2C6	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
2218	 2C7	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x2C4000001E8000002070001022600020240FFE800C2000100DC0013028200D8
- stack 0: 0xE0
2219	 2C9	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2C40000
2220	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2221	 2CD	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2222	 2CE	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2223	 2D0	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2224	 2D1	POP		 	 
- stack 0: 0x590
2225	 2D2	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2226	 2D4	ADD		 	 
- stack 0: 0x594
2227	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2228	 2D6	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
2229	 2D7	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
- stack 0: 0xF0
2230	 2D9	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E8
2231	 2DA	JUMP		 	 
- stack 0: 0x594
2232	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2233	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2234	 1EA	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
2235	 1EB	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x1E8000002070001022600020240FFE800C2000100DC0013028200D801CE0000
- stack 0: 0xE0
2236	 1ED	SHR		 	 
- stack 1: 0x594
- stack 0: 0x1E80000
2237	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x1E80000
- stack 0: 0xFFFF
2238	 1F1	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2239	 1F2	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2240	 1F4	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2241	 1F5	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2242	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2243	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0x1
2244	 1FA	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0x1
- stack 0: 0xC0
2245	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2246	 1FE	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2247	 200	ADD		 	 
- stack 0: 0x598
2248	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2249	 202	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
2250	 203	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
- stack 0: 0xF0
2251	 205	SHR		 	 
- stack 1: 0x598
- stack 0: 0x207
2252	 206	JUMP		 	 
- stack 0: 0x598
2253	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2254	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2255	 209	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
2256	 20A	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x2070001022600020240FFE800C2000100DC0013028200D801CE000000860010
- stack 0: 0xE0
2257	 20C	SHR		 	 
- stack 1: 0x598
- stack 0: 0x2070001
2258	 20D	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x2070001
- stack 0: 0xFFFF
2259	 210	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2260	 211	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2261	 213	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2262	 214	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2263	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2264	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x2
2265	 219	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x80
2266	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2267	 21D	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2268	 21F	ADD		 	 
- stack 0: 0x59C
2269	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2270	 221	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
2271	 222	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
- stack 0: 0xF0
2272	 224	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x226
2273	 225	JUMP		 	 
- stack 0: 0x59C
2274	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2275	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2276	 228	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
2277	 229	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x22600020240FFE800C2000100DC0013028200D801CE00000086001000A00009
- stack 0: 0xE0
2278	 22B	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2260002
2279	 22C	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2260002
- stack 0: 0xFFFF
2280	 22F	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2281	 230	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2282	 232	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2283	 233	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2284	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2285	 237	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2286	 239	ADD		 	 
- stack 0: 0x5A0
2287	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2288	 23B	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
2289	 23C	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x240FFE800C2000100DC0013028200D801CE00000086001000A0000902C40000
- stack 0: 0xF0
2290	 23E	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x240
2291	 23F	JUMP		 	 
- stack 0: 0x5A0
2292	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A0
2293	 241	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2294	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x2
2295	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2296	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x2
2297	 24B	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xA0
2298	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2299	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2300	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2301	 255	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2302	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x25E
2303	 259	JUMPI		 	 
- stack 0: 0x5A0
2304	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x5A0
- stack 0: 0x278
2305	 25D	JUMP		 	 
- stack 0: 0x5A0
2306	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5A0
2307	 279	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2308	 27B	ADD		 	 
- stack 0: 0x5A4
2309	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2310	 27D	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xC2000100DC0013028200D801CE00000086001000A0000902C4000002C40000
2311	 27E	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xC2000100DC0013028200D801CE00000086001000A0000902C4000002C40000
- stack 0: 0xF0
2312	 280	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xC2
2313	 281	JUMP		 	 
- stack 0: 0x5A4
2314	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5A4
2315	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2316	 C4	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xC2000100DC0013028200D801CE00000086001000A0000902C4000002C40000
2317	 C5	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xC2000100DC0013028200D801CE00000086001000A0000902C4000002C40000
- stack 0: 0xE0
2318	 C7	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xC20001
2319	 C8	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xC20001
- stack 0: 0xFFFF
2320	 CB	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2321	 CC	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x1
2322	 CE	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1
2323	 CF	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0x1
- stack 0: 0x3A0
2324	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A4
2325	 D3	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2326	 D5	ADD		 	 
- stack 0: 0x5A8
2327	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2328	 D7	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xDC0013028200D801CE00000086001000A0000902C4000002C4000001E80000
2329	 D8	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xDC0013028200D801CE00000086001000A0000902C4000002C4000001E80000
- stack 0: 0xF0
2330	 DA	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xDC
2331	 DB	JUMP		 	 
- stack 0: 0x5A8
2332	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A8
2333	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2334	 DE	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xDC0013028200D801CE00000086001000A0000902C4000002C4000001E80000
2335	 DF	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0xDC0013028200D801CE00000086001000A0000902C4000002C4000001E80000
- stack 0: 0xE0
2336	 E1	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xDC0013
2337	 E2	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0xDC0013
- stack 0: 0xFFFF
2338	 E5	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x13
2339	 E6	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x13
- stack 0: 0x1
2340	 E8	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x13
2341	 E9	PUSH2	0380	 	 
- stack 2: 0x5A8
- stack 1: 0x13
- stack 0: 0x380
2342	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A8
2343	 ED	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2344	 EF	ADD		 	 
- stack 0: 0x5AC
2345	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2346	 F1	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x28200D801CE00000086001000A0000902C4000002C4000001E8000002070001
2347	 F2	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x28200D801CE00000086001000A0000902C4000002C4000001E8000002070001
- stack 0: 0xF0
2348	 F4	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x282
2349	 F5	JUMP		 	 
- stack 0: 0x5AC
2350	 282	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,104(ignore imm)
- stack 0: 0x5AC
2351	 283	PUSH2	00C0	 	 
- stack 1: 0x5AC
- stack 0: 0xC0
2352	 286	MLOAD		 	  ;; # read from x6
- stack 1: 0x5AC
- stack 0: 0x1
2353	 287	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2354	 28C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x1
2355	 28D	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x3A0
2356	 290	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2357	 291	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2358	 296	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2359	 297	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2360	 298	PUSH2	02A0	 ;; _neq_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x2A0
2361	 29B	JUMPI		 	 
- stack 0: 0x5AC
2362	 29C	PUSH2	02BA	 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 1: 0x5AC
- stack 0: 0x2BA
2363	 29F	JUMP		 	 
- stack 0: 0x5AC
2364	 2BA	JUMPDEST		 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 0: 0x5AC
2365	 2BB	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2366	 2BD	ADD		 	 
- stack 0: 0x5B0
2367	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2368	 2BF	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1CE00000086001000A0000902C4000002C4000001E800000207000102260002
2369	 2C0	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x1CE00000086001000A0000902C4000002C4000001E800000207000102260002
- stack 0: 0xF0
2370	 2C2	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1CE
2371	 2C3	JUMP		 	 
- stack 0: 0x5B0
2372	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B0
2373	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2374	 1D0	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x1CE00000086001000A0000902C4000002C4000001E800000207000102260002
2375	 1D1	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x1CE00000086001000A0000902C4000002C4000001E800000207000102260002
- stack 0: 0xE0
2376	 1D3	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x1CE0000
2377	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2378	 1D7	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2379	 1D8	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x1
2380	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2381	 1DB	PUSH2	0080	 	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x80
2382	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B0
2383	 1DF	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2384	 1E1	ADD		 	 
- stack 0: 0x5B4
2385	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2386	 1E3	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
2387	 1E4	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
- stack 0: 0xF0
2388	 1E6	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x86
2389	 1E7	JUMP		 	 
- stack 0: 0x5B4
2390	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5B4
2391	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2392	 88	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
2393	 89	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
- stack 0: 0xE0
2394	 8B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x860010
2395	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x860010
- stack 0: 0xFFFF
2396	 8F	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x10
2397	 90	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x10
- stack 0: 0x1
2398	 92	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x10
2399	 93	PUSH2	0020	 	 
- stack 2: 0x5B4
- stack 1: 0x10
- stack 0: 0x20
2400	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B4
2401	 97	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2402	 99	ADD		 	 
- stack 0: 0x5B8
2403	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2404	 9B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
2405	 9C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
- stack 0: 0xF0
2406	 9E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xA0
2407	 9F	JUMP		 	 
- stack 0: 0x5B8
2408	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x5B8
2409	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2410	 A2	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
2411	 A3	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
- stack 0: 0xE0
2412	 A5	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xA00009
2413	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xA00009
- stack 0: 0xFFFF
2414	 A9	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x9
2415	 AA	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x1
2416	 AC	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x9
2417	 AD	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x20
2418	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x10
2419	 B1	PUSH1	03	 	 
- stack 3: 0x5B8
- stack 2: 0x9
- stack 1: 0x10
- stack 0: 0x3
2420	 B3	SIGNEXTEND		 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x10
2421	 B4	SLT		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2422	 B5	PUSH2	0060	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x60
2423	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5B8
2424	 B9	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2425	 BB	ADD		 	 
- stack 0: 0x5BC
2426	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2427	 BD	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
2428	 BE	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
- stack 0: 0xF0
2429	 C0	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4
2430	 C1	JUMP		 	 
- stack 0: 0x5BC
2431	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5BC
2432	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2433	 2C6	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
2434	 2C7	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
- stack 0: 0xE0
2435	 2C9	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2C40000
2436	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2437	 2CD	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2438	 2CE	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2439	 2D0	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2440	 2D1	POP		 	 
- stack 0: 0x5BC
2441	 2D2	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2442	 2D4	ADD		 	 
- stack 0: 0x5C0
2443	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2444	 2D6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
2445	 2D7	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
- stack 0: 0xF0
2446	 2D9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4
2447	 2DA	JUMP		 	 
- stack 0: 0x5C0
2448	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C0
2449	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2450	 2C6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
2451	 2C7	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
- stack 0: 0xE0
2452	 2C9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2C40000
2453	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2454	 2CD	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2455	 2CE	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2456	 2D0	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2457	 2D1	POP		 	 
- stack 0: 0x5C0
2458	 2D2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2459	 2D4	ADD		 	 
- stack 0: 0x5C4
2460	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2461	 2D6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
2462	 2D7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
- stack 0: 0xF0
2463	 2D9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8
2464	 2DA	JUMP		 	 
- stack 0: 0x5C4
2465	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5C4
2466	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2467	 1EA	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
2468	 1EB	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
- stack 0: 0xE0
2469	 1ED	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1E80000
2470	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x1E80000
- stack 0: 0xFFFF
2471	 1F1	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2472	 1F2	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2473	 1F4	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2474	 1F5	PUSH2	0060	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x60
2475	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x0
2476	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5C4
- stack 0: 0x0
2477	 1FA	PUSH2	00C0	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0xC0
2478	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x5C4
2479	 1FE	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2480	 200	ADD		 	 
- stack 0: 0x5C8
2481	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2482	 202	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
2483	 203	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
- stack 0: 0xF0
2484	 205	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x207
2485	 206	JUMP		 	 
- stack 0: 0x5C8
2486	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C8
2487	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2488	 209	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
2489	 20A	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
- stack 0: 0xE0
2490	 20C	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001
2491	 20D	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001
- stack 0: 0xFFFF
2492	 210	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2493	 211	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2494	 213	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2495	 214	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2496	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x0
2497	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C8
- stack 0: 0x1
2498	 219	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2499	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
2500	 21D	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2501	 21F	ADD		 	 
- stack 0: 0x5CC
2502	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2503	 221	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
2504	 222	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
- stack 0: 0xF0
2505	 224	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x226
2506	 225	JUMP		 	 
- stack 0: 0x5CC
2507	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5CC
2508	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2509	 228	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
2510	 229	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
- stack 0: 0xE0
2511	 22B	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2260002
2512	 22C	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2260002
- stack 0: 0xFFFF
2513	 22F	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2514	 230	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x1
2515	 232	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2516	 233	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xA0
2517	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x5CC
2518	 237	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2519	 239	ADD		 	 
- stack 0: 0x5D0
2520	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2521	 23B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
2522	 23C	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
- stack 0: 0xF0
2523	 23E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x240
2524	 23F	JUMP		 	 
- stack 0: 0x5D0
2525	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5D0
2526	 241	PUSH2	0080	 	 
- stack 1: 0x5D0
- stack 0: 0x80
2527	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D0
- stack 0: 0x1
2528	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2529	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x1
2530	 24B	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0xA0
2531	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x2
2532	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2533	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x2
2534	 255	SUB		 	 
- stack 1: 0x5D0
- stack 0: 0x1
2535	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5D0
- stack 1: 0x1
- stack 0: 0x25E
2536	 259	JUMPI		 	 
- stack 0: 0x5D0
2537	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5D0
2538	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2539	 260	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
2540	 261	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
- stack 0: 0xE0
2541	 263	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x240FFE4
2542	 264	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x240FFE4
- stack 0: 0xFFFF
2543	 267	AND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFE4
2544	 268	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0xFFE4
- stack 0: 0x1
2545	 26A	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2546	 26B	ADD		 	 
- stack 0: 0x5B4
2547	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFF
2548	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B4
2549	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2550	 273	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
2551	 274	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
- stack 0: 0xF0
2552	 276	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x86
2553	 277	JUMP		 	 
- stack 0: 0x5B4
2554	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5B4
2555	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2556	 88	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
2557	 89	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x86001000A0000902C4000002C4000001E8000002070001022600020240FFE4
- stack 0: 0xE0
2558	 8B	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x860010
2559	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x860010
- stack 0: 0xFFFF
2560	 8F	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x10
2561	 90	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x10
- stack 0: 0x1
2562	 92	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x10
2563	 93	PUSH2	0020	 	 
- stack 2: 0x5B4
- stack 1: 0x10
- stack 0: 0x20
2564	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B4
2565	 97	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2566	 99	ADD		 	 
- stack 0: 0x5B8
2567	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2568	 9B	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
2569	 9C	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
- stack 0: 0xF0
2570	 9E	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xA0
2571	 9F	JUMP		 	 
- stack 0: 0x5B8
2572	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x5B8
2573	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2574	 A2	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
2575	 A3	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0xA0000902C4000002C4000001E8000002070001022600020240FFE400C20000
- stack 0: 0xE0
2576	 A5	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0xA00009
2577	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0xA00009
- stack 0: 0xFFFF
2578	 A9	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x9
2579	 AA	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x1
2580	 AC	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x9
2581	 AD	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x20
2582	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x10
2583	 B1	PUSH1	03	 	 
- stack 3: 0x5B8
- stack 2: 0x9
- stack 1: 0x10
- stack 0: 0x3
2584	 B3	SIGNEXTEND		 	 
- stack 2: 0x5B8
- stack 1: 0x9
- stack 0: 0x10
2585	 B4	SLT		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2586	 B5	PUSH2	0060	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x60
2587	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5B8
2588	 B9	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2589	 BB	ADD		 	 
- stack 0: 0x5BC
2590	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2591	 BD	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
2592	 BE	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
- stack 0: 0xF0
2593	 C0	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4
2594	 C1	JUMP		 	 
- stack 0: 0x5BC
2595	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5BC
2596	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2597	 2C6	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
2598	 2C7	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x2C4000002C4000001E8000002070001022600020240FFE400C2000000DC0014
- stack 0: 0xE0
2599	 2C9	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2C40000
2600	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2601	 2CD	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2602	 2CE	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x1
2603	 2D0	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x0
2604	 2D1	POP		 	 
- stack 0: 0x5BC
2605	 2D2	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2606	 2D4	ADD		 	 
- stack 0: 0x5C0
2607	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2608	 2D6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
2609	 2D7	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
- stack 0: 0xF0
2610	 2D9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4
2611	 2DA	JUMP		 	 
- stack 0: 0x5C0
2612	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C0
2613	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2614	 2C6	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
2615	 2C7	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x2C4000001E8000002070001022600020240FFE400C2000000DC0014028200A8
- stack 0: 0xE0
2616	 2C9	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x2C40000
2617	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x2C40000
- stack 0: 0xFFFF
2618	 2CD	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2619	 2CE	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
2620	 2D0	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2621	 2D1	POP		 	 
- stack 0: 0x5C0
2622	 2D2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2623	 2D4	ADD		 	 
- stack 0: 0x5C4
2624	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2625	 2D6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
2626	 2D7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
- stack 0: 0xF0
2627	 2D9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8
2628	 2DA	JUMP		 	 
- stack 0: 0x5C4
2629	 1E8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5C4
2630	 1E9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2631	 1EA	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
2632	 1EB	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x1E8000002070001022600020240FFE400C2000000DC0014028200A801CE0000
- stack 0: 0xE0
2633	 1ED	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x1E80000
2634	 1EE	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x1E80000
- stack 0: 0xFFFF
2635	 1F1	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2636	 1F2	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2637	 1F4	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2638	 1F5	PUSH2	0060	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x60
2639	 1F8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x0
2640	 1F9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5C4
- stack 0: 0x0
2641	 1FA	PUSH2	00C0	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0xC0
2642	 1FD	MSTORE		 	  ;; # store to x6
- stack 0: 0x5C4
2643	 1FE	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2644	 200	ADD		 	 
- stack 0: 0x5C8
2645	 201	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2646	 202	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
2647	 203	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
- stack 0: 0xF0
2648	 205	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x207
2649	 206	JUMP		 	 
- stack 0: 0x5C8
2650	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5C8
2651	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2652	 209	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
2653	 20A	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001022600020240FFE400C2000000DC0014028200A801CE00000086000B
- stack 0: 0xE0
2654	 20C	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2070001
2655	 20D	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2070001
- stack 0: 0xFFFF
2656	 210	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2657	 211	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2658	 213	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x1
2659	 214	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x80
2660	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x5C8
- stack 1: 0x1
- stack 0: 0x1
2661	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x5C8
- stack 0: 0x2
2662	 219	PUSH2	0080	 	 
- stack 2: 0x5C8
- stack 1: 0x2
- stack 0: 0x80
2663	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C8
2664	 21D	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2665	 21F	ADD		 	 
- stack 0: 0x5CC
2666	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2667	 221	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
2668	 222	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
- stack 0: 0xF0
2669	 224	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x226
2670	 225	JUMP		 	 
- stack 0: 0x5CC
2671	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5CC
2672	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2673	 228	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
2674	 229	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x22600020240FFE400C2000000DC0014028200A801CE00000086000B00A0000F
- stack 0: 0xE0
2675	 22B	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2260002
2676	 22C	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2260002
- stack 0: 0xFFFF
2677	 22F	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2678	 230	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x1
2679	 232	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x2
2680	 233	PUSH2	00A0	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0xA0
2681	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x5CC
2682	 237	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2683	 239	ADD		 	 
- stack 0: 0x5D0
2684	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2685	 23B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
2686	 23C	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x240FFE400C2000000DC0014028200A801CE00000086000B00A0000F02070001
- stack 0: 0xF0
2687	 23E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x240
2688	 23F	JUMP		 	 
- stack 0: 0x5D0
2689	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5D0
2690	 241	PUSH2	0080	 	 
- stack 1: 0x5D0
- stack 0: 0x80
2691	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D0
- stack 0: 0x2
2692	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2693	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D0
- stack 0: 0x2
2694	 24B	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2695	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x2
2696	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2697	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x2
2698	 255	SUB		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2699	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x25E
2700	 259	JUMPI		 	 
- stack 0: 0x5D0
2701	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x5D0
- stack 0: 0x278
2702	 25D	JUMP		 	 
- stack 0: 0x5D0
2703	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5D0
2704	 279	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2705	 27B	ADD		 	 
- stack 0: 0x5D4
2706	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2707	 27D	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xC2000000DC0014028200A801CE00000086000B00A0000F0207000102260002
2708	 27E	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xC2000000DC0014028200A801CE00000086000B00A0000F0207000102260002
- stack 0: 0xF0
2709	 280	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xC2
2710	 281	JUMP		 	 
- stack 0: 0x5D4
2711	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5D4
2712	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2713	 C4	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xC2000000DC0014028200A801CE00000086000B00A0000F0207000102260002
2714	 C5	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0xC2000000DC0014028200A801CE00000086000B00A0000F0207000102260002
- stack 0: 0xE0
2715	 C7	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xC20000
2716	 C8	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xC20000
- stack 0: 0xFFFF
2717	 CB	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2718	 CC	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2719	 CE	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2720	 CF	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x3A0
2721	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
2722	 D3	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2723	 D5	ADD		 	 
- stack 0: 0x5D8
2724	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2725	 D7	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xDC0014028200A801CE00000086000B00A0000F02070001022600020240FFF0
2726	 D8	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xDC0014028200A801CE00000086000B00A0000F02070001022600020240FFF0
- stack 0: 0xF0
2727	 DA	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xDC
2728	 DB	JUMP		 	 
- stack 0: 0x5D8
2729	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D8
2730	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2731	 DE	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xDC0014028200A801CE00000086000B00A0000F02070001022600020240FFF0
2732	 DF	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0xDC0014028200A801CE00000086000B00A0000F02070001022600020240FFF0
- stack 0: 0xE0
2733	 E1	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xDC0014
2734	 E2	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xDC0014
- stack 0: 0xFFFF
2735	 E5	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x14
2736	 E6	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x14
- stack 0: 0x1
2737	 E8	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x14
2738	 E9	PUSH2	0380	 	 
- stack 2: 0x5D8
- stack 1: 0x14
- stack 0: 0x380
2739	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D8
2740	 ED	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2741	 EF	ADD		 	 
- stack 0: 0x5DC
2742	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2743	 F1	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x28200A801CE00000086000B00A0000F02070001022600020240FFF000C20001
2744	 F2	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x28200A801CE00000086000B00A0000F02070001022600020240FFF000C20001
- stack 0: 0xF0
2745	 F4	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x282
2746	 F5	JUMP		 	 
- stack 0: 0x5DC
2747	 282	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,104(ignore imm)
- stack 0: 0x5DC
2748	 283	PUSH2	00C0	 	 
- stack 1: 0x5DC
- stack 0: 0xC0
2749	 286	MLOAD		 	  ;; # read from x6
- stack 1: 0x5DC
- stack 0: 0x0
2750	 287	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2751	 28C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5DC
- stack 0: 0x0
2752	 28D	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x3A0
2753	 290	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x0
2754	 291	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5DC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2755	 296	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x0
2756	 297	SUB		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2757	 298	PUSH2	02A0	 ;; _neq_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x2A0
2758	 29B	JUMPI		 	 
- stack 0: 0x5DC
2759	 29C	PUSH2	02BA	 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 1: 0x5DC
- stack 0: 0x2BA
2760	 29F	JUMP		 	 
- stack 0: 0x5DC
2761	 2BA	JUMPDEST		 ;; _neq_after_ff74a1d4104d7c52d091616956e44d64e0c65f7de2f6e02a95f2d084413b6a88	 
- stack 0: 0x5DC
2762	 2BB	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2763	 2BD	ADD		 	 
- stack 0: 0x5E0
2764	 2BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2765	 2BF	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1CE00000086000B00A0000F02070001022600020240FFF000C2000100DC0015
2766	 2C0	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x1CE00000086000B00A0000F02070001022600020240FFF000C2000100DC0015
- stack 0: 0xF0
2767	 2C2	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1CE
2768	 2C3	JUMP		 	 
- stack 0: 0x5E0
2769	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E0
2770	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2771	 1D0	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x1CE00000086000B00A0000F02070001022600020240FFF000C2000100DC0015
2772	 1D1	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x1CE00000086000B00A0000F02070001022600020240FFF000C2000100DC0015
- stack 0: 0xE0
2773	 1D3	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x1CE0000
2774	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
2775	 1D7	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2776	 1D8	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x1
2777	 1DA	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2778	 1DB	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x80
2779	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
2780	 1DF	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2781	 1E1	ADD		 	 
- stack 0: 0x5E4
2782	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2783	 1E3	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
2784	 1E4	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
- stack 0: 0xF0
2785	 1E6	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
2786	 1E7	JUMP		 	 
- stack 0: 0x5E4
2787	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E4
2788	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2789	 88	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
2790	 89	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
- stack 0: 0xE0
2791	 8B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B
2792	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B
- stack 0: 0xFFFF
2793	 8F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xB
2794	 90	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xB
- stack 0: 0x1
2795	 92	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xB
2796	 93	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xB
- stack 0: 0x20
2797	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
2798	 97	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2799	 99	ADD		 	 
- stack 0: 0x5E8
2800	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2801	 9B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
2802	 9C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
- stack 0: 0xF0
2803	 9E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
2804	 9F	JUMP		 	 
- stack 0: 0x5E8
2805	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x5E8
2806	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2807	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
2808	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
- stack 0: 0xE0
2809	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F
2810	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F
- stack 0: 0xFFFF
2811	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xF
2812	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0x1
2813	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xF
2814	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0x20
2815	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0xB
2816	 B1	PUSH1	03	 	 
- stack 3: 0x5E8
- stack 2: 0xF
- stack 1: 0xB
- stack 0: 0x3
2817	 B3	SIGNEXTEND		 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0xB
2818	 B4	SLT		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2819	 B5	PUSH2	0060	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x60
2820	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E8
2821	 B9	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2822	 BB	ADD		 	 
- stack 0: 0x5EC
2823	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2824	 BD	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
2825	 BE	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
- stack 0: 0xF0
2826	 C0	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x207
2827	 C1	JUMP		 	 
- stack 0: 0x5EC
2828	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
2829	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2830	 209	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
2831	 20A	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
- stack 0: 0xE0
2832	 20C	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001
2833	 20D	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001
- stack 0: 0xFFFF
2834	 210	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2835	 211	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
2836	 213	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2837	 214	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
2838	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x0
2839	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x1
2840	 219	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
2841	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2842	 21D	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2843	 21F	ADD		 	 
- stack 0: 0x5F0
2844	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2845	 221	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
2846	 222	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
- stack 0: 0xF0
2847	 224	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x226
2848	 225	JUMP		 	 
- stack 0: 0x5F0
2849	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
2850	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2851	 228	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
2852	 229	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
- stack 0: 0xE0
2853	 22B	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2260002
2854	 22C	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2260002
- stack 0: 0xFFFF
2855	 22F	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2856	 230	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
2857	 232	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2858	 233	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
2859	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
2860	 237	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2861	 239	ADD		 	 
- stack 0: 0x5F4
2862	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2863	 23B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
2864	 23C	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
- stack 0: 0xF0
2865	 23E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x240
2866	 23F	JUMP		 	 
- stack 0: 0x5F4
2867	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5F4
2868	 241	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
2869	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x1
2870	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2871	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x1
2872	 24B	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0xA0
2873	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
2874	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2875	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x2
2876	 255	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x1
2877	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5F4
- stack 1: 0x1
- stack 0: 0x25E
2878	 259	JUMPI		 	 
- stack 0: 0x5F4
2879	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5F4
2880	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2881	 260	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
2882	 261	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
- stack 0: 0xE0
2883	 263	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x240FFF0
2884	 264	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x240FFF0
- stack 0: 0xFFFF
2885	 267	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFF0
2886	 268	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFFF0
- stack 0: 0x1
2887	 26A	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2888	 26B	ADD		 	 
- stack 0: 0x5E4
2889	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFF
2890	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5E4
2891	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2892	 273	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
2893	 274	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
- stack 0: 0xF0
2894	 276	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86
2895	 277	JUMP		 	 
- stack 0: 0x5E4
2896	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5E4
2897	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2898	 88	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
2899	 89	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B00A0000F02070001022600020240FFF000C2000100DC001500F60084
- stack 0: 0xE0
2900	 8B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x86000B
2901	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x86000B
- stack 0: 0xFFFF
2902	 8F	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xB
2903	 90	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xB
- stack 0: 0x1
2904	 92	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xB
2905	 93	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0xB
- stack 0: 0x20
2906	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
2907	 97	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2908	 99	ADD		 	 
- stack 0: 0x5E8
2909	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2910	 9B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
2911	 9C	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
- stack 0: 0xF0
2912	 9E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0
2913	 9F	JUMP		 	 
- stack 0: 0x5E8
2914	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x5E8
2915	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2916	 A2	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
2917	 A3	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F02070001022600020240FFF000C2000100DC001500F6008401CE0000
- stack 0: 0xE0
2918	 A5	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xA0000F
2919	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xA0000F
- stack 0: 0xFFFF
2920	 A9	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xF
2921	 AA	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0x1
2922	 AC	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xF
2923	 AD	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0x20
2924	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0xB
2925	 B1	PUSH1	03	 	 
- stack 3: 0x5E8
- stack 2: 0xF
- stack 1: 0xB
- stack 0: 0x3
2926	 B3	SIGNEXTEND		 	 
- stack 2: 0x5E8
- stack 1: 0xF
- stack 0: 0xB
2927	 B4	SLT		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2928	 B5	PUSH2	0060	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x60
2929	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E8
2930	 B9	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2931	 BB	ADD		 	 
- stack 0: 0x5EC
2932	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2933	 BD	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
2934	 BE	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
- stack 0: 0xF0
2935	 C0	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x207
2936	 C1	JUMP		 	 
- stack 0: 0x5EC
2937	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5EC
2938	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2939	 209	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
2940	 20A	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001022600020240FFF000C2000100DC001500F6008401CE000000860011
- stack 0: 0xE0
2941	 20C	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x2070001
2942	 20D	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x2070001
- stack 0: 0xFFFF
2943	 210	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2944	 211	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
2945	 213	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x1
2946	 214	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x80
2947	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x5EC
- stack 1: 0x1
- stack 0: 0x1
2948	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x5EC
- stack 0: 0x2
2949	 219	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x80
2950	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2951	 21D	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2952	 21F	ADD		 	 
- stack 0: 0x5F0
2953	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2954	 221	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
2955	 222	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
- stack 0: 0xF0
2956	 224	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x226
2957	 225	JUMP		 	 
- stack 0: 0x5F0
2958	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5F0
2959	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2960	 228	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
2961	 229	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x22600020240FFF000C2000100DC001500F6008401CE00000086001102C40000
- stack 0: 0xE0
2962	 22B	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2260002
2963	 22C	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2260002
- stack 0: 0xFFFF
2964	 22F	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2965	 230	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0x1
2966	 232	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x2
2967	 233	PUSH2	00A0	 	 
- stack 2: 0x5F0
- stack 1: 0x2
- stack 0: 0xA0
2968	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x5F0
2969	 237	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2970	 239	ADD		 	 
- stack 0: 0x5F4
2971	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2972	 23B	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
2973	 23C	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x240FFF000C2000100DC001500F6008401CE00000086001102C4000000A00008
- stack 0: 0xF0
2974	 23E	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x240
2975	 23F	JUMP		 	 
- stack 0: 0x5F4
2976	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5F4
2977	 241	PUSH2	0080	 	 
- stack 1: 0x5F4
- stack 0: 0x80
2978	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x5F4
- stack 0: 0x2
2979	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2980	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x2
2981	 24B	PUSH2	00A0	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xA0
2982	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
2983	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2984	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
2985	 255	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2986	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x25E
2987	 259	JUMPI		 	 
- stack 0: 0x5F4
2988	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x5F4
- stack 0: 0x278
2989	 25D	JUMP		 	 
- stack 0: 0x5F4
2990	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x5F4
2991	 279	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2992	 27B	ADD		 	 
- stack 0: 0x5F8
2993	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2994	 27D	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xC2000100DC001500F6008401CE00000086001102C4000000A0000802070001
2995	 27E	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xC2000100DC001500F6008401CE00000086001102C4000000A0000802070001
- stack 0: 0xF0
2996	 280	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xC2
2997	 281	JUMP		 	 
- stack 0: 0x5F8
2998	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5F8
2999	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3000	 C4	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xC2000100DC001500F6008401CE00000086001102C4000000A0000802070001
3001	 C5	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xC2000100DC001500F6008401CE00000086001102C4000000A0000802070001
- stack 0: 0xE0
3002	 C7	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xC20001
3003	 C8	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xC20001
- stack 0: 0xFFFF
3004	 CB	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3005	 CC	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
3006	 CE	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
3007	 CF	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x3A0
3008	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
3009	 D3	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3010	 D5	ADD		 	 
- stack 0: 0x5FC
3011	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3012	 D7	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xDC001500F6008401CE00000086001102C4000000A000080207000102260002
3013	 D8	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xDC001500F6008401CE00000086001102C4000000A000080207000102260002
- stack 0: 0xF0
3014	 DA	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xDC
3015	 DB	JUMP		 	 
- stack 0: 0x5FC
3016	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5FC
3017	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3018	 DE	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xDC001500F6008401CE00000086001102C4000000A000080207000102260002
3019	 DF	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xDC001500F6008401CE00000086001102C4000000A000080207000102260002
- stack 0: 0xE0
3020	 E1	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xDC0015
3021	 E2	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xDC0015
- stack 0: 0xFFFF
3022	 E5	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x15
3023	 E6	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x15
- stack 0: 0x1
3024	 E8	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x15
3025	 E9	PUSH2	0380	 	 
- stack 2: 0x5FC
- stack 1: 0x15
- stack 0: 0x380
3026	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x5FC
3027	 ED	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3028	 EF	ADD		 	 
- stack 0: 0x600
3029	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3030	 F1	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xF6008401CE00000086001102C4000000A0000802070001022600020240FFEC
3031	 F2	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xF6008401CE00000086001102C4000000A0000802070001022600020240FFEC
- stack 0: 0xF0
3032	 F4	SHR		 	 
- stack 1: 0x600
- stack 0: 0xF6
3033	 F5	JUMP		 	 
- stack 0: 0x600
3034	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x600
3035	 F7	PUSH2	0060	 	 
- stack 1: 0x600
- stack 0: 0x60
3036	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x600
- stack 0: 0x1
3037	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3038	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0x1
3039	 101	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x3A0
3040	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3041	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3042	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
3043	 10B	SUB		 	 
- stack 1: 0x600
- stack 0: 0x0
3044	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x114
3045	 10F	JUMPI		 	 
- stack 0: 0x600
3046	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x600
- stack 0: 0x12E
3047	 113	JUMP		 	 
- stack 0: 0x600
3048	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x600
3049	 12F	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3050	 131	ADD		 	 
- stack 0: 0x604
3051	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3052	 133	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1CE00000086001102C4000000A0000802070001022600020240FFEC00C20000
3053	 134	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x1CE00000086001102C4000000A0000802070001022600020240FFEC00C20000
- stack 0: 0xF0
3054	 136	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1CE
3055	 137	JUMP		 	 
- stack 0: 0x604
3056	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x604
3057	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3058	 1D0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x1CE00000086001102C4000000A0000802070001022600020240FFEC00C20000
3059	 1D1	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x1CE00000086001102C4000000A0000802070001022600020240FFEC00C20000
- stack 0: 0xE0
3060	 1D3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x1CE0000
3061	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
3062	 1D7	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
3063	 1D8	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
3064	 1DA	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
3065	 1DB	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x80
3066	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
3067	 1DF	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3068	 1E1	ADD		 	 
- stack 0: 0x608
3069	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3070	 1E3	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
3071	 1E4	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
- stack 0: 0xF0
3072	 1E6	SHR		 	 
- stack 1: 0x608
- stack 0: 0x86
3073	 1E7	JUMP		 	 
- stack 0: 0x608
3074	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x608
3075	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3076	 88	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
3077	 89	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
- stack 0: 0xE0
3078	 8B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x860011
3079	 8C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x860011
- stack 0: 0xFFFF
3080	 8F	AND		 	 
- stack 1: 0x608
- stack 0: 0x11
3081	 90	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x1
3082	 92	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x11
3083	 93	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x20
3084	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x608
3085	 97	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3086	 99	ADD		 	 
- stack 0: 0x60C
3087	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3088	 9B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
3089	 9C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
- stack 0: 0xF0
3090	 9E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2C4
3091	 9F	JUMP		 	 
- stack 0: 0x60C
3092	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x60C
3093	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3094	 2C6	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
3095	 2C7	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
- stack 0: 0xE0
3096	 2C9	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2C40000
3097	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3098	 2CD	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3099	 2CE	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3100	 2D0	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3101	 2D1	POP		 	 
- stack 0: 0x60C
3102	 2D2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3103	 2D4	ADD		 	 
- stack 0: 0x610
3104	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3105	 2D6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
3106	 2D7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
- stack 0: 0xF0
3107	 2D9	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA0
3108	 2DA	JUMP		 	 
- stack 0: 0x610
3109	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x610
3110	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3111	 A2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
3112	 A3	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
- stack 0: 0xE0
3113	 A5	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA00008
3114	 A6	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xA00008
- stack 0: 0xFFFF
3115	 A9	AND		 	 
- stack 1: 0x610
- stack 0: 0x8
3116	 AA	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x1
3117	 AC	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x8
3118	 AD	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x20
3119	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x11
3120	 B1	PUSH1	03	 	 
- stack 3: 0x610
- stack 2: 0x8
- stack 1: 0x11
- stack 0: 0x3
3121	 B3	SIGNEXTEND		 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x11
3122	 B4	SLT		 	 
- stack 1: 0x610
- stack 0: 0x0
3123	 B5	PUSH2	0060	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x60
3124	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x610
3125	 B9	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3126	 BB	ADD		 	 
- stack 0: 0x614
3127	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3128	 BD	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
3129	 BE	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
- stack 0: 0xF0
3130	 C0	SHR		 	 
- stack 1: 0x614
- stack 0: 0x207
3131	 C1	JUMP		 	 
- stack 0: 0x614
3132	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x614
3133	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3134	 209	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
3135	 20A	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
- stack 0: 0xE0
3136	 20C	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2070001
3137	 20D	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2070001
- stack 0: 0xFFFF
3138	 210	AND		 	 
- stack 1: 0x614
- stack 0: 0x1
3139	 211	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3140	 213	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x1
3141	 214	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3142	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x0
3143	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x614
- stack 0: 0x1
3144	 219	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3145	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x614
3146	 21D	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3147	 21F	ADD		 	 
- stack 0: 0x618
3148	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3149	 221	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
3150	 222	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
- stack 0: 0xF0
3151	 224	SHR		 	 
- stack 1: 0x618
- stack 0: 0x226
3152	 225	JUMP		 	 
- stack 0: 0x618
3153	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x618
3154	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3155	 228	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
3156	 229	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
- stack 0: 0xE0
3157	 22B	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2260002
3158	 22C	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x2260002
- stack 0: 0xFFFF
3159	 22F	AND		 	 
- stack 1: 0x618
- stack 0: 0x2
3160	 230	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x1
3161	 232	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x2
3162	 233	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3163	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x618
3164	 237	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3165	 239	ADD		 	 
- stack 0: 0x61C
3166	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3167	 23B	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
3168	 23C	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
- stack 0: 0xF0
3169	 23E	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x240
3170	 23F	JUMP		 	 
- stack 0: 0x61C
3171	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x61C
3172	 241	PUSH2	0080	 	 
- stack 1: 0x61C
- stack 0: 0x80
3173	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x61C
- stack 0: 0x1
3174	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3175	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x1
3176	 24B	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0xA0
3177	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x2
3178	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3179	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x2
3180	 255	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x1
3181	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x61C
- stack 1: 0x1
- stack 0: 0x25E
3182	 259	JUMPI		 	 
- stack 0: 0x61C
3183	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x61C
3184	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3185	 260	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
3186	 261	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
- stack 0: 0xE0
3187	 263	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x240FFEC
3188	 264	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x240FFEC
- stack 0: 0xFFFF
3189	 267	AND		 	 
- stack 1: 0x61C
- stack 0: 0xFFEC
3190	 268	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0xFFEC
- stack 0: 0x1
3191	 26A	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3192	 26B	ADD		 	 
- stack 0: 0x608
3193	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFF
3194	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x608
3195	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3196	 273	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
3197	 274	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
- stack 0: 0xF0
3198	 276	SHR		 	 
- stack 1: 0x608
- stack 0: 0x86
3199	 277	JUMP		 	 
- stack 0: 0x608
3200	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x608
3201	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3202	 88	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
3203	 89	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x86001102C4000000A0000802070001022600020240FFEC00C2000000DC0016
- stack 0: 0xE0
3204	 8B	SHR		 	 
- stack 1: 0x608
- stack 0: 0x860011
3205	 8C	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x860011
- stack 0: 0xFFFF
3206	 8F	AND		 	 
- stack 1: 0x608
- stack 0: 0x11
3207	 90	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x1
3208	 92	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x11
3209	 93	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0x11
- stack 0: 0x20
3210	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x608
3211	 97	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3212	 99	ADD		 	 
- stack 0: 0x60C
3213	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3214	 9B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
3215	 9C	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
- stack 0: 0xF0
3216	 9E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2C4
3217	 9F	JUMP		 	 
- stack 0: 0x60C
3218	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x60C
3219	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3220	 2C6	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
3221	 2C7	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x2C4000000A0000802070001022600020240FFEC00C2000000DC001600F6005C
- stack 0: 0xE0
3222	 2C9	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2C40000
3223	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3224	 2CD	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3225	 2CE	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
3226	 2D0	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
3227	 2D1	POP		 	 
- stack 0: 0x60C
3228	 2D2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3229	 2D4	ADD		 	 
- stack 0: 0x610
3230	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3231	 2D6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
3232	 2D7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
- stack 0: 0xF0
3233	 2D9	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA0
3234	 2DA	JUMP		 	 
- stack 0: 0x610
3235	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x610
3236	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3237	 A2	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
3238	 A3	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xA0000802070001022600020240FFEC00C2000000DC001600F6005C01CE0000
- stack 0: 0xE0
3239	 A5	SHR		 	 
- stack 1: 0x610
- stack 0: 0xA00008
3240	 A6	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xA00008
- stack 0: 0xFFFF
3241	 A9	AND		 	 
- stack 1: 0x610
- stack 0: 0x8
3242	 AA	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x1
3243	 AC	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x8
3244	 AD	PUSH2	0020	 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x20
3245	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x11
3246	 B1	PUSH1	03	 	 
- stack 3: 0x610
- stack 2: 0x8
- stack 1: 0x11
- stack 0: 0x3
3247	 B3	SIGNEXTEND		 	 
- stack 2: 0x610
- stack 1: 0x8
- stack 0: 0x11
3248	 B4	SLT		 	 
- stack 1: 0x610
- stack 0: 0x0
3249	 B5	PUSH2	0060	 	 
- stack 2: 0x610
- stack 1: 0x0
- stack 0: 0x60
3250	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x610
3251	 B9	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3252	 BB	ADD		 	 
- stack 0: 0x614
3253	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3254	 BD	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
3255	 BE	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
- stack 0: 0xF0
3256	 C0	SHR		 	 
- stack 1: 0x614
- stack 0: 0x207
3257	 C1	JUMP		 	 
- stack 0: 0x614
3258	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x614
3259	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3260	 209	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
3261	 20A	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x2070001022600020240FFEC00C2000000DC001600F6005C01CE00000086000C
- stack 0: 0xE0
3262	 20C	SHR		 	 
- stack 1: 0x614
- stack 0: 0x2070001
3263	 20D	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x2070001
- stack 0: 0xFFFF
3264	 210	AND		 	 
- stack 1: 0x614
- stack 0: 0x1
3265	 211	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3266	 213	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x1
3267	 214	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x80
3268	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x1
3269	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x614
- stack 0: 0x2
3270	 219	PUSH2	0080	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x80
3271	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x614
3272	 21D	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3273	 21F	ADD		 	 
- stack 0: 0x618
3274	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3275	 221	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
3276	 222	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
- stack 0: 0xF0
3277	 224	SHR		 	 
- stack 1: 0x618
- stack 0: 0x226
3278	 225	JUMP		 	 
- stack 0: 0x618
3279	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x618
3280	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3281	 228	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
3282	 229	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x22600020240FFEC00C2000000DC001600F6005C01CE00000086000C02C40000
- stack 0: 0xE0
3283	 22B	SHR		 	 
- stack 1: 0x618
- stack 0: 0x2260002
3284	 22C	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x2260002
- stack 0: 0xFFFF
3285	 22F	AND		 	 
- stack 1: 0x618
- stack 0: 0x2
3286	 230	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x1
3287	 232	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x2
3288	 233	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
3289	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x618
3290	 237	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3291	 239	ADD		 	 
- stack 0: 0x61C
3292	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3293	 23B	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
3294	 23C	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x240FFEC00C2000000DC001600F6005C01CE00000086000C02C4000002C40000
- stack 0: 0xF0
3295	 23E	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x240
3296	 23F	JUMP		 	 
- stack 0: 0x61C
3297	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x61C
3298	 241	PUSH2	0080	 	 
- stack 1: 0x61C
- stack 0: 0x80
3299	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x61C
- stack 0: 0x2
3300	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3301	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0x2
3302	 24B	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
3303	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x2
3304	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3305	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x2
3306	 255	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x0
3307	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x25E
3308	 259	JUMPI		 	 
- stack 0: 0x61C
3309	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x61C
- stack 0: 0x278
3310	 25D	JUMP		 	 
- stack 0: 0x61C
3311	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x61C
3312	 279	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3313	 27B	ADD		 	 
- stack 0: 0x620
3314	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3315	 27D	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xC2000000DC001600F6005C01CE00000086000C02C4000002C4000000A0000E
3316	 27E	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xC2000000DC001600F6005C01CE00000086000C02C4000002C4000000A0000E
- stack 0: 0xF0
3317	 280	SHR		 	 
- stack 1: 0x620
- stack 0: 0xC2
3318	 281	JUMP		 	 
- stack 0: 0x620
3319	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x620
3320	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3321	 C4	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xC2000000DC001600F6005C01CE00000086000C02C4000002C4000000A0000E
3322	 C5	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0xC2000000DC001600F6005C01CE00000086000C02C4000002C4000000A0000E
- stack 0: 0xE0
3323	 C7	SHR		 	 
- stack 1: 0x620
- stack 0: 0xC20000
3324	 C8	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0xC20000
- stack 0: 0xFFFF
3325	 CB	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3326	 CC	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3327	 CE	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3328	 CF	PUSH2	03A0	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x3A0
3329	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x620
3330	 D3	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3331	 D5	ADD		 	 
- stack 0: 0x624
3332	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3333	 D7	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xDC001600F6005C01CE00000086000C02C4000002C4000000A0000E02070001
3334	 D8	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xDC001600F6005C01CE00000086000C02C4000002C4000000A0000E02070001
- stack 0: 0xF0
3335	 DA	SHR		 	 
- stack 1: 0x624
- stack 0: 0xDC
3336	 DB	JUMP		 	 
- stack 0: 0x624
3337	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x624
3338	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3339	 DE	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xDC001600F6005C01CE00000086000C02C4000002C4000000A0000E02070001
3340	 DF	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0xDC001600F6005C01CE00000086000C02C4000002C4000000A0000E02070001
- stack 0: 0xE0
3341	 E1	SHR		 	 
- stack 1: 0x624
- stack 0: 0xDC0016
3342	 E2	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0xDC0016
- stack 0: 0xFFFF
3343	 E5	AND		 	 
- stack 1: 0x624
- stack 0: 0x16
3344	 E6	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x16
- stack 0: 0x1
3345	 E8	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x16
3346	 E9	PUSH2	0380	 	 
- stack 2: 0x624
- stack 1: 0x16
- stack 0: 0x380
3347	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x624
3348	 ED	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3349	 EF	ADD		 	 
- stack 0: 0x628
3350	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3351	 F1	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0xF6005C01CE00000086000C02C4000002C4000000A0000E0207000102260002
3352	 F2	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0xF6005C01CE00000086000C02C4000002C4000000A0000E0207000102260002
- stack 0: 0xF0
3353	 F4	SHR		 	 
- stack 1: 0x628
- stack 0: 0xF6
3354	 F5	JUMP		 	 
- stack 0: 0x628
3355	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x628
3356	 F7	PUSH2	0060	 	 
- stack 1: 0x628
- stack 0: 0x60
3357	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x628
- stack 0: 0x0
3358	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3359	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x628
- stack 0: 0x0
3360	 101	PUSH2	03A0	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x3A0
3361	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x0
3362	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x628
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3363	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x0
3364	 10B	SUB		 	 
- stack 1: 0x628
- stack 0: 0x0
3365	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x114
3366	 10F	JUMPI		 	 
- stack 0: 0x628
3367	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x628
- stack 0: 0x12E
3368	 113	JUMP		 	 
- stack 0: 0x628
3369	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x628
3370	 12F	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3371	 131	ADD		 	 
- stack 0: 0x62C
3372	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3373	 133	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1CE00000086000C02C4000002C4000000A0000E02070001022600020240FFE8
3374	 134	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x1CE00000086000C02C4000002C4000000A0000E02070001022600020240FFE8
- stack 0: 0xF0
3375	 136	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1CE
3376	 137	JUMP		 	 
- stack 0: 0x62C
3377	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x62C
3378	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3379	 1D0	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x1CE00000086000C02C4000002C4000000A0000E02070001022600020240FFE8
3380	 1D1	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x1CE00000086000C02C4000002C4000000A0000E02070001022600020240FFE8
- stack 0: 0xE0
3381	 1D3	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1CE0000
3382	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
3383	 1D7	AND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3384	 1D8	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x1
3385	 1DA	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x0
3386	 1DB	PUSH2	0080	 	 
- stack 2: 0x62C
- stack 1: 0x0
- stack 0: 0x80
3387	 1DE	MSTORE		 	  ;; # store to x4
- stack 0: 0x62C
3388	 1DF	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3389	 1E1	ADD		 	 
- stack 0: 0x630
3390	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3391	 1E3	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
3392	 1E4	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
- stack 0: 0xF0
3393	 1E6	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
3394	 1E7	JUMP		 	 
- stack 0: 0x630
3395	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x630
3396	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3397	 88	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
3398	 89	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
- stack 0: 0xE0
3399	 8B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86000C
3400	 8C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x86000C
- stack 0: 0xFFFF
3401	 8F	AND		 	 
- stack 1: 0x630
- stack 0: 0xC
3402	 90	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xC
- stack 0: 0x1
3403	 92	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xC
3404	 93	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xC
- stack 0: 0x20
3405	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3406	 97	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3407	 99	ADD		 	 
- stack 0: 0x634
3408	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3409	 9B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
3410	 9C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
- stack 0: 0xF0
3411	 9E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2C4
3412	 9F	JUMP		 	 
- stack 0: 0x634
3413	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3414	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3415	 2C6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
3416	 2C7	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
- stack 0: 0xE0
3417	 2C9	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2C40000
3418	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3419	 2CD	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3420	 2CE	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3421	 2D0	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3422	 2D1	POP		 	 
- stack 0: 0x634
3423	 2D2	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3424	 2D4	ADD		 	 
- stack 0: 0x638
3425	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3426	 2D6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
3427	 2D7	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
- stack 0: 0xF0
3428	 2D9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2C4
3429	 2DA	JUMP		 	 
- stack 0: 0x638
3430	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3431	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3432	 2C6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
3433	 2C7	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
- stack 0: 0xE0
3434	 2C9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2C40000
3435	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3436	 2CD	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3437	 2CE	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3438	 2D0	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3439	 2D1	POP		 	 
- stack 0: 0x638
3440	 2D2	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3441	 2D4	ADD		 	 
- stack 0: 0x63C
3442	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3443	 2D6	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
3444	 2D7	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
- stack 0: 0xF0
3445	 2D9	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xA0
3446	 2DA	JUMP		 	 
- stack 0: 0x63C
3447	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x63C
3448	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3449	 A2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
3450	 A3	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
- stack 0: 0xE0
3451	 A5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E
3452	 A6	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3453	 A9	AND		 	 
- stack 1: 0x63C
- stack 0: 0xE
3454	 AA	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0x1
3455	 AC	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xE
3456	 AD	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0x20
3457	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0xC
3458	 B1	PUSH1	03	 	 
- stack 3: 0x63C
- stack 2: 0xE
- stack 1: 0xC
- stack 0: 0x3
3459	 B3	SIGNEXTEND		 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0xC
3460	 B4	SLT		 	 
- stack 1: 0x63C
- stack 0: 0x1
3461	 B5	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x60
3462	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3463	 B9	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3464	 BB	ADD		 	 
- stack 0: 0x640
3465	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3466	 BD	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
3467	 BE	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
- stack 0: 0xF0
3468	 C0	SHR		 	 
- stack 1: 0x640
- stack 0: 0x207
3469	 C1	JUMP		 	 
- stack 0: 0x640
3470	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3471	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3472	 209	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
3473	 20A	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
- stack 0: 0xE0
3474	 20C	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2070001
3475	 20D	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2070001
- stack 0: 0xFFFF
3476	 210	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3477	 211	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3478	 213	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3479	 214	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3480	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x0
3481	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x1
3482	 219	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3483	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3484	 21D	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3485	 21F	ADD		 	 
- stack 0: 0x644
3486	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3487	 221	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
3488	 222	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
- stack 0: 0xF0
3489	 224	SHR		 	 
- stack 1: 0x644
- stack 0: 0x226
3490	 225	JUMP		 	 
- stack 0: 0x644
3491	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3492	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3493	 228	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
3494	 229	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
- stack 0: 0xE0
3495	 22B	SHR		 	 
- stack 1: 0x644
- stack 0: 0x2260002
3496	 22C	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x2260002
- stack 0: 0xFFFF
3497	 22F	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3498	 230	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3499	 232	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3500	 233	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3501	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3502	 237	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3503	 239	ADD		 	 
- stack 0: 0x648
3504	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3505	 23B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
3506	 23C	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
- stack 0: 0xF0
3507	 23E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x240
3508	 23F	JUMP		 	 
- stack 0: 0x648
3509	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x648
3510	 241	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3511	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x1
3512	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3513	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x1
3514	 24B	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xA0
3515	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3516	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3517	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3518	 255	SUB		 	 
- stack 1: 0x648
- stack 0: 0x1
3519	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x25E
3520	 259	JUMPI		 	 
- stack 0: 0x648
3521	 25E	JUMPDEST		 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x648
3522	 25F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3523	 260	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
3524	 261	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
- stack 0: 0xE0
3525	 263	SHR		 	 
- stack 1: 0x648
- stack 0: 0x240FFE8
3526	 264	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x240FFE8
- stack 0: 0xFFFF
3527	 267	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFE8
3528	 268	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFE8
- stack 0: 0x1
3529	 26A	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3530	 26B	ADD		 	 
- stack 0: 0x630
3531	 26C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFF
3532	 271	AND		 	  ;; # mask to 32 bits
- stack 0: 0x630
3533	 272	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3534	 273	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
3535	 274	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
- stack 0: 0xF0
3536	 276	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86
3537	 277	JUMP		 	 
- stack 0: 0x630
3538	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x630
3539	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3540	 88	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
3541	 89	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x86000C02C4000002C4000000A0000E02070001022600020240FFE800C20001
- stack 0: 0xE0
3542	 8B	SHR		 	 
- stack 1: 0x630
- stack 0: 0x86000C
3543	 8C	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x86000C
- stack 0: 0xFFFF
3544	 8F	AND		 	 
- stack 1: 0x630
- stack 0: 0xC
3545	 90	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xC
- stack 0: 0x1
3546	 92	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xC
3547	 93	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xC
- stack 0: 0x20
3548	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3549	 97	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3550	 99	ADD		 	 
- stack 0: 0x634
3551	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3552	 9B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
3553	 9C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
- stack 0: 0xF0
3554	 9E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2C4
3555	 9F	JUMP		 	 
- stack 0: 0x634
3556	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3557	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3558	 2C6	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
3559	 2C7	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x2C4000002C4000000A0000E02070001022600020240FFE800C2000100DC0017
- stack 0: 0xE0
3560	 2C9	SHR		 	 
- stack 1: 0x634
- stack 0: 0x2C40000
3561	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3562	 2CD	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3563	 2CE	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3564	 2D0	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3565	 2D1	POP		 	 
- stack 0: 0x634
3566	 2D2	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3567	 2D4	ADD		 	 
- stack 0: 0x638
3568	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3569	 2D6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
3570	 2D7	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
- stack 0: 0xF0
3571	 2D9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2C4
3572	 2DA	JUMP		 	 
- stack 0: 0x638
3573	 2C4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3574	 2C5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3575	 2C6	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
3576	 2C7	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x2C4000000A0000E02070001022600020240FFE800C2000100DC001700F60030
- stack 0: 0xE0
3577	 2C9	SHR		 	 
- stack 1: 0x638
- stack 0: 0x2C40000
3578	 2CA	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x2C40000
- stack 0: 0xFFFF
3579	 2CD	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3580	 2CE	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3581	 2D0	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3582	 2D1	POP		 	 
- stack 0: 0x638
3583	 2D2	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3584	 2D4	ADD		 	 
- stack 0: 0x63C
3585	 2D5	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3586	 2D6	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
3587	 2D7	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
- stack 0: 0xF0
3588	 2D9	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xA0
3589	 2DA	JUMP		 	 
- stack 0: 0x63C
3590	 A0	JUMPDEST		 ;; __riscvimpl_SLTI_3_1_0	  ;; # instr: slti gp,ra,0(ignore imm)
- stack 0: 0x63C
3591	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3592	 A2	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
3593	 A3	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E02070001022600020240FFE800C2000100DC001700F6003002DBFFFF
- stack 0: 0xE0
3594	 A5	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xA0000E
3595	 A6	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3596	 A9	AND		 	 
- stack 1: 0x63C
- stack 0: 0xE
3597	 AA	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0x1
3598	 AC	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0xE
3599	 AD	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0x20
3600	 B0	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0xC
3601	 B1	PUSH1	03	 	 
- stack 3: 0x63C
- stack 2: 0xE
- stack 1: 0xC
- stack 0: 0x3
3602	 B3	SIGNEXTEND		 	 
- stack 2: 0x63C
- stack 1: 0xE
- stack 0: 0xC
3603	 B4	SLT		 	 
- stack 1: 0x63C
- stack 0: 0x1
3604	 B5	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0x1
- stack 0: 0x60
3605	 B8	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3606	 B9	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3607	 BB	ADD		 	 
- stack 0: 0x640
3608	 BC	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3609	 BD	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
3610	 BE	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
- stack 0: 0xF0
3611	 C0	SHR		 	 
- stack 1: 0x640
- stack 0: 0x207
3612	 C1	JUMP		 	 
- stack 0: 0x640
3613	 207	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3614	 208	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3615	 209	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
3616	 20A	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x2070001022600020240FFE800C2000100DC001700F6003002DBFFFF00C20000
- stack 0: 0xE0
3617	 20C	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2070001
3618	 20D	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2070001
- stack 0: 0xFFFF
3619	 210	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3620	 211	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3621	 213	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3622	 214	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3623	 217	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3624	 218	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x2
3625	 219	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x2
- stack 0: 0x80
3626	 21C	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3627	 21D	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3628	 21F	ADD		 	 
- stack 0: 0x644
3629	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3630	 221	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
3631	 222	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
- stack 0: 0xF0
3632	 224	SHR		 	 
- stack 1: 0x644
- stack 0: 0x226
3633	 225	JUMP		 	 
- stack 0: 0x644
3634	 226	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3635	 227	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3636	 228	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
3637	 229	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x22600020240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018
- stack 0: 0xE0
3638	 22B	SHR		 	 
- stack 1: 0x644
- stack 0: 0x2260002
3639	 22C	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x2260002
- stack 0: 0xFFFF
3640	 22F	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3641	 230	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3642	 232	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3643	 233	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3644	 236	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3645	 237	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3646	 239	ADD		 	 
- stack 0: 0x648
3647	 23A	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3648	 23B	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
3649	 23C	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x240FFE800C2000100DC001700F6003002DBFFFF00C2000000DC0018018C0020
- stack 0: 0xF0
3650	 23E	SHR		 	 
- stack 1: 0x648
- stack 0: 0x240
3651	 23F	JUMP		 	 
- stack 0: 0x648
3652	 240	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x648
3653	 241	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3654	 244	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x2
3655	 245	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3656	 24A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x2
3657	 24B	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3658	 24E	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3659	 24F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3660	 254	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3661	 255	SUB		 	 
- stack 1: 0x648
- stack 0: 0x0
3662	 256	PUSH2	025E	 ;; _neq_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x25E
3663	 259	JUMPI		 	 
- stack 0: 0x648
3664	 25A	PUSH2	0278	 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 1: 0x648
- stack 0: 0x278
3665	 25D	JUMP		 	 
- stack 0: 0x648
3666	 278	JUMPDEST		 ;; _neq_after_e410d44f54fa9f29223d6b949df89b003984ced7557373d9d0767fba07cd0903	 
- stack 0: 0x648
3667	 279	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3668	 27B	ADD		 	 
- stack 0: 0x64C
3669	 27C	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3670	 27D	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xC2000100DC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0
3671	 27E	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xC2000100DC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0
- stack 0: 0xF0
3672	 280	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xC2
3673	 281	JUMP		 	 
- stack 0: 0x64C
3674	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x64C
3675	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
3676	 C4	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xC2000100DC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0
3677	 C5	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xC2000100DC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0
- stack 0: 0xE0
3678	 C7	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xC20001
3679	 C8	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xC20001
- stack 0: 0xFFFF
3680	 CB	AND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3681	 CC	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x1
3682	 CE	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x1
3683	 CF	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x3A0
3684	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
3685	 D3	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3686	 D5	ADD		 	 
- stack 0: 0x650
3687	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3688	 D7	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xDC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF
3689	 D8	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xDC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF
- stack 0: 0xF0
3690	 DA	SHR		 	 
- stack 1: 0x650
- stack 0: 0xDC
3691	 DB	JUMP		 	 
- stack 0: 0x650
3692	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x650
3693	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3694	 DE	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xDC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF
3695	 DF	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0xDC001700F6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF
- stack 0: 0xE0
3696	 E1	SHR		 	 
- stack 1: 0x650
- stack 0: 0xDC0017
3697	 E2	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0xDC0017
- stack 0: 0xFFFF
3698	 E5	AND		 	 
- stack 1: 0x650
- stack 0: 0x17
3699	 E6	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x17
- stack 0: 0x1
3700	 E8	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x17
3701	 E9	PUSH2	0380	 	 
- stack 2: 0x650
- stack 1: 0x17
- stack 0: 0x380
3702	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x650
3703	 ED	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3704	 EF	ADD		 	 
- stack 0: 0x654
3705	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3706	 F1	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xF6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF
3707	 F2	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xF6003002DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF
- stack 0: 0xF0
3708	 F4	SHR		 	 
- stack 1: 0x654
- stack 0: 0xF6
3709	 F5	JUMP		 	 
- stack 0: 0x654
3710	 F6	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,264(ignore imm)
- stack 0: 0x654
3711	 F7	PUSH2	0060	 	 
- stack 1: 0x654
- stack 0: 0x60
3712	 FA	MLOAD		 	  ;; # read from x3
- stack 1: 0x654
- stack 0: 0x1
3713	 FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3714	 100	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0x1
3715	 101	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x3A0
3716	 104	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3717	 105	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3718	 10A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0x1
- stack 0: 0x1
3719	 10B	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
3720	 10C	PUSH2	0114	 ;; _neq_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x114
3721	 10F	JUMPI		 	 
- stack 0: 0x654
3722	 110	PUSH2	012E	 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 1: 0x654
- stack 0: 0x12E
3723	 113	JUMP		 	 
- stack 0: 0x654
3724	 12E	JUMPDEST		 ;; _neq_after_08b98ea7fb7cfb2f817238ba8969f7e04871ca9aa8346edfa681791012c443f8	 
- stack 0: 0x654
3725	 12F	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3726	 131	ADD		 	 
- stack 0: 0x658
3727	 132	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3728	 133	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C20000
3729	 134	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C20000
- stack 0: 0xF0
3730	 136	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2DB
3731	 137	JUMP		 	 
- stack 0: 0x658
3732	 2DB	JUMPDEST		 ;; __riscvimpl_SLTI_1_0_0	  ;; # instr: slti ra,zero,-1(ignore imm)
- stack 0: 0x658
3733	 2DC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3734	 2DD	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C20000
3735	 2DE	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2DBFFFF00C2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C20000
- stack 0: 0xE0
3736	 2E0	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2DBFFFF
3737	 2E1	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2DBFFFF
- stack 0: 0xFFFF
3738	 2E4	AND		 	 
- stack 1: 0x658
- stack 0: 0xFFFF
3739	 2E5	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0xFFFF
- stack 0: 0x1
3740	 2E7	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3741	 2E8	PUSH1	00	 	 
- stack 2: 0x658
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3742	 2EA	PUSH1	03	 	 
- stack 3: 0x658
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0x0
- stack 0: 0x3
3743	 2EC	SIGNEXTEND		 	 
- stack 2: 0x658
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
3744	 2ED	SLT		 	 
- stack 1: 0x658
- stack 0: 0x0
3745	 2EE	PUSH2	0020	 	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x20
3746	 2F1	MSTORE		 	  ;; # store to x1
- stack 0: 0x658
3747	 2F2	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3748	 2F4	ADD		 	 
- stack 0: 0x65C
3749	 2F5	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3750	 2F6	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xC2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019
3751	 2F7	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0xC2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019
- stack 0: 0xF0
3752	 2F9	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xC2
3753	 2FA	JUMP		 	 
- stack 0: 0x65C
3754	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x65C
3755	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3756	 C4	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xC2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019
3757	 C5	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0xC2000000DC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019
- stack 0: 0xE0
3758	 C7	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xC20000
3759	 C8	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0xC20000
- stack 0: 0xFFFF
3760	 CB	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3761	 CC	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
3762	 CE	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3763	 CF	PUSH2	03A0	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x3A0
3764	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x65C
3765	 D3	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3766	 D5	ADD		 	 
- stack 0: 0x660
3767	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3768	 D7	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xDC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008
3769	 D8	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0xDC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008
- stack 0: 0xF0
3770	 DA	SHR		 	 
- stack 1: 0x660
- stack 0: 0xDC
3771	 DB	JUMP		 	 
- stack 0: 0x660
3772	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x660
3773	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3774	 DE	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0xDC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008
3775	 DF	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0xDC0018018C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008
- stack 0: 0xE0
3776	 E1	SHR		 	 
- stack 1: 0x660
- stack 0: 0xDC0018
3777	 E2	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0xDC0018
- stack 0: 0xFFFF
3778	 E5	AND		 	 
- stack 1: 0x660
- stack 0: 0x18
3779	 E6	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0x18
- stack 0: 0x1
3780	 E8	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0x18
3781	 E9	PUSH2	0380	 	 
- stack 2: 0x660
- stack 1: 0x18
- stack 0: 0x380
3782	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x660
3783	 ED	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3784	 EF	ADD		 	 
- stack 0: 0x664
3785	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3786	 F1	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x18C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008036D0018
3787	 F2	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x18C002002FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008036D0018
- stack 0: 0xF0
3788	 F4	SHR		 	 
- stack 1: 0x664
- stack 0: 0x18C
3789	 F5	JUMP		 	 
- stack 0: 0x664
3790	 18C	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,12c(ignore imm)
- stack 0: 0x664
3791	 18D	PUSH2	0020	 	 
- stack 1: 0x664
- stack 0: 0x20
3792	 190	MLOAD		 	  ;; # read from x1
- stack 1: 0x664
- stack 0: 0x0
3793	 191	PUSH4	FFFFFFFF	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3794	 196	AND		 	  ;; # mask to 32 bits
- stack 1: 0x664
- stack 0: 0x0
3795	 197	PUSH2	03A0	 	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x3A0
3796	 19A	MLOAD		 	  ;; # read from x29
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x0
3797	 19B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x664
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3798	 1A0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x0
3799	 1A1	SUB		 	 
- stack 1: 0x664
- stack 0: 0x0
3800	 1A2	PUSH2	01AA	 ;; _neq_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 2: 0x664
- stack 1: 0x0
- stack 0: 0x1AA
3801	 1A5	JUMPI		 	 
- stack 0: 0x664
3802	 1A6	PUSH2	01C4	 ;; _neq_after_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 1: 0x664
- stack 0: 0x1C4
3803	 1A9	JUMP		 	 
- stack 0: 0x664
3804	 1C4	JUMPDEST		 ;; _neq_after_4aeded34a0f0b094bfba911b15cd1310df7141f286a729729afb441ab09e2c72	 
- stack 0: 0x664
3805	 1C5	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3806	 1C7	ADD		 	 
- stack 0: 0x668
3807	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3808	 1C9	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x2FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008036D001800210000
3809	 1CA	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x2FB0FF0014B00FF030EFFFF00C2000000DC0019032D0008036D001800210000
- stack 0: 0xF0
3810	 1CC	SHR		 	 
- stack 1: 0x668
- stack 0: 0x2FB
3811	 1CD	JUMP		 	 
- stack 0: 0x668
3812	 2FB	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x668
3813	 2FC	PUSH4	00ff0000	 	 
- stack 1: 0x668
- stack 0: 0xFF0000
3814	 301	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFF0000
- stack 0: 0x20
3815	 304	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
3816	 305	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3817	 307	ADD		 	 
- stack 0: 0x66C
3818	 308	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3819	 309	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x14B00FF030EFFFF00C2000000DC0019032D0008036D001800210000003406B8
3820	 30A	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x14B00FF030EFFFF00C2000000DC0019032D0008036D001800210000003406B8
- stack 0: 0xF0
3821	 30C	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x14B
3822	 30D	JUMP		 	 
- stack 0: 0x66C
3823	 14B	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x66C
3824	 14C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3825	 14D	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x14B00FF030EFFFF00C2000000DC0019032D0008036D001800210000003406B8
3826	 14E	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x14B00FF030EFFFF00C2000000DC0019032D0008036D001800210000003406B8
- stack 0: 0xE0
3827	 150	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x14B00FF
3828	 151	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x14B00FF
- stack 0: 0xFFFF
3829	 154	AND		 	 
- stack 1: 0x66C
- stack 0: 0xFF
3830	 155	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0xFF
- stack 0: 0x1
3831	 157	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0xFF
3832	 158	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFF
- stack 0: 0x20
3833	 15B	MLOAD		 	  ;; # read from x1
- stack 2: 0x66C
- stack 1: 0xFF
- stack 0: 0xFF0000
3834	 15C	ADD		 	  ;; # ADDI 1
- stack 1: 0x66C
- stack 0: 0xFF00FF
3835	 15D	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFF00FF
- stack 0: 0x20
3836	 160	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
3837	 161	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3838	 163	ADD		 	 
- stack 0: 0x670
3839	 164	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3840	 165	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x30EFFFF00C2000000DC0019032D0008036D001800210000003406B800530042
3841	 166	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x30EFFFF00C2000000DC0019032D0008036D001800210000003406B800530042
- stack 0: 0xF0
3842	 168	SHR		 	 
- stack 1: 0x670
- stack 0: 0x30E
3843	 169	JUMP		 	 
- stack 0: 0x670
3844	 30E	JUMPDEST		 ;; __riscvimpl_SLTI_0_1_0	  ;; # instr: slti zero,ra,-1(ignore imm)
- stack 0: 0x670
3845	 30F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3846	 310	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x30EFFFF00C2000000DC0019032D0008036D001800210000003406B800530042
3847	 311	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x30EFFFF00C2000000DC0019032D0008036D001800210000003406B800530042
- stack 0: 0xE0
3848	 313	SHR		 	 
- stack 1: 0x670
- stack 0: 0x30EFFFF
3849	 314	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x30EFFFF
- stack 0: 0xFFFF
3850	 317	AND		 	 
- stack 1: 0x670
- stack 0: 0xFFFF
3851	 318	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFFFF
- stack 0: 0x1
3852	 31A	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3853	 31B	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
3854	 31E	MLOAD		 	  ;; # read from x1
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFF00FF
3855	 31F	PUSH1	03	 	 
- stack 3: 0x670
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 1: 0xFF00FF
- stack 0: 0x3
3856	 321	SIGNEXTEND		 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFF00FF
3857	 322	SLT		 	 
- stack 1: 0x670
- stack 0: 0x0
3858	 323	POP		 	 
- stack 0: 0x670
3859	 324	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3860	 326	ADD		 	 
- stack 0: 0x674
3861	 327	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3862	 328	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xC2000000DC0019032D0008036D001800210000003406B80053004200660000
3863	 329	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xC2000000DC0019032D0008036D001800210000003406B80053004200660000
- stack 0: 0xF0
3864	 32B	SHR		 	 
- stack 1: 0x674
- stack 0: 0xC2
3865	 32C	JUMP		 	 
- stack 0: 0x674
3866	 C2	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x674
3867	 C3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3868	 C4	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xC2000000DC0019032D0008036D001800210000003406B80053004200660000
3869	 C5	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0xC2000000DC0019032D0008036D001800210000003406B80053004200660000
- stack 0: 0xE0
3870	 C7	SHR		 	 
- stack 1: 0x674
- stack 0: 0xC20000
3871	 C8	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0xC20000
- stack 0: 0xFFFF
3872	 CB	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
3873	 CC	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
3874	 CE	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
3875	 CF	PUSH2	03A0	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x3A0
3876	 D2	MSTORE		 	  ;; # store to x29
- stack 0: 0x674
3877	 D3	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3878	 D5	ADD		 	 
- stack 0: 0x678
3879	 D6	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3880	 D7	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xDC0019032D0008036D001800210000003406B8005300420066000003AD0001
3881	 D8	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xDC0019032D0008036D001800210000003406B8005300420066000003AD0001
- stack 0: 0xF0
3882	 DA	SHR		 	 
- stack 1: 0x678
- stack 0: 0xDC
3883	 DB	JUMP		 	 
- stack 0: 0x678
3884	 DC	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x678
3885	 DD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3886	 DE	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xDC0019032D0008036D001800210000003406B8005300420066000003AD0001
3887	 DF	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0xDC0019032D0008036D001800210000003406B8005300420066000003AD0001
- stack 0: 0xE0
3888	 E1	SHR		 	 
- stack 1: 0x678
- stack 0: 0xDC0019
3889	 E2	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0xDC0019
- stack 0: 0xFFFF
3890	 E5	AND		 	 
- stack 1: 0x678
- stack 0: 0x19
3891	 E6	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x19
- stack 0: 0x1
3892	 E8	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x19
3893	 E9	PUSH2	0380	 	 
- stack 2: 0x678
- stack 1: 0x19
- stack 0: 0x380
3894	 EC	MSTORE		 	  ;; # store to x28
- stack 0: 0x678
3895	 ED	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3896	 EF	ADD		 	 
- stack 0: 0x67C
3897	 F0	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3898	 F1	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x32D0008036D001800210000003406B8005300420066000003AD000100210000
3899	 F2	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x32D0008036D001800210000003406B8005300420066000003AD000100210000
- stack 0: 0xF0
3900	 F4	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x32D
3901	 F5	JUMP		 	 
- stack 0: 0x67C
3902	 32D	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x67C
3903	 32E	PUSH1	00	 	 
- stack 1: 0x67C
- stack 0: 0x0
3904	 330	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3905	 335	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0x0
3906	 336	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x3A0
3907	 339	MLOAD		 	  ;; # read from x29
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x0
3908	 33A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x67C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3909	 33F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x0
3910	 340	SUB		 	 
- stack 1: 0x67C
- stack 0: 0x0
3911	 341	PUSH2	0349	 ;; _neq_60b4a2c0f07d31e82495ae6264cb9ba70f973430144ce68a8a3e2cb0115d1a72	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x349
3912	 344	JUMPI		 	 
- stack 0: 0x67C
3913	 345	PUSH2	0363	 ;; _neq_after_60b4a2c0f07d31e82495ae6264cb9ba70f973430144ce68a8a3e2cb0115d1a72	 
- stack 1: 0x67C
- stack 0: 0x363
3914	 348	JUMP		 	 
- stack 0: 0x67C
3915	 363	JUMPDEST		 ;; _neq_after_60b4a2c0f07d31e82495ae6264cb9ba70f973430144ce68a8a3e2cb0115d1a72	 
- stack 0: 0x67C
3916	 364	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3917	 366	ADD		 	 
- stack 0: 0x680
3918	 367	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3919	 368	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x36D001800210000003406B8005300420066000003AD000100210000003406BC
3920	 369	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x36D001800210000003406B8005300420066000003AD000100210000003406BC
- stack 0: 0xF0
3921	 36B	SHR		 	 
- stack 1: 0x680
- stack 0: 0x36D
3922	 36C	JUMP		 	 
- stack 0: 0x680
3923	 36D	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x680
3924	 36E	PUSH1	00	 	 
- stack 1: 0x680
- stack 0: 0x0
3925	 370	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3926	 375	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x0
3927	 376	PUSH2	0380	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x380
3928	 379	MLOAD		 	  ;; # read from x28
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x19
3929	 37A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x0
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
3930	 37F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x19
3931	 380	SUB		 	 
- stack 1: 0x680
- stack 0: 0x19
3932	 381	PUSH2	0389	 ;; _neq_55c2238b56a6db340de92cfceb2202440ea25eeaf74d57f4e2aaff4d15e763be	 
- stack 2: 0x680
- stack 1: 0x19
- stack 0: 0x389
3933	 384	JUMPI		 	 
- stack 0: 0x680
3934	 389	JUMPDEST		 ;; _neq_55c2238b56a6db340de92cfceb2202440ea25eeaf74d57f4e2aaff4d15e763be	 
- stack 0: 0x680
3935	 38A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3936	 38B	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x36D001800210000003406B8005300420066000003AD000100210000003406BC
3937	 38C	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x36D001800210000003406B8005300420066000003AD000100210000003406BC
- stack 0: 0xE0
3938	 38E	SHR		 	 
- stack 1: 0x680
- stack 0: 0x36D0018
3939	 38F	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x36D0018
- stack 0: 0xFFFF
3940	 392	AND		 	 
- stack 1: 0x680
- stack 0: 0x18
3941	 393	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x18
- stack 0: 0x1
3942	 395	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x18
3943	 396	ADD		 	 
- stack 0: 0x698
3944	 397	PUSH4	FFFFFFFF	 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFF
3945	 39C	AND		 	  ;; # mask to 32 bits
- stack 0: 0x698
3946	 39D	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3947	 39E	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x210000003406BC005300420066000003B80000006600006574796D00007473
3948	 39F	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x210000003406BC005300420066000003B80000006600006574796D00007473
- stack 0: 0xF0
3949	 3A1	SHR		 	 
- stack 1: 0x698
- stack 0: 0x21
3950	 3A2	JUMP		 	 
- stack 0: 0x698
3951	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x698
3952	 22	PUSH4	00000000	 	 
- stack 1: 0x698
- stack 0: 0x0
3953	 27	PUSH2	0160	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x160
3954	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x698
3955	 2B	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3956	 2D	ADD		 	 
- stack 0: 0x69C
3957	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3958	 2F	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x3406BC005300420066000003B80000006600006574796D0000747300525245
3959	 30	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x3406BC005300420066000003B80000006600006574796D0000747300525245
- stack 0: 0xF0
3960	 32	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x34
3961	 33	JUMP		 	 
- stack 0: 0x69C
3962	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1712(ignore imm)
- stack 0: 0x69C
3963	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
3964	 36	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x3406BC005300420066000003B80000006600006574796D0000747300525245
3965	 37	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x3406BC005300420066000003B80000006600006574796D0000747300525245
- stack 0: 0xE0
3966	 39	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x3406BC
3967	 3A	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x3406BC
- stack 0: 0xFFFF
3968	 3D	AND		 	 
- stack 1: 0x69C
- stack 0: 0x6BC
3969	 3E	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x6BC
- stack 0: 0x1
3970	 40	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x6BC
3971	 41	PUSH2	0160	 	 
- stack 2: 0x69C
- stack 1: 0x6BC
- stack 0: 0x160
3972	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x69C
- stack 1: 0x6BC
- stack 0: 0x0
3973	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x69C
- stack 0: 0x6BC
3974	 46	PUSH2	0160	 	 
- stack 2: 0x69C
- stack 1: 0x6BC
- stack 0: 0x160
3975	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x69C
3976	 4A	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3977	 4C	ADD		 	 
- stack 0: 0x6A0
3978	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3979	 4E	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x5300420066000003B80000006600006574796D000074730052524500004B4F
3980	 4F	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x5300420066000003B80000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
3981	 51	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x53
3982	 52	JUMP		 	 
- stack 0: 0x6A0
3983	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6A0
3984	 54	PUSH4	00042000	 	 
- stack 1: 0x6A0
- stack 0: 0x42000
3985	 59	PUSH2	0140	 	 
- stack 2: 0x6A0
- stack 1: 0x42000
- stack 0: 0x140
3986	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6A0
3987	 5D	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3988	 5F	ADD		 	 
- stack 0: 0x6A4
3989	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3990	 61	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x66000003B80000006600006574796D000074730052524500004B4F00000000
3991	 62	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x66000003B80000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
3992	 64	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x66
3993	 65	JUMP		 	 
- stack 0: 0x6A4
3994	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6A4
3995	 67	PUSH2	0140	 	 
- stack 1: 0x6A4
- stack 0: 0x140
3996	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6A4
- stack 0: 0x42000
3997	 6B	PUSH2	0075	 ;; _ecall_1ee132391ba830adaa71288c21e192c5ca4bf879569b8cdf9f4268c29d372128	 
- stack 2: 0x6A4
- stack 1: 0x42000
- stack 0: 0x75
3998	 6E	JUMPI		 	 
- stack 0: 0x6A4
3999	 75	JUMPDEST		 ;; _ecall_1ee132391ba830adaa71288c21e192c5ca4bf879569b8cdf9f4268c29d372128	 
- stack 0: 0x6A4
4000	 76	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4001	 78	PUSH2	0160	 	 
- stack 2: 0x6A4
- stack 1: 0x4
- stack 0: 0x160
4002	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6A4
- stack 1: 0x4
- stack 0: 0x6BC
4003	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6A4
4004	 7D	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4005	 7F	ADD		 	 
- stack 0: 0x6A8
4006	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4007	 81	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x3B80000006600006574796D000074730052524500004B4F0000000000000000
4008	 82	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x3B80000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
4009	 84	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x3B8
4010	 85	JUMP		 	 
- stack 0: 0x6A8
4011	 3B8	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6A8
4012	 3B9	PUSH4	00000000	 	 
- stack 1: 0x6A8
- stack 0: 0x0
4013	 3BE	PUSH2	0140	 	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x140
4014	 3C1	MSTORE		 	  ;; # store to x10
- stack 0: 0x6A8
4015	 3C2	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4016	 3C4	ADD		 	 
- stack 0: 0x6AC
4017	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4018	 3C6	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
4019	 3C7	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
4020	 3C9	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x66
4021	 3CA	JUMP		 	 
- stack 0: 0x6AC
4022	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6AC
4023	 67	PUSH2	0140	 	 
- stack 1: 0x6AC
- stack 0: 0x140
4024	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6AC
- stack 0: 0x0
4025	 6B	PUSH2	0075	 ;; _ecall_1ee132391ba830adaa71288c21e192c5ca4bf879569b8cdf9f4268c29d372128	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x75
4026	 6E	JUMPI		 	 
- stack 0: 0x6AC
4027	 6F	PUSH1	20	 	 
- stack 1: 0x6AC
- stack 0: 0x20
4028	 71	PUSH2	0160	 	 
- stack 2: 0x6AC
- stack 1: 0x20
- stack 0: 0x160
4029	 74	RETURN		 	 
Final bytecode length; 1676
Returned: 00000000000000000000000000000000000000000000000000000000000006bc
gasUsed : 14473
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 424 - range: 424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448
** HOT: 44c - range: 44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470
** HOT: 474 - range: 474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4
** HOT: 4c8 - range: 4c8,4cc,4d0,4d4,4d8,4dc
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0
** HOT: 4f4 - range: 4f4,4f8,4fc,500,504,508
** HOT: 50c - range: 50c,510,514,518,51c
** HOT: 520 - range: 520,524,528,52c,530
** HOT: 534 - range: 534,538,53c,540,544
** HOT: 548 - range: 548,54c,550,554,558
** HOT: 55c - range: 55c,560,564,568,56c,570,574
** HOT: 560 - range: 560,564,568,56c,570,574
** HOT: 578 - range: 578,57c,580
** HOT: 584 - range: 584,588,58c,590,594,598,59c,5a0
** HOT: 588 - range: 588,58c,590,594,598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8,5bc,5c0,5c4,5c8,5cc,5d0
** HOT: 5b4 - range: 5b4,5b8,5bc,5c0,5c4,5c8,5cc,5d0
** HOT: 5d4 - range: 5d4,5d8,5dc
** HOT: 5e0 - range: 5e0,5e4,5e8,5ec,5f0,5f4
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600
** HOT: 604 - range: 604,608,60c,610,614,618,61c
** HOT: 608 - range: 608,60c,610,614,618,61c
** HOT: 620 - range: 620,624,628
** HOT: 62c - range: 62c,630,634,638,63c,640,644,648
** HOT: 630 - range: 630,634,638,63c,640,644,648
** HOT: 64c - range: 64c,650,654
** HOT: 658 - range: 658,65c,660,664
** HOT: 668 - range: 668,66c,670,674,678,67c
