Running in EVM:
0	 0	PUSH4	05F0	 	 
- stack 0: 0x5F0
1	 5	PUSH2	0590	 ;; _rambegin	 
- stack 1: 0x5F0
- stack 0: 0x590
2	 8	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x590
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x5F0
- stack 0: 0x591
4	 B	PUSH2	0400	 	 
- stack 2: 0x5F0
- stack 1: 0x591
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F9E00053004200660000008600000099000000B3000000D00000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F9E00053004200660000008600000099000000B3000000D00000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F9E00053004200660000008600000099000000B3000000D0000000E30002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F9E00053004200660000008600000099000000B3000000D0000000E30002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1568(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F9E00053004200660000008600000099000000B3000000D0000000E30002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F9E00053004200660000008600000099000000B3000000D0000000E30002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F9E0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F9E0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF9E0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF9E0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9E0
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x9E0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x9E0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x53004200660000008600000099000000B3000000D0000000E3000200FD0588
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x53004200660000008600000099000000B3000000D0000000E3000200FD0588
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x660000008600000099000000B3000000D0000000E3000200FD058800860000
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x660000008600000099000000B3000000D0000000E3000200FD058800860000
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_67a0fe92a8a5991d2445159c046d8d94208091bc0976388676bc4f16b0890b43	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_67a0fe92a8a5991d2445159c046d8d94208091bc0976388676bc4f16b0890b43	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x9E0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x8600000099000000B3000000D0000000E3000200FD05880086000000990001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x8600000099000000B3000000D0000000E3000200FD05880086000000990001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	80000000	 	 
- stack 1: 0x410
- stack 0: 0x80000000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x80000000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000000D0000000E3000200FD0588008600000099000100B30000
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000000D0000000E3000200FD0588008600000099000100B30000
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000000D0000000E3000200FD0588008600000099000100B30000
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000000D0000000E3000200FD0588008600000099000100B30000
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x990000
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x990000
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
95	 A6	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
96	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
97	 AA	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
98	 AC	ADD		 	 
- stack 0: 0x418
99	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
100	 AE	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB3000000D0000000E3000200FD0588008600000099000100B30000013F0000
101	 AF	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB3000000D0000000E3000200FD0588008600000099000100B30000013F0000
- stack 0: 0xF0
102	 B1	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB3
103	 B2	JUMP		 	 
- stack 0: 0x418
104	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x418
105	 B4	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
106	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0x80000000
107	 B8	PUSH1	03	 	 
- stack 2: 0x418
- stack 1: 0x80000000
- stack 0: 0x3
108	 BA	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
109	 BB	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
110	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x0
111	 BF	PUSH1	1F	 	 
- stack 3: 0x418
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x0
- stack 0: 0x1F
112	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x0
113	 C2	SAR		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
114	 C3	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x60
115	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
116	 C7	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
117	 C9	ADD		 	 
- stack 0: 0x41C
118	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
119	 CB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD0000000E3000200FD0588008600000099000100B30000013F000000E30003
120	 CC	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD0000000E3000200FD0588008600000099000100B30000013F000000E30003
- stack 0: 0xF0
121	 CE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD0
122	 CF	JUMP		 	 
- stack 0: 0x41C
123	 D0	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x41C
124	 D1	PUSH4	80000000	 	 
- stack 1: 0x41C
- stack 0: 0x80000000
125	 D6	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x80000000
- stack 0: 0x3A0
126	 D9	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
127	 DA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
128	 DC	ADD		 	 
- stack 0: 0x420
129	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
130	 DE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE3000200FD0588008600000099000100B30000013F000000E3000300FD0570
131	 DF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xE3000200FD0588008600000099000100B30000013F000000E3000300FD0570
- stack 0: 0xF0
132	 E1	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE3
133	 E2	JUMP		 	 
- stack 0: 0x420
134	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
135	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
136	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE3000200FD0588008600000099000100B30000013F000000E3000300FD0570
137	 E6	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xE3000200FD0588008600000099000100B30000013F000000E3000300FD0570
- stack 0: 0xE0
138	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE30002
139	 E9	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xE30002
- stack 0: 0xFFFF
140	 EC	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
141	 ED	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
142	 EF	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
143	 F0	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
144	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
145	 F4	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
146	 F6	ADD		 	 
- stack 0: 0x424
147	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
148	 F8	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0xFD0588008600000099000100B30000013F000000E3000300FD057000860000
149	 F9	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0xFD0588008600000099000100B30000013F000000E3000300FD057000860000
- stack 0: 0xF0
150	 FB	SHR		 	 
- stack 1: 0x424
- stack 0: 0xFD
151	 FC	JUMP		 	 
- stack 0: 0x424
152	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x424
153	 FE	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
154	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
155	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xFFFFFFFF
156	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x80000000
157	 108	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x80000000
- stack 0: 0x3A0
158	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x80000000
- stack 0: 0x80000000
159	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
160	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x80000000
- stack 0: 0x80000000
161	 112	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
162	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x11B
163	 116	JUMPI		 	 
- stack 0: 0x424
164	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x424
- stack 0: 0x135
165	 11A	JUMP		 	 
- stack 0: 0x424
166	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x424
167	 136	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
168	 138	ADD		 	 
- stack 0: 0x428
169	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
170	 13A	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x8600000099000100B30000013F000000E3000300FD05700086000000990007
171	 13B	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x8600000099000100B30000013F000000E3000300FD05700086000000990007
- stack 0: 0xF0
172	 13D	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
173	 13E	JUMP		 	 
- stack 0: 0x428
174	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x428
175	 87	PUSH4	80000000	 	 
- stack 1: 0x428
- stack 0: 0x80000000
176	 8C	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x80000000
- stack 0: 0x20
177	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
178	 90	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
179	 92	ADD		 	 
- stack 0: 0x42C
180	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
181	 94	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99000100B30000013F000000E3000300FD0570008600000099000700B30000
182	 95	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x99000100B30000013F000000E3000300FD0570008600000099000700B30000
- stack 0: 0xF0
183	 97	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x99
184	 98	JUMP		 	 
- stack 0: 0x42C
185	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
186	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
187	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99000100B30000013F000000E3000300FD0570008600000099000700B30000
188	 9C	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x99000100B30000013F000000E3000300FD0570008600000099000700B30000
- stack 0: 0xE0
189	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x990001
190	 9F	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x990001
- stack 0: 0xFFFF
191	 A2	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
192	 A3	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
193	 A5	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
194	 A6	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
195	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
196	 AA	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
197	 AC	ADD		 	 
- stack 0: 0x430
198	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
199	 AE	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB30000013F000000E3000300FD0570008600000099000700B300000152F000
200	 AF	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB30000013F000000E3000300FD0570008600000099000700B300000152F000
- stack 0: 0xF0
201	 B1	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB3
202	 B2	JUMP		 	 
- stack 0: 0x430
203	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x430
204	 B4	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
205	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0x80000000
206	 B8	PUSH1	03	 	 
- stack 2: 0x430
- stack 1: 0x80000000
- stack 0: 0x3
207	 BA	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
208	 BB	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
209	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1
210	 BF	PUSH1	1F	 	 
- stack 3: 0x430
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1
- stack 0: 0x1F
211	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1
212	 C2	SAR		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
213	 C3	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
- stack 0: 0x60
214	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
215	 C7	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
216	 C9	ADD		 	 
- stack 0: 0x434
217	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
218	 CB	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x13F000000E3000300FD0570008600000099000700B300000152F00000E30004
219	 CC	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x13F000000E3000300FD0570008600000099000700B300000152F00000E30004
- stack 0: 0xF0
220	 CE	SHR		 	 
- stack 1: 0x434
- stack 0: 0x13F
221	 CF	JUMP		 	 
- stack 0: 0x434
222	 13F	JUMPDEST		 ;; __riscvimpl_LUI_c0000eb7	  ;; # instr: lui t4,0xc0000(ignore imm)
- stack 0: 0x434
223	 140	PUSH4	c0000000	 	 
- stack 1: 0x434
- stack 0: 0xC0000000
224	 145	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0xC0000000
- stack 0: 0x3A0
225	 148	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
226	 149	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
227	 14B	ADD		 	 
- stack 0: 0x438
228	 14C	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
229	 14D	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE3000300FD0570008600000099000700B300000152F00000E3000400FD0558
230	 14E	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xE3000300FD0570008600000099000700B300000152F00000E3000400FD0558
- stack 0: 0xF0
231	 150	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE3
232	 151	JUMP		 	 
- stack 0: 0x438
233	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
234	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
235	 E5	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE3000300FD0570008600000099000700B300000152F00000E3000400FD0558
236	 E6	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xE3000300FD0570008600000099000700B300000152F00000E3000400FD0558
- stack 0: 0xE0
237	 E8	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE30003
238	 E9	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xE30003
- stack 0: 0xFFFF
239	 EC	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
240	 ED	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
241	 EF	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
242	 F0	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
243	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
244	 F4	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
245	 F6	ADD		 	 
- stack 0: 0x43C
246	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
247	 F8	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xFD0570008600000099000700B300000152F00000E3000400FD055800860000
248	 F9	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xFD0570008600000099000700B300000152F00000E3000400FD055800860000
- stack 0: 0xF0
249	 FB	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xFD
250	 FC	JUMP		 	 
- stack 0: 0x43C
251	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x43C
252	 FE	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
253	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
254	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
- stack 0: 0xFFFFFFFF
255	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0xC0000000
256	 108	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xC0000000
- stack 0: 0x3A0
257	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0xC0000000
- stack 0: 0xC0000000
258	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0xC0000000
- stack 1: 0xC0000000
- stack 0: 0xFFFFFFFF
259	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0xC0000000
- stack 0: 0xC0000000
260	 112	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
261	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x11B
262	 116	JUMPI		 	 
- stack 0: 0x43C
263	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x43C
- stack 0: 0x135
264	 11A	JUMP		 	 
- stack 0: 0x43C
265	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x43C
266	 136	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
267	 138	ADD		 	 
- stack 0: 0x440
268	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
269	 13A	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x8600000099000700B300000152F00000E3000400FD0558008600000099000E
270	 13B	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x8600000099000700B300000152F00000E3000400FD0558008600000099000E
- stack 0: 0xF0
271	 13D	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
272	 13E	JUMP		 	 
- stack 0: 0x440
273	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x440
274	 87	PUSH4	80000000	 	 
- stack 1: 0x440
- stack 0: 0x80000000
275	 8C	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x80000000
- stack 0: 0x20
276	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
277	 90	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
278	 92	ADD		 	 
- stack 0: 0x444
279	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
280	 94	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x99000700B300000152F00000E3000400FD0558008600000099000E00B30000
281	 95	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x99000700B300000152F00000E3000400FD0558008600000099000E00B30000
- stack 0: 0xF0
282	 97	SHR		 	 
- stack 1: 0x444
- stack 0: 0x99
283	 98	JUMP		 	 
- stack 0: 0x444
284	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
285	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
286	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x99000700B300000152F00000E3000400FD0558008600000099000E00B30000
287	 9C	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x99000700B300000152F00000E3000400FD0558008600000099000E00B30000
- stack 0: 0xE0
288	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0x990007
289	 9F	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x990007
- stack 0: 0xFFFF
290	 A2	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
291	 A3	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
292	 A5	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
293	 A6	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
294	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
295	 AA	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
296	 AC	ADD		 	 
- stack 0: 0x448
297	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
298	 AE	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xB300000152F00000E3000400FD0558008600000099000E00B300000165FFE0
299	 AF	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xB300000152F00000E3000400FD0558008600000099000E00B300000165FFE0
- stack 0: 0xF0
300	 B1	SHR		 	 
- stack 1: 0x448
- stack 0: 0xB3
301	 B2	JUMP		 	 
- stack 0: 0x448
302	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x448
303	 B4	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
304	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x80000000
305	 B8	PUSH1	03	 	 
- stack 2: 0x448
- stack 1: 0x80000000
- stack 0: 0x3
306	 BA	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
307	 BB	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
308	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
309	 BF	PUSH1	1F	 	 
- stack 3: 0x448
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
310	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
311	 C2	SAR		 	 
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
312	 C3	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
313	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
314	 C7	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
315	 C9	ADD		 	 
- stack 0: 0x44C
316	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
317	 CB	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x152F00000E3000400FD0558008600000099000E00B300000165FFE000E30005
318	 CC	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x152F00000E3000400FD0558008600000099000E00B300000165FFE000E30005
- stack 0: 0xF0
319	 CE	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x152
320	 CF	JUMP		 	 
- stack 0: 0x44C
321	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x44C
322	 153	PUSH4	ff000000	 	 
- stack 1: 0x44C
- stack 0: 0xFF000000
323	 158	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFF000000
- stack 0: 0x3A0
324	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
325	 15C	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
326	 15E	ADD		 	 
- stack 0: 0x450
327	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
328	 160	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xE3000400FD0558008600000099000E00B300000165FFE000E3000500FD0540
329	 161	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xE3000400FD0558008600000099000E00B300000165FFE000E3000500FD0540
- stack 0: 0xF0
330	 163	SHR		 	 
- stack 1: 0x450
- stack 0: 0xE3
331	 164	JUMP		 	 
- stack 0: 0x450
332	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
333	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
334	 E5	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xE3000400FD0558008600000099000E00B300000165FFE000E3000500FD0540
335	 E6	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xE3000400FD0558008600000099000E00B300000165FFE000E3000500FD0540
- stack 0: 0xE0
336	 E8	SHR		 	 
- stack 1: 0x450
- stack 0: 0xE30004
337	 E9	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xE30004
- stack 0: 0xFFFF
338	 EC	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
339	 ED	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
340	 EF	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
341	 F0	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
342	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
343	 F4	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
344	 F6	ADD		 	 
- stack 0: 0x454
345	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
346	 F8	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xFD0558008600000099000E00B300000165FFE000E3000500FD054000860000
347	 F9	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xFD0558008600000099000E00B300000165FFE000E3000500FD054000860000
- stack 0: 0xF0
348	 FB	SHR		 	 
- stack 1: 0x454
- stack 0: 0xFD
349	 FC	JUMP		 	 
- stack 0: 0x454
350	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x454
351	 FE	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
352	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
353	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
354	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFF000000
355	 108	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF000000
- stack 0: 0x3A0
356	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFF000000
- stack 0: 0xFF000000
357	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
358	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFF000000
- stack 0: 0xFF000000
359	 112	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
360	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x11B
361	 116	JUMPI		 	 
- stack 0: 0x454
362	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x454
- stack 0: 0x135
363	 11A	JUMP		 	 
- stack 0: 0x454
364	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x454
365	 136	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
366	 138	ADD		 	 
- stack 0: 0x458
367	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
368	 13A	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000099000E00B300000165FFE000E3000500FD05400086000001780001
369	 13B	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x8600000099000E00B300000165FFE000E3000500FD05400086000001780001
- stack 0: 0xF0
370	 13D	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
371	 13E	JUMP		 	 
- stack 0: 0x458
372	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x458
373	 87	PUSH4	80000000	 	 
- stack 1: 0x458
- stack 0: 0x80000000
374	 8C	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x80000000
- stack 0: 0x20
375	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
376	 90	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
377	 92	ADD		 	 
- stack 0: 0x45C
378	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
379	 94	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x99000E00B300000165FFE000E3000500FD054000860000017800010099001F
380	 95	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x99000E00B300000165FFE000E3000500FD054000860000017800010099001F
- stack 0: 0xF0
381	 97	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x99
382	 98	JUMP		 	 
- stack 0: 0x45C
383	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x45C
384	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
385	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x99000E00B300000165FFE000E3000500FD054000860000017800010099001F
386	 9C	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x99000E00B300000165FFE000E3000500FD054000860000017800010099001F
- stack 0: 0xE0
387	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x99000E
388	 9F	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x99000E
- stack 0: 0xFFFF
389	 A2	AND		 	 
- stack 1: 0x45C
- stack 0: 0xE
390	 A3	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xE
- stack 0: 0x1
391	 A5	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xE
392	 A6	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xE
- stack 0: 0x40
393	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
394	 AA	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
395	 AC	ADD		 	 
- stack 0: 0x460
396	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
397	 AE	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB300000165FFE000E3000500FD054000860000017800010099001F00B30000
398	 AF	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB300000165FFE000E3000500FD054000860000017800010099001F00B30000
- stack 0: 0xF0
399	 B1	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB3
400	 B2	JUMP		 	 
- stack 0: 0x460
401	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x460
402	 B4	PUSH2	0020	 	 
- stack 1: 0x460
- stack 0: 0x20
403	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x460
- stack 0: 0x80000000
404	 B8	PUSH1	03	 	 
- stack 2: 0x460
- stack 1: 0x80000000
- stack 0: 0x3
405	 BA	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
406	 BB	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
407	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x460
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
408	 BF	PUSH1	1F	 	 
- stack 3: 0x460
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
409	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x460
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
410	 C2	SAR		 	 
- stack 1: 0x460
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
411	 C3	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
412	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
413	 C7	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
414	 C9	ADD		 	 
- stack 0: 0x464
415	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
416	 CB	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x165FFE000E3000500FD054000860000017800010099001F00B300000197FFFF
417	 CC	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x165FFE000E3000500FD054000860000017800010099001F00B300000197FFFF
- stack 0: 0xF0
418	 CE	SHR		 	 
- stack 1: 0x464
- stack 0: 0x165
419	 CF	JUMP		 	 
- stack 0: 0x464
420	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x464
421	 166	PUSH4	fffe0000	 	 
- stack 1: 0x464
- stack 0: 0xFFFE0000
422	 16B	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
423	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
424	 16F	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
425	 171	ADD		 	 
- stack 0: 0x468
426	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
427	 173	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xE3000500FD054000860000017800010099001F00B300000197FFFF00E30006
428	 174	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xE3000500FD054000860000017800010099001F00B300000197FFFF00E30006
- stack 0: 0xF0
429	 176	SHR		 	 
- stack 1: 0x468
- stack 0: 0xE3
430	 177	JUMP		 	 
- stack 0: 0x468
431	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
432	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
433	 E5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xE3000500FD054000860000017800010099001F00B300000197FFFF00E30006
434	 E6	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xE3000500FD054000860000017800010099001F00B300000197FFFF00E30006
- stack 0: 0xE0
435	 E8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xE30005
436	 E9	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xE30005
- stack 0: 0xFFFF
437	 EC	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
438	 ED	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
439	 EF	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
440	 F0	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
441	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
442	 F4	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
443	 F6	ADD		 	 
- stack 0: 0x46C
444	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
445	 F8	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xFD054000860000017800010099001F00B300000197FFFF00E3000600FD0524
446	 F9	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xFD054000860000017800010099001F00B300000197FFFF00E3000600FD0524
- stack 0: 0xF0
447	 FB	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xFD
448	 FC	JUMP		 	 
- stack 0: 0x46C
449	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x46C
450	 FE	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
451	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
452	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
453	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0xFFFE0000
454	 108	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
455	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
456	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
457	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
458	 112	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
459	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x11B
460	 116	JUMPI		 	 
- stack 0: 0x46C
461	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x46C
- stack 0: 0x135
462	 11A	JUMP		 	 
- stack 0: 0x46C
463	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x46C
464	 136	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
465	 138	ADD		 	 
- stack 0: 0x470
466	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
467	 13A	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x860000017800010099001F00B300000197FFFF00E3000600FD052400860000
468	 13B	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x860000017800010099001F00B300000197FFFF00E3000600FD052400860000
- stack 0: 0xF0
469	 13D	SHR		 	 
- stack 1: 0x470
- stack 0: 0x86
470	 13E	JUMP		 	 
- stack 0: 0x470
471	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x470
472	 87	PUSH4	80000000	 	 
- stack 1: 0x470
- stack 0: 0x80000000
473	 8C	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x20
474	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
475	 90	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
476	 92	ADD		 	 
- stack 0: 0x474
477	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
478	 94	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x17800010099001F00B300000197FFFF00E3000600FD0524008600000178FFFF
479	 95	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x17800010099001F00B300000197FFFF00E3000600FD0524008600000178FFFF
- stack 0: 0xF0
480	 97	SHR		 	 
- stack 1: 0x474
- stack 0: 0x178
481	 98	JUMP		 	 
- stack 0: 0x474
482	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x474
483	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
484	 17A	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x17800010099001F00B300000197FFFF00E3000600FD0524008600000178FFFF
485	 17B	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x17800010099001F00B300000197FFFF00E3000600FD0524008600000178FFFF
- stack 0: 0xE0
486	 17D	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1780001
487	 17E	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x1780001
- stack 0: 0xFFFF
488	 181	AND		 	 
- stack 1: 0x474
- stack 0: 0x1
489	 182	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x1
490	 184	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x1
491	 185	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x20
492	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x474
- stack 1: 0x1
- stack 0: 0x80000000
493	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x474
- stack 0: 0x80000001
494	 18A	PUSH2	0020	 	 
- stack 2: 0x474
- stack 1: 0x80000001
- stack 0: 0x20
495	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x474
496	 18E	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
497	 190	ADD		 	 
- stack 0: 0x478
498	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
499	 192	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x99001F00B300000197FFFF00E3000600FD0524008600000178FFFF00990000
500	 193	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x99001F00B300000197FFFF00E3000600FD0524008600000178FFFF00990000
- stack 0: 0xF0
501	 195	SHR		 	 
- stack 1: 0x478
- stack 0: 0x99
502	 196	JUMP		 	 
- stack 0: 0x478
503	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x478
504	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
505	 9B	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x99001F00B300000197FFFF00E3000600FD0524008600000178FFFF00990000
506	 9C	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x99001F00B300000197FFFF00E3000600FD0524008600000178FFFF00990000
- stack 0: 0xE0
507	 9E	SHR		 	 
- stack 1: 0x478
- stack 0: 0x99001F
508	 9F	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x99001F
- stack 0: 0xFFFF
509	 A2	AND		 	 
- stack 1: 0x478
- stack 0: 0x1F
510	 A3	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x1F
- stack 0: 0x1
511	 A5	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x1F
512	 A6	PUSH2	0040	 	 
- stack 2: 0x478
- stack 1: 0x1F
- stack 0: 0x40
513	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x478
514	 AA	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
515	 AC	ADD		 	 
- stack 0: 0x47C
516	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
517	 AE	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xB300000197FFFF00E3000600FD0524008600000178FFFF0099000000B30000
518	 AF	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xB300000197FFFF00E3000600FD0524008600000178FFFF0099000000B30000
- stack 0: 0xF0
519	 B1	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xB3
520	 B2	JUMP		 	 
- stack 0: 0x47C
521	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x47C
522	 B4	PUSH2	0020	 	 
- stack 1: 0x47C
- stack 0: 0x20
523	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x47C
- stack 0: 0x80000001
524	 B8	PUSH1	03	 	 
- stack 2: 0x47C
- stack 1: 0x80000001
- stack 0: 0x3
525	 BA	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
526	 BB	PUSH2	0040	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x40
527	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
528	 BF	PUSH1	1F	 	 
- stack 3: 0x47C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0x1F
- stack 0: 0x1F
529	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
530	 C2	SAR		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
531	 C3	PUSH2	0060	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
532	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x47C
533	 C7	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
534	 C9	ADD		 	 
- stack 0: 0x480
535	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
536	 CB	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x197FFFF00E3000600FD0524008600000178FFFF0099000000B3000000D00000
537	 CC	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x197FFFF00E3000600FD0524008600000178FFFF0099000000B3000000D00000
- stack 0: 0xF0
538	 CE	SHR		 	 
- stack 1: 0x480
- stack 0: 0x197
539	 CF	JUMP		 	 
- stack 0: 0x480
540	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x480
541	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
542	 199	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x197FFFF00E3000600FD0524008600000178FFFF0099000000B3000000D00000
543	 19A	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x197FFFF00E3000600FD0524008600000178FFFF0099000000B3000000D00000
- stack 0: 0xE0
544	 19C	SHR		 	 
- stack 1: 0x480
- stack 0: 0x197FFFF
545	 19D	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
546	 1A0	AND		 	 
- stack 1: 0x480
- stack 0: 0xFFFF
547	 1A1	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xFFFF
- stack 0: 0x1
548	 1A3	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
549	 1A4	PUSH2	03A0	 	 
- stack 2: 0x480
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
550	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x480
551	 1A8	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
552	 1AA	ADD		 	 
- stack 0: 0x484
553	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
554	 1AC	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xE3000600FD0524008600000178FFFF0099000000B3000000D0000001B1FFFF
555	 1AD	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xE3000600FD0524008600000178FFFF0099000000B3000000D0000001B1FFFF
- stack 0: 0xF0
556	 1AF	SHR		 	 
- stack 1: 0x484
- stack 0: 0xE3
557	 1B0	JUMP		 	 
- stack 0: 0x484
558	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x484
559	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
560	 E5	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xE3000600FD0524008600000178FFFF0099000000B3000000D0000001B1FFFF
561	 E6	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0xE3000600FD0524008600000178FFFF0099000000B3000000D0000001B1FFFF
- stack 0: 0xE0
562	 E8	SHR		 	 
- stack 1: 0x484
- stack 0: 0xE30006
563	 E9	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0xE30006
- stack 0: 0xFFFF
564	 EC	AND		 	 
- stack 1: 0x484
- stack 0: 0x6
565	 ED	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x6
- stack 0: 0x1
566	 EF	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x6
567	 F0	PUSH2	0380	 	 
- stack 2: 0x484
- stack 1: 0x6
- stack 0: 0x380
568	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x484
569	 F4	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
570	 F6	ADD		 	 
- stack 0: 0x488
571	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
572	 F8	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xFD0524008600000178FFFF0099000000B3000000D0000001B1FFFF00E30007
573	 F9	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xFD0524008600000178FFFF0099000000B3000000D0000001B1FFFF00E30007
- stack 0: 0xF0
574	 FB	SHR		 	 
- stack 1: 0x488
- stack 0: 0xFD
575	 FC	JUMP		 	 
- stack 0: 0x488
576	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x488
577	 FE	PUSH2	0060	 	 
- stack 1: 0x488
- stack 0: 0x60
578	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
579	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
580	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
581	 108	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
582	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
583	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x488
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
584	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
585	 112	SUB		 	 
- stack 1: 0x488
- stack 0: 0x0
586	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x488
- stack 1: 0x0
- stack 0: 0x11B
587	 116	JUMPI		 	 
- stack 0: 0x488
588	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x488
- stack 0: 0x135
589	 11A	JUMP		 	 
- stack 0: 0x488
590	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x488
591	 136	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
592	 138	ADD		 	 
- stack 0: 0x48C
593	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
594	 13A	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x8600000178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD0504
595	 13B	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x8600000178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD0504
- stack 0: 0xF0
596	 13D	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x86
597	 13E	JUMP		 	 
- stack 0: 0x48C
598	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x48C
599	 87	PUSH4	80000000	 	 
- stack 1: 0x48C
- stack 0: 0x80000000
600	 8C	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x80000000
- stack 0: 0x20
601	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x48C
602	 90	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
603	 92	ADD		 	 
- stack 0: 0x490
604	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
605	 94	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD050400860000
606	 95	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD050400860000
- stack 0: 0xF0
607	 97	SHR		 	 
- stack 1: 0x490
- stack 0: 0x178
608	 98	JUMP		 	 
- stack 0: 0x490
609	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x490
610	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
611	 17A	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD050400860000
612	 17B	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0x178FFFF0099000000B3000000D0000001B1FFFF00E3000700FD050400860000
- stack 0: 0xE0
613	 17D	SHR		 	 
- stack 1: 0x490
- stack 0: 0x178FFFF
614	 17E	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0x178FFFF
- stack 0: 0xFFFF
615	 181	AND		 	 
- stack 1: 0x490
- stack 0: 0xFFFF
616	 182	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0xFFFF
- stack 0: 0x1
617	 184	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
618	 185	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
619	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
620	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x490
- stack 0: 0x7FFFFFFF
621	 18A	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
622	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x490
623	 18E	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
624	 190	ADD		 	 
- stack 0: 0x494
625	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
626	 192	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99000000B3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF
627	 193	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x99000000B3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF
- stack 0: 0xF0
628	 195	SHR		 	 
- stack 1: 0x494
- stack 0: 0x99
629	 196	JUMP		 	 
- stack 0: 0x494
630	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x494
631	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
632	 9B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x99000000B3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF
633	 9C	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x99000000B3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF
- stack 0: 0xE0
634	 9E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x990000
635	 9F	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x990000
- stack 0: 0xFFFF
636	 A2	AND		 	 
- stack 1: 0x494
- stack 0: 0x0
637	 A3	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x1
638	 A5	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x0
639	 A6	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x40
640	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x494
641	 AA	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
642	 AC	ADD		 	 
- stack 0: 0x498
643	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
644	 AE	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xB3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF00990001
645	 AF	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xB3000000D0000001B1FFFF00E3000700FD0504008600000178FFFF00990001
- stack 0: 0xF0
646	 B1	SHR		 	 
- stack 1: 0x498
- stack 0: 0xB3
647	 B2	JUMP		 	 
- stack 0: 0x498
648	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x498
649	 B4	PUSH2	0020	 	 
- stack 1: 0x498
- stack 0: 0x20
650	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x498
- stack 0: 0x7FFFFFFF
651	 B8	PUSH1	03	 	 
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
652	 BA	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7FFFFFFF
653	 BB	PUSH2	0040	 	 
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
654	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x0
655	 BF	PUSH1	1F	 	 
- stack 3: 0x498
- stack 2: 0x7FFFFFFF
- stack 1: 0x0
- stack 0: 0x1F
656	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x0
657	 C2	SAR		 	 
- stack 1: 0x498
- stack 0: 0x7FFFFFFF
658	 C3	PUSH2	0060	 	 
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
659	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x498
660	 C7	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
661	 C9	ADD		 	 
- stack 0: 0x49C
662	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
663	 CB	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xD0000001B1FFFF00E3000700FD0504008600000178FFFF0099000100B30000
664	 CC	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xD0000001B1FFFF00E3000700FD0504008600000178FFFF0099000100B30000
- stack 0: 0xF0
665	 CE	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xD0
666	 CF	JUMP		 	 
- stack 0: 0x49C
667	 D0	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x49C
668	 D1	PUSH4	80000000	 	 
- stack 1: 0x49C
- stack 0: 0x80000000
669	 D6	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x80000000
- stack 0: 0x3A0
670	 D9	MSTORE		 	  ;; # store to x29
- stack 0: 0x49C
671	 DA	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
672	 DC	ADD		 	 
- stack 0: 0x4A0
673	 DD	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
674	 DE	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1B1FFFF00E3000700FD0504008600000178FFFF0099000100B3000001D00000
675	 DF	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1B1FFFF00E3000700FD0504008600000178FFFF0099000100B3000001D00000
- stack 0: 0xF0
676	 E1	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1B1
677	 E2	JUMP		 	 
- stack 0: 0x4A0
678	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4A0
679	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
680	 1B3	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1B1FFFF00E3000700FD0504008600000178FFFF0099000100B3000001D00000
681	 1B4	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x1B1FFFF00E3000700FD0504008600000178FFFF0099000100B3000001D00000
- stack 0: 0xE0
682	 1B6	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1B1FFFF
683	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x1B1FFFF
- stack 0: 0xFFFF
684	 1BA	AND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFF
685	 1BB	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFF
- stack 0: 0x1
686	 1BD	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
687	 1BE	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
688	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
689	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x4A0
- stack 0: 0x7FFFFFFF
690	 1C3	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
691	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A0
692	 1C7	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
693	 1C9	ADD		 	 
- stack 0: 0x4A4
694	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
695	 1CB	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xE3000700FD0504008600000178FFFF0099000100B3000001D0000001B1FFFF
696	 1CC	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0xE3000700FD0504008600000178FFFF0099000100B3000001D0000001B1FFFF
- stack 0: 0xF0
697	 1CE	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xE3
698	 1CF	JUMP		 	 
- stack 0: 0x4A4
699	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A4
700	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
701	 E5	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0xE3000700FD0504008600000178FFFF0099000100B3000001D0000001B1FFFF
702	 E6	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0xE3000700FD0504008600000178FFFF0099000100B3000001D0000001B1FFFF
- stack 0: 0xE0
703	 E8	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0xE30007
704	 E9	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0xE30007
- stack 0: 0xFFFF
705	 EC	AND		 	 
- stack 1: 0x4A4
- stack 0: 0x7
706	 ED	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0x7
- stack 0: 0x1
707	 EF	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0x7
708	 F0	PUSH2	0380	 	 
- stack 2: 0x4A4
- stack 1: 0x7
- stack 0: 0x380
709	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A4
710	 F4	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
711	 F6	ADD		 	 
- stack 0: 0x4A8
712	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
713	 F8	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xFD0504008600000178FFFF0099000100B3000001D0000001B1FFFF00E30008
714	 F9	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xFD0504008600000178FFFF0099000100B3000001D0000001B1FFFF00E30008
- stack 0: 0xF0
715	 FB	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xFD
716	 FC	JUMP		 	 
- stack 0: 0x4A8
717	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x4A8
718	 FE	PUSH2	0060	 	 
- stack 1: 0x4A8
- stack 0: 0x60
719	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x4A8
- stack 0: 0x7FFFFFFF
720	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
721	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A8
- stack 0: 0x7FFFFFFF
722	 108	PUSH2	03A0	 	 
- stack 2: 0x4A8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
723	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
724	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4A8
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
725	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4A8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
726	 112	SUB		 	 
- stack 1: 0x4A8
- stack 0: 0x0
727	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x4A8
- stack 1: 0x0
- stack 0: 0x11B
728	 116	JUMPI		 	 
- stack 0: 0x4A8
729	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x4A8
- stack 0: 0x135
730	 11A	JUMP		 	 
- stack 0: 0x4A8
731	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x4A8
732	 136	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
733	 138	ADD		 	 
- stack 0: 0x4AC
734	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
735	 13A	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x8600000178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E4
736	 13B	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x8600000178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E4
- stack 0: 0xF0
737	 13D	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x86
738	 13E	JUMP		 	 
- stack 0: 0x4AC
739	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4AC
740	 87	PUSH4	80000000	 	 
- stack 1: 0x4AC
- stack 0: 0x80000000
741	 8C	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x80000000
- stack 0: 0x20
742	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4AC
743	 90	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
744	 92	ADD		 	 
- stack 0: 0x4B0
745	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
746	 94	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E400860000
747	 95	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E400860000
- stack 0: 0xF0
748	 97	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x178
749	 98	JUMP		 	 
- stack 0: 0x4B0
750	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4B0
751	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
752	 17A	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E400860000
753	 17B	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x178FFFF0099000100B3000001D0000001B1FFFF00E3000800FD04E400860000
- stack 0: 0xE0
754	 17D	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x178FFFF
755	 17E	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x178FFFF
- stack 0: 0xFFFF
756	 181	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF
757	 182	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF
- stack 0: 0x1
758	 184	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
759	 185	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
760	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
761	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x4B0
- stack 0: 0x7FFFFFFF
762	 18A	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
763	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
764	 18E	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
765	 190	ADD		 	 
- stack 0: 0x4B4
766	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
767	 192	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x99000100B3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF
768	 193	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x99000100B3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF
- stack 0: 0xF0
769	 195	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x99
770	 196	JUMP		 	 
- stack 0: 0x4B4
771	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4B4
772	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
773	 9B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x99000100B3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF
774	 9C	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x99000100B3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF
- stack 0: 0xE0
775	 9E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x990001
776	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x990001
- stack 0: 0xFFFF
777	 A2	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
778	 A3	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
779	 A5	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
780	 A6	PUSH2	0040	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x40
781	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B4
782	 AA	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
783	 AC	ADD		 	 
- stack 0: 0x4B8
784	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
785	 AE	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xB3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF00990007
786	 AF	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xB3000001D0000001B1FFFF00E3000800FD04E4008600000178FFFF00990007
- stack 0: 0xF0
787	 B1	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xB3
788	 B2	JUMP		 	 
- stack 0: 0x4B8
789	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x4B8
790	 B4	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
791	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
792	 B8	PUSH1	03	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
793	 BA	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
794	 BB	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
795	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x1
796	 BF	PUSH1	1F	 	 
- stack 3: 0x4B8
- stack 2: 0x7FFFFFFF
- stack 1: 0x1
- stack 0: 0x1F
797	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x1
798	 C2	SAR		 	 
- stack 1: 0x4B8
- stack 0: 0x3FFFFFFF
799	 C3	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0x3FFFFFFF
- stack 0: 0x60
800	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
801	 C7	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
802	 C9	ADD		 	 
- stack 0: 0x4BC
803	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
804	 CB	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1D0000001B1FFFF00E3000800FD04E4008600000178FFFF0099000700B30000
805	 CC	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1D0000001B1FFFF00E3000800FD04E4008600000178FFFF0099000700B30000
- stack 0: 0xF0
806	 CE	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1D0
807	 CF	JUMP		 	 
- stack 0: 0x4BC
808	 1D0	JUMPDEST		 ;; __riscvimpl_LUI_40000eb7	  ;; # instr: lui t4,0x40000(ignore imm)
- stack 0: 0x4BC
809	 1D1	PUSH4	40000000	 	 
- stack 1: 0x4BC
- stack 0: 0x40000000
810	 1D6	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x40000000
- stack 0: 0x3A0
811	 1D9	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
812	 1DA	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
813	 1DC	ADD		 	 
- stack 0: 0x4C0
814	 1DD	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
815	 1DE	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x1B1FFFF00E3000800FD04E4008600000178FFFF0099000700B3000001E31000
816	 1DF	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x1B1FFFF00E3000800FD04E4008600000178FFFF0099000700B3000001E31000
- stack 0: 0xF0
817	 1E1	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1B1
818	 1E2	JUMP		 	 
- stack 0: 0x4C0
819	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4C0
820	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
821	 1B3	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x1B1FFFF00E3000800FD04E4008600000178FFFF0099000700B3000001E31000
822	 1B4	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x1B1FFFF00E3000800FD04E4008600000178FFFF0099000700B3000001E31000
- stack 0: 0xE0
823	 1B6	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1B1FFFF
824	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x1B1FFFF
- stack 0: 0xFFFF
825	 1BA	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFF
826	 1BB	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFF
- stack 0: 0x1
827	 1BD	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
828	 1BE	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
829	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40000000
830	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C0
- stack 0: 0x3FFFFFFF
831	 1C3	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0x3FFFFFFF
- stack 0: 0x3A0
832	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C0
833	 1C7	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
834	 1C9	ADD		 	 
- stack 0: 0x4C4
835	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
836	 1CB	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE3000800FD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF
837	 1CC	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xE3000800FD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF
- stack 0: 0xF0
838	 1CE	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE3
839	 1CF	JUMP		 	 
- stack 0: 0x4C4
840	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
841	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
842	 E5	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE3000800FD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF
843	 E6	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xE3000800FD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF
- stack 0: 0xE0
844	 E8	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE30008
845	 E9	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xE30008
- stack 0: 0xFFFF
846	 EC	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
847	 ED	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
848	 EF	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
849	 F0	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
850	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
851	 F4	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
852	 F6	ADD		 	 
- stack 0: 0x4C8
853	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
854	 F8	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xFD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF00E30009
855	 F9	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xFD04E4008600000178FFFF0099000700B3000001E3100001B1FFFF00E30009
- stack 0: 0xF0
856	 FB	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xFD
857	 FC	JUMP		 	 
- stack 0: 0x4C8
858	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x4C8
859	 FE	PUSH2	0060	 	 
- stack 1: 0x4C8
- stack 0: 0x60
860	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C8
- stack 0: 0x3FFFFFFF
861	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x3FFFFFFF
- stack 0: 0xFFFFFFFF
862	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x3FFFFFFF
863	 108	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0x3FFFFFFF
- stack 0: 0x3A0
864	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0x3FFFFFFF
- stack 0: 0x3FFFFFFF
865	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0x3FFFFFFF
- stack 1: 0x3FFFFFFF
- stack 0: 0xFFFFFFFF
866	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0x3FFFFFFF
- stack 0: 0x3FFFFFFF
867	 112	SUB		 	 
- stack 1: 0x4C8
- stack 0: 0x0
868	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x11B
869	 116	JUMPI		 	 
- stack 0: 0x4C8
870	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x4C8
- stack 0: 0x135
871	 11A	JUMP		 	 
- stack 0: 0x4C8
872	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x4C8
873	 136	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
874	 138	ADD		 	 
- stack 0: 0x4CC
875	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
876	 13A	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x8600000178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C4
877	 13B	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x8600000178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C4
- stack 0: 0xF0
878	 13D	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x86
879	 13E	JUMP		 	 
- stack 0: 0x4CC
880	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4CC
881	 87	PUSH4	80000000	 	 
- stack 1: 0x4CC
- stack 0: 0x80000000
882	 8C	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x80000000
- stack 0: 0x20
883	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
884	 90	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
885	 92	ADD		 	 
- stack 0: 0x4D0
886	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
887	 94	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C400860000
888	 95	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C400860000
- stack 0: 0xF0
889	 97	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x178
890	 98	JUMP		 	 
- stack 0: 0x4D0
891	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4D0
892	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
893	 17A	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C400860000
894	 17B	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x178FFFF0099000700B3000001E3100001B1FFFF00E3000900FD04C400860000
- stack 0: 0xE0
895	 17D	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x178FFFF
896	 17E	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x178FFFF
- stack 0: 0xFFFF
897	 181	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFF
898	 182	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFF
- stack 0: 0x1
899	 184	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
900	 185	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
901	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
902	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D0
- stack 0: 0x7FFFFFFF
903	 18A	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
904	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
905	 18E	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
906	 190	ADD		 	 
- stack 0: 0x4D4
907	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
908	 192	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99000700B3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF
909	 193	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x99000700B3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF
- stack 0: 0xF0
910	 195	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x99
911	 196	JUMP		 	 
- stack 0: 0x4D4
912	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4D4
913	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
914	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99000700B3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF
915	 9C	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x99000700B3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF
- stack 0: 0xE0
916	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x990007
917	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x990007
- stack 0: 0xFFFF
918	 A2	AND		 	 
- stack 1: 0x4D4
- stack 0: 0x7
919	 A3	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0x7
- stack 0: 0x1
920	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x7
921	 A6	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0x7
- stack 0: 0x40
922	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D4
923	 AA	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
924	 AC	ADD		 	 
- stack 0: 0x4D8
925	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
926	 AE	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xB3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF0099000E
927	 AF	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xB3000001E3100001B1FFFF00E3000900FD04C4008600000178FFFF0099000E
- stack 0: 0xF0
928	 B1	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xB3
929	 B2	JUMP		 	 
- stack 0: 0x4D8
930	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x4D8
931	 B4	PUSH2	0020	 	 
- stack 1: 0x4D8
- stack 0: 0x20
932	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D8
- stack 0: 0x7FFFFFFF
933	 B8	PUSH1	03	 	 
- stack 2: 0x4D8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
934	 BA	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x7FFFFFFF
935	 BB	PUSH2	0040	 	 
- stack 2: 0x4D8
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
936	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7
937	 BF	PUSH1	1F	 	 
- stack 3: 0x4D8
- stack 2: 0x7FFFFFFF
- stack 1: 0x7
- stack 0: 0x1F
938	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4D8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7
939	 C2	SAR		 	 
- stack 1: 0x4D8
- stack 0: 0xFFFFFF
940	 C3	PUSH2	0060	 	 
- stack 2: 0x4D8
- stack 1: 0xFFFFFF
- stack 0: 0x60
941	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D8
942	 C7	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
943	 C9	ADD		 	 
- stack 0: 0x4DC
944	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
945	 CB	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1E3100001B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B30000
946	 CC	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x1E3100001B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B30000
- stack 0: 0xF0
947	 CE	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x1E3
948	 CF	JUMP		 	 
- stack 0: 0x4DC
949	 1E3	JUMPDEST		 ;; __riscvimpl_LUI_1000eb7	  ;; # instr: lui t4,0x1000(ignore imm)
- stack 0: 0x4DC
950	 1E4	PUSH4	01000000	 	 
- stack 1: 0x4DC
- stack 0: 0x1000000
951	 1E9	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x1000000
- stack 0: 0x3A0
952	 1EC	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
953	 1ED	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
954	 1EF	ADD		 	 
- stack 0: 0x4E0
955	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
956	 1F1	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B3000001F60020
957	 1F2	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B3000001F60020
- stack 0: 0xF0
958	 1F4	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1B1
959	 1F5	JUMP		 	 
- stack 0: 0x4E0
960	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4E0
961	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
962	 1B3	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B3000001F60020
963	 1B4	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x1B1FFFF00E3000900FD04C4008600000178FFFF0099000E00B3000001F60020
- stack 0: 0xE0
964	 1B6	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1B1FFFF
965	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1B1FFFF
- stack 0: 0xFFFF
966	 1BA	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFF
967	 1BB	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFF
- stack 0: 0x1
968	 1BD	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
969	 1BE	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
970	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1000000
971	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x4E0
- stack 0: 0xFFFFFF
972	 1C3	PUSH2	03A0	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFF
- stack 0: 0x3A0
973	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E0
974	 1C7	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
975	 1C9	ADD		 	 
- stack 0: 0x4E4
976	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
977	 1CB	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xE3000900FD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF
978	 1CC	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xE3000900FD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF
- stack 0: 0xF0
979	 1CE	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xE3
980	 1CF	JUMP		 	 
- stack 0: 0x4E4
981	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E4
982	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
983	 E5	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xE3000900FD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF
984	 E6	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xE3000900FD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF
- stack 0: 0xE0
985	 E8	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xE30009
986	 E9	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xE30009
- stack 0: 0xFFFF
987	 EC	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
988	 ED	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x1
989	 EF	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x9
990	 F0	PUSH2	0380	 	 
- stack 2: 0x4E4
- stack 1: 0x9
- stack 0: 0x380
991	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E4
992	 F4	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
993	 F6	ADD		 	 
- stack 0: 0x4E8
994	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
995	 F8	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xFD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF00E3000A
996	 F9	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xFD04C4008600000178FFFF0099000E00B3000001F6002001B1FFFF00E3000A
- stack 0: 0xF0
997	 FB	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xFD
998	 FC	JUMP		 	 
- stack 0: 0x4E8
999	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x4E8
1000	 FE	PUSH2	0060	 	 
- stack 1: 0x4E8
- stack 0: 0x60
1001	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E8
- stack 0: 0xFFFFFF
1002	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFFFF
1003	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0xFFFFFF
1004	 108	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFF
- stack 0: 0x3A0
1005	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFF
1006	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0xFFFFFF
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFFFF
1007	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFF
1008	 112	SUB		 	 
- stack 1: 0x4E8
- stack 0: 0x0
1009	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x4E8
- stack 1: 0x0
- stack 0: 0x11B
1010	 116	JUMPI		 	 
- stack 0: 0x4E8
1011	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x4E8
- stack 0: 0x135
1012	 11A	JUMP		 	 
- stack 0: 0x4E8
1013	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x4E8
1014	 136	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1015	 138	ADD		 	 
- stack 0: 0x4EC
1016	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1017	 13A	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x8600000178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A4
1018	 13B	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x8600000178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A4
- stack 0: 0xF0
1019	 13D	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x86
1020	 13E	JUMP		 	 
- stack 0: 0x4EC
1021	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4EC
1022	 87	PUSH4	80000000	 	 
- stack 1: 0x4EC
- stack 0: 0x80000000
1023	 8C	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x80000000
- stack 0: 0x20
1024	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1025	 90	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1026	 92	ADD		 	 
- stack 0: 0x4F0
1027	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1028	 94	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A400860000
1029	 95	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A400860000
- stack 0: 0xF0
1030	 97	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x178
1031	 98	JUMP		 	 
- stack 0: 0x4F0
1032	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4F0
1033	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F0
- stack 0: 0x4F0
1034	 17A	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A400860000
1035	 17B	PUSH1	E0	 	 
- stack 2: 0x4F0
- stack 1: 0x178FFFF0099000E00B3000001F6002001B1FFFF00E3000A00FD04A400860000
- stack 0: 0xE0
1036	 17D	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x178FFFF
1037	 17E	PUSH2	FFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x178FFFF
- stack 0: 0xFFFF
1038	 181	AND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFF
1039	 182	PUSH1	01	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFF
- stack 0: 0x1
1040	 184	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1041	 185	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1042	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1043	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F0
- stack 0: 0x7FFFFFFF
1044	 18A	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1045	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1046	 18E	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1047	 190	ADD		 	 
- stack 0: 0x4F4
1048	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1049	 192	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x99000E00B3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF
1050	 193	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x99000E00B3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF
- stack 0: 0xF0
1051	 195	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x99
1052	 196	JUMP		 	 
- stack 0: 0x4F4
1053	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4F4
1054	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1055	 9B	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x99000E00B3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF
1056	 9C	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x99000E00B3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF
- stack 0: 0xE0
1057	 9E	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x99000E
1058	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x99000E
- stack 0: 0xFFFF
1059	 A2	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xE
1060	 A3	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xE
- stack 0: 0x1
1061	 A5	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xE
1062	 A6	PUSH2	0040	 	 
- stack 2: 0x4F4
- stack 1: 0xE
- stack 0: 0x40
1063	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4F4
1064	 AA	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1065	 AC	ADD		 	 
- stack 0: 0x4F8
1066	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1067	 AE	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xB3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF0099001F
1068	 AF	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xB3000001F6002001B1FFFF00E3000A00FD04A4008600000178FFFF0099001F
- stack 0: 0xF0
1069	 B1	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xB3
1070	 B2	JUMP		 	 
- stack 0: 0x4F8
1071	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x4F8
1072	 B4	PUSH2	0020	 	 
- stack 1: 0x4F8
- stack 0: 0x20
1073	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F8
- stack 0: 0x7FFFFFFF
1074	 B8	PUSH1	03	 	 
- stack 2: 0x4F8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1075	 BA	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x7FFFFFFF
1076	 BB	PUSH2	0040	 	 
- stack 2: 0x4F8
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
1077	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F8
- stack 1: 0x7FFFFFFF
- stack 0: 0xE
1078	 BF	PUSH1	1F	 	 
- stack 3: 0x4F8
- stack 2: 0x7FFFFFFF
- stack 1: 0xE
- stack 0: 0x1F
1079	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4F8
- stack 1: 0x7FFFFFFF
- stack 0: 0xE
1080	 C2	SAR		 	 
- stack 1: 0x4F8
- stack 0: 0x1FFFF
1081	 C3	PUSH2	0060	 	 
- stack 2: 0x4F8
- stack 1: 0x1FFFF
- stack 0: 0x60
1082	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F8
1083	 C7	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1084	 C9	ADD		 	 
- stack 0: 0x4FC
1085	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1086	 CB	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1F6002001B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B30000
1087	 CC	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1F6002001B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B30000
- stack 0: 0xF0
1088	 CE	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1F6
1089	 CF	JUMP		 	 
- stack 0: 0x4FC
1090	 1F6	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x4FC
1091	 1F7	PUSH4	00020000	 	 
- stack 1: 0x4FC
- stack 0: 0x20000
1092	 1FC	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x20000
- stack 0: 0x3A0
1093	 1FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x4FC
1094	 200	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1095	 202	ADD		 	 
- stack 0: 0x500
1096	 203	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1097	 204	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B3000001970000
1098	 205	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x1B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B3000001970000
- stack 0: 0xF0
1099	 207	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1B1
1100	 208	JUMP		 	 
- stack 0: 0x500
1101	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x500
1102	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1103	 1B3	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x1B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B3000001970000
1104	 1B4	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x1B1FFFF00E3000A00FD04A4008600000178FFFF0099001F00B3000001970000
- stack 0: 0xE0
1105	 1B6	SHR		 	 
- stack 1: 0x500
- stack 0: 0x1B1FFFF
1106	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x1B1FFFF
- stack 0: 0xFFFF
1107	 1BA	AND		 	 
- stack 1: 0x500
- stack 0: 0xFFFF
1108	 1BB	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0xFFFF
- stack 0: 0x1
1109	 1BD	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1110	 1BE	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1111	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
1112	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x500
- stack 0: 0x1FFFF
1113	 1C3	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x1FFFF
- stack 0: 0x3A0
1114	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1115	 1C7	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1116	 1C9	ADD		 	 
- stack 0: 0x504
1117	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1118	 1CB	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xE3000A00FD04A4008600000178FFFF0099001F00B300000197000000E3000B
1119	 1CC	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0xE3000A00FD04A4008600000178FFFF0099001F00B300000197000000E3000B
- stack 0: 0xF0
1120	 1CE	SHR		 	 
- stack 1: 0x504
- stack 0: 0xE3
1121	 1CF	JUMP		 	 
- stack 0: 0x504
1122	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x504
1123	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1124	 E5	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0xE3000A00FD04A4008600000178FFFF0099001F00B300000197000000E3000B
1125	 E6	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0xE3000A00FD04A4008600000178FFFF0099001F00B300000197000000E3000B
- stack 0: 0xE0
1126	 E8	SHR		 	 
- stack 1: 0x504
- stack 0: 0xE3000A
1127	 E9	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0xE3000A
- stack 0: 0xFFFF
1128	 EC	AND		 	 
- stack 1: 0x504
- stack 0: 0xA
1129	 ED	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x1
1130	 EF	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xA
1131	 F0	PUSH2	0380	 	 
- stack 2: 0x504
- stack 1: 0xA
- stack 0: 0x380
1132	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x504
1133	 F4	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1134	 F6	ADD		 	 
- stack 0: 0x508
1135	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1136	 F8	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xFD04A4008600000178FFFF0099001F00B300000197000000E3000B00FD0488
1137	 F9	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xFD04A4008600000178FFFF0099001F00B300000197000000E3000B00FD0488
- stack 0: 0xF0
1138	 FB	SHR		 	 
- stack 1: 0x508
- stack 0: 0xFD
1139	 FC	JUMP		 	 
- stack 0: 0x508
1140	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x508
1141	 FE	PUSH2	0060	 	 
- stack 1: 0x508
- stack 0: 0x60
1142	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x508
- stack 0: 0x1FFFF
1143	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x508
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
1144	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x508
- stack 0: 0x1FFFF
1145	 108	PUSH2	03A0	 	 
- stack 2: 0x508
- stack 1: 0x1FFFF
- stack 0: 0x3A0
1146	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x508
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
1147	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x508
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
1148	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x508
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
1149	 112	SUB		 	 
- stack 1: 0x508
- stack 0: 0x0
1150	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x508
- stack 1: 0x0
- stack 0: 0x11B
1151	 116	JUMPI		 	 
- stack 0: 0x508
1152	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x508
- stack 0: 0x135
1153	 11A	JUMP		 	 
- stack 0: 0x508
1154	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x508
1155	 136	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1156	 138	ADD		 	 
- stack 0: 0x50C
1157	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1158	 13A	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x8600000178FFFF0099001F00B300000197000000E3000B00FD048802091818
1159	 13B	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x8600000178FFFF0099001F00B300000197000000E3000B00FD048802091818
- stack 0: 0xF0
1160	 13D	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x86
1161	 13E	JUMP		 	 
- stack 0: 0x50C
1162	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x50C
1163	 87	PUSH4	80000000	 	 
- stack 1: 0x50C
- stack 0: 0x80000000
1164	 8C	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x80000000
- stack 0: 0x20
1165	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x50C
1166	 90	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1167	 92	ADD		 	 
- stack 0: 0x510
1168	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1169	 94	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x178FFFF0099001F00B300000197000000E3000B00FD04880209181801780181
1170	 95	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x178FFFF0099001F00B300000197000000E3000B00FD04880209181801780181
- stack 0: 0xF0
1171	 97	SHR		 	 
- stack 1: 0x510
- stack 0: 0x178
1172	 98	JUMP		 	 
- stack 0: 0x510
1173	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x510
1174	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1175	 17A	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x178FFFF0099001F00B300000197000000E3000B00FD04880209181801780181
1176	 17B	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x178FFFF0099001F00B300000197000000E3000B00FD04880209181801780181
- stack 0: 0xE0
1177	 17D	SHR		 	 
- stack 1: 0x510
- stack 0: 0x178FFFF
1178	 17E	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x178FFFF
- stack 0: 0xFFFF
1179	 181	AND		 	 
- stack 1: 0x510
- stack 0: 0xFFFF
1180	 182	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFFFF
- stack 0: 0x1
1181	 184	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1182	 185	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1183	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1184	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x510
- stack 0: 0x7FFFFFFF
1185	 18A	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1186	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1187	 18E	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1188	 190	ADD		 	 
- stack 0: 0x514
1189	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1190	 192	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x99001F00B300000197000000E3000B00FD0488020918180178018100990000
1191	 193	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x99001F00B300000197000000E3000B00FD0488020918180178018100990000
- stack 0: 0xF0
1192	 195	SHR		 	 
- stack 1: 0x514
- stack 0: 0x99
1193	 196	JUMP		 	 
- stack 0: 0x514
1194	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x514
1195	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1196	 9B	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x99001F00B300000197000000E3000B00FD0488020918180178018100990000
1197	 9C	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x99001F00B300000197000000E3000B00FD0488020918180178018100990000
- stack 0: 0xE0
1198	 9E	SHR		 	 
- stack 1: 0x514
- stack 0: 0x99001F
1199	 9F	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x99001F
- stack 0: 0xFFFF
1200	 A2	AND		 	 
- stack 1: 0x514
- stack 0: 0x1F
1201	 A3	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x1F
- stack 0: 0x1
1202	 A5	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x1F
1203	 A6	PUSH2	0040	 	 
- stack 2: 0x514
- stack 1: 0x1F
- stack 0: 0x40
1204	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x514
1205	 AA	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1206	 AC	ADD		 	 
- stack 0: 0x518
1207	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1208	 AE	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xB300000197000000E3000B00FD048802091818017801810099000000B30000
1209	 AF	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xB300000197000000E3000B00FD048802091818017801810099000000B30000
- stack 0: 0xF0
1210	 B1	SHR		 	 
- stack 1: 0x518
- stack 0: 0xB3
1211	 B2	JUMP		 	 
- stack 0: 0x518
1212	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x518
1213	 B4	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1214	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x7FFFFFFF
1215	 B8	PUSH1	03	 	 
- stack 2: 0x518
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1216	 BA	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x7FFFFFFF
1217	 BB	PUSH2	0040	 	 
- stack 2: 0x518
- stack 1: 0x7FFFFFFF
- stack 0: 0x40
1218	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x518
- stack 1: 0x7FFFFFFF
- stack 0: 0x1F
1219	 BF	PUSH1	1F	 	 
- stack 3: 0x518
- stack 2: 0x7FFFFFFF
- stack 1: 0x1F
- stack 0: 0x1F
1220	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x518
- stack 1: 0x7FFFFFFF
- stack 0: 0x1F
1221	 C2	SAR		 	 
- stack 1: 0x518
- stack 0: 0x0
1222	 C3	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1223	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1224	 C7	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1225	 C9	ADD		 	 
- stack 0: 0x51C
1226	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1227	 CB	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x197000000E3000B00FD048802091818017801810099000000B30000021C1818
1228	 CC	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x197000000E3000B00FD048802091818017801810099000000B30000021C1818
- stack 0: 0xF0
1229	 CE	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x197
1230	 CF	JUMP		 	 
- stack 0: 0x51C
1231	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x51C
1232	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1233	 199	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x197000000E3000B00FD048802091818017801810099000000B30000021C1818
1234	 19A	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x197000000E3000B00FD048802091818017801810099000000B30000021C1818
- stack 0: 0xE0
1235	 19C	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x1970000
1236	 19D	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x1970000
- stack 0: 0xFFFF
1237	 1A0	AND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1238	 1A1	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x1
1239	 1A3	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x0
1240	 1A4	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x3A0
1241	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x51C
1242	 1A8	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1243	 1AA	ADD		 	 
- stack 0: 0x520
1244	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1245	 1AC	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE3000B00FD048802091818017801810099000000B30000021C181801B10181
1246	 1AD	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0xE3000B00FD048802091818017801810099000000B30000021C181801B10181
- stack 0: 0xF0
1247	 1AF	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE3
1248	 1B0	JUMP		 	 
- stack 0: 0x520
1249	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x520
1250	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1251	 E5	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0xE3000B00FD048802091818017801810099000000B30000021C181801B10181
1252	 E6	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0xE3000B00FD048802091818017801810099000000B30000021C181801B10181
- stack 0: 0xE0
1253	 E8	SHR		 	 
- stack 1: 0x520
- stack 0: 0xE3000B
1254	 E9	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0xE3000B
- stack 0: 0xFFFF
1255	 EC	AND		 	 
- stack 1: 0x520
- stack 0: 0xB
1256	 ED	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0xB
- stack 0: 0x1
1257	 EF	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0xB
1258	 F0	PUSH2	0380	 	 
- stack 2: 0x520
- stack 1: 0xB
- stack 0: 0x380
1259	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x520
1260	 F4	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1261	 F6	ADD		 	 
- stack 0: 0x524
1262	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1263	 F8	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xFD048802091818017801810099000000B30000021C181801B1018100E3000C
1264	 F9	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xFD048802091818017801810099000000B30000021C181801B1018100E3000C
- stack 0: 0xF0
1265	 FB	SHR		 	 
- stack 1: 0x524
- stack 0: 0xFD
1266	 FC	JUMP		 	 
- stack 0: 0x524
1267	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x524
1268	 FE	PUSH2	0060	 	 
- stack 1: 0x524
- stack 0: 0x60
1269	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x524
- stack 0: 0x0
1270	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1271	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x0
1272	 108	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x3A0
1273	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x0
1274	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1275	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x0
1276	 112	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1277	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x11B
1278	 116	JUMPI		 	 
- stack 0: 0x524
1279	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x524
- stack 0: 0x135
1280	 11A	JUMP		 	 
- stack 0: 0x524
1281	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x524
1282	 136	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1283	 138	ADD		 	 
- stack 0: 0x528
1284	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1285	 13A	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x2091818017801810099000000B30000021C181801B1018100E3000C00FD0468
1286	 13B	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x2091818017801810099000000B30000021C181801B1018100E3000C00FD0468
- stack 0: 0xF0
1287	 13D	SHR		 	 
- stack 1: 0x528
- stack 0: 0x209
1288	 13E	JUMP		 	 
- stack 0: 0x528
1289	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x528
1290	 20A	PUSH4	81818000	 	 
- stack 1: 0x528
- stack 0: 0x81818000
1291	 20F	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0x81818000
- stack 0: 0x20
1292	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1293	 213	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1294	 215	ADD		 	 
- stack 0: 0x52C
1295	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1296	 217	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x17801810099000000B30000021C181801B1018100E3000C00FD046802091818
1297	 218	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x17801810099000000B30000021C181801B1018100E3000C00FD046802091818
- stack 0: 0xF0
1298	 21A	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x178
1299	 21B	JUMP		 	 
- stack 0: 0x52C
1300	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x52C
1301	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1302	 17A	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x17801810099000000B30000021C181801B1018100E3000C00FD046802091818
1303	 17B	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x17801810099000000B30000021C181801B1018100E3000C00FD046802091818
- stack 0: 0xE0
1304	 17D	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1780181
1305	 17E	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1780181
- stack 0: 0xFFFF
1306	 181	AND		 	 
- stack 1: 0x52C
- stack 0: 0x181
1307	 182	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x181
- stack 0: 0x1
1308	 184	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x181
1309	 185	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x181
- stack 0: 0x20
1310	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0x181
- stack 0: 0x81818000
1311	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x52C
- stack 0: 0x81818181
1312	 18A	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x81818181
- stack 0: 0x20
1313	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1314	 18E	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1315	 190	ADD		 	 
- stack 0: 0x530
1316	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1317	 192	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x99000000B30000021C181801B1018100E3000C00FD04680209181801780181
1318	 193	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x99000000B30000021C181801B1018100E3000C00FD04680209181801780181
- stack 0: 0xF0
1319	 195	SHR		 	 
- stack 1: 0x530
- stack 0: 0x99
1320	 196	JUMP		 	 
- stack 0: 0x530
1321	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x530
1322	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1323	 9B	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x99000000B30000021C181801B1018100E3000C00FD04680209181801780181
1324	 9C	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x99000000B30000021C181801B1018100E3000C00FD04680209181801780181
- stack 0: 0xE0
1325	 9E	SHR		 	 
- stack 1: 0x530
- stack 0: 0x990000
1326	 9F	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x990000
- stack 0: 0xFFFF
1327	 A2	AND		 	 
- stack 1: 0x530
- stack 0: 0x0
1328	 A3	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x1
1329	 A5	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x0
1330	 A6	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0x0
- stack 0: 0x40
1331	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1332	 AA	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1333	 AC	ADD		 	 
- stack 0: 0x534
1334	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1335	 AE	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xB30000021C181801B1018100E3000C00FD0468020918180178018100990001
1336	 AF	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xB30000021C181801B1018100E3000C00FD0468020918180178018100990001
- stack 0: 0xF0
1337	 B1	SHR		 	 
- stack 1: 0x534
- stack 0: 0xB3
1338	 B2	JUMP		 	 
- stack 0: 0x534
1339	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x534
1340	 B4	PUSH2	0020	 	 
- stack 1: 0x534
- stack 0: 0x20
1341	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x534
- stack 0: 0x81818181
1342	 B8	PUSH1	03	 	 
- stack 2: 0x534
- stack 1: 0x81818181
- stack 0: 0x3
1343	 BA	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1344	 BB	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
1345	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x0
1346	 BF	PUSH1	1F	 	 
- stack 3: 0x534
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0x0
- stack 0: 0x1F
1347	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x0
1348	 C2	SAR		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1349	 C3	PUSH2	0060	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x60
1350	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x534
1351	 C7	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1352	 C9	ADD		 	 
- stack 0: 0x538
1353	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1354	 CB	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x21C181801B1018100E3000C00FD046802091818017801810099000100B30000
1355	 CC	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x21C181801B1018100E3000C00FD046802091818017801810099000100B30000
- stack 0: 0xF0
1356	 CE	SHR		 	 
- stack 1: 0x538
- stack 0: 0x21C
1357	 CF	JUMP		 	 
- stack 0: 0x538
1358	 21C	JUMPDEST		 ;; __riscvimpl_LUI_81818eb7	  ;; # instr: lui t4,0x81818(ignore imm)
- stack 0: 0x538
1359	 21D	PUSH4	81818000	 	 
- stack 1: 0x538
- stack 0: 0x81818000
1360	 222	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0x81818000
- stack 0: 0x3A0
1361	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x538
1362	 226	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1363	 228	ADD		 	 
- stack 0: 0x53C
1364	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1365	 22A	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1B1018100E3000C00FD046802091818017801810099000100B30000022F0C0C
1366	 22B	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1B1018100E3000C00FD046802091818017801810099000100B30000022F0C0C
- stack 0: 0xF0
1367	 22D	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1B1
1368	 22E	JUMP		 	 
- stack 0: 0x53C
1369	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x53C
1370	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1371	 1B3	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1B1018100E3000C00FD046802091818017801810099000100B30000022F0C0C
1372	 1B4	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x1B1018100E3000C00FD046802091818017801810099000100B30000022F0C0C
- stack 0: 0xE0
1373	 1B6	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1B10181
1374	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1B10181
- stack 0: 0xFFFF
1375	 1BA	AND		 	 
- stack 1: 0x53C
- stack 0: 0x181
1376	 1BB	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x1
1377	 1BD	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x181
1378	 1BE	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x3A0
1379	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x81818000
1380	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x53C
- stack 0: 0x81818181
1381	 1C3	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x81818181
- stack 0: 0x3A0
1382	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1383	 1C7	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1384	 1C9	ADD		 	 
- stack 0: 0x540
1385	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1386	 1CB	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xE3000C00FD046802091818017801810099000100B30000022F0C0C01B100C0
1387	 1CC	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xE3000C00FD046802091818017801810099000100B30000022F0C0C01B100C0
- stack 0: 0xF0
1388	 1CE	SHR		 	 
- stack 1: 0x540
- stack 0: 0xE3
1389	 1CF	JUMP		 	 
- stack 0: 0x540
1390	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1391	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1392	 E5	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xE3000C00FD046802091818017801810099000100B30000022F0C0C01B100C0
1393	 E6	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xE3000C00FD046802091818017801810099000100B30000022F0C0C01B100C0
- stack 0: 0xE0
1394	 E8	SHR		 	 
- stack 1: 0x540
- stack 0: 0xE3000C
1395	 E9	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xE3000C
- stack 0: 0xFFFF
1396	 EC	AND		 	 
- stack 1: 0x540
- stack 0: 0xC
1397	 ED	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xC
- stack 0: 0x1
1398	 EF	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xC
1399	 F0	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xC
- stack 0: 0x380
1400	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1401	 F4	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1402	 F6	ADD		 	 
- stack 0: 0x544
1403	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1404	 F8	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xFD046802091818017801810099000100B30000022F0C0C01B100C000E3000D
1405	 F9	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xFD046802091818017801810099000100B30000022F0C0C01B100C000E3000D
- stack 0: 0xF0
1406	 FB	SHR		 	 
- stack 1: 0x544
- stack 0: 0xFD
1407	 FC	JUMP		 	 
- stack 0: 0x544
1408	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x544
1409	 FE	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
1410	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1411	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFF
1412	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x81818181
1413	 108	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0x81818181
- stack 0: 0x3A0
1414	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0x81818181
- stack 0: 0x81818181
1415	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x81818181
- stack 1: 0x81818181
- stack 0: 0xFFFFFFFF
1416	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x81818181
- stack 0: 0x81818181
1417	 112	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1418	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x11B
1419	 116	JUMPI		 	 
- stack 0: 0x544
1420	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x544
- stack 0: 0x135
1421	 11A	JUMP		 	 
- stack 0: 0x544
1422	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x544
1423	 136	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1424	 138	ADD		 	 
- stack 0: 0x548
1425	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1426	 13A	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x2091818017801810099000100B30000022F0C0C01B100C000E3000D00FD0448
1427	 13B	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x2091818017801810099000100B30000022F0C0C01B100C000E3000D00FD0448
- stack 0: 0xF0
1428	 13D	SHR		 	 
- stack 1: 0x548
- stack 0: 0x209
1429	 13E	JUMP		 	 
- stack 0: 0x548
1430	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x548
1431	 20A	PUSH4	81818000	 	 
- stack 1: 0x548
- stack 0: 0x81818000
1432	 20F	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x81818000
- stack 0: 0x20
1433	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1434	 213	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1435	 215	ADD		 	 
- stack 0: 0x54C
1436	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1437	 217	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x17801810099000100B30000022F0C0C01B100C000E3000D00FD044802091818
1438	 218	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x17801810099000100B30000022F0C0C01B100C000E3000D00FD044802091818
- stack 0: 0xF0
1439	 21A	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x178
1440	 21B	JUMP		 	 
- stack 0: 0x54C
1441	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x54C
1442	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1443	 17A	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x17801810099000100B30000022F0C0C01B100C000E3000D00FD044802091818
1444	 17B	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x17801810099000100B30000022F0C0C01B100C000E3000D00FD044802091818
- stack 0: 0xE0
1445	 17D	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1780181
1446	 17E	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1780181
- stack 0: 0xFFFF
1447	 181	AND		 	 
- stack 1: 0x54C
- stack 0: 0x181
1448	 182	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x181
- stack 0: 0x1
1449	 184	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x181
1450	 185	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x181
- stack 0: 0x20
1451	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0x181
- stack 0: 0x81818000
1452	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x54C
- stack 0: 0x81818181
1453	 18A	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x81818181
- stack 0: 0x20
1454	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1455	 18E	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1456	 190	ADD		 	 
- stack 0: 0x550
1457	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1458	 192	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x99000100B30000022F0C0C01B100C000E3000D00FD04480209181801780181
1459	 193	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x99000100B30000022F0C0C01B100C000E3000D00FD04480209181801780181
- stack 0: 0xF0
1460	 195	SHR		 	 
- stack 1: 0x550
- stack 0: 0x99
1461	 196	JUMP		 	 
- stack 0: 0x550
1462	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x550
1463	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1464	 9B	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x99000100B30000022F0C0C01B100C000E3000D00FD04480209181801780181
1465	 9C	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x99000100B30000022F0C0C01B100C000E3000D00FD04480209181801780181
- stack 0: 0xE0
1466	 9E	SHR		 	 
- stack 1: 0x550
- stack 0: 0x990001
1467	 9F	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x990001
- stack 0: 0xFFFF
1468	 A2	AND		 	 
- stack 1: 0x550
- stack 0: 0x1
1469	 A3	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x1
1470	 A5	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x1
1471	 A6	PUSH2	0040	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x40
1472	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x550
1473	 AA	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1474	 AC	ADD		 	 
- stack 0: 0x554
1475	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1476	 AE	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xB30000022F0C0C01B100C000E3000D00FD0448020918180178018100990007
1477	 AF	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xB30000022F0C0C01B100C000E3000D00FD0448020918180178018100990007
- stack 0: 0xF0
1478	 B1	SHR		 	 
- stack 1: 0x554
- stack 0: 0xB3
1479	 B2	JUMP		 	 
- stack 0: 0x554
1480	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x554
1481	 B4	PUSH2	0020	 	 
- stack 1: 0x554
- stack 0: 0x20
1482	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x554
- stack 0: 0x81818181
1483	 B8	PUSH1	03	 	 
- stack 2: 0x554
- stack 1: 0x81818181
- stack 0: 0x3
1484	 BA	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1485	 BB	PUSH2	0040	 	 
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
1486	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1
1487	 BF	PUSH1	1F	 	 
- stack 3: 0x554
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0x1
- stack 0: 0x1F
1488	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1
1489	 C2	SAR		 	 
- stack 1: 0x554
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
1490	 C3	PUSH2	0060	 	 
- stack 2: 0x554
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0x60
1491	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x554
1492	 C7	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1493	 C9	ADD		 	 
- stack 0: 0x558
1494	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1495	 CB	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x22F0C0C01B100C000E3000D00FD044802091818017801810099000700B30000
1496	 CC	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x22F0C0C01B100C000E3000D00FD044802091818017801810099000700B30000
- stack 0: 0xF0
1497	 CE	SHR		 	 
- stack 1: 0x558
- stack 0: 0x22F
1498	 CF	JUMP		 	 
- stack 0: 0x558
1499	 22F	JUMPDEST		 ;; __riscvimpl_LUI_c0c0ceb7	  ;; # instr: lui t4,0xc0c0c(ignore imm)
- stack 0: 0x558
1500	 230	PUSH4	c0c0c000	 	 
- stack 1: 0x558
- stack 0: 0xC0C0C000
1501	 235	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0xC0C0C000
- stack 0: 0x3A0
1502	 238	MSTORE		 	  ;; # store to x29
- stack 0: 0x558
1503	 239	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1504	 23B	ADD		 	 
- stack 0: 0x55C
1505	 23C	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1506	 23D	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1B100C000E3000D00FD044802091818017801810099000700B300000242F030
1507	 23E	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x1B100C000E3000D00FD044802091818017801810099000700B300000242F030
- stack 0: 0xF0
1508	 240	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1B1
1509	 241	JUMP		 	 
- stack 0: 0x55C
1510	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x55C
1511	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1512	 1B3	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x1B100C000E3000D00FD044802091818017801810099000700B300000242F030
1513	 1B4	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x1B100C000E3000D00FD044802091818017801810099000700B300000242F030
- stack 0: 0xE0
1514	 1B6	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x1B100C0
1515	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x1B100C0
- stack 0: 0xFFFF
1516	 1BA	AND		 	 
- stack 1: 0x55C
- stack 0: 0xC0
1517	 1BB	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xC0
- stack 0: 0x1
1518	 1BD	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xC0
1519	 1BE	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0xC0
- stack 0: 0x3A0
1520	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x55C
- stack 1: 0xC0
- stack 0: 0xC0C0C000
1521	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x55C
- stack 0: 0xC0C0C0C0
1522	 1C3	PUSH2	03A0	 	 
- stack 2: 0x55C
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
1523	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x55C
1524	 1C7	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1525	 1C9	ADD		 	 
- stack 0: 0x560
1526	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1527	 1CB	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xE3000D00FD044802091818017801810099000700B300000242F03001B10303
1528	 1CC	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xE3000D00FD044802091818017801810099000700B300000242F03001B10303
- stack 0: 0xF0
1529	 1CE	SHR		 	 
- stack 1: 0x560
- stack 0: 0xE3
1530	 1CF	JUMP		 	 
- stack 0: 0x560
1531	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x560
1532	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1533	 E5	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xE3000D00FD044802091818017801810099000700B300000242F03001B10303
1534	 E6	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0xE3000D00FD044802091818017801810099000700B300000242F03001B10303
- stack 0: 0xE0
1535	 E8	SHR		 	 
- stack 1: 0x560
- stack 0: 0xE3000D
1536	 E9	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0xE3000D
- stack 0: 0xFFFF
1537	 EC	AND		 	 
- stack 1: 0x560
- stack 0: 0xD
1538	 ED	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x1
1539	 EF	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xD
1540	 F0	PUSH2	0380	 	 
- stack 2: 0x560
- stack 1: 0xD
- stack 0: 0x380
1541	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x560
1542	 F4	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1543	 F6	ADD		 	 
- stack 0: 0x564
1544	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1545	 F8	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xFD044802091818017801810099000700B300000242F03001B1030300E3000E
1546	 F9	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xFD044802091818017801810099000700B300000242F03001B1030300E3000E
- stack 0: 0xF0
1547	 FB	SHR		 	 
- stack 1: 0x564
- stack 0: 0xFD
1548	 FC	JUMP		 	 
- stack 0: 0x564
1549	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x564
1550	 FE	PUSH2	0060	 	 
- stack 1: 0x564
- stack 0: 0x60
1551	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
1552	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0xFFFFFFFF
1553	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0xC0C0C0C0
1554	 108	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
1555	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x564
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
1556	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0xC0C0C0C0
- stack 1: 0xC0C0C0C0
- stack 0: 0xFFFFFFFF
1557	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x564
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
1558	 112	SUB		 	 
- stack 1: 0x564
- stack 0: 0x0
1559	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x11B
1560	 116	JUMPI		 	 
- stack 0: 0x564
1561	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x564
- stack 0: 0x135
1562	 11A	JUMP		 	 
- stack 0: 0x564
1563	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x564
1564	 136	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1565	 138	ADD		 	 
- stack 0: 0x568
1566	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1567	 13A	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x2091818017801810099000700B300000242F03001B1030300E3000E00FD0428
1568	 13B	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x2091818017801810099000700B300000242F03001B1030300E3000E00FD0428
- stack 0: 0xF0
1569	 13D	SHR		 	 
- stack 1: 0x568
- stack 0: 0x209
1570	 13E	JUMP		 	 
- stack 0: 0x568
1571	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x568
1572	 20A	PUSH4	81818000	 	 
- stack 1: 0x568
- stack 0: 0x81818000
1573	 20F	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x81818000
- stack 0: 0x20
1574	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
1575	 213	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1576	 215	ADD		 	 
- stack 0: 0x56C
1577	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1578	 217	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x17801810099000700B300000242F03001B1030300E3000E00FD042802091818
1579	 218	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x17801810099000700B300000242F03001B1030300E3000E00FD042802091818
- stack 0: 0xF0
1580	 21A	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x178
1581	 21B	JUMP		 	 
- stack 0: 0x56C
1582	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x56C
1583	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1584	 17A	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x17801810099000700B300000242F03001B1030300E3000E00FD042802091818
1585	 17B	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x17801810099000700B300000242F03001B1030300E3000E00FD042802091818
- stack 0: 0xE0
1586	 17D	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x1780181
1587	 17E	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x1780181
- stack 0: 0xFFFF
1588	 181	AND		 	 
- stack 1: 0x56C
- stack 0: 0x181
1589	 182	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0x181
- stack 0: 0x1
1590	 184	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0x181
1591	 185	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x181
- stack 0: 0x20
1592	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x56C
- stack 1: 0x181
- stack 0: 0x81818000
1593	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x56C
- stack 0: 0x81818181
1594	 18A	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0x81818181
- stack 0: 0x20
1595	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
1596	 18E	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1597	 190	ADD		 	 
- stack 0: 0x570
1598	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1599	 192	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x99000700B300000242F03001B1030300E3000E00FD04280209181801780181
1600	 193	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x99000700B300000242F03001B1030300E3000E00FD04280209181801780181
- stack 0: 0xF0
1601	 195	SHR		 	 
- stack 1: 0x570
- stack 0: 0x99
1602	 196	JUMP		 	 
- stack 0: 0x570
1603	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x570
1604	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1605	 9B	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x99000700B300000242F03001B1030300E3000E00FD04280209181801780181
1606	 9C	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x99000700B300000242F03001B1030300E3000E00FD04280209181801780181
- stack 0: 0xE0
1607	 9E	SHR		 	 
- stack 1: 0x570
- stack 0: 0x990007
1608	 9F	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x990007
- stack 0: 0xFFFF
1609	 A2	AND		 	 
- stack 1: 0x570
- stack 0: 0x7
1610	 A3	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x7
- stack 0: 0x1
1611	 A5	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x7
1612	 A6	PUSH2	0040	 	 
- stack 2: 0x570
- stack 1: 0x7
- stack 0: 0x40
1613	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x570
1614	 AA	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1615	 AC	ADD		 	 
- stack 0: 0x574
1616	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1617	 AE	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB300000242F03001B1030300E3000E00FD042802091818017801810099000E
1618	 AF	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB300000242F03001B1030300E3000E00FD042802091818017801810099000E
- stack 0: 0xF0
1619	 B1	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB3
1620	 B2	JUMP		 	 
- stack 0: 0x574
1621	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x574
1622	 B4	PUSH2	0020	 	 
- stack 1: 0x574
- stack 0: 0x20
1623	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x574
- stack 0: 0x81818181
1624	 B8	PUSH1	03	 	 
- stack 2: 0x574
- stack 1: 0x81818181
- stack 0: 0x3
1625	 BA	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1626	 BB	PUSH2	0040	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
1627	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x7
1628	 BF	PUSH1	1F	 	 
- stack 3: 0x574
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0x7
- stack 0: 0x1F
1629	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x7
1630	 C2	SAR		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
1631	 C3	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0x60
1632	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
1633	 C7	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1634	 C9	ADD		 	 
- stack 0: 0x578
1635	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1636	 CB	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x242F03001B1030300E3000E00FD042802091818017801810099000E00B30000
1637	 CC	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x242F03001B1030300E3000E00FD042802091818017801810099000E00B30000
- stack 0: 0xF0
1638	 CE	SHR		 	 
- stack 1: 0x578
- stack 0: 0x242
1639	 CF	JUMP		 	 
- stack 0: 0x578
1640	 242	JUMPDEST		 ;; __riscvimpl_LUI_ff030eb7	  ;; # instr: lui t4,0xff030(ignore imm)
- stack 0: 0x578
1641	 243	PUSH4	ff030000	 	 
- stack 1: 0x578
- stack 0: 0xFF030000
1642	 248	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0xFF030000
- stack 0: 0x3A0
1643	 24B	MSTORE		 	  ;; # store to x29
- stack 0: 0x578
1644	 24C	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1645	 24E	ADD		 	 
- stack 0: 0x57C
1646	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1647	 250	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1B1030300E3000E00FD042802091818017801810099000E00B300000165FFE0
1648	 251	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x1B1030300E3000E00FD042802091818017801810099000E00B300000165FFE0
- stack 0: 0xF0
1649	 253	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1B1
1650	 254	JUMP		 	 
- stack 0: 0x57C
1651	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x57C
1652	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1653	 1B3	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x1B1030300E3000E00FD042802091818017801810099000E00B300000165FFE0
1654	 1B4	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x1B1030300E3000E00FD042802091818017801810099000E00B300000165FFE0
- stack 0: 0xE0
1655	 1B6	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x1B10303
1656	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x1B10303
- stack 0: 0xFFFF
1657	 1BA	AND		 	 
- stack 1: 0x57C
- stack 0: 0x303
1658	 1BB	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x303
- stack 0: 0x1
1659	 1BD	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x303
1660	 1BE	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0x303
- stack 0: 0x3A0
1661	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x57C
- stack 1: 0x303
- stack 0: 0xFF030000
1662	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x57C
- stack 0: 0xFF030303
1663	 1C3	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0xFF030303
- stack 0: 0x3A0
1664	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x57C
1665	 1C7	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1666	 1C9	ADD		 	 
- stack 0: 0x580
1667	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1668	 1CB	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xE3000E00FD042802091818017801810099000E00B300000165FFE001B10606
1669	 1CC	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xE3000E00FD042802091818017801810099000E00B300000165FFE001B10606
- stack 0: 0xF0
1670	 1CE	SHR		 	 
- stack 1: 0x580
- stack 0: 0xE3
1671	 1CF	JUMP		 	 
- stack 0: 0x580
1672	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x580
1673	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1674	 E5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xE3000E00FD042802091818017801810099000E00B300000165FFE001B10606
1675	 E6	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xE3000E00FD042802091818017801810099000E00B300000165FFE001B10606
- stack 0: 0xE0
1676	 E8	SHR		 	 
- stack 1: 0x580
- stack 0: 0xE3000E
1677	 E9	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xE3000E
- stack 0: 0xFFFF
1678	 EC	AND		 	 
- stack 1: 0x580
- stack 0: 0xE
1679	 ED	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xE
- stack 0: 0x1
1680	 EF	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xE
1681	 F0	PUSH2	0380	 	 
- stack 2: 0x580
- stack 1: 0xE
- stack 0: 0x380
1682	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x580
1683	 F4	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1684	 F6	ADD		 	 
- stack 0: 0x584
1685	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1686	 F8	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xFD042802091818017801810099000E00B300000165FFE001B1060600E3000F
1687	 F9	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xFD042802091818017801810099000E00B300000165FFE001B1060600E3000F
- stack 0: 0xF0
1688	 FB	SHR		 	 
- stack 1: 0x584
- stack 0: 0xFD
1689	 FC	JUMP		 	 
- stack 0: 0x584
1690	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x584
1691	 FE	PUSH2	0060	 	 
- stack 1: 0x584
- stack 0: 0x60
1692	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
1693	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0xFFFFFFFF
1694	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0xFF030303
1695	 108	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0xFF030303
- stack 0: 0x3A0
1696	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x584
- stack 1: 0xFF030303
- stack 0: 0xFF030303
1697	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xFF030303
- stack 1: 0xFF030303
- stack 0: 0xFFFFFFFF
1698	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xFF030303
- stack 0: 0xFF030303
1699	 112	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
1700	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x11B
1701	 116	JUMPI		 	 
- stack 0: 0x584
1702	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x584
- stack 0: 0x135
1703	 11A	JUMP		 	 
- stack 0: 0x584
1704	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x584
1705	 136	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1706	 138	ADD		 	 
- stack 0: 0x588
1707	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1708	 13A	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x2091818017801810099000E00B300000165FFE001B1060600E3000F00FD0408
1709	 13B	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x2091818017801810099000E00B300000165FFE001B1060600E3000F00FD0408
- stack 0: 0xF0
1710	 13D	SHR		 	 
- stack 1: 0x588
- stack 0: 0x209
1711	 13E	JUMP		 	 
- stack 0: 0x588
1712	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x588
1713	 20A	PUSH4	81818000	 	 
- stack 1: 0x588
- stack 0: 0x81818000
1714	 20F	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x81818000
- stack 0: 0x20
1715	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
1716	 213	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1717	 215	ADD		 	 
- stack 0: 0x58C
1718	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1719	 217	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x17801810099000E00B300000165FFE001B1060600E3000F00FD040802091818
1720	 218	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x17801810099000E00B300000165FFE001B1060600E3000F00FD040802091818
- stack 0: 0xF0
1721	 21A	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x178
1722	 21B	JUMP		 	 
- stack 0: 0x58C
1723	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x58C
1724	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1725	 17A	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x17801810099000E00B300000165FFE001B1060600E3000F00FD040802091818
1726	 17B	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x17801810099000E00B300000165FFE001B1060600E3000F00FD040802091818
- stack 0: 0xE0
1727	 17D	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x1780181
1728	 17E	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x1780181
- stack 0: 0xFFFF
1729	 181	AND		 	 
- stack 1: 0x58C
- stack 0: 0x181
1730	 182	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x181
- stack 0: 0x1
1731	 184	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x181
1732	 185	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x181
- stack 0: 0x20
1733	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0x181
- stack 0: 0x81818000
1734	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x58C
- stack 0: 0x81818181
1735	 18A	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x81818181
- stack 0: 0x20
1736	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
1737	 18E	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1738	 190	ADD		 	 
- stack 0: 0x590
1739	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1740	 192	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x99000E00B300000165FFE001B1060600E3000F00FD04080209181801780181
1741	 193	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x99000E00B300000165FFE001B1060600E3000F00FD04080209181801780181
- stack 0: 0xF0
1742	 195	SHR		 	 
- stack 1: 0x590
- stack 0: 0x99
1743	 196	JUMP		 	 
- stack 0: 0x590
1744	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x590
1745	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1746	 9B	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x99000E00B300000165FFE001B1060600E3000F00FD04080209181801780181
1747	 9C	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x99000E00B300000165FFE001B1060600E3000F00FD04080209181801780181
- stack 0: 0xE0
1748	 9E	SHR		 	 
- stack 1: 0x590
- stack 0: 0x99000E
1749	 9F	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x99000E
- stack 0: 0xFFFF
1750	 A2	AND		 	 
- stack 1: 0x590
- stack 0: 0xE
1751	 A3	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x1
1752	 A5	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0xE
1753	 A6	PUSH2	0040	 	 
- stack 2: 0x590
- stack 1: 0xE
- stack 0: 0x40
1754	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x590
1755	 AA	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1756	 AC	ADD		 	 
- stack 0: 0x594
1757	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1758	 AE	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xB300000165FFE001B1060600E3000F00FD040802091818017801810099001F
1759	 AF	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xB300000165FFE001B1060600E3000F00FD040802091818017801810099001F
- stack 0: 0xF0
1760	 B1	SHR		 	 
- stack 1: 0x594
- stack 0: 0xB3
1761	 B2	JUMP		 	 
- stack 0: 0x594
1762	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x594
1763	 B4	PUSH2	0020	 	 
- stack 1: 0x594
- stack 0: 0x20
1764	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x594
- stack 0: 0x81818181
1765	 B8	PUSH1	03	 	 
- stack 2: 0x594
- stack 1: 0x81818181
- stack 0: 0x3
1766	 BA	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1767	 BB	PUSH2	0040	 	 
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
1768	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xE
1769	 BF	PUSH1	1F	 	 
- stack 3: 0x594
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xE
- stack 0: 0x1F
1770	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xE
1771	 C2	SAR		 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
1772	 C3	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0x60
1773	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x594
1774	 C7	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1775	 C9	ADD		 	 
- stack 0: 0x598
1776	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1777	 CB	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x165FFE001B1060600E3000F00FD040802091818017801810099001F00B30000
1778	 CC	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x165FFE001B1060600E3000F00FD040802091818017801810099001F00B30000
- stack 0: 0xF0
1779	 CE	SHR		 	 
- stack 1: 0x598
- stack 0: 0x165
1780	 CF	JUMP		 	 
- stack 0: 0x598
1781	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x598
1782	 166	PUSH4	fffe0000	 	 
- stack 1: 0x598
- stack 0: 0xFFFE0000
1783	 16B	PUSH2	03A0	 	 
- stack 2: 0x598
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
1784	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x598
1785	 16F	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1786	 171	ADD		 	 
- stack 0: 0x59C
1787	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1788	 173	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x1B1060600E3000F00FD040802091818017801810099001F00B300000197FFFF
1789	 174	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x1B1060600E3000F00FD040802091818017801810099001F00B300000197FFFF
- stack 0: 0xF0
1790	 176	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1B1
1791	 177	JUMP		 	 
- stack 0: 0x59C
1792	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x59C
1793	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1794	 1B3	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x1B1060600E3000F00FD040802091818017801810099001F00B300000197FFFF
1795	 1B4	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x1B1060600E3000F00FD040802091818017801810099001F00B300000197FFFF
- stack 0: 0xE0
1796	 1B6	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x1B10606
1797	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x1B10606
- stack 0: 0xFFFF
1798	 1BA	AND		 	 
- stack 1: 0x59C
- stack 0: 0x606
1799	 1BB	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x606
- stack 0: 0x1
1800	 1BD	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x606
1801	 1BE	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0x606
- stack 0: 0x3A0
1802	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x59C
- stack 1: 0x606
- stack 0: 0xFFFE0000
1803	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x59C
- stack 0: 0xFFFE0606
1804	 1C3	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
1805	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x59C
1806	 1C7	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1807	 1C9	ADD		 	 
- stack 0: 0x5A0
1808	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1809	 1CB	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xE3000F00FD040802091818017801810099001F00B300000197FFFF00E30010
1810	 1CC	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0xE3000F00FD040802091818017801810099001F00B300000197FFFF00E30010
- stack 0: 0xF0
1811	 1CE	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xE3
1812	 1CF	JUMP		 	 
- stack 0: 0x5A0
1813	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A0
1814	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1815	 E5	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0xE3000F00FD040802091818017801810099001F00B300000197FFFF00E30010
1816	 E6	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0xE3000F00FD040802091818017801810099001F00B300000197FFFF00E30010
- stack 0: 0xE0
1817	 E8	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0xE3000F
1818	 E9	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0xE3000F
- stack 0: 0xFFFF
1819	 EC	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xF
1820	 ED	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0x1
1821	 EF	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xF
1822	 F0	PUSH2	0380	 	 
- stack 2: 0x5A0
- stack 1: 0xF
- stack 0: 0x380
1823	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A0
1824	 F4	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1825	 F6	ADD		 	 
- stack 0: 0x5A4
1826	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1827	 F8	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xFD040802091818017801810099001F00B300000197FFFF00E3001000FD03EC
1828	 F9	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xFD040802091818017801810099001F00B300000197FFFF00E3001000FD03EC
- stack 0: 0xF0
1829	 FB	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xFD
1830	 FC	JUMP		 	 
- stack 0: 0x5A4
1831	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x5A4
1832	 FE	PUSH2	0060	 	 
- stack 1: 0x5A4
- stack 0: 0x60
1833	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
1834	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0xFFFFFFFF
1835	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A4
- stack 0: 0xFFFE0606
1836	 108	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
1837	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A4
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
1838	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A4
- stack 2: 0xFFFE0606
- stack 1: 0xFFFE0606
- stack 0: 0xFFFFFFFF
1839	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A4
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
1840	 112	SUB		 	 
- stack 1: 0x5A4
- stack 0: 0x0
1841	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x11B
1842	 116	JUMPI		 	 
- stack 0: 0x5A4
1843	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x5A4
- stack 0: 0x135
1844	 11A	JUMP		 	 
- stack 0: 0x5A4
1845	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x5A4
1846	 136	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1847	 138	ADD		 	 
- stack 0: 0x5A8
1848	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1849	 13A	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2091818017801810099001F00B300000197FFFF00E3001000FD03EC02091818
1850	 13B	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2091818017801810099001F00B300000197FFFF00E3001000FD03EC02091818
- stack 0: 0xF0
1851	 13D	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x209
1852	 13E	JUMP		 	 
- stack 0: 0x5A8
1853	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x5A8
1854	 20A	PUSH4	81818000	 	 
- stack 1: 0x5A8
- stack 0: 0x81818000
1855	 20F	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0x81818000
- stack 0: 0x20
1856	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A8
1857	 213	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1858	 215	ADD		 	 
- stack 0: 0x5AC
1859	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1860	 217	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x17801810099001F00B300000197FFFF00E3001000FD03EC0209181801780181
1861	 218	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x17801810099001F00B300000197FFFF00E3001000FD03EC0209181801780181
- stack 0: 0xF0
1862	 21A	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x178
1863	 21B	JUMP		 	 
- stack 0: 0x5AC
1864	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5AC
1865	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1866	 17A	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x17801810099001F00B300000197FFFF00E3001000FD03EC0209181801780181
1867	 17B	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x17801810099001F00B300000197FFFF00E3001000FD03EC0209181801780181
- stack 0: 0xE0
1868	 17D	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1780181
1869	 17E	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1780181
- stack 0: 0xFFFF
1870	 181	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x181
1871	 182	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x181
- stack 0: 0x1
1872	 184	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x181
1873	 185	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0x181
- stack 0: 0x20
1874	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x5AC
- stack 1: 0x181
- stack 0: 0x81818000
1875	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x5AC
- stack 0: 0x81818181
1876	 18A	PUSH2	0020	 	 
- stack 2: 0x5AC
- stack 1: 0x81818181
- stack 0: 0x20
1877	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x5AC
1878	 18E	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1879	 190	ADD		 	 
- stack 0: 0x5B0
1880	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1881	 192	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x99001F00B300000197FFFF00E3001000FD03EC02091818017801810099FFC0
1882	 193	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x99001F00B300000197FFFF00E3001000FD03EC02091818017801810099FFC0
- stack 0: 0xF0
1883	 195	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x99
1884	 196	JUMP		 	 
- stack 0: 0x5B0
1885	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5B0
1886	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
1887	 9B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x99001F00B300000197FFFF00E3001000FD03EC02091818017801810099FFC0
1888	 9C	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x99001F00B300000197FFFF00E3001000FD03EC02091818017801810099FFC0
- stack 0: 0xE0
1889	 9E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x99001F
1890	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x99001F
- stack 0: 0xFFFF
1891	 A2	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x1F
1892	 A3	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x1F
- stack 0: 0x1
1893	 A5	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x1F
1894	 A6	PUSH2	0040	 	 
- stack 2: 0x5B0
- stack 1: 0x1F
- stack 0: 0x40
1895	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5B0
1896	 AA	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1897	 AC	ADD		 	 
- stack 0: 0x5B4
1898	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1899	 AE	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0xB300000197FFFF00E3001000FD03EC02091818017801810099FFC000B30000
1900	 AF	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0xB300000197FFFF00E3001000FD03EC02091818017801810099FFC000B30000
- stack 0: 0xF0
1901	 B1	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0xB3
1902	 B2	JUMP		 	 
- stack 0: 0x5B4
1903	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x5B4
1904	 B4	PUSH2	0020	 	 
- stack 1: 0x5B4
- stack 0: 0x20
1905	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5B4
- stack 0: 0x81818181
1906	 B8	PUSH1	03	 	 
- stack 2: 0x5B4
- stack 1: 0x81818181
- stack 0: 0x3
1907	 BA	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1908	 BB	PUSH2	0040	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
1909	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1F
1910	 BF	PUSH1	1F	 	 
- stack 3: 0x5B4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0x1F
- stack 0: 0x1F
1911	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1F
1912	 C2	SAR		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1913	 C3	PUSH2	0060	 	 
- stack 2: 0x5B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
1914	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x5B4
1915	 C7	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1916	 C9	ADD		 	 
- stack 0: 0x5B8
1917	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1918	 CB	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x197FFFF00E3001000FD03EC02091818017801810099FFC000B30000021C1818
1919	 CC	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x197FFFF00E3001000FD03EC02091818017801810099FFC000B30000021C1818
- stack 0: 0xF0
1920	 CE	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x197
1921	 CF	JUMP		 	 
- stack 0: 0x5B8
1922	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5B8
1923	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
1924	 199	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x197FFFF00E3001000FD03EC02091818017801810099FFC000B30000021C1818
1925	 19A	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x197FFFF00E3001000FD03EC02091818017801810099FFC000B30000021C1818
- stack 0: 0xE0
1926	 19C	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x197FFFF
1927	 19D	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
1928	 1A0	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFF
1929	 1A1	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFF
- stack 0: 0x1
1930	 1A3	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1931	 1A4	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1932	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
1933	 1A8	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
1934	 1AA	ADD		 	 
- stack 0: 0x5BC
1935	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
1936	 1AC	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xE3001000FD03EC02091818017801810099FFC000B30000021C181801B10181
1937	 1AD	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xE3001000FD03EC02091818017801810099FFC000B30000021C181801B10181
- stack 0: 0xF0
1938	 1AF	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xE3
1939	 1B0	JUMP		 	 
- stack 0: 0x5BC
1940	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5BC
1941	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
1942	 E5	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xE3001000FD03EC02091818017801810099FFC000B30000021C181801B10181
1943	 E6	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xE3001000FD03EC02091818017801810099FFC000B30000021C181801B10181
- stack 0: 0xE0
1944	 E8	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xE30010
1945	 E9	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xE30010
- stack 0: 0xFFFF
1946	 EC	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x10
1947	 ED	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x10
- stack 0: 0x1
1948	 EF	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x10
1949	 F0	PUSH2	0380	 	 
- stack 2: 0x5BC
- stack 1: 0x10
- stack 0: 0x380
1950	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x5BC
1951	 F4	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
1952	 F6	ADD		 	 
- stack 0: 0x5C0
1953	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
1954	 F8	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xFD03EC02091818017801810099FFC000B30000021C181801B1018100E30011
1955	 F9	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xFD03EC02091818017801810099FFC000B30000021C181801B1018100E30011
- stack 0: 0xF0
1956	 FB	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xFD
1957	 FC	JUMP		 	 
- stack 0: 0x5C0
1958	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x5C0
1959	 FE	PUSH2	0060	 	 
- stack 1: 0x5C0
- stack 0: 0x60
1960	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1961	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1962	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFF
1963	 108	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
1964	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1965	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C0
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1966	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1967	 112	SUB		 	 
- stack 1: 0x5C0
- stack 0: 0x0
1968	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x11B
1969	 116	JUMPI		 	 
- stack 0: 0x5C0
1970	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x5C0
- stack 0: 0x135
1971	 11A	JUMP		 	 
- stack 0: 0x5C0
1972	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x5C0
1973	 136	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
1974	 138	ADD		 	 
- stack 0: 0x5C4
1975	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
1976	 13A	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2091818017801810099FFC000B30000021C181801B1018100E3001100FD03CC
1977	 13B	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x2091818017801810099FFC000B30000021C181801B1018100E3001100FD03CC
- stack 0: 0xF0
1978	 13D	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x209
1979	 13E	JUMP		 	 
- stack 0: 0x5C4
1980	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x5C4
1981	 20A	PUSH4	81818000	 	 
- stack 1: 0x5C4
- stack 0: 0x81818000
1982	 20F	PUSH2	0020	 	 
- stack 2: 0x5C4
- stack 1: 0x81818000
- stack 0: 0x20
1983	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C4
1984	 213	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
1985	 215	ADD		 	 
- stack 0: 0x5C8
1986	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
1987	 217	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17801810099FFC000B30000021C181801B1018100E3001100FD03CC02091818
1988	 218	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x17801810099FFC000B30000021C181801B1018100E3001100FD03CC02091818
- stack 0: 0xF0
1989	 21A	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x178
1990	 21B	JUMP		 	 
- stack 0: 0x5C8
1991	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5C8
1992	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
1993	 17A	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x17801810099FFC000B30000021C181801B1018100E3001100FD03CC02091818
1994	 17B	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x17801810099FFC000B30000021C181801B1018100E3001100FD03CC02091818
- stack 0: 0xE0
1995	 17D	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x1780181
1996	 17E	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x1780181
- stack 0: 0xFFFF
1997	 181	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x181
1998	 182	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x181
- stack 0: 0x1
1999	 184	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x181
2000	 185	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x181
- stack 0: 0x20
2001	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0x181
- stack 0: 0x81818000
2002	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x5C8
- stack 0: 0x81818181
2003	 18A	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x81818181
- stack 0: 0x20
2004	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2005	 18E	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2006	 190	ADD		 	 
- stack 0: 0x5CC
2007	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2008	 192	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x99FFC000B30000021C181801B1018100E3001100FD03CC0209181801780181
2009	 193	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x99FFC000B30000021C181801B1018100E3001100FD03CC0209181801780181
- stack 0: 0xF0
2010	 195	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x99
2011	 196	JUMP		 	 
- stack 0: 0x5CC
2012	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5CC
2013	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2014	 9B	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x99FFC000B30000021C181801B1018100E3001100FD03CC0209181801780181
2015	 9C	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x99FFC000B30000021C181801B1018100E3001100FD03CC0209181801780181
- stack 0: 0xE0
2016	 9E	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x99FFC0
2017	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x99FFC0
- stack 0: 0xFFFF
2018	 A2	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFC0
2019	 A3	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xFFC0
- stack 0: 0x1
2020	 A5	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
2021	 A6	PUSH2	0040	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
- stack 0: 0x40
2022	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5CC
2023	 AA	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2024	 AC	ADD		 	 
- stack 0: 0x5D0
2025	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2026	 AE	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xB30000021C181801B1018100E3001100FD03CC02091818017801810099FFC1
2027	 AF	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xB30000021C181801B1018100E3001100FD03CC02091818017801810099FFC1
- stack 0: 0xF0
2028	 B1	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xB3
2029	 B2	JUMP		 	 
- stack 0: 0x5D0
2030	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x5D0
2031	 B4	PUSH2	0020	 	 
- stack 1: 0x5D0
- stack 0: 0x20
2032	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D0
- stack 0: 0x81818181
2033	 B8	PUSH1	03	 	 
- stack 2: 0x5D0
- stack 1: 0x81818181
- stack 0: 0x3
2034	 BA	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2035	 BB	PUSH2	0040	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
2036	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
2037	 BF	PUSH1	1F	 	 
- stack 3: 0x5D0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0
- stack 0: 0x1F
2038	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x0
2039	 C2	SAR		 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2040	 C3	PUSH2	0060	 	 
- stack 2: 0x5D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x60
2041	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D0
2042	 C7	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2043	 C9	ADD		 	 
- stack 0: 0x5D4
2044	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2045	 CB	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x21C181801B1018100E3001100FD03CC02091818017801810099FFC100B30000
2046	 CC	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x21C181801B1018100E3001100FD03CC02091818017801810099FFC100B30000
- stack 0: 0xF0
2047	 CE	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x21C
2048	 CF	JUMP		 	 
- stack 0: 0x5D4
2049	 21C	JUMPDEST		 ;; __riscvimpl_LUI_81818eb7	  ;; # instr: lui t4,0x81818(ignore imm)
- stack 0: 0x5D4
2050	 21D	PUSH4	81818000	 	 
- stack 1: 0x5D4
- stack 0: 0x81818000
2051	 222	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x81818000
- stack 0: 0x3A0
2052	 225	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
2053	 226	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2054	 228	ADD		 	 
- stack 0: 0x5D8
2055	 229	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2056	 22A	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1B1018100E3001100FD03CC02091818017801810099FFC100B30000022F0C0C
2057	 22B	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1B1018100E3001100FD03CC02091818017801810099FFC100B30000022F0C0C
- stack 0: 0xF0
2058	 22D	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1B1
2059	 22E	JUMP		 	 
- stack 0: 0x5D8
2060	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x5D8
2061	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2062	 1B3	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1B1018100E3001100FD03CC02091818017801810099FFC100B30000022F0C0C
2063	 1B4	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x1B1018100E3001100FD03CC02091818017801810099FFC100B30000022F0C0C
- stack 0: 0xE0
2064	 1B6	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1B10181
2065	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x1B10181
- stack 0: 0xFFFF
2066	 1BA	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x181
2067	 1BB	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x181
- stack 0: 0x1
2068	 1BD	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x181
2069	 1BE	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0x181
- stack 0: 0x3A0
2070	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D8
- stack 1: 0x181
- stack 0: 0x81818000
2071	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x5D8
- stack 0: 0x81818181
2072	 1C3	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0x81818181
- stack 0: 0x3A0
2073	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
2074	 1C7	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2075	 1C9	ADD		 	 
- stack 0: 0x5DC
2076	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2077	 1CB	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xE3001100FD03CC02091818017801810099FFC100B30000022F0C0C01B100C0
2078	 1CC	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0xE3001100FD03CC02091818017801810099FFC100B30000022F0C0C01B100C0
- stack 0: 0xF0
2079	 1CE	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xE3
2080	 1CF	JUMP		 	 
- stack 0: 0x5DC
2081	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5DC
2082	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2083	 E5	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0xE3001100FD03CC02091818017801810099FFC100B30000022F0C0C01B100C0
2084	 E6	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0xE3001100FD03CC02091818017801810099FFC100B30000022F0C0C01B100C0
- stack 0: 0xE0
2085	 E8	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0xE30011
2086	 E9	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0xE30011
- stack 0: 0xFFFF
2087	 EC	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x11
2088	 ED	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x11
- stack 0: 0x1
2089	 EF	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x11
2090	 F0	PUSH2	0380	 	 
- stack 2: 0x5DC
- stack 1: 0x11
- stack 0: 0x380
2091	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x5DC
2092	 F4	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2093	 F6	ADD		 	 
- stack 0: 0x5E0
2094	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2095	 F8	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xFD03CC02091818017801810099FFC100B30000022F0C0C01B100C000E30012
2096	 F9	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xFD03CC02091818017801810099FFC100B30000022F0C0C01B100C000E30012
- stack 0: 0xF0
2097	 FB	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xFD
2098	 FC	JUMP		 	 
- stack 0: 0x5E0
2099	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x5E0
2100	 FE	PUSH2	0060	 	 
- stack 1: 0x5E0
- stack 0: 0x60
2101	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2102	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFF
2103	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x81818181
2104	 108	PUSH2	03A0	 	 
- stack 2: 0x5E0
- stack 1: 0x81818181
- stack 0: 0x3A0
2105	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E0
- stack 1: 0x81818181
- stack 0: 0x81818181
2106	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x81818181
- stack 1: 0x81818181
- stack 0: 0xFFFFFFFF
2107	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x81818181
- stack 0: 0x81818181
2108	 112	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2109	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x11B
2110	 116	JUMPI		 	 
- stack 0: 0x5E0
2111	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x5E0
- stack 0: 0x135
2112	 11A	JUMP		 	 
- stack 0: 0x5E0
2113	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x5E0
2114	 136	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2115	 138	ADD		 	 
- stack 0: 0x5E4
2116	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2117	 13A	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x2091818017801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC
2118	 13B	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x2091818017801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC
- stack 0: 0xF0
2119	 13D	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x209
2120	 13E	JUMP		 	 
- stack 0: 0x5E4
2121	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x5E4
2122	 20A	PUSH4	81818000	 	 
- stack 1: 0x5E4
- stack 0: 0x81818000
2123	 20F	PUSH2	0020	 	 
- stack 2: 0x5E4
- stack 1: 0x81818000
- stack 0: 0x20
2124	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E4
2125	 213	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2126	 215	ADD		 	 
- stack 0: 0x5E8
2127	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2128	 217	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x17801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC02091818
2129	 218	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x17801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC02091818
- stack 0: 0xF0
2130	 21A	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x178
2131	 21B	JUMP		 	 
- stack 0: 0x5E8
2132	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5E8
2133	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2134	 17A	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x17801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC02091818
2135	 17B	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x17801810099FFC100B30000022F0C0C01B100C000E3001200FD03AC02091818
- stack 0: 0xE0
2136	 17D	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x1780181
2137	 17E	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1780181
- stack 0: 0xFFFF
2138	 181	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x181
2139	 182	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x181
- stack 0: 0x1
2140	 184	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x181
2141	 185	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x181
- stack 0: 0x20
2142	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E8
- stack 1: 0x181
- stack 0: 0x81818000
2143	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x5E8
- stack 0: 0x81818181
2144	 18A	PUSH2	0020	 	 
- stack 2: 0x5E8
- stack 1: 0x81818181
- stack 0: 0x20
2145	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x5E8
2146	 18E	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2147	 190	ADD		 	 
- stack 0: 0x5EC
2148	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2149	 192	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x99FFC100B30000022F0C0C01B100C000E3001200FD03AC0209181801780181
2150	 193	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x99FFC100B30000022F0C0C01B100C000E3001200FD03AC0209181801780181
- stack 0: 0xF0
2151	 195	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x99
2152	 196	JUMP		 	 
- stack 0: 0x5EC
2153	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5EC
2154	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2155	 9B	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x99FFC100B30000022F0C0C01B100C000E3001200FD03AC0209181801780181
2156	 9C	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x99FFC100B30000022F0C0C01B100C000E3001200FD03AC0209181801780181
- stack 0: 0xE0
2157	 9E	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x99FFC1
2158	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x99FFC1
- stack 0: 0xFFFF
2159	 A2	AND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFC1
2160	 A3	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0xFFC1
- stack 0: 0x1
2161	 A5	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1
2162	 A6	PUSH2	0040	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1
- stack 0: 0x40
2163	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5EC
2164	 AA	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2165	 AC	ADD		 	 
- stack 0: 0x5F0
2166	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2167	 AE	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xB30000022F0C0C01B100C000E3001200FD03AC02091818017801810099FFC7
2168	 AF	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xB30000022F0C0C01B100C000E3001200FD03AC02091818017801810099FFC7
- stack 0: 0xF0
2169	 B1	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xB3
2170	 B2	JUMP		 	 
- stack 0: 0x5F0
2171	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x5F0
2172	 B4	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
2173	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0x81818181
2174	 B8	PUSH1	03	 	 
- stack 2: 0x5F0
- stack 1: 0x81818181
- stack 0: 0x3
2175	 BA	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2176	 BB	PUSH2	0040	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
2177	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1
2178	 BF	PUSH1	1F	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1
- stack 0: 0x1F
2179	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1
2180	 C2	SAR		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
2181	 C3	PUSH2	0060	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0x60
2182	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F0
2183	 C7	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2184	 C9	ADD		 	 
- stack 0: 0x5F4
2185	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2186	 CB	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x22F0C0C01B100C000E3001200FD03AC02091818017801810099FFC700B30000
2187	 CC	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x22F0C0C01B100C000E3001200FD03AC02091818017801810099FFC700B30000
- stack 0: 0xF0
2188	 CE	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x22F
2189	 CF	JUMP		 	 
- stack 0: 0x5F4
2190	 22F	JUMPDEST		 ;; __riscvimpl_LUI_c0c0ceb7	  ;; # instr: lui t4,0xc0c0c(ignore imm)
- stack 0: 0x5F4
2191	 230	PUSH4	c0c0c000	 	 
- stack 1: 0x5F4
- stack 0: 0xC0C0C000
2192	 235	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0xC0C0C000
- stack 0: 0x3A0
2193	 238	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F4
2194	 239	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2195	 23B	ADD		 	 
- stack 0: 0x5F8
2196	 23C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2197	 23D	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1B100C000E3001200FD03AC02091818017801810099FFC700B300000242F030
2198	 23E	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x1B100C000E3001200FD03AC02091818017801810099FFC700B300000242F030
- stack 0: 0xF0
2199	 240	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1B1
2200	 241	JUMP		 	 
- stack 0: 0x5F8
2201	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x5F8
2202	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2203	 1B3	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x1B100C000E3001200FD03AC02091818017801810099FFC700B300000242F030
2204	 1B4	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x1B100C000E3001200FD03AC02091818017801810099FFC700B300000242F030
- stack 0: 0xE0
2205	 1B6	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1B100C0
2206	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1B100C0
- stack 0: 0xFFFF
2207	 1BA	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xC0
2208	 1BB	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xC0
- stack 0: 0x1
2209	 1BD	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xC0
2210	 1BE	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xC0
- stack 0: 0x3A0
2211	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F8
- stack 1: 0xC0
- stack 0: 0xC0C0C000
2212	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x5F8
- stack 0: 0xC0C0C0C0
2213	 1C3	PUSH2	03A0	 	 
- stack 2: 0x5F8
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
2214	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5F8
2215	 1C7	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2216	 1C9	ADD		 	 
- stack 0: 0x5FC
2217	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2218	 1CB	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xE3001200FD03AC02091818017801810099FFC700B300000242F03001B10303
2219	 1CC	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xE3001200FD03AC02091818017801810099FFC700B300000242F03001B10303
- stack 0: 0xF0
2220	 1CE	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xE3
2221	 1CF	JUMP		 	 
- stack 0: 0x5FC
2222	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5FC
2223	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2224	 E5	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xE3001200FD03AC02091818017801810099FFC700B300000242F03001B10303
2225	 E6	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xE3001200FD03AC02091818017801810099FFC700B300000242F03001B10303
- stack 0: 0xE0
2226	 E8	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xE30012
2227	 E9	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xE30012
- stack 0: 0xFFFF
2228	 EC	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x12
2229	 ED	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x12
- stack 0: 0x1
2230	 EF	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x12
2231	 F0	PUSH2	0380	 	 
- stack 2: 0x5FC
- stack 1: 0x12
- stack 0: 0x380
2232	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x5FC
2233	 F4	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2234	 F6	ADD		 	 
- stack 0: 0x600
2235	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2236	 F8	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xFD03AC02091818017801810099FFC700B300000242F03001B1030300E30013
2237	 F9	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xFD03AC02091818017801810099FFC700B300000242F03001B1030300E30013
- stack 0: 0xF0
2238	 FB	SHR		 	 
- stack 1: 0x600
- stack 0: 0xFD
2239	 FC	JUMP		 	 
- stack 0: 0x600
2240	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x600
2241	 FE	PUSH2	0060	 	 
- stack 1: 0x600
- stack 0: 0x60
2242	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
2243	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0xFFFFFFFF
2244	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x600
- stack 0: 0xC0C0C0C0
2245	 108	PUSH2	03A0	 	 
- stack 2: 0x600
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
2246	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x600
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
2247	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x600
- stack 2: 0xC0C0C0C0
- stack 1: 0xC0C0C0C0
- stack 0: 0xFFFFFFFF
2248	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x600
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
2249	 112	SUB		 	 
- stack 1: 0x600
- stack 0: 0x0
2250	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x11B
2251	 116	JUMPI		 	 
- stack 0: 0x600
2252	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x600
- stack 0: 0x135
2253	 11A	JUMP		 	 
- stack 0: 0x600
2254	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x600
2255	 136	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2256	 138	ADD		 	 
- stack 0: 0x604
2257	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2258	 13A	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x2091818017801810099FFC700B300000242F03001B1030300E3001300FD038C
2259	 13B	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x2091818017801810099FFC700B300000242F03001B1030300E3001300FD038C
- stack 0: 0xF0
2260	 13D	SHR		 	 
- stack 1: 0x604
- stack 0: 0x209
2261	 13E	JUMP		 	 
- stack 0: 0x604
2262	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x604
2263	 20A	PUSH4	81818000	 	 
- stack 1: 0x604
- stack 0: 0x81818000
2264	 20F	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0x81818000
- stack 0: 0x20
2265	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x604
2266	 213	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2267	 215	ADD		 	 
- stack 0: 0x608
2268	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2269	 217	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x17801810099FFC700B300000242F03001B1030300E3001300FD038C02091818
2270	 218	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x17801810099FFC700B300000242F03001B1030300E3001300FD038C02091818
- stack 0: 0xF0
2271	 21A	SHR		 	 
- stack 1: 0x608
- stack 0: 0x178
2272	 21B	JUMP		 	 
- stack 0: 0x608
2273	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x608
2274	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2275	 17A	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x17801810099FFC700B300000242F03001B1030300E3001300FD038C02091818
2276	 17B	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x17801810099FFC700B300000242F03001B1030300E3001300FD038C02091818
- stack 0: 0xE0
2277	 17D	SHR		 	 
- stack 1: 0x608
- stack 0: 0x1780181
2278	 17E	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x1780181
- stack 0: 0xFFFF
2279	 181	AND		 	 
- stack 1: 0x608
- stack 0: 0x181
2280	 182	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x181
- stack 0: 0x1
2281	 184	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x181
2282	 185	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0x181
- stack 0: 0x20
2283	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x608
- stack 1: 0x181
- stack 0: 0x81818000
2284	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x608
- stack 0: 0x81818181
2285	 18A	PUSH2	0020	 	 
- stack 2: 0x608
- stack 1: 0x81818181
- stack 0: 0x20
2286	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x608
2287	 18E	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2288	 190	ADD		 	 
- stack 0: 0x60C
2289	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2290	 192	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x99FFC700B300000242F03001B1030300E3001300FD038C0209181801780181
2291	 193	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x99FFC700B300000242F03001B1030300E3001300FD038C0209181801780181
- stack 0: 0xF0
2292	 195	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x99
2293	 196	JUMP		 	 
- stack 0: 0x60C
2294	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x60C
2295	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2296	 9B	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x99FFC700B300000242F03001B1030300E3001300FD038C0209181801780181
2297	 9C	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x99FFC700B300000242F03001B1030300E3001300FD038C0209181801780181
- stack 0: 0xE0
2298	 9E	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x99FFC7
2299	 9F	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x99FFC7
- stack 0: 0xFFFF
2300	 A2	AND		 	 
- stack 1: 0x60C
- stack 0: 0xFFC7
2301	 A3	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xFFC7
- stack 0: 0x1
2302	 A5	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7
2303	 A6	PUSH2	0040	 	 
- stack 2: 0x60C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7
- stack 0: 0x40
2304	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x60C
2305	 AA	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2306	 AC	ADD		 	 
- stack 0: 0x610
2307	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2308	 AE	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xB300000242F03001B1030300E3001300FD038C02091818017801810099FFCE
2309	 AF	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xB300000242F03001B1030300E3001300FD038C02091818017801810099FFCE
- stack 0: 0xF0
2310	 B1	SHR		 	 
- stack 1: 0x610
- stack 0: 0xB3
2311	 B2	JUMP		 	 
- stack 0: 0x610
2312	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x610
2313	 B4	PUSH2	0020	 	 
- stack 1: 0x610
- stack 0: 0x20
2314	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x610
- stack 0: 0x81818181
2315	 B8	PUSH1	03	 	 
- stack 2: 0x610
- stack 1: 0x81818181
- stack 0: 0x3
2316	 BA	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2317	 BB	PUSH2	0040	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
2318	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7
2319	 BF	PUSH1	1F	 	 
- stack 3: 0x610
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7
- stack 0: 0x1F
2320	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x7
2321	 C2	SAR		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
2322	 C3	PUSH2	0060	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0x60
2323	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x610
2324	 C7	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2325	 C9	ADD		 	 
- stack 0: 0x614
2326	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2327	 CB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x242F03001B1030300E3001300FD038C02091818017801810099FFCE00B30000
2328	 CC	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x242F03001B1030300E3001300FD038C02091818017801810099FFCE00B30000
- stack 0: 0xF0
2329	 CE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x242
2330	 CF	JUMP		 	 
- stack 0: 0x614
2331	 242	JUMPDEST		 ;; __riscvimpl_LUI_ff030eb7	  ;; # instr: lui t4,0xff030(ignore imm)
- stack 0: 0x614
2332	 243	PUSH4	ff030000	 	 
- stack 1: 0x614
- stack 0: 0xFF030000
2333	 248	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xFF030000
- stack 0: 0x3A0
2334	 24B	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
2335	 24C	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2336	 24E	ADD		 	 
- stack 0: 0x618
2337	 24F	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2338	 250	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1B1030300E3001300FD038C02091818017801810099FFCE00B300000165FFE0
2339	 251	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x1B1030300E3001300FD038C02091818017801810099FFCE00B300000165FFE0
- stack 0: 0xF0
2340	 253	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1B1
2341	 254	JUMP		 	 
- stack 0: 0x618
2342	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x618
2343	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2344	 1B3	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x1B1030300E3001300FD038C02091818017801810099FFCE00B300000165FFE0
2345	 1B4	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x1B1030300E3001300FD038C02091818017801810099FFCE00B300000165FFE0
- stack 0: 0xE0
2346	 1B6	SHR		 	 
- stack 1: 0x618
- stack 0: 0x1B10303
2347	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x1B10303
- stack 0: 0xFFFF
2348	 1BA	AND		 	 
- stack 1: 0x618
- stack 0: 0x303
2349	 1BB	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x303
- stack 0: 0x1
2350	 1BD	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x303
2351	 1BE	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0x303
- stack 0: 0x3A0
2352	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0x303
- stack 0: 0xFF030000
2353	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x618
- stack 0: 0xFF030303
2354	 1C3	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xFF030303
- stack 0: 0x3A0
2355	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x618
2356	 1C7	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2357	 1C9	ADD		 	 
- stack 0: 0x61C
2358	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2359	 1CB	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xE3001300FD038C02091818017801810099FFCE00B300000165FFE001B10606
2360	 1CC	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xE3001300FD038C02091818017801810099FFCE00B300000165FFE001B10606
- stack 0: 0xF0
2361	 1CE	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xE3
2362	 1CF	JUMP		 	 
- stack 0: 0x61C
2363	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x61C
2364	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2365	 E5	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xE3001300FD038C02091818017801810099FFCE00B300000165FFE001B10606
2366	 E6	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0xE3001300FD038C02091818017801810099FFCE00B300000165FFE001B10606
- stack 0: 0xE0
2367	 E8	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xE30013
2368	 E9	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0xE30013
- stack 0: 0xFFFF
2369	 EC	AND		 	 
- stack 1: 0x61C
- stack 0: 0x13
2370	 ED	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x13
- stack 0: 0x1
2371	 EF	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x13
2372	 F0	PUSH2	0380	 	 
- stack 2: 0x61C
- stack 1: 0x13
- stack 0: 0x380
2373	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x61C
2374	 F4	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2375	 F6	ADD		 	 
- stack 0: 0x620
2376	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2377	 F8	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xFD038C02091818017801810099FFCE00B300000165FFE001B1060600E30014
2378	 F9	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xFD038C02091818017801810099FFCE00B300000165FFE001B1060600E30014
- stack 0: 0xF0
2379	 FB	SHR		 	 
- stack 1: 0x620
- stack 0: 0xFD
2380	 FC	JUMP		 	 
- stack 0: 0x620
2381	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x620
2382	 FE	PUSH2	0060	 	 
- stack 1: 0x620
- stack 0: 0x60
2383	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
2384	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0xFFFFFFFF
2385	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0xFF030303
2386	 108	PUSH2	03A0	 	 
- stack 2: 0x620
- stack 1: 0xFF030303
- stack 0: 0x3A0
2387	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x620
- stack 1: 0xFF030303
- stack 0: 0xFF030303
2388	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0xFF030303
- stack 1: 0xFF030303
- stack 0: 0xFFFFFFFF
2389	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0xFF030303
- stack 0: 0xFF030303
2390	 112	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
2391	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x11B
2392	 116	JUMPI		 	 
- stack 0: 0x620
2393	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x620
- stack 0: 0x135
2394	 11A	JUMP		 	 
- stack 0: 0x620
2395	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x620
2396	 136	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2397	 138	ADD		 	 
- stack 0: 0x624
2398	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2399	 13A	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2091818017801810099FFCE00B300000165FFE001B1060600E3001400FD036C
2400	 13B	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x2091818017801810099FFCE00B300000165FFE001B1060600E3001400FD036C
- stack 0: 0xF0
2401	 13D	SHR		 	 
- stack 1: 0x624
- stack 0: 0x209
2402	 13E	JUMP		 	 
- stack 0: 0x624
2403	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x624
2404	 20A	PUSH4	81818000	 	 
- stack 1: 0x624
- stack 0: 0x81818000
2405	 20F	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0x81818000
- stack 0: 0x20
2406	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
2407	 213	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2408	 215	ADD		 	 
- stack 0: 0x628
2409	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2410	 217	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x17801810099FFCE00B300000165FFE001B1060600E3001400FD036C02091818
2411	 218	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x17801810099FFCE00B300000165FFE001B1060600E3001400FD036C02091818
- stack 0: 0xF0
2412	 21A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x178
2413	 21B	JUMP		 	 
- stack 0: 0x628
2414	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x628
2415	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2416	 17A	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x17801810099FFCE00B300000165FFE001B1060600E3001400FD036C02091818
2417	 17B	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x17801810099FFCE00B300000165FFE001B1060600E3001400FD036C02091818
- stack 0: 0xE0
2418	 17D	SHR		 	 
- stack 1: 0x628
- stack 0: 0x1780181
2419	 17E	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x1780181
- stack 0: 0xFFFF
2420	 181	AND		 	 
- stack 1: 0x628
- stack 0: 0x181
2421	 182	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x181
- stack 0: 0x1
2422	 184	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x181
2423	 185	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x181
- stack 0: 0x20
2424	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0x181
- stack 0: 0x81818000
2425	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0x81818181
2426	 18A	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x81818181
- stack 0: 0x20
2427	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
2428	 18E	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2429	 190	ADD		 	 
- stack 0: 0x62C
2430	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2431	 192	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x99FFCE00B300000165FFE001B1060600E3001400FD036C0209181801780181
2432	 193	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x99FFCE00B300000165FFE001B1060600E3001400FD036C0209181801780181
- stack 0: 0xF0
2433	 195	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x99
2434	 196	JUMP		 	 
- stack 0: 0x62C
2435	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x62C
2436	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2437	 9B	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x99FFCE00B300000165FFE001B1060600E3001400FD036C0209181801780181
2438	 9C	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x99FFCE00B300000165FFE001B1060600E3001400FD036C0209181801780181
- stack 0: 0xE0
2439	 9E	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x99FFCE
2440	 9F	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x99FFCE
- stack 0: 0xFFFF
2441	 A2	AND		 	 
- stack 1: 0x62C
- stack 0: 0xFFCE
2442	 A3	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xFFCE
- stack 0: 0x1
2443	 A5	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
2444	 A6	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
- stack 0: 0x40
2445	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
2446	 AA	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2447	 AC	ADD		 	 
- stack 0: 0x630
2448	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2449	 AE	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xB300000165FFE001B1060600E3001400FD036C02091818017801810099FFFF
2450	 AF	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xB300000165FFE001B1060600E3001400FD036C02091818017801810099FFFF
- stack 0: 0xF0
2451	 B1	SHR		 	 
- stack 1: 0x630
- stack 0: 0xB3
2452	 B2	JUMP		 	 
- stack 0: 0x630
2453	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x630
2454	 B4	PUSH2	0020	 	 
- stack 1: 0x630
- stack 0: 0x20
2455	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x630
- stack 0: 0x81818181
2456	 B8	PUSH1	03	 	 
- stack 2: 0x630
- stack 1: 0x81818181
- stack 0: 0x3
2457	 BA	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2458	 BB	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
2459	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
2460	 BF	PUSH1	1F	 	 
- stack 3: 0x630
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCE
- stack 0: 0x1F
2461	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xE
2462	 C2	SAR		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
2463	 C3	PUSH2	0060	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0x60
2464	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x630
2465	 C7	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2466	 C9	ADD		 	 
- stack 0: 0x634
2467	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2468	 CB	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x165FFE001B1060600E3001400FD036C02091818017801810099FFFF00B30000
2469	 CC	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x165FFE001B1060600E3001400FD036C02091818017801810099FFFF00B30000
- stack 0: 0xF0
2470	 CE	SHR		 	 
- stack 1: 0x634
- stack 0: 0x165
2471	 CF	JUMP		 	 
- stack 0: 0x634
2472	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x634
2473	 166	PUSH4	fffe0000	 	 
- stack 1: 0x634
- stack 0: 0xFFFE0000
2474	 16B	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
2475	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x634
2476	 16F	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2477	 171	ADD		 	 
- stack 0: 0x638
2478	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2479	 173	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1B1060600E3001400FD036C02091818017801810099FFFF00B300000197FFFF
2480	 174	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x1B1060600E3001400FD036C02091818017801810099FFFF00B300000197FFFF
- stack 0: 0xF0
2481	 176	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1B1
2482	 177	JUMP		 	 
- stack 0: 0x638
2483	 1B1	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x638
2484	 1B2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
2485	 1B3	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x1B1060600E3001400FD036C02091818017801810099FFFF00B300000197FFFF
2486	 1B4	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x1B1060600E3001400FD036C02091818017801810099FFFF00B300000197FFFF
- stack 0: 0xE0
2487	 1B6	SHR		 	 
- stack 1: 0x638
- stack 0: 0x1B10606
2488	 1B7	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x1B10606
- stack 0: 0xFFFF
2489	 1BA	AND		 	 
- stack 1: 0x638
- stack 0: 0x606
2490	 1BB	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x606
- stack 0: 0x1
2491	 1BD	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x606
2492	 1BE	PUSH2	03A0	 	 
- stack 2: 0x638
- stack 1: 0x606
- stack 0: 0x3A0
2493	 1C1	MLOAD		 	  ;; # read from x29
- stack 2: 0x638
- stack 1: 0x606
- stack 0: 0xFFFE0000
2494	 1C2	ADD		 	  ;; # ADDI 29
- stack 1: 0x638
- stack 0: 0xFFFE0606
2495	 1C3	PUSH2	03A0	 	 
- stack 2: 0x638
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
2496	 1C6	MSTORE		 	  ;; # store to x29
- stack 0: 0x638
2497	 1C7	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2498	 1C9	ADD		 	 
- stack 0: 0x63C
2499	 1CA	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2500	 1CB	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xE3001400FD036C02091818017801810099FFFF00B300000197FFFF00E30015
2501	 1CC	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xE3001400FD036C02091818017801810099FFFF00B300000197FFFF00E30015
- stack 0: 0xF0
2502	 1CE	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xE3
2503	 1CF	JUMP		 	 
- stack 0: 0x63C
2504	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x63C
2505	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2506	 E5	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xE3001400FD036C02091818017801810099FFFF00B300000197FFFF00E30015
2507	 E6	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0xE3001400FD036C02091818017801810099FFFF00B300000197FFFF00E30015
- stack 0: 0xE0
2508	 E8	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xE30014
2509	 E9	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0xE30014
- stack 0: 0xFFFF
2510	 EC	AND		 	 
- stack 1: 0x63C
- stack 0: 0x14
2511	 ED	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x14
- stack 0: 0x1
2512	 EF	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x14
2513	 F0	PUSH2	0380	 	 
- stack 2: 0x63C
- stack 1: 0x14
- stack 0: 0x380
2514	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x63C
2515	 F4	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2516	 F6	ADD		 	 
- stack 0: 0x640
2517	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2518	 F8	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xFD036C02091818017801810099FFFF00B300000197FFFF00E3001500FD0350
2519	 F9	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xFD036C02091818017801810099FFFF00B300000197FFFF00E3001500FD0350
- stack 0: 0xF0
2520	 FB	SHR		 	 
- stack 1: 0x640
- stack 0: 0xFD
2521	 FC	JUMP		 	 
- stack 0: 0x640
2522	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x640
2523	 FE	PUSH2	0060	 	 
- stack 1: 0x640
- stack 0: 0x60
2524	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
2525	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0xFFFFFFFF
2526	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x640
- stack 0: 0xFFFE0606
2527	 108	PUSH2	03A0	 	 
- stack 2: 0x640
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
2528	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x640
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
2529	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x640
- stack 2: 0xFFFE0606
- stack 1: 0xFFFE0606
- stack 0: 0xFFFFFFFF
2530	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x640
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
2531	 112	SUB		 	 
- stack 1: 0x640
- stack 0: 0x0
2532	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x11B
2533	 116	JUMPI		 	 
- stack 0: 0x640
2534	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x640
- stack 0: 0x135
2535	 11A	JUMP		 	 
- stack 0: 0x640
2536	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x640
2537	 136	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2538	 138	ADD		 	 
- stack 0: 0x644
2539	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2540	 13A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x2091818017801810099FFFF00B300000197FFFF00E3001500FD035000860000
2541	 13B	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x2091818017801810099FFFF00B300000197FFFF00E3001500FD035000860000
- stack 0: 0xF0
2542	 13D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x209
2543	 13E	JUMP		 	 
- stack 0: 0x644
2544	 209	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x644
2545	 20A	PUSH4	81818000	 	 
- stack 1: 0x644
- stack 0: 0x81818000
2546	 20F	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0x81818000
- stack 0: 0x20
2547	 212	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
2548	 213	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2549	 215	ADD		 	 
- stack 0: 0x648
2550	 216	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2551	 217	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x17801810099FFFF00B300000197FFFF00E3001500FD03500086000000990007
2552	 218	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x17801810099FFFF00B300000197FFFF00E3001500FD03500086000000990007
- stack 0: 0xF0
2553	 21A	SHR		 	 
- stack 1: 0x648
- stack 0: 0x178
2554	 21B	JUMP		 	 
- stack 0: 0x648
2555	 178	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x648
2556	 179	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2557	 17A	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x17801810099FFFF00B300000197FFFF00E3001500FD03500086000000990007
2558	 17B	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x17801810099FFFF00B300000197FFFF00E3001500FD03500086000000990007
- stack 0: 0xE0
2559	 17D	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1780181
2560	 17E	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1780181
- stack 0: 0xFFFF
2561	 181	AND		 	 
- stack 1: 0x648
- stack 0: 0x181
2562	 182	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x181
- stack 0: 0x1
2563	 184	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x181
2564	 185	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0x181
- stack 0: 0x20
2565	 188	MLOAD		 	  ;; # read from x1
- stack 2: 0x648
- stack 1: 0x181
- stack 0: 0x81818000
2566	 189	ADD		 	  ;; # ADDI 1
- stack 1: 0x648
- stack 0: 0x81818181
2567	 18A	PUSH2	0020	 	 
- stack 2: 0x648
- stack 1: 0x81818181
- stack 0: 0x20
2568	 18D	MSTORE		 	  ;; # store to x1
- stack 0: 0x648
2569	 18E	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
2570	 190	ADD		 	 
- stack 0: 0x64C
2571	 191	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
2572	 192	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x99FFFF00B300000197FFFF00E3001500FD0350008600000099000702550000
2573	 193	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x99FFFF00B300000197FFFF00E3001500FD0350008600000099000702550000
- stack 0: 0xF0
2574	 195	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x99
2575	 196	JUMP		 	 
- stack 0: 0x64C
2576	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x64C
2577	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
2578	 9B	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x99FFFF00B300000197FFFF00E3001500FD0350008600000099000702550000
2579	 9C	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x99FFFF00B300000197FFFF00E3001500FD0350008600000099000702550000
- stack 0: 0xE0
2580	 9E	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x99FFFF
2581	 9F	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x99FFFF
- stack 0: 0xFFFF
2582	 A2	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFF
2583	 A3	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFFF
- stack 0: 0x1
2584	 A5	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2585	 A6	PUSH2	0040	 	 
- stack 2: 0x64C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2586	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x64C
2587	 AA	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
2588	 AC	ADD		 	 
- stack 0: 0x650
2589	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
2590	 AE	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xB300000197FFFF00E3001500FD03500086000000990007025500000152F000
2591	 AF	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xB300000197FFFF00E3001500FD03500086000000990007025500000152F000
- stack 0: 0xF0
2592	 B1	SHR		 	 
- stack 1: 0x650
- stack 0: 0xB3
2593	 B2	JUMP		 	 
- stack 0: 0x650
2594	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x650
2595	 B4	PUSH2	0020	 	 
- stack 1: 0x650
- stack 0: 0x20
2596	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x650
- stack 0: 0x81818181
2597	 B8	PUSH1	03	 	 
- stack 2: 0x650
- stack 1: 0x81818181
- stack 0: 0x3
2598	 BA	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
2599	 BB	PUSH2	0040	 	 
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x40
2600	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2601	 BF	PUSH1	1F	 	 
- stack 3: 0x650
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1F
2602	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1F
2603	 C2	SAR		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2604	 C3	PUSH2	0060	 	 
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
2605	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x650
2606	 C7	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
2607	 C9	ADD		 	 
- stack 0: 0x654
2608	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
2609	 CB	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x197FFFF00E3001500FD03500086000000990007025500000152F00000E30016
2610	 CC	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x197FFFF00E3001500FD03500086000000990007025500000152F00000E30016
- stack 0: 0xF0
2611	 CE	SHR		 	 
- stack 1: 0x654
- stack 0: 0x197
2612	 CF	JUMP		 	 
- stack 0: 0x654
2613	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x654
2614	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
2615	 199	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x197FFFF00E3001500FD03500086000000990007025500000152F00000E30016
2616	 19A	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x197FFFF00E3001500FD03500086000000990007025500000152F00000E30016
- stack 0: 0xE0
2617	 19C	SHR		 	 
- stack 1: 0x654
- stack 0: 0x197FFFF
2618	 19D	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
2619	 1A0	AND		 	 
- stack 1: 0x654
- stack 0: 0xFFFF
2620	 1A1	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xFFFF
- stack 0: 0x1
2621	 1A3	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2622	 1A4	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
2623	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x654
2624	 1A8	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
2625	 1AA	ADD		 	 
- stack 0: 0x658
2626	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
2627	 1AC	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xE3001500FD03500086000000990007025500000152F00000E3001602720338
2628	 1AD	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0xE3001500FD03500086000000990007025500000152F00000E3001602720338
- stack 0: 0xF0
2629	 1AF	SHR		 	 
- stack 1: 0x658
- stack 0: 0xE3
2630	 1B0	JUMP		 	 
- stack 0: 0x658
2631	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x658
2632	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
2633	 E5	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0xE3001500FD03500086000000990007025500000152F00000E3001602720338
2634	 E6	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0xE3001500FD03500086000000990007025500000152F00000E3001602720338
- stack 0: 0xE0
2635	 E8	SHR		 	 
- stack 1: 0x658
- stack 0: 0xE30015
2636	 E9	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0xE30015
- stack 0: 0xFFFF
2637	 EC	AND		 	 
- stack 1: 0x658
- stack 0: 0x15
2638	 ED	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x15
- stack 0: 0x1
2639	 EF	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x15
2640	 F0	PUSH2	0380	 	 
- stack 2: 0x658
- stack 1: 0x15
- stack 0: 0x380
2641	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x658
2642	 F4	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
2643	 F6	ADD		 	 
- stack 0: 0x65C
2644	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
2645	 F8	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0xFD03500086000000990007025500000152F00000E300160272033800860000
2646	 F9	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0xFD03500086000000990007025500000152F00000E300160272033800860000
- stack 0: 0xF0
2647	 FB	SHR		 	 
- stack 1: 0x65C
- stack 0: 0xFD
2648	 FC	JUMP		 	 
- stack 0: 0x65C
2649	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x65C
2650	 FE	PUSH2	0060	 	 
- stack 1: 0x65C
- stack 0: 0x60
2651	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x65C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2652	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2653	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0xFFFFFFFF
2654	 108	PUSH2	03A0	 	 
- stack 2: 0x65C
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
2655	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x65C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2656	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x65C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2657	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x65C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
2658	 112	SUB		 	 
- stack 1: 0x65C
- stack 0: 0x0
2659	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x11B
2660	 116	JUMPI		 	 
- stack 0: 0x65C
2661	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x65C
- stack 0: 0x135
2662	 11A	JUMP		 	 
- stack 0: 0x65C
2663	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x65C
2664	 136	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
2665	 138	ADD		 	 
- stack 0: 0x660
2666	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
2667	 13A	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000000990007025500000152F00000E3001602720338008600000099000E
2668	 13B	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86000000990007025500000152F00000E3001602720338008600000099000E
- stack 0: 0xF0
2669	 13D	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
2670	 13E	JUMP		 	 
- stack 0: 0x660
2671	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x660
2672	 87	PUSH4	80000000	 	 
- stack 1: 0x660
- stack 0: 0x80000000
2673	 8C	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0x80000000
- stack 0: 0x20
2674	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
2675	 90	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
2676	 92	ADD		 	 
- stack 0: 0x664
2677	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
2678	 94	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x990007025500000152F00000E3001602720338008600000099000E02B40000
2679	 95	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x990007025500000152F00000E3001602720338008600000099000E02B40000
- stack 0: 0xF0
2680	 97	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99
2681	 98	JUMP		 	 
- stack 0: 0x664
2682	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x664
2683	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
2684	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x990007025500000152F00000E3001602720338008600000099000E02B40000
2685	 9C	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x990007025500000152F00000E3001602720338008600000099000E02B40000
- stack 0: 0xE0
2686	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x990007
2687	 9F	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x990007
- stack 0: 0xFFFF
2688	 A2	AND		 	 
- stack 1: 0x664
- stack 0: 0x7
2689	 A3	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x7
- stack 0: 0x1
2690	 A5	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x7
2691	 A6	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0x7
- stack 0: 0x40
2692	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
2693	 AA	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
2694	 AC	ADD		 	 
- stack 0: 0x668
2695	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
2696	 AE	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x25500000152F00000E3001602720338008600000099000E02B400000165FFE0
2697	 AF	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x25500000152F00000E3001602720338008600000099000E02B400000165FFE0
- stack 0: 0xF0
2698	 B1	SHR		 	 
- stack 1: 0x668
- stack 0: 0x255
2699	 B2	JUMP		 	 
- stack 0: 0x668
2700	 255	JUMPDEST		 ;; __riscvimpl_SRA_1_1_2	  ;; # instr: sra ra,ra,sp(ignore imm)
- stack 0: 0x668
2701	 256	PUSH2	0020	 	 
- stack 1: 0x668
- stack 0: 0x20
2702	 259	MLOAD		 	  ;; # read from x1
- stack 1: 0x668
- stack 0: 0x80000000
2703	 25A	PUSH1	03	 	 
- stack 2: 0x668
- stack 1: 0x80000000
- stack 0: 0x3
2704	 25C	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
2705	 25D	PUSH2	0040	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
2706	 260	MLOAD		 	  ;; # read from x2
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
2707	 261	PUSH1	1F	 	 
- stack 3: 0x668
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
2708	 263	AND		 	  ;; # mask to 5 bits
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
2709	 264	SAR		 	 
- stack 1: 0x668
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2710	 265	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x20
2711	 268	MSTORE		 	  ;; # store to x1
- stack 0: 0x668
2712	 269	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
2713	 26B	ADD		 	 
- stack 0: 0x66C
2714	 26C	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
2715	 26D	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x152F00000E3001602720338008600000099000E02B400000165FFE000E30017
2716	 26E	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x152F00000E3001602720338008600000099000E02B400000165FFE000E30017
- stack 0: 0xF0
2717	 270	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x152
2718	 271	JUMP		 	 
- stack 0: 0x66C
2719	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x66C
2720	 153	PUSH4	ff000000	 	 
- stack 1: 0x66C
- stack 0: 0xFF000000
2721	 158	PUSH2	03A0	 	 
- stack 2: 0x66C
- stack 1: 0xFF000000
- stack 0: 0x3A0
2722	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x66C
2723	 15C	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
2724	 15E	ADD		 	 
- stack 0: 0x670
2725	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
2726	 160	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xE3001602720338008600000099000E02B400000165FFE000E3001702D10320
2727	 161	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xE3001602720338008600000099000E02B400000165FFE000E3001702D10320
- stack 0: 0xF0
2728	 163	SHR		 	 
- stack 1: 0x670
- stack 0: 0xE3
2729	 164	JUMP		 	 
- stack 0: 0x670
2730	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x670
2731	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
2732	 E5	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xE3001602720338008600000099000E02B400000165FFE000E3001702D10320
2733	 E6	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xE3001602720338008600000099000E02B400000165FFE000E3001702D10320
- stack 0: 0xE0
2734	 E8	SHR		 	 
- stack 1: 0x670
- stack 0: 0xE30016
2735	 E9	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xE30016
- stack 0: 0xFFFF
2736	 EC	AND		 	 
- stack 1: 0x670
- stack 0: 0x16
2737	 ED	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x16
- stack 0: 0x1
2738	 EF	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x16
2739	 F0	PUSH2	0380	 	 
- stack 2: 0x670
- stack 1: 0x16
- stack 0: 0x380
2740	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x670
2741	 F4	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
2742	 F6	ADD		 	 
- stack 0: 0x674
2743	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
2744	 F8	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2720338008600000099000E02B400000165FFE000E3001702D1032003130007
2745	 F9	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x2720338008600000099000E02B400000165FFE000E3001702D1032003130007
- stack 0: 0xF0
2746	 FB	SHR		 	 
- stack 1: 0x674
- stack 0: 0x272
2747	 FC	JUMP		 	 
- stack 0: 0x674
2748	 272	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x674
2749	 273	PUSH2	0020	 	 
- stack 1: 0x674
- stack 0: 0x20
2750	 276	MLOAD		 	  ;; # read from x1
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2751	 277	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
2752	 27C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0xFF000000
2753	 27D	PUSH2	03A0	 	 
- stack 2: 0x674
- stack 1: 0xFF000000
- stack 0: 0x3A0
2754	 280	MLOAD		 	  ;; # read from x29
- stack 2: 0x674
- stack 1: 0xFF000000
- stack 0: 0xFF000000
2755	 281	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
2756	 286	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0xFF000000
- stack 0: 0xFF000000
2757	 287	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
2758	 288	PUSH2	0290	 ;; _neq_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x290
2759	 28B	JUMPI		 	 
- stack 0: 0x674
2760	 28C	PUSH2	02AA	 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 1: 0x674
- stack 0: 0x2AA
2761	 28F	JUMP		 	 
- stack 0: 0x674
2762	 2AA	JUMPDEST		 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 0: 0x674
2763	 2AB	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
2764	 2AD	ADD		 	 
- stack 0: 0x678
2765	 2AE	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
2766	 2AF	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x8600000099000E02B400000165FFE000E3001702D1032003130007032D0000
2767	 2B0	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x8600000099000E02B400000165FFE000E3001702D1032003130007032D0000
- stack 0: 0xF0
2768	 2B2	SHR		 	 
- stack 1: 0x678
- stack 0: 0x86
2769	 2B3	JUMP		 	 
- stack 0: 0x678
2770	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x678
2771	 87	PUSH4	80000000	 	 
- stack 1: 0x678
- stack 0: 0x80000000
2772	 8C	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x80000000
- stack 0: 0x20
2773	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x678
2774	 90	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
2775	 92	ADD		 	 
- stack 0: 0x67C
2776	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
2777	 94	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x99000E02B400000165FFE000E3001702D1032003130007032D000001970000
2778	 95	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x99000E02B400000165FFE000E3001702D1032003130007032D000001970000
- stack 0: 0xF0
2779	 97	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x99
2780	 98	JUMP		 	 
- stack 0: 0x67C
2781	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x67C
2782	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
2783	 9B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x99000E02B400000165FFE000E3001702D1032003130007032D000001970000
2784	 9C	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x99000E02B400000165FFE000E3001702D1032003130007032D000001970000
- stack 0: 0xE0
2785	 9E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x99000E
2786	 9F	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x99000E
- stack 0: 0xFFFF
2787	 A2	AND		 	 
- stack 1: 0x67C
- stack 0: 0xE
2788	 A3	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0xE
- stack 0: 0x1
2789	 A5	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0xE
2790	 A6	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0xE
- stack 0: 0x40
2791	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
2792	 AA	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
2793	 AC	ADD		 	 
- stack 0: 0x680
2794	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
2795	 AE	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2B400000165FFE000E3001702D1032003130007032D00000197000000E30018
2796	 AF	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x2B400000165FFE000E3001702D1032003130007032D00000197000000E30018
- stack 0: 0xF0
2797	 B1	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2B4
2798	 B2	JUMP		 	 
- stack 0: 0x680
2799	 2B4	JUMPDEST		 ;; __riscvimpl_SRA_2_1_2	  ;; # instr: sra sp,ra,sp(ignore imm)
- stack 0: 0x680
2800	 2B5	PUSH2	0020	 	 
- stack 1: 0x680
- stack 0: 0x20
2801	 2B8	MLOAD		 	  ;; # read from x1
- stack 1: 0x680
- stack 0: 0x80000000
2802	 2B9	PUSH1	03	 	 
- stack 2: 0x680
- stack 1: 0x80000000
- stack 0: 0x3
2803	 2BB	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
2804	 2BC	PUSH2	0040	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
2805	 2BF	MLOAD		 	  ;; # read from x2
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
2806	 2C0	PUSH1	1F	 	 
- stack 3: 0x680
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
2807	 2C2	AND		 	  ;; # mask to 5 bits
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
2808	 2C3	SAR		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2809	 2C4	PUSH2	0040	 	 
- stack 2: 0x680
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x40
2810	 2C7	MSTORE		 	  ;; # store to x2
- stack 0: 0x680
2811	 2C8	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
2812	 2CA	ADD		 	 
- stack 0: 0x684
2813	 2CB	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
2814	 2CC	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x165FFE000E3001702D1032003130007032D00000197000000E300180272030C
2815	 2CD	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x165FFE000E3001702D1032003130007032D00000197000000E300180272030C
- stack 0: 0xF0
2816	 2CF	SHR		 	 
- stack 1: 0x684
- stack 0: 0x165
2817	 2D0	JUMP		 	 
- stack 0: 0x684
2818	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x684
2819	 166	PUSH4	fffe0000	 	 
- stack 1: 0x684
- stack 0: 0xFFFE0000
2820	 16B	PUSH2	03A0	 	 
- stack 2: 0x684
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
2821	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x684
2822	 16F	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
2823	 171	ADD		 	 
- stack 0: 0x688
2824	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
2825	 173	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xE3001702D1032003130007032D00000197000000E300180272030C034A0000
2826	 174	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0xE3001702D1032003130007032D00000197000000E300180272030C034A0000
- stack 0: 0xF0
2827	 176	SHR		 	 
- stack 1: 0x688
- stack 0: 0xE3
2828	 177	JUMP		 	 
- stack 0: 0x688
2829	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x688
2830	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
2831	 E5	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0xE3001702D1032003130007032D00000197000000E300180272030C034A0000
2832	 E6	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0xE3001702D1032003130007032D00000197000000E300180272030C034A0000
- stack 0: 0xE0
2833	 E8	SHR		 	 
- stack 1: 0x688
- stack 0: 0xE30017
2834	 E9	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0xE30017
- stack 0: 0xFFFF
2835	 EC	AND		 	 
- stack 1: 0x688
- stack 0: 0x17
2836	 ED	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x17
- stack 0: 0x1
2837	 EF	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x17
2838	 F0	PUSH2	0380	 	 
- stack 2: 0x688
- stack 1: 0x17
- stack 0: 0x380
2839	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x688
2840	 F4	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
2841	 F6	ADD		 	 
- stack 0: 0x68C
2842	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
2843	 F8	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x2D1032003130007032D00000197000000E300180272030C034A000000860000
2844	 F9	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x2D1032003130007032D00000197000000E300180272030C034A000000860000
- stack 0: 0xF0
2845	 FB	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x2D1
2846	 FC	JUMP		 	 
- stack 0: 0x68C
2847	 2D1	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x68C
2848	 2D2	PUSH2	0040	 	 
- stack 1: 0x68C
- stack 0: 0x40
2849	 2D5	MLOAD		 	  ;; # read from x2
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2850	 2D6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
2851	 2DB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0xFFFE0000
2852	 2DC	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
2853	 2DF	MLOAD		 	  ;; # read from x29
- stack 2: 0x68C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
2854	 2E0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x68C
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
2855	 2E5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x68C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
2856	 2E6	SUB		 	 
- stack 1: 0x68C
- stack 0: 0x0
2857	 2E7	PUSH2	02EF	 ;; _neq_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x2EF
2858	 2EA	JUMPI		 	 
- stack 0: 0x68C
2859	 2EB	PUSH2	0309	 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 1: 0x68C
- stack 0: 0x309
2860	 2EE	JUMP		 	 
- stack 0: 0x68C
2861	 309	JUMPDEST		 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 0: 0x68C
2862	 30A	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
2863	 30C	ADD		 	 
- stack 0: 0x690
2864	 30D	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
2865	 30E	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3130007032D00000197000000E300180272030C034A00000086000000990007
2866	 30F	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3130007032D00000197000000E300180272030C034A00000086000000990007
- stack 0: 0xF0
2867	 311	SHR		 	 
- stack 1: 0x690
- stack 0: 0x313
2868	 312	JUMP		 	 
- stack 0: 0x690
2869	 313	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,7(ignore imm)
- stack 0: 0x690
2870	 314	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
2871	 315	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3130007032D00000197000000E300180272030C034A00000086000000990007
2872	 316	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3130007032D00000197000000E300180272030C034A00000086000000990007
- stack 0: 0xE0
2873	 318	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3130007
2874	 319	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3130007
- stack 0: 0xFFFF
2875	 31C	AND		 	 
- stack 1: 0x690
- stack 0: 0x7
2876	 31D	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x7
- stack 0: 0x1
2877	 31F	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x7
2878	 320	PUSH2	0020	 	 
- stack 2: 0x690
- stack 1: 0x7
- stack 0: 0x20
2879	 323	MSTORE		 	  ;; # store to x1
- stack 0: 0x690
2880	 324	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
2881	 326	ADD		 	 
- stack 0: 0x694
2882	 327	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
2883	 328	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x32D00000197000000E300180272030C034A0000008600000099000700B30000
2884	 329	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x32D00000197000000E300180272030C034A0000008600000099000700B30000
- stack 0: 0xF0
2885	 32B	SHR		 	 
- stack 1: 0x694
- stack 0: 0x32D
2886	 32C	JUMP		 	 
- stack 0: 0x694
2887	 32D	JUMPDEST		 ;; __riscvimpl_SRA_1_1_1	  ;; # instr: sra ra,ra,ra(ignore imm)
- stack 0: 0x694
2888	 32E	PUSH2	0020	 	 
- stack 1: 0x694
- stack 0: 0x20
2889	 331	MLOAD		 	  ;; # read from x1
- stack 1: 0x694
- stack 0: 0x7
2890	 332	PUSH1	03	 	 
- stack 2: 0x694
- stack 1: 0x7
- stack 0: 0x3
2891	 334	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x7
2892	 335	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0x7
- stack 0: 0x20
2893	 338	MLOAD		 	  ;; # read from x1
- stack 2: 0x694
- stack 1: 0x7
- stack 0: 0x7
2894	 339	PUSH1	1F	 	 
- stack 3: 0x694
- stack 2: 0x7
- stack 1: 0x7
- stack 0: 0x1F
2895	 33B	AND		 	  ;; # mask to 5 bits
- stack 2: 0x694
- stack 1: 0x7
- stack 0: 0x7
2896	 33C	SAR		 	 
- stack 1: 0x694
- stack 0: 0x0
2897	 33D	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x20
2898	 340	MSTORE		 	  ;; # store to x1
- stack 0: 0x694
2899	 341	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
2900	 343	ADD		 	 
- stack 0: 0x698
2901	 344	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
2902	 345	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x197000000E300180272030C034A0000008600000099000700B3000003640000
2903	 346	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x197000000E300180272030C034A0000008600000099000700B3000003640000
- stack 0: 0xF0
2904	 348	SHR		 	 
- stack 1: 0x698
- stack 0: 0x197
2905	 349	JUMP		 	 
- stack 0: 0x698
2906	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x698
2907	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
2908	 199	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x197000000E300180272030C034A0000008600000099000700B3000003640000
2909	 19A	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x197000000E300180272030C034A0000008600000099000700B3000003640000
- stack 0: 0xE0
2910	 19C	SHR		 	 
- stack 1: 0x698
- stack 0: 0x1970000
2911	 19D	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x1970000
- stack 0: 0xFFFF
2912	 1A0	AND		 	 
- stack 1: 0x698
- stack 0: 0x0
2913	 1A1	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x1
2914	 1A3	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x0
2915	 1A4	PUSH2	03A0	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x3A0
2916	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x698
2917	 1A8	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
2918	 1AA	ADD		 	 
- stack 0: 0x69C
2919	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
2920	 1AC	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xE300180272030C034A0000008600000099000700B300000364000003830001
2921	 1AD	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xE300180272030C034A0000008600000099000700B300000364000003830001
- stack 0: 0xF0
2922	 1AF	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xE3
2923	 1B0	JUMP		 	 
- stack 0: 0x69C
2924	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x69C
2925	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
2926	 E5	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xE300180272030C034A0000008600000099000700B300000364000003830001
2927	 E6	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0xE300180272030C034A0000008600000099000700B300000364000003830001
- stack 0: 0xE0
2928	 E8	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xE30018
2929	 E9	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0xE30018
- stack 0: 0xFFFF
2930	 EC	AND		 	 
- stack 1: 0x69C
- stack 0: 0x18
2931	 ED	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x18
- stack 0: 0x1
2932	 EF	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x18
2933	 F0	PUSH2	0380	 	 
- stack 2: 0x69C
- stack 1: 0x18
- stack 0: 0x380
2934	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x69C
2935	 F4	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
2936	 F6	ADD		 	 
- stack 0: 0x6A0
2937	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
2938	 F8	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x272030C034A0000008600000099000700B30000036400000383000103A20002
2939	 F9	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x272030C034A0000008600000099000700B30000036400000383000103A20002
- stack 0: 0xF0
2940	 FB	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x272
2941	 FC	JUMP		 	 
- stack 0: 0x6A0
2942	 272	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x6A0
2943	 273	PUSH2	0020	 	 
- stack 1: 0x6A0
- stack 0: 0x20
2944	 276	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A0
- stack 0: 0x0
2945	 277	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2946	 27C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x0
2947	 27D	PUSH2	03A0	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3A0
2948	 280	MLOAD		 	  ;; # read from x29
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x0
2949	 281	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2950	 286	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x0
2951	 287	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
2952	 288	PUSH2	0290	 ;; _neq_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x290
2953	 28B	JUMPI		 	 
- stack 0: 0x6A0
2954	 28C	PUSH2	02AA	 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 1: 0x6A0
- stack 0: 0x2AA
2955	 28F	JUMP		 	 
- stack 0: 0x6A0
2956	 2AA	JUMPDEST		 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 0: 0x6A0
2957	 2AB	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
2958	 2AD	ADD		 	 
- stack 0: 0x6A4
2959	 2AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
2960	 2AF	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x34A0000008600000099000700B30000036400000383000103A2000203BCFFE8
2961	 2B0	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x34A0000008600000099000700B30000036400000383000103A2000203BCFFE8
- stack 0: 0xF0
2962	 2B2	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x34A
2963	 2B3	JUMP		 	 
- stack 0: 0x6A4
2964	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6A4
2965	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
2966	 34C	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x34A0000008600000099000700B30000036400000383000103A2000203BCFFE8
2967	 34D	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x34A0000008600000099000700B30000036400000383000103A2000203BCFFE8
- stack 0: 0xE0
2968	 34F	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x34A0000
2969	 350	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x34A0000
- stack 0: 0xFFFF
2970	 353	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
2971	 354	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
2972	 356	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
2973	 357	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x80
2974	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
2975	 35B	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
2976	 35D	ADD		 	 
- stack 0: 0x6A8
2977	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
2978	 35F	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x8600000099000700B30000036400000383000103A2000203BCFFE80152F000
2979	 360	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x8600000099000700B30000036400000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
2980	 362	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86
2981	 363	JUMP		 	 
- stack 0: 0x6A8
2982	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x6A8
2983	 87	PUSH4	80000000	 	 
- stack 1: 0x6A8
- stack 0: 0x80000000
2984	 8C	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0x80000000
- stack 0: 0x20
2985	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
2986	 90	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
2987	 92	ADD		 	 
- stack 0: 0x6AC
2988	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
2989	 94	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
2990	 95	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
- stack 0: 0xF0
2991	 97	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x99
2992	 98	JUMP		 	 
- stack 0: 0x6AC
2993	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6AC
2994	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
2995	 9B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
2996	 9C	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
- stack 0: 0xE0
2997	 9E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x990007
2998	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x990007
- stack 0: 0xFFFF
2999	 A2	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x7
3000	 A3	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x7
- stack 0: 0x1
3001	 A5	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x7
3002	 A6	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0x7
- stack 0: 0x40
3003	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
3004	 AA	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3005	 AC	ADD		 	 
- stack 0: 0x6B0
3006	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3007	 AE	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xB30000036400000383000103A2000203BCFFE80152F00000E3001903FE02E0
3008	 AF	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xB30000036400000383000103A2000203BCFFE80152F00000E3001903FE02E0
- stack 0: 0xF0
3009	 B1	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xB3
3010	 B2	JUMP		 	 
- stack 0: 0x6B0
3011	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x6B0
3012	 B4	PUSH2	0020	 	 
- stack 1: 0x6B0
- stack 0: 0x20
3013	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B0
- stack 0: 0x80000000
3014	 B8	PUSH1	03	 	 
- stack 2: 0x6B0
- stack 1: 0x80000000
- stack 0: 0x3
3015	 BA	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3016	 BB	PUSH2	0040	 	 
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3017	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
3018	 BF	PUSH1	1F	 	 
- stack 3: 0x6B0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
3019	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
3020	 C2	SAR		 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3021	 C3	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
3022	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
3023	 C7	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3024	 C9	ADD		 	 
- stack 0: 0x6B4
3025	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3026	 CB	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
3027	 CC	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
- stack 0: 0xF0
3028	 CE	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x364
3029	 CF	JUMP		 	 
- stack 0: 0x6B4
3030	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6B4
3031	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3032	 366	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
3033	 367	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
- stack 0: 0xE0
3034	 369	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3640000
3035	 36A	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3640000
- stack 0: 0xFFFF
3036	 36D	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3037	 36E	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
3038	 370	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3039	 371	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x60
3040	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3041	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x6B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3042	 376	PUSH2	00C0	 	 
- stack 2: 0x6B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xC0
3043	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x6B4
3044	 37A	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3045	 37C	ADD		 	 
- stack 0: 0x6B8
3046	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3047	 37E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
3048	 37F	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
- stack 0: 0xF0
3049	 381	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x383
3050	 382	JUMP		 	 
- stack 0: 0x6B8
3051	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3052	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3053	 385	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
3054	 386	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
- stack 0: 0xE0
3055	 388	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3830001
3056	 389	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3830001
- stack 0: 0xFFFF
3057	 38C	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3058	 38D	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3059	 38F	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3060	 390	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3061	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x0
3062	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x1
3063	 395	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3064	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3065	 399	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3066	 39B	ADD		 	 
- stack 0: 0x6BC
3067	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3068	 39D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
3069	 39E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
- stack 0: 0xF0
3070	 3A0	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2
3071	 3A1	JUMP		 	 
- stack 0: 0x6BC
3072	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3073	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3074	 3A4	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
3075	 3A5	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
- stack 0: 0xE0
3076	 3A7	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3A20002
3077	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3078	 3AB	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3079	 3AC	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3080	 3AE	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3081	 3AF	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3082	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3083	 3B3	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3084	 3B5	ADD		 	 
- stack 0: 0x6C0
3085	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3086	 3B7	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
3087	 3B8	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
- stack 0: 0xF0
3088	 3BA	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3BC
3089	 3BB	JUMP		 	 
- stack 0: 0x6C0
3090	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3091	 3BD	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3092	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x1
3093	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3094	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x1
3095	 3C7	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0xA0
3096	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3097	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3098	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x2
3099	 3D1	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x1
3100	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x6C0
- stack 1: 0x1
- stack 0: 0x3DA
3101	 3D5	JUMPI		 	 
- stack 0: 0x6C0
3102	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x6C0
3103	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3104	 3DC	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
3105	 3DD	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
- stack 0: 0xE0
3106	 3DF	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3BCFFE8
3107	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x3BCFFE8
- stack 0: 0xFFFF
3108	 3E3	AND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFE8
3109	 3E4	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0xFFE8
- stack 0: 0x1
3110	 3E6	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3111	 3E7	ADD		 	 
- stack 0: 0x6A8
3112	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFF
3113	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A8
3114	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3115	 3EF	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x8600000099000700B30000036400000383000103A2000203BCFFE80152F000
3116	 3F0	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x8600000099000700B30000036400000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
3117	 3F2	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x86
3118	 3F3	JUMP		 	 
- stack 0: 0x6A8
3119	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x6A8
3120	 87	PUSH4	80000000	 	 
- stack 1: 0x6A8
- stack 0: 0x80000000
3121	 8C	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0x80000000
- stack 0: 0x20
3122	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
3123	 90	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3124	 92	ADD		 	 
- stack 0: 0x6AC
3125	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3126	 94	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
3127	 95	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
- stack 0: 0xF0
3128	 97	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x99
3129	 98	JUMP		 	 
- stack 0: 0x6AC
3130	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6AC
3131	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3132	 9B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
3133	 9C	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x99000700B30000036400000383000103A2000203BCFFE80152F00000E30019
- stack 0: 0xE0
3134	 9E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x990007
3135	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x990007
- stack 0: 0xFFFF
3136	 A2	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x7
3137	 A3	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x7
- stack 0: 0x1
3138	 A5	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x7
3139	 A6	PUSH2	0040	 	 
- stack 2: 0x6AC
- stack 1: 0x7
- stack 0: 0x40
3140	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6AC
3141	 AA	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3142	 AC	ADD		 	 
- stack 0: 0x6B0
3143	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3144	 AE	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xB30000036400000383000103A2000203BCFFE80152F00000E3001903FE02E0
3145	 AF	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xB30000036400000383000103A2000203BCFFE80152F00000E3001903FE02E0
- stack 0: 0xF0
3146	 B1	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xB3
3147	 B2	JUMP		 	 
- stack 0: 0x6B0
3148	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x6B0
3149	 B4	PUSH2	0020	 	 
- stack 1: 0x6B0
- stack 0: 0x20
3150	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B0
- stack 0: 0x80000000
3151	 B8	PUSH1	03	 	 
- stack 2: 0x6B0
- stack 1: 0x80000000
- stack 0: 0x3
3152	 BA	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3153	 BB	PUSH2	0040	 	 
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3154	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
3155	 BF	PUSH1	1F	 	 
- stack 3: 0x6B0
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
3156	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
3157	 C2	SAR		 	 
- stack 1: 0x6B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3158	 C3	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
3159	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
3160	 C7	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3161	 C9	ADD		 	 
- stack 0: 0x6B4
3162	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3163	 CB	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
3164	 CC	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
- stack 0: 0xF0
3165	 CE	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x364
3166	 CF	JUMP		 	 
- stack 0: 0x6B4
3167	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6B4
3168	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3169	 366	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
3170	 367	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x36400000383000103A2000203BCFFE80152F00000E3001903FE02E0034A0000
- stack 0: 0xE0
3171	 369	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3640000
3172	 36A	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3640000
- stack 0: 0xFFFF
3173	 36D	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3174	 36E	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
3175	 370	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3176	 371	PUSH2	0060	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x60
3177	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3178	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x6B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3179	 376	PUSH2	00C0	 	 
- stack 2: 0x6B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xC0
3180	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x6B4
3181	 37A	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3182	 37C	ADD		 	 
- stack 0: 0x6B8
3183	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3184	 37E	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
3185	 37F	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
- stack 0: 0xF0
3186	 381	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x383
3187	 382	JUMP		 	 
- stack 0: 0x6B8
3188	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B8
3189	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3190	 385	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
3191	 386	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001903FE02E0034A000000860000
- stack 0: 0xE0
3192	 388	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3830001
3193	 389	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3830001
- stack 0: 0xFFFF
3194	 38C	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3195	 38D	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3196	 38F	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3197	 390	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x80
3198	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x1
3199	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B8
- stack 0: 0x2
3200	 395	PUSH2	0080	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x80
3201	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B8
3202	 399	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3203	 39B	ADD		 	 
- stack 0: 0x6BC
3204	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3205	 39D	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
3206	 39E	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
- stack 0: 0xF0
3207	 3A0	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2
3208	 3A1	JUMP		 	 
- stack 0: 0x6BC
3209	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6BC
3210	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3211	 3A4	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
3212	 3A5	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3A2000203BCFFE80152F00000E3001903FE02E0034A0000008600000099000E
- stack 0: 0xE0
3213	 3A7	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3A20002
3214	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3215	 3AB	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3216	 3AC	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x1
3217	 3AE	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x2
3218	 3AF	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
3219	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x6BC
3220	 3B3	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3221	 3B5	ADD		 	 
- stack 0: 0x6C0
3222	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3223	 3B7	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
3224	 3B8	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3BCFFE80152F00000E3001903FE02E0034A0000008600000099000E00B30000
- stack 0: 0xF0
3225	 3BA	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3BC
3226	 3BB	JUMP		 	 
- stack 0: 0x6C0
3227	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6C0
3228	 3BD	PUSH2	0080	 	 
- stack 1: 0x6C0
- stack 0: 0x80
3229	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x6C0
- stack 0: 0x2
3230	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3231	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x2
3232	 3C7	PUSH2	00A0	 	 
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0xA0
3233	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3234	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3235	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x2
- stack 0: 0x2
3236	 3D1	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3237	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x3DA
3238	 3D5	JUMPI		 	 
- stack 0: 0x6C0
3239	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x6C0
- stack 0: 0x3F4
3240	 3D9	JUMP		 	 
- stack 0: 0x6C0
3241	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x6C0
3242	 3F5	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
3243	 3F7	ADD		 	 
- stack 0: 0x6C4
3244	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
3245	 3F9	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x152F00000E3001903FE02E0034A0000008600000099000E00B3000004400000
3246	 3FA	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x152F00000E3001903FE02E0034A0000008600000099000E00B3000004400000
- stack 0: 0xF0
3247	 3FC	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x152
3248	 3FD	JUMP		 	 
- stack 0: 0x6C4
3249	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x6C4
3250	 153	PUSH4	ff000000	 	 
- stack 1: 0x6C4
- stack 0: 0xFF000000
3251	 158	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xFF000000
- stack 0: 0x3A0
3252	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
3253	 15C	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
3254	 15E	ADD		 	 
- stack 0: 0x6C8
3255	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
3256	 160	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xE3001903FE02E0034A0000008600000099000E00B300000440000003640000
3257	 161	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0xE3001903FE02E0034A0000008600000099000E00B300000440000003640000
- stack 0: 0xF0
3258	 163	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xE3
3259	 164	JUMP		 	 
- stack 0: 0x6C8
3260	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
3261	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
3262	 E5	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0xE3001903FE02E0034A0000008600000099000E00B300000440000003640000
3263	 E6	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0xE3001903FE02E0034A0000008600000099000E00B300000440000003640000
- stack 0: 0xE0
3264	 E8	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0xE30019
3265	 E9	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0xE30019
- stack 0: 0xFFFF
3266	 EC	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x19
3267	 ED	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x19
- stack 0: 0x1
3268	 EF	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x19
3269	 F0	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x19
- stack 0: 0x380
3270	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
3271	 F4	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
3272	 F6	ADD		 	 
- stack 0: 0x6CC
3273	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3274	 F8	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x3FE02E0034A0000008600000099000E00B30000044000000364000003830001
3275	 F9	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x3FE02E0034A0000008600000099000E00B30000044000000364000003830001
- stack 0: 0xF0
3276	 FB	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x3FE
3277	 FC	JUMP		 	 
- stack 0: 0x6CC
3278	 3FE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x6CC
3279	 3FF	PUSH2	00C0	 	 
- stack 1: 0x6CC
- stack 0: 0xC0
3280	 402	MLOAD		 	  ;; # read from x6
- stack 1: 0x6CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3281	 403	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
3282	 408	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0xFF000000
3283	 409	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xFF000000
- stack 0: 0x3A0
3284	 40C	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0xFF000000
- stack 0: 0xFF000000
3285	 40D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
3286	 412	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0xFF000000
- stack 0: 0xFF000000
3287	 413	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
3288	 414	PUSH2	041C	 ;; _neq_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x41C
3289	 417	JUMPI		 	 
- stack 0: 0x6CC
3290	 418	PUSH2	0436	 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 1: 0x6CC
- stack 0: 0x436
3291	 41B	JUMP		 	 
- stack 0: 0x6CC
3292	 436	JUMPDEST		 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 0: 0x6CC
3293	 437	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3294	 439	ADD		 	 
- stack 0: 0x6D0
3295	 43A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3296	 43B	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x34A0000008600000099000E00B3000004400000036400000383000103A20002
3297	 43C	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x34A0000008600000099000E00B3000004400000036400000383000103A20002
- stack 0: 0xF0
3298	 43E	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x34A
3299	 43F	JUMP		 	 
- stack 0: 0x6D0
3300	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D0
3301	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3302	 34C	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x34A0000008600000099000E00B3000004400000036400000383000103A20002
3303	 34D	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x34A0000008600000099000E00B3000004400000036400000383000103A20002
- stack 0: 0xE0
3304	 34F	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x34A0000
3305	 350	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x34A0000
- stack 0: 0xFFFF
3306	 353	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3307	 354	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
3308	 356	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
3309	 357	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x80
3310	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
3311	 35B	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
3312	 35D	ADD		 	 
- stack 0: 0x6D4
3313	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3314	 35F	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x8600000099000E00B3000004400000036400000383000103A2000203BCFFE4
3315	 360	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x8600000099000E00B3000004400000036400000383000103A2000203BCFFE4
- stack 0: 0xF0
3316	 362	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
3317	 363	JUMP		 	 
- stack 0: 0x6D4
3318	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x6D4
3319	 87	PUSH4	80000000	 	 
- stack 1: 0x6D4
- stack 0: 0x80000000
3320	 8C	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0x80000000
- stack 0: 0x20
3321	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
3322	 90	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3323	 92	ADD		 	 
- stack 0: 0x6D8
3324	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3325	 94	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
3326	 95	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
3327	 97	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
3328	 98	JUMP		 	 
- stack 0: 0x6D8
3329	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
3330	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3331	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
3332	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
3333	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E
3334	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E
- stack 0: 0xFFFF
3335	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xE
3336	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xE
- stack 0: 0x1
3337	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xE
3338	 A6	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0xE
- stack 0: 0x40
3339	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
3340	 AA	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3341	 AC	ADD		 	 
- stack 0: 0x6DC
3342	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3343	 AE	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xB3000004400000036400000383000103A2000203BCFFE40165FFE000E3001A
3344	 AF	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0xB3000004400000036400000383000103A2000203BCFFE40165FFE000E3001A
- stack 0: 0xF0
3345	 B1	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xB3
3346	 B2	JUMP		 	 
- stack 0: 0x6DC
3347	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x6DC
3348	 B4	PUSH2	0020	 	 
- stack 1: 0x6DC
- stack 0: 0x20
3349	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6DC
- stack 0: 0x80000000
3350	 B8	PUSH1	03	 	 
- stack 2: 0x6DC
- stack 1: 0x80000000
- stack 0: 0x3
3351	 BA	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3352	 BB	PUSH2	0040	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3353	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3354	 BF	PUSH1	1F	 	 
- stack 3: 0x6DC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
3355	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3356	 C2	SAR		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3357	 C3	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
3358	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x6DC
3359	 C7	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3360	 C9	ADD		 	 
- stack 0: 0x6E0
3361	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3362	 CB	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
3363	 CC	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
- stack 0: 0xF0
3364	 CE	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x440
3365	 CF	JUMP		 	 
- stack 0: 0x6E0
3366	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
3367	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3368	 442	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
3369	 443	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
- stack 0: 0xE0
3370	 445	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000
3371	 446	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000
- stack 0: 0xFFFF
3372	 449	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3373	 44A	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
3374	 44C	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3375	 44D	POP		 	 
- stack 0: 0x6E0
3376	 44E	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3377	 450	ADD		 	 
- stack 0: 0x6E4
3378	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3379	 452	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
3380	 453	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
- stack 0: 0xF0
3381	 455	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x364
3382	 456	JUMP		 	 
- stack 0: 0x6E4
3383	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6E4
3384	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3385	 366	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
3386	 367	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
- stack 0: 0xE0
3387	 369	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3640000
3388	 36A	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3640000
- stack 0: 0xFFFF
3389	 36D	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3390	 36E	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
3391	 370	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3392	 371	PUSH2	0060	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x60
3393	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3394	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3395	 376	PUSH2	00C0	 	 
- stack 2: 0x6E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xC0
3396	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x6E4
3397	 37A	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3398	 37C	ADD		 	 
- stack 0: 0x6E8
3399	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3400	 37E	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
3401	 37F	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
- stack 0: 0xF0
3402	 381	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x383
3403	 382	JUMP		 	 
- stack 0: 0x6E8
3404	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E8
3405	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
3406	 385	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
3407	 386	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
- stack 0: 0xE0
3408	 388	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3830001
3409	 389	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3830001
- stack 0: 0xFFFF
3410	 38C	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
3411	 38D	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
3412	 38F	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
3413	 390	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
3414	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x0
3415	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E8
- stack 0: 0x1
3416	 395	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
3417	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E8
3418	 399	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
3419	 39B	ADD		 	 
- stack 0: 0x6EC
3420	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
3421	 39D	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
3422	 39E	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
- stack 0: 0xF0
3423	 3A0	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2
3424	 3A1	JUMP		 	 
- stack 0: 0x6EC
3425	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6EC
3426	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
3427	 3A4	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
3428	 3A5	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
- stack 0: 0xE0
3429	 3A7	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3A20002
3430	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3431	 3AB	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
3432	 3AC	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x1
3433	 3AE	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
3434	 3AF	PUSH2	00A0	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0xA0
3435	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x6EC
3436	 3B3	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
3437	 3B5	ADD		 	 
- stack 0: 0x6F0
3438	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
3439	 3B7	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
3440	 3B8	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
- stack 0: 0xF0
3441	 3BA	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3BC
3442	 3BB	JUMP		 	 
- stack 0: 0x6F0
3443	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F0
3444	 3BD	PUSH2	0080	 	 
- stack 1: 0x6F0
- stack 0: 0x80
3445	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F0
- stack 0: 0x1
3446	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3447	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x1
3448	 3C7	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0xA0
3449	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x2
3450	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3451	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x2
3452	 3D1	SUB		 	 
- stack 1: 0x6F0
- stack 0: 0x1
3453	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x3DA
3454	 3D5	JUMPI		 	 
- stack 0: 0x6F0
3455	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x6F0
3456	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
3457	 3DC	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
3458	 3DD	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
- stack 0: 0xE0
3459	 3DF	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3BCFFE4
3460	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
3461	 3E3	AND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFE4
3462	 3E4	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0xFFE4
- stack 0: 0x1
3463	 3E6	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3464	 3E7	ADD		 	 
- stack 0: 0x6D4
3465	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
3466	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D4
3467	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3468	 3EF	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x8600000099000E00B3000004400000036400000383000103A2000203BCFFE4
3469	 3F0	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x8600000099000E00B3000004400000036400000383000103A2000203BCFFE4
- stack 0: 0xF0
3470	 3F2	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x86
3471	 3F3	JUMP		 	 
- stack 0: 0x6D4
3472	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x6D4
3473	 87	PUSH4	80000000	 	 
- stack 1: 0x6D4
- stack 0: 0x80000000
3474	 8C	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0x80000000
- stack 0: 0x20
3475	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
3476	 90	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3477	 92	ADD		 	 
- stack 0: 0x6D8
3478	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3479	 94	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
3480	 95	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
3481	 97	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
3482	 98	JUMP		 	 
- stack 0: 0x6D8
3483	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D8
3484	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3485	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
3486	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E00B3000004400000036400000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
3487	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99000E
3488	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x99000E
- stack 0: 0xFFFF
3489	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xE
3490	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xE
- stack 0: 0x1
3491	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xE
3492	 A6	PUSH2	0040	 	 
- stack 2: 0x6D8
- stack 1: 0xE
- stack 0: 0x40
3493	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D8
3494	 AA	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3495	 AC	ADD		 	 
- stack 0: 0x6DC
3496	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3497	 AE	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0xB3000004400000036400000383000103A2000203BCFFE40165FFE000E3001A
3498	 AF	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0xB3000004400000036400000383000103A2000203BCFFE40165FFE000E3001A
- stack 0: 0xF0
3499	 B1	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0xB3
3500	 B2	JUMP		 	 
- stack 0: 0x6DC
3501	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x6DC
3502	 B4	PUSH2	0020	 	 
- stack 1: 0x6DC
- stack 0: 0x20
3503	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6DC
- stack 0: 0x80000000
3504	 B8	PUSH1	03	 	 
- stack 2: 0x6DC
- stack 1: 0x80000000
- stack 0: 0x3
3505	 BA	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3506	 BB	PUSH2	0040	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3507	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3508	 BF	PUSH1	1F	 	 
- stack 3: 0x6DC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
3509	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3510	 C2	SAR		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3511	 C3	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
3512	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x6DC
3513	 C7	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3514	 C9	ADD		 	 
- stack 0: 0x6E0
3515	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3516	 CB	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
3517	 CC	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
- stack 0: 0xF0
3518	 CE	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x440
3519	 CF	JUMP		 	 
- stack 0: 0x6E0
3520	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
3521	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3522	 442	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
3523	 443	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000036400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0
- stack 0: 0xE0
3524	 445	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x4400000
3525	 446	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x4400000
- stack 0: 0xFFFF
3526	 449	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3527	 44A	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
3528	 44C	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
3529	 44D	POP		 	 
- stack 0: 0x6E0
3530	 44E	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3531	 450	ADD		 	 
- stack 0: 0x6E4
3532	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3533	 452	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
3534	 453	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
- stack 0: 0xF0
3535	 455	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x364
3536	 456	JUMP		 	 
- stack 0: 0x6E4
3537	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6E4
3538	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3539	 366	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
3540	 367	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x36400000383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A0000
- stack 0: 0xE0
3541	 369	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3640000
3542	 36A	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3640000
- stack 0: 0xFFFF
3543	 36D	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3544	 36E	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
3545	 370	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
3546	 371	PUSH2	0060	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x60
3547	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3548	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3549	 376	PUSH2	00C0	 	 
- stack 2: 0x6E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xC0
3550	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x6E4
3551	 37A	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3552	 37C	ADD		 	 
- stack 0: 0x6E8
3553	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3554	 37E	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
3555	 37F	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
- stack 0: 0xF0
3556	 381	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x383
3557	 382	JUMP		 	 
- stack 0: 0x6E8
3558	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E8
3559	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
3560	 385	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
3561	 386	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3001A03FE02B0034A000000860000
- stack 0: 0xE0
3562	 388	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3830001
3563	 389	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3830001
- stack 0: 0xFFFF
3564	 38C	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
3565	 38D	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
3566	 38F	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x1
3567	 390	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x80
3568	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x1
3569	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E8
- stack 0: 0x2
3570	 395	PUSH2	0080	 	 
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0x80
3571	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E8
3572	 399	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
3573	 39B	ADD		 	 
- stack 0: 0x6EC
3574	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
3575	 39D	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
3576	 39E	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
- stack 0: 0xF0
3577	 3A0	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2
3578	 3A1	JUMP		 	 
- stack 0: 0x6EC
3579	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6EC
3580	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
3581	 3A4	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
3582	 3A5	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x3A2000203BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F
- stack 0: 0xE0
3583	 3A7	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x3A20002
3584	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3585	 3AB	AND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
3586	 3AC	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0x1
3587	 3AE	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0x2
3588	 3AF	PUSH2	00A0	 	 
- stack 2: 0x6EC
- stack 1: 0x2
- stack 0: 0xA0
3589	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x6EC
3590	 3B3	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
3591	 3B5	ADD		 	 
- stack 0: 0x6F0
3592	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
3593	 3B7	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
3594	 3B8	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3BCFFE40165FFE000E3001A03FE02B0034A0000008600000099001F00B30000
- stack 0: 0xF0
3595	 3BA	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3BC
3596	 3BB	JUMP		 	 
- stack 0: 0x6F0
3597	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6F0
3598	 3BD	PUSH2	0080	 	 
- stack 1: 0x6F0
- stack 0: 0x80
3599	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F0
- stack 0: 0x2
3600	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3601	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F0
- stack 0: 0x2
3602	 3C7	PUSH2	00A0	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0xA0
3603	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x2
3604	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3605	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x2
3606	 3D1	SUB		 	 
- stack 1: 0x6F0
- stack 0: 0x0
3607	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x3DA
3608	 3D5	JUMPI		 	 
- stack 0: 0x6F0
3609	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x6F0
- stack 0: 0x3F4
3610	 3D9	JUMP		 	 
- stack 0: 0x6F0
3611	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x6F0
3612	 3F5	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
3613	 3F7	ADD		 	 
- stack 0: 0x6F4
3614	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
3615	 3F9	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x165FFE000E3001A03FE02B0034A0000008600000099001F00B3000004400000
3616	 3FA	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x165FFE000E3001A03FE02B0034A0000008600000099001F00B3000004400000
- stack 0: 0xF0
3617	 3FC	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x165
3618	 3FD	JUMP		 	 
- stack 0: 0x6F4
3619	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x6F4
3620	 166	PUSH4	fffe0000	 	 
- stack 1: 0x6F4
- stack 0: 0xFFFE0000
3621	 16B	PUSH2	03A0	 	 
- stack 2: 0x6F4
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
3622	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F4
3623	 16F	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
3624	 171	ADD		 	 
- stack 0: 0x6F8
3625	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
3626	 173	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xE3001A03FE02B0034A0000008600000099001F00B300000440000004400000
3627	 174	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0xE3001A03FE02B0034A0000008600000099001F00B300000440000004400000
- stack 0: 0xF0
3628	 176	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xE3
3629	 177	JUMP		 	 
- stack 0: 0x6F8
3630	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6F8
3631	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
3632	 E5	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0xE3001A03FE02B0034A0000008600000099001F00B300000440000004400000
3633	 E6	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0xE3001A03FE02B0034A0000008600000099001F00B300000440000004400000
- stack 0: 0xE0
3634	 E8	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0xE3001A
3635	 E9	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0xE3001A
- stack 0: 0xFFFF
3636	 EC	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x1A
3637	 ED	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x1A
- stack 0: 0x1
3638	 EF	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x1A
3639	 F0	PUSH2	0380	 	 
- stack 2: 0x6F8
- stack 1: 0x1A
- stack 0: 0x380
3640	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x6F8
3641	 F4	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
3642	 F6	ADD		 	 
- stack 0: 0x6FC
3643	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
3644	 F8	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x3FE02B0034A0000008600000099001F00B30000044000000440000003640000
3645	 F9	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x3FE02B0034A0000008600000099001F00B30000044000000440000003640000
- stack 0: 0xF0
3646	 FB	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x3FE
3647	 FC	JUMP		 	 
- stack 0: 0x6FC
3648	 3FE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x6FC
3649	 3FF	PUSH2	00C0	 	 
- stack 1: 0x6FC
- stack 0: 0xC0
3650	 402	MLOAD		 	  ;; # read from x6
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3651	 403	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
3652	 408	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0xFFFE0000
3653	 409	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
3654	 40C	MLOAD		 	  ;; # read from x29
- stack 2: 0x6FC
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
3655	 40D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
3656	 412	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
3657	 413	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
3658	 414	PUSH2	041C	 ;; _neq_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x41C
3659	 417	JUMPI		 	 
- stack 0: 0x6FC
3660	 418	PUSH2	0436	 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 1: 0x6FC
- stack 0: 0x436
3661	 41B	JUMP		 	 
- stack 0: 0x6FC
3662	 436	JUMPDEST		 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 0: 0x6FC
3663	 437	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
3664	 439	ADD		 	 
- stack 0: 0x700
3665	 43A	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
3666	 43B	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x34A0000008600000099001F00B3000004400000044000000364000003830001
3667	 43C	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x34A0000008600000099001F00B3000004400000044000000364000003830001
- stack 0: 0xF0
3668	 43E	SHR		 	 
- stack 1: 0x700
- stack 0: 0x34A
3669	 43F	JUMP		 	 
- stack 0: 0x700
3670	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x700
3671	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
3672	 34C	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x34A0000008600000099001F00B3000004400000044000000364000003830001
3673	 34D	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x34A0000008600000099001F00B3000004400000044000000364000003830001
- stack 0: 0xE0
3674	 34F	SHR		 	 
- stack 1: 0x700
- stack 0: 0x34A0000
3675	 350	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x34A0000
- stack 0: 0xFFFF
3676	 353	AND		 	 
- stack 1: 0x700
- stack 0: 0x0
3677	 354	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x1
3678	 356	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x0
3679	 357	PUSH2	0080	 	 
- stack 2: 0x700
- stack 1: 0x0
- stack 0: 0x80
3680	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x700
3681	 35B	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
3682	 35D	ADD		 	 
- stack 0: 0x704
3683	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
3684	 35F	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x8600000099001F00B300000440000004400000036400000383000103A20002
3685	 360	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x8600000099001F00B300000440000004400000036400000383000103A20002
- stack 0: 0xF0
3686	 362	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86
3687	 363	JUMP		 	 
- stack 0: 0x704
3688	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x704
3689	 87	PUSH4	80000000	 	 
- stack 1: 0x704
- stack 0: 0x80000000
3690	 8C	PUSH2	0020	 	 
- stack 2: 0x704
- stack 1: 0x80000000
- stack 0: 0x20
3691	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x704
3692	 90	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
3693	 92	ADD		 	 
- stack 0: 0x708
3694	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
3695	 94	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
3696	 95	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
- stack 0: 0xF0
3697	 97	SHR		 	 
- stack 1: 0x708
- stack 0: 0x99
3698	 98	JUMP		 	 
- stack 0: 0x708
3699	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x708
3700	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
3701	 9B	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
3702	 9C	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
- stack 0: 0xE0
3703	 9E	SHR		 	 
- stack 1: 0x708
- stack 0: 0x99001F
3704	 9F	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x99001F
- stack 0: 0xFFFF
3705	 A2	AND		 	 
- stack 1: 0x708
- stack 0: 0x1F
3706	 A3	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1F
- stack 0: 0x1
3707	 A5	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1F
3708	 A6	PUSH2	0040	 	 
- stack 2: 0x708
- stack 1: 0x1F
- stack 0: 0x40
3709	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x708
3710	 AA	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
3711	 AC	ADD		 	 
- stack 0: 0x70C
3712	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
3713	 AE	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xB300000440000004400000036400000383000103A2000203BCFFE00197FFFF
3714	 AF	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xB300000440000004400000036400000383000103A2000203BCFFE00197FFFF
- stack 0: 0xF0
3715	 B1	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xB3
3716	 B2	JUMP		 	 
- stack 0: 0x70C
3717	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x70C
3718	 B4	PUSH2	0020	 	 
- stack 1: 0x70C
- stack 0: 0x20
3719	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x70C
- stack 0: 0x80000000
3720	 B8	PUSH1	03	 	 
- stack 2: 0x70C
- stack 1: 0x80000000
- stack 0: 0x3
3721	 BA	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3722	 BB	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3723	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
3724	 BF	PUSH1	1F	 	 
- stack 3: 0x70C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
3725	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
3726	 C2	SAR		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3727	 C3	PUSH2	0060	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
3728	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x70C
3729	 C7	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
3730	 C9	ADD		 	 
- stack 0: 0x710
3731	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
3732	 CB	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
3733	 CC	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
- stack 0: 0xF0
3734	 CE	SHR		 	 
- stack 1: 0x710
- stack 0: 0x440
3735	 CF	JUMP		 	 
- stack 0: 0x710
3736	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x710
3737	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
3738	 442	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
3739	 443	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
- stack 0: 0xE0
3740	 445	SHR		 	 
- stack 1: 0x710
- stack 0: 0x4400000
3741	 446	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x4400000
- stack 0: 0xFFFF
3742	 449	AND		 	 
- stack 1: 0x710
- stack 0: 0x0
3743	 44A	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1
3744	 44C	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x0
3745	 44D	POP		 	 
- stack 0: 0x710
3746	 44E	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
3747	 450	ADD		 	 
- stack 0: 0x714
3748	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
3749	 452	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
3750	 453	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
- stack 0: 0xF0
3751	 455	SHR		 	 
- stack 1: 0x714
- stack 0: 0x440
3752	 456	JUMP		 	 
- stack 0: 0x714
3753	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x714
3754	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
3755	 442	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
3756	 443	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
- stack 0: 0xE0
3757	 445	SHR		 	 
- stack 1: 0x714
- stack 0: 0x4400000
3758	 446	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x4400000
- stack 0: 0xFFFF
3759	 449	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
3760	 44A	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
3761	 44C	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
3762	 44D	POP		 	 
- stack 0: 0x714
3763	 44E	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
3764	 450	ADD		 	 
- stack 0: 0x718
3765	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
3766	 452	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
3767	 453	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
- stack 0: 0xF0
3768	 455	SHR		 	 
- stack 1: 0x718
- stack 0: 0x364
3769	 456	JUMP		 	 
- stack 0: 0x718
3770	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x718
3771	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
3772	 366	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
3773	 367	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
- stack 0: 0xE0
3774	 369	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3640000
3775	 36A	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3640000
- stack 0: 0xFFFF
3776	 36D	AND		 	 
- stack 1: 0x718
- stack 0: 0x0
3777	 36E	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x1
3778	 370	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x0
3779	 371	PUSH2	0060	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x60
3780	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3781	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x718
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3782	 376	PUSH2	00C0	 	 
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xC0
3783	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x718
3784	 37A	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
3785	 37C	ADD		 	 
- stack 0: 0x71C
3786	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
3787	 37E	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
3788	 37F	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
- stack 0: 0xF0
3789	 381	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x383
3790	 382	JUMP		 	 
- stack 0: 0x71C
3791	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x71C
3792	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
3793	 385	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
3794	 386	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
- stack 0: 0xE0
3795	 388	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3830001
3796	 389	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3830001
- stack 0: 0xFFFF
3797	 38C	AND		 	 
- stack 1: 0x71C
- stack 0: 0x1
3798	 38D	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x1
3799	 38F	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x1
3800	 390	PUSH2	0080	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x80
3801	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x0
3802	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x71C
- stack 0: 0x1
3803	 395	PUSH2	0080	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x80
3804	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x71C
3805	 399	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
3806	 39B	ADD		 	 
- stack 0: 0x720
3807	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
3808	 39D	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
3809	 39E	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
- stack 0: 0xF0
3810	 3A0	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3A2
3811	 3A1	JUMP		 	 
- stack 0: 0x720
3812	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x720
3813	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
3814	 3A4	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
3815	 3A5	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
- stack 0: 0xE0
3816	 3A7	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3A20002
3817	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3818	 3AB	AND		 	 
- stack 1: 0x720
- stack 0: 0x2
3819	 3AC	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0x1
3820	 3AE	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x2
3821	 3AF	PUSH2	00A0	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0xA0
3822	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x720
3823	 3B3	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
3824	 3B5	ADD		 	 
- stack 0: 0x724
3825	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
3826	 3B7	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
3827	 3B8	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
- stack 0: 0xF0
3828	 3BA	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3BC
3829	 3BB	JUMP		 	 
- stack 0: 0x724
3830	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x724
3831	 3BD	PUSH2	0080	 	 
- stack 1: 0x724
- stack 0: 0x80
3832	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x724
- stack 0: 0x1
3833	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3834	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x724
- stack 0: 0x1
3835	 3C7	PUSH2	00A0	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0xA0
3836	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x2
3837	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x724
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3838	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x2
3839	 3D1	SUB		 	 
- stack 1: 0x724
- stack 0: 0x1
3840	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x3DA
3841	 3D5	JUMPI		 	 
- stack 0: 0x724
3842	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x724
3843	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
3844	 3DC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
3845	 3DD	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
- stack 0: 0xE0
3846	 3DF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3BCFFE0
3847	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3BCFFE0
- stack 0: 0xFFFF
3848	 3E3	AND		 	 
- stack 1: 0x724
- stack 0: 0xFFE0
3849	 3E4	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0xFFE0
- stack 0: 0x1
3850	 3E6	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3851	 3E7	ADD		 	 
- stack 0: 0x704
3852	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x704
- stack 0: 0xFFFFFFFF
3853	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x704
3854	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
3855	 3EF	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x8600000099001F00B300000440000004400000036400000383000103A20002
3856	 3F0	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x8600000099001F00B300000440000004400000036400000383000103A20002
- stack 0: 0xF0
3857	 3F2	SHR		 	 
- stack 1: 0x704
- stack 0: 0x86
3858	 3F3	JUMP		 	 
- stack 0: 0x704
3859	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x704
3860	 87	PUSH4	80000000	 	 
- stack 1: 0x704
- stack 0: 0x80000000
3861	 8C	PUSH2	0020	 	 
- stack 2: 0x704
- stack 1: 0x80000000
- stack 0: 0x20
3862	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x704
3863	 90	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
3864	 92	ADD		 	 
- stack 0: 0x708
3865	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
3866	 94	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
3867	 95	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
- stack 0: 0xF0
3868	 97	SHR		 	 
- stack 1: 0x708
- stack 0: 0x99
3869	 98	JUMP		 	 
- stack 0: 0x708
3870	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x708
3871	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x708
- stack 0: 0x708
3872	 9B	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
3873	 9C	PUSH1	E0	 	 
- stack 2: 0x708
- stack 1: 0x99001F00B300000440000004400000036400000383000103A2000203BCFFE0
- stack 0: 0xE0
3874	 9E	SHR		 	 
- stack 1: 0x708
- stack 0: 0x99001F
3875	 9F	PUSH2	FFFF	 	 
- stack 2: 0x708
- stack 1: 0x99001F
- stack 0: 0xFFFF
3876	 A2	AND		 	 
- stack 1: 0x708
- stack 0: 0x1F
3877	 A3	PUSH1	01	 	 
- stack 2: 0x708
- stack 1: 0x1F
- stack 0: 0x1
3878	 A5	SIGNEXTEND		 	 
- stack 1: 0x708
- stack 0: 0x1F
3879	 A6	PUSH2	0040	 	 
- stack 2: 0x708
- stack 1: 0x1F
- stack 0: 0x40
3880	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x708
3881	 AA	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
3882	 AC	ADD		 	 
- stack 0: 0x70C
3883	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
3884	 AE	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0xB300000440000004400000036400000383000103A2000203BCFFE00197FFFF
3885	 AF	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0xB300000440000004400000036400000383000103A2000203BCFFE00197FFFF
- stack 0: 0xF0
3886	 B1	SHR		 	 
- stack 1: 0x70C
- stack 0: 0xB3
3887	 B2	JUMP		 	 
- stack 0: 0x70C
3888	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x70C
3889	 B4	PUSH2	0020	 	 
- stack 1: 0x70C
- stack 0: 0x20
3890	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x70C
- stack 0: 0x80000000
3891	 B8	PUSH1	03	 	 
- stack 2: 0x70C
- stack 1: 0x80000000
- stack 0: 0x3
3892	 BA	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3893	 BB	PUSH2	0040	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
3894	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
3895	 BF	PUSH1	1F	 	 
- stack 3: 0x70C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
3896	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
3897	 C2	SAR		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3898	 C3	PUSH2	0060	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
3899	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x70C
3900	 C7	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
3901	 C9	ADD		 	 
- stack 0: 0x710
3902	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
3903	 CB	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
3904	 CC	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
- stack 0: 0xF0
3905	 CE	SHR		 	 
- stack 1: 0x710
- stack 0: 0x440
3906	 CF	JUMP		 	 
- stack 0: 0x710
3907	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x710
3908	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
3909	 442	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
3910	 443	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x440000004400000036400000383000103A2000203BCFFE00197FFFF00E3001B
- stack 0: 0xE0
3911	 445	SHR		 	 
- stack 1: 0x710
- stack 0: 0x4400000
3912	 446	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x4400000
- stack 0: 0xFFFF
3913	 449	AND		 	 
- stack 1: 0x710
- stack 0: 0x0
3914	 44A	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1
3915	 44C	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x0
3916	 44D	POP		 	 
- stack 0: 0x710
3917	 44E	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
3918	 450	ADD		 	 
- stack 0: 0x714
3919	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
3920	 452	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
3921	 453	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
- stack 0: 0xF0
3922	 455	SHR		 	 
- stack 1: 0x714
- stack 0: 0x440
3923	 456	JUMP		 	 
- stack 0: 0x714
3924	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x714
3925	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
3926	 442	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
3927	 443	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x4400000036400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C
- stack 0: 0xE0
3928	 445	SHR		 	 
- stack 1: 0x714
- stack 0: 0x4400000
3929	 446	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x4400000
- stack 0: 0xFFFF
3930	 449	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
3931	 44A	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
3932	 44C	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
3933	 44D	POP		 	 
- stack 0: 0x714
3934	 44E	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
3935	 450	ADD		 	 
- stack 0: 0x718
3936	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
3937	 452	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
3938	 453	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
- stack 0: 0xF0
3939	 455	SHR		 	 
- stack 1: 0x718
- stack 0: 0x364
3940	 456	JUMP		 	 
- stack 0: 0x718
3941	 364	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x718
3942	 365	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
3943	 366	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
3944	 367	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x36400000383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A0000
- stack 0: 0xE0
3945	 369	SHR		 	 
- stack 1: 0x718
- stack 0: 0x3640000
3946	 36A	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x3640000
- stack 0: 0xFFFF
3947	 36D	AND		 	 
- stack 1: 0x718
- stack 0: 0x0
3948	 36E	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x1
3949	 370	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x0
3950	 371	PUSH2	0060	 	 
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0x60
3951	 374	MLOAD		 	  ;; # read from x3
- stack 2: 0x718
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3952	 375	ADD		 	  ;; # ADDI 3
- stack 1: 0x718
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3953	 376	PUSH2	00C0	 	 
- stack 2: 0x718
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xC0
3954	 379	MSTORE		 	  ;; # store to x6
- stack 0: 0x718
3955	 37A	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
3956	 37C	ADD		 	 
- stack 0: 0x71C
3957	 37D	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
3958	 37E	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
3959	 37F	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
- stack 0: 0xF0
3960	 381	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x383
3961	 382	JUMP		 	 
- stack 0: 0x71C
3962	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x71C
3963	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
3964	 385	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
3965	 386	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x383000103A2000203BCFFE00197FFFF00E3001B03FE027C034A000000860000
- stack 0: 0xE0
3966	 388	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3830001
3967	 389	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3830001
- stack 0: 0xFFFF
3968	 38C	AND		 	 
- stack 1: 0x71C
- stack 0: 0x1
3969	 38D	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x1
3970	 38F	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x1
3971	 390	PUSH2	0080	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x80
3972	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x1
3973	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x71C
- stack 0: 0x2
3974	 395	PUSH2	0080	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x80
3975	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x71C
3976	 399	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
3977	 39B	ADD		 	 
- stack 0: 0x720
3978	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
3979	 39D	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
3980	 39E	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
- stack 0: 0xF0
3981	 3A0	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3A2
3982	 3A1	JUMP		 	 
- stack 0: 0x720
3983	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x720
3984	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
3985	 3A4	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
3986	 3A5	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x3A2000203BCFFE00197FFFF00E3001B03FE027C034A00000086000000990007
- stack 0: 0xE0
3987	 3A7	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3A20002
3988	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x3A20002
- stack 0: 0xFFFF
3989	 3AB	AND		 	 
- stack 1: 0x720
- stack 0: 0x2
3990	 3AC	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0x1
3991	 3AE	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x2
3992	 3AF	PUSH2	00A0	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0xA0
3993	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x720
3994	 3B3	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
3995	 3B5	ADD		 	 
- stack 0: 0x724
3996	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
3997	 3B7	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
3998	 3B8	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3BCFFE00197FFFF00E3001B03FE027C034A0000008600000099000700B30000
- stack 0: 0xF0
3999	 3BA	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3BC
4000	 3BB	JUMP		 	 
- stack 0: 0x724
4001	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x724
4002	 3BD	PUSH2	0080	 	 
- stack 1: 0x724
- stack 0: 0x80
4003	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x724
- stack 0: 0x2
4004	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4005	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x724
- stack 0: 0x2
4006	 3C7	PUSH2	00A0	 	 
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0xA0
4007	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0x2
4008	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x724
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4009	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0x2
4010	 3D1	SUB		 	 
- stack 1: 0x724
- stack 0: 0x0
4011	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0x3DA
4012	 3D5	JUMPI		 	 
- stack 0: 0x724
4013	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x724
- stack 0: 0x3F4
4014	 3D9	JUMP		 	 
- stack 0: 0x724
4015	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x724
4016	 3F5	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4017	 3F7	ADD		 	 
- stack 0: 0x728
4018	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4019	 3F9	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x197FFFF00E3001B03FE027C034A0000008600000099000700B3000003830001
4020	 3FA	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x197FFFF00E3001B03FE027C034A0000008600000099000700B3000003830001
- stack 0: 0xF0
4021	 3FC	SHR		 	 
- stack 1: 0x728
- stack 0: 0x197
4022	 3FD	JUMP		 	 
- stack 0: 0x728
4023	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x728
4024	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
4025	 199	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x197FFFF00E3001B03FE027C034A0000008600000099000700B3000003830001
4026	 19A	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x197FFFF00E3001B03FE027C034A0000008600000099000700B3000003830001
- stack 0: 0xE0
4027	 19C	SHR		 	 
- stack 1: 0x728
- stack 0: 0x197FFFF
4028	 19D	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
4029	 1A0	AND		 	 
- stack 1: 0x728
- stack 0: 0xFFFF
4030	 1A1	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0xFFFF
- stack 0: 0x1
4031	 1A3	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4032	 1A4	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
4033	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x728
4034	 1A8	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4035	 1AA	ADD		 	 
- stack 0: 0x72C
4036	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4037	 1AC	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xE3001B03FE027C034A0000008600000099000700B300000383000103A20002
4038	 1AD	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0xE3001B03FE027C034A0000008600000099000700B300000383000103A20002
- stack 0: 0xF0
4039	 1AF	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xE3
4040	 1B0	JUMP		 	 
- stack 0: 0x72C
4041	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x72C
4042	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4043	 E5	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xE3001B03FE027C034A0000008600000099000700B300000383000103A20002
4044	 E6	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0xE3001B03FE027C034A0000008600000099000700B300000383000103A20002
- stack 0: 0xE0
4045	 E8	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xE3001B
4046	 E9	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0xE3001B
- stack 0: 0xFFFF
4047	 EC	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1B
4048	 ED	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1B
- stack 0: 0x1
4049	 EF	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1B
4050	 F0	PUSH2	0380	 	 
- stack 2: 0x72C
- stack 1: 0x1B
- stack 0: 0x380
4051	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x72C
4052	 F4	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4053	 F6	ADD		 	 
- stack 0: 0x730
4054	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4055	 F8	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x3FE027C034A0000008600000099000700B300000383000103A2000203BCFFEC
4056	 F9	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x3FE027C034A0000008600000099000700B300000383000103A2000203BCFFEC
- stack 0: 0xF0
4057	 FB	SHR		 	 
- stack 1: 0x730
- stack 0: 0x3FE
4058	 FC	JUMP		 	 
- stack 0: 0x730
4059	 3FE	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2e0(ignore imm)
- stack 0: 0x730
4060	 3FF	PUSH2	00C0	 	 
- stack 1: 0x730
- stack 0: 0xC0
4061	 402	MLOAD		 	  ;; # read from x6
- stack 1: 0x730
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4062	 403	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4063	 408	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0xFFFFFFFF
4064	 409	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
4065	 40C	MLOAD		 	  ;; # read from x29
- stack 2: 0x730
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4066	 40D	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
4067	 412	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
4068	 413	SUB		 	 
- stack 1: 0x730
- stack 0: 0x0
4069	 414	PUSH2	041C	 ;; _neq_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 2: 0x730
- stack 1: 0x0
- stack 0: 0x41C
4070	 417	JUMPI		 	 
- stack 0: 0x730
4071	 418	PUSH2	0436	 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 1: 0x730
- stack 0: 0x436
4072	 41B	JUMP		 	 
- stack 0: 0x730
4073	 436	JUMPDEST		 ;; _neq_after_cb6b0c372ca8cb7239e6bf0479c21c2e8193cb4a9139d9a0dc5939e7a7fb5097	 
- stack 0: 0x730
4074	 437	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4075	 439	ADD		 	 
- stack 0: 0x734
4076	 43A	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4077	 43B	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x34A0000008600000099000700B300000383000103A2000203BCFFEC0152F000
4078	 43C	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x34A0000008600000099000700B300000383000103A2000203BCFFEC0152F000
- stack 0: 0xF0
4079	 43E	SHR		 	 
- stack 1: 0x734
- stack 0: 0x34A
4080	 43F	JUMP		 	 
- stack 0: 0x734
4081	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x734
4082	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4083	 34C	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x34A0000008600000099000700B300000383000103A2000203BCFFEC0152F000
4084	 34D	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x34A0000008600000099000700B300000383000103A2000203BCFFEC0152F000
- stack 0: 0xE0
4085	 34F	SHR		 	 
- stack 1: 0x734
- stack 0: 0x34A0000
4086	 350	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x34A0000
- stack 0: 0xFFFF
4087	 353	AND		 	 
- stack 1: 0x734
- stack 0: 0x0
4088	 354	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x1
4089	 356	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x0
4090	 357	PUSH2	0080	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x80
4091	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x734
4092	 35B	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4093	 35D	ADD		 	 
- stack 0: 0x738
4094	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4095	 35F	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x8600000099000700B300000383000103A2000203BCFFEC0152F00000E3001C
4096	 360	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x8600000099000700B300000383000103A2000203BCFFEC0152F00000E3001C
- stack 0: 0xF0
4097	 362	SHR		 	 
- stack 1: 0x738
- stack 0: 0x86
4098	 363	JUMP		 	 
- stack 0: 0x738
4099	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x738
4100	 87	PUSH4	80000000	 	 
- stack 1: 0x738
- stack 0: 0x80000000
4101	 8C	PUSH2	0020	 	 
- stack 2: 0x738
- stack 1: 0x80000000
- stack 0: 0x20
4102	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x738
4103	 90	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4104	 92	ADD		 	 
- stack 0: 0x73C
4105	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4106	 94	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
4107	 95	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
- stack 0: 0xF0
4108	 97	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x99
4109	 98	JUMP		 	 
- stack 0: 0x73C
4110	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x73C
4111	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4112	 9B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
4113	 9C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
- stack 0: 0xE0
4114	 9E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x990007
4115	 9F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x990007
- stack 0: 0xFFFF
4116	 A2	AND		 	 
- stack 1: 0x73C
- stack 0: 0x7
4117	 A3	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x7
- stack 0: 0x1
4118	 A5	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x7
4119	 A6	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x7
- stack 0: 0x40
4120	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x73C
4121	 AA	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4122	 AC	ADD		 	 
- stack 0: 0x740
4123	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4124	 AE	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xB300000383000103A2000203BCFFEC0152F00000E3001C00FD0254034A0000
4125	 AF	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xB300000383000103A2000203BCFFEC0152F00000E3001C00FD0254034A0000
- stack 0: 0xF0
4126	 B1	SHR		 	 
- stack 1: 0x740
- stack 0: 0xB3
4127	 B2	JUMP		 	 
- stack 0: 0x740
4128	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x740
4129	 B4	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4130	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0x80000000
4131	 B8	PUSH1	03	 	 
- stack 2: 0x740
- stack 1: 0x80000000
- stack 0: 0x3
4132	 BA	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4133	 BB	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4134	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
4135	 BF	PUSH1	1F	 	 
- stack 3: 0x740
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
4136	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
4137	 C2	SAR		 	 
- stack 1: 0x740
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
4138	 C3	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
4139	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4140	 C7	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4141	 C9	ADD		 	 
- stack 0: 0x744
4142	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4143	 CB	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
4144	 CC	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
- stack 0: 0xF0
4145	 CE	SHR		 	 
- stack 1: 0x744
- stack 0: 0x383
4146	 CF	JUMP		 	 
- stack 0: 0x744
4147	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4148	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4149	 385	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
4150	 386	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
- stack 0: 0xE0
4151	 388	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3830001
4152	 389	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3830001
- stack 0: 0xFFFF
4153	 38C	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4154	 38D	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4155	 38F	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4156	 390	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4157	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x0
4158	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x1
4159	 395	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4160	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4161	 399	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4162	 39B	ADD		 	 
- stack 0: 0x748
4163	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4164	 39D	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
4165	 39E	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
- stack 0: 0xF0
4166	 3A0	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3A2
4167	 3A1	JUMP		 	 
- stack 0: 0x748
4168	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4169	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4170	 3A4	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
4171	 3A5	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
- stack 0: 0xE0
4172	 3A7	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3A20002
4173	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4174	 3AB	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4175	 3AC	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4176	 3AE	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4177	 3AF	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4178	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4179	 3B3	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4180	 3B5	ADD		 	 
- stack 0: 0x74C
4181	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4182	 3B7	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
4183	 3B8	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
- stack 0: 0xF0
4184	 3BA	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3BC
4185	 3BB	JUMP		 	 
- stack 0: 0x74C
4186	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4187	 3BD	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4188	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x1
4189	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4190	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x1
4191	 3C7	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xA0
4192	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4193	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4194	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4195	 3D1	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x1
4196	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x3DA
4197	 3D5	JUMPI		 	 
- stack 0: 0x74C
4198	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x74C
4199	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
4200	 3DC	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
4201	 3DD	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
- stack 0: 0xE0
4202	 3DF	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3BCFFEC
4203	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x3BCFFEC
- stack 0: 0xFFFF
4204	 3E3	AND		 	 
- stack 1: 0x74C
- stack 0: 0xFFEC
4205	 3E4	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xFFEC
- stack 0: 0x1
4206	 3E6	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
4207	 3E7	ADD		 	 
- stack 0: 0x738
4208	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x738
- stack 0: 0xFFFFFFFF
4209	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x738
4210	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4211	 3EF	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x8600000099000700B300000383000103A2000203BCFFEC0152F00000E3001C
4212	 3F0	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x8600000099000700B300000383000103A2000203BCFFEC0152F00000E3001C
- stack 0: 0xF0
4213	 3F2	SHR		 	 
- stack 1: 0x738
- stack 0: 0x86
4214	 3F3	JUMP		 	 
- stack 0: 0x738
4215	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x738
4216	 87	PUSH4	80000000	 	 
- stack 1: 0x738
- stack 0: 0x80000000
4217	 8C	PUSH2	0020	 	 
- stack 2: 0x738
- stack 1: 0x80000000
- stack 0: 0x20
4218	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x738
4219	 90	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4220	 92	ADD		 	 
- stack 0: 0x73C
4221	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4222	 94	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
4223	 95	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
- stack 0: 0xF0
4224	 97	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x99
4225	 98	JUMP		 	 
- stack 0: 0x73C
4226	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x73C
4227	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4228	 9B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
4229	 9C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x99000700B300000383000103A2000203BCFFEC0152F00000E3001C00FD0254
- stack 0: 0xE0
4230	 9E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x990007
4231	 9F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x990007
- stack 0: 0xFFFF
4232	 A2	AND		 	 
- stack 1: 0x73C
- stack 0: 0x7
4233	 A3	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x7
- stack 0: 0x1
4234	 A5	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x7
4235	 A6	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x7
- stack 0: 0x40
4236	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x73C
4237	 AA	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4238	 AC	ADD		 	 
- stack 0: 0x740
4239	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4240	 AE	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xB300000383000103A2000203BCFFEC0152F00000E3001C00FD0254034A0000
4241	 AF	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xB300000383000103A2000203BCFFEC0152F00000E3001C00FD0254034A0000
- stack 0: 0xF0
4242	 B1	SHR		 	 
- stack 1: 0x740
- stack 0: 0xB3
4243	 B2	JUMP		 	 
- stack 0: 0x740
4244	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x740
4245	 B4	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4246	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0x80000000
4247	 B8	PUSH1	03	 	 
- stack 2: 0x740
- stack 1: 0x80000000
- stack 0: 0x3
4248	 BA	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4249	 BB	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4250	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
4251	 BF	PUSH1	1F	 	 
- stack 3: 0x740
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
4252	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
4253	 C2	SAR		 	 
- stack 1: 0x740
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
4254	 C3	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
4255	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4256	 C7	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4257	 C9	ADD		 	 
- stack 0: 0x744
4258	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4259	 CB	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
4260	 CC	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
- stack 0: 0xF0
4261	 CE	SHR		 	 
- stack 1: 0x744
- stack 0: 0x383
4262	 CF	JUMP		 	 
- stack 0: 0x744
4263	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4264	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4265	 385	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
4266	 386	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3001C00FD0254034A000000860000
- stack 0: 0xE0
4267	 388	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3830001
4268	 389	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3830001
- stack 0: 0xFFFF
4269	 38C	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4270	 38D	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4271	 38F	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4272	 390	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4273	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4274	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x2
4275	 395	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x80
4276	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4277	 399	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4278	 39B	ADD		 	 
- stack 0: 0x748
4279	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4280	 39D	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
4281	 39E	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
- stack 0: 0xF0
4282	 3A0	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3A2
4283	 3A1	JUMP		 	 
- stack 0: 0x748
4284	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4285	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4286	 3A4	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
4287	 3A5	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3A2000203BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E
- stack 0: 0xE0
4288	 3A7	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3A20002
4289	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4290	 3AB	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4291	 3AC	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4292	 3AE	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4293	 3AF	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4294	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4295	 3B3	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4296	 3B5	ADD		 	 
- stack 0: 0x74C
4297	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4298	 3B7	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
4299	 3B8	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x3BCFFEC0152F00000E3001C00FD0254034A0000008600000099000E04400000
- stack 0: 0xF0
4300	 3BA	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3BC
4301	 3BB	JUMP		 	 
- stack 0: 0x74C
4302	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4303	 3BD	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4304	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x2
4305	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4306	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x2
4307	 3C7	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xA0
4308	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4309	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4310	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4311	 3D1	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x0
4312	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x3DA
4313	 3D5	JUMPI		 	 
- stack 0: 0x74C
4314	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x74C
- stack 0: 0x3F4
4315	 3D9	JUMP		 	 
- stack 0: 0x74C
4316	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x74C
4317	 3F5	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
4318	 3F7	ADD		 	 
- stack 0: 0x750
4319	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
4320	 3F9	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x152F00000E3001C00FD0254034A0000008600000099000E0440000000B30000
4321	 3FA	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x152F00000E3001C00FD0254034A0000008600000099000E0440000000B30000
- stack 0: 0xF0
4322	 3FC	SHR		 	 
- stack 1: 0x750
- stack 0: 0x152
4323	 3FD	JUMP		 	 
- stack 0: 0x750
4324	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x750
4325	 153	PUSH4	ff000000	 	 
- stack 1: 0x750
- stack 0: 0xFF000000
4326	 158	PUSH2	03A0	 	 
- stack 2: 0x750
- stack 1: 0xFF000000
- stack 0: 0x3A0
4327	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x750
4328	 15C	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
4329	 15E	ADD		 	 
- stack 0: 0x754
4330	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
4331	 160	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xE3001C00FD0254034A0000008600000099000E0440000000B3000003830001
4332	 161	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0xE3001C00FD0254034A0000008600000099000E0440000000B3000003830001
- stack 0: 0xF0
4333	 163	SHR		 	 
- stack 1: 0x754
- stack 0: 0xE3
4334	 164	JUMP		 	 
- stack 0: 0x754
4335	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x754
4336	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
4337	 E5	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xE3001C00FD0254034A0000008600000099000E0440000000B3000003830001
4338	 E6	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0xE3001C00FD0254034A0000008600000099000E0440000000B3000003830001
- stack 0: 0xE0
4339	 E8	SHR		 	 
- stack 1: 0x754
- stack 0: 0xE3001C
4340	 E9	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0xE3001C
- stack 0: 0xFFFF
4341	 EC	AND		 	 
- stack 1: 0x754
- stack 0: 0x1C
4342	 ED	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x1C
- stack 0: 0x1
4343	 EF	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x1C
4344	 F0	PUSH2	0380	 	 
- stack 2: 0x754
- stack 1: 0x1C
- stack 0: 0x380
4345	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x754
4346	 F4	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
4347	 F6	ADD		 	 
- stack 0: 0x758
4348	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
4349	 F8	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xFD0254034A0000008600000099000E0440000000B300000383000103A20002
4350	 F9	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xFD0254034A0000008600000099000E0440000000B300000383000103A20002
- stack 0: 0xF0
4351	 FB	SHR		 	 
- stack 1: 0x758
- stack 0: 0xFD
4352	 FC	JUMP		 	 
- stack 0: 0x758
4353	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x758
4354	 FE	PUSH2	0060	 	 
- stack 1: 0x758
- stack 0: 0x60
4355	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x758
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
4356	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x758
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
4357	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x758
- stack 0: 0xFF000000
4358	 108	PUSH2	03A0	 	 
- stack 2: 0x758
- stack 1: 0xFF000000
- stack 0: 0x3A0
4359	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x758
- stack 1: 0xFF000000
- stack 0: 0xFF000000
4360	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x758
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
4361	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x758
- stack 1: 0xFF000000
- stack 0: 0xFF000000
4362	 112	SUB		 	 
- stack 1: 0x758
- stack 0: 0x0
4363	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x11B
4364	 116	JUMPI		 	 
- stack 0: 0x758
4365	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x758
- stack 0: 0x135
4366	 11A	JUMP		 	 
- stack 0: 0x758
4367	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x758
4368	 136	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
4369	 138	ADD		 	 
- stack 0: 0x75C
4370	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
4371	 13A	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x34A0000008600000099000E0440000000B300000383000103A2000203BCFFE8
4372	 13B	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x34A0000008600000099000E0440000000B300000383000103A2000203BCFFE8
- stack 0: 0xF0
4373	 13D	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x34A
4374	 13E	JUMP		 	 
- stack 0: 0x75C
4375	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x75C
4376	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
4377	 34C	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x34A0000008600000099000E0440000000B300000383000103A2000203BCFFE8
4378	 34D	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x34A0000008600000099000E0440000000B300000383000103A2000203BCFFE8
- stack 0: 0xE0
4379	 34F	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x34A0000
4380	 350	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x34A0000
- stack 0: 0xFFFF
4381	 353	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
4382	 354	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
4383	 356	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
4384	 357	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x80
4385	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
4386	 35B	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
4387	 35D	ADD		 	 
- stack 0: 0x760
4388	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4389	 35F	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x8600000099000E0440000000B300000383000103A2000203BCFFE80165FFE0
4390	 360	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x8600000099000E0440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xF0
4391	 362	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
4392	 363	JUMP		 	 
- stack 0: 0x760
4393	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x760
4394	 87	PUSH4	80000000	 	 
- stack 1: 0x760
- stack 0: 0x80000000
4395	 8C	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0x80000000
- stack 0: 0x20
4396	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
4397	 90	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4398	 92	ADD		 	 
- stack 0: 0x764
4399	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4400	 94	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
4401	 95	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
- stack 0: 0xF0
4402	 97	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99
4403	 98	JUMP		 	 
- stack 0: 0x764
4404	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x764
4405	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4406	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
4407	 9C	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
- stack 0: 0xE0
4408	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99000E
4409	 9F	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x99000E
- stack 0: 0xFFFF
4410	 A2	AND		 	 
- stack 1: 0x764
- stack 0: 0xE
4411	 A3	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0xE
- stack 0: 0x1
4412	 A5	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0xE
4413	 A6	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0xE
- stack 0: 0x40
4414	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
4415	 AA	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4416	 AC	ADD		 	 
- stack 0: 0x768
4417	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4418	 AE	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
4419	 AF	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
- stack 0: 0xF0
4420	 B1	SHR		 	 
- stack 1: 0x768
- stack 0: 0x440
4421	 B2	JUMP		 	 
- stack 0: 0x768
4422	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4423	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4424	 442	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
4425	 443	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
- stack 0: 0xE0
4426	 445	SHR		 	 
- stack 1: 0x768
- stack 0: 0x4400000
4427	 446	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x4400000
- stack 0: 0xFFFF
4428	 449	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4429	 44A	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4430	 44C	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4431	 44D	POP		 	 
- stack 0: 0x768
4432	 44E	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4433	 450	ADD		 	 
- stack 0: 0x76C
4434	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4435	 452	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xB300000383000103A2000203BCFFE80165FFE000E3001D00FD0228034A0000
4436	 453	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xB300000383000103A2000203BCFFE80165FFE000E3001D00FD0228034A0000
- stack 0: 0xF0
4437	 455	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xB3
4438	 456	JUMP		 	 
- stack 0: 0x76C
4439	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x76C
4440	 B4	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4441	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0x80000000
4442	 B8	PUSH1	03	 	 
- stack 2: 0x76C
- stack 1: 0x80000000
- stack 0: 0x3
4443	 BA	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4444	 BB	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4445	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
4446	 BF	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
4447	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
4448	 C2	SAR		 	 
- stack 1: 0x76C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
4449	 C3	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
4450	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4451	 C7	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4452	 C9	ADD		 	 
- stack 0: 0x770
4453	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4454	 CB	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
4455	 CC	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
- stack 0: 0xF0
4456	 CE	SHR		 	 
- stack 1: 0x770
- stack 0: 0x383
4457	 CF	JUMP		 	 
- stack 0: 0x770
4458	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4459	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4460	 385	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
4461	 386	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
- stack 0: 0xE0
4462	 388	SHR		 	 
- stack 1: 0x770
- stack 0: 0x3830001
4463	 389	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x3830001
- stack 0: 0xFFFF
4464	 38C	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4465	 38D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4466	 38F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4467	 390	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4468	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x0
4469	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x1
4470	 395	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4471	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4472	 399	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4473	 39B	ADD		 	 
- stack 0: 0x774
4474	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4475	 39D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
4476	 39E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
- stack 0: 0xF0
4477	 3A0	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3A2
4478	 3A1	JUMP		 	 
- stack 0: 0x774
4479	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4480	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4481	 3A4	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
4482	 3A5	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
- stack 0: 0xE0
4483	 3A7	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3A20002
4484	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4485	 3AB	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4486	 3AC	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4487	 3AE	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4488	 3AF	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4489	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4490	 3B3	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4491	 3B5	ADD		 	 
- stack 0: 0x778
4492	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4493	 3B7	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
4494	 3B8	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
- stack 0: 0xF0
4495	 3BA	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3BC
4496	 3BB	JUMP		 	 
- stack 0: 0x778
4497	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4498	 3BD	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4499	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x1
4500	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4501	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x1
4502	 3C7	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xA0
4503	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4504	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4505	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4506	 3D1	SUB		 	 
- stack 1: 0x778
- stack 0: 0x1
4507	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x3DA
4508	 3D5	JUMPI		 	 
- stack 0: 0x778
4509	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x778
4510	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
4511	 3DC	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
4512	 3DD	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
- stack 0: 0xE0
4513	 3DF	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3BCFFE8
4514	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3BCFFE8
- stack 0: 0xFFFF
4515	 3E3	AND		 	 
- stack 1: 0x778
- stack 0: 0xFFE8
4516	 3E4	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0xFFE8
- stack 0: 0x1
4517	 3E6	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4518	 3E7	ADD		 	 
- stack 0: 0x760
4519	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x760
- stack 0: 0xFFFFFFFF
4520	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x760
4521	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4522	 3EF	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x8600000099000E0440000000B300000383000103A2000203BCFFE80165FFE0
4523	 3F0	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x8600000099000E0440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xF0
4524	 3F2	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
4525	 3F3	JUMP		 	 
- stack 0: 0x760
4526	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x760
4527	 87	PUSH4	80000000	 	 
- stack 1: 0x760
- stack 0: 0x80000000
4528	 8C	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0x80000000
- stack 0: 0x20
4529	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
4530	 90	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4531	 92	ADD		 	 
- stack 0: 0x764
4532	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4533	 94	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
4534	 95	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
- stack 0: 0xF0
4535	 97	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99
4536	 98	JUMP		 	 
- stack 0: 0x764
4537	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x764
4538	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4539	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
4540	 9C	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE80165FFE000E3001D
- stack 0: 0xE0
4541	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99000E
4542	 9F	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x99000E
- stack 0: 0xFFFF
4543	 A2	AND		 	 
- stack 1: 0x764
- stack 0: 0xE
4544	 A3	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0xE
- stack 0: 0x1
4545	 A5	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0xE
4546	 A6	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0xE
- stack 0: 0x40
4547	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
4548	 AA	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4549	 AC	ADD		 	 
- stack 0: 0x768
4550	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4551	 AE	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
4552	 AF	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
- stack 0: 0xF0
4553	 B1	SHR		 	 
- stack 1: 0x768
- stack 0: 0x440
4554	 B2	JUMP		 	 
- stack 0: 0x768
4555	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4556	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4557	 442	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
4558	 443	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3001D00FD0228
- stack 0: 0xE0
4559	 445	SHR		 	 
- stack 1: 0x768
- stack 0: 0x4400000
4560	 446	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x4400000
- stack 0: 0xFFFF
4561	 449	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4562	 44A	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4563	 44C	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4564	 44D	POP		 	 
- stack 0: 0x768
4565	 44E	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4566	 450	ADD		 	 
- stack 0: 0x76C
4567	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4568	 452	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xB300000383000103A2000203BCFFE80165FFE000E3001D00FD0228034A0000
4569	 453	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xB300000383000103A2000203BCFFE80165FFE000E3001D00FD0228034A0000
- stack 0: 0xF0
4570	 455	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xB3
4571	 456	JUMP		 	 
- stack 0: 0x76C
4572	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x76C
4573	 B4	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4574	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0x80000000
4575	 B8	PUSH1	03	 	 
- stack 2: 0x76C
- stack 1: 0x80000000
- stack 0: 0x3
4576	 BA	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4577	 BB	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4578	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
4579	 BF	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
4580	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
4581	 C2	SAR		 	 
- stack 1: 0x76C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
4582	 C3	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
4583	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4584	 C7	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4585	 C9	ADD		 	 
- stack 0: 0x770
4586	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4587	 CB	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
4588	 CC	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
- stack 0: 0xF0
4589	 CE	SHR		 	 
- stack 1: 0x770
- stack 0: 0x383
4590	 CF	JUMP		 	 
- stack 0: 0x770
4591	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4592	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4593	 385	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
4594	 386	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3001D00FD0228034A000000860000
- stack 0: 0xE0
4595	 388	SHR		 	 
- stack 1: 0x770
- stack 0: 0x3830001
4596	 389	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x3830001
- stack 0: 0xFFFF
4597	 38C	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4598	 38D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4599	 38F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4600	 390	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4601	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4602	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x2
4603	 395	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x2
- stack 0: 0x80
4604	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4605	 399	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4606	 39B	ADD		 	 
- stack 0: 0x774
4607	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4608	 39D	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
4609	 39E	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
- stack 0: 0xF0
4610	 3A0	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3A2
4611	 3A1	JUMP		 	 
- stack 0: 0x774
4612	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4613	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4614	 3A4	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
4615	 3A5	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3A2000203BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F
- stack 0: 0xE0
4616	 3A7	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3A20002
4617	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4618	 3AB	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4619	 3AC	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4620	 3AE	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4621	 3AF	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4622	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4623	 3B3	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4624	 3B5	ADD		 	 
- stack 0: 0x778
4625	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4626	 3B7	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
4627	 3B8	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3BCFFE80165FFE000E3001D00FD0228034A0000008600000099001F04400000
- stack 0: 0xF0
4628	 3BA	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3BC
4629	 3BB	JUMP		 	 
- stack 0: 0x778
4630	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4631	 3BD	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4632	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x2
4633	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4634	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x2
4635	 3C7	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
4636	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4637	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4638	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4639	 3D1	SUB		 	 
- stack 1: 0x778
- stack 0: 0x0
4640	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x3DA
4641	 3D5	JUMPI		 	 
- stack 0: 0x778
4642	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x778
- stack 0: 0x3F4
4643	 3D9	JUMP		 	 
- stack 0: 0x778
4644	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x778
4645	 3F5	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
4646	 3F7	ADD		 	 
- stack 0: 0x77C
4647	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
4648	 3F9	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x165FFE000E3001D00FD0228034A0000008600000099001F0440000004400000
4649	 3FA	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x165FFE000E3001D00FD0228034A0000008600000099001F0440000004400000
- stack 0: 0xF0
4650	 3FC	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x165
4651	 3FD	JUMP		 	 
- stack 0: 0x77C
4652	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x77C
4653	 166	PUSH4	fffe0000	 	 
- stack 1: 0x77C
- stack 0: 0xFFFE0000
4654	 16B	PUSH2	03A0	 	 
- stack 2: 0x77C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
4655	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x77C
4656	 16F	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
4657	 171	ADD		 	 
- stack 0: 0x780
4658	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
4659	 173	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xE3001D00FD0228034A0000008600000099001F044000000440000000B30000
4660	 174	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xE3001D00FD0228034A0000008600000099001F044000000440000000B30000
- stack 0: 0xF0
4661	 176	SHR		 	 
- stack 1: 0x780
- stack 0: 0xE3
4662	 177	JUMP		 	 
- stack 0: 0x780
4663	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x780
4664	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
4665	 E5	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xE3001D00FD0228034A0000008600000099001F044000000440000000B30000
4666	 E6	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xE3001D00FD0228034A0000008600000099001F044000000440000000B30000
- stack 0: 0xE0
4667	 E8	SHR		 	 
- stack 1: 0x780
- stack 0: 0xE3001D
4668	 E9	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xE3001D
- stack 0: 0xFFFF
4669	 EC	AND		 	 
- stack 1: 0x780
- stack 0: 0x1D
4670	 ED	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x1D
- stack 0: 0x1
4671	 EF	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x1D
4672	 F0	PUSH2	0380	 	 
- stack 2: 0x780
- stack 1: 0x1D
- stack 0: 0x380
4673	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x780
4674	 F4	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
4675	 F6	ADD		 	 
- stack 0: 0x784
4676	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
4677	 F8	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xFD0228034A0000008600000099001F044000000440000000B3000003830001
4678	 F9	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0xFD0228034A0000008600000099001F044000000440000000B3000003830001
- stack 0: 0xF0
4679	 FB	SHR		 	 
- stack 1: 0x784
- stack 0: 0xFD
4680	 FC	JUMP		 	 
- stack 0: 0x784
4681	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x784
4682	 FE	PUSH2	0060	 	 
- stack 1: 0x784
- stack 0: 0x60
4683	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x784
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
4684	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
4685	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0xFFFE0000
4686	 108	PUSH2	03A0	 	 
- stack 2: 0x784
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
4687	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x784
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
4688	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
4689	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
4690	 112	SUB		 	 
- stack 1: 0x784
- stack 0: 0x0
4691	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x11B
4692	 116	JUMPI		 	 
- stack 0: 0x784
4693	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x784
- stack 0: 0x135
4694	 11A	JUMP		 	 
- stack 0: 0x784
4695	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x784
4696	 136	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
4697	 138	ADD		 	 
- stack 0: 0x788
4698	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
4699	 13A	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x34A0000008600000099001F044000000440000000B300000383000103A20002
4700	 13B	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x34A0000008600000099001F044000000440000000B300000383000103A20002
- stack 0: 0xF0
4701	 13D	SHR		 	 
- stack 1: 0x788
- stack 0: 0x34A
4702	 13E	JUMP		 	 
- stack 0: 0x788
4703	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x788
4704	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
4705	 34C	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x34A0000008600000099001F044000000440000000B300000383000103A20002
4706	 34D	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x34A0000008600000099001F044000000440000000B300000383000103A20002
- stack 0: 0xE0
4707	 34F	SHR		 	 
- stack 1: 0x788
- stack 0: 0x34A0000
4708	 350	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x34A0000
- stack 0: 0xFFFF
4709	 353	AND		 	 
- stack 1: 0x788
- stack 0: 0x0
4710	 354	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x1
4711	 356	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x0
4712	 357	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x80
4713	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x788
4714	 35B	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
4715	 35D	ADD		 	 
- stack 0: 0x78C
4716	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
4717	 35F	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600000099001F044000000440000000B300000383000103A2000203BCFFE4
4718	 360	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x8600000099001F044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
4719	 362	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x86
4720	 363	JUMP		 	 
- stack 0: 0x78C
4721	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x78C
4722	 87	PUSH4	80000000	 	 
- stack 1: 0x78C
- stack 0: 0x80000000
4723	 8C	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0x80000000
- stack 0: 0x20
4724	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
4725	 90	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
4726	 92	ADD		 	 
- stack 0: 0x790
4727	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
4728	 94	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
4729	 95	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
4730	 97	SHR		 	 
- stack 1: 0x790
- stack 0: 0x99
4731	 98	JUMP		 	 
- stack 0: 0x790
4732	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x790
4733	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
4734	 9B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
4735	 9C	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
4736	 9E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x99001F
4737	 9F	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x99001F
- stack 0: 0xFFFF
4738	 A2	AND		 	 
- stack 1: 0x790
- stack 0: 0x1F
4739	 A3	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x1F
- stack 0: 0x1
4740	 A5	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x1F
4741	 A6	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x1F
- stack 0: 0x40
4742	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
4743	 AA	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
4744	 AC	ADD		 	 
- stack 0: 0x794
4745	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
4746	 AE	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
4747	 AF	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
- stack 0: 0xF0
4748	 B1	SHR		 	 
- stack 1: 0x794
- stack 0: 0x440
4749	 B2	JUMP		 	 
- stack 0: 0x794
4750	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x794
4751	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
4752	 442	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
4753	 443	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
- stack 0: 0xE0
4754	 445	SHR		 	 
- stack 1: 0x794
- stack 0: 0x4400000
4755	 446	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x4400000
- stack 0: 0xFFFF
4756	 449	AND		 	 
- stack 1: 0x794
- stack 0: 0x0
4757	 44A	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x1
4758	 44C	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x0
4759	 44D	POP		 	 
- stack 0: 0x794
4760	 44E	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
4761	 450	ADD		 	 
- stack 0: 0x798
4762	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
4763	 452	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
4764	 453	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
- stack 0: 0xF0
4765	 455	SHR		 	 
- stack 1: 0x798
- stack 0: 0x440
4766	 456	JUMP		 	 
- stack 0: 0x798
4767	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
4768	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
4769	 442	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
4770	 443	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
- stack 0: 0xE0
4771	 445	SHR		 	 
- stack 1: 0x798
- stack 0: 0x4400000
4772	 446	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x4400000
- stack 0: 0xFFFF
4773	 449	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
4774	 44A	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
4775	 44C	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
4776	 44D	POP		 	 
- stack 0: 0x798
4777	 44E	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
4778	 450	ADD		 	 
- stack 0: 0x79C
4779	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
4780	 452	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A0000
4781	 453	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A0000
- stack 0: 0xF0
4782	 455	SHR		 	 
- stack 1: 0x79C
- stack 0: 0xB3
4783	 456	JUMP		 	 
- stack 0: 0x79C
4784	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x79C
4785	 B4	PUSH2	0020	 	 
- stack 1: 0x79C
- stack 0: 0x20
4786	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x79C
- stack 0: 0x80000000
4787	 B8	PUSH1	03	 	 
- stack 2: 0x79C
- stack 1: 0x80000000
- stack 0: 0x3
4788	 BA	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4789	 BB	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4790	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
4791	 BF	PUSH1	1F	 	 
- stack 3: 0x79C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
4792	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
4793	 C2	SAR		 	 
- stack 1: 0x79C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4794	 C3	PUSH2	0060	 	 
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
4795	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x79C
4796	 C7	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
4797	 C9	ADD		 	 
- stack 0: 0x7A0
4798	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
4799	 CB	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
4800	 CC	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
- stack 0: 0xF0
4801	 CE	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x383
4802	 CF	JUMP		 	 
- stack 0: 0x7A0
4803	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A0
4804	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
4805	 385	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
4806	 386	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
- stack 0: 0xE0
4807	 388	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3830001
4808	 389	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3830001
- stack 0: 0xFFFF
4809	 38C	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x1
4810	 38D	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x1
4811	 38F	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x1
4812	 390	PUSH2	0080	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x80
4813	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x0
4814	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A0
- stack 0: 0x1
4815	 395	PUSH2	0080	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x80
4816	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A0
4817	 399	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
4818	 39B	ADD		 	 
- stack 0: 0x7A4
4819	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
4820	 39D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
4821	 39E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
- stack 0: 0xF0
4822	 3A0	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2
4823	 3A1	JUMP		 	 
- stack 0: 0x7A4
4824	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A4
4825	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
4826	 3A4	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
4827	 3A5	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
- stack 0: 0xE0
4828	 3A7	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x3A20002
4829	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4830	 3AB	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x2
4831	 3AC	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x1
4832	 3AE	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x2
4833	 3AF	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xA0
4834	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A4
4835	 3B3	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
4836	 3B5	ADD		 	 
- stack 0: 0x7A8
4837	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
4838	 3B7	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
4839	 3B8	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
- stack 0: 0xF0
4840	 3BA	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3BC
4841	 3BB	JUMP		 	 
- stack 0: 0x7A8
4842	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A8
4843	 3BD	PUSH2	0080	 	 
- stack 1: 0x7A8
- stack 0: 0x80
4844	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A8
- stack 0: 0x1
4845	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4846	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x1
4847	 3C7	PUSH2	00A0	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0xA0
4848	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x2
4849	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4850	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x2
4851	 3D1	SUB		 	 
- stack 1: 0x7A8
- stack 0: 0x1
4852	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x3DA
4853	 3D5	JUMPI		 	 
- stack 0: 0x7A8
4854	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x7A8
4855	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
4856	 3DC	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
4857	 3DD	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
- stack 0: 0xE0
4858	 3DF	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3BCFFE4
4859	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
4860	 3E3	AND		 	 
- stack 1: 0x7A8
- stack 0: 0xFFE4
4861	 3E4	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0xFFE4
- stack 0: 0x1
4862	 3E6	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4863	 3E7	ADD		 	 
- stack 0: 0x78C
4864	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x78C
- stack 0: 0xFFFFFFFF
4865	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x78C
4866	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
4867	 3EF	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x8600000099001F044000000440000000B300000383000103A2000203BCFFE4
4868	 3F0	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x8600000099001F044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
4869	 3F2	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x86
4870	 3F3	JUMP		 	 
- stack 0: 0x78C
4871	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x78C
4872	 87	PUSH4	80000000	 	 
- stack 1: 0x78C
- stack 0: 0x80000000
4873	 8C	PUSH2	0020	 	 
- stack 2: 0x78C
- stack 1: 0x80000000
- stack 0: 0x20
4874	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x78C
4875	 90	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
4876	 92	ADD		 	 
- stack 0: 0x790
4877	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
4878	 94	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
4879	 95	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
4880	 97	SHR		 	 
- stack 1: 0x790
- stack 0: 0x99
4881	 98	JUMP		 	 
- stack 0: 0x790
4882	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x790
4883	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
4884	 9B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
4885	 9C	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x99001F044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
4886	 9E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x99001F
4887	 9F	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x99001F
- stack 0: 0xFFFF
4888	 A2	AND		 	 
- stack 1: 0x790
- stack 0: 0x1F
4889	 A3	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x1F
- stack 0: 0x1
4890	 A5	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x1F
4891	 A6	PUSH2	0040	 	 
- stack 2: 0x790
- stack 1: 0x1F
- stack 0: 0x40
4892	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x790
4893	 AA	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
4894	 AC	ADD		 	 
- stack 0: 0x794
4895	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
4896	 AE	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
4897	 AF	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
- stack 0: 0xF0
4898	 B1	SHR		 	 
- stack 1: 0x794
- stack 0: 0x440
4899	 B2	JUMP		 	 
- stack 0: 0x794
4900	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x794
4901	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
4902	 442	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
4903	 443	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E3001E
- stack 0: 0xE0
4904	 445	SHR		 	 
- stack 1: 0x794
- stack 0: 0x4400000
4905	 446	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x4400000
- stack 0: 0xFFFF
4906	 449	AND		 	 
- stack 1: 0x794
- stack 0: 0x0
4907	 44A	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x1
4908	 44C	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x0
4909	 44D	POP		 	 
- stack 0: 0x794
4910	 44E	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
4911	 450	ADD		 	 
- stack 0: 0x798
4912	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
4913	 452	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
4914	 453	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
- stack 0: 0xF0
4915	 455	SHR		 	 
- stack 1: 0x798
- stack 0: 0x440
4916	 456	JUMP		 	 
- stack 0: 0x798
4917	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
4918	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
4919	 442	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
4920	 443	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8
- stack 0: 0xE0
4921	 445	SHR		 	 
- stack 1: 0x798
- stack 0: 0x4400000
4922	 446	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x4400000
- stack 0: 0xFFFF
4923	 449	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
4924	 44A	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
4925	 44C	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
4926	 44D	POP		 	 
- stack 0: 0x798
4927	 44E	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
4928	 450	ADD		 	 
- stack 0: 0x79C
4929	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
4930	 452	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A0000
4931	 453	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A0000
- stack 0: 0xF0
4932	 455	SHR		 	 
- stack 1: 0x79C
- stack 0: 0xB3
4933	 456	JUMP		 	 
- stack 0: 0x79C
4934	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x79C
4935	 B4	PUSH2	0020	 	 
- stack 1: 0x79C
- stack 0: 0x20
4936	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x79C
- stack 0: 0x80000000
4937	 B8	PUSH1	03	 	 
- stack 2: 0x79C
- stack 1: 0x80000000
- stack 0: 0x3
4938	 BA	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
4939	 BB	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
4940	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
4941	 BF	PUSH1	1F	 	 
- stack 3: 0x79C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
4942	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
4943	 C2	SAR		 	 
- stack 1: 0x79C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4944	 C3	PUSH2	0060	 	 
- stack 2: 0x79C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
4945	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x79C
4946	 C7	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
4947	 C9	ADD		 	 
- stack 0: 0x7A0
4948	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
4949	 CB	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
4950	 CC	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
- stack 0: 0xF0
4951	 CE	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x383
4952	 CF	JUMP		 	 
- stack 0: 0x7A0
4953	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A0
4954	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
4955	 385	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
4956	 386	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3001E00FD01F8034A000000860000
- stack 0: 0xE0
4957	 388	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3830001
4958	 389	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3830001
- stack 0: 0xFFFF
4959	 38C	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x1
4960	 38D	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x1
4961	 38F	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x1
4962	 390	PUSH2	0080	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x80
4963	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x1
4964	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A0
- stack 0: 0x2
4965	 395	PUSH2	0080	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x80
4966	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A0
4967	 399	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
4968	 39B	ADD		 	 
- stack 0: 0x7A4
4969	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
4970	 39D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
4971	 39E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
- stack 0: 0xF0
4972	 3A0	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2
4973	 3A1	JUMP		 	 
- stack 0: 0x7A4
4974	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A4
4975	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
4976	 3A4	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
4977	 3A5	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3001E00FD01F8034A00000086000004400000
- stack 0: 0xE0
4978	 3A7	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x3A20002
4979	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x3A20002
- stack 0: 0xFFFF
4980	 3AB	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x2
4981	 3AC	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x1
4982	 3AE	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x2
4983	 3AF	PUSH2	00A0	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0xA0
4984	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A4
4985	 3B3	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
4986	 3B5	ADD		 	 
- stack 0: 0x7A8
4987	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
4988	 3B7	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
4989	 3B8	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x3BCFFE40197FFFF00E3001E00FD01F8034A0000008600000440000000990007
- stack 0: 0xF0
4990	 3BA	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3BC
4991	 3BB	JUMP		 	 
- stack 0: 0x7A8
4992	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7A8
4993	 3BD	PUSH2	0080	 	 
- stack 1: 0x7A8
- stack 0: 0x80
4994	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A8
- stack 0: 0x2
4995	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4996	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A8
- stack 0: 0x2
4997	 3C7	PUSH2	00A0	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0xA0
4998	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0x2
4999	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5000	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0x2
5001	 3D1	SUB		 	 
- stack 1: 0x7A8
- stack 0: 0x0
5002	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x7A8
- stack 1: 0x0
- stack 0: 0x3DA
5003	 3D5	JUMPI		 	 
- stack 0: 0x7A8
5004	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x7A8
- stack 0: 0x3F4
5005	 3D9	JUMP		 	 
- stack 0: 0x7A8
5006	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x7A8
5007	 3F5	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5008	 3F7	ADD		 	 
- stack 0: 0x7AC
5009	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5010	 3F9	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x197FFFF00E3001E00FD01F8034A000000860000044000000099000700B30000
5011	 3FA	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x197FFFF00E3001E00FD01F8034A000000860000044000000099000700B30000
- stack 0: 0xF0
5012	 3FC	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x197
5013	 3FD	JUMP		 	 
- stack 0: 0x7AC
5014	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x7AC
5015	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
5016	 199	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x197FFFF00E3001E00FD01F8034A000000860000044000000099000700B30000
5017	 19A	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x197FFFF00E3001E00FD01F8034A000000860000044000000099000700B30000
- stack 0: 0xE0
5018	 19C	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x197FFFF
5019	 19D	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
5020	 1A0	AND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFFF
5021	 1A1	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0xFFFF
- stack 0: 0x1
5022	 1A3	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5023	 1A4	PUSH2	03A0	 	 
- stack 2: 0x7AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
5024	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x7AC
5025	 1A8	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5026	 1AA	ADD		 	 
- stack 0: 0x7B0
5027	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5028	 1AC	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0xE3001E00FD01F8034A000000860000044000000099000700B3000003830001
5029	 1AD	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0xE3001E00FD01F8034A000000860000044000000099000700B3000003830001
- stack 0: 0xF0
5030	 1AF	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0xE3
5031	 1B0	JUMP		 	 
- stack 0: 0x7B0
5032	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7B0
5033	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
5034	 E5	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0xE3001E00FD01F8034A000000860000044000000099000700B3000003830001
5035	 E6	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0xE3001E00FD01F8034A000000860000044000000099000700B3000003830001
- stack 0: 0xE0
5036	 E8	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0xE3001E
5037	 E9	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0xE3001E
- stack 0: 0xFFFF
5038	 EC	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x1E
5039	 ED	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x1E
- stack 0: 0x1
5040	 EF	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x1E
5041	 F0	PUSH2	0380	 	 
- stack 2: 0x7B0
- stack 1: 0x1E
- stack 0: 0x380
5042	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x7B0
5043	 F4	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5044	 F6	ADD		 	 
- stack 0: 0x7B4
5045	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5046	 F8	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0xFD01F8034A000000860000044000000099000700B300000383000103A20002
5047	 F9	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0xFD01F8034A000000860000044000000099000700B300000383000103A20002
- stack 0: 0xF0
5048	 FB	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0xFD
5049	 FC	JUMP		 	 
- stack 0: 0x7B4
5050	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x7B4
5051	 FE	PUSH2	0060	 	 
- stack 1: 0x7B4
- stack 0: 0x60
5052	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5053	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
5054	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0xFFFFFFFF
5055	 108	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
5056	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5057	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
5058	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
5059	 112	SUB		 	 
- stack 1: 0x7B4
- stack 0: 0x0
5060	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x11B
5061	 116	JUMPI		 	 
- stack 0: 0x7B4
5062	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x7B4
- stack 0: 0x135
5063	 11A	JUMP		 	 
- stack 0: 0x7B4
5064	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x7B4
5065	 136	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5066	 138	ADD		 	 
- stack 0: 0x7B8
5067	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5068	 13A	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x34A000000860000044000000099000700B300000383000103A2000203BCFFE8
5069	 13B	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x34A000000860000044000000099000700B300000383000103A2000203BCFFE8
- stack 0: 0xF0
5070	 13D	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x34A
5071	 13E	JUMP		 	 
- stack 0: 0x7B8
5072	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B8
5073	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5074	 34C	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x34A000000860000044000000099000700B300000383000103A2000203BCFFE8
5075	 34D	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x34A000000860000044000000099000700B300000383000103A2000203BCFFE8
- stack 0: 0xE0
5076	 34F	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x34A0000
5077	 350	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x34A0000
- stack 0: 0xFFFF
5078	 353	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x0
5079	 354	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x0
- stack 0: 0x1
5080	 356	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x0
5081	 357	PUSH2	0080	 	 
- stack 2: 0x7B8
- stack 1: 0x0
- stack 0: 0x80
5082	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B8
5083	 35B	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5084	 35D	ADD		 	 
- stack 0: 0x7BC
5085	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5086	 35F	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x860000044000000099000700B300000383000103A2000203BCFFE80152F000
5087	 360	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x860000044000000099000700B300000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
5088	 362	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86
5089	 363	JUMP		 	 
- stack 0: 0x7BC
5090	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x7BC
5091	 87	PUSH4	80000000	 	 
- stack 1: 0x7BC
- stack 0: 0x80000000
5092	 8C	PUSH2	0020	 	 
- stack 2: 0x7BC
- stack 1: 0x80000000
- stack 0: 0x20
5093	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7BC
5094	 90	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5095	 92	ADD		 	 
- stack 0: 0x7C0
5096	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5097	 94	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
5098	 95	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
- stack 0: 0xF0
5099	 97	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x440
5100	 98	JUMP		 	 
- stack 0: 0x7C0
5101	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
5102	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5103	 442	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
5104	 443	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
- stack 0: 0xE0
5105	 445	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x4400000
5106	 446	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x4400000
- stack 0: 0xFFFF
5107	 449	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5108	 44A	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5109	 44C	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5110	 44D	POP		 	 
- stack 0: 0x7C0
5111	 44E	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5112	 450	ADD		 	 
- stack 0: 0x7C4
5113	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5114	 452	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
5115	 453	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
- stack 0: 0xF0
5116	 455	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x99
5117	 456	JUMP		 	 
- stack 0: 0x7C4
5118	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C4
5119	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
5120	 9B	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
5121	 9C	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
- stack 0: 0xE0
5122	 9E	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x990007
5123	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x990007
- stack 0: 0xFFFF
5124	 A2	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x7
5125	 A3	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x7
- stack 0: 0x1
5126	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x7
5127	 A6	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x7
- stack 0: 0x40
5128	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
5129	 AA	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5130	 AC	ADD		 	 
- stack 0: 0x7C8
5131	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5132	 AE	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0xB300000383000103A2000203BCFFE80152F00000E3001F00FD01CC034A0000
5133	 AF	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0xB300000383000103A2000203BCFFE80152F00000E3001F00FD01CC034A0000
- stack 0: 0xF0
5134	 B1	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0xB3
5135	 B2	JUMP		 	 
- stack 0: 0x7C8
5136	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x7C8
5137	 B4	PUSH2	0020	 	 
- stack 1: 0x7C8
- stack 0: 0x20
5138	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C8
- stack 0: 0x80000000
5139	 B8	PUSH1	03	 	 
- stack 2: 0x7C8
- stack 1: 0x80000000
- stack 0: 0x3
5140	 BA	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5141	 BB	PUSH2	0040	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5142	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
5143	 BF	PUSH1	1F	 	 
- stack 3: 0x7C8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
5144	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
5145	 C2	SAR		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
5146	 C3	PUSH2	0060	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
5147	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C8
5148	 C7	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5149	 C9	ADD		 	 
- stack 0: 0x7CC
5150	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5151	 CB	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
5152	 CC	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
- stack 0: 0xF0
5153	 CE	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x383
5154	 CF	JUMP		 	 
- stack 0: 0x7CC
5155	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7CC
5156	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5157	 385	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
5158	 386	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
- stack 0: 0xE0
5159	 388	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3830001
5160	 389	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3830001
- stack 0: 0xFFFF
5161	 38C	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5162	 38D	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5163	 38F	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5164	 390	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5165	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x0
5166	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7CC
- stack 0: 0x1
5167	 395	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5168	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7CC
5169	 399	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5170	 39B	ADD		 	 
- stack 0: 0x7D0
5171	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5172	 39D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
5173	 39E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
- stack 0: 0xF0
5174	 3A0	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2
5175	 3A1	JUMP		 	 
- stack 0: 0x7D0
5176	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D0
5177	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5178	 3A4	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
5179	 3A5	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
- stack 0: 0xE0
5180	 3A7	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3A20002
5181	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3A20002
- stack 0: 0xFFFF
5182	 3AB	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5183	 3AC	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x1
5184	 3AE	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5185	 3AF	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
5186	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D0
5187	 3B3	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5188	 3B5	ADD		 	 
- stack 0: 0x7D4
5189	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5190	 3B7	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
5191	 3B8	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
- stack 0: 0xF0
5192	 3BA	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3BC
5193	 3BB	JUMP		 	 
- stack 0: 0x7D4
5194	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D4
5195	 3BD	PUSH2	0080	 	 
- stack 1: 0x7D4
- stack 0: 0x80
5196	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D4
- stack 0: 0x1
5197	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5198	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D4
- stack 0: 0x1
5199	 3C7	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0xA0
5200	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x2
5201	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5202	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x2
5203	 3D1	SUB		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5204	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x3DA
5205	 3D5	JUMPI		 	 
- stack 0: 0x7D4
5206	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x7D4
5207	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
5208	 3DC	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
5209	 3DD	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
- stack 0: 0xE0
5210	 3DF	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3BCFFE8
5211	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x3BCFFE8
- stack 0: 0xFFFF
5212	 3E3	AND		 	 
- stack 1: 0x7D4
- stack 0: 0xFFE8
5213	 3E4	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0xFFE8
- stack 0: 0x1
5214	 3E6	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5215	 3E7	ADD		 	 
- stack 0: 0x7BC
5216	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFF
5217	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7BC
5218	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5219	 3EF	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x860000044000000099000700B300000383000103A2000203BCFFE80152F000
5220	 3F0	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x860000044000000099000700B300000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
5221	 3F2	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x86
5222	 3F3	JUMP		 	 
- stack 0: 0x7BC
5223	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x7BC
5224	 87	PUSH4	80000000	 	 
- stack 1: 0x7BC
- stack 0: 0x80000000
5225	 8C	PUSH2	0020	 	 
- stack 2: 0x7BC
- stack 1: 0x80000000
- stack 0: 0x20
5226	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7BC
5227	 90	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5228	 92	ADD		 	 
- stack 0: 0x7C0
5229	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5230	 94	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
5231	 95	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
- stack 0: 0xF0
5232	 97	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x440
5233	 98	JUMP		 	 
- stack 0: 0x7C0
5234	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
5235	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5236	 442	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
5237	 443	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x44000000099000700B300000383000103A2000203BCFFE80152F00000E3001F
- stack 0: 0xE0
5238	 445	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x4400000
5239	 446	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x4400000
- stack 0: 0xFFFF
5240	 449	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5241	 44A	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5242	 44C	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5243	 44D	POP		 	 
- stack 0: 0x7C0
5244	 44E	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5245	 450	ADD		 	 
- stack 0: 0x7C4
5246	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5247	 452	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
5248	 453	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
- stack 0: 0xF0
5249	 455	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x99
5250	 456	JUMP		 	 
- stack 0: 0x7C4
5251	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C4
5252	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
5253	 9B	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
5254	 9C	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0x99000700B300000383000103A2000203BCFFE80152F00000E3001F00FD01CC
- stack 0: 0xE0
5255	 9E	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x990007
5256	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x990007
- stack 0: 0xFFFF
5257	 A2	AND		 	 
- stack 1: 0x7C4
- stack 0: 0x7
5258	 A3	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0x7
- stack 0: 0x1
5259	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0x7
5260	 A6	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0x7
- stack 0: 0x40
5261	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
5262	 AA	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5263	 AC	ADD		 	 
- stack 0: 0x7C8
5264	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5265	 AE	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0xB300000383000103A2000203BCFFE80152F00000E3001F00FD01CC034A0000
5266	 AF	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0xB300000383000103A2000203BCFFE80152F00000E3001F00FD01CC034A0000
- stack 0: 0xF0
5267	 B1	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0xB3
5268	 B2	JUMP		 	 
- stack 0: 0x7C8
5269	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x7C8
5270	 B4	PUSH2	0020	 	 
- stack 1: 0x7C8
- stack 0: 0x20
5271	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7C8
- stack 0: 0x80000000
5272	 B8	PUSH1	03	 	 
- stack 2: 0x7C8
- stack 1: 0x80000000
- stack 0: 0x3
5273	 BA	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5274	 BB	PUSH2	0040	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5275	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
5276	 BF	PUSH1	1F	 	 
- stack 3: 0x7C8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
5277	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
5278	 C2	SAR		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
5279	 C3	PUSH2	0060	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
5280	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x7C8
5281	 C7	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5282	 C9	ADD		 	 
- stack 0: 0x7CC
5283	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5284	 CB	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
5285	 CC	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
- stack 0: 0xF0
5286	 CE	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x383
5287	 CF	JUMP		 	 
- stack 0: 0x7CC
5288	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7CC
5289	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5290	 385	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
5291	 386	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3001F00FD01CC034A000000860000
- stack 0: 0xE0
5292	 388	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3830001
5293	 389	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3830001
- stack 0: 0xFFFF
5294	 38C	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5295	 38D	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5296	 38F	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5297	 390	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x80
5298	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5299	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7CC
- stack 0: 0x2
5300	 395	PUSH2	0080	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x80
5301	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7CC
5302	 399	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5303	 39B	ADD		 	 
- stack 0: 0x7D0
5304	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5305	 39D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
5306	 39E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
- stack 0: 0xF0
5307	 3A0	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2
5308	 3A1	JUMP		 	 
- stack 0: 0x7D0
5309	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D0
5310	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5311	 3A4	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
5312	 3A5	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3A2000203BCFFE80152F00000E3001F00FD01CC034A00000086000004400000
- stack 0: 0xE0
5313	 3A7	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3A20002
5314	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3A20002
- stack 0: 0xFFFF
5315	 3AB	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5316	 3AC	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x1
5317	 3AE	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x2
5318	 3AF	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
5319	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D0
5320	 3B3	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5321	 3B5	ADD		 	 
- stack 0: 0x7D4
5322	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5323	 3B7	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
5324	 3B8	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x3BCFFE80152F00000E3001F00FD01CC034A000000860000044000000099000E
- stack 0: 0xF0
5325	 3BA	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x3BC
5326	 3BB	JUMP		 	 
- stack 0: 0x7D4
5327	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7D4
5328	 3BD	PUSH2	0080	 	 
- stack 1: 0x7D4
- stack 0: 0x80
5329	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D4
- stack 0: 0x2
5330	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5331	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D4
- stack 0: 0x2
5332	 3C7	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
5333	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x2
5334	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5335	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x2
5336	 3D1	SUB		 	 
- stack 1: 0x7D4
- stack 0: 0x0
5337	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x7D4
- stack 1: 0x0
- stack 0: 0x3DA
5338	 3D5	JUMPI		 	 
- stack 0: 0x7D4
5339	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x7D4
- stack 0: 0x3F4
5340	 3D9	JUMP		 	 
- stack 0: 0x7D4
5341	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x7D4
5342	 3F5	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5343	 3F7	ADD		 	 
- stack 0: 0x7D8
5344	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5345	 3F9	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x152F00000E3001F00FD01CC034A000000860000044000000099000E04400000
5346	 3FA	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x152F00000E3001F00FD01CC034A000000860000044000000099000E04400000
- stack 0: 0xF0
5347	 3FC	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x152
5348	 3FD	JUMP		 	 
- stack 0: 0x7D8
5349	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x7D8
5350	 153	PUSH4	ff000000	 	 
- stack 1: 0x7D8
- stack 0: 0xFF000000
5351	 158	PUSH2	03A0	 	 
- stack 2: 0x7D8
- stack 1: 0xFF000000
- stack 0: 0x3A0
5352	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x7D8
5353	 15C	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
5354	 15E	ADD		 	 
- stack 0: 0x7DC
5355	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
5356	 160	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xE3001F00FD01CC034A000000860000044000000099000E0440000000B30000
5357	 161	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0xE3001F00FD01CC034A000000860000044000000099000E0440000000B30000
- stack 0: 0xF0
5358	 163	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xE3
5359	 164	JUMP		 	 
- stack 0: 0x7DC
5360	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7DC
5361	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
5362	 E5	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0xE3001F00FD01CC034A000000860000044000000099000E0440000000B30000
5363	 E6	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0xE3001F00FD01CC034A000000860000044000000099000E0440000000B30000
- stack 0: 0xE0
5364	 E8	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0xE3001F
5365	 E9	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0xE3001F
- stack 0: 0xFFFF
5366	 EC	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x1F
5367	 ED	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x1F
- stack 0: 0x1
5368	 EF	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x1F
5369	 F0	PUSH2	0380	 	 
- stack 2: 0x7DC
- stack 1: 0x1F
- stack 0: 0x380
5370	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x7DC
5371	 F4	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
5372	 F6	ADD		 	 
- stack 0: 0x7E0
5373	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
5374	 F8	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0xFD01CC034A000000860000044000000099000E0440000000B3000003830001
5375	 F9	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0xFD01CC034A000000860000044000000099000E0440000000B3000003830001
- stack 0: 0xF0
5376	 FB	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0xFD
5377	 FC	JUMP		 	 
- stack 0: 0x7E0
5378	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x7E0
5379	 FE	PUSH2	0060	 	 
- stack 1: 0x7E0
- stack 0: 0x60
5380	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
5381	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
5382	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0xFF000000
5383	 108	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xFF000000
- stack 0: 0x3A0
5384	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
5385	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
5386	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
5387	 112	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x0
5388	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x11B
5389	 116	JUMPI		 	 
- stack 0: 0x7E0
5390	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x7E0
- stack 0: 0x135
5391	 11A	JUMP		 	 
- stack 0: 0x7E0
5392	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x7E0
5393	 136	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
5394	 138	ADD		 	 
- stack 0: 0x7E4
5395	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
5396	 13A	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x34A000000860000044000000099000E0440000000B300000383000103A20002
5397	 13B	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x34A000000860000044000000099000E0440000000B300000383000103A20002
- stack 0: 0xF0
5398	 13D	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x34A
5399	 13E	JUMP		 	 
- stack 0: 0x7E4
5400	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7E4
5401	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
5402	 34C	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x34A000000860000044000000099000E0440000000B300000383000103A20002
5403	 34D	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x34A000000860000044000000099000E0440000000B300000383000103A20002
- stack 0: 0xE0
5404	 34F	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x34A0000
5405	 350	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x34A0000
- stack 0: 0xFFFF
5406	 353	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
5407	 354	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x1
5408	 356	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
5409	 357	PUSH2	0080	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x80
5410	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x7E4
5411	 35B	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
5412	 35D	ADD		 	 
- stack 0: 0x7E8
5413	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
5414	 35F	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860000044000000099000E0440000000B300000383000103A2000203BCFFE4
5415	 360	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x860000044000000099000E0440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
5416	 362	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
5417	 363	JUMP		 	 
- stack 0: 0x7E8
5418	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x7E8
5419	 87	PUSH4	80000000	 	 
- stack 1: 0x7E8
- stack 0: 0x80000000
5420	 8C	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x80000000
- stack 0: 0x20
5421	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
5422	 90	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
5423	 92	ADD		 	 
- stack 0: 0x7EC
5424	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
5425	 94	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
5426	 95	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
5427	 97	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x440
5428	 98	JUMP		 	 
- stack 0: 0x7EC
5429	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
5430	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
5431	 442	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
5432	 443	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
5433	 445	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x4400000
5434	 446	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x4400000
- stack 0: 0xFFFF
5435	 449	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5436	 44A	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
5437	 44C	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5438	 44D	POP		 	 
- stack 0: 0x7EC
5439	 44E	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
5440	 450	ADD		 	 
- stack 0: 0x7F0
5441	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5442	 452	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
5443	 453	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
- stack 0: 0xF0
5444	 455	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x99
5445	 456	JUMP		 	 
- stack 0: 0x7F0
5446	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F0
5447	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
5448	 9B	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
5449	 9C	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
- stack 0: 0xE0
5450	 9E	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E
5451	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E
- stack 0: 0xFFFF
5452	 A2	AND		 	 
- stack 1: 0x7F0
- stack 0: 0xE
5453	 A3	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0xE
- stack 0: 0x1
5454	 A5	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0xE
5455	 A6	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xE
- stack 0: 0x40
5456	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
5457	 AA	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5458	 AC	ADD		 	 
- stack 0: 0x7F4
5459	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5460	 AE	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
5461	 AF	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
- stack 0: 0xF0
5462	 B1	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x440
5463	 B2	JUMP		 	 
- stack 0: 0x7F4
5464	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F4
5465	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5466	 442	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
5467	 443	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
- stack 0: 0xE0
5468	 445	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x4400000
5469	 446	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x4400000
- stack 0: 0xFFFF
5470	 449	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5471	 44A	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x1
5472	 44C	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5473	 44D	POP		 	 
- stack 0: 0x7F4
5474	 44E	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5475	 450	ADD		 	 
- stack 0: 0x7F8
5476	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5477	 452	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xB300000383000103A2000203BCFFE40165FFE000E3002000FD019C034A0000
5478	 453	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xB300000383000103A2000203BCFFE40165FFE000E3002000FD019C034A0000
- stack 0: 0xF0
5479	 455	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xB3
5480	 456	JUMP		 	 
- stack 0: 0x7F8
5481	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x7F8
5482	 B4	PUSH2	0020	 	 
- stack 1: 0x7F8
- stack 0: 0x20
5483	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F8
- stack 0: 0x80000000
5484	 B8	PUSH1	03	 	 
- stack 2: 0x7F8
- stack 1: 0x80000000
- stack 0: 0x3
5485	 BA	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5486	 BB	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5487	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
5488	 BF	PUSH1	1F	 	 
- stack 3: 0x7F8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
5489	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
5490	 C2	SAR		 	 
- stack 1: 0x7F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
5491	 C3	PUSH2	0060	 	 
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
5492	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F8
5493	 C7	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5494	 C9	ADD		 	 
- stack 0: 0x7FC
5495	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
5496	 CB	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
5497	 CC	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
- stack 0: 0xF0
5498	 CE	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x383
5499	 CF	JUMP		 	 
- stack 0: 0x7FC
5500	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7FC
5501	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
5502	 385	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
5503	 386	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
- stack 0: 0xE0
5504	 388	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3830001
5505	 389	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3830001
- stack 0: 0xFFFF
5506	 38C	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5507	 38D	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
5508	 38F	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5509	 390	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
5510	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x0
5511	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7FC
- stack 0: 0x1
5512	 395	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
5513	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7FC
5514	 399	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
5515	 39B	ADD		 	 
- stack 0: 0x800
5516	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
5517	 39D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
5518	 39E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
- stack 0: 0xF0
5519	 3A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3A2
5520	 3A1	JUMP		 	 
- stack 0: 0x800
5521	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x800
5522	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
5523	 3A4	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
5524	 3A5	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
- stack 0: 0xE0
5525	 3A7	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3A20002
5526	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3A20002
- stack 0: 0xFFFF
5527	 3AB	AND		 	 
- stack 1: 0x800
- stack 0: 0x2
5528	 3AC	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x1
5529	 3AE	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x2
5530	 3AF	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xA0
5531	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x800
5532	 3B3	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
5533	 3B5	ADD		 	 
- stack 0: 0x804
5534	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
5535	 3B7	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
5536	 3B8	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
- stack 0: 0xF0
5537	 3BA	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3BC
5538	 3BB	JUMP		 	 
- stack 0: 0x804
5539	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x804
5540	 3BD	PUSH2	0080	 	 
- stack 1: 0x804
- stack 0: 0x80
5541	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x804
- stack 0: 0x1
5542	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5543	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x804
- stack 0: 0x1
5544	 3C7	PUSH2	00A0	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0xA0
5545	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x2
5546	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x804
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5547	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x2
5548	 3D1	SUB		 	 
- stack 1: 0x804
- stack 0: 0x1
5549	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x3DA
5550	 3D5	JUMPI		 	 
- stack 0: 0x804
5551	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x804
5552	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
5553	 3DC	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
5554	 3DD	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
- stack 0: 0xE0
5555	 3DF	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3BCFFE4
5556	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
5557	 3E3	AND		 	 
- stack 1: 0x804
- stack 0: 0xFFE4
5558	 3E4	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0xFFE4
- stack 0: 0x1
5559	 3E6	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5560	 3E7	ADD		 	 
- stack 0: 0x7E8
5561	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7E8
- stack 0: 0xFFFFFFFF
5562	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7E8
5563	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
5564	 3EF	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x860000044000000099000E0440000000B300000383000103A2000203BCFFE4
5565	 3F0	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x860000044000000099000E0440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
5566	 3F2	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x86
5567	 3F3	JUMP		 	 
- stack 0: 0x7E8
5568	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x7E8
5569	 87	PUSH4	80000000	 	 
- stack 1: 0x7E8
- stack 0: 0x80000000
5570	 8C	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x80000000
- stack 0: 0x20
5571	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
5572	 90	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
5573	 92	ADD		 	 
- stack 0: 0x7EC
5574	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
5575	 94	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
5576	 95	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
5577	 97	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x440
5578	 98	JUMP		 	 
- stack 0: 0x7EC
5579	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7EC
5580	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
5581	 442	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
5582	 443	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x44000000099000E0440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
5583	 445	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x4400000
5584	 446	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x4400000
- stack 0: 0xFFFF
5585	 449	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5586	 44A	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
5587	 44C	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5588	 44D	POP		 	 
- stack 0: 0x7EC
5589	 44E	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
5590	 450	ADD		 	 
- stack 0: 0x7F0
5591	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5592	 452	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
5593	 453	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
- stack 0: 0xF0
5594	 455	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x99
5595	 456	JUMP		 	 
- stack 0: 0x7F0
5596	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F0
5597	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
5598	 9B	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
5599	 9C	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E0440000000B300000383000103A2000203BCFFE40165FFE000E30020
- stack 0: 0xE0
5600	 9E	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x99000E
5601	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x99000E
- stack 0: 0xFFFF
5602	 A2	AND		 	 
- stack 1: 0x7F0
- stack 0: 0xE
5603	 A3	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0xE
- stack 0: 0x1
5604	 A5	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0xE
5605	 A6	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xE
- stack 0: 0x40
5606	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
5607	 AA	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5608	 AC	ADD		 	 
- stack 0: 0x7F4
5609	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5610	 AE	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
5611	 AF	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
- stack 0: 0xF0
5612	 B1	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x440
5613	 B2	JUMP		 	 
- stack 0: 0x7F4
5614	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F4
5615	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5616	 442	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
5617	 443	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002000FD019C
- stack 0: 0xE0
5618	 445	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x4400000
5619	 446	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x4400000
- stack 0: 0xFFFF
5620	 449	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5621	 44A	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x1
5622	 44C	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5623	 44D	POP		 	 
- stack 0: 0x7F4
5624	 44E	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5625	 450	ADD		 	 
- stack 0: 0x7F8
5626	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5627	 452	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0xB300000383000103A2000203BCFFE40165FFE000E3002000FD019C034A0000
5628	 453	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0xB300000383000103A2000203BCFFE40165FFE000E3002000FD019C034A0000
- stack 0: 0xF0
5629	 455	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0xB3
5630	 456	JUMP		 	 
- stack 0: 0x7F8
5631	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x7F8
5632	 B4	PUSH2	0020	 	 
- stack 1: 0x7F8
- stack 0: 0x20
5633	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7F8
- stack 0: 0x80000000
5634	 B8	PUSH1	03	 	 
- stack 2: 0x7F8
- stack 1: 0x80000000
- stack 0: 0x3
5635	 BA	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5636	 BB	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5637	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
5638	 BF	PUSH1	1F	 	 
- stack 3: 0x7F8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
5639	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
5640	 C2	SAR		 	 
- stack 1: 0x7F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
5641	 C3	PUSH2	0060	 	 
- stack 2: 0x7F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
5642	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F8
5643	 C7	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5644	 C9	ADD		 	 
- stack 0: 0x7FC
5645	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
5646	 CB	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
5647	 CC	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
- stack 0: 0xF0
5648	 CE	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x383
5649	 CF	JUMP		 	 
- stack 0: 0x7FC
5650	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7FC
5651	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
5652	 385	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
5653	 386	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002000FD019C034A000000860000
- stack 0: 0xE0
5654	 388	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x3830001
5655	 389	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x3830001
- stack 0: 0xFFFF
5656	 38C	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5657	 38D	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
5658	 38F	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x1
5659	 390	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x80
5660	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x7FC
- stack 1: 0x1
- stack 0: 0x1
5661	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x7FC
- stack 0: 0x2
5662	 395	PUSH2	0080	 	 
- stack 2: 0x7FC
- stack 1: 0x2
- stack 0: 0x80
5663	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x7FC
5664	 399	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
5665	 39B	ADD		 	 
- stack 0: 0x800
5666	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
5667	 39D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
5668	 39E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
- stack 0: 0xF0
5669	 3A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3A2
5670	 3A1	JUMP		 	 
- stack 0: 0x800
5671	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x800
5672	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
5673	 3A4	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
5674	 3A5	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x3A2000203BCFFE40165FFE000E3002000FD019C034A00000086000004400000
- stack 0: 0xE0
5675	 3A7	SHR		 	 
- stack 1: 0x800
- stack 0: 0x3A20002
5676	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x3A20002
- stack 0: 0xFFFF
5677	 3AB	AND		 	 
- stack 1: 0x800
- stack 0: 0x2
5678	 3AC	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x1
5679	 3AE	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0x2
5680	 3AF	PUSH2	00A0	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0xA0
5681	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x800
5682	 3B3	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
5683	 3B5	ADD		 	 
- stack 0: 0x804
5684	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
5685	 3B7	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
5686	 3B8	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3BCFFE40165FFE000E3002000FD019C034A0000008600000440000004400000
- stack 0: 0xF0
5687	 3BA	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3BC
5688	 3BB	JUMP		 	 
- stack 0: 0x804
5689	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x804
5690	 3BD	PUSH2	0080	 	 
- stack 1: 0x804
- stack 0: 0x80
5691	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x804
- stack 0: 0x2
5692	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5693	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x804
- stack 0: 0x2
5694	 3C7	PUSH2	00A0	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0xA0
5695	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x2
5696	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x804
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5697	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x2
5698	 3D1	SUB		 	 
- stack 1: 0x804
- stack 0: 0x0
5699	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x3DA
5700	 3D5	JUMPI		 	 
- stack 0: 0x804
5701	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x804
- stack 0: 0x3F4
5702	 3D9	JUMP		 	 
- stack 0: 0x804
5703	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x804
5704	 3F5	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
5705	 3F7	ADD		 	 
- stack 0: 0x808
5706	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
5707	 3F9	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x165FFE000E3002000FD019C034A00000086000004400000044000000099001F
5708	 3FA	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x165FFE000E3002000FD019C034A00000086000004400000044000000099001F
- stack 0: 0xF0
5709	 3FC	SHR		 	 
- stack 1: 0x808
- stack 0: 0x165
5710	 3FD	JUMP		 	 
- stack 0: 0x808
5711	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x808
5712	 166	PUSH4	fffe0000	 	 
- stack 1: 0x808
- stack 0: 0xFFFE0000
5713	 16B	PUSH2	03A0	 	 
- stack 2: 0x808
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
5714	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x808
5715	 16F	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
5716	 171	ADD		 	 
- stack 0: 0x80C
5717	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
5718	 173	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xE3002000FD019C034A00000086000004400000044000000099001F00B30000
5719	 174	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0xE3002000FD019C034A00000086000004400000044000000099001F00B30000
- stack 0: 0xF0
5720	 176	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xE3
5721	 177	JUMP		 	 
- stack 0: 0x80C
5722	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x80C
5723	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
5724	 E5	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0xE3002000FD019C034A00000086000004400000044000000099001F00B30000
5725	 E6	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0xE3002000FD019C034A00000086000004400000044000000099001F00B30000
- stack 0: 0xE0
5726	 E8	SHR		 	 
- stack 1: 0x80C
- stack 0: 0xE30020
5727	 E9	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0xE30020
- stack 0: 0xFFFF
5728	 EC	AND		 	 
- stack 1: 0x80C
- stack 0: 0x20
5729	 ED	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x20
- stack 0: 0x1
5730	 EF	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x20
5731	 F0	PUSH2	0380	 	 
- stack 2: 0x80C
- stack 1: 0x20
- stack 0: 0x380
5732	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x80C
5733	 F4	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
5734	 F6	ADD		 	 
- stack 0: 0x810
5735	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
5736	 F8	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0xFD019C034A00000086000004400000044000000099001F00B3000003830001
5737	 F9	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0xFD019C034A00000086000004400000044000000099001F00B3000003830001
- stack 0: 0xF0
5738	 FB	SHR		 	 
- stack 1: 0x810
- stack 0: 0xFD
5739	 FC	JUMP		 	 
- stack 0: 0x810
5740	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x810
5741	 FE	PUSH2	0060	 	 
- stack 1: 0x810
- stack 0: 0x60
5742	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x810
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
5743	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x810
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
5744	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x810
- stack 0: 0xFFFE0000
5745	 108	PUSH2	03A0	 	 
- stack 2: 0x810
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
5746	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x810
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
5747	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x810
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
5748	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x810
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
5749	 112	SUB		 	 
- stack 1: 0x810
- stack 0: 0x0
5750	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x810
- stack 1: 0x0
- stack 0: 0x11B
5751	 116	JUMPI		 	 
- stack 0: 0x810
5752	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x810
- stack 0: 0x135
5753	 11A	JUMP		 	 
- stack 0: 0x810
5754	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x810
5755	 136	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
5756	 138	ADD		 	 
- stack 0: 0x814
5757	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
5758	 13A	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34A00000086000004400000044000000099001F00B300000383000103A20002
5759	 13B	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x34A00000086000004400000044000000099001F00B300000383000103A20002
- stack 0: 0xF0
5760	 13D	SHR		 	 
- stack 1: 0x814
- stack 0: 0x34A
5761	 13E	JUMP		 	 
- stack 0: 0x814
5762	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x814
5763	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
5764	 34C	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x34A00000086000004400000044000000099001F00B300000383000103A20002
5765	 34D	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x34A00000086000004400000044000000099001F00B300000383000103A20002
- stack 0: 0xE0
5766	 34F	SHR		 	 
- stack 1: 0x814
- stack 0: 0x34A0000
5767	 350	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x34A0000
- stack 0: 0xFFFF
5768	 353	AND		 	 
- stack 1: 0x814
- stack 0: 0x0
5769	 354	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x1
5770	 356	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x0
5771	 357	PUSH2	0080	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x80
5772	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x814
5773	 35B	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
5774	 35D	ADD		 	 
- stack 0: 0x818
5775	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
5776	 35F	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x86000004400000044000000099001F00B300000383000103A2000203BCFFE4
5777	 360	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x86000004400000044000000099001F00B300000383000103A2000203BCFFE4
- stack 0: 0xF0
5778	 362	SHR		 	 
- stack 1: 0x818
- stack 0: 0x86
5779	 363	JUMP		 	 
- stack 0: 0x818
5780	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x818
5781	 87	PUSH4	80000000	 	 
- stack 1: 0x818
- stack 0: 0x80000000
5782	 8C	PUSH2	0020	 	 
- stack 2: 0x818
- stack 1: 0x80000000
- stack 0: 0x20
5783	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x818
5784	 90	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
5785	 92	ADD		 	 
- stack 0: 0x81C
5786	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
5787	 94	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
5788	 95	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
5789	 97	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x440
5790	 98	JUMP		 	 
- stack 0: 0x81C
5791	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x81C
5792	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
5793	 442	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
5794	 443	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
5795	 445	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x4400000
5796	 446	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x4400000
- stack 0: 0xFFFF
5797	 449	AND		 	 
- stack 1: 0x81C
- stack 0: 0x0
5798	 44A	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x0
- stack 0: 0x1
5799	 44C	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x0
5800	 44D	POP		 	 
- stack 0: 0x81C
5801	 44E	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
5802	 450	ADD		 	 
- stack 0: 0x820
5803	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
5804	 452	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
5805	 453	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
- stack 0: 0xF0
5806	 455	SHR		 	 
- stack 1: 0x820
- stack 0: 0x440
5807	 456	JUMP		 	 
- stack 0: 0x820
5808	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x820
5809	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
5810	 442	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
5811	 443	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
- stack 0: 0xE0
5812	 445	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4400000
5813	 446	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x4400000
- stack 0: 0xFFFF
5814	 449	AND		 	 
- stack 1: 0x820
- stack 0: 0x0
5815	 44A	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1
5816	 44C	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x0
5817	 44D	POP		 	 
- stack 0: 0x820
5818	 44E	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
5819	 450	ADD		 	 
- stack 0: 0x824
5820	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
5821	 452	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
5822	 453	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
- stack 0: 0xF0
5823	 455	SHR		 	 
- stack 1: 0x824
- stack 0: 0x99
5824	 456	JUMP		 	 
- stack 0: 0x824
5825	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x824
5826	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
5827	 9B	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
5828	 9C	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
- stack 0: 0xE0
5829	 9E	SHR		 	 
- stack 1: 0x824
- stack 0: 0x99001F
5830	 9F	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x99001F
- stack 0: 0xFFFF
5831	 A2	AND		 	 
- stack 1: 0x824
- stack 0: 0x1F
5832	 A3	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1F
- stack 0: 0x1
5833	 A5	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1F
5834	 A6	PUSH2	0040	 	 
- stack 2: 0x824
- stack 1: 0x1F
- stack 0: 0x40
5835	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x824
5836	 AA	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
5837	 AC	ADD		 	 
- stack 0: 0x828
5838	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
5839	 AE	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002100FD016C034A0000
5840	 AF	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002100FD016C034A0000
- stack 0: 0xF0
5841	 B1	SHR		 	 
- stack 1: 0x828
- stack 0: 0xB3
5842	 B2	JUMP		 	 
- stack 0: 0x828
5843	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x828
5844	 B4	PUSH2	0020	 	 
- stack 1: 0x828
- stack 0: 0x20
5845	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x828
- stack 0: 0x80000000
5846	 B8	PUSH1	03	 	 
- stack 2: 0x828
- stack 1: 0x80000000
- stack 0: 0x3
5847	 BA	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5848	 BB	PUSH2	0040	 	 
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5849	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
5850	 BF	PUSH1	1F	 	 
- stack 3: 0x828
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
5851	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
5852	 C2	SAR		 	 
- stack 1: 0x828
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5853	 C3	PUSH2	0060	 	 
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
5854	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x828
5855	 C7	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
5856	 C9	ADD		 	 
- stack 0: 0x82C
5857	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
5858	 CB	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
5859	 CC	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
- stack 0: 0xF0
5860	 CE	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x383
5861	 CF	JUMP		 	 
- stack 0: 0x82C
5862	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x82C
5863	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
5864	 385	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
5865	 386	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
- stack 0: 0xE0
5866	 388	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3830001
5867	 389	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3830001
- stack 0: 0xFFFF
5868	 38C	AND		 	 
- stack 1: 0x82C
- stack 0: 0x1
5869	 38D	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x1
5870	 38F	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x1
5871	 390	PUSH2	0080	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x80
5872	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x0
5873	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x82C
- stack 0: 0x1
5874	 395	PUSH2	0080	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x80
5875	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x82C
5876	 399	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
5877	 39B	ADD		 	 
- stack 0: 0x830
5878	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
5879	 39D	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
5880	 39E	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
- stack 0: 0xF0
5881	 3A0	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3A2
5882	 3A1	JUMP		 	 
- stack 0: 0x830
5883	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x830
5884	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
5885	 3A4	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
5886	 3A5	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
- stack 0: 0xE0
5887	 3A7	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3A20002
5888	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x3A20002
- stack 0: 0xFFFF
5889	 3AB	AND		 	 
- stack 1: 0x830
- stack 0: 0x2
5890	 3AC	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x2
- stack 0: 0x1
5891	 3AE	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x2
5892	 3AF	PUSH2	00A0	 	 
- stack 2: 0x830
- stack 1: 0x2
- stack 0: 0xA0
5893	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x830
5894	 3B3	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
5895	 3B5	ADD		 	 
- stack 0: 0x834
5896	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
5897	 3B7	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
5898	 3B8	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
- stack 0: 0xF0
5899	 3BA	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3BC
5900	 3BB	JUMP		 	 
- stack 0: 0x834
5901	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x834
5902	 3BD	PUSH2	0080	 	 
- stack 1: 0x834
- stack 0: 0x80
5903	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x834
- stack 0: 0x1
5904	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5905	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x1
5906	 3C7	PUSH2	00A0	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0xA0
5907	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x2
5908	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x834
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5909	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x2
5910	 3D1	SUB		 	 
- stack 1: 0x834
- stack 0: 0x1
5911	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x3DA
5912	 3D5	JUMPI		 	 
- stack 0: 0x834
5913	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x834
5914	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
5915	 3DC	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
5916	 3DD	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
- stack 0: 0xE0
5917	 3DF	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3BCFFE4
5918	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
5919	 3E3	AND		 	 
- stack 1: 0x834
- stack 0: 0xFFE4
5920	 3E4	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0xFFE4
- stack 0: 0x1
5921	 3E6	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5922	 3E7	ADD		 	 
- stack 0: 0x818
5923	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x818
- stack 0: 0xFFFFFFFF
5924	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x818
5925	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
5926	 3EF	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x86000004400000044000000099001F00B300000383000103A2000203BCFFE4
5927	 3F0	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x86000004400000044000000099001F00B300000383000103A2000203BCFFE4
- stack 0: 0xF0
5928	 3F2	SHR		 	 
- stack 1: 0x818
- stack 0: 0x86
5929	 3F3	JUMP		 	 
- stack 0: 0x818
5930	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x818
5931	 87	PUSH4	80000000	 	 
- stack 1: 0x818
- stack 0: 0x80000000
5932	 8C	PUSH2	0020	 	 
- stack 2: 0x818
- stack 1: 0x80000000
- stack 0: 0x20
5933	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x818
5934	 90	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
5935	 92	ADD		 	 
- stack 0: 0x81C
5936	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
5937	 94	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
5938	 95	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
5939	 97	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x440
5940	 98	JUMP		 	 
- stack 0: 0x81C
5941	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x81C
5942	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
5943	 442	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
5944	 443	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x4400000044000000099001F00B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
5945	 445	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x4400000
5946	 446	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x4400000
- stack 0: 0xFFFF
5947	 449	AND		 	 
- stack 1: 0x81C
- stack 0: 0x0
5948	 44A	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x0
- stack 0: 0x1
5949	 44C	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x0
5950	 44D	POP		 	 
- stack 0: 0x81C
5951	 44E	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
5952	 450	ADD		 	 
- stack 0: 0x820
5953	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
5954	 452	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
5955	 453	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
- stack 0: 0xF0
5956	 455	SHR		 	 
- stack 1: 0x820
- stack 0: 0x440
5957	 456	JUMP		 	 
- stack 0: 0x820
5958	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x820
5959	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
5960	 442	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
5961	 443	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x44000000099001F00B300000383000103A2000203BCFFE40197FFFF00E30021
- stack 0: 0xE0
5962	 445	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4400000
5963	 446	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x4400000
- stack 0: 0xFFFF
5964	 449	AND		 	 
- stack 1: 0x820
- stack 0: 0x0
5965	 44A	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1
5966	 44C	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x0
5967	 44D	POP		 	 
- stack 0: 0x820
5968	 44E	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
5969	 450	ADD		 	 
- stack 0: 0x824
5970	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
5971	 452	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
5972	 453	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
- stack 0: 0xF0
5973	 455	SHR		 	 
- stack 1: 0x824
- stack 0: 0x99
5974	 456	JUMP		 	 
- stack 0: 0x824
5975	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x824
5976	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
5977	 9B	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
5978	 9C	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x99001F00B300000383000103A2000203BCFFE40197FFFF00E3002100FD016C
- stack 0: 0xE0
5979	 9E	SHR		 	 
- stack 1: 0x824
- stack 0: 0x99001F
5980	 9F	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x99001F
- stack 0: 0xFFFF
5981	 A2	AND		 	 
- stack 1: 0x824
- stack 0: 0x1F
5982	 A3	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x1F
- stack 0: 0x1
5983	 A5	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x1F
5984	 A6	PUSH2	0040	 	 
- stack 2: 0x824
- stack 1: 0x1F
- stack 0: 0x40
5985	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x824
5986	 AA	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
5987	 AC	ADD		 	 
- stack 0: 0x828
5988	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
5989	 AE	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002100FD016C034A0000
5990	 AF	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002100FD016C034A0000
- stack 0: 0xF0
5991	 B1	SHR		 	 
- stack 1: 0x828
- stack 0: 0xB3
5992	 B2	JUMP		 	 
- stack 0: 0x828
5993	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x828
5994	 B4	PUSH2	0020	 	 
- stack 1: 0x828
- stack 0: 0x20
5995	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x828
- stack 0: 0x80000000
5996	 B8	PUSH1	03	 	 
- stack 2: 0x828
- stack 1: 0x80000000
- stack 0: 0x3
5997	 BA	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
5998	 BB	PUSH2	0040	 	 
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
5999	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6000	 BF	PUSH1	1F	 	 
- stack 3: 0x828
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
6001	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6002	 C2	SAR		 	 
- stack 1: 0x828
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6003	 C3	PUSH2	0060	 	 
- stack 2: 0x828
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
6004	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x828
6005	 C7	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6006	 C9	ADD		 	 
- stack 0: 0x82C
6007	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6008	 CB	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
6009	 CC	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
- stack 0: 0xF0
6010	 CE	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x383
6011	 CF	JUMP		 	 
- stack 0: 0x82C
6012	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x82C
6013	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6014	 385	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
6015	 386	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002100FD016C034A000000990007
- stack 0: 0xE0
6016	 388	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3830001
6017	 389	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3830001
- stack 0: 0xFFFF
6018	 38C	AND		 	 
- stack 1: 0x82C
- stack 0: 0x1
6019	 38D	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x1
6020	 38F	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x1
6021	 390	PUSH2	0080	 	 
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x80
6022	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x82C
- stack 1: 0x1
- stack 0: 0x1
6023	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x82C
- stack 0: 0x2
6024	 395	PUSH2	0080	 	 
- stack 2: 0x82C
- stack 1: 0x2
- stack 0: 0x80
6025	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x82C
6026	 399	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6027	 39B	ADD		 	 
- stack 0: 0x830
6028	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6029	 39D	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
6030	 39E	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
- stack 0: 0xF0
6031	 3A0	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3A2
6032	 3A1	JUMP		 	 
- stack 0: 0x830
6033	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x830
6034	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
6035	 3A4	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
6036	 3A5	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002100FD016C034A00000099000700860000
- stack 0: 0xE0
6037	 3A7	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3A20002
6038	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6039	 3AB	AND		 	 
- stack 1: 0x830
- stack 0: 0x2
6040	 3AC	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0x2
- stack 0: 0x1
6041	 3AE	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0x2
6042	 3AF	PUSH2	00A0	 	 
- stack 2: 0x830
- stack 1: 0x2
- stack 0: 0xA0
6043	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x830
6044	 3B3	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6045	 3B5	ADD		 	 
- stack 0: 0x834
6046	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6047	 3B7	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
6048	 3B8	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3BCFFE40197FFFF00E3002100FD016C034A0000009900070086000000B30000
- stack 0: 0xF0
6049	 3BA	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3BC
6050	 3BB	JUMP		 	 
- stack 0: 0x834
6051	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x834
6052	 3BD	PUSH2	0080	 	 
- stack 1: 0x834
- stack 0: 0x80
6053	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x834
- stack 0: 0x2
6054	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6055	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x2
6056	 3C7	PUSH2	00A0	 	 
- stack 2: 0x834
- stack 1: 0x2
- stack 0: 0xA0
6057	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x834
- stack 1: 0x2
- stack 0: 0x2
6058	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x834
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6059	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x834
- stack 1: 0x2
- stack 0: 0x2
6060	 3D1	SUB		 	 
- stack 1: 0x834
- stack 0: 0x0
6061	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x3DA
6062	 3D5	JUMPI		 	 
- stack 0: 0x834
6063	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x834
- stack 0: 0x3F4
6064	 3D9	JUMP		 	 
- stack 0: 0x834
6065	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x834
6066	 3F5	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6067	 3F7	ADD		 	 
- stack 0: 0x838
6068	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6069	 3F9	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x197FFFF00E3002100FD016C034A0000009900070086000000B3000003830001
6070	 3FA	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x197FFFF00E3002100FD016C034A0000009900070086000000B3000003830001
- stack 0: 0xF0
6071	 3FC	SHR		 	 
- stack 1: 0x838
- stack 0: 0x197
6072	 3FD	JUMP		 	 
- stack 0: 0x838
6073	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x838
6074	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
6075	 199	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x197FFFF00E3002100FD016C034A0000009900070086000000B3000003830001
6076	 19A	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x197FFFF00E3002100FD016C034A0000009900070086000000B3000003830001
- stack 0: 0xE0
6077	 19C	SHR		 	 
- stack 1: 0x838
- stack 0: 0x197FFFF
6078	 19D	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
6079	 1A0	AND		 	 
- stack 1: 0x838
- stack 0: 0xFFFF
6080	 1A1	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0xFFFF
- stack 0: 0x1
6081	 1A3	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6082	 1A4	PUSH2	03A0	 	 
- stack 2: 0x838
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
6083	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x838
6084	 1A8	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6085	 1AA	ADD		 	 
- stack 0: 0x83C
6086	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6087	 1AC	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0xE3002100FD016C034A0000009900070086000000B300000383000103A20002
6088	 1AD	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0xE3002100FD016C034A0000009900070086000000B300000383000103A20002
- stack 0: 0xF0
6089	 1AF	SHR		 	 
- stack 1: 0x83C
- stack 0: 0xE3
6090	 1B0	JUMP		 	 
- stack 0: 0x83C
6091	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x83C
6092	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6093	 E5	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0xE3002100FD016C034A0000009900070086000000B300000383000103A20002
6094	 E6	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0xE3002100FD016C034A0000009900070086000000B300000383000103A20002
- stack 0: 0xE0
6095	 E8	SHR		 	 
- stack 1: 0x83C
- stack 0: 0xE30021
6096	 E9	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0xE30021
- stack 0: 0xFFFF
6097	 EC	AND		 	 
- stack 1: 0x83C
- stack 0: 0x21
6098	 ED	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x21
- stack 0: 0x1
6099	 EF	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x21
6100	 F0	PUSH2	0380	 	 
- stack 2: 0x83C
- stack 1: 0x21
- stack 0: 0x380
6101	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x83C
6102	 F4	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6103	 F6	ADD		 	 
- stack 0: 0x840
6104	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6105	 F8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xFD016C034A0000009900070086000000B300000383000103A2000203BCFFEC
6106	 F9	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xFD016C034A0000009900070086000000B300000383000103A2000203BCFFEC
- stack 0: 0xF0
6107	 FB	SHR		 	 
- stack 1: 0x840
- stack 0: 0xFD
6108	 FC	JUMP		 	 
- stack 0: 0x840
6109	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x840
6110	 FE	PUSH2	0060	 	 
- stack 1: 0x840
- stack 0: 0x60
6111	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x840
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6112	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x840
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
6113	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x840
- stack 0: 0xFFFFFFFF
6114	 108	PUSH2	03A0	 	 
- stack 2: 0x840
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
6115	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x840
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6116	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x840
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
6117	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x840
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
6118	 112	SUB		 	 
- stack 1: 0x840
- stack 0: 0x0
6119	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x11B
6120	 116	JUMPI		 	 
- stack 0: 0x840
6121	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x840
- stack 0: 0x135
6122	 11A	JUMP		 	 
- stack 0: 0x840
6123	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x840
6124	 136	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6125	 138	ADD		 	 
- stack 0: 0x844
6126	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6127	 13A	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x34A0000009900070086000000B300000383000103A2000203BCFFEC0152F000
6128	 13B	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x34A0000009900070086000000B300000383000103A2000203BCFFEC0152F000
- stack 0: 0xF0
6129	 13D	SHR		 	 
- stack 1: 0x844
- stack 0: 0x34A
6130	 13E	JUMP		 	 
- stack 0: 0x844
6131	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x844
6132	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6133	 34C	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x34A0000009900070086000000B300000383000103A2000203BCFFEC0152F000
6134	 34D	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x34A0000009900070086000000B300000383000103A2000203BCFFEC0152F000
- stack 0: 0xE0
6135	 34F	SHR		 	 
- stack 1: 0x844
- stack 0: 0x34A0000
6136	 350	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x34A0000
- stack 0: 0xFFFF
6137	 353	AND		 	 
- stack 1: 0x844
- stack 0: 0x0
6138	 354	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x1
6139	 356	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x0
6140	 357	PUSH2	0080	 	 
- stack 2: 0x844
- stack 1: 0x0
- stack 0: 0x80
6141	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x844
6142	 35B	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6143	 35D	ADD		 	 
- stack 0: 0x848
6144	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6145	 35F	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
6146	 360	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
- stack 0: 0xF0
6147	 362	SHR		 	 
- stack 1: 0x848
- stack 0: 0x99
6148	 363	JUMP		 	 
- stack 0: 0x848
6149	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x848
6150	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6151	 9B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
6152	 9C	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
- stack 0: 0xE0
6153	 9E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x990007
6154	 9F	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x990007
- stack 0: 0xFFFF
6155	 A2	AND		 	 
- stack 1: 0x848
- stack 0: 0x7
6156	 A3	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x7
- stack 0: 0x1
6157	 A5	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x7
6158	 A6	PUSH2	0040	 	 
- stack 2: 0x848
- stack 1: 0x7
- stack 0: 0x40
6159	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x848
6160	 AA	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6161	 AC	ADD		 	 
- stack 0: 0x84C
6162	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6163	 AE	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x86000000B300000383000103A2000203BCFFEC0152F00000E3002200FD0144
6164	 AF	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x86000000B300000383000103A2000203BCFFEC0152F00000E3002200FD0144
- stack 0: 0xF0
6165	 B1	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x86
6166	 B2	JUMP		 	 
- stack 0: 0x84C
6167	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x84C
6168	 87	PUSH4	80000000	 	 
- stack 1: 0x84C
- stack 0: 0x80000000
6169	 8C	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x80000000
- stack 0: 0x20
6170	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x84C
6171	 90	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6172	 92	ADD		 	 
- stack 0: 0x850
6173	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6174	 94	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xB300000383000103A2000203BCFFEC0152F00000E3002200FD0144034A0000
6175	 95	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xB300000383000103A2000203BCFFEC0152F00000E3002200FD0144034A0000
- stack 0: 0xF0
6176	 97	SHR		 	 
- stack 1: 0x850
- stack 0: 0xB3
6177	 98	JUMP		 	 
- stack 0: 0x850
6178	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x850
6179	 B4	PUSH2	0020	 	 
- stack 1: 0x850
- stack 0: 0x20
6180	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x850
- stack 0: 0x80000000
6181	 B8	PUSH1	03	 	 
- stack 2: 0x850
- stack 1: 0x80000000
- stack 0: 0x3
6182	 BA	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6183	 BB	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6184	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
6185	 BF	PUSH1	1F	 	 
- stack 3: 0x850
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
6186	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
6187	 C2	SAR		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
6188	 C3	PUSH2	0060	 	 
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
6189	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x850
6190	 C7	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6191	 C9	ADD		 	 
- stack 0: 0x854
6192	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6193	 CB	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
6194	 CC	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
- stack 0: 0xF0
6195	 CE	SHR		 	 
- stack 1: 0x854
- stack 0: 0x383
6196	 CF	JUMP		 	 
- stack 0: 0x854
6197	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x854
6198	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6199	 385	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
6200	 386	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
- stack 0: 0xE0
6201	 388	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3830001
6202	 389	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3830001
- stack 0: 0xFFFF
6203	 38C	AND		 	 
- stack 1: 0x854
- stack 0: 0x1
6204	 38D	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
6205	 38F	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x1
6206	 390	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
6207	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x0
6208	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x854
- stack 0: 0x1
6209	 395	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
6210	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
6211	 399	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6212	 39B	ADD		 	 
- stack 0: 0x858
6213	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6214	 39D	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
6215	 39E	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
- stack 0: 0xF0
6216	 3A0	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A2
6217	 3A1	JUMP		 	 
- stack 0: 0x858
6218	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x858
6219	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6220	 3A4	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
6221	 3A5	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
- stack 0: 0xE0
6222	 3A7	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A20002
6223	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6224	 3AB	AND		 	 
- stack 1: 0x858
- stack 0: 0x2
6225	 3AC	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x1
6226	 3AE	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x2
6227	 3AF	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xA0
6228	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x858
6229	 3B3	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6230	 3B5	ADD		 	 
- stack 0: 0x85C
6231	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6232	 3B7	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
6233	 3B8	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
- stack 0: 0xF0
6234	 3BA	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x3BC
6235	 3BB	JUMP		 	 
- stack 0: 0x85C
6236	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x85C
6237	 3BD	PUSH2	0080	 	 
- stack 1: 0x85C
- stack 0: 0x80
6238	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x85C
- stack 0: 0x1
6239	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6240	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x85C
- stack 0: 0x1
6241	 3C7	PUSH2	00A0	 	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0xA0
6242	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x2
6243	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x85C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6244	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x2
6245	 3D1	SUB		 	 
- stack 1: 0x85C
- stack 0: 0x1
6246	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x85C
- stack 1: 0x1
- stack 0: 0x3DA
6247	 3D5	JUMPI		 	 
- stack 0: 0x85C
6248	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x85C
6249	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
6250	 3DC	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
6251	 3DD	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
- stack 0: 0xE0
6252	 3DF	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x3BCFFEC
6253	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x3BCFFEC
- stack 0: 0xFFFF
6254	 3E3	AND		 	 
- stack 1: 0x85C
- stack 0: 0xFFEC
6255	 3E4	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0xFFEC
- stack 0: 0x1
6256	 3E6	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
6257	 3E7	ADD		 	 
- stack 0: 0x848
6258	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x848
- stack 0: 0xFFFFFFFF
6259	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x848
6260	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6261	 3EF	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
6262	 3F0	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
- stack 0: 0xF0
6263	 3F2	SHR		 	 
- stack 1: 0x848
- stack 0: 0x99
6264	 3F3	JUMP		 	 
- stack 0: 0x848
6265	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x848
6266	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6267	 9B	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
6268	 9C	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x9900070086000000B300000383000103A2000203BCFFEC0152F00000E30022
- stack 0: 0xE0
6269	 9E	SHR		 	 
- stack 1: 0x848
- stack 0: 0x990007
6270	 9F	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x990007
- stack 0: 0xFFFF
6271	 A2	AND		 	 
- stack 1: 0x848
- stack 0: 0x7
6272	 A3	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x7
- stack 0: 0x1
6273	 A5	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x7
6274	 A6	PUSH2	0040	 	 
- stack 2: 0x848
- stack 1: 0x7
- stack 0: 0x40
6275	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x848
6276	 AA	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6277	 AC	ADD		 	 
- stack 0: 0x84C
6278	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6279	 AE	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x86000000B300000383000103A2000203BCFFEC0152F00000E3002200FD0144
6280	 AF	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x86000000B300000383000103A2000203BCFFEC0152F00000E3002200FD0144
- stack 0: 0xF0
6281	 B1	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x86
6282	 B2	JUMP		 	 
- stack 0: 0x84C
6283	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x84C
6284	 87	PUSH4	80000000	 	 
- stack 1: 0x84C
- stack 0: 0x80000000
6285	 8C	PUSH2	0020	 	 
- stack 2: 0x84C
- stack 1: 0x80000000
- stack 0: 0x20
6286	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x84C
6287	 90	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6288	 92	ADD		 	 
- stack 0: 0x850
6289	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6290	 94	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xB300000383000103A2000203BCFFEC0152F00000E3002200FD0144034A0000
6291	 95	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xB300000383000103A2000203BCFFEC0152F00000E3002200FD0144034A0000
- stack 0: 0xF0
6292	 97	SHR		 	 
- stack 1: 0x850
- stack 0: 0xB3
6293	 98	JUMP		 	 
- stack 0: 0x850
6294	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x850
6295	 B4	PUSH2	0020	 	 
- stack 1: 0x850
- stack 0: 0x20
6296	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x850
- stack 0: 0x80000000
6297	 B8	PUSH1	03	 	 
- stack 2: 0x850
- stack 1: 0x80000000
- stack 0: 0x3
6298	 BA	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6299	 BB	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6300	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
6301	 BF	PUSH1	1F	 	 
- stack 3: 0x850
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
6302	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
6303	 C2	SAR		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
6304	 C3	PUSH2	0060	 	 
- stack 2: 0x850
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
6305	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x850
6306	 C7	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6307	 C9	ADD		 	 
- stack 0: 0x854
6308	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6309	 CB	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
6310	 CC	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
- stack 0: 0xF0
6311	 CE	SHR		 	 
- stack 1: 0x854
- stack 0: 0x383
6312	 CF	JUMP		 	 
- stack 0: 0x854
6313	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x854
6314	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6315	 385	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
6316	 386	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x383000103A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E
- stack 0: 0xE0
6317	 388	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3830001
6318	 389	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3830001
- stack 0: 0xFFFF
6319	 38C	AND		 	 
- stack 1: 0x854
- stack 0: 0x1
6320	 38D	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
6321	 38F	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x1
6322	 390	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x80
6323	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x854
- stack 1: 0x1
- stack 0: 0x1
6324	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x854
- stack 0: 0x2
6325	 395	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x2
- stack 0: 0x80
6326	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
6327	 399	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6328	 39B	ADD		 	 
- stack 0: 0x858
6329	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6330	 39D	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
6331	 39E	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
- stack 0: 0xF0
6332	 3A0	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A2
6333	 3A1	JUMP		 	 
- stack 0: 0x858
6334	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x858
6335	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6336	 3A4	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
6337	 3A5	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3A2000203BCFFEC0152F00000E3002200FD0144034A00000099000E00860000
- stack 0: 0xE0
6338	 3A7	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A20002
6339	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6340	 3AB	AND		 	 
- stack 1: 0x858
- stack 0: 0x2
6341	 3AC	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0x1
6342	 3AE	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x2
6343	 3AF	PUSH2	00A0	 	 
- stack 2: 0x858
- stack 1: 0x2
- stack 0: 0xA0
6344	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x858
6345	 3B3	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6346	 3B5	ADD		 	 
- stack 0: 0x85C
6347	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6348	 3B7	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
6349	 3B8	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x3BCFFEC0152F00000E3002200FD0144034A00000099000E0086000004400000
- stack 0: 0xF0
6350	 3BA	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x3BC
6351	 3BB	JUMP		 	 
- stack 0: 0x85C
6352	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x85C
6353	 3BD	PUSH2	0080	 	 
- stack 1: 0x85C
- stack 0: 0x80
6354	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x85C
- stack 0: 0x2
6355	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6356	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x85C
- stack 0: 0x2
6357	 3C7	PUSH2	00A0	 	 
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0xA0
6358	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0x2
6359	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x85C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6360	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x85C
- stack 1: 0x2
- stack 0: 0x2
6361	 3D1	SUB		 	 
- stack 1: 0x85C
- stack 0: 0x0
6362	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x85C
- stack 1: 0x0
- stack 0: 0x3DA
6363	 3D5	JUMPI		 	 
- stack 0: 0x85C
6364	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x85C
- stack 0: 0x3F4
6365	 3D9	JUMP		 	 
- stack 0: 0x85C
6366	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x85C
6367	 3F5	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
6368	 3F7	ADD		 	 
- stack 0: 0x860
6369	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
6370	 3F9	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x152F00000E3002200FD0144034A00000099000E008600000440000000B30000
6371	 3FA	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x152F00000E3002200FD0144034A00000099000E008600000440000000B30000
- stack 0: 0xF0
6372	 3FC	SHR		 	 
- stack 1: 0x860
- stack 0: 0x152
6373	 3FD	JUMP		 	 
- stack 0: 0x860
6374	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x860
6375	 153	PUSH4	ff000000	 	 
- stack 1: 0x860
- stack 0: 0xFF000000
6376	 158	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0xFF000000
- stack 0: 0x3A0
6377	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x860
6378	 15C	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
6379	 15E	ADD		 	 
- stack 0: 0x864
6380	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
6381	 160	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0xE3002200FD0144034A00000099000E008600000440000000B3000003830001
6382	 161	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0xE3002200FD0144034A00000099000E008600000440000000B3000003830001
- stack 0: 0xF0
6383	 163	SHR		 	 
- stack 1: 0x864
- stack 0: 0xE3
6384	 164	JUMP		 	 
- stack 0: 0x864
6385	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x864
6386	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
6387	 E5	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0xE3002200FD0144034A00000099000E008600000440000000B3000003830001
6388	 E6	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0xE3002200FD0144034A00000099000E008600000440000000B3000003830001
- stack 0: 0xE0
6389	 E8	SHR		 	 
- stack 1: 0x864
- stack 0: 0xE30022
6390	 E9	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0xE30022
- stack 0: 0xFFFF
6391	 EC	AND		 	 
- stack 1: 0x864
- stack 0: 0x22
6392	 ED	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x22
- stack 0: 0x1
6393	 EF	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x22
6394	 F0	PUSH2	0380	 	 
- stack 2: 0x864
- stack 1: 0x22
- stack 0: 0x380
6395	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x864
6396	 F4	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
6397	 F6	ADD		 	 
- stack 0: 0x868
6398	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
6399	 F8	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0xFD0144034A00000099000E008600000440000000B300000383000103A20002
6400	 F9	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0xFD0144034A00000099000E008600000440000000B300000383000103A20002
- stack 0: 0xF0
6401	 FB	SHR		 	 
- stack 1: 0x868
- stack 0: 0xFD
6402	 FC	JUMP		 	 
- stack 0: 0x868
6403	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x868
6404	 FE	PUSH2	0060	 	 
- stack 1: 0x868
- stack 0: 0x60
6405	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x868
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
6406	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x868
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
6407	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x868
- stack 0: 0xFF000000
6408	 108	PUSH2	03A0	 	 
- stack 2: 0x868
- stack 1: 0xFF000000
- stack 0: 0x3A0
6409	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x868
- stack 1: 0xFF000000
- stack 0: 0xFF000000
6410	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x868
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
6411	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x868
- stack 1: 0xFF000000
- stack 0: 0xFF000000
6412	 112	SUB		 	 
- stack 1: 0x868
- stack 0: 0x0
6413	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x868
- stack 1: 0x0
- stack 0: 0x11B
6414	 116	JUMPI		 	 
- stack 0: 0x868
6415	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x868
- stack 0: 0x135
6416	 11A	JUMP		 	 
- stack 0: 0x868
6417	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x868
6418	 136	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
6419	 138	ADD		 	 
- stack 0: 0x86C
6420	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
6421	 13A	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x34A00000099000E008600000440000000B300000383000103A2000203BCFFE8
6422	 13B	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x34A00000099000E008600000440000000B300000383000103A2000203BCFFE8
- stack 0: 0xF0
6423	 13D	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x34A
6424	 13E	JUMP		 	 
- stack 0: 0x86C
6425	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x86C
6426	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
6427	 34C	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x34A00000099000E008600000440000000B300000383000103A2000203BCFFE8
6428	 34D	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x34A00000099000E008600000440000000B300000383000103A2000203BCFFE8
- stack 0: 0xE0
6429	 34F	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x34A0000
6430	 350	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x34A0000
- stack 0: 0xFFFF
6431	 353	AND		 	 
- stack 1: 0x86C
- stack 0: 0x0
6432	 354	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x1
6433	 356	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x0
6434	 357	PUSH2	0080	 	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x80
6435	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x86C
6436	 35B	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
6437	 35D	ADD		 	 
- stack 0: 0x870
6438	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
6439	 35F	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
6440	 360	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xF0
6441	 362	SHR		 	 
- stack 1: 0x870
- stack 0: 0x99
6442	 363	JUMP		 	 
- stack 0: 0x870
6443	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x870
6444	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
6445	 9B	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
6446	 9C	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xE0
6447	 9E	SHR		 	 
- stack 1: 0x870
- stack 0: 0x99000E
6448	 9F	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x99000E
- stack 0: 0xFFFF
6449	 A2	AND		 	 
- stack 1: 0x870
- stack 0: 0xE
6450	 A3	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0xE
- stack 0: 0x1
6451	 A5	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0xE
6452	 A6	PUSH2	0040	 	 
- stack 2: 0x870
- stack 1: 0xE
- stack 0: 0x40
6453	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x870
6454	 AA	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
6455	 AC	ADD		 	 
- stack 0: 0x874
6456	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
6457	 AE	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x8600000440000000B300000383000103A2000203BCFFE80165FFE000E30023
6458	 AF	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x8600000440000000B300000383000103A2000203BCFFE80165FFE000E30023
- stack 0: 0xF0
6459	 B1	SHR		 	 
- stack 1: 0x874
- stack 0: 0x86
6460	 B2	JUMP		 	 
- stack 0: 0x874
6461	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x874
6462	 87	PUSH4	80000000	 	 
- stack 1: 0x874
- stack 0: 0x80000000
6463	 8C	PUSH2	0020	 	 
- stack 2: 0x874
- stack 1: 0x80000000
- stack 0: 0x20
6464	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x874
6465	 90	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
6466	 92	ADD		 	 
- stack 0: 0x878
6467	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
6468	 94	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
6469	 95	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
- stack 0: 0xF0
6470	 97	SHR		 	 
- stack 1: 0x878
- stack 0: 0x440
6471	 98	JUMP		 	 
- stack 0: 0x878
6472	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
6473	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
6474	 442	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
6475	 443	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
- stack 0: 0xE0
6476	 445	SHR		 	 
- stack 1: 0x878
- stack 0: 0x4400000
6477	 446	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x4400000
- stack 0: 0xFFFF
6478	 449	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
6479	 44A	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
6480	 44C	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
6481	 44D	POP		 	 
- stack 0: 0x878
6482	 44E	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
6483	 450	ADD		 	 
- stack 0: 0x87C
6484	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
6485	 452	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xB300000383000103A2000203BCFFE80165FFE000E3002300FD0118034A0000
6486	 453	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0xB300000383000103A2000203BCFFE80165FFE000E3002300FD0118034A0000
- stack 0: 0xF0
6487	 455	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xB3
6488	 456	JUMP		 	 
- stack 0: 0x87C
6489	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x87C
6490	 B4	PUSH2	0020	 	 
- stack 1: 0x87C
- stack 0: 0x20
6491	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x87C
- stack 0: 0x80000000
6492	 B8	PUSH1	03	 	 
- stack 2: 0x87C
- stack 1: 0x80000000
- stack 0: 0x3
6493	 BA	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6494	 BB	PUSH2	0040	 	 
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6495	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
6496	 BF	PUSH1	1F	 	 
- stack 3: 0x87C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
6497	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
6498	 C2	SAR		 	 
- stack 1: 0x87C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
6499	 C3	PUSH2	0060	 	 
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
6500	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x87C
6501	 C7	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
6502	 C9	ADD		 	 
- stack 0: 0x880
6503	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
6504	 CB	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
6505	 CC	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
- stack 0: 0xF0
6506	 CE	SHR		 	 
- stack 1: 0x880
- stack 0: 0x383
6507	 CF	JUMP		 	 
- stack 0: 0x880
6508	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x880
6509	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
6510	 385	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
6511	 386	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
- stack 0: 0xE0
6512	 388	SHR		 	 
- stack 1: 0x880
- stack 0: 0x3830001
6513	 389	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x3830001
- stack 0: 0xFFFF
6514	 38C	AND		 	 
- stack 1: 0x880
- stack 0: 0x1
6515	 38D	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
6516	 38F	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x1
6517	 390	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
6518	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x0
6519	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x880
- stack 0: 0x1
6520	 395	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
6521	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x880
6522	 399	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
6523	 39B	ADD		 	 
- stack 0: 0x884
6524	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
6525	 39D	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
6526	 39E	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
- stack 0: 0xF0
6527	 3A0	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3A2
6528	 3A1	JUMP		 	 
- stack 0: 0x884
6529	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x884
6530	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
6531	 3A4	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
6532	 3A5	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
- stack 0: 0xE0
6533	 3A7	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3A20002
6534	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6535	 3AB	AND		 	 
- stack 1: 0x884
- stack 0: 0x2
6536	 3AC	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x1
6537	 3AE	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x2
6538	 3AF	PUSH2	00A0	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0xA0
6539	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x884
6540	 3B3	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
6541	 3B5	ADD		 	 
- stack 0: 0x888
6542	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
6543	 3B7	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
6544	 3B8	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
- stack 0: 0xF0
6545	 3BA	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3BC
6546	 3BB	JUMP		 	 
- stack 0: 0x888
6547	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x888
6548	 3BD	PUSH2	0080	 	 
- stack 1: 0x888
- stack 0: 0x80
6549	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x888
- stack 0: 0x1
6550	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6551	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x888
- stack 0: 0x1
6552	 3C7	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0xA0
6553	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x2
6554	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x888
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6555	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x2
6556	 3D1	SUB		 	 
- stack 1: 0x888
- stack 0: 0x1
6557	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x888
- stack 1: 0x1
- stack 0: 0x3DA
6558	 3D5	JUMPI		 	 
- stack 0: 0x888
6559	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x888
6560	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
6561	 3DC	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
6562	 3DD	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
- stack 0: 0xE0
6563	 3DF	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3BCFFE8
6564	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x3BCFFE8
- stack 0: 0xFFFF
6565	 3E3	AND		 	 
- stack 1: 0x888
- stack 0: 0xFFE8
6566	 3E4	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0xFFE8
- stack 0: 0x1
6567	 3E6	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6568	 3E7	ADD		 	 
- stack 0: 0x870
6569	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x870
- stack 0: 0xFFFFFFFF
6570	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x870
6571	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
6572	 3EF	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
6573	 3F0	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xF0
6574	 3F2	SHR		 	 
- stack 1: 0x870
- stack 0: 0x99
6575	 3F3	JUMP		 	 
- stack 0: 0x870
6576	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x870
6577	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
6578	 9B	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
6579	 9C	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0x99000E008600000440000000B300000383000103A2000203BCFFE80165FFE0
- stack 0: 0xE0
6580	 9E	SHR		 	 
- stack 1: 0x870
- stack 0: 0x99000E
6581	 9F	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0x99000E
- stack 0: 0xFFFF
6582	 A2	AND		 	 
- stack 1: 0x870
- stack 0: 0xE
6583	 A3	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0xE
- stack 0: 0x1
6584	 A5	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0xE
6585	 A6	PUSH2	0040	 	 
- stack 2: 0x870
- stack 1: 0xE
- stack 0: 0x40
6586	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x870
6587	 AA	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
6588	 AC	ADD		 	 
- stack 0: 0x874
6589	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
6590	 AE	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x8600000440000000B300000383000103A2000203BCFFE80165FFE000E30023
6591	 AF	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x8600000440000000B300000383000103A2000203BCFFE80165FFE000E30023
- stack 0: 0xF0
6592	 B1	SHR		 	 
- stack 1: 0x874
- stack 0: 0x86
6593	 B2	JUMP		 	 
- stack 0: 0x874
6594	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x874
6595	 87	PUSH4	80000000	 	 
- stack 1: 0x874
- stack 0: 0x80000000
6596	 8C	PUSH2	0020	 	 
- stack 2: 0x874
- stack 1: 0x80000000
- stack 0: 0x20
6597	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x874
6598	 90	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
6599	 92	ADD		 	 
- stack 0: 0x878
6600	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
6601	 94	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
6602	 95	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
- stack 0: 0xF0
6603	 97	SHR		 	 
- stack 1: 0x878
- stack 0: 0x440
6604	 98	JUMP		 	 
- stack 0: 0x878
6605	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x878
6606	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
6607	 442	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
6608	 443	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x440000000B300000383000103A2000203BCFFE80165FFE000E3002300FD0118
- stack 0: 0xE0
6609	 445	SHR		 	 
- stack 1: 0x878
- stack 0: 0x4400000
6610	 446	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x4400000
- stack 0: 0xFFFF
6611	 449	AND		 	 
- stack 1: 0x878
- stack 0: 0x0
6612	 44A	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x1
6613	 44C	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x0
6614	 44D	POP		 	 
- stack 0: 0x878
6615	 44E	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
6616	 450	ADD		 	 
- stack 0: 0x87C
6617	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
6618	 452	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0xB300000383000103A2000203BCFFE80165FFE000E3002300FD0118034A0000
6619	 453	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0xB300000383000103A2000203BCFFE80165FFE000E3002300FD0118034A0000
- stack 0: 0xF0
6620	 455	SHR		 	 
- stack 1: 0x87C
- stack 0: 0xB3
6621	 456	JUMP		 	 
- stack 0: 0x87C
6622	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x87C
6623	 B4	PUSH2	0020	 	 
- stack 1: 0x87C
- stack 0: 0x20
6624	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x87C
- stack 0: 0x80000000
6625	 B8	PUSH1	03	 	 
- stack 2: 0x87C
- stack 1: 0x80000000
- stack 0: 0x3
6626	 BA	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6627	 BB	PUSH2	0040	 	 
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6628	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
6629	 BF	PUSH1	1F	 	 
- stack 3: 0x87C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
6630	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
6631	 C2	SAR		 	 
- stack 1: 0x87C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
6632	 C3	PUSH2	0060	 	 
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
6633	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x87C
6634	 C7	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
6635	 C9	ADD		 	 
- stack 0: 0x880
6636	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
6637	 CB	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
6638	 CC	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
- stack 0: 0xF0
6639	 CE	SHR		 	 
- stack 1: 0x880
- stack 0: 0x383
6640	 CF	JUMP		 	 
- stack 0: 0x880
6641	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x880
6642	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
6643	 385	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
6644	 386	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x383000103A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F
- stack 0: 0xE0
6645	 388	SHR		 	 
- stack 1: 0x880
- stack 0: 0x3830001
6646	 389	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x3830001
- stack 0: 0xFFFF
6647	 38C	AND		 	 
- stack 1: 0x880
- stack 0: 0x1
6648	 38D	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
6649	 38F	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x1
6650	 390	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x80
6651	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x880
- stack 1: 0x1
- stack 0: 0x1
6652	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x880
- stack 0: 0x2
6653	 395	PUSH2	0080	 	 
- stack 2: 0x880
- stack 1: 0x2
- stack 0: 0x80
6654	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x880
6655	 399	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
6656	 39B	ADD		 	 
- stack 0: 0x884
6657	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
6658	 39D	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
6659	 39E	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
- stack 0: 0xF0
6660	 3A0	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3A2
6661	 3A1	JUMP		 	 
- stack 0: 0x884
6662	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x884
6663	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
6664	 3A4	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
6665	 3A5	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x3A2000203BCFFE80165FFE000E3002300FD0118034A00000099001F00860000
- stack 0: 0xE0
6666	 3A7	SHR		 	 
- stack 1: 0x884
- stack 0: 0x3A20002
6667	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6668	 3AB	AND		 	 
- stack 1: 0x884
- stack 0: 0x2
6669	 3AC	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x1
6670	 3AE	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x2
6671	 3AF	PUSH2	00A0	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0xA0
6672	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x884
6673	 3B3	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
6674	 3B5	ADD		 	 
- stack 0: 0x888
6675	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
6676	 3B7	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
6677	 3B8	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x3BCFFE80165FFE000E3002300FD0118034A00000099001F0086000004400000
- stack 0: 0xF0
6678	 3BA	SHR		 	 
- stack 1: 0x888
- stack 0: 0x3BC
6679	 3BB	JUMP		 	 
- stack 0: 0x888
6680	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x888
6681	 3BD	PUSH2	0080	 	 
- stack 1: 0x888
- stack 0: 0x80
6682	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x888
- stack 0: 0x2
6683	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6684	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x888
- stack 0: 0x2
6685	 3C7	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
6686	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x2
6687	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x888
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6688	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x2
6689	 3D1	SUB		 	 
- stack 1: 0x888
- stack 0: 0x0
6690	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x3DA
6691	 3D5	JUMPI		 	 
- stack 0: 0x888
6692	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x888
- stack 0: 0x3F4
6693	 3D9	JUMP		 	 
- stack 0: 0x888
6694	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x888
6695	 3F5	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
6696	 3F7	ADD		 	 
- stack 0: 0x88C
6697	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
6698	 3F9	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x165FFE000E3002300FD0118034A00000099001F008600000440000004400000
6699	 3FA	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x165FFE000E3002300FD0118034A00000099001F008600000440000004400000
- stack 0: 0xF0
6700	 3FC	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x165
6701	 3FD	JUMP		 	 
- stack 0: 0x88C
6702	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x88C
6703	 166	PUSH4	fffe0000	 	 
- stack 1: 0x88C
- stack 0: 0xFFFE0000
6704	 16B	PUSH2	03A0	 	 
- stack 2: 0x88C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
6705	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x88C
6706	 16F	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
6707	 171	ADD		 	 
- stack 0: 0x890
6708	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
6709	 173	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xE3002300FD0118034A00000099001F00860000044000000440000000B30000
6710	 174	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0xE3002300FD0118034A00000099001F00860000044000000440000000B30000
- stack 0: 0xF0
6711	 176	SHR		 	 
- stack 1: 0x890
- stack 0: 0xE3
6712	 177	JUMP		 	 
- stack 0: 0x890
6713	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x890
6714	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
6715	 E5	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0xE3002300FD0118034A00000099001F00860000044000000440000000B30000
6716	 E6	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0xE3002300FD0118034A00000099001F00860000044000000440000000B30000
- stack 0: 0xE0
6717	 E8	SHR		 	 
- stack 1: 0x890
- stack 0: 0xE30023
6718	 E9	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0xE30023
- stack 0: 0xFFFF
6719	 EC	AND		 	 
- stack 1: 0x890
- stack 0: 0x23
6720	 ED	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x23
- stack 0: 0x1
6721	 EF	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x23
6722	 F0	PUSH2	0380	 	 
- stack 2: 0x890
- stack 1: 0x23
- stack 0: 0x380
6723	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x890
6724	 F4	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
6725	 F6	ADD		 	 
- stack 0: 0x894
6726	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
6727	 F8	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0xFD0118034A00000099001F00860000044000000440000000B3000003830001
6728	 F9	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0xFD0118034A00000099001F00860000044000000440000000B3000003830001
- stack 0: 0xF0
6729	 FB	SHR		 	 
- stack 1: 0x894
- stack 0: 0xFD
6730	 FC	JUMP		 	 
- stack 0: 0x894
6731	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x894
6732	 FE	PUSH2	0060	 	 
- stack 1: 0x894
- stack 0: 0x60
6733	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x894
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
6734	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x894
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
6735	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x894
- stack 0: 0xFFFE0000
6736	 108	PUSH2	03A0	 	 
- stack 2: 0x894
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
6737	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x894
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
6738	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x894
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
6739	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x894
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
6740	 112	SUB		 	 
- stack 1: 0x894
- stack 0: 0x0
6741	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x11B
6742	 116	JUMPI		 	 
- stack 0: 0x894
6743	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x894
- stack 0: 0x135
6744	 11A	JUMP		 	 
- stack 0: 0x894
6745	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x894
6746	 136	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
6747	 138	ADD		 	 
- stack 0: 0x898
6748	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
6749	 13A	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x34A00000099001F00860000044000000440000000B300000383000103A20002
6750	 13B	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x34A00000099001F00860000044000000440000000B300000383000103A20002
- stack 0: 0xF0
6751	 13D	SHR		 	 
- stack 1: 0x898
- stack 0: 0x34A
6752	 13E	JUMP		 	 
- stack 0: 0x898
6753	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x898
6754	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
6755	 34C	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x34A00000099001F00860000044000000440000000B300000383000103A20002
6756	 34D	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x34A00000099001F00860000044000000440000000B300000383000103A20002
- stack 0: 0xE0
6757	 34F	SHR		 	 
- stack 1: 0x898
- stack 0: 0x34A0000
6758	 350	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x34A0000
- stack 0: 0xFFFF
6759	 353	AND		 	 
- stack 1: 0x898
- stack 0: 0x0
6760	 354	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x1
6761	 356	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0x0
6762	 357	PUSH2	0080	 	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x80
6763	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x898
6764	 35B	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
6765	 35D	ADD		 	 
- stack 0: 0x89C
6766	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
6767	 35F	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
6768	 360	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
6769	 362	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x99
6770	 363	JUMP		 	 
- stack 0: 0x89C
6771	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x89C
6772	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
6773	 9B	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
6774	 9C	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
6775	 9E	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x99001F
6776	 9F	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0x99001F
- stack 0: 0xFFFF
6777	 A2	AND		 	 
- stack 1: 0x89C
- stack 0: 0x1F
6778	 A3	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x1F
- stack 0: 0x1
6779	 A5	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x1F
6780	 A6	PUSH2	0040	 	 
- stack 2: 0x89C
- stack 1: 0x1F
- stack 0: 0x40
6781	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x89C
6782	 AA	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
6783	 AC	ADD		 	 
- stack 0: 0x8A0
6784	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
6785	 AE	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x860000044000000440000000B300000383000103A2000203BCFFE40197FFFF
6786	 AF	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x860000044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
6787	 B1	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x86
6788	 B2	JUMP		 	 
- stack 0: 0x8A0
6789	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x8A0
6790	 87	PUSH4	80000000	 	 
- stack 1: 0x8A0
- stack 0: 0x80000000
6791	 8C	PUSH2	0020	 	 
- stack 2: 0x8A0
- stack 1: 0x80000000
- stack 0: 0x20
6792	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A0
6793	 90	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
6794	 92	ADD		 	 
- stack 0: 0x8A4
6795	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
6796	 94	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
6797	 95	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
- stack 0: 0xF0
6798	 97	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x440
6799	 98	JUMP		 	 
- stack 0: 0x8A4
6800	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A4
6801	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
6802	 442	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
6803	 443	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
- stack 0: 0xE0
6804	 445	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x4400000
6805	 446	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x4400000
- stack 0: 0xFFFF
6806	 449	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
6807	 44A	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x1
6808	 44C	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
6809	 44D	POP		 	 
- stack 0: 0x8A4
6810	 44E	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
6811	 450	ADD		 	 
- stack 0: 0x8A8
6812	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
6813	 452	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
6814	 453	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
- stack 0: 0xF0
6815	 455	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x440
6816	 456	JUMP		 	 
- stack 0: 0x8A8
6817	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A8
6818	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
6819	 442	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
6820	 443	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
- stack 0: 0xE0
6821	 445	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x4400000
6822	 446	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x4400000
- stack 0: 0xFFFF
6823	 449	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
6824	 44A	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x1
6825	 44C	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
6826	 44D	POP		 	 
- stack 0: 0x8A8
6827	 44E	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
6828	 450	ADD		 	 
- stack 0: 0x8AC
6829	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
6830	 452	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A0000
6831	 453	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A0000
- stack 0: 0xF0
6832	 455	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0xB3
6833	 456	JUMP		 	 
- stack 0: 0x8AC
6834	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x8AC
6835	 B4	PUSH2	0020	 	 
- stack 1: 0x8AC
- stack 0: 0x20
6836	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8AC
- stack 0: 0x80000000
6837	 B8	PUSH1	03	 	 
- stack 2: 0x8AC
- stack 1: 0x80000000
- stack 0: 0x3
6838	 BA	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6839	 BB	PUSH2	0040	 	 
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6840	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6841	 BF	PUSH1	1F	 	 
- stack 3: 0x8AC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
6842	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6843	 C2	SAR		 	 
- stack 1: 0x8AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6844	 C3	PUSH2	0060	 	 
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
6845	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x8AC
6846	 C7	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
6847	 C9	ADD		 	 
- stack 0: 0x8B0
6848	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
6849	 CB	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
6850	 CC	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
- stack 0: 0xF0
6851	 CE	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x383
6852	 CF	JUMP		 	 
- stack 0: 0x8B0
6853	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8B0
6854	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
6855	 385	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
6856	 386	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
- stack 0: 0xE0
6857	 388	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x3830001
6858	 389	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x3830001
- stack 0: 0xFFFF
6859	 38C	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x1
6860	 38D	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x1
6861	 38F	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x1
6862	 390	PUSH2	0080	 	 
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x80
6863	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x0
6864	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x8B0
- stack 0: 0x1
6865	 395	PUSH2	0080	 	 
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x80
6866	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x8B0
6867	 399	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
6868	 39B	ADD		 	 
- stack 0: 0x8B4
6869	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
6870	 39D	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
6871	 39E	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
- stack 0: 0xF0
6872	 3A0	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2
6873	 3A1	JUMP		 	 
- stack 0: 0x8B4
6874	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8B4
6875	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
6876	 3A4	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
6877	 3A5	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
- stack 0: 0xE0
6878	 3A7	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x3A20002
6879	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x3A20002
- stack 0: 0xFFFF
6880	 3AB	AND		 	 
- stack 1: 0x8B4
- stack 0: 0x2
6881	 3AC	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0x1
6882	 3AE	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0x2
6883	 3AF	PUSH2	00A0	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0xA0
6884	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x8B4
6885	 3B3	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
6886	 3B5	ADD		 	 
- stack 0: 0x8B8
6887	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
6888	 3B7	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
6889	 3B8	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
- stack 0: 0xF0
6890	 3BA	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x3BC
6891	 3BB	JUMP		 	 
- stack 0: 0x8B8
6892	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8B8
6893	 3BD	PUSH2	0080	 	 
- stack 1: 0x8B8
- stack 0: 0x80
6894	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x8B8
- stack 0: 0x1
6895	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6896	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B8
- stack 0: 0x1
6897	 3C7	PUSH2	00A0	 	 
- stack 2: 0x8B8
- stack 1: 0x1
- stack 0: 0xA0
6898	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x8B8
- stack 1: 0x1
- stack 0: 0x2
6899	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6900	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B8
- stack 1: 0x1
- stack 0: 0x2
6901	 3D1	SUB		 	 
- stack 1: 0x8B8
- stack 0: 0x1
6902	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x8B8
- stack 1: 0x1
- stack 0: 0x3DA
6903	 3D5	JUMPI		 	 
- stack 0: 0x8B8
6904	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x8B8
6905	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
6906	 3DC	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
6907	 3DD	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
- stack 0: 0xE0
6908	 3DF	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x3BCFFE4
6909	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
6910	 3E3	AND		 	 
- stack 1: 0x8B8
- stack 0: 0xFFE4
6911	 3E4	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0xFFE4
- stack 0: 0x1
6912	 3E6	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6913	 3E7	ADD		 	 
- stack 0: 0x89C
6914	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x89C
- stack 0: 0xFFFFFFFF
6915	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x89C
6916	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
6917	 3EF	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
6918	 3F0	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
6919	 3F2	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x99
6920	 3F3	JUMP		 	 
- stack 0: 0x89C
6921	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x89C
6922	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
6923	 9B	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
6924	 9C	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0x99001F00860000044000000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
6925	 9E	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x99001F
6926	 9F	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0x99001F
- stack 0: 0xFFFF
6927	 A2	AND		 	 
- stack 1: 0x89C
- stack 0: 0x1F
6928	 A3	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x1F
- stack 0: 0x1
6929	 A5	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x1F
6930	 A6	PUSH2	0040	 	 
- stack 2: 0x89C
- stack 1: 0x1F
- stack 0: 0x40
6931	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x89C
6932	 AA	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
6933	 AC	ADD		 	 
- stack 0: 0x8A0
6934	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
6935	 AE	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x860000044000000440000000B300000383000103A2000203BCFFE40197FFFF
6936	 AF	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x860000044000000440000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
6937	 B1	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x86
6938	 B2	JUMP		 	 
- stack 0: 0x8A0
6939	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x8A0
6940	 87	PUSH4	80000000	 	 
- stack 1: 0x8A0
- stack 0: 0x80000000
6941	 8C	PUSH2	0020	 	 
- stack 2: 0x8A0
- stack 1: 0x80000000
- stack 0: 0x20
6942	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A0
6943	 90	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
6944	 92	ADD		 	 
- stack 0: 0x8A4
6945	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
6946	 94	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
6947	 95	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
- stack 0: 0xF0
6948	 97	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x440
6949	 98	JUMP		 	 
- stack 0: 0x8A4
6950	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A4
6951	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
6952	 442	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
6953	 443	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x44000000440000000B300000383000103A2000203BCFFE40197FFFF00E30024
- stack 0: 0xE0
6954	 445	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x4400000
6955	 446	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x4400000
- stack 0: 0xFFFF
6956	 449	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
6957	 44A	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x1
6958	 44C	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x0
6959	 44D	POP		 	 
- stack 0: 0x8A4
6960	 44E	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
6961	 450	ADD		 	 
- stack 0: 0x8A8
6962	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
6963	 452	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
6964	 453	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
- stack 0: 0xF0
6965	 455	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x440
6966	 456	JUMP		 	 
- stack 0: 0x8A8
6967	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8A8
6968	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
6969	 442	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
6970	 443	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0x440000000B300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8
- stack 0: 0xE0
6971	 445	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x4400000
6972	 446	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x4400000
- stack 0: 0xFFFF
6973	 449	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
6974	 44A	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x1
6975	 44C	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
6976	 44D	POP		 	 
- stack 0: 0x8A8
6977	 44E	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
6978	 450	ADD		 	 
- stack 0: 0x8AC
6979	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
6980	 452	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A0000
6981	 453	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A0000
- stack 0: 0xF0
6982	 455	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0xB3
6983	 456	JUMP		 	 
- stack 0: 0x8AC
6984	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x8AC
6985	 B4	PUSH2	0020	 	 
- stack 1: 0x8AC
- stack 0: 0x20
6986	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8AC
- stack 0: 0x80000000
6987	 B8	PUSH1	03	 	 
- stack 2: 0x8AC
- stack 1: 0x80000000
- stack 0: 0x3
6988	 BA	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
6989	 BB	PUSH2	0040	 	 
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
6990	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6991	 BF	PUSH1	1F	 	 
- stack 3: 0x8AC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
6992	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
6993	 C2	SAR		 	 
- stack 1: 0x8AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6994	 C3	PUSH2	0060	 	 
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
6995	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x8AC
6996	 C7	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
6997	 C9	ADD		 	 
- stack 0: 0x8B0
6998	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
6999	 CB	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
7000	 CC	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
- stack 0: 0xF0
7001	 CE	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x383
7002	 CF	JUMP		 	 
- stack 0: 0x8B0
7003	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8B0
7004	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7005	 385	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
7006	 386	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002400FD00E8034A000000990007
- stack 0: 0xE0
7007	 388	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x3830001
7008	 389	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x3830001
- stack 0: 0xFFFF
7009	 38C	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x1
7010	 38D	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x1
7011	 38F	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x1
7012	 390	PUSH2	0080	 	 
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x80
7013	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x8B0
- stack 1: 0x1
- stack 0: 0x1
7014	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x8B0
- stack 0: 0x2
7015	 395	PUSH2	0080	 	 
- stack 2: 0x8B0
- stack 1: 0x2
- stack 0: 0x80
7016	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x8B0
7017	 399	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7018	 39B	ADD		 	 
- stack 0: 0x8B4
7019	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7020	 39D	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
7021	 39E	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
- stack 0: 0xF0
7022	 3A0	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2
7023	 3A1	JUMP		 	 
- stack 0: 0x8B4
7024	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8B4
7025	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
7026	 3A4	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
7027	 3A5	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002400FD00E8034A00000099000704400000
- stack 0: 0xE0
7028	 3A7	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x3A20002
7029	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7030	 3AB	AND		 	 
- stack 1: 0x8B4
- stack 0: 0x2
7031	 3AC	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0x1
7032	 3AE	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0x2
7033	 3AF	PUSH2	00A0	 	 
- stack 2: 0x8B4
- stack 1: 0x2
- stack 0: 0xA0
7034	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x8B4
7035	 3B3	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7036	 3B5	ADD		 	 
- stack 0: 0x8B8
7037	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7038	 3B7	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
7039	 3B8	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x3BCFFE40197FFFF00E3002400FD00E8034A0000009900070440000000860000
- stack 0: 0xF0
7040	 3BA	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x3BC
7041	 3BB	JUMP		 	 
- stack 0: 0x8B8
7042	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8B8
7043	 3BD	PUSH2	0080	 	 
- stack 1: 0x8B8
- stack 0: 0x80
7044	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x8B8
- stack 0: 0x2
7045	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7046	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B8
- stack 0: 0x2
7047	 3C7	PUSH2	00A0	 	 
- stack 2: 0x8B8
- stack 1: 0x2
- stack 0: 0xA0
7048	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x8B8
- stack 1: 0x2
- stack 0: 0x2
7049	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7050	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B8
- stack 1: 0x2
- stack 0: 0x2
7051	 3D1	SUB		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7052	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x3DA
7053	 3D5	JUMPI		 	 
- stack 0: 0x8B8
7054	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x8B8
- stack 0: 0x3F4
7055	 3D9	JUMP		 	 
- stack 0: 0x8B8
7056	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x8B8
7057	 3F5	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7058	 3F7	ADD		 	 
- stack 0: 0x8BC
7059	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7060	 3F9	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x197FFFF00E3002400FD00E8034A000000990007044000000086000000B30000
7061	 3FA	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x197FFFF00E3002400FD00E8034A000000990007044000000086000000B30000
- stack 0: 0xF0
7062	 3FC	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x197
7063	 3FD	JUMP		 	 
- stack 0: 0x8BC
7064	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x8BC
7065	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7066	 199	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x197FFFF00E3002400FD00E8034A000000990007044000000086000000B30000
7067	 19A	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0x197FFFF00E3002400FD00E8034A000000990007044000000086000000B30000
- stack 0: 0xE0
7068	 19C	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x197FFFF
7069	 19D	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
7070	 1A0	AND		 	 
- stack 1: 0x8BC
- stack 0: 0xFFFF
7071	 1A1	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0xFFFF
- stack 0: 0x1
7072	 1A3	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7073	 1A4	PUSH2	03A0	 	 
- stack 2: 0x8BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
7074	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x8BC
7075	 1A8	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7076	 1AA	ADD		 	 
- stack 0: 0x8C0
7077	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7078	 1AC	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xE3002400FD00E8034A000000990007044000000086000000B3000003830001
7079	 1AD	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0xE3002400FD00E8034A000000990007044000000086000000B3000003830001
- stack 0: 0xF0
7080	 1AF	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xE3
7081	 1B0	JUMP		 	 
- stack 0: 0x8C0
7082	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8C0
7083	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C0
- stack 0: 0x8C0
7084	 E5	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xE3002400FD00E8034A000000990007044000000086000000B3000003830001
7085	 E6	PUSH1	E0	 	 
- stack 2: 0x8C0
- stack 1: 0xE3002400FD00E8034A000000990007044000000086000000B3000003830001
- stack 0: 0xE0
7086	 E8	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xE30024
7087	 E9	PUSH2	FFFF	 	 
- stack 2: 0x8C0
- stack 1: 0xE30024
- stack 0: 0xFFFF
7088	 EC	AND		 	 
- stack 1: 0x8C0
- stack 0: 0x24
7089	 ED	PUSH1	01	 	 
- stack 2: 0x8C0
- stack 1: 0x24
- stack 0: 0x1
7090	 EF	SIGNEXTEND		 	 
- stack 1: 0x8C0
- stack 0: 0x24
7091	 F0	PUSH2	0380	 	 
- stack 2: 0x8C0
- stack 1: 0x24
- stack 0: 0x380
7092	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x8C0
7093	 F4	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7094	 F6	ADD		 	 
- stack 0: 0x8C4
7095	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7096	 F8	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0xFD00E8034A000000990007044000000086000000B300000383000103A20002
7097	 F9	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0xFD00E8034A000000990007044000000086000000B300000383000103A20002
- stack 0: 0xF0
7098	 FB	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0xFD
7099	 FC	JUMP		 	 
- stack 0: 0x8C4
7100	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x8C4
7101	 FE	PUSH2	0060	 	 
- stack 1: 0x8C4
- stack 0: 0x60
7102	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x8C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7103	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
7104	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C4
- stack 0: 0xFFFFFFFF
7105	 108	PUSH2	03A0	 	 
- stack 2: 0x8C4
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
7106	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7107	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C4
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
7108	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C4
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
7109	 112	SUB		 	 
- stack 1: 0x8C4
- stack 0: 0x0
7110	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x8C4
- stack 1: 0x0
- stack 0: 0x11B
7111	 116	JUMPI		 	 
- stack 0: 0x8C4
7112	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x8C4
- stack 0: 0x135
7113	 11A	JUMP		 	 
- stack 0: 0x8C4
7114	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x8C4
7115	 136	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7116	 138	ADD		 	 
- stack 0: 0x8C8
7117	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7118	 13A	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x34A000000990007044000000086000000B300000383000103A2000203BCFFE8
7119	 13B	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x34A000000990007044000000086000000B300000383000103A2000203BCFFE8
- stack 0: 0xF0
7120	 13D	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x34A
7121	 13E	JUMP		 	 
- stack 0: 0x8C8
7122	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8C8
7123	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7124	 34C	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x34A000000990007044000000086000000B300000383000103A2000203BCFFE8
7125	 34D	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0x34A000000990007044000000086000000B300000383000103A2000203BCFFE8
- stack 0: 0xE0
7126	 34F	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x34A0000
7127	 350	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x34A0000
- stack 0: 0xFFFF
7128	 353	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7129	 354	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x1
7130	 356	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7131	 357	PUSH2	0080	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x80
7132	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x8C8
7133	 35B	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7134	 35D	ADD		 	 
- stack 0: 0x8CC
7135	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7136	 35F	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
7137	 360	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
7138	 362	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x99
7139	 363	JUMP		 	 
- stack 0: 0x8CC
7140	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8CC
7141	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7142	 9B	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
7143	 9C	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
- stack 0: 0xE0
7144	 9E	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x990007
7145	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x990007
- stack 0: 0xFFFF
7146	 A2	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x7
7147	 A3	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x7
- stack 0: 0x1
7148	 A5	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x7
7149	 A6	PUSH2	0040	 	 
- stack 2: 0x8CC
- stack 1: 0x7
- stack 0: 0x40
7150	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8CC
7151	 AA	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7152	 AC	ADD		 	 
- stack 0: 0x8D0
7153	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7154	 AE	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
7155	 AF	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
- stack 0: 0xF0
7156	 B1	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x440
7157	 B2	JUMP		 	 
- stack 0: 0x8D0
7158	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8D0
7159	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D0
- stack 0: 0x8D0
7160	 442	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
7161	 443	PUSH1	E0	 	 
- stack 2: 0x8D0
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
- stack 0: 0xE0
7162	 445	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x4400000
7163	 446	PUSH2	FFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x4400000
- stack 0: 0xFFFF
7164	 449	AND		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7165	 44A	PUSH1	01	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
7166	 44C	SIGNEXTEND		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7167	 44D	POP		 	 
- stack 0: 0x8D0
7168	 44E	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7169	 450	ADD		 	 
- stack 0: 0x8D4
7170	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7171	 452	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x86000000B300000383000103A2000203BCFFE80152F00000E3002500FD00BC
7172	 453	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x86000000B300000383000103A2000203BCFFE80152F00000E3002500FD00BC
- stack 0: 0xF0
7173	 455	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x86
7174	 456	JUMP		 	 
- stack 0: 0x8D4
7175	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x8D4
7176	 87	PUSH4	80000000	 	 
- stack 1: 0x8D4
- stack 0: 0x80000000
7177	 8C	PUSH2	0020	 	 
- stack 2: 0x8D4
- stack 1: 0x80000000
- stack 0: 0x20
7178	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8D4
7179	 90	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7180	 92	ADD		 	 
- stack 0: 0x8D8
7181	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7182	 94	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xB300000383000103A2000203BCFFE80152F00000E3002500FD00BC034A0000
7183	 95	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xB300000383000103A2000203BCFFE80152F00000E3002500FD00BC034A0000
- stack 0: 0xF0
7184	 97	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xB3
7185	 98	JUMP		 	 
- stack 0: 0x8D8
7186	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x8D8
7187	 B4	PUSH2	0020	 	 
- stack 1: 0x8D8
- stack 0: 0x20
7188	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8D8
- stack 0: 0x80000000
7189	 B8	PUSH1	03	 	 
- stack 2: 0x8D8
- stack 1: 0x80000000
- stack 0: 0x3
7190	 BA	SIGNEXTEND		 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
7191	 BB	PUSH2	0040	 	 
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
7192	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
7193	 BF	PUSH1	1F	 	 
- stack 3: 0x8D8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
7194	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
7195	 C2	SAR		 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
7196	 C3	PUSH2	0060	 	 
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
7197	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x8D8
7198	 C7	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7199	 C9	ADD		 	 
- stack 0: 0x8DC
7200	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7201	 CB	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
7202	 CC	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
- stack 0: 0xF0
7203	 CE	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x383
7204	 CF	JUMP		 	 
- stack 0: 0x8DC
7205	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8DC
7206	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
7207	 385	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
7208	 386	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
- stack 0: 0xE0
7209	 388	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x3830001
7210	 389	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x3830001
- stack 0: 0xFFFF
7211	 38C	AND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7212	 38D	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7213	 38F	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7214	 390	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7215	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x0
7216	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x8DC
- stack 0: 0x1
7217	 395	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7218	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x8DC
7219	 399	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7220	 39B	ADD		 	 
- stack 0: 0x8E0
7221	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7222	 39D	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
7223	 39E	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
- stack 0: 0xF0
7224	 3A0	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2
7225	 3A1	JUMP		 	 
- stack 0: 0x8E0
7226	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8E0
7227	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7228	 3A4	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
7229	 3A5	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
- stack 0: 0xE0
7230	 3A7	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3A20002
7231	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7232	 3AB	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7233	 3AC	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0x1
7234	 3AE	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7235	 3AF	PUSH2	00A0	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0xA0
7236	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x8E0
7237	 3B3	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7238	 3B5	ADD		 	 
- stack 0: 0x8E4
7239	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7240	 3B7	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
7241	 3B8	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
- stack 0: 0xF0
7242	 3BA	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x3BC
7243	 3BB	JUMP		 	 
- stack 0: 0x8E4
7244	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8E4
7245	 3BD	PUSH2	0080	 	 
- stack 1: 0x8E4
- stack 0: 0x80
7246	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x8E4
- stack 0: 0x1
7247	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7248	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8E4
- stack 0: 0x1
7249	 3C7	PUSH2	00A0	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0xA0
7250	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x2
7251	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8E4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7252	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x2
7253	 3D1	SUB		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7254	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x3DA
7255	 3D5	JUMPI		 	 
- stack 0: 0x8E4
7256	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x8E4
7257	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E4
- stack 0: 0x8E4
7258	 3DC	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
7259	 3DD	PUSH1	E0	 	 
- stack 2: 0x8E4
- stack 1: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
- stack 0: 0xE0
7260	 3DF	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x3BCFFE8
7261	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x3BCFFE8
- stack 0: 0xFFFF
7262	 3E3	AND		 	 
- stack 1: 0x8E4
- stack 0: 0xFFE8
7263	 3E4	PUSH1	01	 	 
- stack 2: 0x8E4
- stack 1: 0xFFE8
- stack 0: 0x1
7264	 3E6	SIGNEXTEND		 	 
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
7265	 3E7	ADD		 	 
- stack 0: 0x8CC
7266	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8CC
- stack 0: 0xFFFFFFFF
7267	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8CC
7268	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7269	 3EF	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
7270	 3F0	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
- stack 0: 0xF0
7271	 3F2	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x99
7272	 3F3	JUMP		 	 
- stack 0: 0x8CC
7273	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8CC
7274	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7275	 9B	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
7276	 9C	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x990007044000000086000000B300000383000103A2000203BCFFE80152F000
- stack 0: 0xE0
7277	 9E	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x990007
7278	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x990007
- stack 0: 0xFFFF
7279	 A2	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x7
7280	 A3	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x7
- stack 0: 0x1
7281	 A5	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x7
7282	 A6	PUSH2	0040	 	 
- stack 2: 0x8CC
- stack 1: 0x7
- stack 0: 0x40
7283	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8CC
7284	 AA	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7285	 AC	ADD		 	 
- stack 0: 0x8D0
7286	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7287	 AE	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
7288	 AF	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
- stack 0: 0xF0
7289	 B1	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x440
7290	 B2	JUMP		 	 
- stack 0: 0x8D0
7291	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8D0
7292	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D0
- stack 0: 0x8D0
7293	 442	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
7294	 443	PUSH1	E0	 	 
- stack 2: 0x8D0
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE80152F00000E30025
- stack 0: 0xE0
7295	 445	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x4400000
7296	 446	PUSH2	FFFF	 	 
- stack 2: 0x8D0
- stack 1: 0x4400000
- stack 0: 0xFFFF
7297	 449	AND		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7298	 44A	PUSH1	01	 	 
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
7299	 44C	SIGNEXTEND		 	 
- stack 1: 0x8D0
- stack 0: 0x0
7300	 44D	POP		 	 
- stack 0: 0x8D0
7301	 44E	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7302	 450	ADD		 	 
- stack 0: 0x8D4
7303	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7304	 452	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x86000000B300000383000103A2000203BCFFE80152F00000E3002500FD00BC
7305	 453	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x86000000B300000383000103A2000203BCFFE80152F00000E3002500FD00BC
- stack 0: 0xF0
7306	 455	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x86
7307	 456	JUMP		 	 
- stack 0: 0x8D4
7308	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x8D4
7309	 87	PUSH4	80000000	 	 
- stack 1: 0x8D4
- stack 0: 0x80000000
7310	 8C	PUSH2	0020	 	 
- stack 2: 0x8D4
- stack 1: 0x80000000
- stack 0: 0x20
7311	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8D4
7312	 90	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7313	 92	ADD		 	 
- stack 0: 0x8D8
7314	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7315	 94	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xB300000383000103A2000203BCFFE80152F00000E3002500FD00BC034A0000
7316	 95	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xB300000383000103A2000203BCFFE80152F00000E3002500FD00BC034A0000
- stack 0: 0xF0
7317	 97	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xB3
7318	 98	JUMP		 	 
- stack 0: 0x8D8
7319	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x8D8
7320	 B4	PUSH2	0020	 	 
- stack 1: 0x8D8
- stack 0: 0x20
7321	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8D8
- stack 0: 0x80000000
7322	 B8	PUSH1	03	 	 
- stack 2: 0x8D8
- stack 1: 0x80000000
- stack 0: 0x3
7323	 BA	SIGNEXTEND		 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
7324	 BB	PUSH2	0040	 	 
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
7325	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
7326	 BF	PUSH1	1F	 	 
- stack 3: 0x8D8
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x7
- stack 0: 0x1F
7327	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
7328	 C2	SAR		 	 
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
7329	 C3	PUSH2	0060	 	 
- stack 2: 0x8D8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
7330	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x8D8
7331	 C7	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7332	 C9	ADD		 	 
- stack 0: 0x8DC
7333	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7334	 CB	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
7335	 CC	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
- stack 0: 0xF0
7336	 CE	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x383
7337	 CF	JUMP		 	 
- stack 0: 0x8DC
7338	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8DC
7339	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8DC
- stack 0: 0x8DC
7340	 385	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
7341	 386	PUSH1	E0	 	 
- stack 2: 0x8DC
- stack 1: 0x383000103A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E
- stack 0: 0xE0
7342	 388	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x3830001
7343	 389	PUSH2	FFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x3830001
- stack 0: 0xFFFF
7344	 38C	AND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7345	 38D	PUSH1	01	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7346	 38F	SIGNEXTEND		 	 
- stack 1: 0x8DC
- stack 0: 0x1
7347	 390	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x80
7348	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x8DC
- stack 1: 0x1
- stack 0: 0x1
7349	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x8DC
- stack 0: 0x2
7350	 395	PUSH2	0080	 	 
- stack 2: 0x8DC
- stack 1: 0x2
- stack 0: 0x80
7351	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x8DC
7352	 399	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7353	 39B	ADD		 	 
- stack 0: 0x8E0
7354	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7355	 39D	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
7356	 39E	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
- stack 0: 0xF0
7357	 3A0	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2
7358	 3A1	JUMP		 	 
- stack 0: 0x8E0
7359	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8E0
7360	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7361	 3A4	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
7362	 3A5	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x3A2000203BCFFE80152F00000E3002500FD00BC034A00000099000E04400000
- stack 0: 0xE0
7363	 3A7	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3A20002
7364	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7365	 3AB	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7366	 3AC	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0x1
7367	 3AE	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x2
7368	 3AF	PUSH2	00A0	 	 
- stack 2: 0x8E0
- stack 1: 0x2
- stack 0: 0xA0
7369	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x8E0
7370	 3B3	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7371	 3B5	ADD		 	 
- stack 0: 0x8E4
7372	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7373	 3B7	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
7374	 3B8	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x3BCFFE80152F00000E3002500FD00BC034A00000099000E0440000000860000
- stack 0: 0xF0
7375	 3BA	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x3BC
7376	 3BB	JUMP		 	 
- stack 0: 0x8E4
7377	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8E4
7378	 3BD	PUSH2	0080	 	 
- stack 1: 0x8E4
- stack 0: 0x80
7379	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x8E4
- stack 0: 0x2
7380	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7381	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8E4
- stack 0: 0x2
7382	 3C7	PUSH2	00A0	 	 
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0xA0
7383	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0x2
7384	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8E4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7385	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8E4
- stack 1: 0x2
- stack 0: 0x2
7386	 3D1	SUB		 	 
- stack 1: 0x8E4
- stack 0: 0x0
7387	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x8E4
- stack 1: 0x0
- stack 0: 0x3DA
7388	 3D5	JUMPI		 	 
- stack 0: 0x8E4
7389	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x8E4
- stack 0: 0x3F4
7390	 3D9	JUMP		 	 
- stack 0: 0x8E4
7391	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x8E4
7392	 3F5	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7393	 3F7	ADD		 	 
- stack 0: 0x8E8
7394	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7395	 3F9	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x152F00000E3002500FD00BC034A00000099000E044000000086000004400000
7396	 3FA	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x152F00000E3002500FD00BC034A00000099000E044000000086000004400000
- stack 0: 0xF0
7397	 3FC	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x152
7398	 3FD	JUMP		 	 
- stack 0: 0x8E8
7399	 152	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x8E8
7400	 153	PUSH4	ff000000	 	 
- stack 1: 0x8E8
- stack 0: 0xFF000000
7401	 158	PUSH2	03A0	 	 
- stack 2: 0x8E8
- stack 1: 0xFF000000
- stack 0: 0x3A0
7402	 15B	MSTORE		 	  ;; # store to x29
- stack 0: 0x8E8
7403	 15C	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7404	 15E	ADD		 	 
- stack 0: 0x8EC
7405	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7406	 160	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0xE3002500FD00BC034A00000099000E04400000008600000440000000B30000
7407	 161	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0xE3002500FD00BC034A00000099000E04400000008600000440000000B30000
- stack 0: 0xF0
7408	 163	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0xE3
7409	 164	JUMP		 	 
- stack 0: 0x8EC
7410	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8EC
7411	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8EC
- stack 0: 0x8EC
7412	 E5	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0xE3002500FD00BC034A00000099000E04400000008600000440000000B30000
7413	 E6	PUSH1	E0	 	 
- stack 2: 0x8EC
- stack 1: 0xE3002500FD00BC034A00000099000E04400000008600000440000000B30000
- stack 0: 0xE0
7414	 E8	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0xE30025
7415	 E9	PUSH2	FFFF	 	 
- stack 2: 0x8EC
- stack 1: 0xE30025
- stack 0: 0xFFFF
7416	 EC	AND		 	 
- stack 1: 0x8EC
- stack 0: 0x25
7417	 ED	PUSH1	01	 	 
- stack 2: 0x8EC
- stack 1: 0x25
- stack 0: 0x1
7418	 EF	SIGNEXTEND		 	 
- stack 1: 0x8EC
- stack 0: 0x25
7419	 F0	PUSH2	0380	 	 
- stack 2: 0x8EC
- stack 1: 0x25
- stack 0: 0x380
7420	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x8EC
7421	 F4	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
7422	 F6	ADD		 	 
- stack 0: 0x8F0
7423	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
7424	 F8	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0xFD00BC034A00000099000E04400000008600000440000000B3000003830001
7425	 F9	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0xFD00BC034A00000099000E04400000008600000440000000B3000003830001
- stack 0: 0xF0
7426	 FB	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0xFD
7427	 FC	JUMP		 	 
- stack 0: 0x8F0
7428	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x8F0
7429	 FE	PUSH2	0060	 	 
- stack 1: 0x8F0
- stack 0: 0x60
7430	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x8F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
7431	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
7432	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8F0
- stack 0: 0xFF000000
7433	 108	PUSH2	03A0	 	 
- stack 2: 0x8F0
- stack 1: 0xFF000000
- stack 0: 0x3A0
7434	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x8F0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
7435	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8F0
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
7436	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8F0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
7437	 112	SUB		 	 
- stack 1: 0x8F0
- stack 0: 0x0
7438	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x8F0
- stack 1: 0x0
- stack 0: 0x11B
7439	 116	JUMPI		 	 
- stack 0: 0x8F0
7440	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x8F0
- stack 0: 0x135
7441	 11A	JUMP		 	 
- stack 0: 0x8F0
7442	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x8F0
7443	 136	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7444	 138	ADD		 	 
- stack 0: 0x8F4
7445	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
7446	 13A	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x34A00000099000E04400000008600000440000000B300000383000103A20002
7447	 13B	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x34A00000099000E04400000008600000440000000B300000383000103A20002
- stack 0: 0xF0
7448	 13D	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x34A
7449	 13E	JUMP		 	 
- stack 0: 0x8F4
7450	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8F4
7451	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F4
- stack 0: 0x8F4
7452	 34C	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x34A00000099000E04400000008600000440000000B300000383000103A20002
7453	 34D	PUSH1	E0	 	 
- stack 2: 0x8F4
- stack 1: 0x34A00000099000E04400000008600000440000000B300000383000103A20002
- stack 0: 0xE0
7454	 34F	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x34A0000
7455	 350	PUSH2	FFFF	 	 
- stack 2: 0x8F4
- stack 1: 0x34A0000
- stack 0: 0xFFFF
7456	 353	AND		 	 
- stack 1: 0x8F4
- stack 0: 0x0
7457	 354	PUSH1	01	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x1
7458	 356	SIGNEXTEND		 	 
- stack 1: 0x8F4
- stack 0: 0x0
7459	 357	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x80
7460	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x8F4
7461	 35B	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
7462	 35D	ADD		 	 
- stack 0: 0x8F8
7463	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7464	 35F	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
7465	 360	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
7466	 362	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x99
7467	 363	JUMP		 	 
- stack 0: 0x8F8
7468	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8F8
7469	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
7470	 9B	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
7471	 9C	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
7472	 9E	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E
7473	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E
- stack 0: 0xFFFF
7474	 A2	AND		 	 
- stack 1: 0x8F8
- stack 0: 0xE
7475	 A3	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0xE
- stack 0: 0x1
7476	 A5	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0xE
7477	 A6	PUSH2	0040	 	 
- stack 2: 0x8F8
- stack 1: 0xE
- stack 0: 0x40
7478	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8F8
7479	 AA	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
7480	 AC	ADD		 	 
- stack 0: 0x8FC
7481	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
7482	 AE	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
7483	 AF	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
7484	 B1	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x440
7485	 B2	JUMP		 	 
- stack 0: 0x8FC
7486	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8FC
7487	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8FC
- stack 0: 0x8FC
7488	 442	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
7489	 443	PUSH1	E0	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
7490	 445	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000
7491	 446	PUSH2	FFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000
- stack 0: 0xFFFF
7492	 449	AND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7493	 44A	PUSH1	01	 	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x1
7494	 44C	SIGNEXTEND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7495	 44D	POP		 	 
- stack 0: 0x8FC
7496	 44E	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
7497	 450	ADD		 	 
- stack 0: 0x900
7498	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
7499	 452	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x8600000440000000B300000383000103A2000203BCFFE40165FFE000E30026
7500	 453	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x8600000440000000B300000383000103A2000203BCFFE40165FFE000E30026
- stack 0: 0xF0
7501	 455	SHR		 	 
- stack 1: 0x900
- stack 0: 0x86
7502	 456	JUMP		 	 
- stack 0: 0x900
7503	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x900
7504	 87	PUSH4	80000000	 	 
- stack 1: 0x900
- stack 0: 0x80000000
7505	 8C	PUSH2	0020	 	 
- stack 2: 0x900
- stack 1: 0x80000000
- stack 0: 0x20
7506	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x900
7507	 90	PUSH1	04	 	 
- stack 1: 0x900
- stack 0: 0x4
7508	 92	ADD		 	 
- stack 0: 0x904
7509	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
7510	 94	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
7511	 95	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
- stack 0: 0xF0
7512	 97	SHR		 	 
- stack 1: 0x904
- stack 0: 0x440
7513	 98	JUMP		 	 
- stack 0: 0x904
7514	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x904
7515	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x904
- stack 0: 0x904
7516	 442	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
7517	 443	PUSH1	E0	 	 
- stack 2: 0x904
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
- stack 0: 0xE0
7518	 445	SHR		 	 
- stack 1: 0x904
- stack 0: 0x4400000
7519	 446	PUSH2	FFFF	 	 
- stack 2: 0x904
- stack 1: 0x4400000
- stack 0: 0xFFFF
7520	 449	AND		 	 
- stack 1: 0x904
- stack 0: 0x0
7521	 44A	PUSH1	01	 	 
- stack 2: 0x904
- stack 1: 0x0
- stack 0: 0x1
7522	 44C	SIGNEXTEND		 	 
- stack 1: 0x904
- stack 0: 0x0
7523	 44D	POP		 	 
- stack 0: 0x904
7524	 44E	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
7525	 450	ADD		 	 
- stack 0: 0x908
7526	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
7527	 452	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0xB300000383000103A2000203BCFFE40165FFE000E3002600FD008C034A0000
7528	 453	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0xB300000383000103A2000203BCFFE40165FFE000E3002600FD008C034A0000
- stack 0: 0xF0
7529	 455	SHR		 	 
- stack 1: 0x908
- stack 0: 0xB3
7530	 456	JUMP		 	 
- stack 0: 0x908
7531	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x908
7532	 B4	PUSH2	0020	 	 
- stack 1: 0x908
- stack 0: 0x20
7533	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x908
- stack 0: 0x80000000
7534	 B8	PUSH1	03	 	 
- stack 2: 0x908
- stack 1: 0x80000000
- stack 0: 0x3
7535	 BA	SIGNEXTEND		 	 
- stack 1: 0x908
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
7536	 BB	PUSH2	0040	 	 
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
7537	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
7538	 BF	PUSH1	1F	 	 
- stack 3: 0x908
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
7539	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
7540	 C2	SAR		 	 
- stack 1: 0x908
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
7541	 C3	PUSH2	0060	 	 
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
7542	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x908
7543	 C7	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
7544	 C9	ADD		 	 
- stack 0: 0x90C
7545	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
7546	 CB	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
7547	 CC	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
- stack 0: 0xF0
7548	 CE	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x383
7549	 CF	JUMP		 	 
- stack 0: 0x90C
7550	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x90C
7551	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x90C
- stack 0: 0x90C
7552	 385	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
7553	 386	PUSH1	E0	 	 
- stack 2: 0x90C
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
- stack 0: 0xE0
7554	 388	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x3830001
7555	 389	PUSH2	FFFF	 	 
- stack 2: 0x90C
- stack 1: 0x3830001
- stack 0: 0xFFFF
7556	 38C	AND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7557	 38D	PUSH1	01	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
7558	 38F	SIGNEXTEND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7559	 390	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
7560	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x0
7561	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x90C
- stack 0: 0x1
7562	 395	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
7563	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x90C
7564	 399	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
7565	 39B	ADD		 	 
- stack 0: 0x910
7566	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7567	 39D	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
7568	 39E	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
- stack 0: 0xF0
7569	 3A0	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3A2
7570	 3A1	JUMP		 	 
- stack 0: 0x910
7571	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x910
7572	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
7573	 3A4	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
7574	 3A5	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
- stack 0: 0xE0
7575	 3A7	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3A20002
7576	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7577	 3AB	AND		 	 
- stack 1: 0x910
- stack 0: 0x2
7578	 3AC	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0x1
7579	 3AE	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x2
7580	 3AF	PUSH2	00A0	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0xA0
7581	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x910
7582	 3B3	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7583	 3B5	ADD		 	 
- stack 0: 0x914
7584	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
7585	 3B7	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
7586	 3B8	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
- stack 0: 0xF0
7587	 3BA	SHR		 	 
- stack 1: 0x914
- stack 0: 0x3BC
7588	 3BB	JUMP		 	 
- stack 0: 0x914
7589	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x914
7590	 3BD	PUSH2	0080	 	 
- stack 1: 0x914
- stack 0: 0x80
7591	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x914
- stack 0: 0x1
7592	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7593	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x914
- stack 0: 0x1
7594	 3C7	PUSH2	00A0	 	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0xA0
7595	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x2
7596	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x914
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7597	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x2
7598	 3D1	SUB		 	 
- stack 1: 0x914
- stack 0: 0x1
7599	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x914
- stack 1: 0x1
- stack 0: 0x3DA
7600	 3D5	JUMPI		 	 
- stack 0: 0x914
7601	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x914
7602	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x914
- stack 0: 0x914
7603	 3DC	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
7604	 3DD	PUSH1	E0	 	 
- stack 2: 0x914
- stack 1: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
- stack 0: 0xE0
7605	 3DF	SHR		 	 
- stack 1: 0x914
- stack 0: 0x3BCFFE4
7606	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x914
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
7607	 3E3	AND		 	 
- stack 1: 0x914
- stack 0: 0xFFE4
7608	 3E4	PUSH1	01	 	 
- stack 2: 0x914
- stack 1: 0xFFE4
- stack 0: 0x1
7609	 3E6	SIGNEXTEND		 	 
- stack 1: 0x914
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7610	 3E7	ADD		 	 
- stack 0: 0x8F8
7611	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8F8
- stack 0: 0xFFFFFFFF
7612	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8F8
7613	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7614	 3EF	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
7615	 3F0	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
7616	 3F2	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x99
7617	 3F3	JUMP		 	 
- stack 0: 0x8F8
7618	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8F8
7619	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
7620	 9B	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
7621	 9C	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E04400000008600000440000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
7622	 9E	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x99000E
7623	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0x99000E
- stack 0: 0xFFFF
7624	 A2	AND		 	 
- stack 1: 0x8F8
- stack 0: 0xE
7625	 A3	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0xE
- stack 0: 0x1
7626	 A5	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0xE
7627	 A6	PUSH2	0040	 	 
- stack 2: 0x8F8
- stack 1: 0xE
- stack 0: 0x40
7628	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8F8
7629	 AA	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
7630	 AC	ADD		 	 
- stack 0: 0x8FC
7631	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
7632	 AE	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
7633	 AF	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xF0
7634	 B1	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x440
7635	 B2	JUMP		 	 
- stack 0: 0x8FC
7636	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8FC
7637	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8FC
- stack 0: 0x8FC
7638	 442	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
7639	 443	PUSH1	E0	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000008600000440000000B300000383000103A2000203BCFFE40165FFE0
- stack 0: 0xE0
7640	 445	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x4400000
7641	 446	PUSH2	FFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x4400000
- stack 0: 0xFFFF
7642	 449	AND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7643	 44A	PUSH1	01	 	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x1
7644	 44C	SIGNEXTEND		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7645	 44D	POP		 	 
- stack 0: 0x8FC
7646	 44E	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
7647	 450	ADD		 	 
- stack 0: 0x900
7648	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
7649	 452	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x8600000440000000B300000383000103A2000203BCFFE40165FFE000E30026
7650	 453	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x8600000440000000B300000383000103A2000203BCFFE40165FFE000E30026
- stack 0: 0xF0
7651	 455	SHR		 	 
- stack 1: 0x900
- stack 0: 0x86
7652	 456	JUMP		 	 
- stack 0: 0x900
7653	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x900
7654	 87	PUSH4	80000000	 	 
- stack 1: 0x900
- stack 0: 0x80000000
7655	 8C	PUSH2	0020	 	 
- stack 2: 0x900
- stack 1: 0x80000000
- stack 0: 0x20
7656	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x900
7657	 90	PUSH1	04	 	 
- stack 1: 0x900
- stack 0: 0x4
7658	 92	ADD		 	 
- stack 0: 0x904
7659	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
7660	 94	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
7661	 95	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
- stack 0: 0xF0
7662	 97	SHR		 	 
- stack 1: 0x904
- stack 0: 0x440
7663	 98	JUMP		 	 
- stack 0: 0x904
7664	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x904
7665	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x904
- stack 0: 0x904
7666	 442	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
7667	 443	PUSH1	E0	 	 
- stack 2: 0x904
- stack 1: 0x440000000B300000383000103A2000203BCFFE40165FFE000E3002600FD008C
- stack 0: 0xE0
7668	 445	SHR		 	 
- stack 1: 0x904
- stack 0: 0x4400000
7669	 446	PUSH2	FFFF	 	 
- stack 2: 0x904
- stack 1: 0x4400000
- stack 0: 0xFFFF
7670	 449	AND		 	 
- stack 1: 0x904
- stack 0: 0x0
7671	 44A	PUSH1	01	 	 
- stack 2: 0x904
- stack 1: 0x0
- stack 0: 0x1
7672	 44C	SIGNEXTEND		 	 
- stack 1: 0x904
- stack 0: 0x0
7673	 44D	POP		 	 
- stack 0: 0x904
7674	 44E	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
7675	 450	ADD		 	 
- stack 0: 0x908
7676	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
7677	 452	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0xB300000383000103A2000203BCFFE40165FFE000E3002600FD008C034A0000
7678	 453	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0xB300000383000103A2000203BCFFE40165FFE000E3002600FD008C034A0000
- stack 0: 0xF0
7679	 455	SHR		 	 
- stack 1: 0x908
- stack 0: 0xB3
7680	 456	JUMP		 	 
- stack 0: 0x908
7681	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x908
7682	 B4	PUSH2	0020	 	 
- stack 1: 0x908
- stack 0: 0x20
7683	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x908
- stack 0: 0x80000000
7684	 B8	PUSH1	03	 	 
- stack 2: 0x908
- stack 1: 0x80000000
- stack 0: 0x3
7685	 BA	SIGNEXTEND		 	 
- stack 1: 0x908
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
7686	 BB	PUSH2	0040	 	 
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
7687	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
7688	 BF	PUSH1	1F	 	 
- stack 3: 0x908
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xE
- stack 0: 0x1F
7689	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
7690	 C2	SAR		 	 
- stack 1: 0x908
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
7691	 C3	PUSH2	0060	 	 
- stack 2: 0x908
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
7692	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x908
7693	 C7	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
7694	 C9	ADD		 	 
- stack 0: 0x90C
7695	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
7696	 CB	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
7697	 CC	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
- stack 0: 0xF0
7698	 CE	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x383
7699	 CF	JUMP		 	 
- stack 0: 0x90C
7700	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x90C
7701	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x90C
- stack 0: 0x90C
7702	 385	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
7703	 386	PUSH1	E0	 	 
- stack 2: 0x90C
- stack 1: 0x383000103A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F
- stack 0: 0xE0
7704	 388	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x3830001
7705	 389	PUSH2	FFFF	 	 
- stack 2: 0x90C
- stack 1: 0x3830001
- stack 0: 0xFFFF
7706	 38C	AND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7707	 38D	PUSH1	01	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
7708	 38F	SIGNEXTEND		 	 
- stack 1: 0x90C
- stack 0: 0x1
7709	 390	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x80
7710	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x90C
- stack 1: 0x1
- stack 0: 0x1
7711	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x90C
- stack 0: 0x2
7712	 395	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x2
- stack 0: 0x80
7713	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x90C
7714	 399	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
7715	 39B	ADD		 	 
- stack 0: 0x910
7716	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7717	 39D	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
7718	 39E	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
- stack 0: 0xF0
7719	 3A0	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3A2
7720	 3A1	JUMP		 	 
- stack 0: 0x910
7721	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x910
7722	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
7723	 3A4	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
7724	 3A5	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x3A2000203BCFFE40165FFE000E3002600FD008C034A00000099001F04400000
- stack 0: 0xE0
7725	 3A7	SHR		 	 
- stack 1: 0x910
- stack 0: 0x3A20002
7726	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7727	 3AB	AND		 	 
- stack 1: 0x910
- stack 0: 0x2
7728	 3AC	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0x1
7729	 3AE	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x2
7730	 3AF	PUSH2	00A0	 	 
- stack 2: 0x910
- stack 1: 0x2
- stack 0: 0xA0
7731	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x910
7732	 3B3	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7733	 3B5	ADD		 	 
- stack 0: 0x914
7734	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
7735	 3B7	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
7736	 3B8	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x3BCFFE40165FFE000E3002600FD008C034A00000099001F0440000004400000
- stack 0: 0xF0
7737	 3BA	SHR		 	 
- stack 1: 0x914
- stack 0: 0x3BC
7738	 3BB	JUMP		 	 
- stack 0: 0x914
7739	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x914
7740	 3BD	PUSH2	0080	 	 
- stack 1: 0x914
- stack 0: 0x80
7741	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x914
- stack 0: 0x2
7742	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7743	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x914
- stack 0: 0x2
7744	 3C7	PUSH2	00A0	 	 
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0xA0
7745	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0x2
7746	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x914
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7747	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x914
- stack 1: 0x2
- stack 0: 0x2
7748	 3D1	SUB		 	 
- stack 1: 0x914
- stack 0: 0x0
7749	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x914
- stack 1: 0x0
- stack 0: 0x3DA
7750	 3D5	JUMPI		 	 
- stack 0: 0x914
7751	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x914
- stack 0: 0x3F4
7752	 3D9	JUMP		 	 
- stack 0: 0x914
7753	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x914
7754	 3F5	PUSH1	04	 	 
- stack 1: 0x914
- stack 0: 0x4
7755	 3F7	ADD		 	 
- stack 0: 0x918
7756	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x918
- stack 0: 0x918
7757	 3F9	MLOAD		 	 
- stack 1: 0x918
- stack 0: 0x165FFE000E3002600FD008C034A00000099001F044000000440000000860000
7758	 3FA	PUSH1	F0	 	 
- stack 2: 0x918
- stack 1: 0x165FFE000E3002600FD008C034A00000099001F044000000440000000860000
- stack 0: 0xF0
7759	 3FC	SHR		 	 
- stack 1: 0x918
- stack 0: 0x165
7760	 3FD	JUMP		 	 
- stack 0: 0x918
7761	 165	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x918
7762	 166	PUSH4	fffe0000	 	 
- stack 1: 0x918
- stack 0: 0xFFFE0000
7763	 16B	PUSH2	03A0	 	 
- stack 2: 0x918
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
7764	 16E	MSTORE		 	  ;; # store to x29
- stack 0: 0x918
7765	 16F	PUSH1	04	 	 
- stack 1: 0x918
- stack 0: 0x4
7766	 171	ADD		 	 
- stack 0: 0x91C
7767	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x91C
- stack 0: 0x91C
7768	 173	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0xE3002600FD008C034A00000099001F04400000044000000086000000B30000
7769	 174	PUSH1	F0	 	 
- stack 2: 0x91C
- stack 1: 0xE3002600FD008C034A00000099001F04400000044000000086000000B30000
- stack 0: 0xF0
7770	 176	SHR		 	 
- stack 1: 0x91C
- stack 0: 0xE3
7771	 177	JUMP		 	 
- stack 0: 0x91C
7772	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x91C
7773	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x91C
- stack 0: 0x91C
7774	 E5	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0xE3002600FD008C034A00000099001F04400000044000000086000000B30000
7775	 E6	PUSH1	E0	 	 
- stack 2: 0x91C
- stack 1: 0xE3002600FD008C034A00000099001F04400000044000000086000000B30000
- stack 0: 0xE0
7776	 E8	SHR		 	 
- stack 1: 0x91C
- stack 0: 0xE30026
7777	 E9	PUSH2	FFFF	 	 
- stack 2: 0x91C
- stack 1: 0xE30026
- stack 0: 0xFFFF
7778	 EC	AND		 	 
- stack 1: 0x91C
- stack 0: 0x26
7779	 ED	PUSH1	01	 	 
- stack 2: 0x91C
- stack 1: 0x26
- stack 0: 0x1
7780	 EF	SIGNEXTEND		 	 
- stack 1: 0x91C
- stack 0: 0x26
7781	 F0	PUSH2	0380	 	 
- stack 2: 0x91C
- stack 1: 0x26
- stack 0: 0x380
7782	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x91C
7783	 F4	PUSH1	04	 	 
- stack 1: 0x91C
- stack 0: 0x4
7784	 F6	ADD		 	 
- stack 0: 0x920
7785	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x920
- stack 0: 0x920
7786	 F8	MLOAD		 	 
- stack 1: 0x920
- stack 0: 0xFD008C034A00000099001F04400000044000000086000000B3000003830001
7787	 F9	PUSH1	F0	 	 
- stack 2: 0x920
- stack 1: 0xFD008C034A00000099001F04400000044000000086000000B3000003830001
- stack 0: 0xF0
7788	 FB	SHR		 	 
- stack 1: 0x920
- stack 0: 0xFD
7789	 FC	JUMP		 	 
- stack 0: 0x920
7790	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x920
7791	 FE	PUSH2	0060	 	 
- stack 1: 0x920
- stack 0: 0x60
7792	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x920
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
7793	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x920
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
7794	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x920
- stack 0: 0xFFFE0000
7795	 108	PUSH2	03A0	 	 
- stack 2: 0x920
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
7796	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x920
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
7797	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x920
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
7798	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x920
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
7799	 112	SUB		 	 
- stack 1: 0x920
- stack 0: 0x0
7800	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x920
- stack 1: 0x0
- stack 0: 0x11B
7801	 116	JUMPI		 	 
- stack 0: 0x920
7802	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x920
- stack 0: 0x135
7803	 11A	JUMP		 	 
- stack 0: 0x920
7804	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x920
7805	 136	PUSH1	04	 	 
- stack 1: 0x920
- stack 0: 0x4
7806	 138	ADD		 	 
- stack 0: 0x924
7807	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x924
- stack 0: 0x924
7808	 13A	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x34A00000099001F04400000044000000086000000B300000383000103A20002
7809	 13B	PUSH1	F0	 	 
- stack 2: 0x924
- stack 1: 0x34A00000099001F04400000044000000086000000B300000383000103A20002
- stack 0: 0xF0
7810	 13D	SHR		 	 
- stack 1: 0x924
- stack 0: 0x34A
7811	 13E	JUMP		 	 
- stack 0: 0x924
7812	 34A	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x924
7813	 34B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x924
- stack 0: 0x924
7814	 34C	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x34A00000099001F04400000044000000086000000B300000383000103A20002
7815	 34D	PUSH1	E0	 	 
- stack 2: 0x924
- stack 1: 0x34A00000099001F04400000044000000086000000B300000383000103A20002
- stack 0: 0xE0
7816	 34F	SHR		 	 
- stack 1: 0x924
- stack 0: 0x34A0000
7817	 350	PUSH2	FFFF	 	 
- stack 2: 0x924
- stack 1: 0x34A0000
- stack 0: 0xFFFF
7818	 353	AND		 	 
- stack 1: 0x924
- stack 0: 0x0
7819	 354	PUSH1	01	 	 
- stack 2: 0x924
- stack 1: 0x0
- stack 0: 0x1
7820	 356	SIGNEXTEND		 	 
- stack 1: 0x924
- stack 0: 0x0
7821	 357	PUSH2	0080	 	 
- stack 2: 0x924
- stack 1: 0x0
- stack 0: 0x80
7822	 35A	MSTORE		 	  ;; # store to x4
- stack 0: 0x924
7823	 35B	PUSH1	04	 	 
- stack 1: 0x924
- stack 0: 0x4
7824	 35D	ADD		 	 
- stack 0: 0x928
7825	 35E	DUP1		 	  ;; # executing pc
- stack 1: 0x928
- stack 0: 0x928
7826	 35F	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
7827	 360	PUSH1	F0	 	 
- stack 2: 0x928
- stack 1: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
7828	 362	SHR		 	 
- stack 1: 0x928
- stack 0: 0x99
7829	 363	JUMP		 	 
- stack 0: 0x928
7830	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x928
7831	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x928
- stack 0: 0x928
7832	 9B	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
7833	 9C	PUSH1	E0	 	 
- stack 2: 0x928
- stack 1: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
7834	 9E	SHR		 	 
- stack 1: 0x928
- stack 0: 0x99001F
7835	 9F	PUSH2	FFFF	 	 
- stack 2: 0x928
- stack 1: 0x99001F
- stack 0: 0xFFFF
7836	 A2	AND		 	 
- stack 1: 0x928
- stack 0: 0x1F
7837	 A3	PUSH1	01	 	 
- stack 2: 0x928
- stack 1: 0x1F
- stack 0: 0x1
7838	 A5	SIGNEXTEND		 	 
- stack 1: 0x928
- stack 0: 0x1F
7839	 A6	PUSH2	0040	 	 
- stack 2: 0x928
- stack 1: 0x1F
- stack 0: 0x40
7840	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x928
7841	 AA	PUSH1	04	 	 
- stack 1: 0x928
- stack 0: 0x4
7842	 AC	ADD		 	 
- stack 0: 0x92C
7843	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x92C
- stack 0: 0x92C
7844	 AE	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
7845	 AF	PUSH1	F0	 	 
- stack 2: 0x92C
- stack 1: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
7846	 B1	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x440
7847	 B2	JUMP		 	 
- stack 0: 0x92C
7848	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x92C
7849	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x92C
- stack 0: 0x92C
7850	 442	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
7851	 443	PUSH1	E0	 	 
- stack 2: 0x92C
- stack 1: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
7852	 445	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x4400000
7853	 446	PUSH2	FFFF	 	 
- stack 2: 0x92C
- stack 1: 0x4400000
- stack 0: 0xFFFF
7854	 449	AND		 	 
- stack 1: 0x92C
- stack 0: 0x0
7855	 44A	PUSH1	01	 	 
- stack 2: 0x92C
- stack 1: 0x0
- stack 0: 0x1
7856	 44C	SIGNEXTEND		 	 
- stack 1: 0x92C
- stack 0: 0x0
7857	 44D	POP		 	 
- stack 0: 0x92C
7858	 44E	PUSH1	04	 	 
- stack 1: 0x92C
- stack 0: 0x4
7859	 450	ADD		 	 
- stack 0: 0x930
7860	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x930
- stack 0: 0x930
7861	 452	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
7862	 453	PUSH1	F0	 	 
- stack 2: 0x930
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
- stack 0: 0xF0
7863	 455	SHR		 	 
- stack 1: 0x930
- stack 0: 0x440
7864	 456	JUMP		 	 
- stack 0: 0x930
7865	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x930
7866	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x930
- stack 0: 0x930
7867	 442	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
7868	 443	PUSH1	E0	 	 
- stack 2: 0x930
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
- stack 0: 0xE0
7869	 445	SHR		 	 
- stack 1: 0x930
- stack 0: 0x4400000
7870	 446	PUSH2	FFFF	 	 
- stack 2: 0x930
- stack 1: 0x4400000
- stack 0: 0xFFFF
7871	 449	AND		 	 
- stack 1: 0x930
- stack 0: 0x0
7872	 44A	PUSH1	01	 	 
- stack 2: 0x930
- stack 1: 0x0
- stack 0: 0x1
7873	 44C	SIGNEXTEND		 	 
- stack 1: 0x930
- stack 0: 0x0
7874	 44D	POP		 	 
- stack 0: 0x930
7875	 44E	PUSH1	04	 	 
- stack 1: 0x930
- stack 0: 0x4
7876	 450	ADD		 	 
- stack 0: 0x934
7877	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x934
- stack 0: 0x934
7878	 452	MLOAD		 	 
- stack 1: 0x934
- stack 0: 0x86000000B300000383000103A2000203BCFFE40197FFFF00E3002700FD005C
7879	 453	PUSH1	F0	 	 
- stack 2: 0x934
- stack 1: 0x86000000B300000383000103A2000203BCFFE40197FFFF00E3002700FD005C
- stack 0: 0xF0
7880	 455	SHR		 	 
- stack 1: 0x934
- stack 0: 0x86
7881	 456	JUMP		 	 
- stack 0: 0x934
7882	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x934
7883	 87	PUSH4	80000000	 	 
- stack 1: 0x934
- stack 0: 0x80000000
7884	 8C	PUSH2	0020	 	 
- stack 2: 0x934
- stack 1: 0x80000000
- stack 0: 0x20
7885	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x934
7886	 90	PUSH1	04	 	 
- stack 1: 0x934
- stack 0: 0x4
7887	 92	ADD		 	 
- stack 0: 0x938
7888	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x938
- stack 0: 0x938
7889	 94	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F
7890	 95	PUSH1	F0	 	 
- stack 2: 0x938
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F
- stack 0: 0xF0
7891	 97	SHR		 	 
- stack 1: 0x938
- stack 0: 0xB3
7892	 98	JUMP		 	 
- stack 0: 0x938
7893	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x938
7894	 B4	PUSH2	0020	 	 
- stack 1: 0x938
- stack 0: 0x20
7895	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x938
- stack 0: 0x80000000
7896	 B8	PUSH1	03	 	 
- stack 2: 0x938
- stack 1: 0x80000000
- stack 0: 0x3
7897	 BA	SIGNEXTEND		 	 
- stack 1: 0x938
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
7898	 BB	PUSH2	0040	 	 
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
7899	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
7900	 BF	PUSH1	1F	 	 
- stack 3: 0x938
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
7901	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
7902	 C2	SAR		 	 
- stack 1: 0x938
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7903	 C3	PUSH2	0060	 	 
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
7904	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x938
7905	 C7	PUSH1	04	 	 
- stack 1: 0x938
- stack 0: 0x4
7906	 C9	ADD		 	 
- stack 0: 0x93C
7907	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x93C
- stack 0: 0x93C
7908	 CB	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
7909	 CC	PUSH1	F0	 	 
- stack 2: 0x93C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
- stack 0: 0xF0
7910	 CE	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x383
7911	 CF	JUMP		 	 
- stack 0: 0x93C
7912	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x93C
7913	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x93C
- stack 0: 0x93C
7914	 385	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
7915	 386	PUSH1	E0	 	 
- stack 2: 0x93C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
- stack 0: 0xE0
7916	 388	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x3830001
7917	 389	PUSH2	FFFF	 	 
- stack 2: 0x93C
- stack 1: 0x3830001
- stack 0: 0xFFFF
7918	 38C	AND		 	 
- stack 1: 0x93C
- stack 0: 0x1
7919	 38D	PUSH1	01	 	 
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x1
7920	 38F	SIGNEXTEND		 	 
- stack 1: 0x93C
- stack 0: 0x1
7921	 390	PUSH2	0080	 	 
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x80
7922	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x0
7923	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x93C
- stack 0: 0x1
7924	 395	PUSH2	0080	 	 
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x80
7925	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x93C
7926	 399	PUSH1	04	 	 
- stack 1: 0x93C
- stack 0: 0x4
7927	 39B	ADD		 	 
- stack 0: 0x940
7928	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x940
- stack 0: 0x940
7929	 39D	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
7930	 39E	PUSH1	F0	 	 
- stack 2: 0x940
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
- stack 0: 0xF0
7931	 3A0	SHR		 	 
- stack 1: 0x940
- stack 0: 0x3A2
7932	 3A1	JUMP		 	 
- stack 0: 0x940
7933	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x940
7934	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x940
- stack 0: 0x940
7935	 3A4	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
7936	 3A5	PUSH1	E0	 	 
- stack 2: 0x940
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
- stack 0: 0xE0
7937	 3A7	SHR		 	 
- stack 1: 0x940
- stack 0: 0x3A20002
7938	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x940
- stack 1: 0x3A20002
- stack 0: 0xFFFF
7939	 3AB	AND		 	 
- stack 1: 0x940
- stack 0: 0x2
7940	 3AC	PUSH1	01	 	 
- stack 2: 0x940
- stack 1: 0x2
- stack 0: 0x1
7941	 3AE	SIGNEXTEND		 	 
- stack 1: 0x940
- stack 0: 0x2
7942	 3AF	PUSH2	00A0	 	 
- stack 2: 0x940
- stack 1: 0x2
- stack 0: 0xA0
7943	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x940
7944	 3B3	PUSH1	04	 	 
- stack 1: 0x940
- stack 0: 0x4
7945	 3B5	ADD		 	 
- stack 0: 0x944
7946	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x944
- stack 0: 0x944
7947	 3B7	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
7948	 3B8	PUSH1	F0	 	 
- stack 2: 0x944
- stack 1: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
- stack 0: 0xF0
7949	 3BA	SHR		 	 
- stack 1: 0x944
- stack 0: 0x3BC
7950	 3BB	JUMP		 	 
- stack 0: 0x944
7951	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x944
7952	 3BD	PUSH2	0080	 	 
- stack 1: 0x944
- stack 0: 0x80
7953	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x944
- stack 0: 0x1
7954	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x944
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7955	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x944
- stack 0: 0x1
7956	 3C7	PUSH2	00A0	 	 
- stack 2: 0x944
- stack 1: 0x1
- stack 0: 0xA0
7957	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x944
- stack 1: 0x1
- stack 0: 0x2
7958	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x944
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7959	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x944
- stack 1: 0x1
- stack 0: 0x2
7960	 3D1	SUB		 	 
- stack 1: 0x944
- stack 0: 0x1
7961	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x944
- stack 1: 0x1
- stack 0: 0x3DA
7962	 3D5	JUMPI		 	 
- stack 0: 0x944
7963	 3DA	JUMPDEST		 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x944
7964	 3DB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x944
- stack 0: 0x944
7965	 3DC	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
7966	 3DD	PUSH1	E0	 	 
- stack 2: 0x944
- stack 1: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
- stack 0: 0xE0
7967	 3DF	SHR		 	 
- stack 1: 0x944
- stack 0: 0x3BCFFE4
7968	 3E0	PUSH2	FFFF	 	 
- stack 2: 0x944
- stack 1: 0x3BCFFE4
- stack 0: 0xFFFF
7969	 3E3	AND		 	 
- stack 1: 0x944
- stack 0: 0xFFE4
7970	 3E4	PUSH1	01	 	 
- stack 2: 0x944
- stack 1: 0xFFE4
- stack 0: 0x1
7971	 3E6	SIGNEXTEND		 	 
- stack 1: 0x944
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7972	 3E7	ADD		 	 
- stack 0: 0x928
7973	 3E8	PUSH4	FFFFFFFF	 	 
- stack 1: 0x928
- stack 0: 0xFFFFFFFF
7974	 3ED	AND		 	  ;; # mask to 32 bits
- stack 0: 0x928
7975	 3EE	DUP1		 	  ;; # executing pc
- stack 1: 0x928
- stack 0: 0x928
7976	 3EF	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
7977	 3F0	PUSH1	F0	 	 
- stack 2: 0x928
- stack 1: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
- stack 0: 0xF0
7978	 3F2	SHR		 	 
- stack 1: 0x928
- stack 0: 0x99
7979	 3F3	JUMP		 	 
- stack 0: 0x928
7980	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x928
7981	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x928
- stack 0: 0x928
7982	 9B	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
7983	 9C	PUSH1	E0	 	 
- stack 2: 0x928
- stack 1: 0x99001F04400000044000000086000000B300000383000103A2000203BCFFE4
- stack 0: 0xE0
7984	 9E	SHR		 	 
- stack 1: 0x928
- stack 0: 0x99001F
7985	 9F	PUSH2	FFFF	 	 
- stack 2: 0x928
- stack 1: 0x99001F
- stack 0: 0xFFFF
7986	 A2	AND		 	 
- stack 1: 0x928
- stack 0: 0x1F
7987	 A3	PUSH1	01	 	 
- stack 2: 0x928
- stack 1: 0x1F
- stack 0: 0x1
7988	 A5	SIGNEXTEND		 	 
- stack 1: 0x928
- stack 0: 0x1F
7989	 A6	PUSH2	0040	 	 
- stack 2: 0x928
- stack 1: 0x1F
- stack 0: 0x40
7990	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x928
7991	 AA	PUSH1	04	 	 
- stack 1: 0x928
- stack 0: 0x4
7992	 AC	ADD		 	 
- stack 0: 0x92C
7993	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x92C
- stack 0: 0x92C
7994	 AE	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
7995	 AF	PUSH1	F0	 	 
- stack 2: 0x92C
- stack 1: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xF0
7996	 B1	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x440
7997	 B2	JUMP		 	 
- stack 0: 0x92C
7998	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x92C
7999	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x92C
- stack 0: 0x92C
8000	 442	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
8001	 443	PUSH1	E0	 	 
- stack 2: 0x92C
- stack 1: 0x4400000044000000086000000B300000383000103A2000203BCFFE40197FFFF
- stack 0: 0xE0
8002	 445	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x4400000
8003	 446	PUSH2	FFFF	 	 
- stack 2: 0x92C
- stack 1: 0x4400000
- stack 0: 0xFFFF
8004	 449	AND		 	 
- stack 1: 0x92C
- stack 0: 0x0
8005	 44A	PUSH1	01	 	 
- stack 2: 0x92C
- stack 1: 0x0
- stack 0: 0x1
8006	 44C	SIGNEXTEND		 	 
- stack 1: 0x92C
- stack 0: 0x0
8007	 44D	POP		 	 
- stack 0: 0x92C
8008	 44E	PUSH1	04	 	 
- stack 1: 0x92C
- stack 0: 0x4
8009	 450	ADD		 	 
- stack 0: 0x930
8010	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x930
- stack 0: 0x930
8011	 452	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
8012	 453	PUSH1	F0	 	 
- stack 2: 0x930
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
- stack 0: 0xF0
8013	 455	SHR		 	 
- stack 1: 0x930
- stack 0: 0x440
8014	 456	JUMP		 	 
- stack 0: 0x930
8015	 440	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x930
8016	 441	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x930
- stack 0: 0x930
8017	 442	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
8018	 443	PUSH1	E0	 	 
- stack 2: 0x930
- stack 1: 0x44000000086000000B300000383000103A2000203BCFFE40197FFFF00E30027
- stack 0: 0xE0
8019	 445	SHR		 	 
- stack 1: 0x930
- stack 0: 0x4400000
8020	 446	PUSH2	FFFF	 	 
- stack 2: 0x930
- stack 1: 0x4400000
- stack 0: 0xFFFF
8021	 449	AND		 	 
- stack 1: 0x930
- stack 0: 0x0
8022	 44A	PUSH1	01	 	 
- stack 2: 0x930
- stack 1: 0x0
- stack 0: 0x1
8023	 44C	SIGNEXTEND		 	 
- stack 1: 0x930
- stack 0: 0x0
8024	 44D	POP		 	 
- stack 0: 0x930
8025	 44E	PUSH1	04	 	 
- stack 1: 0x930
- stack 0: 0x4
8026	 450	ADD		 	 
- stack 0: 0x934
8027	 451	DUP1		 	  ;; # executing pc
- stack 1: 0x934
- stack 0: 0x934
8028	 452	MLOAD		 	 
- stack 1: 0x934
- stack 0: 0x86000000B300000383000103A2000203BCFFE40197FFFF00E3002700FD005C
8029	 453	PUSH1	F0	 	 
- stack 2: 0x934
- stack 1: 0x86000000B300000383000103A2000203BCFFE40197FFFF00E3002700FD005C
- stack 0: 0xF0
8030	 455	SHR		 	 
- stack 1: 0x934
- stack 0: 0x86
8031	 456	JUMP		 	 
- stack 0: 0x934
8032	 86	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x934
8033	 87	PUSH4	80000000	 	 
- stack 1: 0x934
- stack 0: 0x80000000
8034	 8C	PUSH2	0020	 	 
- stack 2: 0x934
- stack 1: 0x80000000
- stack 0: 0x20
8035	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x934
8036	 90	PUSH1	04	 	 
- stack 1: 0x934
- stack 0: 0x4
8037	 92	ADD		 	 
- stack 0: 0x938
8038	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x938
- stack 0: 0x938
8039	 94	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0xB300000383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F
8040	 95	PUSH1	F0	 	 
- stack 2: 0x938
- stack 1: 0xB300000383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F
- stack 0: 0xF0
8041	 97	SHR		 	 
- stack 1: 0x938
- stack 0: 0xB3
8042	 98	JUMP		 	 
- stack 0: 0x938
8043	 B3	JUMPDEST		 ;; __riscvimpl_SRA_3_1_2	  ;; # instr: sra gp,ra,sp(ignore imm)
- stack 0: 0x938
8044	 B4	PUSH2	0020	 	 
- stack 1: 0x938
- stack 0: 0x20
8045	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x938
- stack 0: 0x80000000
8046	 B8	PUSH1	03	 	 
- stack 2: 0x938
- stack 1: 0x80000000
- stack 0: 0x3
8047	 BA	SIGNEXTEND		 	 
- stack 1: 0x938
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
8048	 BB	PUSH2	0040	 	 
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x40
8049	 BE	MLOAD		 	  ;; # read from x2
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
8050	 BF	PUSH1	1F	 	 
- stack 3: 0x938
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x1F
- stack 0: 0x1F
8051	 C1	AND		 	  ;; # mask to 5 bits
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1F
8052	 C2	SAR		 	 
- stack 1: 0x938
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8053	 C3	PUSH2	0060	 	 
- stack 2: 0x938
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
8054	 C6	MSTORE		 	  ;; # store to x3
- stack 0: 0x938
8055	 C7	PUSH1	04	 	 
- stack 1: 0x938
- stack 0: 0x4
8056	 C9	ADD		 	 
- stack 0: 0x93C
8057	 CA	DUP1		 	  ;; # executing pc
- stack 1: 0x93C
- stack 0: 0x93C
8058	 CB	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
8059	 CC	PUSH1	F0	 	 
- stack 2: 0x93C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
- stack 0: 0xF0
8060	 CE	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x383
8061	 CF	JUMP		 	 
- stack 0: 0x93C
8062	 383	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x93C
8063	 384	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x93C
- stack 0: 0x93C
8064	 385	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
8065	 386	PUSH1	E0	 	 
- stack 2: 0x93C
- stack 1: 0x383000103A2000203BCFFE40197FFFF00E3002700FD005C0313000F04570000
- stack 0: 0xE0
8066	 388	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x3830001
8067	 389	PUSH2	FFFF	 	 
- stack 2: 0x93C
- stack 1: 0x3830001
- stack 0: 0xFFFF
8068	 38C	AND		 	 
- stack 1: 0x93C
- stack 0: 0x1
8069	 38D	PUSH1	01	 	 
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x1
8070	 38F	SIGNEXTEND		 	 
- stack 1: 0x93C
- stack 0: 0x1
8071	 390	PUSH2	0080	 	 
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x80
8072	 393	MLOAD		 	  ;; # read from x4
- stack 2: 0x93C
- stack 1: 0x1
- stack 0: 0x1
8073	 394	ADD		 	  ;; # ADDI 4
- stack 1: 0x93C
- stack 0: 0x2
8074	 395	PUSH2	0080	 	 
- stack 2: 0x93C
- stack 1: 0x2
- stack 0: 0x80
8075	 398	MSTORE		 	  ;; # store to x4
- stack 0: 0x93C
8076	 399	PUSH1	04	 	 
- stack 1: 0x93C
- stack 0: 0x4
8077	 39B	ADD		 	 
- stack 0: 0x940
8078	 39C	DUP1		 	  ;; # executing pc
- stack 1: 0x940
- stack 0: 0x940
8079	 39D	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
8080	 39E	PUSH1	F0	 	 
- stack 2: 0x940
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
- stack 0: 0xF0
8081	 3A0	SHR		 	 
- stack 1: 0x940
- stack 0: 0x3A2
8082	 3A1	JUMP		 	 
- stack 0: 0x940
8083	 3A2	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x940
8084	 3A3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x940
- stack 0: 0x940
8085	 3A4	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
8086	 3A5	PUSH1	E0	 	 
- stack 2: 0x940
- stack 1: 0x3A2000203BCFFE40197FFFF00E3002700FD005C0313000F0457000001970000
- stack 0: 0xE0
8087	 3A7	SHR		 	 
- stack 1: 0x940
- stack 0: 0x3A20002
8088	 3A8	PUSH2	FFFF	 	 
- stack 2: 0x940
- stack 1: 0x3A20002
- stack 0: 0xFFFF
8089	 3AB	AND		 	 
- stack 1: 0x940
- stack 0: 0x2
8090	 3AC	PUSH1	01	 	 
- stack 2: 0x940
- stack 1: 0x2
- stack 0: 0x1
8091	 3AE	SIGNEXTEND		 	 
- stack 1: 0x940
- stack 0: 0x2
8092	 3AF	PUSH2	00A0	 	 
- stack 2: 0x940
- stack 1: 0x2
- stack 0: 0xA0
8093	 3B2	MSTORE		 	  ;; # store to x5
- stack 0: 0x940
8094	 3B3	PUSH1	04	 	 
- stack 1: 0x940
- stack 0: 0x4
8095	 3B5	ADD		 	 
- stack 0: 0x944
8096	 3B6	DUP1		 	  ;; # executing pc
- stack 1: 0x944
- stack 0: 0x944
8097	 3B7	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
8098	 3B8	PUSH1	F0	 	 
- stack 2: 0x944
- stack 1: 0x3BCFFE40197FFFF00E3002700FD005C0313000F045700000197000000E30028
- stack 0: 0xF0
8099	 3BA	SHR		 	 
- stack 1: 0x944
- stack 0: 0x3BC
8100	 3BB	JUMP		 	 
- stack 0: 0x944
8101	 3BC	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x944
8102	 3BD	PUSH2	0080	 	 
- stack 1: 0x944
- stack 0: 0x80
8103	 3C0	MLOAD		 	  ;; # read from x4
- stack 1: 0x944
- stack 0: 0x2
8104	 3C1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x944
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8105	 3C6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x944
- stack 0: 0x2
8106	 3C7	PUSH2	00A0	 	 
- stack 2: 0x944
- stack 1: 0x2
- stack 0: 0xA0
8107	 3CA	MLOAD		 	  ;; # read from x5
- stack 2: 0x944
- stack 1: 0x2
- stack 0: 0x2
8108	 3CB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x944
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8109	 3D0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x944
- stack 1: 0x2
- stack 0: 0x2
8110	 3D1	SUB		 	 
- stack 1: 0x944
- stack 0: 0x0
8111	 3D2	PUSH2	03DA	 ;; _neq_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 2: 0x944
- stack 1: 0x0
- stack 0: 0x3DA
8112	 3D5	JUMPI		 	 
- stack 0: 0x944
8113	 3D6	PUSH2	03F4	 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 1: 0x944
- stack 0: 0x3F4
8114	 3D9	JUMP		 	 
- stack 0: 0x944
8115	 3F4	JUMPDEST		 ;; _neq_after_7fc80efa3c03550adeb736ad47b19e7c98a9a522cfef671c5b158f7836f371cc	 
- stack 0: 0x944
8116	 3F5	PUSH1	04	 	 
- stack 1: 0x944
- stack 0: 0x4
8117	 3F7	ADD		 	 
- stack 0: 0x948
8118	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x948
- stack 0: 0x948
8119	 3F9	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x197FFFF00E3002700FD005C0313000F045700000197000000E3002802D10048
8120	 3FA	PUSH1	F0	 	 
- stack 2: 0x948
- stack 1: 0x197FFFF00E3002700FD005C0313000F045700000197000000E3002802D10048
- stack 0: 0xF0
8121	 3FC	SHR		 	 
- stack 1: 0x948
- stack 0: 0x197
8122	 3FD	JUMP		 	 
- stack 0: 0x948
8123	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x948
8124	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x948
- stack 0: 0x948
8125	 199	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x197FFFF00E3002700FD005C0313000F045700000197000000E3002802D10048
8126	 19A	PUSH1	E0	 	 
- stack 2: 0x948
- stack 1: 0x197FFFF00E3002700FD005C0313000F045700000197000000E3002802D10048
- stack 0: 0xE0
8127	 19C	SHR		 	 
- stack 1: 0x948
- stack 0: 0x197FFFF
8128	 19D	PUSH2	FFFF	 	 
- stack 2: 0x948
- stack 1: 0x197FFFF
- stack 0: 0xFFFF
8129	 1A0	AND		 	 
- stack 1: 0x948
- stack 0: 0xFFFF
8130	 1A1	PUSH1	01	 	 
- stack 2: 0x948
- stack 1: 0xFFFF
- stack 0: 0x1
8131	 1A3	SIGNEXTEND		 	 
- stack 1: 0x948
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8132	 1A4	PUSH2	03A0	 	 
- stack 2: 0x948
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
8133	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x948
8134	 1A8	PUSH1	04	 	 
- stack 1: 0x948
- stack 0: 0x4
8135	 1AA	ADD		 	 
- stack 0: 0x94C
8136	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x94C
- stack 0: 0x94C
8137	 1AC	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0xE3002700FD005C0313000F045700000197000000E3002802D1004803130020
8138	 1AD	PUSH1	F0	 	 
- stack 2: 0x94C
- stack 1: 0xE3002700FD005C0313000F045700000197000000E3002802D1004803130020
- stack 0: 0xF0
8139	 1AF	SHR		 	 
- stack 1: 0x94C
- stack 0: 0xE3
8140	 1B0	JUMP		 	 
- stack 0: 0x94C
8141	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x94C
8142	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x94C
- stack 0: 0x94C
8143	 E5	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0xE3002700FD005C0313000F045700000197000000E3002802D1004803130020
8144	 E6	PUSH1	E0	 	 
- stack 2: 0x94C
- stack 1: 0xE3002700FD005C0313000F045700000197000000E3002802D1004803130020
- stack 0: 0xE0
8145	 E8	SHR		 	 
- stack 1: 0x94C
- stack 0: 0xE30027
8146	 E9	PUSH2	FFFF	 	 
- stack 2: 0x94C
- stack 1: 0xE30027
- stack 0: 0xFFFF
8147	 EC	AND		 	 
- stack 1: 0x94C
- stack 0: 0x27
8148	 ED	PUSH1	01	 	 
- stack 2: 0x94C
- stack 1: 0x27
- stack 0: 0x1
8149	 EF	SIGNEXTEND		 	 
- stack 1: 0x94C
- stack 0: 0x27
8150	 F0	PUSH2	0380	 	 
- stack 2: 0x94C
- stack 1: 0x27
- stack 0: 0x380
8151	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x94C
8152	 F4	PUSH1	04	 	 
- stack 1: 0x94C
- stack 0: 0x4
8153	 F6	ADD		 	 
- stack 0: 0x950
8154	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x950
- stack 0: 0x950
8155	 F8	MLOAD		 	 
- stack 1: 0x950
- stack 0: 0xFD005C0313000F045700000197000000E3002802D100480313002004720000
8156	 F9	PUSH1	F0	 	 
- stack 2: 0x950
- stack 1: 0xFD005C0313000F045700000197000000E3002802D100480313002004720000
- stack 0: 0xF0
8157	 FB	SHR		 	 
- stack 1: 0x950
- stack 0: 0xFD
8158	 FC	JUMP		 	 
- stack 0: 0x950
8159	 FD	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,588(ignore imm)
- stack 0: 0x950
8160	 FE	PUSH2	0060	 	 
- stack 1: 0x950
- stack 0: 0x60
8161	 101	MLOAD		 	  ;; # read from x3
- stack 1: 0x950
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8162	 102	PUSH4	FFFFFFFF	 	 
- stack 2: 0x950
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
8163	 107	AND		 	  ;; # mask to 32 bits
- stack 1: 0x950
- stack 0: 0xFFFFFFFF
8164	 108	PUSH2	03A0	 	 
- stack 2: 0x950
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
8165	 10B	MLOAD		 	  ;; # read from x29
- stack 2: 0x950
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8166	 10C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x950
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
8167	 111	AND		 	  ;; # mask to 32 bits
- stack 2: 0x950
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
8168	 112	SUB		 	 
- stack 1: 0x950
- stack 0: 0x0
8169	 113	PUSH2	011B	 ;; _neq_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 2: 0x950
- stack 1: 0x0
- stack 0: 0x11B
8170	 116	JUMPI		 	 
- stack 0: 0x950
8171	 117	PUSH2	0135	 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 1: 0x950
- stack 0: 0x135
8172	 11A	JUMP		 	 
- stack 0: 0x950
8173	 135	JUMPDEST		 ;; _neq_after_9be65dddb4c855df41ec53ae336fa25352c58913069eec3a3dbec1414f43a45f	 
- stack 0: 0x950
8174	 136	PUSH1	04	 	 
- stack 1: 0x950
- stack 0: 0x4
8175	 138	ADD		 	 
- stack 0: 0x954
8176	 139	DUP1		 	  ;; # executing pc
- stack 1: 0x954
- stack 0: 0x954
8177	 13A	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0x313000F045700000197000000E3002802D10048031300200472000001970020
8178	 13B	PUSH1	F0	 	 
- stack 2: 0x954
- stack 1: 0x313000F045700000197000000E3002802D10048031300200472000001970020
- stack 0: 0xF0
8179	 13D	SHR		 	 
- stack 1: 0x954
- stack 0: 0x313
8180	 13E	JUMP		 	 
- stack 0: 0x954
8181	 313	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,7(ignore imm)
- stack 0: 0x954
8182	 314	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x954
- stack 0: 0x954
8183	 315	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0x313000F045700000197000000E3002802D10048031300200472000001970020
8184	 316	PUSH1	E0	 	 
- stack 2: 0x954
- stack 1: 0x313000F045700000197000000E3002802D10048031300200472000001970020
- stack 0: 0xE0
8185	 318	SHR		 	 
- stack 1: 0x954
- stack 0: 0x313000F
8186	 319	PUSH2	FFFF	 	 
- stack 2: 0x954
- stack 1: 0x313000F
- stack 0: 0xFFFF
8187	 31C	AND		 	 
- stack 1: 0x954
- stack 0: 0xF
8188	 31D	PUSH1	01	 	 
- stack 2: 0x954
- stack 1: 0xF
- stack 0: 0x1
8189	 31F	SIGNEXTEND		 	 
- stack 1: 0x954
- stack 0: 0xF
8190	 320	PUSH2	0020	 	 
- stack 2: 0x954
- stack 1: 0xF
- stack 0: 0x20
8191	 323	MSTORE		 	  ;; # store to x1
- stack 0: 0x954
8192	 324	PUSH1	04	 	 
- stack 1: 0x954
- stack 0: 0x4
8193	 326	ADD		 	 
- stack 0: 0x958
8194	 327	DUP1		 	  ;; # executing pc
- stack 1: 0x958
- stack 0: 0x958
8195	 328	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x45700000197000000E3002802D1004803130020047200000197002000E30029
8196	 329	PUSH1	F0	 	 
- stack 2: 0x958
- stack 1: 0x45700000197000000E3002802D1004803130020047200000197002000E30029
- stack 0: 0xF0
8197	 32B	SHR		 	 
- stack 1: 0x958
- stack 0: 0x457
8198	 32C	JUMP		 	 
- stack 0: 0x958
8199	 457	JUMPDEST		 ;; __riscvimpl_SRA_2_0_1	  ;; # instr: sra sp,zero,ra(ignore imm)
- stack 0: 0x958
8200	 458	PUSH1	00	 	 
- stack 1: 0x958
- stack 0: 0x0
8201	 45A	PUSH1	03	 	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x3
8202	 45C	SIGNEXTEND		 	 
- stack 1: 0x958
- stack 0: 0x0
8203	 45D	PUSH2	0020	 	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x20
8204	 460	MLOAD		 	  ;; # read from x1
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0xF
8205	 461	PUSH1	1F	 	 
- stack 3: 0x958
- stack 2: 0x0
- stack 1: 0xF
- stack 0: 0x1F
8206	 463	AND		 	  ;; # mask to 5 bits
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0xF
8207	 464	SAR		 	 
- stack 1: 0x958
- stack 0: 0x0
8208	 465	PUSH2	0040	 	 
- stack 2: 0x958
- stack 1: 0x0
- stack 0: 0x40
8209	 468	MSTORE		 	  ;; # store to x2
- stack 0: 0x958
8210	 469	PUSH1	04	 	 
- stack 1: 0x958
- stack 0: 0x4
8211	 46B	ADD		 	 
- stack 0: 0x95C
8212	 46C	DUP1		 	  ;; # executing pc
- stack 1: 0x95C
- stack 0: 0x95C
8213	 46D	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x197000000E3002802D1004803130020047200000197002000E3002902D10034
8214	 46E	PUSH1	F0	 	 
- stack 2: 0x95C
- stack 1: 0x197000000E3002802D1004803130020047200000197002000E3002902D10034
- stack 0: 0xF0
8215	 470	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x197
8216	 471	JUMP		 	 
- stack 0: 0x95C
8217	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x95C
8218	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x95C
- stack 0: 0x95C
8219	 199	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x197000000E3002802D1004803130020047200000197002000E3002902D10034
8220	 19A	PUSH1	E0	 	 
- stack 2: 0x95C
- stack 1: 0x197000000E3002802D1004803130020047200000197002000E3002902D10034
- stack 0: 0xE0
8221	 19C	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x1970000
8222	 19D	PUSH2	FFFF	 	 
- stack 2: 0x95C
- stack 1: 0x1970000
- stack 0: 0xFFFF
8223	 1A0	AND		 	 
- stack 1: 0x95C
- stack 0: 0x0
8224	 1A1	PUSH1	01	 	 
- stack 2: 0x95C
- stack 1: 0x0
- stack 0: 0x1
8225	 1A3	SIGNEXTEND		 	 
- stack 1: 0x95C
- stack 0: 0x0
8226	 1A4	PUSH2	03A0	 	 
- stack 2: 0x95C
- stack 1: 0x0
- stack 0: 0x3A0
8227	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x95C
8228	 1A8	PUSH1	04	 	 
- stack 1: 0x95C
- stack 0: 0x4
8229	 1AA	ADD		 	 
- stack 0: 0x960
8230	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x960
- stack 0: 0x960
8231	 1AC	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0xE3002802D1004803130020047200000197002000E3002902D10034048D0000
8232	 1AD	PUSH1	F0	 	 
- stack 2: 0x960
- stack 1: 0xE3002802D1004803130020047200000197002000E3002902D10034048D0000
- stack 0: 0xF0
8233	 1AF	SHR		 	 
- stack 1: 0x960
- stack 0: 0xE3
8234	 1B0	JUMP		 	 
- stack 0: 0x960
8235	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x960
8236	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x960
- stack 0: 0x960
8237	 E5	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0xE3002802D1004803130020047200000197002000E3002902D10034048D0000
8238	 E6	PUSH1	E0	 	 
- stack 2: 0x960
- stack 1: 0xE3002802D1004803130020047200000197002000E3002902D10034048D0000
- stack 0: 0xE0
8239	 E8	SHR		 	 
- stack 1: 0x960
- stack 0: 0xE30028
8240	 E9	PUSH2	FFFF	 	 
- stack 2: 0x960
- stack 1: 0xE30028
- stack 0: 0xFFFF
8241	 EC	AND		 	 
- stack 1: 0x960
- stack 0: 0x28
8242	 ED	PUSH1	01	 	 
- stack 2: 0x960
- stack 1: 0x28
- stack 0: 0x1
8243	 EF	SIGNEXTEND		 	 
- stack 1: 0x960
- stack 0: 0x28
8244	 F0	PUSH2	0380	 	 
- stack 2: 0x960
- stack 1: 0x28
- stack 0: 0x380
8245	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x960
8246	 F4	PUSH1	04	 	 
- stack 1: 0x960
- stack 0: 0x4
8247	 F6	ADD		 	 
- stack 0: 0x964
8248	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x964
- stack 0: 0x964
8249	 F8	MLOAD		 	 
- stack 1: 0x964
- stack 0: 0x2D1004803130020047200000197002000E3002902D10034048D000001970000
8250	 F9	PUSH1	F0	 	 
- stack 2: 0x964
- stack 1: 0x2D1004803130020047200000197002000E3002902D10034048D000001970000
- stack 0: 0xF0
8251	 FB	SHR		 	 
- stack 1: 0x964
- stack 0: 0x2D1
8252	 FC	JUMP		 	 
- stack 0: 0x964
8253	 2D1	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x964
8254	 2D2	PUSH2	0040	 	 
- stack 1: 0x964
- stack 0: 0x40
8255	 2D5	MLOAD		 	  ;; # read from x2
- stack 1: 0x964
- stack 0: 0x0
8256	 2D6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x964
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8257	 2DB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x964
- stack 0: 0x0
8258	 2DC	PUSH2	03A0	 	 
- stack 2: 0x964
- stack 1: 0x0
- stack 0: 0x3A0
8259	 2DF	MLOAD		 	  ;; # read from x29
- stack 2: 0x964
- stack 1: 0x0
- stack 0: 0x0
8260	 2E0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x964
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8261	 2E5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x964
- stack 1: 0x0
- stack 0: 0x0
8262	 2E6	SUB		 	 
- stack 1: 0x964
- stack 0: 0x0
8263	 2E7	PUSH2	02EF	 ;; _neq_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 2: 0x964
- stack 1: 0x0
- stack 0: 0x2EF
8264	 2EA	JUMPI		 	 
- stack 0: 0x964
8265	 2EB	PUSH2	0309	 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 1: 0x964
- stack 0: 0x309
8266	 2EE	JUMP		 	 
- stack 0: 0x964
8267	 309	JUMPDEST		 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 0: 0x964
8268	 30A	PUSH1	04	 	 
- stack 1: 0x964
- stack 0: 0x4
8269	 30C	ADD		 	 
- stack 0: 0x968
8270	 30D	DUP1		 	  ;; # executing pc
- stack 1: 0x968
- stack 0: 0x968
8271	 30E	MLOAD		 	 
- stack 1: 0x968
- stack 0: 0x3130020047200000197002000E3002902D10034048D00000197000000E3002A
8272	 30F	PUSH1	F0	 	 
- stack 2: 0x968
- stack 1: 0x3130020047200000197002000E3002902D10034048D00000197000000E3002A
- stack 0: 0xF0
8273	 311	SHR		 	 
- stack 1: 0x968
- stack 0: 0x313
8274	 312	JUMP		 	 
- stack 0: 0x968
8275	 313	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,7(ignore imm)
- stack 0: 0x968
8276	 314	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x968
- stack 0: 0x968
8277	 315	MLOAD		 	 
- stack 1: 0x968
- stack 0: 0x3130020047200000197002000E3002902D10034048D00000197000000E3002A
8278	 316	PUSH1	E0	 	 
- stack 2: 0x968
- stack 1: 0x3130020047200000197002000E3002902D10034048D00000197000000E3002A
- stack 0: 0xE0
8279	 318	SHR		 	 
- stack 1: 0x968
- stack 0: 0x3130020
8280	 319	PUSH2	FFFF	 	 
- stack 2: 0x968
- stack 1: 0x3130020
- stack 0: 0xFFFF
8281	 31C	AND		 	 
- stack 1: 0x968
- stack 0: 0x20
8282	 31D	PUSH1	01	 	 
- stack 2: 0x968
- stack 1: 0x20
- stack 0: 0x1
8283	 31F	SIGNEXTEND		 	 
- stack 1: 0x968
- stack 0: 0x20
8284	 320	PUSH2	0020	 	 
- stack 2: 0x968
- stack 1: 0x20
- stack 0: 0x20
8285	 323	MSTORE		 	  ;; # store to x1
- stack 0: 0x968
8286	 324	PUSH1	04	 	 
- stack 1: 0x968
- stack 0: 0x4
8287	 326	ADD		 	 
- stack 0: 0x96C
8288	 327	DUP1		 	  ;; # executing pc
- stack 1: 0x96C
- stack 0: 0x96C
8289	 328	MLOAD		 	 
- stack 1: 0x96C
- stack 0: 0x47200000197002000E3002902D10034048D00000197000000E3002A02720024
8290	 329	PUSH1	F0	 	 
- stack 2: 0x96C
- stack 1: 0x47200000197002000E3002902D10034048D00000197000000E3002A02720024
- stack 0: 0xF0
8291	 32B	SHR		 	 
- stack 1: 0x96C
- stack 0: 0x472
8292	 32C	JUMP		 	 
- stack 0: 0x96C
8293	 472	JUMPDEST		 ;; __riscvimpl_SRA_2_1_0	  ;; # instr: sra sp,ra,zero(ignore imm)
- stack 0: 0x96C
8294	 473	PUSH2	0020	 	 
- stack 1: 0x96C
- stack 0: 0x20
8295	 476	MLOAD		 	  ;; # read from x1
- stack 1: 0x96C
- stack 0: 0x20
8296	 477	PUSH1	03	 	 
- stack 2: 0x96C
- stack 1: 0x20
- stack 0: 0x3
8297	 479	SIGNEXTEND		 	 
- stack 1: 0x96C
- stack 0: 0x20
8298	 47A	PUSH1	00	 	 
- stack 2: 0x96C
- stack 1: 0x20
- stack 0: 0x0
8299	 47C	PUSH1	1F	 	 
- stack 3: 0x96C
- stack 2: 0x20
- stack 1: 0x0
- stack 0: 0x1F
8300	 47E	AND		 	  ;; # mask to 5 bits
- stack 2: 0x96C
- stack 1: 0x20
- stack 0: 0x0
8301	 47F	SAR		 	 
- stack 1: 0x96C
- stack 0: 0x20
8302	 480	PUSH2	0040	 	 
- stack 2: 0x96C
- stack 1: 0x20
- stack 0: 0x40
8303	 483	MSTORE		 	  ;; # store to x2
- stack 0: 0x96C
8304	 484	PUSH1	04	 	 
- stack 1: 0x96C
- stack 0: 0x4
8305	 486	ADD		 	 
- stack 0: 0x970
8306	 487	DUP1		 	  ;; # executing pc
- stack 1: 0x970
- stack 0: 0x970
8307	 488	MLOAD		 	 
- stack 1: 0x970
- stack 0: 0x197002000E3002902D10034048D00000197000000E3002A0272002403130400
8308	 489	PUSH1	F0	 	 
- stack 2: 0x970
- stack 1: 0x197002000E3002902D10034048D00000197000000E3002A0272002403130400
- stack 0: 0xF0
8309	 48B	SHR		 	 
- stack 1: 0x970
- stack 0: 0x197
8310	 48C	JUMP		 	 
- stack 0: 0x970
8311	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x970
8312	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x970
- stack 0: 0x970
8313	 199	MLOAD		 	 
- stack 1: 0x970
- stack 0: 0x197002000E3002902D10034048D00000197000000E3002A0272002403130400
8314	 19A	PUSH1	E0	 	 
- stack 2: 0x970
- stack 1: 0x197002000E3002902D10034048D00000197000000E3002A0272002403130400
- stack 0: 0xE0
8315	 19C	SHR		 	 
- stack 1: 0x970
- stack 0: 0x1970020
8316	 19D	PUSH2	FFFF	 	 
- stack 2: 0x970
- stack 1: 0x1970020
- stack 0: 0xFFFF
8317	 1A0	AND		 	 
- stack 1: 0x970
- stack 0: 0x20
8318	 1A1	PUSH1	01	 	 
- stack 2: 0x970
- stack 1: 0x20
- stack 0: 0x1
8319	 1A3	SIGNEXTEND		 	 
- stack 1: 0x970
- stack 0: 0x20
8320	 1A4	PUSH2	03A0	 	 
- stack 2: 0x970
- stack 1: 0x20
- stack 0: 0x3A0
8321	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x970
8322	 1A8	PUSH1	04	 	 
- stack 1: 0x970
- stack 0: 0x4
8323	 1AA	ADD		 	 
- stack 0: 0x974
8324	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x974
- stack 0: 0x974
8325	 1AC	MLOAD		 	 
- stack 1: 0x974
- stack 0: 0xE3002902D10034048D00000197000000E3002A027200240313040004A60001
8326	 1AD	PUSH1	F0	 	 
- stack 2: 0x974
- stack 1: 0xE3002902D10034048D00000197000000E3002A027200240313040004A60001
- stack 0: 0xF0
8327	 1AF	SHR		 	 
- stack 1: 0x974
- stack 0: 0xE3
8328	 1B0	JUMP		 	 
- stack 0: 0x974
8329	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x974
8330	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x974
- stack 0: 0x974
8331	 E5	MLOAD		 	 
- stack 1: 0x974
- stack 0: 0xE3002902D10034048D00000197000000E3002A027200240313040004A60001
8332	 E6	PUSH1	E0	 	 
- stack 2: 0x974
- stack 1: 0xE3002902D10034048D00000197000000E3002A027200240313040004A60001
- stack 0: 0xE0
8333	 E8	SHR		 	 
- stack 1: 0x974
- stack 0: 0xE30029
8334	 E9	PUSH2	FFFF	 	 
- stack 2: 0x974
- stack 1: 0xE30029
- stack 0: 0xFFFF
8335	 EC	AND		 	 
- stack 1: 0x974
- stack 0: 0x29
8336	 ED	PUSH1	01	 	 
- stack 2: 0x974
- stack 1: 0x29
- stack 0: 0x1
8337	 EF	SIGNEXTEND		 	 
- stack 1: 0x974
- stack 0: 0x29
8338	 F0	PUSH2	0380	 	 
- stack 2: 0x974
- stack 1: 0x29
- stack 0: 0x380
8339	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x974
8340	 F4	PUSH1	04	 	 
- stack 1: 0x974
- stack 0: 0x4
8341	 F6	ADD		 	 
- stack 0: 0x978
8342	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x978
- stack 0: 0x978
8343	 F8	MLOAD		 	 
- stack 1: 0x978
- stack 0: 0x2D10034048D00000197000000E3002A027200240313040004A6000104B9F800
8344	 F9	PUSH1	F0	 	 
- stack 2: 0x978
- stack 1: 0x2D10034048D00000197000000E3002A027200240313040004A6000104B9F800
- stack 0: 0xF0
8345	 FB	SHR		 	 
- stack 1: 0x978
- stack 0: 0x2D1
8346	 FC	JUMP		 	 
- stack 0: 0x978
8347	 2D1	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,320(ignore imm)
- stack 0: 0x978
8348	 2D2	PUSH2	0040	 	 
- stack 1: 0x978
- stack 0: 0x40
8349	 2D5	MLOAD		 	  ;; # read from x2
- stack 1: 0x978
- stack 0: 0x20
8350	 2D6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x978
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8351	 2DB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x978
- stack 0: 0x20
8352	 2DC	PUSH2	03A0	 	 
- stack 2: 0x978
- stack 1: 0x20
- stack 0: 0x3A0
8353	 2DF	MLOAD		 	  ;; # read from x29
- stack 2: 0x978
- stack 1: 0x20
- stack 0: 0x20
8354	 2E0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x978
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8355	 2E5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x978
- stack 1: 0x20
- stack 0: 0x20
8356	 2E6	SUB		 	 
- stack 1: 0x978
- stack 0: 0x0
8357	 2E7	PUSH2	02EF	 ;; _neq_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x2EF
8358	 2EA	JUMPI		 	 
- stack 0: 0x978
8359	 2EB	PUSH2	0309	 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 1: 0x978
- stack 0: 0x309
8360	 2EE	JUMP		 	 
- stack 0: 0x978
8361	 309	JUMPDEST		 ;; _neq_after_15cfce1823d3ae384fa491bd7be3d2bd546eb6b363b210387ac3c66978856c59	 
- stack 0: 0x978
8362	 30A	PUSH1	04	 	 
- stack 1: 0x978
- stack 0: 0x4
8363	 30C	ADD		 	 
- stack 0: 0x97C
8364	 30D	DUP1		 	  ;; # executing pc
- stack 1: 0x97C
- stack 0: 0x97C
8365	 30E	MLOAD		 	 
- stack 1: 0x97C
- stack 0: 0x48D00000197000000E3002A027200240313040004A6000104B9F80004D80000
8366	 30F	PUSH1	F0	 	 
- stack 2: 0x97C
- stack 1: 0x48D00000197000000E3002A027200240313040004A6000104B9F80004D80000
- stack 0: 0xF0
8367	 311	SHR		 	 
- stack 1: 0x97C
- stack 0: 0x48D
8368	 312	JUMP		 	 
- stack 0: 0x97C
8369	 48D	JUMPDEST		 ;; __riscvimpl_SRA_1_0_0	  ;; # instr: sra ra,zero,zero(ignore imm)
- stack 0: 0x97C
8370	 48E	PUSH1	00	 	 
- stack 1: 0x97C
- stack 0: 0x0
8371	 490	PUSH1	03	 	 
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x3
8372	 492	SIGNEXTEND		 	 
- stack 1: 0x97C
- stack 0: 0x0
8373	 493	PUSH1	00	 	 
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x0
8374	 495	PUSH1	1F	 	 
- stack 3: 0x97C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x1F
8375	 497	AND		 	  ;; # mask to 5 bits
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x0
8376	 498	SAR		 	 
- stack 1: 0x97C
- stack 0: 0x0
8377	 499	PUSH2	0020	 	 
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x20
8378	 49C	MSTORE		 	  ;; # store to x1
- stack 0: 0x97C
8379	 49D	PUSH1	04	 	 
- stack 1: 0x97C
- stack 0: 0x4
8380	 49F	ADD		 	 
- stack 0: 0x980
8381	 4A0	DUP1		 	  ;; # executing pc
- stack 1: 0x980
- stack 0: 0x980
8382	 4A1	MLOAD		 	 
- stack 1: 0x980
- stack 0: 0x197000000E3002A027200240313040004A6000104B9F80004D8000001970000
8383	 4A2	PUSH1	F0	 	 
- stack 2: 0x980
- stack 1: 0x197000000E3002A027200240313040004A6000104B9F80004D8000001970000
- stack 0: 0xF0
8384	 4A4	SHR		 	 
- stack 1: 0x980
- stack 0: 0x197
8385	 4A5	JUMP		 	 
- stack 0: 0x980
8386	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x980
8387	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x980
- stack 0: 0x980
8388	 199	MLOAD		 	 
- stack 1: 0x980
- stack 0: 0x197000000E3002A027200240313040004A6000104B9F80004D8000001970000
8389	 19A	PUSH1	E0	 	 
- stack 2: 0x980
- stack 1: 0x197000000E3002A027200240313040004A6000104B9F80004D8000001970000
- stack 0: 0xE0
8390	 19C	SHR		 	 
- stack 1: 0x980
- stack 0: 0x1970000
8391	 19D	PUSH2	FFFF	 	 
- stack 2: 0x980
- stack 1: 0x1970000
- stack 0: 0xFFFF
8392	 1A0	AND		 	 
- stack 1: 0x980
- stack 0: 0x0
8393	 1A1	PUSH1	01	 	 
- stack 2: 0x980
- stack 1: 0x0
- stack 0: 0x1
8394	 1A3	SIGNEXTEND		 	 
- stack 1: 0x980
- stack 0: 0x0
8395	 1A4	PUSH2	03A0	 	 
- stack 2: 0x980
- stack 1: 0x0
- stack 0: 0x3A0
8396	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x980
8397	 1A8	PUSH1	04	 	 
- stack 1: 0x980
- stack 0: 0x4
8398	 1AA	ADD		 	 
- stack 0: 0x984
8399	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x984
- stack 0: 0x984
8400	 1AC	MLOAD		 	 
- stack 1: 0x984
- stack 0: 0xE3002A027200240313040004A6000104B9F80004D800000197000000E3002B
8401	 1AD	PUSH1	F0	 	 
- stack 2: 0x984
- stack 1: 0xE3002A027200240313040004A6000104B9F80004D800000197000000E3002B
- stack 0: 0xF0
8402	 1AF	SHR		 	 
- stack 1: 0x984
- stack 0: 0xE3
8403	 1B0	JUMP		 	 
- stack 0: 0x984
8404	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x984
8405	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x984
- stack 0: 0x984
8406	 E5	MLOAD		 	 
- stack 1: 0x984
- stack 0: 0xE3002A027200240313040004A6000104B9F80004D800000197000000E3002B
8407	 E6	PUSH1	E0	 	 
- stack 2: 0x984
- stack 1: 0xE3002A027200240313040004A6000104B9F80004D800000197000000E3002B
- stack 0: 0xE0
8408	 E8	SHR		 	 
- stack 1: 0x984
- stack 0: 0xE3002A
8409	 E9	PUSH2	FFFF	 	 
- stack 2: 0x984
- stack 1: 0xE3002A
- stack 0: 0xFFFF
8410	 EC	AND		 	 
- stack 1: 0x984
- stack 0: 0x2A
8411	 ED	PUSH1	01	 	 
- stack 2: 0x984
- stack 1: 0x2A
- stack 0: 0x1
8412	 EF	SIGNEXTEND		 	 
- stack 1: 0x984
- stack 0: 0x2A
8413	 F0	PUSH2	0380	 	 
- stack 2: 0x984
- stack 1: 0x2A
- stack 0: 0x380
8414	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x984
8415	 F4	PUSH1	04	 	 
- stack 1: 0x984
- stack 0: 0x4
8416	 F6	ADD		 	 
- stack 0: 0x988
8417	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x988
- stack 0: 0x988
8418	 F8	MLOAD		 	 
- stack 1: 0x988
- stack 0: 0x27200240313040004A6000104B9F80004D800000197000000E3002B04F20008
8419	 F9	PUSH1	F0	 	 
- stack 2: 0x988
- stack 1: 0x27200240313040004A6000104B9F80004D800000197000000E3002B04F20008
- stack 0: 0xF0
8420	 FB	SHR		 	 
- stack 1: 0x988
- stack 0: 0x272
8421	 FC	JUMP		 	 
- stack 0: 0x988
8422	 272	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,338(ignore imm)
- stack 0: 0x988
8423	 273	PUSH2	0020	 	 
- stack 1: 0x988
- stack 0: 0x20
8424	 276	MLOAD		 	  ;; # read from x1
- stack 1: 0x988
- stack 0: 0x0
8425	 277	PUSH4	FFFFFFFF	 	 
- stack 2: 0x988
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8426	 27C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x988
- stack 0: 0x0
8427	 27D	PUSH2	03A0	 	 
- stack 2: 0x988
- stack 1: 0x0
- stack 0: 0x3A0
8428	 280	MLOAD		 	  ;; # read from x29
- stack 2: 0x988
- stack 1: 0x0
- stack 0: 0x0
8429	 281	PUSH4	FFFFFFFF	 	 
- stack 3: 0x988
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8430	 286	AND		 	  ;; # mask to 32 bits
- stack 2: 0x988
- stack 1: 0x0
- stack 0: 0x0
8431	 287	SUB		 	 
- stack 1: 0x988
- stack 0: 0x0
8432	 288	PUSH2	0290	 ;; _neq_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 2: 0x988
- stack 1: 0x0
- stack 0: 0x290
8433	 28B	JUMPI		 	 
- stack 0: 0x988
8434	 28C	PUSH2	02AA	 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 1: 0x988
- stack 0: 0x2AA
8435	 28F	JUMP		 	 
- stack 0: 0x988
8436	 2AA	JUMPDEST		 ;; _neq_after_4fd06c771099283dd3d3eb2c8058b2134f2d46e853b2938cf32b615ba2458731	 
- stack 0: 0x988
8437	 2AB	PUSH1	04	 	 
- stack 1: 0x988
- stack 0: 0x4
8438	 2AD	ADD		 	 
- stack 0: 0x98C
8439	 2AE	DUP1		 	  ;; # executing pc
- stack 1: 0x98C
- stack 0: 0x98C
8440	 2AF	MLOAD		 	 
- stack 1: 0x98C
- stack 0: 0x313040004A6000104B9F80004D800000197000000E3002B04F2000805320018
8441	 2B0	PUSH1	F0	 	 
- stack 2: 0x98C
- stack 1: 0x313040004A6000104B9F80004D800000197000000E3002B04F2000805320018
- stack 0: 0xF0
8442	 2B2	SHR		 	 
- stack 1: 0x98C
- stack 0: 0x313
8443	 2B3	JUMP		 	 
- stack 0: 0x98C
8444	 313	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,7(ignore imm)
- stack 0: 0x98C
8445	 314	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x98C
- stack 0: 0x98C
8446	 315	MLOAD		 	 
- stack 1: 0x98C
- stack 0: 0x313040004A6000104B9F80004D800000197000000E3002B04F2000805320018
8447	 316	PUSH1	E0	 	 
- stack 2: 0x98C
- stack 1: 0x313040004A6000104B9F80004D800000197000000E3002B04F2000805320018
- stack 0: 0xE0
8448	 318	SHR		 	 
- stack 1: 0x98C
- stack 0: 0x3130400
8449	 319	PUSH2	FFFF	 	 
- stack 2: 0x98C
- stack 1: 0x3130400
- stack 0: 0xFFFF
8450	 31C	AND		 	 
- stack 1: 0x98C
- stack 0: 0x400
8451	 31D	PUSH1	01	 	 
- stack 2: 0x98C
- stack 1: 0x400
- stack 0: 0x1
8452	 31F	SIGNEXTEND		 	 
- stack 1: 0x98C
- stack 0: 0x400
8453	 320	PUSH2	0020	 	 
- stack 2: 0x98C
- stack 1: 0x400
- stack 0: 0x20
8454	 323	MSTORE		 	  ;; # store to x1
- stack 0: 0x98C
8455	 324	PUSH1	04	 	 
- stack 1: 0x98C
- stack 0: 0x4
8456	 326	ADD		 	 
- stack 0: 0x990
8457	 327	DUP1		 	  ;; # executing pc
- stack 1: 0x990
- stack 0: 0x990
8458	 328	MLOAD		 	 
- stack 1: 0x990
- stack 0: 0x4A6000104B9F80004D800000197000000E3002B04F200080532001800210001
8459	 329	PUSH1	F0	 	 
- stack 2: 0x990
- stack 1: 0x4A6000104B9F80004D800000197000000E3002B04F200080532001800210001
- stack 0: 0xF0
8460	 32B	SHR		 	 
- stack 1: 0x990
- stack 0: 0x4A6
8461	 32C	JUMP		 	 
- stack 0: 0x990
8462	 4A6	JUMPDEST		 ;; __riscvimpl_LUI_1137	  ;; # instr: lui sp,0x1(ignore imm)
- stack 0: 0x990
8463	 4A7	PUSH4	00001000	 	 
- stack 1: 0x990
- stack 0: 0x1000
8464	 4AC	PUSH2	0040	 	 
- stack 2: 0x990
- stack 1: 0x1000
- stack 0: 0x40
8465	 4AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x990
8466	 4B0	PUSH1	04	 	 
- stack 1: 0x990
- stack 0: 0x4
8467	 4B2	ADD		 	 
- stack 0: 0x994
8468	 4B3	DUP1		 	  ;; # executing pc
- stack 1: 0x994
- stack 0: 0x994
8469	 4B4	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0x4B9F80004D800000197000000E3002B04F2000805320018002100010034F9E8
8470	 4B5	PUSH1	F0	 	 
- stack 2: 0x994
- stack 1: 0x4B9F80004D800000197000000E3002B04F2000805320018002100010034F9E8
- stack 0: 0xF0
8471	 4B7	SHR		 	 
- stack 1: 0x994
- stack 0: 0x4B9
8472	 4B8	JUMP		 	 
- stack 0: 0x994
8473	 4B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-2048(ignore imm)
- stack 0: 0x994
8474	 4BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x994
- stack 0: 0x994
8475	 4BB	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0x4B9F80004D800000197000000E3002B04F2000805320018002100010034F9E8
8476	 4BC	PUSH1	E0	 	 
- stack 2: 0x994
- stack 1: 0x4B9F80004D800000197000000E3002B04F2000805320018002100010034F9E8
- stack 0: 0xE0
8477	 4BE	SHR		 	 
- stack 1: 0x994
- stack 0: 0x4B9F800
8478	 4BF	PUSH2	FFFF	 	 
- stack 2: 0x994
- stack 1: 0x4B9F800
- stack 0: 0xFFFF
8479	 4C2	AND		 	 
- stack 1: 0x994
- stack 0: 0xF800
8480	 4C3	PUSH1	01	 	 
- stack 2: 0x994
- stack 1: 0xF800
- stack 0: 0x1
8481	 4C5	SIGNEXTEND		 	 
- stack 1: 0x994
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
8482	 4C6	PUSH2	0040	 	 
- stack 2: 0x994
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x40
8483	 4C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x994
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x1000
8484	 4CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x994
- stack 0: 0x800
8485	 4CB	PUSH2	0040	 	 
- stack 2: 0x994
- stack 1: 0x800
- stack 0: 0x40
8486	 4CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x994
8487	 4CF	PUSH1	04	 	 
- stack 1: 0x994
- stack 0: 0x4
8488	 4D1	ADD		 	 
- stack 0: 0x998
8489	 4D2	DUP1		 	  ;; # executing pc
- stack 1: 0x998
- stack 0: 0x998
8490	 4D3	MLOAD		 	 
- stack 1: 0x998
- stack 0: 0x4D800000197000000E3002B04F2000805320018002100010034F9E800530042
8491	 4D4	PUSH1	F0	 	 
- stack 2: 0x998
- stack 1: 0x4D800000197000000E3002B04F2000805320018002100010034F9E800530042
- stack 0: 0xF0
8492	 4D6	SHR		 	 
- stack 1: 0x998
- stack 0: 0x4D8
8493	 4D7	JUMP		 	 
- stack 0: 0x998
8494	 4D8	JUMPDEST		 ;; __riscvimpl_SRA_0_1_2	  ;; # instr: sra zero,ra,sp(ignore imm)
- stack 0: 0x998
8495	 4D9	PUSH2	0020	 	 
- stack 1: 0x998
- stack 0: 0x20
8496	 4DC	MLOAD		 	  ;; # read from x1
- stack 1: 0x998
- stack 0: 0x400
8497	 4DD	PUSH1	03	 	 
- stack 2: 0x998
- stack 1: 0x400
- stack 0: 0x3
8498	 4DF	SIGNEXTEND		 	 
- stack 1: 0x998
- stack 0: 0x400
8499	 4E0	PUSH2	0040	 	 
- stack 2: 0x998
- stack 1: 0x400
- stack 0: 0x40
8500	 4E3	MLOAD		 	  ;; # read from x2
- stack 2: 0x998
- stack 1: 0x400
- stack 0: 0x800
8501	 4E4	PUSH1	1F	 	 
- stack 3: 0x998
- stack 2: 0x400
- stack 1: 0x800
- stack 0: 0x1F
8502	 4E6	AND		 	  ;; # mask to 5 bits
- stack 2: 0x998
- stack 1: 0x400
- stack 0: 0x0
8503	 4E7	SAR		 	 
- stack 1: 0x998
- stack 0: 0x400
8504	 4E8	POP		 	 
- stack 0: 0x998
8505	 4E9	PUSH1	04	 	 
- stack 1: 0x998
- stack 0: 0x4
8506	 4EB	ADD		 	 
- stack 0: 0x99C
8507	 4EC	DUP1		 	  ;; # executing pc
- stack 1: 0x99C
- stack 0: 0x99C
8508	 4ED	MLOAD		 	 
- stack 1: 0x99C
- stack 0: 0x197000000E3002B04F2000805320018002100010034F9E80053004200660000
8509	 4EE	PUSH1	F0	 	 
- stack 2: 0x99C
- stack 1: 0x197000000E3002B04F2000805320018002100010034F9E80053004200660000
- stack 0: 0xF0
8510	 4F0	SHR		 	 
- stack 1: 0x99C
- stack 0: 0x197
8511	 4F1	JUMP		 	 
- stack 0: 0x99C
8512	 197	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x99C
8513	 198	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x99C
- stack 0: 0x99C
8514	 199	MLOAD		 	 
- stack 1: 0x99C
- stack 0: 0x197000000E3002B04F2000805320018002100010034F9E80053004200660000
8515	 19A	PUSH1	E0	 	 
- stack 2: 0x99C
- stack 1: 0x197000000E3002B04F2000805320018002100010034F9E80053004200660000
- stack 0: 0xE0
8516	 19C	SHR		 	 
- stack 1: 0x99C
- stack 0: 0x1970000
8517	 19D	PUSH2	FFFF	 	 
- stack 2: 0x99C
- stack 1: 0x1970000
- stack 0: 0xFFFF
8518	 1A0	AND		 	 
- stack 1: 0x99C
- stack 0: 0x0
8519	 1A1	PUSH1	01	 	 
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0x1
8520	 1A3	SIGNEXTEND		 	 
- stack 1: 0x99C
- stack 0: 0x0
8521	 1A4	PUSH2	03A0	 	 
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0x3A0
8522	 1A7	MSTORE		 	  ;; # store to x29
- stack 0: 0x99C
8523	 1A8	PUSH1	04	 	 
- stack 1: 0x99C
- stack 0: 0x4
8524	 1AA	ADD		 	 
- stack 0: 0x9A0
8525	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x9A0
- stack 0: 0x9A0
8526	 1AC	MLOAD		 	 
- stack 1: 0x9A0
- stack 0: 0xE3002B04F2000805320018002100010034F9E8005300420066000005720001
8527	 1AD	PUSH1	F0	 	 
- stack 2: 0x9A0
- stack 1: 0xE3002B04F2000805320018002100010034F9E8005300420066000005720001
- stack 0: 0xF0
8528	 1AF	SHR		 	 
- stack 1: 0x9A0
- stack 0: 0xE3
8529	 1B0	JUMP		 	 
- stack 0: 0x9A0
8530	 E3	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x9A0
8531	 E4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9A0
- stack 0: 0x9A0
8532	 E5	MLOAD		 	 
- stack 1: 0x9A0
- stack 0: 0xE3002B04F2000805320018002100010034F9E8005300420066000005720001
8533	 E6	PUSH1	E0	 	 
- stack 2: 0x9A0
- stack 1: 0xE3002B04F2000805320018002100010034F9E8005300420066000005720001
- stack 0: 0xE0
8534	 E8	SHR		 	 
- stack 1: 0x9A0
- stack 0: 0xE3002B
8535	 E9	PUSH2	FFFF	 	 
- stack 2: 0x9A0
- stack 1: 0xE3002B
- stack 0: 0xFFFF
8536	 EC	AND		 	 
- stack 1: 0x9A0
- stack 0: 0x2B
8537	 ED	PUSH1	01	 	 
- stack 2: 0x9A0
- stack 1: 0x2B
- stack 0: 0x1
8538	 EF	SIGNEXTEND		 	 
- stack 1: 0x9A0
- stack 0: 0x2B
8539	 F0	PUSH2	0380	 	 
- stack 2: 0x9A0
- stack 1: 0x2B
- stack 0: 0x380
8540	 F3	MSTORE		 	  ;; # store to x28
- stack 0: 0x9A0
8541	 F4	PUSH1	04	 	 
- stack 1: 0x9A0
- stack 0: 0x4
8542	 F6	ADD		 	 
- stack 0: 0x9A4
8543	 F7	DUP1		 	  ;; # executing pc
- stack 1: 0x9A4
- stack 0: 0x9A4
8544	 F8	MLOAD		 	 
- stack 1: 0x9A4
- stack 0: 0x4F2000805320018002100010034F9E800530042006600000572000100210001
8545	 F9	PUSH1	F0	 	 
- stack 2: 0x9A4
- stack 1: 0x4F2000805320018002100010034F9E800530042006600000572000100210001
- stack 0: 0xF0
8546	 FB	SHR		 	 
- stack 1: 0x9A4
- stack 0: 0x4F2
8547	 FC	JUMP		 	 
- stack 0: 0x9A4
8548	 4F2	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x9A4
8549	 4F3	PUSH1	00	 	 
- stack 1: 0x9A4
- stack 0: 0x0
8550	 4F5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8551	 4FA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9A4
- stack 0: 0x0
8552	 4FB	PUSH2	03A0	 	 
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0x3A0
8553	 4FE	MLOAD		 	  ;; # read from x29
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0x0
8554	 4FF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x9A4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8555	 504	AND		 	  ;; # mask to 32 bits
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0x0
8556	 505	SUB		 	 
- stack 1: 0x9A4
- stack 0: 0x0
8557	 506	PUSH2	050E	 ;; _neq_85ea514d8a2b968f355198e7a67892b8cd35406d41e3686fd921cc352027b0ce	 
- stack 2: 0x9A4
- stack 1: 0x0
- stack 0: 0x50E
8558	 509	JUMPI		 	 
- stack 0: 0x9A4
8559	 50A	PUSH2	0528	 ;; _neq_after_85ea514d8a2b968f355198e7a67892b8cd35406d41e3686fd921cc352027b0ce	 
- stack 1: 0x9A4
- stack 0: 0x528
8560	 50D	JUMP		 	 
- stack 0: 0x9A4
8561	 528	JUMPDEST		 ;; _neq_after_85ea514d8a2b968f355198e7a67892b8cd35406d41e3686fd921cc352027b0ce	 
- stack 0: 0x9A4
8562	 529	PUSH1	04	 	 
- stack 1: 0x9A4
- stack 0: 0x4
8563	 52B	ADD		 	 
- stack 0: 0x9A8
8564	 52C	DUP1		 	  ;; # executing pc
- stack 1: 0x9A8
- stack 0: 0x9A8
8565	 52D	MLOAD		 	 
- stack 1: 0x9A8
- stack 0: 0x5320018002100010034F9E8005300420066000005720001002100010034F9EC
8566	 52E	PUSH1	F0	 	 
- stack 2: 0x9A8
- stack 1: 0x5320018002100010034F9E8005300420066000005720001002100010034F9EC
- stack 0: 0xF0
8567	 530	SHR		 	 
- stack 1: 0x9A8
- stack 0: 0x532
8568	 531	JUMP		 	 
- stack 0: 0x9A8
8569	 532	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x9A8
8570	 533	PUSH1	00	 	 
- stack 1: 0x9A8
- stack 0: 0x0
8571	 535	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8572	 53A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9A8
- stack 0: 0x0
8573	 53B	PUSH2	0380	 	 
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x380
8574	 53E	MLOAD		 	  ;; # read from x28
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x2B
8575	 53F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x9A8
- stack 2: 0x0
- stack 1: 0x2B
- stack 0: 0xFFFFFFFF
8576	 544	AND		 	  ;; # mask to 32 bits
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x2B
8577	 545	SUB		 	 
- stack 1: 0x9A8
- stack 0: 0x2B
8578	 546	PUSH2	054E	 ;; _neq_d57e8d25da0b87da7766c68f5eadec884ba5c50a70509503b7da3cf59ec0ee8b	 
- stack 2: 0x9A8
- stack 1: 0x2B
- stack 0: 0x54E
8579	 549	JUMPI		 	 
- stack 0: 0x9A8
8580	 54E	JUMPDEST		 ;; _neq_d57e8d25da0b87da7766c68f5eadec884ba5c50a70509503b7da3cf59ec0ee8b	 
- stack 0: 0x9A8
8581	 54F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9A8
- stack 0: 0x9A8
8582	 550	MLOAD		 	 
- stack 1: 0x9A8
- stack 0: 0x5320018002100010034F9E8005300420066000005720001002100010034F9EC
8583	 551	PUSH1	E0	 	 
- stack 2: 0x9A8
- stack 1: 0x5320018002100010034F9E8005300420066000005720001002100010034F9EC
- stack 0: 0xE0
8584	 553	SHR		 	 
- stack 1: 0x9A8
- stack 0: 0x5320018
8585	 554	PUSH2	FFFF	 	 
- stack 2: 0x9A8
- stack 1: 0x5320018
- stack 0: 0xFFFF
8586	 557	AND		 	 
- stack 1: 0x9A8
- stack 0: 0x18
8587	 558	PUSH1	01	 	 
- stack 2: 0x9A8
- stack 1: 0x18
- stack 0: 0x1
8588	 55A	SIGNEXTEND		 	 
- stack 1: 0x9A8
- stack 0: 0x18
8589	 55B	ADD		 	 
- stack 0: 0x9C0
8590	 55C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x9C0
- stack 0: 0xFFFFFFFF
8591	 561	AND		 	  ;; # mask to 32 bits
- stack 0: 0x9C0
8592	 562	DUP1		 	  ;; # executing pc
- stack 1: 0x9C0
- stack 0: 0x9C0
8593	 563	MLOAD		 	 
- stack 1: 0x9C0
- stack 0: 0x2100010034F9EC0053004200660000057D0000006600000000000000000000
8594	 564	PUSH1	F0	 	 
- stack 2: 0x9C0
- stack 1: 0x2100010034F9EC0053004200660000057D0000006600000000000000000000
- stack 0: 0xF0
8595	 566	SHR		 	 
- stack 1: 0x9C0
- stack 0: 0x21
8596	 567	JUMP		 	 
- stack 0: 0x9C0
8597	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x9C0
8598	 22	PUSH4	00001000	 	 
- stack 1: 0x9C0
- stack 0: 0x1000
8599	 27	PUSH2	0160	 	 
- stack 2: 0x9C0
- stack 1: 0x1000
- stack 0: 0x160
8600	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x9C0
8601	 2B	PUSH1	04	 	 
- stack 1: 0x9C0
- stack 0: 0x4
8602	 2D	ADD		 	 
- stack 0: 0x9C4
8603	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x9C4
- stack 0: 0x9C4
8604	 2F	MLOAD		 	 
- stack 1: 0x9C4
- stack 0: 0x34F9EC0053004200660000057D00000066000000000000000000006574796D
8605	 30	PUSH1	F0	 	 
- stack 2: 0x9C4
- stack 1: 0x34F9EC0053004200660000057D00000066000000000000000000006574796D
- stack 0: 0xF0
8606	 32	SHR		 	 
- stack 1: 0x9C4
- stack 0: 0x34
8607	 33	JUMP		 	 
- stack 0: 0x9C4
8608	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1568(ignore imm)
- stack 0: 0x9C4
8609	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9C4
- stack 0: 0x9C4
8610	 36	MLOAD		 	 
- stack 1: 0x9C4
- stack 0: 0x34F9EC0053004200660000057D00000066000000000000000000006574796D
8611	 37	PUSH1	E0	 	 
- stack 2: 0x9C4
- stack 1: 0x34F9EC0053004200660000057D00000066000000000000000000006574796D
- stack 0: 0xE0
8612	 39	SHR		 	 
- stack 1: 0x9C4
- stack 0: 0x34F9EC
8613	 3A	PUSH2	FFFF	 	 
- stack 2: 0x9C4
- stack 1: 0x34F9EC
- stack 0: 0xFFFF
8614	 3D	AND		 	 
- stack 1: 0x9C4
- stack 0: 0xF9EC
8615	 3E	PUSH1	01	 	 
- stack 2: 0x9C4
- stack 1: 0xF9EC
- stack 0: 0x1
8616	 40	SIGNEXTEND		 	 
- stack 1: 0x9C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9EC
8617	 41	PUSH2	0160	 	 
- stack 2: 0x9C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9EC
- stack 0: 0x160
8618	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x9C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9EC
- stack 0: 0x1000
8619	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x9C4
- stack 0: 0x9EC
8620	 46	PUSH2	0160	 	 
- stack 2: 0x9C4
- stack 1: 0x9EC
- stack 0: 0x160
8621	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x9C4
8622	 4A	PUSH1	04	 	 
- stack 1: 0x9C4
- stack 0: 0x4
8623	 4C	ADD		 	 
- stack 0: 0x9C8
8624	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x9C8
- stack 0: 0x9C8
8625	 4E	MLOAD		 	 
- stack 1: 0x9C8
- stack 0: 0x53004200660000057D00000066000000000000000000006574796D00007473
8626	 4F	PUSH1	F0	 	 
- stack 2: 0x9C8
- stack 1: 0x53004200660000057D00000066000000000000000000006574796D00007473
- stack 0: 0xF0
8627	 51	SHR		 	 
- stack 1: 0x9C8
- stack 0: 0x53
8628	 52	JUMP		 	 
- stack 0: 0x9C8
8629	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x9C8
8630	 54	PUSH4	00042000	 	 
- stack 1: 0x9C8
- stack 0: 0x42000
8631	 59	PUSH2	0140	 	 
- stack 2: 0x9C8
- stack 1: 0x42000
- stack 0: 0x140
8632	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x9C8
8633	 5D	PUSH1	04	 	 
- stack 1: 0x9C8
- stack 0: 0x4
8634	 5F	ADD		 	 
- stack 0: 0x9CC
8635	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x9CC
- stack 0: 0x9CC
8636	 61	MLOAD		 	 
- stack 1: 0x9CC
- stack 0: 0x660000057D00000066000000000000000000006574796D0000747300525245
8637	 62	PUSH1	F0	 	 
- stack 2: 0x9CC
- stack 1: 0x660000057D00000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
8638	 64	SHR		 	 
- stack 1: 0x9CC
- stack 0: 0x66
8639	 65	JUMP		 	 
- stack 0: 0x9CC
8640	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x9CC
8641	 67	PUSH2	0140	 	 
- stack 1: 0x9CC
- stack 0: 0x140
8642	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x9CC
- stack 0: 0x42000
8643	 6B	PUSH2	0075	 ;; _ecall_67a0fe92a8a5991d2445159c046d8d94208091bc0976388676bc4f16b0890b43	 
- stack 2: 0x9CC
- stack 1: 0x42000
- stack 0: 0x75
8644	 6E	JUMPI		 	 
- stack 0: 0x9CC
8645	 75	JUMPDEST		 ;; _ecall_67a0fe92a8a5991d2445159c046d8d94208091bc0976388676bc4f16b0890b43	 
- stack 0: 0x9CC
8646	 76	PUSH1	04	 	 
- stack 1: 0x9CC
- stack 0: 0x4
8647	 78	PUSH2	0160	 	 
- stack 2: 0x9CC
- stack 1: 0x4
- stack 0: 0x160
8648	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x9CC
- stack 1: 0x4
- stack 0: 0x9EC
8649	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x9CC
8650	 7D	PUSH1	04	 	 
- stack 1: 0x9CC
- stack 0: 0x4
8651	 7F	ADD		 	 
- stack 0: 0x9D0
8652	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x9D0
- stack 0: 0x9D0
8653	 81	MLOAD		 	 
- stack 1: 0x9D0
- stack 0: 0x57D00000066000000000000000000006574796D000074730052524500004B4F
8654	 82	PUSH1	F0	 	 
- stack 2: 0x9D0
- stack 1: 0x57D00000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8655	 84	SHR		 	 
- stack 1: 0x9D0
- stack 0: 0x57D
8656	 85	JUMP		 	 
- stack 0: 0x9D0
8657	 57D	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x9D0
8658	 57E	PUSH4	00000000	 	 
- stack 1: 0x9D0
- stack 0: 0x0
8659	 583	PUSH2	0140	 	 
- stack 2: 0x9D0
- stack 1: 0x0
- stack 0: 0x140
8660	 586	MSTORE		 	  ;; # store to x10
- stack 0: 0x9D0
8661	 587	PUSH1	04	 	 
- stack 1: 0x9D0
- stack 0: 0x4
8662	 589	ADD		 	 
- stack 0: 0x9D4
8663	 58A	DUP1		 	  ;; # executing pc
- stack 1: 0x9D4
- stack 0: 0x9D4
8664	 58B	MLOAD		 	 
- stack 1: 0x9D4
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00000000
8665	 58C	PUSH1	F0	 	 
- stack 2: 0x9D4
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
8666	 58E	SHR		 	 
- stack 1: 0x9D4
- stack 0: 0x66
8667	 58F	JUMP		 	 
- stack 0: 0x9D4
8668	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x9D4
8669	 67	PUSH2	0140	 	 
- stack 1: 0x9D4
- stack 0: 0x140
8670	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x9D4
- stack 0: 0x0
8671	 6B	PUSH2	0075	 ;; _ecall_67a0fe92a8a5991d2445159c046d8d94208091bc0976388676bc4f16b0890b43	 
- stack 2: 0x9D4
- stack 1: 0x0
- stack 0: 0x75
8672	 6E	JUMPI		 	 
- stack 0: 0x9D4
8673	 6F	PUSH1	20	 	 
- stack 1: 0x9D4
- stack 0: 0x20
8674	 71	PUSH2	0160	 	 
- stack 2: 0x9D4
- stack 1: 0x20
- stack 0: 0x160
8675	 74	RETURN		 	 
Final bytecode length; 2945
Returned: 00000000000000000000000000000000000000000000000000000000000009ec
gasUsed : 29973
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484,488
** HOT: 48c - range: 48c,490,494,498,49c,4a0,4a4,4a8
** HOT: 4ac - range: 4ac,4b0,4b4,4b8,4bc,4c0,4c4,4c8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4,4e8
** HOT: 4ec - range: 4ec,4f0,4f4,4f8,4fc,500,504,508
** HOT: 50c - range: 50c,510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530,534,538,53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c,560,564
** HOT: 568 - range: 568,56c,570,574,578,57c,580,584
** HOT: 588 - range: 588,58c,590,594,598,59c,5a0,5a4
** HOT: 5a8 - range: 5a8,5ac,5b0,5b4,5b8,5bc,5c0
** HOT: 5c4 - range: 5c4,5c8,5cc,5d0,5d4,5d8,5dc,5e0
** HOT: 5e4 - range: 5e4,5e8,5ec,5f0,5f4,5f8,5fc,600
** HOT: 604 - range: 604,608,60c,610,614,618,61c,620
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640
** HOT: 644 - range: 644,648,64c,650,654,658,65c
** HOT: 660 - range: 660,664,668,66c,670,674
** HOT: 678 - range: 678,67c,680,684,688,68c
** HOT: 690 - range: 690,694,698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6a8 - range: 6a8,6ac,6b0,6b4,6b8,6bc,6c0
** HOT: 6c4 - range: 6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0
** HOT: 6f4 - range: 6f4,6f8,6fc
** HOT: 700 - range: 700,704,708,70c,710,714,718,71c,720,724
** HOT: 704 - range: 704,708,70c,710,714,718,71c,720,724
** HOT: 728 - range: 728,72c,730
** HOT: 734 - range: 734,738,73c,740,744,748,74c
** HOT: 738 - range: 738,73c,740,744,748,74c
** HOT: 750 - range: 750,754,758
** HOT: 75c - range: 75c,760,764,768,76c,770,774,778
** HOT: 760 - range: 760,764,768,76c,770,774,778
** HOT: 77c - range: 77c,780,784
** HOT: 788 - range: 788,78c,790,794,798,79c,7a0,7a4,7a8
** HOT: 78c - range: 78c,790,794,798,79c,7a0,7a4,7a8
** HOT: 7ac - range: 7ac,7b0,7b4
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4
** HOT: 7bc - range: 7bc,7c0,7c4,7c8,7cc,7d0,7d4
** HOT: 7d8 - range: 7d8,7dc,7e0
** HOT: 7e4 - range: 7e4,7e8,7ec,7f0,7f4,7f8,7fc,800,804
** HOT: 7e8 - range: 7e8,7ec,7f0,7f4,7f8,7fc,800,804
** HOT: 808 - range: 808,80c,810
** HOT: 814 - range: 814,818,81c,820,824,828,82c,830,834
** HOT: 818 - range: 818,81c,820,824,828,82c,830,834
** HOT: 838 - range: 838,83c,840
** HOT: 844 - range: 844,848,84c,850,854,858,85c
** HOT: 848 - range: 848,84c,850,854,858,85c
** HOT: 860 - range: 860,864,868
** HOT: 86c - range: 86c,870,874,878,87c,880,884,888
** HOT: 870 - range: 870,874,878,87c,880,884,888
** HOT: 88c - range: 88c,890,894
** HOT: 898 - range: 898,89c,8a0,8a4,8a8,8ac,8b0,8b4,8b8
** HOT: 89c - range: 89c,8a0,8a4,8a8,8ac,8b0,8b4,8b8
** HOT: 8bc - range: 8bc,8c0,8c4
** HOT: 8c8 - range: 8c8,8cc,8d0,8d4,8d8,8dc,8e0,8e4
** HOT: 8cc - range: 8cc,8d0,8d4,8d8,8dc,8e0,8e4
** HOT: 8e8 - range: 8e8,8ec,8f0
** HOT: 8f4 - range: 8f4,8f8,8fc,900,904,908,90c,910,914
** HOT: 8f8 - range: 8f8,8fc,900,904,908,90c,910,914
** HOT: 918 - range: 918,91c,920
** HOT: 924 - range: 924,928,92c,930,934,938,93c,940,944
** HOT: 928 - range: 928,92c,930,934,938,93c,940,944
** HOT: 948 - range: 948,94c,950
** HOT: 954 - range: 954,958,95c,960,964
** HOT: 968 - range: 968,96c,970,974,978
** HOT: 97c - range: 97c,980,984,988
** HOT: 98c - range: 98c,990,994,998,99c,9a0,9a4
