Running in EVM:
0	 0	PUSH4	0310	 	 
- stack 0: 0x310
1	 5	PUSH2	049C	 ;; _rambegin	 
- stack 1: 0x310
- stack 0: 0x49C
2	 8	PUSH1	01	 	 
- stack 2: 0x310
- stack 1: 0x49C
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x310
- stack 0: 0x49D
4	 B	PUSH2	0400	 	 
- stack 2: 0x310
- stack 1: 0x49D
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100000034070000530042006600000086000000A0000000BF000000D90002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100000034070000530042006600000086000000A0000000BF000000D90002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000000A0000000BF000000D9000200F302A8
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000000A0000000BF000000D9000200F302A8
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34070000530042006600000086000000A0000000BF000000D9000200F302A8
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34070000530042006600000086000000A0000000BF000000D9000200F302A8
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340700
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340700
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x700
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x700
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x700
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x700
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BF000000D9000200F302A801350000
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BF000000D9000200F302A801350000
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BF000000D9000200F302A80135000000A00001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BF000000D9000200F302A80135000000A00001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_f22cf39156333e0aab2a6133bb09467b641842662db4fca3d09674bd9cd555fc	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_f22cf39156333e0aab2a6133bb09467b641842662db4fca3d09674bd9cd555fc	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x700
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BF000000D9000200F302A80135000000A0000101480000
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BF000000D9000200F302A80135000000A0000101480000
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BF000000D9000200F302A80135000000A0000101480000
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BF000000D9000200F302A80135000000A0000101480000
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BF000000D9000200F302A80135000000A000010148000000D90003
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BF000000D9000200F302A80135000000A000010148000000D90003
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x414
94	 A1	PUSH2	0020	 	 
- stack 1: 0x414
- stack 0: 0x20
95	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x414
- stack 0: 0x0
96	 A5	PUSH1	03	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x3
97	 A7	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
98	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x414
99	 A9	MLOAD		 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0xA0000000BF000000D9000200F302A80135000000A000010148000000D90003
100	 AA	PUSH1	E0	 	 
- stack 3: 0x414
- stack 2: 0x0
- stack 1: 0xA0000000BF000000D9000200F302A80135000000A000010148000000D90003
- stack 0: 0xE0
101	 AC	SHR		 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0xA00000
102	 AD	PUSH2	FFFF	 	 
- stack 3: 0x414
- stack 2: 0x0
- stack 1: 0xA00000
- stack 0: 0xFFFF
103	 B0	AND		 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x0
104	 B1	SAR		 	 
- stack 1: 0x414
- stack 0: 0x0
105	 B2	PUSH2	0060	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x60
106	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x414
107	 B6	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
108	 B8	ADD		 	 
- stack 0: 0x418
109	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
110	 BA	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBF000000D9000200F302A80135000000A000010148000000D9000300F30294
111	 BB	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBF000000D9000200F302A80135000000A000010148000000D9000300F30294
- stack 0: 0xF0
112	 BD	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBF
113	 BE	JUMP		 	 
- stack 0: 0x418
114	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x418
115	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
116	 C1	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBF000000D9000200F302A80135000000A000010148000000D9000300F30294
117	 C2	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xBF000000D9000200F302A80135000000A000010148000000D9000300F30294
- stack 0: 0xE0
118	 C4	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBF0000
119	 C5	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xBF0000
- stack 0: 0xFFFF
120	 C8	AND		 	 
- stack 1: 0x418
- stack 0: 0x0
121	 C9	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x1
122	 CB	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0x0
123	 CC	PUSH2	03A0	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x3A0
124	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x418
125	 D0	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
126	 D2	ADD		 	 
- stack 0: 0x41C
127	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
128	 D4	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD9000200F302A80135000000A000010148000000D9000300F3029401350000
129	 D5	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD9000200F302A80135000000A000010148000000D9000300F3029401350000
- stack 0: 0xF0
130	 D7	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD9
131	 D8	JUMP		 	 
- stack 0: 0x41C
132	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x41C
133	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
134	 DB	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD9000200F302A80135000000A000010148000000D9000300F3029401350000
135	 DC	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD9000200F302A80135000000A000010148000000D9000300F3029401350000
- stack 0: 0xE0
136	 DE	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD90002
137	 DF	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD90002
- stack 0: 0xFFFF
138	 E2	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
139	 E3	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
140	 E5	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
141	 E6	PUSH2	0380	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x380
142	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x41C
143	 EA	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
144	 EC	ADD		 	 
- stack 0: 0x420
145	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
146	 EE	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xF302A80135000000A000010148000000D9000300F302940135000000A00007
147	 EF	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xF302A80135000000A000010148000000D9000300F302940135000000A00007
- stack 0: 0xF0
148	 F1	SHR		 	 
- stack 1: 0x420
- stack 0: 0xF3
149	 F2	JUMP		 	 
- stack 0: 0x420
150	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x420
151	 F4	PUSH2	0060	 	 
- stack 1: 0x420
- stack 0: 0x60
152	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x420
- stack 0: 0x0
153	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
154	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x0
155	 FE	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x3A0
156	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
157	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
158	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x0
159	 108	SUB		 	 
- stack 1: 0x420
- stack 0: 0x0
160	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x111
161	 10C	JUMPI		 	 
- stack 0: 0x420
162	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x420
- stack 0: 0x12B
163	 110	JUMP		 	 
- stack 0: 0x420
164	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x420
165	 12C	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
166	 12E	ADD		 	 
- stack 0: 0x424
167	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
168	 130	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x135000000A000010148000000D9000300F302940135000000A00007015BF000
169	 131	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x135000000A000010148000000D9000300F302940135000000A00007015BF000
- stack 0: 0xF0
170	 133	SHR		 	 
- stack 1: 0x424
- stack 0: 0x135
171	 134	JUMP		 	 
- stack 0: 0x424
172	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x424
173	 136	PUSH4	80000000	 	 
- stack 1: 0x424
- stack 0: 0x80000000
174	 13B	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0x80000000
- stack 0: 0x20
175	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
176	 13F	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
177	 141	ADD		 	 
- stack 0: 0x428
178	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
179	 143	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0xA000010148000000D9000300F302940135000000A00007015BF00000D90004
180	 144	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0xA000010148000000D9000300F302940135000000A00007015BF00000D90004
- stack 0: 0xF0
181	 146	SHR		 	 
- stack 1: 0x428
- stack 0: 0xA0
182	 147	JUMP		 	 
- stack 0: 0x428
183	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x428
184	 A1	PUSH2	0020	 	 
- stack 1: 0x428
- stack 0: 0x20
185	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x428
- stack 0: 0x80000000
186	 A5	PUSH1	03	 	 
- stack 2: 0x428
- stack 1: 0x80000000
- stack 0: 0x3
187	 A7	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
188	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x428
189	 A9	MLOAD		 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA000010148000000D9000300F302940135000000A00007015BF00000D90004
190	 AA	PUSH1	E0	 	 
- stack 3: 0x428
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA000010148000000D9000300F302940135000000A00007015BF00000D90004
- stack 0: 0xE0
191	 AC	SHR		 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00001
192	 AD	PUSH2	FFFF	 	 
- stack 3: 0x428
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00001
- stack 0: 0xFFFF
193	 B0	AND		 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x1
194	 B1	SAR		 	 
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
195	 B2	PUSH2	0060	 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
- stack 0: 0x60
196	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x428
197	 B6	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
198	 B8	ADD		 	 
- stack 0: 0x42C
199	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
200	 BA	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x148000000D9000300F302940135000000A00007015BF00000D9000400F30280
201	 BB	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x148000000D9000300F302940135000000A00007015BF00000D9000400F30280
- stack 0: 0xF0
202	 BD	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x148
203	 BE	JUMP		 	 
- stack 0: 0x42C
204	 148	JUMPDEST		 ;; __riscvimpl_LUI_c0000eb7	  ;; # instr: lui t4,0xc0000(ignore imm)
- stack 0: 0x42C
205	 149	PUSH4	c0000000	 	 
- stack 1: 0x42C
- stack 0: 0xC0000000
206	 14E	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0xC0000000
- stack 0: 0x3A0
207	 151	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
208	 152	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
209	 154	ADD		 	 
- stack 0: 0x430
210	 155	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
211	 156	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xD9000300F302940135000000A00007015BF00000D9000400F3028001350000
212	 157	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xD9000300F302940135000000A00007015BF00000D9000400F3028001350000
- stack 0: 0xF0
213	 159	SHR		 	 
- stack 1: 0x430
- stack 0: 0xD9
214	 15A	JUMP		 	 
- stack 0: 0x430
215	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
216	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
217	 DB	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xD9000300F302940135000000A00007015BF00000D9000400F3028001350000
218	 DC	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xD9000300F302940135000000A00007015BF00000D9000400F3028001350000
- stack 0: 0xE0
219	 DE	SHR		 	 
- stack 1: 0x430
- stack 0: 0xD90003
220	 DF	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xD90003
- stack 0: 0xFFFF
221	 E2	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
222	 E3	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
223	 E5	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
224	 E6	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
225	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
226	 EA	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
227	 EC	ADD		 	 
- stack 0: 0x434
228	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
229	 EE	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xF302940135000000A00007015BF00000D9000400F302800135000000A0000E
230	 EF	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xF302940135000000A00007015BF00000D9000400F302800135000000A0000E
- stack 0: 0xF0
231	 F1	SHR		 	 
- stack 1: 0x434
- stack 0: 0xF3
232	 F2	JUMP		 	 
- stack 0: 0x434
233	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x434
234	 F4	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
235	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
236	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000
- stack 0: 0xFFFFFFFF
237	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0xC0000000
238	 FE	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0xC0000000
- stack 0: 0x3A0
239	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0xC0000000
- stack 0: 0xC0000000
240	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0xC0000000
- stack 1: 0xC0000000
- stack 0: 0xFFFFFFFF
241	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0xC0000000
- stack 0: 0xC0000000
242	 108	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
243	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x111
244	 10C	JUMPI		 	 
- stack 0: 0x434
245	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x434
- stack 0: 0x12B
246	 110	JUMP		 	 
- stack 0: 0x434
247	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x434
248	 12C	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
249	 12E	ADD		 	 
- stack 0: 0x438
250	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
251	 130	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x135000000A00007015BF00000D9000400F302800135000000A0000E016EFFE0
252	 131	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x135000000A00007015BF00000D9000400F302800135000000A0000E016EFFE0
- stack 0: 0xF0
253	 133	SHR		 	 
- stack 1: 0x438
- stack 0: 0x135
254	 134	JUMP		 	 
- stack 0: 0x438
255	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x438
256	 136	PUSH4	80000000	 	 
- stack 1: 0x438
- stack 0: 0x80000000
257	 13B	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x80000000
- stack 0: 0x20
258	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
259	 13F	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
260	 141	ADD		 	 
- stack 0: 0x43C
261	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
262	 143	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xA00007015BF00000D9000400F302800135000000A0000E016EFFE000D90005
263	 144	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xA00007015BF00000D9000400F302800135000000A0000E016EFFE000D90005
- stack 0: 0xF0
264	 146	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xA0
265	 147	JUMP		 	 
- stack 0: 0x43C
266	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x43C
267	 A1	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
268	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0x80000000
269	 A5	PUSH1	03	 	 
- stack 2: 0x43C
- stack 1: 0x80000000
- stack 0: 0x3
270	 A7	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
271	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x43C
272	 A9	MLOAD		 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007015BF00000D9000400F302800135000000A0000E016EFFE000D90005
273	 AA	PUSH1	E0	 	 
- stack 3: 0x43C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007015BF00000D9000400F302800135000000A0000E016EFFE000D90005
- stack 0: 0xE0
274	 AC	SHR		 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007
275	 AD	PUSH2	FFFF	 	 
- stack 3: 0x43C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007
- stack 0: 0xFFFF
276	 B0	AND		 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
277	 B1	SAR		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
278	 B2	PUSH2	0060	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
279	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x43C
280	 B6	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
281	 B8	ADD		 	 
- stack 0: 0x440
282	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
283	 BA	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x15BF00000D9000400F302800135000000A0000E016EFFE000D9000500F3026C
284	 BB	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x15BF00000D9000400F302800135000000A0000E016EFFE000D9000500F3026C
- stack 0: 0xF0
285	 BD	SHR		 	 
- stack 1: 0x440
- stack 0: 0x15B
286	 BE	JUMP		 	 
- stack 0: 0x440
287	 15B	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x440
288	 15C	PUSH4	ff000000	 	 
- stack 1: 0x440
- stack 0: 0xFF000000
289	 161	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0xFF000000
- stack 0: 0x3A0
290	 164	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
291	 165	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
292	 167	ADD		 	 
- stack 0: 0x444
293	 168	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
294	 169	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xD9000400F302800135000000A0000E016EFFE000D9000500F3026C01350000
295	 16A	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xD9000400F302800135000000A0000E016EFFE000D9000500F3026C01350000
- stack 0: 0xF0
296	 16C	SHR		 	 
- stack 1: 0x444
- stack 0: 0xD9
297	 16D	JUMP		 	 
- stack 0: 0x444
298	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x444
299	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
300	 DB	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xD9000400F302800135000000A0000E016EFFE000D9000500F3026C01350000
301	 DC	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xD9000400F302800135000000A0000E016EFFE000D9000500F3026C01350000
- stack 0: 0xE0
302	 DE	SHR		 	 
- stack 1: 0x444
- stack 0: 0xD90004
303	 DF	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xD90004
- stack 0: 0xFFFF
304	 E2	AND		 	 
- stack 1: 0x444
- stack 0: 0x4
305	 E3	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x1
306	 E5	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x4
307	 E6	PUSH2	0380	 	 
- stack 2: 0x444
- stack 1: 0x4
- stack 0: 0x380
308	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x444
309	 EA	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
310	 EC	ADD		 	 
- stack 0: 0x448
311	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
312	 EE	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xF302800135000000A0000E016EFFE000D9000500F3026C0135000001810001
313	 EF	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xF302800135000000A0000E016EFFE000D9000500F3026C0135000001810001
- stack 0: 0xF0
314	 F1	SHR		 	 
- stack 1: 0x448
- stack 0: 0xF3
315	 F2	JUMP		 	 
- stack 0: 0x448
316	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x448
317	 F4	PUSH2	0060	 	 
- stack 1: 0x448
- stack 0: 0x60
318	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
319	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
320	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0xFF000000
321	 FE	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xFF000000
- stack 0: 0x3A0
322	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x448
- stack 1: 0xFF000000
- stack 0: 0xFF000000
323	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
324	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x448
- stack 1: 0xFF000000
- stack 0: 0xFF000000
325	 108	SUB		 	 
- stack 1: 0x448
- stack 0: 0x0
326	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x448
- stack 1: 0x0
- stack 0: 0x111
327	 10C	JUMPI		 	 
- stack 0: 0x448
328	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x448
- stack 0: 0x12B
329	 110	JUMP		 	 
- stack 0: 0x448
330	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x448
331	 12C	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
332	 12E	ADD		 	 
- stack 0: 0x44C
333	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
334	 130	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x135000000A0000E016EFFE000D9000500F3026C013500000181000100A0001F
335	 131	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x135000000A0000E016EFFE000D9000500F3026C013500000181000100A0001F
- stack 0: 0xF0
336	 133	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x135
337	 134	JUMP		 	 
- stack 0: 0x44C
338	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x44C
339	 136	PUSH4	80000000	 	 
- stack 1: 0x44C
- stack 0: 0x80000000
340	 13B	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0x80000000
- stack 0: 0x20
341	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
342	 13F	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
343	 141	ADD		 	 
- stack 0: 0x450
344	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
345	 143	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xA0000E016EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF
346	 144	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xA0000E016EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF
- stack 0: 0xF0
347	 146	SHR		 	 
- stack 1: 0x450
- stack 0: 0xA0
348	 147	JUMP		 	 
- stack 0: 0x450
349	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x450
350	 A1	PUSH2	0020	 	 
- stack 1: 0x450
- stack 0: 0x20
351	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x450
- stack 0: 0x80000000
352	 A5	PUSH1	03	 	 
- stack 2: 0x450
- stack 1: 0x80000000
- stack 0: 0x3
353	 A7	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
354	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x450
355	 A9	MLOAD		 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E016EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF
356	 AA	PUSH1	E0	 	 
- stack 3: 0x450
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E016EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF
- stack 0: 0xE0
357	 AC	SHR		 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E
358	 AD	PUSH2	FFFF	 	 
- stack 3: 0x450
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E
- stack 0: 0xFFFF
359	 B0	AND		 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
360	 B1	SAR		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
361	 B2	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
362	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
363	 B6	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
364	 B8	ADD		 	 
- stack 0: 0x454
365	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
366	 BA	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x16EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF00D90006
367	 BB	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x16EFFE000D9000500F3026C013500000181000100A0001F00BFFFFF00D90006
- stack 0: 0xF0
368	 BD	SHR		 	 
- stack 1: 0x454
- stack 0: 0x16E
369	 BE	JUMP		 	 
- stack 0: 0x454
370	 16E	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x454
371	 16F	PUSH4	fffe0000	 	 
- stack 1: 0x454
- stack 0: 0xFFFE0000
372	 174	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
373	 177	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
374	 178	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
375	 17A	ADD		 	 
- stack 0: 0x458
376	 17B	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
377	 17C	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xD9000500F3026C013500000181000100A0001F00BFFFFF00D9000600F30254
378	 17D	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xD9000500F3026C013500000181000100A0001F00BFFFFF00D9000600F30254
- stack 0: 0xF0
379	 17F	SHR		 	 
- stack 1: 0x458
- stack 0: 0xD9
380	 180	JUMP		 	 
- stack 0: 0x458
381	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
382	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
383	 DB	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xD9000500F3026C013500000181000100A0001F00BFFFFF00D9000600F30254
384	 DC	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xD9000500F3026C013500000181000100A0001F00BFFFFF00D9000600F30254
- stack 0: 0xE0
385	 DE	SHR		 	 
- stack 1: 0x458
- stack 0: 0xD90005
386	 DF	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xD90005
- stack 0: 0xFFFF
387	 E2	AND		 	 
- stack 1: 0x458
- stack 0: 0x5
388	 E3	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x1
389	 E5	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x5
390	 E6	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x5
- stack 0: 0x380
391	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
392	 EA	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
393	 EC	ADD		 	 
- stack 0: 0x45C
394	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
395	 EE	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0xF3026C013500000181000100A0001F00BFFFFF00D9000600F3025401350000
396	 EF	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0xF3026C013500000181000100A0001F00BFFFFF00D9000600F3025401350000
- stack 0: 0xF0
397	 F1	SHR		 	 
- stack 1: 0x45C
- stack 0: 0xF3
398	 F2	JUMP		 	 
- stack 0: 0x45C
399	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x45C
400	 F4	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
401	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
402	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
403	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xFFFE0000
404	 FE	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
405	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
406	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
407	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
408	 108	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
409	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x111
410	 10C	JUMPI		 	 
- stack 0: 0x45C
411	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x45C
- stack 0: 0x12B
412	 110	JUMP		 	 
- stack 0: 0x45C
413	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x45C
414	 12C	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
415	 12E	ADD		 	 
- stack 0: 0x460
416	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
417	 130	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x13500000181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF
418	 131	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x13500000181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF
- stack 0: 0xF0
419	 133	SHR		 	 
- stack 1: 0x460
- stack 0: 0x135
420	 134	JUMP		 	 
- stack 0: 0x460
421	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x460
422	 136	PUSH4	80000000	 	 
- stack 1: 0x460
- stack 0: 0x80000000
423	 13B	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x80000000
- stack 0: 0x20
424	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
425	 13F	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
426	 141	ADD		 	 
- stack 0: 0x464
427	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
428	 143	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF00A00000
429	 144	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF00A00000
- stack 0: 0xF0
430	 146	SHR		 	 
- stack 1: 0x464
- stack 0: 0x181
431	 147	JUMP		 	 
- stack 0: 0x464
432	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x464
433	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
434	 183	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF00A00000
435	 184	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x181000100A0001F00BFFFFF00D9000600F30254013500000181FFFF00A00000
- stack 0: 0xE0
436	 186	SHR		 	 
- stack 1: 0x464
- stack 0: 0x1810001
437	 187	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x1810001
- stack 0: 0xFFFF
438	 18A	AND		 	 
- stack 1: 0x464
- stack 0: 0x1
439	 18B	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0x1
440	 18D	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x1
441	 18E	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0x20
442	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0x1
- stack 0: 0x80000000
443	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x464
- stack 0: 0x80000001
444	 193	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x80000001
- stack 0: 0x20
445	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
446	 197	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
447	 199	ADD		 	 
- stack 0: 0x468
448	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
449	 19B	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xA0001F00BFFFFF00D9000600F30254013500000181FFFF00A0000001A00000
450	 19C	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xA0001F00BFFFFF00D9000600F30254013500000181FFFF00A0000001A00000
- stack 0: 0xF0
451	 19E	SHR		 	 
- stack 1: 0x468
- stack 0: 0xA0
452	 19F	JUMP		 	 
- stack 0: 0x468
453	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x468
454	 A1	PUSH2	0020	 	 
- stack 1: 0x468
- stack 0: 0x20
455	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x468
- stack 0: 0x80000001
456	 A5	PUSH1	03	 	 
- stack 2: 0x468
- stack 1: 0x80000001
- stack 0: 0x3
457	 A7	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
458	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x468
459	 A9	MLOAD		 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F00BFFFFF00D9000600F30254013500000181FFFF00A0000001A00000
460	 AA	PUSH1	E0	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F00BFFFFF00D9000600F30254013500000181FFFF00A0000001A00000
- stack 0: 0xE0
461	 AC	SHR		 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F
462	 AD	PUSH2	FFFF	 	 
- stack 3: 0x468
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F
- stack 0: 0xFFFF
463	 B0	AND		 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
464	 B1	SAR		 	 
- stack 1: 0x468
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
465	 B2	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
466	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
467	 B6	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
468	 B8	ADD		 	 
- stack 0: 0x46C
469	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
470	 BA	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xBFFFFF00D9000600F30254013500000181FFFF00A0000001A0000001B3FFFF
471	 BB	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xBFFFFF00D9000600F30254013500000181FFFF00A0000001A0000001B3FFFF
- stack 0: 0xF0
472	 BD	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xBF
473	 BE	JUMP		 	 
- stack 0: 0x46C
474	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x46C
475	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
476	 C1	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xBFFFFF00D9000600F30254013500000181FFFF00A0000001A0000001B3FFFF
477	 C2	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xBFFFFF00D9000600F30254013500000181FFFF00A0000001A0000001B3FFFF
- stack 0: 0xE0
478	 C4	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xBFFFFF
479	 C5	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xBFFFFF
- stack 0: 0xFFFF
480	 C8	AND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFF
481	 C9	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xFFFF
- stack 0: 0x1
482	 CB	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
483	 CC	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
484	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
485	 D0	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
486	 D2	ADD		 	 
- stack 0: 0x470
487	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
488	 D4	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xD9000600F30254013500000181FFFF00A0000001A0000001B3FFFF00D90007
489	 D5	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xD9000600F30254013500000181FFFF00A0000001A0000001B3FFFF00D90007
- stack 0: 0xF0
490	 D7	SHR		 	 
- stack 1: 0x470
- stack 0: 0xD9
491	 D8	JUMP		 	 
- stack 0: 0x470
492	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
493	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
494	 DB	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xD9000600F30254013500000181FFFF00A0000001A0000001B3FFFF00D90007
495	 DC	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0xD9000600F30254013500000181FFFF00A0000001A0000001B3FFFF00D90007
- stack 0: 0xE0
496	 DE	SHR		 	 
- stack 1: 0x470
- stack 0: 0xD90006
497	 DF	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0xD90006
- stack 0: 0xFFFF
498	 E2	AND		 	 
- stack 1: 0x470
- stack 0: 0x6
499	 E3	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x6
- stack 0: 0x1
500	 E5	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x6
501	 E6	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x6
- stack 0: 0x380
502	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
503	 EA	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
504	 EC	ADD		 	 
- stack 0: 0x474
505	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
506	 EE	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xF30254013500000181FFFF00A0000001A0000001B3FFFF00D9000700F30238
507	 EF	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xF30254013500000181FFFF00A0000001A0000001B3FFFF00D9000700F30238
- stack 0: 0xF0
508	 F1	SHR		 	 
- stack 1: 0x474
- stack 0: 0xF3
509	 F2	JUMP		 	 
- stack 0: 0x474
510	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x474
511	 F4	PUSH2	0060	 	 
- stack 1: 0x474
- stack 0: 0x60
512	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x474
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
513	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
514	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0xFFFFFFFF
515	 FE	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
516	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
517	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x474
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
518	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x474
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
519	 108	SUB		 	 
- stack 1: 0x474
- stack 0: 0x0
520	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x111
521	 10C	JUMPI		 	 
- stack 0: 0x474
522	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x474
- stack 0: 0x12B
523	 110	JUMP		 	 
- stack 0: 0x474
524	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x474
525	 12C	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
526	 12E	ADD		 	 
- stack 0: 0x478
527	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
528	 130	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x13500000181FFFF00A0000001A0000001B3FFFF00D9000700F3023801350000
529	 131	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x13500000181FFFF00A0000001A0000001B3FFFF00D9000700F3023801350000
- stack 0: 0xF0
530	 133	SHR		 	 
- stack 1: 0x478
- stack 0: 0x135
531	 134	JUMP		 	 
- stack 0: 0x478
532	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x478
533	 136	PUSH4	80000000	 	 
- stack 1: 0x478
- stack 0: 0x80000000
534	 13B	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x20
535	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x478
536	 13F	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
537	 141	ADD		 	 
- stack 0: 0x47C
538	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
539	 143	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x181FFFF00A0000001A0000001B3FFFF00D9000700F30238013500000181FFFF
540	 144	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x181FFFF00A0000001A0000001B3FFFF00D9000700F30238013500000181FFFF
- stack 0: 0xF0
541	 146	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x181
542	 147	JUMP		 	 
- stack 0: 0x47C
543	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x47C
544	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
545	 183	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x181FFFF00A0000001A0000001B3FFFF00D9000700F30238013500000181FFFF
546	 184	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x181FFFF00A0000001A0000001B3FFFF00D9000700F30238013500000181FFFF
- stack 0: 0xE0
547	 186	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x181FFFF
548	 187	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x181FFFF
- stack 0: 0xFFFF
549	 18A	AND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFF
550	 18B	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xFFFF
- stack 0: 0x1
551	 18D	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
552	 18E	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
553	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
554	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x47C
- stack 0: 0x7FFFFFFF
555	 193	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
556	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
557	 197	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
558	 199	ADD		 	 
- stack 0: 0x480
559	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
560	 19B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xA0000001A0000001B3FFFF00D9000700F30238013500000181FFFF00A00001
561	 19C	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xA0000001A0000001B3FFFF00D9000700F30238013500000181FFFF00A00001
- stack 0: 0xF0
562	 19E	SHR		 	 
- stack 1: 0x480
- stack 0: 0xA0
563	 19F	JUMP		 	 
- stack 0: 0x480
564	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x480
565	 A1	PUSH2	0020	 	 
- stack 1: 0x480
- stack 0: 0x20
566	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x480
- stack 0: 0x7FFFFFFF
567	 A5	PUSH1	03	 	 
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
568	 A7	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x7FFFFFFF
569	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0x480
570	 A9	MLOAD		 	 
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0000001A0000001B3FFFF00D9000700F30238013500000181FFFF00A00001
571	 AA	PUSH1	E0	 	 
- stack 3: 0x480
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0000001A0000001B3FFFF00D9000700F30238013500000181FFFF00A00001
- stack 0: 0xE0
572	 AC	SHR		 	 
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0xA00000
573	 AD	PUSH2	FFFF	 	 
- stack 3: 0x480
- stack 2: 0x7FFFFFFF
- stack 1: 0xA00000
- stack 0: 0xFFFF
574	 B0	AND		 	 
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0x0
575	 B1	SAR		 	 
- stack 1: 0x480
- stack 0: 0x7FFFFFFF
576	 B2	PUSH2	0060	 	 
- stack 2: 0x480
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
577	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x480
578	 B6	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
579	 B8	ADD		 	 
- stack 0: 0x484
580	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
581	 BA	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1A0000001B3FFFF00D9000700F30238013500000181FFFF00A0000101D20000
582	 BB	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1A0000001B3FFFF00D9000700F30238013500000181FFFF00A0000101D20000
- stack 0: 0xF0
583	 BD	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1A0
584	 BE	JUMP		 	 
- stack 0: 0x484
585	 1A0	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x484
586	 1A1	PUSH4	80000000	 	 
- stack 1: 0x484
- stack 0: 0x80000000
587	 1A6	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x3A0
588	 1A9	MSTORE		 	  ;; # store to x29
- stack 0: 0x484
589	 1AA	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
590	 1AC	ADD		 	 
- stack 0: 0x488
591	 1AD	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
592	 1AE	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1B3FFFF00D9000700F30238013500000181FFFF00A0000101D2000001B3FFFF
593	 1AF	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1B3FFFF00D9000700F30238013500000181FFFF00A0000101D2000001B3FFFF
- stack 0: 0xF0
594	 1B1	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1B3
595	 1B2	JUMP		 	 
- stack 0: 0x488
596	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x488
597	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
598	 1B5	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1B3FFFF00D9000700F30238013500000181FFFF00A0000101D2000001B3FFFF
599	 1B6	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x1B3FFFF00D9000700F30238013500000181FFFF00A0000101D2000001B3FFFF
- stack 0: 0xE0
600	 1B8	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1B3FFFF
601	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x1B3FFFF
- stack 0: 0xFFFF
602	 1BC	AND		 	 
- stack 1: 0x488
- stack 0: 0xFFFF
603	 1BD	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xFFFF
- stack 0: 0x1
604	 1BF	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
605	 1C0	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
606	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
607	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x488
- stack 0: 0x7FFFFFFF
608	 1C5	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
609	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x488
610	 1C9	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
611	 1CB	ADD		 	 
- stack 0: 0x48C
612	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
613	 1CD	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xD9000700F30238013500000181FFFF00A0000101D2000001B3FFFF00D90008
614	 1CE	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xD9000700F30238013500000181FFFF00A0000101D2000001B3FFFF00D90008
- stack 0: 0xF0
615	 1D0	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xD9
616	 1D1	JUMP		 	 
- stack 0: 0x48C
617	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x48C
618	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
619	 DB	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xD9000700F30238013500000181FFFF00A0000101D2000001B3FFFF00D90008
620	 DC	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0xD9000700F30238013500000181FFFF00A0000101D2000001B3FFFF00D90008
- stack 0: 0xE0
621	 DE	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xD90007
622	 DF	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0xD90007
- stack 0: 0xFFFF
623	 E2	AND		 	 
- stack 1: 0x48C
- stack 0: 0x7
624	 E3	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x7
- stack 0: 0x1
625	 E5	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x7
626	 E6	PUSH2	0380	 	 
- stack 2: 0x48C
- stack 1: 0x7
- stack 0: 0x380
627	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x48C
628	 EA	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
629	 EC	ADD		 	 
- stack 0: 0x490
630	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
631	 EE	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xF30238013500000181FFFF00A0000101D2000001B3FFFF00D9000800F3021C
632	 EF	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xF30238013500000181FFFF00A0000101D2000001B3FFFF00D9000800F3021C
- stack 0: 0xF0
633	 F1	SHR		 	 
- stack 1: 0x490
- stack 0: 0xF3
634	 F2	JUMP		 	 
- stack 0: 0x490
635	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x490
636	 F4	PUSH2	0060	 	 
- stack 1: 0x490
- stack 0: 0x60
637	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x490
- stack 0: 0x7FFFFFFF
638	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x490
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
639	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x490
- stack 0: 0x7FFFFFFF
640	 FE	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
641	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x490
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
642	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x490
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
643	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x490
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
644	 108	SUB		 	 
- stack 1: 0x490
- stack 0: 0x0
645	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x490
- stack 1: 0x0
- stack 0: 0x111
646	 10C	JUMPI		 	 
- stack 0: 0x490
647	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x490
- stack 0: 0x12B
648	 110	JUMP		 	 
- stack 0: 0x490
649	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x490
650	 12C	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
651	 12E	ADD		 	 
- stack 0: 0x494
652	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
653	 130	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x13500000181FFFF00A0000101D2000001B3FFFF00D9000800F3021C01350000
654	 131	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x13500000181FFFF00A0000101D2000001B3FFFF00D9000800F3021C01350000
- stack 0: 0xF0
655	 133	SHR		 	 
- stack 1: 0x494
- stack 0: 0x135
656	 134	JUMP		 	 
- stack 0: 0x494
657	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x494
658	 136	PUSH4	80000000	 	 
- stack 1: 0x494
- stack 0: 0x80000000
659	 13B	PUSH2	0020	 	 
- stack 2: 0x494
- stack 1: 0x80000000
- stack 0: 0x20
660	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x494
661	 13F	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
662	 141	ADD		 	 
- stack 0: 0x498
663	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
664	 143	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x181FFFF00A0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF
665	 144	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x181FFFF00A0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF
- stack 0: 0xF0
666	 146	SHR		 	 
- stack 1: 0x498
- stack 0: 0x181
667	 147	JUMP		 	 
- stack 0: 0x498
668	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x498
669	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
670	 183	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x181FFFF00A0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF
671	 184	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x181FFFF00A0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF
- stack 0: 0xE0
672	 186	SHR		 	 
- stack 1: 0x498
- stack 0: 0x181FFFF
673	 187	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x181FFFF
- stack 0: 0xFFFF
674	 18A	AND		 	 
- stack 1: 0x498
- stack 0: 0xFFFF
675	 18B	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFFFF
- stack 0: 0x1
676	 18D	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
677	 18E	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
678	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
679	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x498
- stack 0: 0x7FFFFFFF
680	 193	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
681	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x498
682	 197	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
683	 199	ADD		 	 
- stack 0: 0x49C
684	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
685	 19B	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xA0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF00A00007
686	 19C	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0xA0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF00A00007
- stack 0: 0xF0
687	 19E	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xA0
688	 19F	JUMP		 	 
- stack 0: 0x49C
689	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x49C
690	 A1	PUSH2	0020	 	 
- stack 1: 0x49C
- stack 0: 0x20
691	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x49C
- stack 0: 0x7FFFFFFF
692	 A5	PUSH1	03	 	 
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
693	 A7	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x7FFFFFFF
694	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0x49C
695	 A9	MLOAD		 	 
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF00A00007
696	 AA	PUSH1	E0	 	 
- stack 3: 0x49C
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0000101D2000001B3FFFF00D9000800F3021C013500000181FFFF00A00007
- stack 0: 0xE0
697	 AC	SHR		 	 
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0xA00001
698	 AD	PUSH2	FFFF	 	 
- stack 3: 0x49C
- stack 2: 0x7FFFFFFF
- stack 1: 0xA00001
- stack 0: 0xFFFF
699	 B0	AND		 	 
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0x1
700	 B1	SAR		 	 
- stack 1: 0x49C
- stack 0: 0x3FFFFFFF
701	 B2	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0x3FFFFFFF
- stack 0: 0x60
702	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x49C
703	 B6	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
704	 B8	ADD		 	 
- stack 0: 0x4A0
705	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
706	 BA	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1D2000001B3FFFF00D9000800F3021C013500000181FFFF00A0000701E51000
707	 BB	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1D2000001B3FFFF00D9000800F3021C013500000181FFFF00A0000701E51000
- stack 0: 0xF0
708	 BD	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1D2
709	 BE	JUMP		 	 
- stack 0: 0x4A0
710	 1D2	JUMPDEST		 ;; __riscvimpl_LUI_40000eb7	  ;; # instr: lui t4,0x40000(ignore imm)
- stack 0: 0x4A0
711	 1D3	PUSH4	40000000	 	 
- stack 1: 0x4A0
- stack 0: 0x40000000
712	 1D8	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0x40000000
- stack 0: 0x3A0
713	 1DB	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A0
714	 1DC	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
715	 1DE	ADD		 	 
- stack 0: 0x4A4
716	 1DF	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
717	 1E0	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1B3FFFF00D9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF
718	 1E1	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x1B3FFFF00D9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF
- stack 0: 0xF0
719	 1E3	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1B3
720	 1E4	JUMP		 	 
- stack 0: 0x4A4
721	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4A4
722	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
723	 1B5	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1B3FFFF00D9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF
724	 1B6	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x1B3FFFF00D9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF
- stack 0: 0xE0
725	 1B8	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1B3FFFF
726	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x1B3FFFF
- stack 0: 0xFFFF
727	 1BC	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFF
728	 1BD	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFF
- stack 0: 0x1
729	 1BF	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
730	 1C0	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
731	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40000000
732	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x4A4
- stack 0: 0x3FFFFFFF
733	 1C5	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0x3FFFFFFF
- stack 0: 0x3A0
734	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
735	 1C9	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
736	 1CB	ADD		 	 
- stack 0: 0x4A8
737	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
738	 1CD	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF00D90009
739	 1CE	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xD9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF00D90009
- stack 0: 0xF0
740	 1D0	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD9
741	 1D1	JUMP		 	 
- stack 0: 0x4A8
742	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
743	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
744	 DB	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xD9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF00D90009
745	 DC	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xD9000800F3021C013500000181FFFF00A0000701E5100001B3FFFF00D90009
- stack 0: 0xE0
746	 DE	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xD90008
747	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xD90008
- stack 0: 0xFFFF
748	 E2	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x8
749	 E3	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x8
- stack 0: 0x1
750	 E5	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x8
751	 E6	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x8
- stack 0: 0x380
752	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
753	 EA	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
754	 EC	ADD		 	 
- stack 0: 0x4AC
755	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
756	 EE	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xF3021C013500000181FFFF00A0000701E5100001B3FFFF00D9000900F30200
757	 EF	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xF3021C013500000181FFFF00A0000701E5100001B3FFFF00D9000900F30200
- stack 0: 0xF0
758	 F1	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xF3
759	 F2	JUMP		 	 
- stack 0: 0x4AC
760	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x4AC
761	 F4	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
762	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0x3FFFFFFF
763	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x3FFFFFFF
- stack 0: 0xFFFFFFFF
764	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0x3FFFFFFF
765	 FE	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x3FFFFFFF
- stack 0: 0x3A0
766	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0x3FFFFFFF
- stack 0: 0x3FFFFFFF
767	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0x3FFFFFFF
- stack 1: 0x3FFFFFFF
- stack 0: 0xFFFFFFFF
768	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0x3FFFFFFF
- stack 0: 0x3FFFFFFF
769	 108	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
770	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x111
771	 10C	JUMPI		 	 
- stack 0: 0x4AC
772	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x4AC
- stack 0: 0x12B
773	 110	JUMP		 	 
- stack 0: 0x4AC
774	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x4AC
775	 12C	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
776	 12E	ADD		 	 
- stack 0: 0x4B0
777	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
778	 130	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x13500000181FFFF00A0000701E5100001B3FFFF00D9000900F3020001350000
779	 131	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x13500000181FFFF00A0000701E5100001B3FFFF00D9000900F3020001350000
- stack 0: 0xF0
780	 133	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x135
781	 134	JUMP		 	 
- stack 0: 0x4B0
782	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4B0
783	 136	PUSH4	80000000	 	 
- stack 1: 0x4B0
- stack 0: 0x80000000
784	 13B	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x80000000
- stack 0: 0x20
785	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
786	 13F	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
787	 141	ADD		 	 
- stack 0: 0x4B4
788	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
789	 143	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x181FFFF00A0000701E5100001B3FFFF00D9000900F30200013500000181FFFF
790	 144	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x181FFFF00A0000701E5100001B3FFFF00D9000900F30200013500000181FFFF
- stack 0: 0xF0
791	 146	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x181
792	 147	JUMP		 	 
- stack 0: 0x4B4
793	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4B4
794	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
795	 183	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x181FFFF00A0000701E5100001B3FFFF00D9000900F30200013500000181FFFF
796	 184	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x181FFFF00A0000701E5100001B3FFFF00D9000900F30200013500000181FFFF
- stack 0: 0xE0
797	 186	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x181FFFF
798	 187	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x181FFFF
- stack 0: 0xFFFF
799	 18A	AND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFF
800	 18B	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF
- stack 0: 0x1
801	 18D	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
802	 18E	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
803	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
804	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x4B4
- stack 0: 0x7FFFFFFF
805	 193	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
806	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
807	 197	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
808	 199	ADD		 	 
- stack 0: 0x4B8
809	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
810	 19B	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xA0000701E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E
811	 19C	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xA0000701E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E
- stack 0: 0xF0
812	 19E	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xA0
813	 19F	JUMP		 	 
- stack 0: 0x4B8
814	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x4B8
815	 A1	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
816	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
817	 A5	PUSH1	03	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
818	 A7	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
819	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x4B8
820	 A9	MLOAD		 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0000701E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E
821	 AA	PUSH1	E0	 	 
- stack 3: 0x4B8
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0000701E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E
- stack 0: 0xE0
822	 AC	SHR		 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0xA00007
823	 AD	PUSH2	FFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x7FFFFFFF
- stack 1: 0xA00007
- stack 0: 0xFFFF
824	 B0	AND		 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7
825	 B1	SAR		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFF
826	 B2	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFF
- stack 0: 0x60
827	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
828	 B6	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
829	 B8	ADD		 	 
- stack 0: 0x4BC
830	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
831	 BA	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E01F80020
832	 BB	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1E5100001B3FFFF00D9000900F30200013500000181FFFF00A0000E01F80020
- stack 0: 0xF0
833	 BD	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1E5
834	 BE	JUMP		 	 
- stack 0: 0x4BC
835	 1E5	JUMPDEST		 ;; __riscvimpl_LUI_1000eb7	  ;; # instr: lui t4,0x1000(ignore imm)
- stack 0: 0x4BC
836	 1E6	PUSH4	01000000	 	 
- stack 1: 0x4BC
- stack 0: 0x1000000
837	 1EB	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x1000000
- stack 0: 0x3A0
838	 1EE	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
839	 1EF	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
840	 1F1	ADD		 	 
- stack 0: 0x4C0
841	 1F2	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
842	 1F3	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x1B3FFFF00D9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF
843	 1F4	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x1B3FFFF00D9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF
- stack 0: 0xF0
844	 1F6	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1B3
845	 1F7	JUMP		 	 
- stack 0: 0x4C0
846	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4C0
847	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
848	 1B5	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x1B3FFFF00D9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF
849	 1B6	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x1B3FFFF00D9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF
- stack 0: 0xE0
850	 1B8	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x1B3FFFF
851	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x1B3FFFF
- stack 0: 0xFFFF
852	 1BC	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFF
853	 1BD	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFF
- stack 0: 0x1
854	 1BF	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
855	 1C0	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
856	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1000000
857	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C0
- stack 0: 0xFFFFFF
858	 1C5	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFF
- stack 0: 0x3A0
859	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C0
860	 1C9	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
861	 1CB	ADD		 	 
- stack 0: 0x4C4
862	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
863	 1CD	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xD9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A
864	 1CE	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xD9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A
- stack 0: 0xF0
865	 1D0	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xD9
866	 1D1	JUMP		 	 
- stack 0: 0x4C4
867	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
868	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
869	 DB	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xD9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A
870	 DC	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xD9000900F30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A
- stack 0: 0xE0
871	 DE	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xD90009
872	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xD90009
- stack 0: 0xFFFF
873	 E2	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x9
874	 E3	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x9
- stack 0: 0x1
875	 E5	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x9
876	 E6	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x9
- stack 0: 0x380
877	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
878	 EA	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
879	 EC	ADD		 	 
- stack 0: 0x4C8
880	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
881	 EE	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xF30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4
882	 EF	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xF30200013500000181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4
- stack 0: 0xF0
883	 F1	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xF3
884	 F2	JUMP		 	 
- stack 0: 0x4C8
885	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x4C8
886	 F4	PUSH2	0060	 	 
- stack 1: 0x4C8
- stack 0: 0x60
887	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C8
- stack 0: 0xFFFFFF
888	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFFFF
889	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0xFFFFFF
890	 FE	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFF
- stack 0: 0x3A0
891	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFF
892	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0xFFFFFF
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFFFF
893	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0xFFFFFF
- stack 0: 0xFFFFFF
894	 108	SUB		 	 
- stack 1: 0x4C8
- stack 0: 0x0
895	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x111
896	 10C	JUMPI		 	 
- stack 0: 0x4C8
897	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x4C8
- stack 0: 0x12B
898	 110	JUMP		 	 
- stack 0: 0x4C8
899	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x4C8
900	 12C	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
901	 12E	ADD		 	 
- stack 0: 0x4CC
902	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
903	 130	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x13500000181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E401350000
904	 131	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x13500000181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E401350000
- stack 0: 0xF0
905	 133	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x135
906	 134	JUMP		 	 
- stack 0: 0x4CC
907	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4CC
908	 136	PUSH4	80000000	 	 
- stack 1: 0x4CC
- stack 0: 0x80000000
909	 13B	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x80000000
- stack 0: 0x20
910	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
911	 13F	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
912	 141	ADD		 	 
- stack 0: 0x4D0
913	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
914	 143	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF
915	 144	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF
- stack 0: 0xF0
916	 146	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x181
917	 147	JUMP		 	 
- stack 0: 0x4D0
918	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4D0
919	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
920	 183	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF
921	 184	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x181FFFF00A0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF
- stack 0: 0xE0
922	 186	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x181FFFF
923	 187	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x181FFFF
- stack 0: 0xFFFF
924	 18A	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFF
925	 18B	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFF
- stack 0: 0x1
926	 18D	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
927	 18E	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
928	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
929	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D0
- stack 0: 0x7FFFFFFF
930	 193	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
931	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
932	 197	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
933	 199	ADD		 	 
- stack 0: 0x4D4
934	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
935	 19B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xA0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F
936	 19C	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xA0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F
- stack 0: 0xF0
937	 19E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xA0
938	 19F	JUMP		 	 
- stack 0: 0x4D4
939	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x4D4
940	 A1	PUSH2	0020	 	 
- stack 1: 0x4D4
- stack 0: 0x20
941	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
942	 A5	PUSH1	03	 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
943	 A7	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
944	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x4D4
945	 A9	MLOAD		 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F
946	 AA	PUSH1	E0	 	 
- stack 3: 0x4D4
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0000E01F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F
- stack 0: 0xE0
947	 AC	SHR		 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0000E
948	 AD	PUSH2	FFFF	 	 
- stack 3: 0x4D4
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0000E
- stack 0: 0xFFFF
949	 B0	AND		 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0xE
950	 B1	SAR		 	 
- stack 1: 0x4D4
- stack 0: 0x1FFFF
951	 B2	PUSH2	0060	 	 
- stack 2: 0x4D4
- stack 1: 0x1FFFF
- stack 0: 0x60
952	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D4
953	 B6	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
954	 B8	ADD		 	 
- stack 0: 0x4D8
955	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
956	 BA	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x1F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF0000
957	 BB	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x1F8002001B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF0000
- stack 0: 0xF0
958	 BD	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x1F8
959	 BE	JUMP		 	 
- stack 0: 0x4D8
960	 1F8	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x4D8
961	 1F9	PUSH4	00020000	 	 
- stack 1: 0x4D8
- stack 0: 0x20000
962	 1FE	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0x20000
- stack 0: 0x3A0
963	 201	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
964	 202	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
965	 204	ADD		 	 
- stack 0: 0x4DC
966	 205	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
967	 206	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B
968	 207	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x1B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B
- stack 0: 0xF0
969	 209	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x1B3
970	 20A	JUMP		 	 
- stack 0: 0x4DC
971	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x4DC
972	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
973	 1B5	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x1B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B
974	 1B6	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x1B3FFFF00D9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B
- stack 0: 0xE0
975	 1B8	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x1B3FFFF
976	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x1B3FFFF
- stack 0: 0xFFFF
977	 1BC	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFF
978	 1BD	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFF
- stack 0: 0x1
979	 1BF	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
980	 1C0	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
981	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
982	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x4DC
- stack 0: 0x1FFFF
983	 1C5	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x1FFFF
- stack 0: 0x3A0
984	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
985	 1C9	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
986	 1CB	ADD		 	 
- stack 0: 0x4E0
987	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
988	 1CD	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xD9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC
989	 1CE	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xD9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC
- stack 0: 0xF0
990	 1D0	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xD9
991	 1D1	JUMP		 	 
- stack 0: 0x4E0
992	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
993	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
994	 DB	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xD9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC
995	 DC	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xD9000A00F301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC
- stack 0: 0xE0
996	 DE	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xD9000A
997	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xD9000A
- stack 0: 0xFFFF
998	 E2	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xA
999	 E3	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xA
- stack 0: 0x1
1000	 E5	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xA
1001	 E6	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0xA
- stack 0: 0x380
1002	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
1003	 EA	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1004	 EC	ADD		 	 
- stack 0: 0x4E4
1005	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1006	 EE	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xF301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC020B1818
1007	 EF	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xF301E4013500000181FFFF00A0001F00BF000000D9000B00F301CC020B1818
- stack 0: 0xF0
1008	 F1	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xF3
1009	 F2	JUMP		 	 
- stack 0: 0x4E4
1010	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x4E4
1011	 F4	PUSH2	0060	 	 
- stack 1: 0x4E4
- stack 0: 0x60
1012	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E4
- stack 0: 0x1FFFF
1013	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
1014	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0x1FFFF
1015	 FE	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x1FFFF
- stack 0: 0x3A0
1016	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
1017	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
1018	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
1019	 108	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1020	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x111
1021	 10C	JUMPI		 	 
- stack 0: 0x4E4
1022	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x4E4
- stack 0: 0x12B
1023	 110	JUMP		 	 
- stack 0: 0x4E4
1024	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x4E4
1025	 12C	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1026	 12E	ADD		 	 
- stack 0: 0x4E8
1027	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1028	 130	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x13500000181FFFF00A0001F00BF000000D9000B00F301CC020B181801810181
1029	 131	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x13500000181FFFF00A0001F00BF000000D9000B00F301CC020B181801810181
- stack 0: 0xF0
1030	 133	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x135
1031	 134	JUMP		 	 
- stack 0: 0x4E8
1032	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4E8
1033	 136	PUSH4	80000000	 	 
- stack 1: 0x4E8
- stack 0: 0x80000000
1034	 13B	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0x80000000
- stack 0: 0x20
1035	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1036	 13F	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1037	 141	ADD		 	 
- stack 0: 0x4EC
1038	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1039	 143	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x181FFFF00A0001F00BF000000D9000B00F301CC020B18180181018100A00000
1040	 144	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x181FFFF00A0001F00BF000000D9000B00F301CC020B18180181018100A00000
- stack 0: 0xF0
1041	 146	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x181
1042	 147	JUMP		 	 
- stack 0: 0x4EC
1043	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4EC
1044	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1045	 183	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x181FFFF00A0001F00BF000000D9000B00F301CC020B18180181018100A00000
1046	 184	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x181FFFF00A0001F00BF000000D9000B00F301CC020B18180181018100A00000
- stack 0: 0xE0
1047	 186	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x181FFFF
1048	 187	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x181FFFF
- stack 0: 0xFFFF
1049	 18A	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1050	 18B	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1051	 18D	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1052	 18E	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1053	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1054	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x4EC
- stack 0: 0x7FFFFFFF
1055	 193	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1056	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1057	 197	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1058	 199	ADD		 	 
- stack 0: 0x4F0
1059	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1060	 19B	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xA0001F00BF000000D9000B00F301CC020B18180181018100A00000021E1818
1061	 19C	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xA0001F00BF000000D9000B00F301CC020B18180181018100A00000021E1818
- stack 0: 0xF0
1062	 19E	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xA0
1063	 19F	JUMP		 	 
- stack 0: 0x4F0
1064	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x4F0
1065	 A1	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1066	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0x7FFFFFFF
1067	 A5	PUSH1	03	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3
1068	 A7	SIGNEXTEND		 	 
- stack 1: 0x4F0
- stack 0: 0x7FFFFFFF
1069	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x4F0
1070	 A9	MLOAD		 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0001F00BF000000D9000B00F301CC020B18180181018100A00000021E1818
1071	 AA	PUSH1	E0	 	 
- stack 3: 0x4F0
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0001F00BF000000D9000B00F301CC020B18180181018100A00000021E1818
- stack 0: 0xE0
1072	 AC	SHR		 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0xA0001F
1073	 AD	PUSH2	FFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x7FFFFFFF
- stack 1: 0xA0001F
- stack 0: 0xFFFF
1074	 B0	AND		 	 
- stack 2: 0x4F0
- stack 1: 0x7FFFFFFF
- stack 0: 0x1F
1075	 B1	SAR		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1076	 B2	PUSH2	0060	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x60
1077	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F0
1078	 B6	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1079	 B8	ADD		 	 
- stack 0: 0x4F4
1080	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1081	 BA	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBF000000D9000B00F301CC020B18180181018100A00000021E181801B30181
1082	 BB	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xBF000000D9000B00F301CC020B18180181018100A00000021E181801B30181
- stack 0: 0xF0
1083	 BD	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBF
1084	 BE	JUMP		 	 
- stack 0: 0x4F4
1085	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4F4
1086	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1087	 C1	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xBF000000D9000B00F301CC020B18180181018100A00000021E181801B30181
1088	 C2	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xBF000000D9000B00F301CC020B18180181018100A00000021E181801B30181
- stack 0: 0xE0
1089	 C4	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xBF0000
1090	 C5	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xBF0000
- stack 0: 0xFFFF
1091	 C8	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1092	 C9	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x1
1093	 CB	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1094	 CC	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x3A0
1095	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1096	 D0	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1097	 D2	ADD		 	 
- stack 0: 0x4F8
1098	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1099	 D4	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD9000B00F301CC020B18180181018100A00000021E181801B3018100D9000C
1100	 D5	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xD9000B00F301CC020B18180181018100A00000021E181801B3018100D9000C
- stack 0: 0xF0
1101	 D7	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD9
1102	 D8	JUMP		 	 
- stack 0: 0x4F8
1103	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1104	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1105	 DB	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xD9000B00F301CC020B18180181018100A00000021E181801B3018100D9000C
1106	 DC	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0xD9000B00F301CC020B18180181018100A00000021E181801B3018100D9000C
- stack 0: 0xE0
1107	 DE	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xD9000B
1108	 DF	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xD9000B
- stack 0: 0xFFFF
1109	 E2	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xB
1110	 E3	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xB
- stack 0: 0x1
1111	 E5	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xB
1112	 E6	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0xB
- stack 0: 0x380
1113	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1114	 EA	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1115	 EC	ADD		 	 
- stack 0: 0x4FC
1116	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1117	 EE	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xF301CC020B18180181018100A00000021E181801B3018100D9000C00F301B0
1118	 EF	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xF301CC020B18180181018100A00000021E181801B3018100D9000C00F301B0
- stack 0: 0xF0
1119	 F1	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xF3
1120	 F2	JUMP		 	 
- stack 0: 0x4FC
1121	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x4FC
1122	 F4	PUSH2	0060	 	 
- stack 1: 0x4FC
- stack 0: 0x60
1123	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x4FC
- stack 0: 0x0
1124	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1125	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x0
1126	 FE	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x3A0
1127	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x0
1128	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1129	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x0
1130	 108	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1131	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x111
1132	 10C	JUMPI		 	 
- stack 0: 0x4FC
1133	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x4FC
- stack 0: 0x12B
1134	 110	JUMP		 	 
- stack 0: 0x4FC
1135	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x4FC
1136	 12C	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1137	 12E	ADD		 	 
- stack 0: 0x500
1138	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1139	 130	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x20B18180181018100A00000021E181801B3018100D9000C00F301B0020B1818
1140	 131	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x20B18180181018100A00000021E181801B3018100D9000C00F301B0020B1818
- stack 0: 0xF0
1141	 133	SHR		 	 
- stack 1: 0x500
- stack 0: 0x20B
1142	 134	JUMP		 	 
- stack 0: 0x500
1143	 20B	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x500
1144	 20C	PUSH4	81818000	 	 
- stack 1: 0x500
- stack 0: 0x81818000
1145	 211	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x81818000
- stack 0: 0x20
1146	 214	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1147	 215	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1148	 217	ADD		 	 
- stack 0: 0x504
1149	 218	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1150	 219	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x181018100A00000021E181801B3018100D9000C00F301B0020B181801810181
1151	 21A	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x181018100A00000021E181801B3018100D9000C00F301B0020B181801810181
- stack 0: 0xF0
1152	 21C	SHR		 	 
- stack 1: 0x504
- stack 0: 0x181
1153	 21D	JUMP		 	 
- stack 0: 0x504
1154	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x504
1155	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1156	 183	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x181018100A00000021E181801B3018100D9000C00F301B0020B181801810181
1157	 184	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x181018100A00000021E181801B3018100D9000C00F301B0020B181801810181
- stack 0: 0xE0
1158	 186	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1810181
1159	 187	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1810181
- stack 0: 0xFFFF
1160	 18A	AND		 	 
- stack 1: 0x504
- stack 0: 0x181
1161	 18B	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x181
- stack 0: 0x1
1162	 18D	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x181
1163	 18E	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x181
- stack 0: 0x20
1164	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0x181
- stack 0: 0x81818000
1165	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0x81818181
1166	 193	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x81818181
- stack 0: 0x20
1167	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1168	 197	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1169	 199	ADD		 	 
- stack 0: 0x508
1170	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1171	 19B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xA00000021E181801B3018100D9000C00F301B0020B18180181018100A00001
1172	 19C	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xA00000021E181801B3018100D9000C00F301B0020B18180181018100A00001
- stack 0: 0xF0
1173	 19E	SHR		 	 
- stack 1: 0x508
- stack 0: 0xA0
1174	 19F	JUMP		 	 
- stack 0: 0x508
1175	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x508
1176	 A1	PUSH2	0020	 	 
- stack 1: 0x508
- stack 0: 0x20
1177	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x508
- stack 0: 0x81818181
1178	 A5	PUSH1	03	 	 
- stack 2: 0x508
- stack 1: 0x81818181
- stack 0: 0x3
1179	 A7	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1180	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x508
1181	 A9	MLOAD		 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA00000021E181801B3018100D9000C00F301B0020B18180181018100A00001
1182	 AA	PUSH1	E0	 	 
- stack 3: 0x508
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA00000021E181801B3018100D9000C00F301B0020B18180181018100A00001
- stack 0: 0xE0
1183	 AC	SHR		 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA00000
1184	 AD	PUSH2	FFFF	 	 
- stack 3: 0x508
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA00000
- stack 0: 0xFFFF
1185	 B0	AND		 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x0
1186	 B1	SAR		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1187	 B2	PUSH2	0060	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x60
1188	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x508
1189	 B6	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1190	 B8	ADD		 	 
- stack 0: 0x50C
1191	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1192	 BA	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0x21E181801B3018100D9000C00F301B0020B18180181018100A0000102310C0C
1193	 BB	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0x21E181801B3018100D9000C00F301B0020B18180181018100A0000102310C0C
- stack 0: 0xF0
1194	 BD	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x21E
1195	 BE	JUMP		 	 
- stack 0: 0x50C
1196	 21E	JUMPDEST		 ;; __riscvimpl_LUI_81818eb7	  ;; # instr: lui t4,0x81818(ignore imm)
- stack 0: 0x50C
1197	 21F	PUSH4	81818000	 	 
- stack 1: 0x50C
- stack 0: 0x81818000
1198	 224	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0x81818000
- stack 0: 0x3A0
1199	 227	MSTORE		 	  ;; # store to x29
- stack 0: 0x50C
1200	 228	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1201	 22A	ADD		 	 
- stack 0: 0x510
1202	 22B	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1203	 22C	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1B3018100D9000C00F301B0020B18180181018100A0000102310C0C01B300C0
1204	 22D	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1B3018100D9000C00F301B0020B18180181018100A0000102310C0C01B300C0
- stack 0: 0xF0
1205	 22F	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1B3
1206	 230	JUMP		 	 
- stack 0: 0x510
1207	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x510
1208	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1209	 1B5	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1B3018100D9000C00F301B0020B18180181018100A0000102310C0C01B300C0
1210	 1B6	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1B3018100D9000C00F301B0020B18180181018100A0000102310C0C01B300C0
- stack 0: 0xE0
1211	 1B8	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1B30181
1212	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1B30181
- stack 0: 0xFFFF
1213	 1BC	AND		 	 
- stack 1: 0x510
- stack 0: 0x181
1214	 1BD	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x181
- stack 0: 0x1
1215	 1BF	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x181
1216	 1C0	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0x181
- stack 0: 0x3A0
1217	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x510
- stack 1: 0x181
- stack 0: 0x81818000
1218	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x510
- stack 0: 0x81818181
1219	 1C5	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0x81818181
- stack 0: 0x3A0
1220	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x510
1221	 1C9	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1222	 1CB	ADD		 	 
- stack 0: 0x514
1223	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1224	 1CD	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD9000C00F301B0020B18180181018100A0000102310C0C01B300C000D9000D
1225	 1CE	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xD9000C00F301B0020B18180181018100A0000102310C0C01B300C000D9000D
- stack 0: 0xF0
1226	 1D0	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD9
1227	 1D1	JUMP		 	 
- stack 0: 0x514
1228	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x514
1229	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1230	 DB	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xD9000C00F301B0020B18180181018100A0000102310C0C01B300C000D9000D
1231	 DC	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xD9000C00F301B0020B18180181018100A0000102310C0C01B300C000D9000D
- stack 0: 0xE0
1232	 DE	SHR		 	 
- stack 1: 0x514
- stack 0: 0xD9000C
1233	 DF	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xD9000C
- stack 0: 0xFFFF
1234	 E2	AND		 	 
- stack 1: 0x514
- stack 0: 0xC
1235	 E3	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xC
- stack 0: 0x1
1236	 E5	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xC
1237	 E6	PUSH2	0380	 	 
- stack 2: 0x514
- stack 1: 0xC
- stack 0: 0x380
1238	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x514
1239	 EA	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1240	 EC	ADD		 	 
- stack 0: 0x518
1241	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1242	 EE	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xF301B0020B18180181018100A0000102310C0C01B300C000D9000D00F30194
1243	 EF	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xF301B0020B18180181018100A0000102310C0C01B300C000D9000D00F30194
- stack 0: 0xF0
1244	 F1	SHR		 	 
- stack 1: 0x518
- stack 0: 0xF3
1245	 F2	JUMP		 	 
- stack 0: 0x518
1246	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x518
1247	 F4	PUSH2	0060	 	 
- stack 1: 0x518
- stack 0: 0x60
1248	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x518
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1249	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xFFFFFFFF
1250	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x81818181
1251	 FE	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0x81818181
- stack 0: 0x3A0
1252	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x518
- stack 1: 0x81818181
- stack 0: 0x81818181
1253	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x81818181
- stack 1: 0x81818181
- stack 0: 0xFFFFFFFF
1254	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x81818181
- stack 0: 0x81818181
1255	 108	SUB		 	 
- stack 1: 0x518
- stack 0: 0x0
1256	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x111
1257	 10C	JUMPI		 	 
- stack 0: 0x518
1258	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x518
- stack 0: 0x12B
1259	 110	JUMP		 	 
- stack 0: 0x518
1260	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x518
1261	 12C	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1262	 12E	ADD		 	 
- stack 0: 0x51C
1263	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1264	 130	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x20B18180181018100A0000102310C0C01B300C000D9000D00F30194020B1818
1265	 131	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x20B18180181018100A0000102310C0C01B300C000D9000D00F30194020B1818
- stack 0: 0xF0
1266	 133	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x20B
1267	 134	JUMP		 	 
- stack 0: 0x51C
1268	 20B	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x51C
1269	 20C	PUSH4	81818000	 	 
- stack 1: 0x51C
- stack 0: 0x81818000
1270	 211	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x81818000
- stack 0: 0x20
1271	 214	MSTORE		 	  ;; # store to x1
- stack 0: 0x51C
1272	 215	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1273	 217	ADD		 	 
- stack 0: 0x520
1274	 218	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1275	 219	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x181018100A0000102310C0C01B300C000D9000D00F30194020B181801810181
1276	 21A	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x181018100A0000102310C0C01B300C000D9000D00F30194020B181801810181
- stack 0: 0xF0
1277	 21C	SHR		 	 
- stack 1: 0x520
- stack 0: 0x181
1278	 21D	JUMP		 	 
- stack 0: 0x520
1279	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x520
1280	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1281	 183	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x181018100A0000102310C0C01B300C000D9000D00F30194020B181801810181
1282	 184	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x181018100A0000102310C0C01B300C000D9000D00F30194020B181801810181
- stack 0: 0xE0
1283	 186	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1810181
1284	 187	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1810181
- stack 0: 0xFFFF
1285	 18A	AND		 	 
- stack 1: 0x520
- stack 0: 0x181
1286	 18B	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x181
- stack 0: 0x1
1287	 18D	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x181
1288	 18E	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x181
- stack 0: 0x20
1289	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0x181
- stack 0: 0x81818000
1290	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x520
- stack 0: 0x81818181
1291	 193	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x81818181
- stack 0: 0x20
1292	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1293	 197	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1294	 199	ADD		 	 
- stack 0: 0x524
1295	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1296	 19B	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xA0000102310C0C01B300C000D9000D00F30194020B18180181018100A00007
1297	 19C	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xA0000102310C0C01B300C000D9000D00F30194020B18180181018100A00007
- stack 0: 0xF0
1298	 19E	SHR		 	 
- stack 1: 0x524
- stack 0: 0xA0
1299	 19F	JUMP		 	 
- stack 0: 0x524
1300	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x524
1301	 A1	PUSH2	0020	 	 
- stack 1: 0x524
- stack 0: 0x20
1302	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x524
- stack 0: 0x81818181
1303	 A5	PUSH1	03	 	 
- stack 2: 0x524
- stack 1: 0x81818181
- stack 0: 0x3
1304	 A7	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1305	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x524
1306	 A9	MLOAD		 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA0000102310C0C01B300C000D9000D00F30194020B18180181018100A00007
1307	 AA	PUSH1	E0	 	 
- stack 3: 0x524
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA0000102310C0C01B300C000D9000D00F30194020B18180181018100A00007
- stack 0: 0xE0
1308	 AC	SHR		 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA00001
1309	 AD	PUSH2	FFFF	 	 
- stack 3: 0x524
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA00001
- stack 0: 0xFFFF
1310	 B0	AND		 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1
1311	 B1	SAR		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
1312	 B2	PUSH2	0060	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0x60
1313	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x524
1314	 B6	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1315	 B8	ADD		 	 
- stack 0: 0x528
1316	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1317	 BA	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x2310C0C01B300C000D9000D00F30194020B18180181018100A000070244F030
1318	 BB	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x2310C0C01B300C000D9000D00F30194020B18180181018100A000070244F030
- stack 0: 0xF0
1319	 BD	SHR		 	 
- stack 1: 0x528
- stack 0: 0x231
1320	 BE	JUMP		 	 
- stack 0: 0x528
1321	 231	JUMPDEST		 ;; __riscvimpl_LUI_c0c0ceb7	  ;; # instr: lui t4,0xc0c0c(ignore imm)
- stack 0: 0x528
1322	 232	PUSH4	c0c0c000	 	 
- stack 1: 0x528
- stack 0: 0xC0C0C000
1323	 237	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xC0C0C000
- stack 0: 0x3A0
1324	 23A	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1325	 23B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1326	 23D	ADD		 	 
- stack 0: 0x52C
1327	 23E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1328	 23F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1B300C000D9000D00F30194020B18180181018100A000070244F03001B30303
1329	 240	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1B300C000D9000D00F30194020B18180181018100A000070244F03001B30303
- stack 0: 0xF0
1330	 242	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1B3
1331	 243	JUMP		 	 
- stack 0: 0x52C
1332	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x52C
1333	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1334	 1B5	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1B300C000D9000D00F30194020B18180181018100A000070244F03001B30303
1335	 1B6	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x1B300C000D9000D00F30194020B18180181018100A000070244F03001B30303
- stack 0: 0xE0
1336	 1B8	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1B300C0
1337	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x1B300C0
- stack 0: 0xFFFF
1338	 1BC	AND		 	 
- stack 1: 0x52C
- stack 0: 0xC0
1339	 1BD	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xC0
- stack 0: 0x1
1340	 1BF	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xC0
1341	 1C0	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xC0
- stack 0: 0x3A0
1342	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x52C
- stack 1: 0xC0
- stack 0: 0xC0C0C000
1343	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x52C
- stack 0: 0xC0C0C0C0
1344	 1C5	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
1345	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1346	 1C9	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1347	 1CB	ADD		 	 
- stack 0: 0x530
1348	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1349	 1CD	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xD9000D00F30194020B18180181018100A000070244F03001B3030300D9000E
1350	 1CE	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0xD9000D00F30194020B18180181018100A000070244F03001B3030300D9000E
- stack 0: 0xF0
1351	 1D0	SHR		 	 
- stack 1: 0x530
- stack 0: 0xD9
1352	 1D1	JUMP		 	 
- stack 0: 0x530
1353	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1354	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1355	 DB	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0xD9000D00F30194020B18180181018100A000070244F03001B3030300D9000E
1356	 DC	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0xD9000D00F30194020B18180181018100A000070244F03001B3030300D9000E
- stack 0: 0xE0
1357	 DE	SHR		 	 
- stack 1: 0x530
- stack 0: 0xD9000D
1358	 DF	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0xD9000D
- stack 0: 0xFFFF
1359	 E2	AND		 	 
- stack 1: 0x530
- stack 0: 0xD
1360	 E3	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0xD
- stack 0: 0x1
1361	 E5	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0xD
1362	 E6	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0xD
- stack 0: 0x380
1363	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1364	 EA	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1365	 EC	ADD		 	 
- stack 0: 0x534
1366	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1367	 EE	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xF30194020B18180181018100A000070244F03001B3030300D9000E00F30178
1368	 EF	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xF30194020B18180181018100A000070244F03001B3030300D9000E00F30178
- stack 0: 0xF0
1369	 F1	SHR		 	 
- stack 1: 0x534
- stack 0: 0xF3
1370	 F2	JUMP		 	 
- stack 0: 0x534
1371	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x534
1372	 F4	PUSH2	0060	 	 
- stack 1: 0x534
- stack 0: 0x60
1373	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
1374	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0C0C0C0
- stack 0: 0xFFFFFFFF
1375	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0xC0C0C0C0
1376	 FE	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xC0C0C0C0
- stack 0: 0x3A0
1377	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
1378	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0xC0C0C0C0
- stack 1: 0xC0C0C0C0
- stack 0: 0xFFFFFFFF
1379	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0xC0C0C0C0
- stack 0: 0xC0C0C0C0
1380	 108	SUB		 	 
- stack 1: 0x534
- stack 0: 0x0
1381	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x111
1382	 10C	JUMPI		 	 
- stack 0: 0x534
1383	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x534
- stack 0: 0x12B
1384	 110	JUMP		 	 
- stack 0: 0x534
1385	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x534
1386	 12C	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1387	 12E	ADD		 	 
- stack 0: 0x538
1388	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1389	 130	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x20B18180181018100A000070244F03001B3030300D9000E00F30178020B1818
1390	 131	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x20B18180181018100A000070244F03001B3030300D9000E00F30178020B1818
- stack 0: 0xF0
1391	 133	SHR		 	 
- stack 1: 0x538
- stack 0: 0x20B
1392	 134	JUMP		 	 
- stack 0: 0x538
1393	 20B	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x538
1394	 20C	PUSH4	81818000	 	 
- stack 1: 0x538
- stack 0: 0x81818000
1395	 211	PUSH2	0020	 	 
- stack 2: 0x538
- stack 1: 0x81818000
- stack 0: 0x20
1396	 214	MSTORE		 	  ;; # store to x1
- stack 0: 0x538
1397	 215	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1398	 217	ADD		 	 
- stack 0: 0x53C
1399	 218	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1400	 219	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x181018100A000070244F03001B3030300D9000E00F30178020B181801810181
1401	 21A	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x181018100A000070244F03001B3030300D9000E00F30178020B181801810181
- stack 0: 0xF0
1402	 21C	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x181
1403	 21D	JUMP		 	 
- stack 0: 0x53C
1404	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x53C
1405	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1406	 183	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x181018100A000070244F03001B3030300D9000E00F30178020B181801810181
1407	 184	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x181018100A000070244F03001B3030300D9000E00F30178020B181801810181
- stack 0: 0xE0
1408	 186	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1810181
1409	 187	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1810181
- stack 0: 0xFFFF
1410	 18A	AND		 	 
- stack 1: 0x53C
- stack 0: 0x181
1411	 18B	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x1
1412	 18D	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x181
1413	 18E	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x20
1414	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x53C
- stack 1: 0x181
- stack 0: 0x81818000
1415	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x53C
- stack 0: 0x81818181
1416	 193	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x81818181
- stack 0: 0x20
1417	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1418	 197	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1419	 199	ADD		 	 
- stack 0: 0x540
1420	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1421	 19B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xA000070244F03001B3030300D9000E00F30178020B18180181018100A0000E
1422	 19C	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xA000070244F03001B3030300D9000E00F30178020B18180181018100A0000E
- stack 0: 0xF0
1423	 19E	SHR		 	 
- stack 1: 0x540
- stack 0: 0xA0
1424	 19F	JUMP		 	 
- stack 0: 0x540
1425	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x540
1426	 A1	PUSH2	0020	 	 
- stack 1: 0x540
- stack 0: 0x20
1427	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x540
- stack 0: 0x81818181
1428	 A5	PUSH1	03	 	 
- stack 2: 0x540
- stack 1: 0x81818181
- stack 0: 0x3
1429	 A7	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1430	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x540
1431	 A9	MLOAD		 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA000070244F03001B3030300D9000E00F30178020B18180181018100A0000E
1432	 AA	PUSH1	E0	 	 
- stack 3: 0x540
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA000070244F03001B3030300D9000E00F30178020B18180181018100A0000E
- stack 0: 0xE0
1433	 AC	SHR		 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA00007
1434	 AD	PUSH2	FFFF	 	 
- stack 3: 0x540
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA00007
- stack 0: 0xFFFF
1435	 B0	AND		 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x7
1436	 B1	SAR		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
1437	 B2	PUSH2	0060	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0x60
1438	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x540
1439	 B6	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1440	 B8	ADD		 	 
- stack 0: 0x544
1441	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1442	 BA	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x244F03001B3030300D9000E00F30178020B18180181018100A0000E016EFFE0
1443	 BB	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x244F03001B3030300D9000E00F30178020B18180181018100A0000E016EFFE0
- stack 0: 0xF0
1444	 BD	SHR		 	 
- stack 1: 0x544
- stack 0: 0x244
1445	 BE	JUMP		 	 
- stack 0: 0x544
1446	 244	JUMPDEST		 ;; __riscvimpl_LUI_ff030eb7	  ;; # instr: lui t4,0xff030(ignore imm)
- stack 0: 0x544
1447	 245	PUSH4	ff030000	 	 
- stack 1: 0x544
- stack 0: 0xFF030000
1448	 24A	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xFF030000
- stack 0: 0x3A0
1449	 24D	MSTORE		 	  ;; # store to x29
- stack 0: 0x544
1450	 24E	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1451	 250	ADD		 	 
- stack 0: 0x548
1452	 251	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1453	 252	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1B3030300D9000E00F30178020B18180181018100A0000E016EFFE001B30606
1454	 253	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1B3030300D9000E00F30178020B18180181018100A0000E016EFFE001B30606
- stack 0: 0xF0
1455	 255	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1B3
1456	 256	JUMP		 	 
- stack 0: 0x548
1457	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x548
1458	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1459	 1B5	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1B3030300D9000E00F30178020B18180181018100A0000E016EFFE001B30606
1460	 1B6	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x1B3030300D9000E00F30178020B18180181018100A0000E016EFFE001B30606
- stack 0: 0xE0
1461	 1B8	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1B30303
1462	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x1B30303
- stack 0: 0xFFFF
1463	 1BC	AND		 	 
- stack 1: 0x548
- stack 0: 0x303
1464	 1BD	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x303
- stack 0: 0x1
1465	 1BF	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x303
1466	 1C0	PUSH2	03A0	 	 
- stack 2: 0x548
- stack 1: 0x303
- stack 0: 0x3A0
1467	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x548
- stack 1: 0x303
- stack 0: 0xFF030000
1468	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x548
- stack 0: 0xFF030303
1469	 1C5	PUSH2	03A0	 	 
- stack 2: 0x548
- stack 1: 0xFF030303
- stack 0: 0x3A0
1470	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x548
1471	 1C9	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1472	 1CB	ADD		 	 
- stack 0: 0x54C
1473	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1474	 1CD	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD9000E00F30178020B18180181018100A0000E016EFFE001B3060600D9000F
1475	 1CE	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xD9000E00F30178020B18180181018100A0000E016EFFE001B3060600D9000F
- stack 0: 0xF0
1476	 1D0	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD9
1477	 1D1	JUMP		 	 
- stack 0: 0x54C
1478	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x54C
1479	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1480	 DB	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD9000E00F30178020B18180181018100A0000E016EFFE001B3060600D9000F
1481	 DC	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xD9000E00F30178020B18180181018100A0000E016EFFE001B3060600D9000F
- stack 0: 0xE0
1482	 DE	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD9000E
1483	 DF	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xD9000E
- stack 0: 0xFFFF
1484	 E2	AND		 	 
- stack 1: 0x54C
- stack 0: 0xE
1485	 E3	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0xE
- stack 0: 0x1
1486	 E5	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0xE
1487	 E6	PUSH2	0380	 	 
- stack 2: 0x54C
- stack 1: 0xE
- stack 0: 0x380
1488	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x54C
1489	 EA	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1490	 EC	ADD		 	 
- stack 0: 0x550
1491	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1492	 EE	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xF30178020B18180181018100A0000E016EFFE001B3060600D9000F00F3015C
1493	 EF	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xF30178020B18180181018100A0000E016EFFE001B3060600D9000F00F3015C
- stack 0: 0xF0
1494	 F1	SHR		 	 
- stack 1: 0x550
- stack 0: 0xF3
1495	 F2	JUMP		 	 
- stack 0: 0x550
1496	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x550
1497	 F4	PUSH2	0060	 	 
- stack 1: 0x550
- stack 0: 0x60
1498	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
1499	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF030303
- stack 0: 0xFFFFFFFF
1500	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0xFF030303
1501	 FE	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0xFF030303
- stack 0: 0x3A0
1502	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x550
- stack 1: 0xFF030303
- stack 0: 0xFF030303
1503	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0xFF030303
- stack 1: 0xFF030303
- stack 0: 0xFFFFFFFF
1504	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0xFF030303
- stack 0: 0xFF030303
1505	 108	SUB		 	 
- stack 1: 0x550
- stack 0: 0x0
1506	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x111
1507	 10C	JUMPI		 	 
- stack 0: 0x550
1508	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x550
- stack 0: 0x12B
1509	 110	JUMP		 	 
- stack 0: 0x550
1510	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x550
1511	 12C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1512	 12E	ADD		 	 
- stack 0: 0x554
1513	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1514	 130	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x20B18180181018100A0000E016EFFE001B3060600D9000F00F3015C020B1818
1515	 131	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x20B18180181018100A0000E016EFFE001B3060600D9000F00F3015C020B1818
- stack 0: 0xF0
1516	 133	SHR		 	 
- stack 1: 0x554
- stack 0: 0x20B
1517	 134	JUMP		 	 
- stack 0: 0x554
1518	 20B	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x554
1519	 20C	PUSH4	81818000	 	 
- stack 1: 0x554
- stack 0: 0x81818000
1520	 211	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x81818000
- stack 0: 0x20
1521	 214	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
1522	 215	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1523	 217	ADD		 	 
- stack 0: 0x558
1524	 218	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1525	 219	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x181018100A0000E016EFFE001B3060600D9000F00F3015C020B181801810181
1526	 21A	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x181018100A0000E016EFFE001B3060600D9000F00F3015C020B181801810181
- stack 0: 0xF0
1527	 21C	SHR		 	 
- stack 1: 0x558
- stack 0: 0x181
1528	 21D	JUMP		 	 
- stack 0: 0x558
1529	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x558
1530	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1531	 183	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x181018100A0000E016EFFE001B3060600D9000F00F3015C020B181801810181
1532	 184	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x181018100A0000E016EFFE001B3060600D9000F00F3015C020B181801810181
- stack 0: 0xE0
1533	 186	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1810181
1534	 187	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1810181
- stack 0: 0xFFFF
1535	 18A	AND		 	 
- stack 1: 0x558
- stack 0: 0x181
1536	 18B	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x181
- stack 0: 0x1
1537	 18D	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x181
1538	 18E	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0x181
- stack 0: 0x20
1539	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x558
- stack 1: 0x181
- stack 0: 0x81818000
1540	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x558
- stack 0: 0x81818181
1541	 193	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0x81818181
- stack 0: 0x20
1542	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x558
1543	 197	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1544	 199	ADD		 	 
- stack 0: 0x55C
1545	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1546	 19B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xA0000E016EFFE001B3060600D9000F00F3015C020B18180181018100A0001F
1547	 19C	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xA0000E016EFFE001B3060600D9000F00F3015C020B18180181018100A0001F
- stack 0: 0xF0
1548	 19E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xA0
1549	 19F	JUMP		 	 
- stack 0: 0x55C
1550	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x55C
1551	 A1	PUSH2	0020	 	 
- stack 1: 0x55C
- stack 0: 0x20
1552	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x55C
- stack 0: 0x81818181
1553	 A5	PUSH1	03	 	 
- stack 2: 0x55C
- stack 1: 0x81818181
- stack 0: 0x3
1554	 A7	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1555	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x55C
1556	 A9	MLOAD		 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA0000E016EFFE001B3060600D9000F00F3015C020B18180181018100A0001F
1557	 AA	PUSH1	E0	 	 
- stack 3: 0x55C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA0000E016EFFE001B3060600D9000F00F3015C020B18180181018100A0001F
- stack 0: 0xE0
1558	 AC	SHR		 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA0000E
1559	 AD	PUSH2	FFFF	 	 
- stack 3: 0x55C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA0000E
- stack 0: 0xFFFF
1560	 B0	AND		 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xE
1561	 B1	SAR		 	 
- stack 1: 0x55C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
1562	 B2	PUSH2	0060	 	 
- stack 2: 0x55C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0x60
1563	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x55C
1564	 B6	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1565	 B8	ADD		 	 
- stack 0: 0x560
1566	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1567	 BA	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x16EFFE001B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF
1568	 BB	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x16EFFE001B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF
- stack 0: 0xF0
1569	 BD	SHR		 	 
- stack 1: 0x560
- stack 0: 0x16E
1570	 BE	JUMP		 	 
- stack 0: 0x560
1571	 16E	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x560
1572	 16F	PUSH4	fffe0000	 	 
- stack 1: 0x560
- stack 0: 0xFFFE0000
1573	 174	PUSH2	03A0	 	 
- stack 2: 0x560
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
1574	 177	MSTORE		 	  ;; # store to x29
- stack 0: 0x560
1575	 178	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1576	 17A	ADD		 	 
- stack 0: 0x564
1577	 17B	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1578	 17C	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF00D90010
1579	 17D	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF00D90010
- stack 0: 0xF0
1580	 17F	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B3
1581	 180	JUMP		 	 
- stack 0: 0x564
1582	 1B3	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-1(ignore imm)
- stack 0: 0x564
1583	 1B4	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1584	 1B5	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF00D90010
1585	 1B6	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x1B3060600D9000F00F3015C020B18180181018100A0001F00BFFFFF00D90010
- stack 0: 0xE0
1586	 1B8	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B30606
1587	 1B9	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x1B30606
- stack 0: 0xFFFF
1588	 1BC	AND		 	 
- stack 1: 0x564
- stack 0: 0x606
1589	 1BD	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x606
- stack 0: 0x1
1590	 1BF	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x606
1591	 1C0	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0x606
- stack 0: 0x3A0
1592	 1C3	MLOAD		 	  ;; # read from x29
- stack 2: 0x564
- stack 1: 0x606
- stack 0: 0xFFFE0000
1593	 1C4	ADD		 	  ;; # ADDI 29
- stack 1: 0x564
- stack 0: 0xFFFE0606
1594	 1C5	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
1595	 1C8	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1596	 1C9	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1597	 1CB	ADD		 	 
- stack 0: 0x568
1598	 1CC	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1599	 1CD	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xD9000F00F3015C020B18180181018100A0001F00BFFFFF00D9001000F30144
1600	 1CE	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xD9000F00F3015C020B18180181018100A0001F00BFFFFF00D9001000F30144
- stack 0: 0xF0
1601	 1D0	SHR		 	 
- stack 1: 0x568
- stack 0: 0xD9
1602	 1D1	JUMP		 	 
- stack 0: 0x568
1603	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x568
1604	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1605	 DB	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xD9000F00F3015C020B18180181018100A0001F00BFFFFF00D9001000F30144
1606	 DC	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xD9000F00F3015C020B18180181018100A0001F00BFFFFF00D9001000F30144
- stack 0: 0xE0
1607	 DE	SHR		 	 
- stack 1: 0x568
- stack 0: 0xD9000F
1608	 DF	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xD9000F
- stack 0: 0xFFFF
1609	 E2	AND		 	 
- stack 1: 0x568
- stack 0: 0xF
1610	 E3	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x1
1611	 E5	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xF
1612	 E6	PUSH2	0380	 	 
- stack 2: 0x568
- stack 1: 0xF
- stack 0: 0x380
1613	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x568
1614	 EA	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1615	 EC	ADD		 	 
- stack 0: 0x56C
1616	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1617	 EE	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0xF3015C020B18180181018100A0001F00BFFFFF00D9001000F3014401350000
1618	 EF	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0xF3015C020B18180181018100A0001F00BFFFFF00D9001000F3014401350000
- stack 0: 0xF0
1619	 F1	SHR		 	 
- stack 1: 0x56C
- stack 0: 0xF3
1620	 F2	JUMP		 	 
- stack 0: 0x56C
1621	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x56C
1622	 F4	PUSH2	0060	 	 
- stack 1: 0x56C
- stack 0: 0x60
1623	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
1624	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0606
- stack 0: 0xFFFFFFFF
1625	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0xFFFE0606
1626	 FE	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFE0606
- stack 0: 0x3A0
1627	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
1628	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0xFFFE0606
- stack 1: 0xFFFE0606
- stack 0: 0xFFFFFFFF
1629	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0xFFFE0606
- stack 0: 0xFFFE0606
1630	 108	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
1631	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x111
1632	 10C	JUMPI		 	 
- stack 0: 0x56C
1633	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x56C
- stack 0: 0x12B
1634	 110	JUMP		 	 
- stack 0: 0x56C
1635	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x56C
1636	 12C	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1637	 12E	ADD		 	 
- stack 0: 0x570
1638	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1639	 130	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x20B18180181018100A0001F00BFFFFF00D9001000F301440135000002570007
1640	 131	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x20B18180181018100A0001F00BFFFFF00D9001000F301440135000002570007
- stack 0: 0xF0
1641	 133	SHR		 	 
- stack 1: 0x570
- stack 0: 0x20B
1642	 134	JUMP		 	 
- stack 0: 0x570
1643	 20B	JUMPDEST		 ;; __riscvimpl_LUI_818180b7	  ;; # instr: lui ra,0x81818(ignore imm)
- stack 0: 0x570
1644	 20C	PUSH4	81818000	 	 
- stack 1: 0x570
- stack 0: 0x81818000
1645	 211	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0x81818000
- stack 0: 0x20
1646	 214	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
1647	 215	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1648	 217	ADD		 	 
- stack 0: 0x574
1649	 218	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1650	 219	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x181018100A0001F00BFFFFF00D9001000F301440135000002570007015BF000
1651	 21A	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x181018100A0001F00BFFFFF00D9001000F301440135000002570007015BF000
- stack 0: 0xF0
1652	 21C	SHR		 	 
- stack 1: 0x574
- stack 0: 0x181
1653	 21D	JUMP		 	 
- stack 0: 0x574
1654	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x574
1655	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1656	 183	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x181018100A0001F00BFFFFF00D9001000F301440135000002570007015BF000
1657	 184	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x181018100A0001F00BFFFFF00D9001000F301440135000002570007015BF000
- stack 0: 0xE0
1658	 186	SHR		 	 
- stack 1: 0x574
- stack 0: 0x1810181
1659	 187	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x1810181
- stack 0: 0xFFFF
1660	 18A	AND		 	 
- stack 1: 0x574
- stack 0: 0x181
1661	 18B	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x181
- stack 0: 0x1
1662	 18D	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x181
1663	 18E	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x181
- stack 0: 0x20
1664	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0x181
- stack 0: 0x81818000
1665	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x574
- stack 0: 0x81818181
1666	 193	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0x81818181
- stack 0: 0x20
1667	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x574
1668	 197	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1669	 199	ADD		 	 
- stack 0: 0x578
1670	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1671	 19B	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xA0001F00BFFFFF00D9001000F301440135000002570007015BF00000D90011
1672	 19C	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xA0001F00BFFFFF00D9001000F301440135000002570007015BF00000D90011
- stack 0: 0xF0
1673	 19E	SHR		 	 
- stack 1: 0x578
- stack 0: 0xA0
1674	 19F	JUMP		 	 
- stack 0: 0x578
1675	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x578
1676	 A1	PUSH2	0020	 	 
- stack 1: 0x578
- stack 0: 0x20
1677	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x578
- stack 0: 0x81818181
1678	 A5	PUSH1	03	 	 
- stack 2: 0x578
- stack 1: 0x81818181
- stack 0: 0x3
1679	 A7	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
1680	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x578
1681	 A9	MLOAD		 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA0001F00BFFFFF00D9001000F301440135000002570007015BF00000D90011
1682	 AA	PUSH1	E0	 	 
- stack 3: 0x578
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA0001F00BFFFFF00D9001000F301440135000002570007015BF00000D90011
- stack 0: 0xE0
1683	 AC	SHR		 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0xA0001F
1684	 AD	PUSH2	FFFF	 	 
- stack 3: 0x578
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 1: 0xA0001F
- stack 0: 0xFFFF
1685	 B0	AND		 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81818181
- stack 0: 0x1F
1686	 B1	SAR		 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1687	 B2	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
1688	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x578
1689	 B6	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1690	 B8	ADD		 	 
- stack 0: 0x57C
1691	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1692	 BA	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xBFFFFF00D9001000F301440135000002570007015BF00000D9001102760130
1693	 BB	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xBFFFFF00D9001000F301440135000002570007015BF00000D9001102760130
- stack 0: 0xF0
1694	 BD	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xBF
1695	 BE	JUMP		 	 
- stack 0: 0x57C
1696	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x57C
1697	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1698	 C1	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xBFFFFF00D9001000F301440135000002570007015BF00000D9001102760130
1699	 C2	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xBFFFFF00D9001000F301440135000002570007015BF00000D9001102760130
- stack 0: 0xE0
1700	 C4	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xBFFFFF
1701	 C5	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xBFFFFF
- stack 0: 0xFFFF
1702	 C8	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFF
1703	 C9	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFFFF
- stack 0: 0x1
1704	 CB	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1705	 CC	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1706	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x57C
1707	 D0	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1708	 D2	ADD		 	 
- stack 0: 0x580
1709	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1710	 D4	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD9001000F301440135000002570007015BF00000D900110276013002B80000
1711	 D5	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xD9001000F301440135000002570007015BF00000D900110276013002B80000
- stack 0: 0xF0
1712	 D7	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD9
1713	 D8	JUMP		 	 
- stack 0: 0x580
1714	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x580
1715	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1716	 DB	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xD9001000F301440135000002570007015BF00000D900110276013002B80000
1717	 DC	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xD9001000F301440135000002570007015BF00000D900110276013002B80000
- stack 0: 0xE0
1718	 DE	SHR		 	 
- stack 1: 0x580
- stack 0: 0xD90010
1719	 DF	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xD90010
- stack 0: 0xFFFF
1720	 E2	AND		 	 
- stack 1: 0x580
- stack 0: 0x10
1721	 E3	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x10
- stack 0: 0x1
1722	 E5	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x10
1723	 E6	PUSH2	0380	 	 
- stack 2: 0x580
- stack 1: 0x10
- stack 0: 0x380
1724	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x580
1725	 EA	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1726	 EC	ADD		 	 
- stack 0: 0x584
1727	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1728	 EE	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xF301440135000002570007015BF00000D900110276013002B8000001350000
1729	 EF	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xF301440135000002570007015BF00000D900110276013002B8000001350000
- stack 0: 0xF0
1730	 F1	SHR		 	 
- stack 1: 0x584
- stack 0: 0xF3
1731	 F2	JUMP		 	 
- stack 0: 0x584
1732	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x584
1733	 F4	PUSH2	0060	 	 
- stack 1: 0x584
- stack 0: 0x60
1734	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1735	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1736	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0xFFFFFFFF
1737	 FE	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
1738	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x584
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1739	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1740	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
1741	 108	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
1742	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x111
1743	 10C	JUMPI		 	 
- stack 0: 0x584
1744	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x584
- stack 0: 0x12B
1745	 110	JUMP		 	 
- stack 0: 0x584
1746	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x584
1747	 12C	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1748	 12E	ADD		 	 
- stack 0: 0x588
1749	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1750	 130	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x135000002570007015BF00000D900110276013002B800000135000000A00007
1751	 131	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x135000002570007015BF00000D900110276013002B800000135000000A00007
- stack 0: 0xF0
1752	 133	SHR		 	 
- stack 1: 0x588
- stack 0: 0x135
1753	 134	JUMP		 	 
- stack 0: 0x588
1754	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x588
1755	 136	PUSH4	80000000	 	 
- stack 1: 0x588
- stack 0: 0x80000000
1756	 13B	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0x80000000
- stack 0: 0x20
1757	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
1758	 13F	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1759	 141	ADD		 	 
- stack 0: 0x58C
1760	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1761	 143	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x2570007015BF00000D900110276013002B800000135000000A0000702D20000
1762	 144	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x2570007015BF00000D900110276013002B800000135000000A0000702D20000
- stack 0: 0xF0
1763	 146	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x257
1764	 147	JUMP		 	 
- stack 0: 0x58C
1765	 257	JUMPDEST		 ;; __riscvimpl_SRAI_1_1_0	  ;; # instr: srai ra,ra,1031(ignore imm)
- stack 0: 0x58C
1766	 258	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
1767	 25B	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x80000000
1768	 25C	PUSH1	03	 	 
- stack 2: 0x58C
- stack 1: 0x80000000
- stack 0: 0x3
1769	 25E	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
1770	 25F	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x58C
1771	 260	MLOAD		 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x2570007015BF00000D900110276013002B800000135000000A0000702D20000
1772	 261	PUSH1	E0	 	 
- stack 3: 0x58C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x2570007015BF00000D900110276013002B800000135000000A0000702D20000
- stack 0: 0xE0
1773	 263	SHR		 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x2570007
1774	 264	PUSH2	FFFF	 	 
- stack 3: 0x58C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0x2570007
- stack 0: 0xFFFF
1775	 267	AND		 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
1776	 268	SAR		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1777	 269	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x20
1778	 26C	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
1779	 26D	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1780	 26F	ADD		 	 
- stack 0: 0x590
1781	 270	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1782	 271	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x15BF00000D900110276013002B800000135000000A0000702D2000002F10001
1783	 272	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x15BF00000D900110276013002B800000135000000A0000702D2000002F10001
- stack 0: 0xF0
1784	 274	SHR		 	 
- stack 1: 0x590
- stack 0: 0x15B
1785	 275	JUMP		 	 
- stack 0: 0x590
1786	 15B	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x590
1787	 15C	PUSH4	ff000000	 	 
- stack 1: 0x590
- stack 0: 0xFF000000
1788	 161	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0xFF000000
- stack 0: 0x3A0
1789	 164	MSTORE		 	  ;; # store to x29
- stack 0: 0x590
1790	 165	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1791	 167	ADD		 	 
- stack 0: 0x594
1792	 168	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1793	 169	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD900110276013002B800000135000000A0000702D2000002F1000103100002
1794	 16A	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xD900110276013002B800000135000000A0000702D2000002F1000103100002
- stack 0: 0xF0
1795	 16C	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD9
1796	 16D	JUMP		 	 
- stack 0: 0x594
1797	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x594
1798	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
1799	 DB	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD900110276013002B800000135000000A0000702D2000002F1000103100002
1800	 DC	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0xD900110276013002B800000135000000A0000702D2000002F1000103100002
- stack 0: 0xE0
1801	 DE	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD90011
1802	 DF	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0xD90011
- stack 0: 0xFFFF
1803	 E2	AND		 	 
- stack 1: 0x594
- stack 0: 0x11
1804	 E3	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x11
- stack 0: 0x1
1805	 E5	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x11
1806	 E6	PUSH2	0380	 	 
- stack 2: 0x594
- stack 1: 0x11
- stack 0: 0x380
1807	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x594
1808	 EA	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1809	 EC	ADD		 	 
- stack 0: 0x598
1810	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1811	 EE	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x276013002B800000135000000A0000702D2000002F1000103100002032AFFEC
1812	 EF	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x276013002B800000135000000A0000702D2000002F1000103100002032AFFEC
- stack 0: 0xF0
1813	 F1	SHR		 	 
- stack 1: 0x598
- stack 0: 0x276
1814	 F2	JUMP		 	 
- stack 0: 0x598
1815	 276	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,130(ignore imm)
- stack 0: 0x598
1816	 277	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
1817	 27A	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1818	 27B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
1819	 280	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0xFF000000
1820	 281	PUSH2	03A0	 	 
- stack 2: 0x598
- stack 1: 0xFF000000
- stack 0: 0x3A0
1821	 284	MLOAD		 	  ;; # read from x29
- stack 2: 0x598
- stack 1: 0xFF000000
- stack 0: 0xFF000000
1822	 285	PUSH4	FFFFFFFF	 	 
- stack 3: 0x598
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
1823	 28A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x598
- stack 1: 0xFF000000
- stack 0: 0xFF000000
1824	 28B	SUB		 	 
- stack 1: 0x598
- stack 0: 0x0
1825	 28C	PUSH2	0294	 ;; _neq_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x294
1826	 28F	JUMPI		 	 
- stack 0: 0x598
1827	 290	PUSH2	02AE	 ;; _neq_after_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 1: 0x598
- stack 0: 0x2AE
1828	 293	JUMP		 	 
- stack 0: 0x598
1829	 2AE	JUMPDEST		 ;; _neq_after_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 0: 0x598
1830	 2AF	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1831	 2B1	ADD		 	 
- stack 0: 0x59C
1832	 2B2	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1833	 2B3	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2B800000135000000A0000702D2000002F1000103100002032AFFEC015BF000
1834	 2B4	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2B800000135000000A0000702D2000002F1000103100002032AFFEC015BF000
- stack 0: 0xF0
1835	 2B6	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2B8
1836	 2B7	JUMP		 	 
- stack 0: 0x59C
1837	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x59C
1838	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1839	 2BA	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2B800000135000000A0000702D2000002F1000103100002032AFFEC015BF000
1840	 2BB	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x2B800000135000000A0000702D2000002F1000103100002032AFFEC015BF000
- stack 0: 0xE0
1841	 2BD	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2B80000
1842	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2B80000
- stack 0: 0xFFFF
1843	 2C1	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1844	 2C2	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
1845	 2C4	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1846	 2C5	PUSH2	0080	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x80
1847	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x59C
1848	 2C9	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1849	 2CB	ADD		 	 
- stack 0: 0x5A0
1850	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1851	 2CD	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x135000000A0000702D2000002F1000103100002032AFFEC015BF00000D90012
1852	 2CE	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x135000000A0000702D2000002F1000103100002032AFFEC015BF00000D90012
- stack 0: 0xF0
1853	 2D0	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x135
1854	 2D1	JUMP		 	 
- stack 0: 0x5A0
1855	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5A0
1856	 136	PUSH4	80000000	 	 
- stack 1: 0x5A0
- stack 0: 0x80000000
1857	 13B	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x80000000
- stack 0: 0x20
1858	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
1859	 13F	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1860	 141	ADD		 	 
- stack 0: 0x5A4
1861	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1862	 143	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
1863	 144	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
- stack 0: 0xF0
1864	 146	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
1865	 147	JUMP		 	 
- stack 0: 0x5A4
1866	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5A4
1867	 A1	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
1868	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x80000000
1869	 A5	PUSH1	03	 	 
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0x3
1870	 A7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
1871	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x5A4
1872	 A9	MLOAD		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
1873	 AA	PUSH1	E0	 	 
- stack 3: 0x5A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
- stack 0: 0xE0
1874	 AC	SHR		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007
1875	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007
- stack 0: 0xFFFF
1876	 B0	AND		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
1877	 B1	SAR		 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1878	 B2	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
1879	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
1880	 B6	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1881	 B8	ADD		 	 
- stack 0: 0x5A8
1882	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1883	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
1884	 BB	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
- stack 0: 0xF0
1885	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2
1886	 BE	JUMP		 	 
- stack 0: 0x5A8
1887	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A8
1888	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
1889	 2D4	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
1890	 2D5	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
- stack 0: 0xE0
1891	 2D7	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2D20000
1892	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2D20000
- stack 0: 0xFFFF
1893	 2DB	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
1894	 2DC	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
1895	 2DE	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
1896	 2DF	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x60
1897	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1898	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1899	 2E4	PUSH2	00C0	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xC0
1900	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A8
1901	 2E8	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1902	 2EA	ADD		 	 
- stack 0: 0x5AC
1903	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1904	 2EC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
1905	 2ED	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
- stack 0: 0xF0
1906	 2EF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1
1907	 2F0	JUMP		 	 
- stack 0: 0x5AC
1908	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
1909	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1910	 2F3	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
1911	 2F4	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
- stack 0: 0xE0
1912	 2F6	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2F10001
1913	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2F10001
- stack 0: 0xFFFF
1914	 2FA	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
1915	 2FB	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
1916	 2FD	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
1917	 2FE	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
1918	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x0
1919	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x1
1920	 303	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
1921	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
1922	 307	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1923	 309	ADD		 	 
- stack 0: 0x5B0
1924	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1925	 30B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
1926	 30C	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
- stack 0: 0xF0
1927	 30E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x310
1928	 30F	JUMP		 	 
- stack 0: 0x5B0
1929	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
1930	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
1931	 312	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
1932	 313	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
- stack 0: 0xE0
1933	 315	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002
1934	 316	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002
- stack 0: 0xFFFF
1935	 319	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
1936	 31A	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
1937	 31C	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
1938	 31D	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
1939	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
1940	 321	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1941	 323	ADD		 	 
- stack 0: 0x5B4
1942	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1943	 325	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
1944	 326	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
- stack 0: 0xF0
1945	 328	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x32A
1946	 329	JUMP		 	 
- stack 0: 0x5B4
1947	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B4
1948	 32B	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
1949	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x1
1950	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1951	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x1
1952	 335	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xA0
1953	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
1954	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1955	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
1956	 33F	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x1
1957	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x348
1958	 343	JUMPI		 	 
- stack 0: 0x5B4
1959	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x5B4
1960	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
1961	 34A	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
1962	 34B	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
- stack 0: 0xE0
1963	 34D	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x32AFFEC
1964	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x32AFFEC
- stack 0: 0xFFFF
1965	 351	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFEC
1966	 352	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFFEC
- stack 0: 0x1
1967	 354	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1968	 355	ADD		 	 
- stack 0: 0x5A0
1969	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFF
1970	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5A0
1971	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1972	 35D	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x135000000A0000702D2000002F1000103100002032AFFEC015BF00000D90012
1973	 35E	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x135000000A0000702D2000002F1000103100002032AFFEC015BF00000D90012
- stack 0: 0xF0
1974	 360	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x135
1975	 361	JUMP		 	 
- stack 0: 0x5A0
1976	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5A0
1977	 136	PUSH4	80000000	 	 
- stack 1: 0x5A0
- stack 0: 0x80000000
1978	 13B	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x80000000
- stack 0: 0x20
1979	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
1980	 13F	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1981	 141	ADD		 	 
- stack 0: 0x5A4
1982	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1983	 143	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
1984	 144	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
- stack 0: 0xF0
1985	 146	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
1986	 147	JUMP		 	 
- stack 0: 0x5A4
1987	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5A4
1988	 A1	PUSH2	0020	 	 
- stack 1: 0x5A4
- stack 0: 0x20
1989	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A4
- stack 0: 0x80000000
1990	 A5	PUSH1	03	 	 
- stack 2: 0x5A4
- stack 1: 0x80000000
- stack 0: 0x3
1991	 A7	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
1992	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x5A4
1993	 A9	MLOAD		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
1994	 AA	PUSH1	E0	 	 
- stack 3: 0x5A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000702D2000002F1000103100002032AFFEC015BF00000D90012036C0108
- stack 0: 0xE0
1995	 AC	SHR		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007
1996	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5A4
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007
- stack 0: 0xFFFF
1997	 B0	AND		 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
1998	 B1	SAR		 	 
- stack 1: 0x5A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
1999	 B2	PUSH2	0060	 	 
- stack 2: 0x5A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
2000	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A4
2001	 B6	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2002	 B8	ADD		 	 
- stack 0: 0x5A8
2003	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2004	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
2005	 BB	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
- stack 0: 0xF0
2006	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2
2007	 BE	JUMP		 	 
- stack 0: 0x5A8
2008	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5A8
2009	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2010	 2D4	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
2011	 2D5	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x2D2000002F1000103100002032AFFEC015BF00000D90012036C010802B80000
- stack 0: 0xE0
2012	 2D7	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x2D20000
2013	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2D20000
- stack 0: 0xFFFF
2014	 2DB	AND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2015	 2DC	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x1
2016	 2DE	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2017	 2DF	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x60
2018	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2019	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2020	 2E4	PUSH2	00C0	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xC0
2021	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x5A8
2022	 2E8	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2023	 2EA	ADD		 	 
- stack 0: 0x5AC
2024	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2025	 2EC	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
2026	 2ED	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
- stack 0: 0xF0
2027	 2EF	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1
2028	 2F0	JUMP		 	 
- stack 0: 0x5AC
2029	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
2030	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2031	 2F3	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
2032	 2F4	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x2F1000103100002032AFFEC015BF00000D90012036C010802B8000001350000
- stack 0: 0xE0
2033	 2F6	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2F10001
2034	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2035	 2FA	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2036	 2FB	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2037	 2FD	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2038	 2FE	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2039	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2040	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x2
2041	 303	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x80
2042	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
2043	 307	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2044	 309	ADD		 	 
- stack 0: 0x5B0
2045	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2046	 30B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
2047	 30C	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
- stack 0: 0xF0
2048	 30E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x310
2049	 30F	JUMP		 	 
- stack 0: 0x5B0
2050	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
2051	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2052	 312	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
2053	 313	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002032AFFEC015BF00000D90012036C010802B800000135000000A0000E
- stack 0: 0xE0
2054	 315	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x3100002
2055	 316	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x3100002
- stack 0: 0xFFFF
2056	 319	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2057	 31A	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
2058	 31C	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2059	 31D	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
2060	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
2061	 321	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2062	 323	ADD		 	 
- stack 0: 0x5B4
2063	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2064	 325	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
2065	 326	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x32AFFEC015BF00000D90012036C010802B800000135000000A0000E03AE0000
- stack 0: 0xF0
2066	 328	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x32A
2067	 329	JUMP		 	 
- stack 0: 0x5B4
2068	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5B4
2069	 32B	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
2070	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x2
2071	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2072	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x2
2073	 335	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2074	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2075	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2076	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2077	 33F	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2078	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x348
2079	 343	JUMPI		 	 
- stack 0: 0x5B4
2080	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x5B4
- stack 0: 0x362
2081	 347	JUMP		 	 
- stack 0: 0x5B4
2082	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x5B4
2083	 363	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2084	 365	ADD		 	 
- stack 0: 0x5B8
2085	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2086	 367	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x15BF00000D90012036C010802B800000135000000A0000E03AE000002D20000
2087	 368	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x15BF00000D90012036C010802B800000135000000A0000E03AE000002D20000
- stack 0: 0xF0
2088	 36A	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x15B
2089	 36B	JUMP		 	 
- stack 0: 0x5B8
2090	 15B	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x5B8
2091	 15C	PUSH4	ff000000	 	 
- stack 1: 0x5B8
- stack 0: 0xFF000000
2092	 161	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xFF000000
- stack 0: 0x3A0
2093	 164	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
2094	 165	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2095	 167	ADD		 	 
- stack 0: 0x5BC
2096	 168	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2097	 169	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xD90012036C010802B800000135000000A0000E03AE000002D2000002F10001
2098	 16A	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xD90012036C010802B800000135000000A0000E03AE000002D2000002F10001
- stack 0: 0xF0
2099	 16C	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xD9
2100	 16D	JUMP		 	 
- stack 0: 0x5BC
2101	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5BC
2102	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2103	 DB	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xD90012036C010802B800000135000000A0000E03AE000002D2000002F10001
2104	 DC	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xD90012036C010802B800000135000000A0000E03AE000002D2000002F10001
- stack 0: 0xE0
2105	 DE	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xD90012
2106	 DF	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xD90012
- stack 0: 0xFFFF
2107	 E2	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x12
2108	 E3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x12
- stack 0: 0x1
2109	 E5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x12
2110	 E6	PUSH2	0380	 	 
- stack 2: 0x5BC
- stack 1: 0x12
- stack 0: 0x380
2111	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x5BC
2112	 EA	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2113	 EC	ADD		 	 
- stack 0: 0x5C0
2114	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2115	 EE	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x36C010802B800000135000000A0000E03AE000002D2000002F1000103100002
2116	 EF	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x36C010802B800000135000000A0000E03AE000002D2000002F1000103100002
- stack 0: 0xF0
2117	 F1	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x36C
2118	 F2	JUMP		 	 
- stack 0: 0x5C0
2119	 36C	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,108(ignore imm)
- stack 0: 0x5C0
2120	 36D	PUSH2	00C0	 	 
- stack 1: 0x5C0
- stack 0: 0xC0
2121	 370	MLOAD		 	  ;; # read from x6
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2122	 371	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
2123	 376	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0xFF000000
2124	 377	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0xFF000000
- stack 0: 0x3A0
2125	 37A	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
2126	 37B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C0
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
2127	 380	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C0
- stack 1: 0xFF000000
- stack 0: 0xFF000000
2128	 381	SUB		 	 
- stack 1: 0x5C0
- stack 0: 0x0
2129	 382	PUSH2	038A	 ;; _neq_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x38A
2130	 385	JUMPI		 	 
- stack 0: 0x5C0
2131	 386	PUSH2	03A4	 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 1: 0x5C0
- stack 0: 0x3A4
2132	 389	JUMP		 	 
- stack 0: 0x5C0
2133	 3A4	JUMPDEST		 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 0: 0x5C0
2134	 3A5	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2135	 3A7	ADD		 	 
- stack 0: 0x5C4
2136	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2137	 3A9	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2B800000135000000A0000E03AE000002D2000002F1000103100002032AFFE8
2138	 3AA	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x2B800000135000000A0000E03AE000002D2000002F1000103100002032AFFE8
- stack 0: 0xF0
2139	 3AC	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2B8
2140	 3AD	JUMP		 	 
- stack 0: 0x5C4
2141	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5C4
2142	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2143	 2BA	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x2B800000135000000A0000E03AE000002D2000002F1000103100002032AFFE8
2144	 2BB	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x2B800000135000000A0000E03AE000002D2000002F1000103100002032AFFE8
- stack 0: 0xE0
2145	 2BD	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x2B80000
2146	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x2B80000
- stack 0: 0xFFFF
2147	 2C1	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2148	 2C2	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2149	 2C4	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2150	 2C5	PUSH2	0080	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x80
2151	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x5C4
2152	 2C9	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2153	 2CB	ADD		 	 
- stack 0: 0x5C8
2154	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2155	 2CD	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x135000000A0000E03AE000002D2000002F1000103100002032AFFE8016EFFE0
2156	 2CE	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x135000000A0000E03AE000002D2000002F1000103100002032AFFE8016EFFE0
- stack 0: 0xF0
2157	 2D0	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x135
2158	 2D1	JUMP		 	 
- stack 0: 0x5C8
2159	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5C8
2160	 136	PUSH4	80000000	 	 
- stack 1: 0x5C8
- stack 0: 0x80000000
2161	 13B	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x80000000
- stack 0: 0x20
2162	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2163	 13F	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2164	 141	ADD		 	 
- stack 0: 0x5CC
2165	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2166	 143	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
2167	 144	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
- stack 0: 0xF0
2168	 146	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
2169	 147	JUMP		 	 
- stack 0: 0x5CC
2170	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5CC
2171	 A1	PUSH2	0020	 	 
- stack 1: 0x5CC
- stack 0: 0x20
2172	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5CC
- stack 0: 0x80000000
2173	 A5	PUSH1	03	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0x3
2174	 A7	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
2175	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x5CC
2176	 A9	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
2177	 AA	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
- stack 0: 0xE0
2178	 AC	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E
2179	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E
- stack 0: 0xFFFF
2180	 B0	AND		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
2181	 B1	SAR		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2182	 B2	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
2183	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2184	 B6	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2185	 B8	ADD		 	 
- stack 0: 0x5D0
2186	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2187	 BA	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
2188	 BB	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
- stack 0: 0xF0
2189	 BD	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE
2190	 BE	JUMP		 	 
- stack 0: 0x5D0
2191	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
2192	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2193	 3B0	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
2194	 3B1	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
- stack 0: 0xE0
2195	 3B3	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE0000
2196	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2197	 3B7	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2198	 3B8	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
2199	 3BA	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2200	 3BB	POP		 	 
- stack 0: 0x5D0
2201	 3BC	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2202	 3BE	ADD		 	 
- stack 0: 0x5D4
2203	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2204	 3C0	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
2205	 3C1	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
- stack 0: 0xF0
2206	 3C3	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2
2207	 3C4	JUMP		 	 
- stack 0: 0x5D4
2208	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5D4
2209	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2210	 2D4	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
2211	 2D5	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
- stack 0: 0xE0
2212	 2D7	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2D20000
2213	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2D20000
- stack 0: 0xFFFF
2214	 2DB	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2215	 2DC	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2216	 2DE	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2217	 2DF	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x60
2218	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2219	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2220	 2E4	PUSH2	00C0	 	 
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xC0
2221	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x5D4
2222	 2E8	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2223	 2EA	ADD		 	 
- stack 0: 0x5D8
2224	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2225	 2EC	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
2226	 2ED	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
- stack 0: 0xF0
2227	 2EF	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1
2228	 2F0	JUMP		 	 
- stack 0: 0x5D8
2229	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
2230	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2231	 2F3	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
2232	 2F4	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
- stack 0: 0xE0
2233	 2F6	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2F10001
2234	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2235	 2FA	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2236	 2FB	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2237	 2FD	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2238	 2FE	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2239	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x0
2240	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x1
2241	 303	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2242	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
2243	 307	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2244	 309	ADD		 	 
- stack 0: 0x5DC
2245	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2246	 30B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
2247	 30C	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
- stack 0: 0xF0
2248	 30E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x310
2249	 30F	JUMP		 	 
- stack 0: 0x5DC
2250	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
2251	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2252	 312	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
2253	 313	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
- stack 0: 0xE0
2254	 315	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002
2255	 316	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002
- stack 0: 0xFFFF
2256	 319	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2257	 31A	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
2258	 31C	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2259	 31D	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
2260	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
2261	 321	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2262	 323	ADD		 	 
- stack 0: 0x5E0
2263	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2264	 325	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
2265	 326	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
- stack 0: 0xF0
2266	 328	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x32A
2267	 329	JUMP		 	 
- stack 0: 0x5E0
2268	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E0
2269	 32B	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
2270	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x1
2271	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2272	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x1
2273	 335	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0xA0
2274	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
2275	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2276	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x2
2277	 33F	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2278	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x348
2279	 343	JUMPI		 	 
- stack 0: 0x5E0
2280	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x5E0
2281	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2282	 34A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
2283	 34B	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
- stack 0: 0xE0
2284	 34D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x32AFFE8
2285	 34E	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x32AFFE8
- stack 0: 0xFFFF
2286	 351	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFE8
2287	 352	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFFE8
- stack 0: 0x1
2288	 354	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2289	 355	ADD		 	 
- stack 0: 0x5C8
2290	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5C8
- stack 0: 0xFFFFFFFF
2291	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5C8
2292	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2293	 35D	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x135000000A0000E03AE000002D2000002F1000103100002032AFFE8016EFFE0
2294	 35E	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x135000000A0000E03AE000002D2000002F1000103100002032AFFE8016EFFE0
- stack 0: 0xF0
2295	 360	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x135
2296	 361	JUMP		 	 
- stack 0: 0x5C8
2297	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5C8
2298	 136	PUSH4	80000000	 	 
- stack 1: 0x5C8
- stack 0: 0x80000000
2299	 13B	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0x80000000
- stack 0: 0x20
2300	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2301	 13F	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2302	 141	ADD		 	 
- stack 0: 0x5CC
2303	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2304	 143	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
2305	 144	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
- stack 0: 0xF0
2306	 146	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xA0
2307	 147	JUMP		 	 
- stack 0: 0x5CC
2308	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5CC
2309	 A1	PUSH2	0020	 	 
- stack 1: 0x5CC
- stack 0: 0x20
2310	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5CC
- stack 0: 0x80000000
2311	 A5	PUSH1	03	 	 
- stack 2: 0x5CC
- stack 1: 0x80000000
- stack 0: 0x3
2312	 A7	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
2313	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x5CC
2314	 A9	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
2315	 AA	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E03AE000002D2000002F1000103100002032AFFE8016EFFE000D90013
- stack 0: 0xE0
2316	 AC	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E
2317	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E
- stack 0: 0xFFFF
2318	 B0	AND		 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
2319	 B1	SAR		 	 
- stack 1: 0x5CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2320	 B2	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
2321	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2322	 B6	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2323	 B8	ADD		 	 
- stack 0: 0x5D0
2324	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2325	 BA	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
2326	 BB	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
- stack 0: 0xF0
2327	 BD	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE
2328	 BE	JUMP		 	 
- stack 0: 0x5D0
2329	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5D0
2330	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2331	 3B0	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
2332	 3B1	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC
- stack 0: 0xE0
2333	 3B3	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3AE0000
2334	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2335	 3B7	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2336	 3B8	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x0
- stack 0: 0x1
2337	 3BA	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x0
2338	 3BB	POP		 	 
- stack 0: 0x5D0
2339	 3BC	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2340	 3BE	ADD		 	 
- stack 0: 0x5D4
2341	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2342	 3C0	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
2343	 3C1	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
- stack 0: 0xF0
2344	 3C3	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2
2345	 3C4	JUMP		 	 
- stack 0: 0x5D4
2346	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5D4
2347	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2348	 2D4	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
2349	 2D5	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x2D2000002F1000103100002032AFFE8016EFFE000D90013036C00DC02B80000
- stack 0: 0xE0
2350	 2D7	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x2D20000
2351	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2D20000
- stack 0: 0xFFFF
2352	 2DB	AND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2353	 2DC	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x1
2354	 2DE	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2355	 2DF	PUSH2	0060	 	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x60
2356	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2357	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2358	 2E4	PUSH2	00C0	 	 
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xC0
2359	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x5D4
2360	 2E8	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2361	 2EA	ADD		 	 
- stack 0: 0x5D8
2362	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2363	 2EC	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
2364	 2ED	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
- stack 0: 0xF0
2365	 2EF	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1
2366	 2F0	JUMP		 	 
- stack 0: 0x5D8
2367	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5D8
2368	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D8
- stack 0: 0x5D8
2369	 2F3	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
2370	 2F4	PUSH1	E0	 	 
- stack 2: 0x5D8
- stack 1: 0x2F1000103100002032AFFE8016EFFE000D90013036C00DC02B8000001350000
- stack 0: 0xE0
2371	 2F6	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x2F10001
2372	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x5D8
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2373	 2FA	AND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2374	 2FB	PUSH1	01	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2375	 2FD	SIGNEXTEND		 	 
- stack 1: 0x5D8
- stack 0: 0x1
2376	 2FE	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x80
2377	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x5D8
- stack 1: 0x1
- stack 0: 0x1
2378	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x5D8
- stack 0: 0x2
2379	 303	PUSH2	0080	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x80
2380	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x5D8
2381	 307	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2382	 309	ADD		 	 
- stack 0: 0x5DC
2383	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2384	 30B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
2385	 30C	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
- stack 0: 0xF0
2386	 30E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x310
2387	 30F	JUMP		 	 
- stack 0: 0x5DC
2388	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5DC
2389	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2390	 312	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
2391	 313	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002032AFFE8016EFFE000D90013036C00DC02B800000135000001810001
- stack 0: 0xE0
2392	 315	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x3100002
2393	 316	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x3100002
- stack 0: 0xFFFF
2394	 319	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2395	 31A	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x1
2396	 31C	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x2
2397	 31D	PUSH2	00A0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xA0
2398	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x5DC
2399	 321	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2400	 323	ADD		 	 
- stack 0: 0x5E0
2401	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2402	 325	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
2403	 326	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x32AFFE8016EFFE000D90013036C00DC02B80000013500000181000100A0001F
- stack 0: 0xF0
2404	 328	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x32A
2405	 329	JUMP		 	 
- stack 0: 0x5E0
2406	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5E0
2407	 32B	PUSH2	0080	 	 
- stack 1: 0x5E0
- stack 0: 0x80
2408	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E0
- stack 0: 0x2
2409	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2410	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E0
- stack 0: 0x2
2411	 335	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2412	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
2413	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2414	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x2
2415	 33F	SUB		 	 
- stack 1: 0x5E0
- stack 0: 0x0
2416	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x5E0
- stack 1: 0x0
- stack 0: 0x348
2417	 343	JUMPI		 	 
- stack 0: 0x5E0
2418	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x5E0
- stack 0: 0x362
2419	 347	JUMP		 	 
- stack 0: 0x5E0
2420	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x5E0
2421	 363	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2422	 365	ADD		 	 
- stack 0: 0x5E4
2423	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2424	 367	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x16EFFE000D90013036C00DC02B80000013500000181000100A0001F03AE0000
2425	 368	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x16EFFE000D90013036C00DC02B80000013500000181000100A0001F03AE0000
- stack 0: 0xF0
2426	 36A	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x16E
2427	 36B	JUMP		 	 
- stack 0: 0x5E4
2428	 16E	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x5E4
2429	 16F	PUSH4	fffe0000	 	 
- stack 1: 0x5E4
- stack 0: 0xFFFE0000
2430	 174	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
2431	 177	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E4
2432	 178	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2433	 17A	ADD		 	 
- stack 0: 0x5E8
2434	 17B	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2435	 17C	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xD90013036C00DC02B80000013500000181000100A0001F03AE000003AE0000
2436	 17D	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0xD90013036C00DC02B80000013500000181000100A0001F03AE000003AE0000
- stack 0: 0xF0
2437	 17F	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xD9
2438	 180	JUMP		 	 
- stack 0: 0x5E8
2439	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E8
2440	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2441	 DB	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0xD90013036C00DC02B80000013500000181000100A0001F03AE000003AE0000
2442	 DC	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0xD90013036C00DC02B80000013500000181000100A0001F03AE000003AE0000
- stack 0: 0xE0
2443	 DE	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0xD90013
2444	 DF	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0xD90013
- stack 0: 0xFFFF
2445	 E2	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x13
2446	 E3	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x13
- stack 0: 0x1
2447	 E5	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x13
2448	 E6	PUSH2	0380	 	 
- stack 2: 0x5E8
- stack 1: 0x13
- stack 0: 0x380
2449	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E8
2450	 EA	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2451	 EC	ADD		 	 
- stack 0: 0x5EC
2452	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2453	 EE	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x36C00DC02B80000013500000181000100A0001F03AE000003AE000002D20000
2454	 EF	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x36C00DC02B80000013500000181000100A0001F03AE000003AE000002D20000
- stack 0: 0xF0
2455	 F1	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x36C
2456	 F2	JUMP		 	 
- stack 0: 0x5EC
2457	 36C	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,108(ignore imm)
- stack 0: 0x5EC
2458	 36D	PUSH2	00C0	 	 
- stack 1: 0x5EC
- stack 0: 0xC0
2459	 370	MLOAD		 	  ;; # read from x6
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
2460	 371	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
2461	 376	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5EC
- stack 0: 0xFFFE0000
2462	 377	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
2463	 37A	MLOAD		 	  ;; # read from x29
- stack 2: 0x5EC
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
2464	 37B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5EC
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
2465	 380	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5EC
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
2466	 381	SUB		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2467	 382	PUSH2	038A	 ;; _neq_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x38A
2468	 385	JUMPI		 	 
- stack 0: 0x5EC
2469	 386	PUSH2	03A4	 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 1: 0x5EC
- stack 0: 0x3A4
2470	 389	JUMP		 	 
- stack 0: 0x5EC
2471	 3A4	JUMPDEST		 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 0: 0x5EC
2472	 3A5	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2473	 3A7	ADD		 	 
- stack 0: 0x5F0
2474	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2475	 3A9	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2B80000013500000181000100A0001F03AE000003AE000002D2000002F10001
2476	 3AA	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x2B80000013500000181000100A0001F03AE000003AE000002D2000002F10001
- stack 0: 0xF0
2477	 3AC	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2B8
2478	 3AD	JUMP		 	 
- stack 0: 0x5F0
2479	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F0
2480	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2481	 2BA	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x2B80000013500000181000100A0001F03AE000003AE000002D2000002F10001
2482	 2BB	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x2B80000013500000181000100A0001F03AE000003AE000002D2000002F10001
- stack 0: 0xE0
2483	 2BD	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x2B80000
2484	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x2B80000
- stack 0: 0xFFFF
2485	 2C1	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2486	 2C2	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x1
2487	 2C4	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x0
2488	 2C5	PUSH2	0080	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x80
2489	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F0
2490	 2C9	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2491	 2CB	ADD		 	 
- stack 0: 0x5F4
2492	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2493	 2CD	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x13500000181000100A0001F03AE000003AE000002D2000002F1000103100002
2494	 2CE	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x13500000181000100A0001F03AE000003AE000002D2000002F1000103100002
- stack 0: 0xF0
2495	 2D0	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x135
2496	 2D1	JUMP		 	 
- stack 0: 0x5F4
2497	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5F4
2498	 136	PUSH4	80000000	 	 
- stack 1: 0x5F4
- stack 0: 0x80000000
2499	 13B	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x80000000
- stack 0: 0x20
2500	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
2501	 13F	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2502	 141	ADD		 	 
- stack 0: 0x5F8
2503	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2504	 143	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
2505	 144	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
- stack 0: 0xF0
2506	 146	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x181
2507	 147	JUMP		 	 
- stack 0: 0x5F8
2508	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5F8
2509	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2510	 183	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
2511	 184	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
- stack 0: 0xE0
2512	 186	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1810001
2513	 187	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1810001
- stack 0: 0xFFFF
2514	 18A	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2515	 18B	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
2516	 18D	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2517	 18E	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x20
2518	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80000000
2519	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x80000001
2520	 193	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x80000001
- stack 0: 0x20
2521	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2522	 197	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2523	 199	ADD		 	 
- stack 0: 0x5FC
2524	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2525	 19B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
2526	 19C	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
- stack 0: 0xF0
2527	 19E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xA0
2528	 19F	JUMP		 	 
- stack 0: 0x5FC
2529	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5FC
2530	 A1	PUSH2	0020	 	 
- stack 1: 0x5FC
- stack 0: 0x20
2531	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5FC
- stack 0: 0x80000001
2532	 A5	PUSH1	03	 	 
- stack 2: 0x5FC
- stack 1: 0x80000001
- stack 0: 0x3
2533	 A7	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
2534	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x5FC
2535	 A9	MLOAD		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
2536	 AA	PUSH1	E0	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
- stack 0: 0xE0
2537	 AC	SHR		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F
2538	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F
- stack 0: 0xFFFF
2539	 B0	AND		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
2540	 B1	SAR		 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2541	 B2	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
2542	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5FC
2543	 B6	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2544	 B8	ADD		 	 
- stack 0: 0x600
2545	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2546	 BA	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
2547	 BB	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
- stack 0: 0xF0
2548	 BD	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3AE
2549	 BE	JUMP		 	 
- stack 0: 0x600
2550	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
2551	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2552	 3B0	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
2553	 3B1	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
- stack 0: 0xE0
2554	 3B3	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3AE0000
2555	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2556	 3B7	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
2557	 3B8	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
2558	 3BA	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
2559	 3BB	POP		 	 
- stack 0: 0x600
2560	 3BC	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2561	 3BE	ADD		 	 
- stack 0: 0x604
2562	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2563	 3C0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
2564	 3C1	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
- stack 0: 0xF0
2565	 3C3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AE
2566	 3C4	JUMP		 	 
- stack 0: 0x604
2567	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x604
2568	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2569	 3B0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
2570	 3B1	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
- stack 0: 0xE0
2571	 3B3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AE0000
2572	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2573	 3B7	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
2574	 3B8	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
2575	 3BA	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
2576	 3BB	POP		 	 
- stack 0: 0x604
2577	 3BC	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2578	 3BE	ADD		 	 
- stack 0: 0x608
2579	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2580	 3C0	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
2581	 3C1	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
- stack 0: 0xF0
2582	 3C3	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2D2
2583	 3C4	JUMP		 	 
- stack 0: 0x608
2584	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x608
2585	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2586	 2D4	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
2587	 2D5	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
- stack 0: 0xE0
2588	 2D7	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2D20000
2589	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2D20000
- stack 0: 0xFFFF
2590	 2DB	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
2591	 2DC	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
2592	 2DE	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
2593	 2DF	PUSH2	0060	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x60
2594	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2595	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2596	 2E4	PUSH2	00C0	 	 
- stack 2: 0x608
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xC0
2597	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x608
2598	 2E8	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2599	 2EA	ADD		 	 
- stack 0: 0x60C
2600	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2601	 2EC	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
2602	 2ED	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
- stack 0: 0xF0
2603	 2EF	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2F1
2604	 2F0	JUMP		 	 
- stack 0: 0x60C
2605	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x60C
2606	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2607	 2F3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
2608	 2F4	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
- stack 0: 0xE0
2609	 2F6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2F10001
2610	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2611	 2FA	AND		 	 
- stack 1: 0x60C
- stack 0: 0x1
2612	 2FB	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x1
2613	 2FD	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x1
2614	 2FE	PUSH2	0080	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x80
2615	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x0
2616	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x60C
- stack 0: 0x1
2617	 303	PUSH2	0080	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x80
2618	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x60C
2619	 307	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2620	 309	ADD		 	 
- stack 0: 0x610
2621	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2622	 30B	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
2623	 30C	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
- stack 0: 0xF0
2624	 30E	SHR		 	 
- stack 1: 0x610
- stack 0: 0x310
2625	 30F	JUMP		 	 
- stack 0: 0x610
2626	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x610
2627	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2628	 312	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
2629	 313	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
- stack 0: 0xE0
2630	 315	SHR		 	 
- stack 1: 0x610
- stack 0: 0x3100002
2631	 316	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x3100002
- stack 0: 0xFFFF
2632	 319	AND		 	 
- stack 1: 0x610
- stack 0: 0x2
2633	 31A	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x1
2634	 31C	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x2
2635	 31D	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xA0
2636	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x610
2637	 321	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2638	 323	ADD		 	 
- stack 0: 0x614
2639	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2640	 325	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
2641	 326	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
- stack 0: 0xF0
2642	 328	SHR		 	 
- stack 1: 0x614
- stack 0: 0x32A
2643	 329	JUMP		 	 
- stack 0: 0x614
2644	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x614
2645	 32B	PUSH2	0080	 	 
- stack 1: 0x614
- stack 0: 0x80
2646	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x614
- stack 0: 0x1
2647	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2648	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0x1
2649	 335	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0xA0
2650	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x2
2651	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2652	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x2
2653	 33F	SUB		 	 
- stack 1: 0x614
- stack 0: 0x1
2654	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x614
- stack 1: 0x1
- stack 0: 0x348
2655	 343	JUMPI		 	 
- stack 0: 0x614
2656	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x614
2657	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2658	 34A	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
2659	 34B	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
- stack 0: 0xE0
2660	 34D	SHR		 	 
- stack 1: 0x614
- stack 0: 0x32AFFE0
2661	 34E	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x32AFFE0
- stack 0: 0xFFFF
2662	 351	AND		 	 
- stack 1: 0x614
- stack 0: 0xFFE0
2663	 352	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xFFE0
- stack 0: 0x1
2664	 354	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2665	 355	ADD		 	 
- stack 0: 0x5F4
2666	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFF
2667	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F4
2668	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2669	 35D	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x13500000181000100A0001F03AE000003AE000002D2000002F1000103100002
2670	 35E	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x13500000181000100A0001F03AE000003AE000002D2000002F1000103100002
- stack 0: 0xF0
2671	 360	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x135
2672	 361	JUMP		 	 
- stack 0: 0x5F4
2673	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x5F4
2674	 136	PUSH4	80000000	 	 
- stack 1: 0x5F4
- stack 0: 0x80000000
2675	 13B	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0x80000000
- stack 0: 0x20
2676	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
2677	 13F	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2678	 141	ADD		 	 
- stack 0: 0x5F8
2679	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2680	 143	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
2681	 144	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
- stack 0: 0xF0
2682	 146	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x181
2683	 147	JUMP		 	 
- stack 0: 0x5F8
2684	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5F8
2685	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2686	 183	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
2687	 184	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x181000100A0001F03AE000003AE000002D2000002F1000103100002032AFFE0
- stack 0: 0xE0
2688	 186	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x1810001
2689	 187	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x1810001
- stack 0: 0xFFFF
2690	 18A	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2691	 18B	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x1
2692	 18D	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x1
2693	 18E	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x20
2694	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F8
- stack 1: 0x1
- stack 0: 0x80000000
2695	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F8
- stack 0: 0x80000001
2696	 193	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x80000001
- stack 0: 0x20
2697	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2698	 197	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2699	 199	ADD		 	 
- stack 0: 0x5FC
2700	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2701	 19B	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
2702	 19C	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
- stack 0: 0xF0
2703	 19E	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xA0
2704	 19F	JUMP		 	 
- stack 0: 0x5FC
2705	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x5FC
2706	 A1	PUSH2	0020	 	 
- stack 1: 0x5FC
- stack 0: 0x20
2707	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x5FC
- stack 0: 0x80000001
2708	 A5	PUSH1	03	 	 
- stack 2: 0x5FC
- stack 1: 0x80000001
- stack 0: 0x3
2709	 A7	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
2710	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x5FC
2711	 A9	MLOAD		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
2712	 AA	PUSH1	E0	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F03AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF
- stack 0: 0xE0
2713	 AC	SHR		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F
2714	 AD	PUSH2	FFFF	 	 
- stack 3: 0x5FC
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F
- stack 0: 0xFFFF
2715	 B0	AND		 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
2716	 B1	SAR		 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2717	 B2	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
2718	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x5FC
2719	 B6	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2720	 B8	ADD		 	 
- stack 0: 0x600
2721	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2722	 BA	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
2723	 BB	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
- stack 0: 0xF0
2724	 BD	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3AE
2725	 BE	JUMP		 	 
- stack 0: 0x600
2726	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
2727	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2728	 3B0	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
2729	 3B1	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x3AE000003AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014
- stack 0: 0xE0
2730	 3B3	SHR		 	 
- stack 1: 0x600
- stack 0: 0x3AE0000
2731	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2732	 3B7	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
2733	 3B8	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
2734	 3BA	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
2735	 3BB	POP		 	 
- stack 0: 0x600
2736	 3BC	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2737	 3BE	ADD		 	 
- stack 0: 0x604
2738	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2739	 3C0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
2740	 3C1	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
- stack 0: 0xF0
2741	 3C3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AE
2742	 3C4	JUMP		 	 
- stack 0: 0x604
2743	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x604
2744	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2745	 3B0	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
2746	 3B1	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3AE000002D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A8
- stack 0: 0xE0
2747	 3B3	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3AE0000
2748	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
2749	 3B7	AND		 	 
- stack 1: 0x604
- stack 0: 0x0
2750	 3B8	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x0
- stack 0: 0x1
2751	 3BA	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x0
2752	 3BB	POP		 	 
- stack 0: 0x604
2753	 3BC	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2754	 3BE	ADD		 	 
- stack 0: 0x608
2755	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2756	 3C0	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
2757	 3C1	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
- stack 0: 0xF0
2758	 3C3	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2D2
2759	 3C4	JUMP		 	 
- stack 0: 0x608
2760	 2D2	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x608
2761	 2D3	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2762	 2D4	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
2763	 2D5	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x2D2000002F1000103100002032AFFE000BFFFFF00D90014036C00A802B80000
- stack 0: 0xE0
2764	 2D7	SHR		 	 
- stack 1: 0x608
- stack 0: 0x2D20000
2765	 2D8	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x2D20000
- stack 0: 0xFFFF
2766	 2DB	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
2767	 2DC	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
2768	 2DE	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
2769	 2DF	PUSH2	0060	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x60
2770	 2E2	MLOAD		 	  ;; # read from x3
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2771	 2E3	ADD		 	  ;; # ADDI 3
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2772	 2E4	PUSH2	00C0	 	 
- stack 2: 0x608
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xC0
2773	 2E7	MSTORE		 	  ;; # store to x6
- stack 0: 0x608
2774	 2E8	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2775	 2EA	ADD		 	 
- stack 0: 0x60C
2776	 2EB	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2777	 2EC	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
2778	 2ED	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
- stack 0: 0xF0
2779	 2EF	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2F1
2780	 2F0	JUMP		 	 
- stack 0: 0x60C
2781	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x60C
2782	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2783	 2F3	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
2784	 2F4	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x2F1000103100002032AFFE000BFFFFF00D90014036C00A802B8000001350000
- stack 0: 0xE0
2785	 2F6	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x2F10001
2786	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2787	 2FA	AND		 	 
- stack 1: 0x60C
- stack 0: 0x1
2788	 2FB	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x1
2789	 2FD	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x1
2790	 2FE	PUSH2	0080	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x80
2791	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x1
2792	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x60C
- stack 0: 0x2
2793	 303	PUSH2	0080	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x80
2794	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x60C
2795	 307	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2796	 309	ADD		 	 
- stack 0: 0x610
2797	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2798	 30B	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
2799	 30C	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
- stack 0: 0xF0
2800	 30E	SHR		 	 
- stack 1: 0x610
- stack 0: 0x310
2801	 30F	JUMP		 	 
- stack 0: 0x610
2802	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x610
2803	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2804	 312	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
2805	 313	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x3100002032AFFE000BFFFFF00D90014036C00A802B800000135000000A00007
- stack 0: 0xE0
2806	 315	SHR		 	 
- stack 1: 0x610
- stack 0: 0x3100002
2807	 316	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x3100002
- stack 0: 0xFFFF
2808	 319	AND		 	 
- stack 1: 0x610
- stack 0: 0x2
2809	 31A	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x1
2810	 31C	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x2
2811	 31D	PUSH2	00A0	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0xA0
2812	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x610
2813	 321	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2814	 323	ADD		 	 
- stack 0: 0x614
2815	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2816	 325	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
2817	 326	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x32AFFE000BFFFFF00D90014036C00A802B800000135000000A0000702F10001
- stack 0: 0xF0
2818	 328	SHR		 	 
- stack 1: 0x614
- stack 0: 0x32A
2819	 329	JUMP		 	 
- stack 0: 0x614
2820	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x614
2821	 32B	PUSH2	0080	 	 
- stack 1: 0x614
- stack 0: 0x80
2822	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x614
- stack 0: 0x2
2823	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2824	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0x2
2825	 335	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
2826	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x2
2827	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2828	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x2
2829	 33F	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
2830	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x348
2831	 343	JUMPI		 	 
- stack 0: 0x614
2832	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x614
- stack 0: 0x362
2833	 347	JUMP		 	 
- stack 0: 0x614
2834	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x614
2835	 363	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2836	 365	ADD		 	 
- stack 0: 0x618
2837	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2838	 367	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0xBFFFFF00D90014036C00A802B800000135000000A0000702F1000103100002
2839	 368	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0xBFFFFF00D90014036C00A802B800000135000000A0000702F1000103100002
- stack 0: 0xF0
2840	 36A	SHR		 	 
- stack 1: 0x618
- stack 0: 0xBF
2841	 36B	JUMP		 	 
- stack 0: 0x618
2842	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x618
2843	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2844	 C1	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0xBFFFFF00D90014036C00A802B800000135000000A0000702F1000103100002
2845	 C2	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0xBFFFFF00D90014036C00A802B800000135000000A0000702F1000103100002
- stack 0: 0xE0
2846	 C4	SHR		 	 
- stack 1: 0x618
- stack 0: 0xBFFFFF
2847	 C5	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0xBFFFFF
- stack 0: 0xFFFF
2848	 C8	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFFF
2849	 C9	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFFF
- stack 0: 0x1
2850	 CB	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2851	 CC	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
2852	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x618
2853	 D0	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2854	 D2	ADD		 	 
- stack 0: 0x61C
2855	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2856	 D4	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD90014036C00A802B800000135000000A0000702F1000103100002032AFFF0
2857	 D5	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD90014036C00A802B800000135000000A0000702F1000103100002032AFFF0
- stack 0: 0xF0
2858	 D7	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD9
2859	 D8	JUMP		 	 
- stack 0: 0x61C
2860	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x61C
2861	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2862	 DB	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD90014036C00A802B800000135000000A0000702F1000103100002032AFFF0
2863	 DC	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0xD90014036C00A802B800000135000000A0000702F1000103100002032AFFF0
- stack 0: 0xE0
2864	 DE	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD90014
2865	 DF	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0xD90014
- stack 0: 0xFFFF
2866	 E2	AND		 	 
- stack 1: 0x61C
- stack 0: 0x14
2867	 E3	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x14
- stack 0: 0x1
2868	 E5	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x14
2869	 E6	PUSH2	0380	 	 
- stack 2: 0x61C
- stack 1: 0x14
- stack 0: 0x380
2870	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x61C
2871	 EA	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2872	 EC	ADD		 	 
- stack 0: 0x620
2873	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2874	 EE	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x36C00A802B800000135000000A0000702F1000103100002032AFFF0015BF000
2875	 EF	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x36C00A802B800000135000000A0000702F1000103100002032AFFF0015BF000
- stack 0: 0xF0
2876	 F1	SHR		 	 
- stack 1: 0x620
- stack 0: 0x36C
2877	 F2	JUMP		 	 
- stack 0: 0x620
2878	 36C	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,108(ignore imm)
- stack 0: 0x620
2879	 36D	PUSH2	00C0	 	 
- stack 1: 0x620
- stack 0: 0xC0
2880	 370	MLOAD		 	  ;; # read from x6
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2881	 371	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2882	 376	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0xFFFFFFFF
2883	 377	PUSH2	03A0	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
2884	 37A	MLOAD		 	  ;; # read from x29
- stack 2: 0x620
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2885	 37B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
2886	 380	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
2887	 381	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
2888	 382	PUSH2	038A	 ;; _neq_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x38A
2889	 385	JUMPI		 	 
- stack 0: 0x620
2890	 386	PUSH2	03A4	 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 1: 0x620
- stack 0: 0x3A4
2891	 389	JUMP		 	 
- stack 0: 0x620
2892	 3A4	JUMPDEST		 ;; _neq_after_7bae5deb1dfdb4c4d8e35260a0de02e43839af88da0b01416adf206eac6305f0	 
- stack 0: 0x620
2893	 3A5	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2894	 3A7	ADD		 	 
- stack 0: 0x624
2895	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2896	 3A9	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2B800000135000000A0000702F1000103100002032AFFF0015BF00000D90015
2897	 3AA	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x2B800000135000000A0000702F1000103100002032AFFF0015BF00000D90015
- stack 0: 0xF0
2898	 3AC	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2B8
2899	 3AD	JUMP		 	 
- stack 0: 0x624
2900	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x624
2901	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
2902	 2BA	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x2B800000135000000A0000702F1000103100002032AFFF0015BF00000D90015
2903	 2BB	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x2B800000135000000A0000702F1000103100002032AFFF0015BF00000D90015
- stack 0: 0xE0
2904	 2BD	SHR		 	 
- stack 1: 0x624
- stack 0: 0x2B80000
2905	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x2B80000
- stack 0: 0xFFFF
2906	 2C1	AND		 	 
- stack 1: 0x624
- stack 0: 0x0
2907	 2C2	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x1
2908	 2C4	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0x0
2909	 2C5	PUSH2	0080	 	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x80
2910	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x624
2911	 2C9	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2912	 2CB	ADD		 	 
- stack 0: 0x628
2913	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2914	 2CD	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x135000000A0000702F1000103100002032AFFF0015BF00000D9001500F30084
2915	 2CE	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x135000000A0000702F1000103100002032AFFF0015BF00000D9001500F30084
- stack 0: 0xF0
2916	 2D0	SHR		 	 
- stack 1: 0x628
- stack 0: 0x135
2917	 2D1	JUMP		 	 
- stack 0: 0x628
2918	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x628
2919	 136	PUSH4	80000000	 	 
- stack 1: 0x628
- stack 0: 0x80000000
2920	 13B	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x80000000
- stack 0: 0x20
2921	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
2922	 13F	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2923	 141	ADD		 	 
- stack 0: 0x62C
2924	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2925	 143	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
2926	 144	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
- stack 0: 0xF0
2927	 146	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xA0
2928	 147	JUMP		 	 
- stack 0: 0x62C
2929	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x62C
2930	 A1	PUSH2	0020	 	 
- stack 1: 0x62C
- stack 0: 0x20
2931	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x62C
- stack 0: 0x80000000
2932	 A5	PUSH1	03	 	 
- stack 2: 0x62C
- stack 1: 0x80000000
- stack 0: 0x3
2933	 A7	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
2934	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x62C
2935	 A9	MLOAD		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
2936	 AA	PUSH1	E0	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
- stack 0: 0xE0
2937	 AC	SHR		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007
2938	 AD	PUSH2	FFFF	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007
- stack 0: 0xFFFF
2939	 B0	AND		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
2940	 B1	SAR		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
2941	 B2	PUSH2	0060	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
2942	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x62C
2943	 B6	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2944	 B8	ADD		 	 
- stack 0: 0x630
2945	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2946	 BA	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
2947	 BB	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
- stack 0: 0xF0
2948	 BD	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2F1
2949	 BE	JUMP		 	 
- stack 0: 0x630
2950	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
2951	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2952	 2F3	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
2953	 2F4	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
- stack 0: 0xE0
2954	 2F6	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2F10001
2955	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2F10001
- stack 0: 0xFFFF
2956	 2FA	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
2957	 2FB	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
2958	 2FD	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
2959	 2FE	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
2960	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x0
2961	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x1
2962	 303	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
2963	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
2964	 307	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2965	 309	ADD		 	 
- stack 0: 0x634
2966	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2967	 30B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
2968	 30C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
- stack 0: 0xF0
2969	 30E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x310
2970	 30F	JUMP		 	 
- stack 0: 0x634
2971	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
2972	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
2973	 312	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
2974	 313	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
- stack 0: 0xE0
2975	 315	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3100002
2976	 316	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3100002
- stack 0: 0xFFFF
2977	 319	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
2978	 31A	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
2979	 31C	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
2980	 31D	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
2981	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
2982	 321	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2983	 323	ADD		 	 
- stack 0: 0x638
2984	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2985	 325	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
2986	 326	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
- stack 0: 0xF0
2987	 328	SHR		 	 
- stack 1: 0x638
- stack 0: 0x32A
2988	 329	JUMP		 	 
- stack 0: 0x638
2989	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x638
2990	 32B	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
2991	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x1
2992	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2993	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x1
2994	 335	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0xA0
2995	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
2996	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2997	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x2
2998	 33F	SUB		 	 
- stack 1: 0x638
- stack 0: 0x1
2999	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x638
- stack 1: 0x1
- stack 0: 0x348
3000	 343	JUMPI		 	 
- stack 0: 0x638
3001	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x638
3002	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3003	 34A	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
3004	 34B	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
- stack 0: 0xE0
3005	 34D	SHR		 	 
- stack 1: 0x638
- stack 0: 0x32AFFF0
3006	 34E	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x32AFFF0
- stack 0: 0xFFFF
3007	 351	AND		 	 
- stack 1: 0x638
- stack 0: 0xFFF0
3008	 352	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0xFFF0
- stack 0: 0x1
3009	 354	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3010	 355	ADD		 	 
- stack 0: 0x628
3011	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x628
- stack 0: 0xFFFFFFFF
3012	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x628
3013	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3014	 35D	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x135000000A0000702F1000103100002032AFFF0015BF00000D9001500F30084
3015	 35E	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x135000000A0000702F1000103100002032AFFF0015BF00000D9001500F30084
- stack 0: 0xF0
3016	 360	SHR		 	 
- stack 1: 0x628
- stack 0: 0x135
3017	 361	JUMP		 	 
- stack 0: 0x628
3018	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x628
3019	 136	PUSH4	80000000	 	 
- stack 1: 0x628
- stack 0: 0x80000000
3020	 13B	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0x80000000
- stack 0: 0x20
3021	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3022	 13F	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3023	 141	ADD		 	 
- stack 0: 0x62C
3024	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3025	 143	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
3026	 144	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
- stack 0: 0xF0
3027	 146	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xA0
3028	 147	JUMP		 	 
- stack 0: 0x62C
3029	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x62C
3030	 A1	PUSH2	0020	 	 
- stack 1: 0x62C
- stack 0: 0x20
3031	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x62C
- stack 0: 0x80000000
3032	 A5	PUSH1	03	 	 
- stack 2: 0x62C
- stack 1: 0x80000000
- stack 0: 0x3
3033	 A7	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3034	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x62C
3035	 A9	MLOAD		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
3036	 AA	PUSH1	E0	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000702F1000103100002032AFFF0015BF00000D9001500F3008402B80000
- stack 0: 0xE0
3037	 AC	SHR		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA00007
3038	 AD	PUSH2	FFFF	 	 
- stack 3: 0x62C
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA00007
- stack 0: 0xFFFF
3039	 B0	AND		 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x7
3040	 B1	SAR		 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3041	 B2	PUSH2	0060	 	 
- stack 2: 0x62C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0x60
3042	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x62C
3043	 B6	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3044	 B8	ADD		 	 
- stack 0: 0x630
3045	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3046	 BA	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
3047	 BB	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
- stack 0: 0xF0
3048	 BD	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2F1
3049	 BE	JUMP		 	 
- stack 0: 0x630
3050	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x630
3051	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3052	 2F3	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
3053	 2F4	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x2F1000103100002032AFFF0015BF00000D9001500F3008402B8000001350000
- stack 0: 0xE0
3054	 2F6	SHR		 	 
- stack 1: 0x630
- stack 0: 0x2F10001
3055	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x2F10001
- stack 0: 0xFFFF
3056	 2FA	AND		 	 
- stack 1: 0x630
- stack 0: 0x1
3057	 2FB	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3058	 2FD	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x1
3059	 2FE	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x80
3060	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x1
3061	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x630
- stack 0: 0x2
3062	 303	PUSH2	0080	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x80
3063	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x630
3064	 307	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3065	 309	ADD		 	 
- stack 0: 0x634
3066	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3067	 30B	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
3068	 30C	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
- stack 0: 0xF0
3069	 30E	SHR		 	 
- stack 1: 0x634
- stack 0: 0x310
3070	 30F	JUMP		 	 
- stack 0: 0x634
3071	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x634
3072	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3073	 312	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
3074	 313	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3100002032AFFF0015BF00000D9001500F3008402B800000135000003AE0000
- stack 0: 0xE0
3075	 315	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3100002
3076	 316	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3100002
- stack 0: 0xFFFF
3077	 319	AND		 	 
- stack 1: 0x634
- stack 0: 0x2
3078	 31A	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0x1
3079	 31C	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x2
3080	 31D	PUSH2	00A0	 	 
- stack 2: 0x634
- stack 1: 0x2
- stack 0: 0xA0
3081	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x634
3082	 321	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3083	 323	ADD		 	 
- stack 0: 0x638
3084	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3085	 325	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
3086	 326	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x32AFFF0015BF00000D9001500F3008402B800000135000003AE000000A0000E
- stack 0: 0xF0
3087	 328	SHR		 	 
- stack 1: 0x638
- stack 0: 0x32A
3088	 329	JUMP		 	 
- stack 0: 0x638
3089	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x638
3090	 32B	PUSH2	0080	 	 
- stack 1: 0x638
- stack 0: 0x80
3091	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x638
- stack 0: 0x2
3092	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3093	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x638
- stack 0: 0x2
3094	 335	PUSH2	00A0	 	 
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0xA0
3095	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
3096	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x638
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3097	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x638
- stack 1: 0x2
- stack 0: 0x2
3098	 33F	SUB		 	 
- stack 1: 0x638
- stack 0: 0x0
3099	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x348
3100	 343	JUMPI		 	 
- stack 0: 0x638
3101	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x638
- stack 0: 0x362
3102	 347	JUMP		 	 
- stack 0: 0x638
3103	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x638
3104	 363	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3105	 365	ADD		 	 
- stack 0: 0x63C
3106	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3107	 367	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x15BF00000D9001500F3008402B800000135000003AE000000A0000E02F10001
3108	 368	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x15BF00000D9001500F3008402B800000135000003AE000000A0000E02F10001
- stack 0: 0xF0
3109	 36A	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x15B
3110	 36B	JUMP		 	 
- stack 0: 0x63C
3111	 15B	JUMPDEST		 ;; __riscvimpl_LUI_ff000eb7	  ;; # instr: lui t4,0xff000(ignore imm)
- stack 0: 0x63C
3112	 15C	PUSH4	ff000000	 	 
- stack 1: 0x63C
- stack 0: 0xFF000000
3113	 161	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0xFF000000
- stack 0: 0x3A0
3114	 164	MSTORE		 	  ;; # store to x29
- stack 0: 0x63C
3115	 165	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3116	 167	ADD		 	 
- stack 0: 0x640
3117	 168	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3118	 169	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD9001500F3008402B800000135000003AE000000A0000E02F1000103100002
3119	 16A	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0xD9001500F3008402B800000135000003AE000000A0000E02F1000103100002
- stack 0: 0xF0
3120	 16C	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD9
3121	 16D	JUMP		 	 
- stack 0: 0x640
3122	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x640
3123	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3124	 DB	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0xD9001500F3008402B800000135000003AE000000A0000E02F1000103100002
3125	 DC	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0xD9001500F3008402B800000135000003AE000000A0000E02F1000103100002
- stack 0: 0xE0
3126	 DE	SHR		 	 
- stack 1: 0x640
- stack 0: 0xD90015
3127	 DF	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0xD90015
- stack 0: 0xFFFF
3128	 E2	AND		 	 
- stack 1: 0x640
- stack 0: 0x15
3129	 E3	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x15
- stack 0: 0x1
3130	 E5	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x15
3131	 E6	PUSH2	0380	 	 
- stack 2: 0x640
- stack 1: 0x15
- stack 0: 0x380
3132	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x640
3133	 EA	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3134	 EC	ADD		 	 
- stack 0: 0x644
3135	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3136	 EE	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xF3008402B800000135000003AE000000A0000E02F1000103100002032AFFEC
3137	 EF	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xF3008402B800000135000003AE000000A0000E02F1000103100002032AFFEC
- stack 0: 0xF0
3138	 F1	SHR		 	 
- stack 1: 0x644
- stack 0: 0xF3
3139	 F2	JUMP		 	 
- stack 0: 0x644
3140	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x644
3141	 F4	PUSH2	0060	 	 
- stack 1: 0x644
- stack 0: 0x60
3142	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x644
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
3143	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000
- stack 0: 0xFFFFFFFF
3144	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0xFF000000
3145	 FE	PUSH2	03A0	 	 
- stack 2: 0x644
- stack 1: 0xFF000000
- stack 0: 0x3A0
3146	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x644
- stack 1: 0xFF000000
- stack 0: 0xFF000000
3147	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0xFF000000
- stack 1: 0xFF000000
- stack 0: 0xFFFFFFFF
3148	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x644
- stack 1: 0xFF000000
- stack 0: 0xFF000000
3149	 108	SUB		 	 
- stack 1: 0x644
- stack 0: 0x0
3150	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x111
3151	 10C	JUMPI		 	 
- stack 0: 0x644
3152	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x644
- stack 0: 0x12B
3153	 110	JUMP		 	 
- stack 0: 0x644
3154	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x644
3155	 12C	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3156	 12E	ADD		 	 
- stack 0: 0x648
3157	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3158	 130	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B800000135000003AE000000A0000E02F1000103100002032AFFEC016EFFE0
3159	 131	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x2B800000135000003AE000000A0000E02F1000103100002032AFFEC016EFFE0
- stack 0: 0xF0
3160	 133	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B8
3161	 134	JUMP		 	 
- stack 0: 0x648
3162	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x648
3163	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3164	 2BA	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x2B800000135000003AE000000A0000E02F1000103100002032AFFEC016EFFE0
3165	 2BB	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x2B800000135000003AE000000A0000E02F1000103100002032AFFEC016EFFE0
- stack 0: 0xE0
3166	 2BD	SHR		 	 
- stack 1: 0x648
- stack 0: 0x2B80000
3167	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x2B80000
- stack 0: 0xFFFF
3168	 2C1	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3169	 2C2	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3170	 2C4	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3171	 2C5	PUSH2	0080	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x80
3172	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x648
3173	 2C9	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3174	 2CB	ADD		 	 
- stack 0: 0x64C
3175	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3176	 2CD	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x135000003AE000000A0000E02F1000103100002032AFFEC016EFFE000D90016
3177	 2CE	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x135000003AE000000A0000E02F1000103100002032AFFEC016EFFE000D90016
- stack 0: 0xF0
3178	 2D0	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x135
3179	 2D1	JUMP		 	 
- stack 0: 0x64C
3180	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x64C
3181	 136	PUSH4	80000000	 	 
- stack 1: 0x64C
- stack 0: 0x80000000
3182	 13B	PUSH2	0020	 	 
- stack 2: 0x64C
- stack 1: 0x80000000
- stack 0: 0x20
3183	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x64C
3184	 13F	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3185	 141	ADD		 	 
- stack 0: 0x650
3186	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3187	 143	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
3188	 144	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
- stack 0: 0xF0
3189	 146	SHR		 	 
- stack 1: 0x650
- stack 0: 0x3AE
3190	 147	JUMP		 	 
- stack 0: 0x650
3191	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3192	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3193	 3B0	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
3194	 3B1	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
- stack 0: 0xE0
3195	 3B3	SHR		 	 
- stack 1: 0x650
- stack 0: 0x3AE0000
3196	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3197	 3B7	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3198	 3B8	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3199	 3BA	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3200	 3BB	POP		 	 
- stack 0: 0x650
3201	 3BC	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3202	 3BE	ADD		 	 
- stack 0: 0x654
3203	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3204	 3C0	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
3205	 3C1	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
- stack 0: 0xF0
3206	 3C3	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA0
3207	 3C4	JUMP		 	 
- stack 0: 0x654
3208	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x654
3209	 A1	PUSH2	0020	 	 
- stack 1: 0x654
- stack 0: 0x20
3210	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x654
- stack 0: 0x80000000
3211	 A5	PUSH1	03	 	 
- stack 2: 0x654
- stack 1: 0x80000000
- stack 0: 0x3
3212	 A7	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3213	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x654
3214	 A9	MLOAD		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
3215	 AA	PUSH1	E0	 	 
- stack 3: 0x654
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
- stack 0: 0xE0
3216	 AC	SHR		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E
3217	 AD	PUSH2	FFFF	 	 
- stack 3: 0x654
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3218	 B0	AND		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3219	 B1	SAR		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3220	 B2	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
3221	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
3222	 B6	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3223	 B8	ADD		 	 
- stack 0: 0x658
3224	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3225	 BA	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
3226	 BB	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
- stack 0: 0xF0
3227	 BD	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2F1
3228	 BE	JUMP		 	 
- stack 0: 0x658
3229	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3230	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3231	 2F3	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
3232	 2F4	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
- stack 0: 0xE0
3233	 2F6	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2F10001
3234	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2F10001
- stack 0: 0xFFFF
3235	 2FA	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3236	 2FB	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3237	 2FD	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3238	 2FE	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3239	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x0
3240	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x1
3241	 303	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3242	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3243	 307	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3244	 309	ADD		 	 
- stack 0: 0x65C
3245	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3246	 30B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
3247	 30C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
- stack 0: 0xF0
3248	 30E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x310
3249	 30F	JUMP		 	 
- stack 0: 0x65C
3250	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3251	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3252	 312	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
3253	 313	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
- stack 0: 0xE0
3254	 315	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x3100002
3255	 316	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x3100002
- stack 0: 0xFFFF
3256	 319	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3257	 31A	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3258	 31C	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3259	 31D	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3260	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3261	 321	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3262	 323	ADD		 	 
- stack 0: 0x660
3263	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3264	 325	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
3265	 326	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
- stack 0: 0xF0
3266	 328	SHR		 	 
- stack 1: 0x660
- stack 0: 0x32A
3267	 329	JUMP		 	 
- stack 0: 0x660
3268	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3269	 32B	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3270	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x1
3271	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3272	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x1
3273	 335	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xA0
3274	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3275	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3276	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3277	 33F	SUB		 	 
- stack 1: 0x660
- stack 0: 0x1
3278	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x348
3279	 343	JUMPI		 	 
- stack 0: 0x660
3280	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x660
3281	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3282	 34A	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
3283	 34B	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
- stack 0: 0xE0
3284	 34D	SHR		 	 
- stack 1: 0x660
- stack 0: 0x32AFFEC
3285	 34E	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x32AFFEC
- stack 0: 0xFFFF
3286	 351	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFEC
3287	 352	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFEC
- stack 0: 0x1
3288	 354	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3289	 355	ADD		 	 
- stack 0: 0x64C
3290	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFF
3291	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x64C
3292	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3293	 35D	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x135000003AE000000A0000E02F1000103100002032AFFEC016EFFE000D90016
3294	 35E	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x135000003AE000000A0000E02F1000103100002032AFFEC016EFFE000D90016
- stack 0: 0xF0
3295	 360	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x135
3296	 361	JUMP		 	 
- stack 0: 0x64C
3297	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x64C
3298	 136	PUSH4	80000000	 	 
- stack 1: 0x64C
- stack 0: 0x80000000
3299	 13B	PUSH2	0020	 	 
- stack 2: 0x64C
- stack 1: 0x80000000
- stack 0: 0x20
3300	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x64C
3301	 13F	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3302	 141	ADD		 	 
- stack 0: 0x650
3303	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3304	 143	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
3305	 144	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
- stack 0: 0xF0
3306	 146	SHR		 	 
- stack 1: 0x650
- stack 0: 0x3AE
3307	 147	JUMP		 	 
- stack 0: 0x650
3308	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x650
3309	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3310	 3B0	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
3311	 3B1	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x3AE000000A0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C
- stack 0: 0xE0
3312	 3B3	SHR		 	 
- stack 1: 0x650
- stack 0: 0x3AE0000
3313	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3314	 3B7	AND		 	 
- stack 1: 0x650
- stack 0: 0x0
3315	 3B8	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x1
3316	 3BA	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x0
3317	 3BB	POP		 	 
- stack 0: 0x650
3318	 3BC	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3319	 3BE	ADD		 	 
- stack 0: 0x654
3320	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3321	 3C0	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
3322	 3C1	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
- stack 0: 0xF0
3323	 3C3	SHR		 	 
- stack 1: 0x654
- stack 0: 0xA0
3324	 3C4	JUMP		 	 
- stack 0: 0x654
3325	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x654
3326	 A1	PUSH2	0020	 	 
- stack 1: 0x654
- stack 0: 0x20
3327	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x654
- stack 0: 0x80000000
3328	 A5	PUSH1	03	 	 
- stack 2: 0x654
- stack 1: 0x80000000
- stack 0: 0x3
3329	 A7	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
3330	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0x654
3331	 A9	MLOAD		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
3332	 AA	PUSH1	E0	 	 
- stack 3: 0x654
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E02F1000103100002032AFFEC016EFFE000D9001600F3005C02B80000
- stack 0: 0xE0
3333	 AC	SHR		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xA0000E
3334	 AD	PUSH2	FFFF	 	 
- stack 3: 0x654
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 1: 0xA0000E
- stack 0: 0xFFFF
3335	 B0	AND		 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000000
- stack 0: 0xE
3336	 B1	SAR		 	 
- stack 1: 0x654
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3337	 B2	PUSH2	0060	 	 
- stack 2: 0x654
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0x60
3338	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x654
3339	 B6	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3340	 B8	ADD		 	 
- stack 0: 0x658
3341	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3342	 BA	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
3343	 BB	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
- stack 0: 0xF0
3344	 BD	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2F1
3345	 BE	JUMP		 	 
- stack 0: 0x658
3346	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x658
3347	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3348	 2F3	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
3349	 2F4	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x2F1000103100002032AFFEC016EFFE000D9001600F3005C02B8000001350000
- stack 0: 0xE0
3350	 2F6	SHR		 	 
- stack 1: 0x658
- stack 0: 0x2F10001
3351	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x2F10001
- stack 0: 0xFFFF
3352	 2FA	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3353	 2FB	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3354	 2FD	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3355	 2FE	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3356	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3357	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x2
3358	 303	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x80
3359	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3360	 307	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3361	 309	ADD		 	 
- stack 0: 0x65C
3362	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3363	 30B	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
3364	 30C	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
- stack 0: 0xF0
3365	 30E	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x310
3366	 30F	JUMP		 	 
- stack 0: 0x65C
3367	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3368	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3369	 312	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
3370	 313	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x3100002032AFFEC016EFFE000D9001600F3005C02B800000135000001810001
- stack 0: 0xE0
3371	 315	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x3100002
3372	 316	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x3100002
- stack 0: 0xFFFF
3373	 319	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3374	 31A	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3375	 31C	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3376	 31D	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3377	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3378	 321	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3379	 323	ADD		 	 
- stack 0: 0x660
3380	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3381	 325	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
3382	 326	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x32AFFEC016EFFE000D9001600F3005C02B80000013500000181000103AE0000
- stack 0: 0xF0
3383	 328	SHR		 	 
- stack 1: 0x660
- stack 0: 0x32A
3384	 329	JUMP		 	 
- stack 0: 0x660
3385	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x660
3386	 32B	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3387	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x2
3388	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3389	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x2
3390	 335	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xA0
3391	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3392	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3393	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3394	 33F	SUB		 	 
- stack 1: 0x660
- stack 0: 0x0
3395	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x348
3396	 343	JUMPI		 	 
- stack 0: 0x660
3397	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x660
- stack 0: 0x362
3398	 347	JUMP		 	 
- stack 0: 0x660
3399	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x660
3400	 363	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3401	 365	ADD		 	 
- stack 0: 0x664
3402	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3403	 367	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x16EFFE000D9001600F3005C02B80000013500000181000103AE000003AE0000
3404	 368	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x16EFFE000D9001600F3005C02B80000013500000181000103AE000003AE0000
- stack 0: 0xF0
3405	 36A	SHR		 	 
- stack 1: 0x664
- stack 0: 0x16E
3406	 36B	JUMP		 	 
- stack 0: 0x664
3407	 16E	JUMPDEST		 ;; __riscvimpl_LUI_fffe0eb7	  ;; # instr: lui t4,0xfffe0(ignore imm)
- stack 0: 0x664
3408	 16F	PUSH4	fffe0000	 	 
- stack 1: 0x664
- stack 0: 0xFFFE0000
3409	 174	PUSH2	03A0	 	 
- stack 2: 0x664
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
3410	 177	MSTORE		 	  ;; # store to x29
- stack 0: 0x664
3411	 178	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3412	 17A	ADD		 	 
- stack 0: 0x668
3413	 17B	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3414	 17C	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD9001600F3005C02B80000013500000181000103AE000003AE000000A0001F
3415	 17D	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xD9001600F3005C02B80000013500000181000103AE000003AE000000A0001F
- stack 0: 0xF0
3416	 17F	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD9
3417	 180	JUMP		 	 
- stack 0: 0x668
3418	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x668
3419	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3420	 DB	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xD9001600F3005C02B80000013500000181000103AE000003AE000000A0001F
3421	 DC	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0xD9001600F3005C02B80000013500000181000103AE000003AE000000A0001F
- stack 0: 0xE0
3422	 DE	SHR		 	 
- stack 1: 0x668
- stack 0: 0xD90016
3423	 DF	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0xD90016
- stack 0: 0xFFFF
3424	 E2	AND		 	 
- stack 1: 0x668
- stack 0: 0x16
3425	 E3	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x16
- stack 0: 0x1
3426	 E5	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x16
3427	 E6	PUSH2	0380	 	 
- stack 2: 0x668
- stack 1: 0x16
- stack 0: 0x380
3428	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x668
3429	 EA	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3430	 EC	ADD		 	 
- stack 0: 0x66C
3431	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3432	 EE	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xF3005C02B80000013500000181000103AE000003AE000000A0001F02F10001
3433	 EF	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xF3005C02B80000013500000181000103AE000003AE000000A0001F02F10001
- stack 0: 0xF0
3434	 F1	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xF3
3435	 F2	JUMP		 	 
- stack 0: 0x66C
3436	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x66C
3437	 F4	PUSH2	0060	 	 
- stack 1: 0x66C
- stack 0: 0x60
3438	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x66C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
3439	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x66C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000
- stack 0: 0xFFFFFFFF
3440	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x66C
- stack 0: 0xFFFE0000
3441	 FE	PUSH2	03A0	 	 
- stack 2: 0x66C
- stack 1: 0xFFFE0000
- stack 0: 0x3A0
3442	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x66C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
3443	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x66C
- stack 2: 0xFFFE0000
- stack 1: 0xFFFE0000
- stack 0: 0xFFFFFFFF
3444	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x66C
- stack 1: 0xFFFE0000
- stack 0: 0xFFFE0000
3445	 108	SUB		 	 
- stack 1: 0x66C
- stack 0: 0x0
3446	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x111
3447	 10C	JUMPI		 	 
- stack 0: 0x66C
3448	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x66C
- stack 0: 0x12B
3449	 110	JUMP		 	 
- stack 0: 0x66C
3450	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x66C
3451	 12C	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3452	 12E	ADD		 	 
- stack 0: 0x670
3453	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3454	 130	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2B80000013500000181000103AE000003AE000000A0001F02F1000103100002
3455	 131	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x2B80000013500000181000103AE000003AE000000A0001F02F1000103100002
- stack 0: 0xF0
3456	 133	SHR		 	 
- stack 1: 0x670
- stack 0: 0x2B8
3457	 134	JUMP		 	 
- stack 0: 0x670
3458	 2B8	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x670
3459	 2B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3460	 2BA	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x2B80000013500000181000103AE000003AE000000A0001F02F1000103100002
3461	 2BB	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x2B80000013500000181000103AE000003AE000000A0001F02F1000103100002
- stack 0: 0xE0
3462	 2BD	SHR		 	 
- stack 1: 0x670
- stack 0: 0x2B80000
3463	 2BE	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x2B80000
- stack 0: 0xFFFF
3464	 2C1	AND		 	 
- stack 1: 0x670
- stack 0: 0x0
3465	 2C2	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x1
3466	 2C4	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x0
3467	 2C5	PUSH2	0080	 	 
- stack 2: 0x670
- stack 1: 0x0
- stack 0: 0x80
3468	 2C8	MSTORE		 	  ;; # store to x4
- stack 0: 0x670
3469	 2C9	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3470	 2CB	ADD		 	 
- stack 0: 0x674
3471	 2CC	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3472	 2CD	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x13500000181000103AE000003AE000000A0001F02F1000103100002032AFFE4
3473	 2CE	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x13500000181000103AE000003AE000000A0001F02F1000103100002032AFFE4
- stack 0: 0xF0
3474	 2D0	SHR		 	 
- stack 1: 0x674
- stack 0: 0x135
3475	 2D1	JUMP		 	 
- stack 0: 0x674
3476	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x674
3477	 136	PUSH4	80000000	 	 
- stack 1: 0x674
- stack 0: 0x80000000
3478	 13B	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0x80000000
- stack 0: 0x20
3479	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x674
3480	 13F	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3481	 141	ADD		 	 
- stack 0: 0x678
3482	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3483	 143	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
3484	 144	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
- stack 0: 0xF0
3485	 146	SHR		 	 
- stack 1: 0x678
- stack 0: 0x181
3486	 147	JUMP		 	 
- stack 0: 0x678
3487	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x678
3488	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3489	 183	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
3490	 184	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
- stack 0: 0xE0
3491	 186	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1810001
3492	 187	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1810001
- stack 0: 0xFFFF
3493	 18A	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3494	 18B	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3495	 18D	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3496	 18E	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x20
3497	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80000000
3498	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x678
- stack 0: 0x80000001
3499	 193	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x80000001
- stack 0: 0x20
3500	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x678
3501	 197	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3502	 199	ADD		 	 
- stack 0: 0x67C
3503	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3504	 19B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
3505	 19C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
- stack 0: 0xF0
3506	 19E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3AE
3507	 19F	JUMP		 	 
- stack 0: 0x67C
3508	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x67C
3509	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3510	 3B0	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
3511	 3B1	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
- stack 0: 0xE0
3512	 3B3	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3AE0000
3513	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3514	 3B7	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3515	 3B8	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
3516	 3BA	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3517	 3BB	POP		 	 
- stack 0: 0x67C
3518	 3BC	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3519	 3BE	ADD		 	 
- stack 0: 0x680
3520	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3521	 3C0	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
3522	 3C1	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
- stack 0: 0xF0
3523	 3C3	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3AE
3524	 3C4	JUMP		 	 
- stack 0: 0x680
3525	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x680
3526	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3527	 3B0	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
3528	 3B1	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
- stack 0: 0xE0
3529	 3B3	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3AE0000
3530	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3531	 3B7	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
3532	 3B8	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
3533	 3BA	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
3534	 3BB	POP		 	 
- stack 0: 0x680
3535	 3BC	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3536	 3BE	ADD		 	 
- stack 0: 0x684
3537	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3538	 3C0	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
3539	 3C1	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
- stack 0: 0xF0
3540	 3C3	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
3541	 3C4	JUMP		 	 
- stack 0: 0x684
3542	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x684
3543	 A1	PUSH2	0020	 	 
- stack 1: 0x684
- stack 0: 0x20
3544	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x684
- stack 0: 0x80000001
3545	 A5	PUSH1	03	 	 
- stack 2: 0x684
- stack 1: 0x80000001
- stack 0: 0x3
3546	 A7	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
3547	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x684
3548	 A9	MLOAD		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
3549	 AA	PUSH1	E0	 	 
- stack 3: 0x684
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
- stack 0: 0xE0
3550	 AC	SHR		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F
3551	 AD	PUSH2	FFFF	 	 
- stack 3: 0x684
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3552	 B0	AND		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
3553	 B1	SAR		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3554	 B2	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
3555	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x684
3556	 B6	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3557	 B8	ADD		 	 
- stack 0: 0x688
3558	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3559	 BA	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
3560	 BB	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
- stack 0: 0xF0
3561	 BD	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2F1
3562	 BE	JUMP		 	 
- stack 0: 0x688
3563	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x688
3564	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3565	 2F3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
3566	 2F4	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
- stack 0: 0xE0
3567	 2F6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2F10001
3568	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x2F10001
- stack 0: 0xFFFF
3569	 2FA	AND		 	 
- stack 1: 0x688
- stack 0: 0x1
3570	 2FB	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
3571	 2FD	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x1
3572	 2FE	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
3573	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x0
3574	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x688
- stack 0: 0x1
3575	 303	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
3576	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x688
3577	 307	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3578	 309	ADD		 	 
- stack 0: 0x68C
3579	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3580	 30B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
3581	 30C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
- stack 0: 0xF0
3582	 30E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x310
3583	 30F	JUMP		 	 
- stack 0: 0x68C
3584	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x68C
3585	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3586	 312	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
3587	 313	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
- stack 0: 0xE0
3588	 315	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3100002
3589	 316	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3100002
- stack 0: 0xFFFF
3590	 319	AND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3591	 31A	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x1
3592	 31C	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3593	 31D	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xA0
3594	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x68C
3595	 321	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3596	 323	ADD		 	 
- stack 0: 0x690
3597	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3598	 325	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
3599	 326	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
- stack 0: 0xF0
3600	 328	SHR		 	 
- stack 1: 0x690
- stack 0: 0x32A
3601	 329	JUMP		 	 
- stack 0: 0x690
3602	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x690
3603	 32B	PUSH2	0080	 	 
- stack 1: 0x690
- stack 0: 0x80
3604	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x690
- stack 0: 0x1
3605	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3606	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x1
3607	 335	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0xA0
3608	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x2
3609	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3610	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x2
3611	 33F	SUB		 	 
- stack 1: 0x690
- stack 0: 0x1
3612	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x690
- stack 1: 0x1
- stack 0: 0x348
3613	 343	JUMPI		 	 
- stack 0: 0x690
3614	 348	JUMPDEST		 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x690
3615	 349	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3616	 34A	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
3617	 34B	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
- stack 0: 0xE0
3618	 34D	SHR		 	 
- stack 1: 0x690
- stack 0: 0x32AFFE4
3619	 34E	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x32AFFE4
- stack 0: 0xFFFF
3620	 351	AND		 	 
- stack 1: 0x690
- stack 0: 0xFFE4
3621	 352	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xFFE4
- stack 0: 0x1
3622	 354	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3623	 355	ADD		 	 
- stack 0: 0x674
3624	 356	PUSH4	FFFFFFFF	 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFF
3625	 35B	AND		 	  ;; # mask to 32 bits
- stack 0: 0x674
3626	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3627	 35D	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x13500000181000103AE000003AE000000A0001F02F1000103100002032AFFE4
3628	 35E	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x13500000181000103AE000003AE000000A0001F02F1000103100002032AFFE4
- stack 0: 0xF0
3629	 360	SHR		 	 
- stack 1: 0x674
- stack 0: 0x135
3630	 361	JUMP		 	 
- stack 0: 0x674
3631	 135	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x674
3632	 136	PUSH4	80000000	 	 
- stack 1: 0x674
- stack 0: 0x80000000
3633	 13B	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0x80000000
- stack 0: 0x20
3634	 13E	MSTORE		 	  ;; # store to x1
- stack 0: 0x674
3635	 13F	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3636	 141	ADD		 	 
- stack 0: 0x678
3637	 142	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3638	 143	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
3639	 144	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
- stack 0: 0xF0
3640	 146	SHR		 	 
- stack 1: 0x678
- stack 0: 0x181
3641	 147	JUMP		 	 
- stack 0: 0x678
3642	 181	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x678
3643	 182	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3644	 183	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
3645	 184	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x181000103AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF
- stack 0: 0xE0
3646	 186	SHR		 	 
- stack 1: 0x678
- stack 0: 0x1810001
3647	 187	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x1810001
- stack 0: 0xFFFF
3648	 18A	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3649	 18B	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3650	 18D	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3651	 18E	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x20
3652	 191	MLOAD		 	  ;; # read from x1
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80000000
3653	 192	ADD		 	  ;; # ADDI 1
- stack 1: 0x678
- stack 0: 0x80000001
3654	 193	PUSH2	0020	 	 
- stack 2: 0x678
- stack 1: 0x80000001
- stack 0: 0x20
3655	 196	MSTORE		 	  ;; # store to x1
- stack 0: 0x678
3656	 197	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3657	 199	ADD		 	 
- stack 0: 0x67C
3658	 19A	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3659	 19B	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
3660	 19C	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
- stack 0: 0xF0
3661	 19E	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3AE
3662	 19F	JUMP		 	 
- stack 0: 0x67C
3663	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x67C
3664	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3665	 3B0	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
3666	 3B1	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x3AE000003AE000000A0001F02F1000103100002032AFFE400BFFFFF00D90017
- stack 0: 0xE0
3667	 3B3	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x3AE0000
3668	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3669	 3B7	AND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3670	 3B8	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x0
- stack 0: 0x1
3671	 3BA	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x0
3672	 3BB	POP		 	 
- stack 0: 0x67C
3673	 3BC	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3674	 3BE	ADD		 	 
- stack 0: 0x680
3675	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3676	 3C0	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
3677	 3C1	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
- stack 0: 0xF0
3678	 3C3	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3AE
3679	 3C4	JUMP		 	 
- stack 0: 0x680
3680	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x680
3681	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3682	 3B0	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
3683	 3B1	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x3AE000000A0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C
- stack 0: 0xE0
3684	 3B3	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3AE0000
3685	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x3AE0000
- stack 0: 0xFFFF
3686	 3B7	AND		 	 
- stack 1: 0x680
- stack 0: 0x0
3687	 3B8	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x1
3688	 3BA	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x0
3689	 3BB	POP		 	 
- stack 0: 0x680
3690	 3BC	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3691	 3BE	ADD		 	 
- stack 0: 0x684
3692	 3BF	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3693	 3C0	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
3694	 3C1	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
- stack 0: 0xF0
3695	 3C3	SHR		 	 
- stack 1: 0x684
- stack 0: 0xA0
3696	 3C4	JUMP		 	 
- stack 0: 0x684
3697	 A0	JUMPDEST		 ;; __riscvimpl_SRAI_3_1_0	  ;; # instr: srai gp,ra,1024(ignore imm)
- stack 0: 0x684
3698	 A1	PUSH2	0020	 	 
- stack 1: 0x684
- stack 0: 0x20
3699	 A4	MLOAD		 	  ;; # read from x1
- stack 1: 0x684
- stack 0: 0x80000001
3700	 A5	PUSH1	03	 	 
- stack 2: 0x684
- stack 1: 0x80000001
- stack 0: 0x3
3701	 A7	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
3702	 A8	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x684
3703	 A9	MLOAD		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
3704	 AA	PUSH1	E0	 	 
- stack 3: 0x684
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F02F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F
- stack 0: 0xE0
3705	 AC	SHR		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0xA0001F
3706	 AD	PUSH2	FFFF	 	 
- stack 3: 0x684
- stack 2: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 1: 0xA0001F
- stack 0: 0xFFFF
3707	 B0	AND		 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80000001
- stack 0: 0x1F
3708	 B1	SAR		 	 
- stack 1: 0x684
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3709	 B2	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x60
3710	 B5	MSTORE		 	  ;; # store to x3
- stack 0: 0x684
3711	 B6	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3712	 B8	ADD		 	 
- stack 0: 0x688
3713	 B9	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3714	 BA	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
3715	 BB	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
- stack 0: 0xF0
3716	 BD	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2F1
3717	 BE	JUMP		 	 
- stack 0: 0x688
3718	 2F1	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x688
3719	 2F2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3720	 2F3	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
3721	 2F4	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x2F1000103100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF0000
- stack 0: 0xE0
3722	 2F6	SHR		 	 
- stack 1: 0x688
- stack 0: 0x2F10001
3723	 2F7	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x2F10001
- stack 0: 0xFFFF
3724	 2FA	AND		 	 
- stack 1: 0x688
- stack 0: 0x1
3725	 2FB	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
3726	 2FD	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x1
3727	 2FE	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x80
3728	 301	MLOAD		 	  ;; # read from x4
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x1
3729	 302	ADD		 	  ;; # ADDI 4
- stack 1: 0x688
- stack 0: 0x2
3730	 303	PUSH2	0080	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x80
3731	 306	MSTORE		 	  ;; # store to x4
- stack 0: 0x688
3732	 307	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3733	 309	ADD		 	 
- stack 0: 0x68C
3734	 30A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3735	 30B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
3736	 30C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
- stack 0: 0xF0
3737	 30E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x310
3738	 30F	JUMP		 	 
- stack 0: 0x68C
3739	 310	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x68C
3740	 311	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3741	 312	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
3742	 313	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x3100002032AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D90018
- stack 0: 0xE0
3743	 315	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x3100002
3744	 316	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x3100002
- stack 0: 0xFFFF
3745	 319	AND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3746	 31A	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0x1
3747	 31C	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0x2
3748	 31D	PUSH2	00A0	 	 
- stack 2: 0x68C
- stack 1: 0x2
- stack 0: 0xA0
3749	 320	MSTORE		 	  ;; # store to x5
- stack 0: 0x68C
3750	 321	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3751	 323	ADD		 	 
- stack 0: 0x690
3752	 324	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3753	 325	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
3754	 326	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x32AFFE400BFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C
- stack 0: 0xF0
3755	 328	SHR		 	 
- stack 1: 0x690
- stack 0: 0x32A
3756	 329	JUMP		 	 
- stack 0: 0x690
3757	 32A	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x690
3758	 32B	PUSH2	0080	 	 
- stack 1: 0x690
- stack 0: 0x80
3759	 32E	MLOAD		 	  ;; # read from x4
- stack 1: 0x690
- stack 0: 0x2
3760	 32F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3761	 334	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0x2
3762	 335	PUSH2	00A0	 	 
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0xA0
3763	 338	MLOAD		 	  ;; # read from x5
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x2
3764	 339	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3765	 33E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0x2
- stack 0: 0x2
3766	 33F	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
3767	 340	PUSH2	0348	 ;; _neq_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x348
3768	 343	JUMPI		 	 
- stack 0: 0x690
3769	 344	PUSH2	0362	 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 1: 0x690
- stack 0: 0x362
3770	 347	JUMP		 	 
- stack 0: 0x690
3771	 362	JUMPDEST		 ;; _neq_after_f9dac8e5a108a252abfbe2b42f2fb2f8150556fdfe54b2aa4b990cba992ddc1d	 
- stack 0: 0x690
3772	 363	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3773	 365	ADD		 	 
- stack 0: 0x694
3774	 366	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3775	 367	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xBFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C00860021
3776	 368	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xBFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C00860021
- stack 0: 0xF0
3777	 36A	SHR		 	 
- stack 1: 0x694
- stack 0: 0xBF
3778	 36B	JUMP		 	 
- stack 0: 0x694
3779	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x694
3780	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3781	 C1	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xBFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C00860021
3782	 C2	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xBFFFFF00D9001700F3002C03C5001F00BF000000D900180276001C00860021
- stack 0: 0xE0
3783	 C4	SHR		 	 
- stack 1: 0x694
- stack 0: 0xBFFFFF
3784	 C5	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xBFFFFF
- stack 0: 0xFFFF
3785	 C8	AND		 	 
- stack 1: 0x694
- stack 0: 0xFFFF
3786	 C9	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0xFFFF
- stack 0: 0x1
3787	 CB	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3788	 CC	PUSH2	03A0	 	 
- stack 2: 0x694
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
3789	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x694
3790	 D0	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3791	 D2	ADD		 	 
- stack 0: 0x698
3792	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3793	 D4	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD9001700F3002C03C5001F00BF000000D900180276001C0086002103E20014
3794	 D5	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xD9001700F3002C03C5001F00BF000000D900180276001C0086002103E20014
- stack 0: 0xF0
3795	 D7	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD9
3796	 D8	JUMP		 	 
- stack 0: 0x698
3797	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x698
3798	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3799	 DB	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xD9001700F3002C03C5001F00BF000000D900180276001C0086002103E20014
3800	 DC	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0xD9001700F3002C03C5001F00BF000000D900180276001C0086002103E20014
- stack 0: 0xE0
3801	 DE	SHR		 	 
- stack 1: 0x698
- stack 0: 0xD90017
3802	 DF	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0xD90017
- stack 0: 0xFFFF
3803	 E2	AND		 	 
- stack 1: 0x698
- stack 0: 0x17
3804	 E3	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x17
- stack 0: 0x1
3805	 E5	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x17
3806	 E6	PUSH2	0380	 	 
- stack 2: 0x698
- stack 1: 0x17
- stack 0: 0x380
3807	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x698
3808	 EA	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3809	 EC	ADD		 	 
- stack 0: 0x69C
3810	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3811	 EE	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0xF3002C03C5001F00BF000000D900180276001C0086002103E2001400BF0000
3812	 EF	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0xF3002C03C5001F00BF000000D900180276001C0086002103E2001400BF0000
- stack 0: 0xF0
3813	 F1	SHR		 	 
- stack 1: 0x69C
- stack 0: 0xF3
3814	 F2	JUMP		 	 
- stack 0: 0x69C
3815	 F3	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a8(ignore imm)
- stack 0: 0x69C
3816	 F4	PUSH2	0060	 	 
- stack 1: 0x69C
- stack 0: 0x60
3817	 F7	MLOAD		 	  ;; # read from x3
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3818	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3819	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0xFFFFFFFF
3820	 FE	PUSH2	03A0	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
3821	 101	MLOAD		 	  ;; # read from x29
- stack 2: 0x69C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3822	 102	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
3823	 107	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
3824	 108	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x0
3825	 109	PUSH2	0111	 ;; _neq_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x111
3826	 10C	JUMPI		 	 
- stack 0: 0x69C
3827	 10D	PUSH2	012B	 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 1: 0x69C
- stack 0: 0x12B
3828	 110	JUMP		 	 
- stack 0: 0x69C
3829	 12B	JUMPDEST		 ;; _neq_after_67346000ffd4bac74a5e5f841e65a3aa74bede7e5f3d1fff9f43ec09dd1d39ec	 
- stack 0: 0x69C
3830	 12C	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3831	 12E	ADD		 	 
- stack 0: 0x6A0
3832	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3833	 130	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3C5001F00BF000000D900180276001C0086002103E2001400BF000000D90019
3834	 131	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3C5001F00BF000000D900180276001C0086002103E2001400BF000000D90019
- stack 0: 0xF0
3835	 133	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3C5
3836	 134	JUMP		 	 
- stack 0: 0x6A0
3837	 3C5	JUMPDEST		 ;; __riscvimpl_SRAI_1_0_0	  ;; # instr: srai ra,zero,1055(ignore imm)
- stack 0: 0x6A0
3838	 3C6	PUSH1	00	 	 
- stack 1: 0x6A0
- stack 0: 0x0
3839	 3C8	PUSH1	03	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3
3840	 3CA	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3841	 3CB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x6A0
3842	 3CC	MLOAD		 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3C5001F00BF000000D900180276001C0086002103E2001400BF000000D90019
3843	 3CD	PUSH1	E0	 	 
- stack 3: 0x6A0
- stack 2: 0x0
- stack 1: 0x3C5001F00BF000000D900180276001C0086002103E2001400BF000000D90019
- stack 0: 0xE0
3844	 3CF	SHR		 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3C5001F
3845	 3D0	PUSH2	FFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x0
- stack 1: 0x3C5001F
- stack 0: 0xFFFF
3846	 3D3	AND		 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1F
3847	 3D4	SAR		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3848	 3D5	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x20
3849	 3D8	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
3850	 3D9	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3851	 3DB	ADD		 	 
- stack 0: 0x6A4
3852	 3DC	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3853	 3DD	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xBF000000D900180276001C0086002103E2001400BF000000D9001903FE0008
3854	 3DE	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xBF000000D900180276001C0086002103E2001400BF000000D9001903FE0008
- stack 0: 0xF0
3855	 3E0	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xBF
3856	 3E1	JUMP		 	 
- stack 0: 0x6A4
3857	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6A4
3858	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3859	 C1	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xBF000000D900180276001C0086002103E2001400BF000000D9001903FE0008
3860	 C2	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0xBF000000D900180276001C0086002103E2001400BF000000D9001903FE0008
- stack 0: 0xE0
3861	 C4	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xBF0000
3862	 C5	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xBF0000
- stack 0: 0xFFFF
3863	 C8	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
3864	 C9	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
3865	 CB	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
3866	 CC	PUSH2	03A0	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x3A0
3867	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x6A4
3868	 D0	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3869	 D2	ADD		 	 
- stack 0: 0x6A8
3870	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3871	 D4	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xD900180276001C0086002103E2001400BF000000D9001903FE0008043E0018
3872	 D5	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xD900180276001C0086002103E2001400BF000000D9001903FE0008043E0018
- stack 0: 0xF0
3873	 D7	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xD9
3874	 D8	JUMP		 	 
- stack 0: 0x6A8
3875	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6A8
3876	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3877	 DB	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xD900180276001C0086002103E2001400BF000000D9001903FE0008043E0018
3878	 DC	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xD900180276001C0086002103E2001400BF000000D9001903FE0008043E0018
- stack 0: 0xE0
3879	 DE	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xD90018
3880	 DF	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xD90018
- stack 0: 0xFFFF
3881	 E2	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x18
3882	 E3	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x18
- stack 0: 0x1
3883	 E5	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x18
3884	 E6	PUSH2	0380	 	 
- stack 2: 0x6A8
- stack 1: 0x18
- stack 0: 0x380
3885	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x6A8
3886	 EA	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3887	 EC	ADD		 	 
- stack 0: 0x6AC
3888	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3889	 EE	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x276001C0086002103E2001400BF000000D9001903FE0008043E001800210000
3890	 EF	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x276001C0086002103E2001400BF000000D9001903FE0008043E001800210000
- stack 0: 0xF0
3891	 F1	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x276
3892	 F2	JUMP		 	 
- stack 0: 0x6AC
3893	 276	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,130(ignore imm)
- stack 0: 0x6AC
3894	 277	PUSH2	0020	 	 
- stack 1: 0x6AC
- stack 0: 0x20
3895	 27A	MLOAD		 	  ;; # read from x1
- stack 1: 0x6AC
- stack 0: 0x0
3896	 27B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3897	 280	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x0
3898	 281	PUSH2	03A0	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x3A0
3899	 284	MLOAD		 	  ;; # read from x29
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x0
3900	 285	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3901	 28A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x0
3902	 28B	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3903	 28C	PUSH2	0294	 ;; _neq_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x294
3904	 28F	JUMPI		 	 
- stack 0: 0x6AC
3905	 290	PUSH2	02AE	 ;; _neq_after_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 1: 0x6AC
- stack 0: 0x2AE
3906	 293	JUMP		 	 
- stack 0: 0x6AC
3907	 2AE	JUMPDEST		 ;; _neq_after_254b25d83b408dc1235e7d508df96df271a7a6c75ee664cfda2ec1701c9bebf0	 
- stack 0: 0x6AC
3908	 2AF	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3909	 2B1	ADD		 	 
- stack 0: 0x6B0
3910	 2B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3911	 2B3	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x86002103E2001400BF000000D9001903FE0008043E00180021000000340708
3912	 2B4	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x86002103E2001400BF000000D9001903FE0008043E00180021000000340708
- stack 0: 0xF0
3913	 2B6	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x86
3914	 2B7	JUMP		 	 
- stack 0: 0x6B0
3915	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6B0
3916	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3917	 88	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x86002103E2001400BF000000D9001903FE0008043E00180021000000340708
3918	 89	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x86002103E2001400BF000000D9001903FE0008043E00180021000000340708
- stack 0: 0xE0
3919	 8B	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x860021
3920	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x860021
- stack 0: 0xFFFF
3921	 8F	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x21
3922	 90	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x1
3923	 92	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x21
3924	 93	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x20
3925	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B0
3926	 97	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3927	 99	ADD		 	 
- stack 0: 0x6B4
3928	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3929	 9B	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3E2001400BF000000D9001903FE0008043E0018002100000034070800530042
3930	 9C	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3E2001400BF000000D9001903FE0008043E0018002100000034070800530042
- stack 0: 0xF0
3931	 9E	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3E2
3932	 9F	JUMP		 	 
- stack 0: 0x6B4
3933	 3E2	JUMPDEST		 ;; __riscvimpl_SRAI_0_1_0	  ;; # instr: srai zero,ra,1044(ignore imm)
- stack 0: 0x6B4
3934	 3E3	PUSH2	0020	 	 
- stack 1: 0x6B4
- stack 0: 0x20
3935	 3E6	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B4
- stack 0: 0x21
3936	 3E7	PUSH1	03	 	 
- stack 2: 0x6B4
- stack 1: 0x21
- stack 0: 0x3
3937	 3E9	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x21
3938	 3EA	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B4
- stack 1: 0x21
- stack 0: 0x6B4
3939	 3EB	MLOAD		 	 
- stack 2: 0x6B4
- stack 1: 0x21
- stack 0: 0x3E2001400BF000000D9001903FE0008043E0018002100000034070800530042
3940	 3EC	PUSH1	E0	 	 
- stack 3: 0x6B4
- stack 2: 0x21
- stack 1: 0x3E2001400BF000000D9001903FE0008043E0018002100000034070800530042
- stack 0: 0xE0
3941	 3EE	SHR		 	 
- stack 2: 0x6B4
- stack 1: 0x21
- stack 0: 0x3E20014
3942	 3EF	PUSH2	FFFF	 	 
- stack 3: 0x6B4
- stack 2: 0x21
- stack 1: 0x3E20014
- stack 0: 0xFFFF
3943	 3F2	AND		 	 
- stack 2: 0x6B4
- stack 1: 0x21
- stack 0: 0x14
3944	 3F3	SAR		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3945	 3F4	POP		 	 
- stack 0: 0x6B4
3946	 3F5	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3947	 3F7	ADD		 	 
- stack 0: 0x6B8
3948	 3F8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3949	 3F9	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xBF000000D9001903FE0008043E001800210000003407080053004200660000
3950	 3FA	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xBF000000D9001903FE0008043E001800210000003407080053004200660000
- stack 0: 0xF0
3951	 3FC	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xBF
3952	 3FD	JUMP		 	 
- stack 0: 0x6B8
3953	 BF	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6B8
3954	 C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3955	 C1	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xBF000000D9001903FE0008043E001800210000003407080053004200660000
3956	 C2	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xBF000000D9001903FE0008043E001800210000003407080053004200660000
- stack 0: 0xE0
3957	 C4	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xBF0000
3958	 C5	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xBF0000
- stack 0: 0xFFFF
3959	 C8	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
3960	 C9	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x1
3961	 CB	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x0
3962	 CC	PUSH2	03A0	 	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x3A0
3963	 CF	MSTORE		 	  ;; # store to x29
- stack 0: 0x6B8
3964	 D0	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3965	 D2	ADD		 	 
- stack 0: 0x6BC
3966	 D3	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3967	 D4	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0xD9001903FE0008043E001800210000003407080053004200660000047E0001
3968	 D5	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0xD9001903FE0008043E001800210000003407080053004200660000047E0001
- stack 0: 0xF0
3969	 D7	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0xD9
3970	 D8	JUMP		 	 
- stack 0: 0x6BC
3971	 D9	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6BC
3972	 DA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3973	 DB	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0xD9001903FE0008043E001800210000003407080053004200660000047E0001
3974	 DC	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0xD9001903FE0008043E001800210000003407080053004200660000047E0001
- stack 0: 0xE0
3975	 DE	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0xD90019
3976	 DF	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0xD90019
- stack 0: 0xFFFF
3977	 E2	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x19
3978	 E3	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x19
- stack 0: 0x1
3979	 E5	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x19
3980	 E6	PUSH2	0380	 	 
- stack 2: 0x6BC
- stack 1: 0x19
- stack 0: 0x380
3981	 E9	MSTORE		 	  ;; # store to x28
- stack 0: 0x6BC
3982	 EA	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3983	 EC	ADD		 	 
- stack 0: 0x6C0
3984	 ED	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3985	 EE	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3FE0008043E001800210000003407080053004200660000047E000100210000
3986	 EF	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3FE0008043E001800210000003407080053004200660000047E000100210000
- stack 0: 0xF0
3987	 F1	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3FE
3988	 F2	JUMP		 	 
- stack 0: 0x6C0
3989	 3FE	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x6C0
3990	 3FF	PUSH1	00	 	 
- stack 1: 0x6C0
- stack 0: 0x0
3991	 401	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3992	 406	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x0
3993	 407	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x3A0
3994	 40A	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x0
3995	 40B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3996	 410	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x0
3997	 411	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3998	 412	PUSH2	041A	 ;; _neq_bc8e1296288c1d566fa5cb8e0e663861e57d77f47acd980367b74f96bc8ceb02	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x41A
3999	 415	JUMPI		 	 
- stack 0: 0x6C0
4000	 416	PUSH2	0434	 ;; _neq_after_bc8e1296288c1d566fa5cb8e0e663861e57d77f47acd980367b74f96bc8ceb02	 
- stack 1: 0x6C0
- stack 0: 0x434
4001	 419	JUMP		 	 
- stack 0: 0x6C0
4002	 434	JUMPDEST		 ;; _neq_after_bc8e1296288c1d566fa5cb8e0e663861e57d77f47acd980367b74f96bc8ceb02	 
- stack 0: 0x6C0
4003	 435	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4004	 437	ADD		 	 
- stack 0: 0x6C4
4005	 438	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4006	 439	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x43E001800210000003407080053004200660000047E0001002100000034070C
4007	 43A	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x43E001800210000003407080053004200660000047E0001002100000034070C
- stack 0: 0xF0
4008	 43C	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x43E
4009	 43D	JUMP		 	 
- stack 0: 0x6C4
4010	 43E	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x6C4
4011	 43F	PUSH1	00	 	 
- stack 1: 0x6C4
- stack 0: 0x0
4012	 441	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
4013	 446	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x0
4014	 447	PUSH2	0380	 	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x380
4015	 44A	MLOAD		 	  ;; # read from x28
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x19
4016	 44B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x0
- stack 1: 0x19
- stack 0: 0xFFFFFFFF
4017	 450	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x19
4018	 451	SUB		 	 
- stack 1: 0x6C4
- stack 0: 0x19
4019	 452	PUSH2	045A	 ;; _neq_422e1dc6bddc76b52f7c08f15c1cf85ae01f1270703d76cbe9c3f9ee70e86c81	 
- stack 2: 0x6C4
- stack 1: 0x19
- stack 0: 0x45A
4020	 455	JUMPI		 	 
- stack 0: 0x6C4
4021	 45A	JUMPDEST		 ;; _neq_422e1dc6bddc76b52f7c08f15c1cf85ae01f1270703d76cbe9c3f9ee70e86c81	 
- stack 0: 0x6C4
4022	 45B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4023	 45C	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x43E001800210000003407080053004200660000047E0001002100000034070C
4024	 45D	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x43E001800210000003407080053004200660000047E0001002100000034070C
- stack 0: 0xE0
4025	 45F	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x43E0018
4026	 460	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x43E0018
- stack 0: 0xFFFF
4027	 463	AND		 	 
- stack 1: 0x6C4
- stack 0: 0x18
4028	 464	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0x18
- stack 0: 0x1
4029	 466	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0x18
4030	 467	ADD		 	 
- stack 0: 0x6DC
4031	 468	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFF
4032	 46D	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6DC
4033	 46E	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4034	 46F	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x2100000034070C005300420066000004890000006600000000000000000000
4035	 470	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x2100000034070C005300420066000004890000006600000000000000000000
- stack 0: 0xF0
4036	 472	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x21
4037	 473	JUMP		 	 
- stack 0: 0x6DC
4038	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6DC
4039	 22	PUSH4	00000000	 	 
- stack 1: 0x6DC
- stack 0: 0x0
4040	 27	PUSH2	0160	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x160
4041	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6DC
4042	 2B	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4043	 2D	ADD		 	 
- stack 0: 0x6E0
4044	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4045	 2F	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x34070C00530042006600000489000000660000000000000000000000000000
4046	 30	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x34070C00530042006600000489000000660000000000000000000000000000
- stack 0: 0xF0
4047	 32	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x34
4048	 33	JUMP		 	 
- stack 0: 0x6E0
4049	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1792(ignore imm)
- stack 0: 0x6E0
4050	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4051	 36	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x34070C00530042006600000489000000660000000000000000000000000000
4052	 37	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x34070C00530042006600000489000000660000000000000000000000000000
- stack 0: 0xE0
4053	 39	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x34070C
4054	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x34070C
- stack 0: 0xFFFF
4055	 3D	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x70C
4056	 3E	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x70C
- stack 0: 0x1
4057	 40	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x70C
4058	 41	PUSH2	0160	 	 
- stack 2: 0x6E0
- stack 1: 0x70C
- stack 0: 0x160
4059	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6E0
- stack 1: 0x70C
- stack 0: 0x0
4060	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6E0
- stack 0: 0x70C
4061	 46	PUSH2	0160	 	 
- stack 2: 0x6E0
- stack 1: 0x70C
- stack 0: 0x160
4062	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6E0
4063	 4A	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4064	 4C	ADD		 	 
- stack 0: 0x6E4
4065	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4066	 4E	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x5300420066000004890000006600000000000000000000000000006574796D
4067	 4F	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x5300420066000004890000006600000000000000000000000000006574796D
- stack 0: 0xF0
4068	 51	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x53
4069	 52	JUMP		 	 
- stack 0: 0x6E4
4070	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6E4
4071	 54	PUSH4	00042000	 	 
- stack 1: 0x6E4
- stack 0: 0x42000
4072	 59	PUSH2	0140	 	 
- stack 2: 0x6E4
- stack 1: 0x42000
- stack 0: 0x140
4073	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6E4
4074	 5D	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4075	 5F	ADD		 	 
- stack 0: 0x6E8
4076	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4077	 61	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x66000004890000006600000000000000000000000000006574796D00007473
4078	 62	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x66000004890000006600000000000000000000000000006574796D00007473
- stack 0: 0xF0
4079	 64	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x66
4080	 65	JUMP		 	 
- stack 0: 0x6E8
4081	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6E8
4082	 67	PUSH2	0140	 	 
- stack 1: 0x6E8
- stack 0: 0x140
4083	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6E8
- stack 0: 0x42000
4084	 6B	PUSH2	0075	 ;; _ecall_f22cf39156333e0aab2a6133bb09467b641842662db4fca3d09674bd9cd555fc	 
- stack 2: 0x6E8
- stack 1: 0x42000
- stack 0: 0x75
4085	 6E	JUMPI		 	 
- stack 0: 0x6E8
4086	 75	JUMPDEST		 ;; _ecall_f22cf39156333e0aab2a6133bb09467b641842662db4fca3d09674bd9cd555fc	 
- stack 0: 0x6E8
4087	 76	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4088	 78	PUSH2	0160	 	 
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x160
4089	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6E8
- stack 1: 0x4
- stack 0: 0x70C
4090	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6E8
4091	 7D	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4092	 7F	ADD		 	 
- stack 0: 0x6EC
4093	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4094	 81	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x4890000006600000000000000000000000000006574796D0000747300525245
4095	 82	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x4890000006600000000000000000000000000006574796D0000747300525245
- stack 0: 0xF0
4096	 84	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x489
4097	 85	JUMP		 	 
- stack 0: 0x6EC
4098	 489	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6EC
4099	 48A	PUSH4	00000000	 	 
- stack 1: 0x6EC
- stack 0: 0x0
4100	 48F	PUSH2	0140	 	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x140
4101	 492	MSTORE		 	  ;; # store to x10
- stack 0: 0x6EC
4102	 493	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4103	 495	ADD		 	 
- stack 0: 0x6F0
4104	 496	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4105	 497	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x6600000000000000000000000000006574796D000074730052524500004B4F
4106	 498	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x6600000000000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
4107	 49A	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x66
4108	 49B	JUMP		 	 
- stack 0: 0x6F0
4109	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6F0
4110	 67	PUSH2	0140	 	 
- stack 1: 0x6F0
- stack 0: 0x140
4111	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6F0
- stack 0: 0x0
4112	 6B	PUSH2	0075	 ;; _ecall_f22cf39156333e0aab2a6133bb09467b641842662db4fca3d09674bd9cd555fc	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x75
4113	 6E	JUMPI		 	 
- stack 0: 0x6F0
4114	 6F	PUSH1	20	 	 
- stack 1: 0x6F0
- stack 0: 0x20
4115	 71	PUSH2	0160	 	 
- stack 2: 0x6F0
- stack 1: 0x20
- stack 0: 0x160
4116	 74	RETURN		 	 
Final bytecode length; 1965
Returned: 000000000000000000000000000000000000000000000000000000000000070c
gasUsed : 14713
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 424 - range: 424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448
** HOT: 44c - range: 44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470,474
** HOT: 478 - range: 478,47c,480,484,488,48c,490
** HOT: 494 - range: 494,498,49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4,4c8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518
** HOT: 51c - range: 51c,520,524,528,52c,530,534
** HOT: 538 - range: 538,53c,540,544,548,54c,550
** HOT: 554 - range: 554,558,55c,560,564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584
** HOT: 588 - range: 588,58c,590,594,598
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0
** HOT: 5c4 - range: 5c4,5c8,5cc,5d0,5d4,5d8,5dc,5e0
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4,5d8,5dc,5e0
** HOT: 5e4 - range: 5e4,5e8,5ec
** HOT: 5f0 - range: 5f0,5f4,5f8,5fc,600,604,608,60c,610,614
** HOT: 5f4 - range: 5f4,5f8,5fc,600,604,608,60c,610,614
** HOT: 618 - range: 618,61c,620
** HOT: 624 - range: 624,628,62c,630,634,638
** HOT: 628 - range: 628,62c,630,634,638
** HOT: 63c - range: 63c,640,644
** HOT: 648 - range: 648,64c,650,654,658,65c,660
** HOT: 64c - range: 64c,650,654,658,65c,660
** HOT: 664 - range: 664,668,66c
** HOT: 670 - range: 670,674,678,67c,680,684,688,68c,690
** HOT: 674 - range: 674,678,67c,680,684,688,68c,690
** HOT: 694 - range: 694,698,69c
** HOT: 6a0 - range: 6a0,6a4,6a8,6ac
** HOT: 6b0 - range: 6b0,6b4,6b8,6bc,6c0
