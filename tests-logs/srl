Running in EVM:
0	 0	PUSH4	0610	 	 
- stack 0: 0x610
1	 5	PUSH2	05A8	 ;; _rambegin	 
- stack 1: 0x610
- stack 0: 0x5A8
2	 8	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x5A8
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x610
- stack 0: 0x5A9
4	 B	PUSH2	0400	 	 
- stack 2: 0x610
- stack 1: 0x5A9
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034FA0000530042006600000086FFF80099000000B3000000D3FFF8
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034FA0000530042006600000086FFF80099000000B3000000D3FFF8
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34FA0000530042006600000086FFF80099000000B3000000D3FFF800E60002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34FA0000530042006600000086FFF80099000000B3000000D3FFF800E60002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1536(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34FA0000530042006600000086FFF80099000000B3000000D3FFF800E60002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34FA0000530042006600000086FFF80099000000B3000000D3FFF800E60002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34FA00
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34FA00
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xFA00
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xFA00
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0xA00
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xA00
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086FFF80099000000B3000000D3FFF800E60002010005A8
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086FFF80099000000B3000000D3FFF800E60002010005A8
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086FFF80099000000B3000000D3FFF800E60002010005A80086FFF8
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086FFF80099000000B3000000D3FFF800E60002010005A80086FFF8
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_5d311210ec258714f9a35b531bf680aff1e66ce4f67adb17a0eecf36366ffc06	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_5d311210ec258714f9a35b531bf680aff1e66ce4f67adb17a0eecf36366ffc06	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0xA00
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86FFF80099000000B3000000D3FFF800E60002010005A80086FFF800990001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86FFF80099000000B3000000D3FFF800E60002010005A80086FFF800990001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ffff8000	 	 
- stack 1: 0x410
- stack 0: 0xFFFF8000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFFFF8000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000000D3FFF800E60002010005A80086FFF80099000100B30000
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000000D3FFF800E60002010005A80086FFF80099000100B30000
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000B3000000D3FFF800E60002010005A80086FFF80099000100B30000
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99000000B3000000D3FFF800E60002010005A80086FFF80099000100B30000
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x990000
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x990000
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
95	 A6	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
96	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
97	 AA	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
98	 AC	ADD		 	 
- stack 0: 0x418
99	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
100	 AE	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB3000000D3FFF800E60002010005A80086FFF80099000100B300000142FFFC
101	 AF	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB3000000D3FFF800E60002010005A80086FFF80099000100B300000142FFFC
- stack 0: 0xF0
102	 B1	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB3
103	 B2	JUMP		 	 
- stack 0: 0x418
104	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x418
105	 B4	PUSH2	0020	 	 
- stack 1: 0x418
- stack 0: 0x20
106	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x418
- stack 0: 0xFFFF8000
107	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
108	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x418
- stack 0: 0xFFFF8000
109	 BE	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0x40
110	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0x0
111	 C2	PUSH1	1F	 	 
- stack 3: 0x418
- stack 2: 0xFFFF8000
- stack 1: 0x0
- stack 0: 0x1F
112	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0x0
113	 C5	SHR		 	 
- stack 1: 0x418
- stack 0: 0xFFFF8000
114	 C6	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0x60
115	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
116	 CA	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
117	 CC	ADD		 	 
- stack 0: 0x41C
118	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
119	 CE	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD3FFF800E60002010005A80086FFF80099000100B300000142FFFC00E60003
120	 CF	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD3FFF800E60002010005A80086FFF80099000100B300000142FFFC00E60003
- stack 0: 0xF0
121	 D1	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD3
122	 D2	JUMP		 	 
- stack 0: 0x41C
123	 D3	JUMPDEST		 ;; __riscvimpl_LUI_ffff8eb7	  ;; # instr: lui t4,0xffff8(ignore imm)
- stack 0: 0x41C
124	 D4	PUSH4	ffff8000	 	 
- stack 1: 0x41C
- stack 0: 0xFFFF8000
125	 D9	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
126	 DC	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
127	 DD	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
128	 DF	ADD		 	 
- stack 0: 0x420
129	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
130	 E1	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE60002010005A80086FFF80099000100B300000142FFFC00E6000301000590
131	 E2	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xE60002010005A80086FFF80099000100B300000142FFFC00E6000301000590
- stack 0: 0xF0
132	 E4	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE6
133	 E5	JUMP		 	 
- stack 0: 0x420
134	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
135	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
136	 E8	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE60002010005A80086FFF80099000100B300000142FFFC00E6000301000590
137	 E9	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xE60002010005A80086FFF80099000100B300000142FFFC00E6000301000590
- stack 0: 0xE0
138	 EB	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE60002
139	 EC	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xE60002
- stack 0: 0xFFFF
140	 EF	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
141	 F0	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
142	 F2	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
143	 F3	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
144	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
145	 F7	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
146	 F9	ADD		 	 
- stack 0: 0x424
147	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
148	 FB	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10005A80086FFF80099000100B300000142FFFC00E60003010005900086FFF8
149	 FC	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10005A80086FFF80099000100B300000142FFFC00E60003010005900086FFF8
- stack 0: 0xF0
150	 FE	SHR		 	 
- stack 1: 0x424
- stack 0: 0x100
151	 FF	JUMP		 	 
- stack 0: 0x424
152	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x424
153	 101	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
154	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0xFFFF8000
155	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
156	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0xFFFF8000
157	 10B	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
158	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
159	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0xFFFF8000
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
160	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
161	 115	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
162	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x11E
163	 119	JUMPI		 	 
- stack 0: 0x424
164	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x424
- stack 0: 0x138
165	 11D	JUMP		 	 
- stack 0: 0x424
166	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x424
167	 139	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
168	 13B	ADD		 	 
- stack 0: 0x428
169	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
170	 13D	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86FFF80099000100B300000142FFFC00E60003010005900086FFF800990007
171	 13E	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86FFF80099000100B300000142FFFC00E60003010005900086FFF800990007
- stack 0: 0xF0
172	 140	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
173	 141	JUMP		 	 
- stack 0: 0x428
174	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x428
175	 87	PUSH4	ffff8000	 	 
- stack 1: 0x428
- stack 0: 0xFFFF8000
176	 8C	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0x20
177	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
178	 90	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
179	 92	ADD		 	 
- stack 0: 0x42C
180	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
181	 94	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99000100B300000142FFFC00E60003010005900086FFF80099000700B30000
182	 95	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x99000100B300000142FFFC00E60003010005900086FFF80099000700B30000
- stack 0: 0xF0
183	 97	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x99
184	 98	JUMP		 	 
- stack 0: 0x42C
185	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
186	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
187	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x99000100B300000142FFFC00E60003010005900086FFF80099000700B30000
188	 9C	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x99000100B300000142FFFC00E60003010005900086FFF80099000700B30000
- stack 0: 0xE0
189	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x990001
190	 9F	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x990001
- stack 0: 0xFFFF
191	 A2	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
192	 A3	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
193	 A5	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
194	 A6	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
195	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
196	 AA	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
197	 AC	ADD		 	 
- stack 0: 0x430
198	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
199	 AE	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xB300000142FFFC00E60003010005900086FFF80099000700B3000001552000
200	 AF	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xB300000142FFFC00E60003010005900086FFF80099000700B3000001552000
- stack 0: 0xF0
201	 B1	SHR		 	 
- stack 1: 0x430
- stack 0: 0xB3
202	 B2	JUMP		 	 
- stack 0: 0x430
203	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x430
204	 B4	PUSH2	0020	 	 
- stack 1: 0x430
- stack 0: 0x20
205	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x430
- stack 0: 0xFFFF8000
206	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
207	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0xFFFF8000
208	 BE	PUSH2	0040	 	 
- stack 2: 0x430
- stack 1: 0xFFFF8000
- stack 0: 0x40
209	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x430
- stack 1: 0xFFFF8000
- stack 0: 0x1
210	 C2	PUSH1	1F	 	 
- stack 3: 0x430
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
211	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x430
- stack 1: 0xFFFF8000
- stack 0: 0x1
212	 C5	SHR		 	 
- stack 1: 0x430
- stack 0: 0x7FFFC000
213	 C6	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x7FFFC000
- stack 0: 0x60
214	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
215	 CA	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
216	 CC	ADD		 	 
- stack 0: 0x434
217	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
218	 CE	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x142FFFC00E60003010005900086FFF80099000700B30000015520000168FF00
219	 CF	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x142FFFC00E60003010005900086FFF80099000700B30000015520000168FF00
- stack 0: 0xF0
220	 D1	SHR		 	 
- stack 1: 0x434
- stack 0: 0x142
221	 D2	JUMP		 	 
- stack 0: 0x434
222	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x434
223	 143	PUSH4	7fffc000	 	 
- stack 1: 0x434
- stack 0: 0x7FFFC000
224	 148	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
225	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
226	 14C	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
227	 14E	ADD		 	 
- stack 0: 0x438
228	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
229	 150	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE60003010005900086FFF80099000700B30000015520000168FF0000E60004
230	 151	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xE60003010005900086FFF80099000700B30000015520000168FF0000E60004
- stack 0: 0xF0
231	 153	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE6
232	 154	JUMP		 	 
- stack 0: 0x438
233	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
234	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
235	 E8	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xE60003010005900086FFF80099000700B30000015520000168FF0000E60004
236	 E9	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xE60003010005900086FFF80099000700B30000015520000168FF0000E60004
- stack 0: 0xE0
237	 EB	SHR		 	 
- stack 1: 0x438
- stack 0: 0xE60003
238	 EC	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xE60003
- stack 0: 0xFFFF
239	 EF	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
240	 F0	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
241	 F2	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
242	 F3	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
243	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
244	 F7	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
245	 F9	ADD		 	 
- stack 0: 0x43C
246	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
247	 FB	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10005900086FFF80099000700B30000015520000168FF0000E6000401000574
248	 FC	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10005900086FFF80099000700B30000015520000168FF0000E6000401000574
- stack 0: 0xF0
249	 FE	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x100
250	 FF	JUMP		 	 
- stack 0: 0x43C
251	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x43C
252	 101	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
253	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x7FFFC000
254	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
255	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x7FFFC000
256	 10B	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
257	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
258	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
259	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
260	 115	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
261	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x11E
262	 119	JUMPI		 	 
- stack 0: 0x43C
263	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x43C
- stack 0: 0x138
264	 11D	JUMP		 	 
- stack 0: 0x43C
265	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x43C
266	 139	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
267	 13B	ADD		 	 
- stack 0: 0x440
268	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
269	 13D	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86FFF80099000700B30000015520000168FF0000E60004010005740086FFF8
270	 13E	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86FFF80099000700B30000015520000168FF0000E60004010005740086FFF8
- stack 0: 0xF0
271	 140	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
272	 141	JUMP		 	 
- stack 0: 0x440
273	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x440
274	 87	PUSH4	ffff8000	 	 
- stack 1: 0x440
- stack 0: 0xFFFF8000
275	 8C	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0xFFFF8000
- stack 0: 0x20
276	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
277	 90	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
278	 92	ADD		 	 
- stack 0: 0x444
279	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
280	 94	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x99000700B30000015520000168FF0000E60004010005740086FFF80099000E
281	 95	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x99000700B30000015520000168FF0000E60004010005740086FFF80099000E
- stack 0: 0xF0
282	 97	SHR		 	 
- stack 1: 0x444
- stack 0: 0x99
283	 98	JUMP		 	 
- stack 0: 0x444
284	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
285	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
286	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x99000700B30000015520000168FF0000E60004010005740086FFF80099000E
287	 9C	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x99000700B30000015520000168FF0000E60004010005740086FFF80099000E
- stack 0: 0xE0
288	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0x990007
289	 9F	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x990007
- stack 0: 0xFFFF
290	 A2	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
291	 A3	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
292	 A5	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
293	 A6	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
294	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
295	 AA	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
296	 AC	ADD		 	 
- stack 0: 0x448
297	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
298	 AE	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xB30000015520000168FF0000E60004010005740086FFF80099000E00B30000
299	 AF	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xB30000015520000168FF0000E60004010005740086FFF80099000E00B30000
- stack 0: 0xF0
300	 B1	SHR		 	 
- stack 1: 0x448
- stack 0: 0xB3
301	 B2	JUMP		 	 
- stack 0: 0x448
302	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x448
303	 B4	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
304	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0xFFFF8000
305	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
306	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0xFFFF8000
307	 BE	PUSH2	0040	 	 
- stack 2: 0x448
- stack 1: 0xFFFF8000
- stack 0: 0x40
308	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x448
- stack 1: 0xFFFF8000
- stack 0: 0x7
309	 C2	PUSH1	1F	 	 
- stack 3: 0x448
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
310	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x448
- stack 1: 0xFFFF8000
- stack 0: 0x7
311	 C5	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1FFFF00
312	 C6	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0x1FFFF00
- stack 0: 0x60
313	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
314	 CA	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
315	 CC	ADD		 	 
- stack 0: 0x44C
316	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
317	 CE	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x15520000168FF0000E60004010005740086FFF80099000E00B3000001870040
318	 CF	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x15520000168FF0000E60004010005740086FFF80099000E00B3000001870040
- stack 0: 0xF0
319	 D1	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x155
320	 D2	JUMP		 	 
- stack 0: 0x44C
321	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x44C
322	 156	PUSH4	02000000	 	 
- stack 1: 0x44C
- stack 0: 0x2000000
323	 15B	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x2000000
- stack 0: 0x3A0
324	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
325	 15F	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
326	 161	ADD		 	 
- stack 0: 0x450
327	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
328	 163	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x168FF0000E60004010005740086FFF80099000E00B30000018700400168FFFE
329	 164	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x168FF0000E60004010005740086FFF80099000E00B30000018700400168FFFE
- stack 0: 0xF0
330	 166	SHR		 	 
- stack 1: 0x450
- stack 0: 0x168
331	 167	JUMP		 	 
- stack 0: 0x450
332	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x450
333	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
334	 16A	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x168FF0000E60004010005740086FFF80099000E00B30000018700400168FFFE
335	 16B	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x168FF0000E60004010005740086FFF80099000E00B30000018700400168FFFE
- stack 0: 0xE0
336	 16D	SHR		 	 
- stack 1: 0x450
- stack 0: 0x168FF00
337	 16E	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x168FF00
- stack 0: 0xFFFF
338	 171	AND		 	 
- stack 1: 0x450
- stack 0: 0xFF00
339	 172	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0xFF00
- stack 0: 0x1
340	 174	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
341	 175	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
342	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x450
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
343	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x450
- stack 0: 0x1FFFF00
344	 17A	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
345	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
346	 17E	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
347	 180	ADD		 	 
- stack 0: 0x454
348	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
349	 182	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xE60004010005740086FFF80099000E00B30000018700400168FFFE00E60005
350	 183	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0xE60004010005740086FFF80099000E00B30000018700400168FFFE00E60005
- stack 0: 0xF0
351	 185	SHR		 	 
- stack 1: 0x454
- stack 0: 0xE6
352	 186	JUMP		 	 
- stack 0: 0x454
353	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x454
354	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
355	 E8	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0xE60004010005740086FFF80099000E00B30000018700400168FFFE00E60005
356	 E9	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0xE60004010005740086FFF80099000E00B30000018700400168FFFE00E60005
- stack 0: 0xE0
357	 EB	SHR		 	 
- stack 1: 0x454
- stack 0: 0xE60004
358	 EC	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0xE60004
- stack 0: 0xFFFF
359	 EF	AND		 	 
- stack 1: 0x454
- stack 0: 0x4
360	 F0	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x1
361	 F2	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0x4
362	 F3	PUSH2	0380	 	 
- stack 2: 0x454
- stack 1: 0x4
- stack 0: 0x380
363	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x454
364	 F7	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
365	 F9	ADD		 	 
- stack 0: 0x458
366	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
367	 FB	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x10005740086FFF80099000E00B30000018700400168FFFE00E6000501000558
368	 FC	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x10005740086FFF80099000E00B30000018700400168FFFE00E6000501000558
- stack 0: 0xF0
369	 FE	SHR		 	 
- stack 1: 0x458
- stack 0: 0x100
370	 FF	JUMP		 	 
- stack 0: 0x458
371	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x458
372	 101	PUSH2	0060	 	 
- stack 1: 0x458
- stack 0: 0x60
373	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x458
- stack 0: 0x1FFFF00
374	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x458
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
375	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x458
- stack 0: 0x1FFFF00
376	 10B	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
377	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
378	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x458
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
379	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x458
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
380	 115	SUB		 	 
- stack 1: 0x458
- stack 0: 0x0
381	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x11E
382	 119	JUMPI		 	 
- stack 0: 0x458
383	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x458
- stack 0: 0x138
384	 11D	JUMP		 	 
- stack 0: 0x458
385	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x458
386	 139	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
387	 13B	ADD		 	 
- stack 0: 0x45C
388	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
389	 13D	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x86FFF80099000E00B30000018700400168FFFE00E60005010005580086FFF8
390	 13E	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x86FFF80099000E00B30000018700400168FFFE00E60005010005580086FFF8
- stack 0: 0xF0
391	 140	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x86
392	 141	JUMP		 	 
- stack 0: 0x45C
393	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x45C
394	 87	PUSH4	ffff8000	 	 
- stack 1: 0x45C
- stack 0: 0xFFFF8000
395	 8C	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFFFF8000
- stack 0: 0x20
396	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
397	 90	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
398	 92	ADD		 	 
- stack 0: 0x460
399	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
400	 94	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000E00B30000018700400168FFFE00E60005010005580086FFF8019A0001
401	 95	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x99000E00B30000018700400168FFFE00E60005010005580086FFF8019A0001
- stack 0: 0xF0
402	 97	SHR		 	 
- stack 1: 0x460
- stack 0: 0x99
403	 98	JUMP		 	 
- stack 0: 0x460
404	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x460
405	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
406	 9B	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x99000E00B30000018700400168FFFE00E60005010005580086FFF8019A0001
407	 9C	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0x99000E00B30000018700400168FFFE00E60005010005580086FFF8019A0001
- stack 0: 0xE0
408	 9E	SHR		 	 
- stack 1: 0x460
- stack 0: 0x99000E
409	 9F	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0x99000E
- stack 0: 0xFFFF
410	 A2	AND		 	 
- stack 1: 0x460
- stack 0: 0xE
411	 A3	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0xE
- stack 0: 0x1
412	 A5	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0xE
413	 A6	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xE
- stack 0: 0x40
414	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x460
415	 AA	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
416	 AC	ADD		 	 
- stack 0: 0x464
417	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
418	 AE	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xB30000018700400168FFFE00E60005010005580086FFF8019A00010099000F
419	 AF	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xB30000018700400168FFFE00E60005010005580086FFF8019A00010099000F
- stack 0: 0xF0
420	 B1	SHR		 	 
- stack 1: 0x464
- stack 0: 0xB3
421	 B2	JUMP		 	 
- stack 0: 0x464
422	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x464
423	 B4	PUSH2	0020	 	 
- stack 1: 0x464
- stack 0: 0x20
424	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x464
- stack 0: 0xFFFF8000
425	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
426	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0xFFFF8000
427	 BE	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xFFFF8000
- stack 0: 0x40
428	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x464
- stack 1: 0xFFFF8000
- stack 0: 0xE
429	 C2	PUSH1	1F	 	 
- stack 3: 0x464
- stack 2: 0xFFFF8000
- stack 1: 0xE
- stack 0: 0x1F
430	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x464
- stack 1: 0xFFFF8000
- stack 0: 0xE
431	 C5	SHR		 	 
- stack 1: 0x464
- stack 0: 0x3FFFE
432	 C6	PUSH2	0060	 	 
- stack 2: 0x464
- stack 1: 0x3FFFE
- stack 0: 0x60
433	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x464
434	 CA	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
435	 CC	ADD		 	 
- stack 0: 0x468
436	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
437	 CE	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x18700400168FFFE00E60005010005580086FFF8019A00010099000F00B30000
438	 CF	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x18700400168FFFE00E60005010005580086FFF8019A00010099000F00B30000
- stack 0: 0xF0
439	 D1	SHR		 	 
- stack 1: 0x468
- stack 0: 0x187
440	 D2	JUMP		 	 
- stack 0: 0x468
441	 187	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x468
442	 188	PUSH4	00040000	 	 
- stack 1: 0x468
- stack 0: 0x40000
443	 18D	PUSH2	03A0	 	 
- stack 2: 0x468
- stack 1: 0x40000
- stack 0: 0x3A0
444	 190	MSTORE		 	  ;; # store to x29
- stack 0: 0x468
445	 191	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
446	 193	ADD		 	 
- stack 0: 0x46C
447	 194	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
448	 195	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x168FFFE00E60005010005580086FFF8019A00010099000F00B3000001B90020
449	 196	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x168FFFE00E60005010005580086FFF8019A00010099000F00B3000001B90020
- stack 0: 0xF0
450	 198	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x168
451	 199	JUMP		 	 
- stack 0: 0x46C
452	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x46C
453	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
454	 16A	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x168FFFE00E60005010005580086FFF8019A00010099000F00B3000001B90020
455	 16B	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x168FFFE00E60005010005580086FFF8019A00010099000F00B3000001B90020
- stack 0: 0xE0
456	 16D	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x168FFFE
457	 16E	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x168FFFE
- stack 0: 0xFFFF
458	 171	AND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFE
459	 172	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xFFFE
- stack 0: 0x1
460	 174	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
461	 175	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
462	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
463	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x46C
- stack 0: 0x3FFFE
464	 17A	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0x3FFFE
- stack 0: 0x3A0
465	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
466	 17E	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
467	 180	ADD		 	 
- stack 0: 0x470
468	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
469	 182	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xE60005010005580086FFF8019A00010099000F00B3000001B900200168FFFF
470	 183	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xE60005010005580086FFF8019A00010099000F00B3000001B900200168FFFF
- stack 0: 0xF0
471	 185	SHR		 	 
- stack 1: 0x470
- stack 0: 0xE6
472	 186	JUMP		 	 
- stack 0: 0x470
473	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x470
474	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
475	 E8	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xE60005010005580086FFF8019A00010099000F00B3000001B900200168FFFF
476	 E9	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0xE60005010005580086FFF8019A00010099000F00B3000001B900200168FFFF
- stack 0: 0xE0
477	 EB	SHR		 	 
- stack 1: 0x470
- stack 0: 0xE60005
478	 EC	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0xE60005
- stack 0: 0xFFFF
479	 EF	AND		 	 
- stack 1: 0x470
- stack 0: 0x5
480	 F0	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x1
481	 F2	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0x5
482	 F3	PUSH2	0380	 	 
- stack 2: 0x470
- stack 1: 0x5
- stack 0: 0x380
483	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x470
484	 F7	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
485	 F9	ADD		 	 
- stack 0: 0x474
486	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
487	 FB	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x10005580086FFF8019A00010099000F00B3000001B900200168FFFF00E60006
488	 FC	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x10005580086FFF8019A00010099000F00B3000001B900200168FFFF00E60006
- stack 0: 0xF0
489	 FE	SHR		 	 
- stack 1: 0x474
- stack 0: 0x100
490	 FF	JUMP		 	 
- stack 0: 0x474
491	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x474
492	 101	PUSH2	0060	 	 
- stack 1: 0x474
- stack 0: 0x60
493	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x474
- stack 0: 0x3FFFE
494	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
495	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0x3FFFE
496	 10B	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0x3FFFE
- stack 0: 0x3A0
497	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
498	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x474
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
499	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x474
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
500	 115	SUB		 	 
- stack 1: 0x474
- stack 0: 0x0
501	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x11E
502	 119	JUMPI		 	 
- stack 0: 0x474
503	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x474
- stack 0: 0x138
504	 11D	JUMP		 	 
- stack 0: 0x474
505	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x474
506	 139	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
507	 13B	ADD		 	 
- stack 0: 0x478
508	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
509	 13D	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x86FFF8019A00010099000F00B3000001B900200168FFFF00E6000601000538
510	 13E	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x86FFF8019A00010099000F00B3000001B900200168FFFF00E6000601000538
- stack 0: 0xF0
511	 140	SHR		 	 
- stack 1: 0x478
- stack 0: 0x86
512	 141	JUMP		 	 
- stack 0: 0x478
513	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x478
514	 87	PUSH4	ffff8000	 	 
- stack 1: 0x478
- stack 0: 0xFFFF8000
515	 8C	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0xFFFF8000
- stack 0: 0x20
516	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x478
517	 90	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
518	 92	ADD		 	 
- stack 0: 0x47C
519	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
520	 94	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x19A00010099000F00B3000001B900200168FFFF00E600060100053801CCFFFF
521	 95	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x19A00010099000F00B3000001B900200168FFFF00E600060100053801CCFFFF
- stack 0: 0xF0
522	 97	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x19A
523	 98	JUMP		 	 
- stack 0: 0x47C
524	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x47C
525	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
526	 19C	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x19A00010099000F00B3000001B900200168FFFF00E600060100053801CCFFFF
527	 19D	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x19A00010099000F00B3000001B900200168FFFF00E600060100053801CCFFFF
- stack 0: 0xE0
528	 19F	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x19A0001
529	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x19A0001
- stack 0: 0xFFFF
530	 1A3	AND		 	 
- stack 1: 0x47C
- stack 0: 0x1
531	 1A4	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0x1
532	 1A6	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x1
533	 1A7	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0x20
534	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x47C
- stack 1: 0x1
- stack 0: 0xFFFF8000
535	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x47C
- stack 0: 0xFFFF8001
536	 1AC	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xFFFF8001
- stack 0: 0x20
537	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
538	 1B0	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
539	 1B2	ADD		 	 
- stack 0: 0x480
540	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
541	 1B4	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F00B3000001B900200168FFFF00E600060100053801CCFFFF00990000
542	 1B5	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x99000F00B3000001B900200168FFFF00E600060100053801CCFFFF00990000
- stack 0: 0xF0
543	 1B7	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99
544	 1B8	JUMP		 	 
- stack 0: 0x480
545	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x480
546	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
547	 9B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F00B3000001B900200168FFFF00E600060100053801CCFFFF00990000
548	 9C	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x99000F00B3000001B900200168FFFF00E600060100053801CCFFFF00990000
- stack 0: 0xE0
549	 9E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99000F
550	 9F	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x99000F
- stack 0: 0xFFFF
551	 A2	AND		 	 
- stack 1: 0x480
- stack 0: 0xF
552	 A3	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x1
553	 A5	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xF
554	 A6	PUSH2	0040	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x40
555	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x480
556	 AA	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
557	 AC	ADD		 	 
- stack 0: 0x484
558	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
559	 AE	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0xB3000001B900200168FFFF00E600060100053801CCFFFF0099000000B30000
560	 AF	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0xB3000001B900200168FFFF00E600060100053801CCFFFF0099000000B30000
- stack 0: 0xF0
561	 B1	SHR		 	 
- stack 1: 0x484
- stack 0: 0xB3
562	 B2	JUMP		 	 
- stack 0: 0x484
563	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x484
564	 B4	PUSH2	0020	 	 
- stack 1: 0x484
- stack 0: 0x20
565	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x484
- stack 0: 0xFFFF8001
566	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0xFFFF8001
- stack 0: 0xFFFFFFFF
567	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0xFFFF8001
568	 BE	PUSH2	0040	 	 
- stack 2: 0x484
- stack 1: 0xFFFF8001
- stack 0: 0x40
569	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x484
- stack 1: 0xFFFF8001
- stack 0: 0xF
570	 C2	PUSH1	1F	 	 
- stack 3: 0x484
- stack 2: 0xFFFF8001
- stack 1: 0xF
- stack 0: 0x1F
571	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x484
- stack 1: 0xFFFF8001
- stack 0: 0xF
572	 C5	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1FFFF
573	 C6	PUSH2	0060	 	 
- stack 2: 0x484
- stack 1: 0x1FFFF
- stack 0: 0x60
574	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x484
575	 CA	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
576	 CC	ADD		 	 
- stack 0: 0x488
577	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
578	 CE	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1B900200168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF
579	 CF	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1B900200168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF
- stack 0: 0xF0
580	 D1	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1B9
581	 D2	JUMP		 	 
- stack 0: 0x488
582	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x488
583	 1BA	PUSH4	00020000	 	 
- stack 1: 0x488
- stack 0: 0x20000
584	 1BF	PUSH2	03A0	 	 
- stack 2: 0x488
- stack 1: 0x20000
- stack 0: 0x3A0
585	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x488
586	 1C3	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
587	 1C5	ADD		 	 
- stack 0: 0x48C
588	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
589	 1C7	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF00E60007
590	 1C8	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF00E60007
- stack 0: 0xF0
591	 1CA	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x168
592	 1CB	JUMP		 	 
- stack 0: 0x48C
593	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x48C
594	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
595	 16A	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF00E60007
596	 16B	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x168FFFF00E600060100053801CCFFFF0099000000B3000001E6FFFF00E60007
- stack 0: 0xE0
597	 16D	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x168FFFF
598	 16E	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
599	 171	AND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFF
600	 172	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xFFFF
- stack 0: 0x1
601	 174	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
602	 175	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
603	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
604	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x48C
- stack 0: 0x1FFFF
605	 17A	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0x1FFFF
- stack 0: 0x3A0
606	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
607	 17E	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
608	 180	ADD		 	 
- stack 0: 0x490
609	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
610	 182	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xE600060100053801CCFFFF0099000000B3000001E6FFFF00E6000701000520
611	 183	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xE600060100053801CCFFFF0099000000B3000001E6FFFF00E6000701000520
- stack 0: 0xF0
612	 185	SHR		 	 
- stack 1: 0x490
- stack 0: 0xE6
613	 186	JUMP		 	 
- stack 0: 0x490
614	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
615	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
616	 E8	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xE600060100053801CCFFFF0099000000B3000001E6FFFF00E6000701000520
617	 E9	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xE600060100053801CCFFFF0099000000B3000001E6FFFF00E6000701000520
- stack 0: 0xE0
618	 EB	SHR		 	 
- stack 1: 0x490
- stack 0: 0xE60006
619	 EC	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xE60006
- stack 0: 0xFFFF
620	 EF	AND		 	 
- stack 1: 0x490
- stack 0: 0x6
621	 F0	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x1
622	 F2	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x6
623	 F3	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x6
- stack 0: 0x380
624	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
625	 F7	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
626	 F9	ADD		 	 
- stack 0: 0x494
627	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
628	 FB	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x100053801CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF
629	 FC	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x100053801CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF
- stack 0: 0xF0
630	 FE	SHR		 	 
- stack 1: 0x494
- stack 0: 0x100
631	 FF	JUMP		 	 
- stack 0: 0x494
632	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x494
633	 101	PUSH2	0060	 	 
- stack 1: 0x494
- stack 0: 0x60
634	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x494
- stack 0: 0x1FFFF
635	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
636	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0x1FFFF
637	 10B	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x1FFFF
- stack 0: 0x3A0
638	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
639	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x494
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
640	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x494
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
641	 115	SUB		 	 
- stack 1: 0x494
- stack 0: 0x0
642	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x11E
643	 119	JUMPI		 	 
- stack 0: 0x494
644	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x494
- stack 0: 0x138
645	 11D	JUMP		 	 
- stack 0: 0x494
646	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x494
647	 139	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
648	 13B	ADD		 	 
- stack 0: 0x498
649	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
650	 13D	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF00990001
651	 13E	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF00990001
- stack 0: 0xF0
652	 140	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1CC
653	 141	JUMP		 	 
- stack 0: 0x498
654	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x498
655	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
656	 1CE	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF00990001
657	 1CF	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1CCFFFF0099000000B3000001E6FFFF00E600070100052001CCFFFF00990001
- stack 0: 0xE0
658	 1D1	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1CCFFFF
659	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1CCFFFF
- stack 0: 0xFFFF
660	 1D5	AND		 	 
- stack 1: 0x498
- stack 0: 0xFFFF
661	 1D6	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFFFF
- stack 0: 0x1
662	 1D8	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
663	 1D9	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
664	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x498
665	 1DD	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
666	 1DF	ADD		 	 
- stack 0: 0x49C
667	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
668	 1E1	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x99000000B3000001E6FFFF00E600070100052001CCFFFF0099000100B30000
669	 1E2	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x99000000B3000001E6FFFF00E600070100052001CCFFFF0099000100B30000
- stack 0: 0xF0
670	 1E4	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x99
671	 1E5	JUMP		 	 
- stack 0: 0x49C
672	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x49C
673	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
674	 9B	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x99000000B3000001E6FFFF00E600070100052001CCFFFF0099000100B30000
675	 9C	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x99000000B3000001E6FFFF00E600070100052001CCFFFF0099000100B30000
- stack 0: 0xE0
676	 9E	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x990000
677	 9F	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x990000
- stack 0: 0xFFFF
678	 A2	AND		 	 
- stack 1: 0x49C
- stack 0: 0x0
679	 A3	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x1
680	 A5	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x0
681	 A6	PUSH2	0040	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x40
682	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x49C
683	 AA	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
684	 AC	ADD		 	 
- stack 0: 0x4A0
685	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
686	 AE	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0xB3000001E6FFFF00E600070100052001CCFFFF0099000100B3000002000000
687	 AF	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0xB3000001E6FFFF00E600070100052001CCFFFF0099000100B3000002000000
- stack 0: 0xF0
688	 B1	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xB3
689	 B2	JUMP		 	 
- stack 0: 0x4A0
690	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x4A0
691	 B4	PUSH2	0020	 	 
- stack 1: 0x4A0
- stack 0: 0x20
692	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
693	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
694	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFF
695	 BE	PUSH2	0040	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
696	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
697	 C2	PUSH1	1F	 	 
- stack 3: 0x4A0
- stack 2: 0xFFFFFFFF
- stack 1: 0x0
- stack 0: 0x1F
698	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
699	 C5	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFF
700	 C6	PUSH2	0060	 	 
- stack 2: 0x4A0
- stack 1: 0xFFFFFFFF
- stack 0: 0x60
701	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A0
702	 CA	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
703	 CC	ADD		 	 
- stack 0: 0x4A4
704	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
705	 CE	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1E6FFFF00E600070100052001CCFFFF0099000100B30000020000000168FFFF
706	 CF	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x1E6FFFF00E600070100052001CCFFFF0099000100B30000020000000168FFFF
- stack 0: 0xF0
707	 D1	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1E6
708	 D2	JUMP		 	 
- stack 0: 0x4A4
709	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4A4
710	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
711	 1E8	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1E6FFFF00E600070100052001CCFFFF0099000100B30000020000000168FFFF
712	 1E9	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x1E6FFFF00E600070100052001CCFFFF0099000100B30000020000000168FFFF
- stack 0: 0xE0
713	 1EB	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1E6FFFF
714	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x1E6FFFF
- stack 0: 0xFFFF
715	 1EF	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFF
716	 1F0	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFF
- stack 0: 0x1
717	 1F2	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
718	 1F3	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
719	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
720	 1F7	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
721	 1F9	ADD		 	 
- stack 0: 0x4A8
722	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
723	 1FB	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xE600070100052001CCFFFF0099000100B30000020000000168FFFF00E60008
724	 1FC	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xE600070100052001CCFFFF0099000100B30000020000000168FFFF00E60008
- stack 0: 0xF0
725	 1FE	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xE6
726	 1FF	JUMP		 	 
- stack 0: 0x4A8
727	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
728	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
729	 E8	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xE600070100052001CCFFFF0099000100B30000020000000168FFFF00E60008
730	 E9	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xE600070100052001CCFFFF0099000100B30000020000000168FFFF00E60008
- stack 0: 0xE0
731	 EB	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xE60007
732	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xE60007
- stack 0: 0xFFFF
733	 EF	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
734	 F0	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x1
735	 F2	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x7
736	 F3	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x7
- stack 0: 0x380
737	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
738	 F7	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
739	 F9	ADD		 	 
- stack 0: 0x4AC
740	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
741	 FB	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x100052001CCFFFF0099000100B30000020000000168FFFF00E6000801000504
742	 FC	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x100052001CCFFFF0099000100B30000020000000168FFFF00E6000801000504
- stack 0: 0xF0
743	 FE	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x100
744	 FF	JUMP		 	 
- stack 0: 0x4AC
745	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x4AC
746	 101	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
747	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFF
748	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
749	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFF
750	 10B	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
751	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
752	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
753	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
754	 115	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
755	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x11E
756	 119	JUMPI		 	 
- stack 0: 0x4AC
757	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x4AC
- stack 0: 0x138
758	 11D	JUMP		 	 
- stack 0: 0x4AC
759	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x4AC
760	 139	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
761	 13B	ADD		 	 
- stack 0: 0x4B0
762	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
763	 13D	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1CCFFFF0099000100B30000020000000168FFFF00E600080100050401CCFFFF
764	 13E	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1CCFFFF0099000100B30000020000000168FFFF00E600080100050401CCFFFF
- stack 0: 0xF0
765	 140	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1CC
766	 141	JUMP		 	 
- stack 0: 0x4B0
767	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4B0
768	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
769	 1CE	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1CCFFFF0099000100B30000020000000168FFFF00E600080100050401CCFFFF
770	 1CF	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x1CCFFFF0099000100B30000020000000168FFFF00E600080100050401CCFFFF
- stack 0: 0xE0
771	 1D1	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1CCFFFF
772	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1CCFFFF
- stack 0: 0xFFFF
773	 1D5	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF
774	 1D6	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF
- stack 0: 0x1
775	 1D8	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
776	 1D9	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
777	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
778	 1DD	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
779	 1DF	ADD		 	 
- stack 0: 0x4B4
780	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
781	 1E1	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x99000100B30000020000000168FFFF00E600080100050401CCFFFF00990007
782	 1E2	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x99000100B30000020000000168FFFF00E600080100050401CCFFFF00990007
- stack 0: 0xF0
783	 1E4	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x99
784	 1E5	JUMP		 	 
- stack 0: 0x4B4
785	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4B4
786	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
787	 9B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x99000100B30000020000000168FFFF00E600080100050401CCFFFF00990007
788	 9C	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x99000100B30000020000000168FFFF00E600080100050401CCFFFF00990007
- stack 0: 0xE0
789	 9E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x990001
790	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x990001
- stack 0: 0xFFFF
791	 A2	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
792	 A3	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
793	 A5	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
794	 A6	PUSH2	0040	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x40
795	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B4
796	 AA	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
797	 AC	ADD		 	 
- stack 0: 0x4B8
798	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
799	 AE	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xB30000020000000168FFFF00E600080100050401CCFFFF0099000700B30000
800	 AF	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xB30000020000000168FFFF00E600080100050401CCFFFF0099000700B30000
- stack 0: 0xF0
801	 B1	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xB3
802	 B2	JUMP		 	 
- stack 0: 0x4B8
803	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x4B8
804	 B4	PUSH2	0020	 	 
- stack 1: 0x4B8
- stack 0: 0x20
805	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
806	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
807	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFF
808	 BE	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
809	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
810	 C2	PUSH1	1F	 	 
- stack 3: 0x4B8
- stack 2: 0xFFFFFFFF
- stack 1: 0x1
- stack 0: 0x1F
811	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4B8
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
812	 C5	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x7FFFFFFF
813	 C6	PUSH2	0060	 	 
- stack 2: 0x4B8
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
814	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B8
815	 CA	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
816	 CC	ADD		 	 
- stack 0: 0x4BC
817	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
818	 CE	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x20000000168FFFF00E600080100050401CCFFFF0099000700B3000001552000
819	 CF	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x20000000168FFFF00E600080100050401CCFFFF0099000700B3000001552000
- stack 0: 0xF0
820	 D1	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x200
821	 D2	JUMP		 	 
- stack 0: 0x4BC
822	 200	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4BC
823	 201	PUSH4	80000000	 	 
- stack 1: 0x4BC
- stack 0: 0x80000000
824	 206	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x80000000
- stack 0: 0x3A0
825	 209	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
826	 20A	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
827	 20C	ADD		 	 
- stack 0: 0x4C0
828	 20D	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
829	 20E	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x168FFFF00E600080100050401CCFFFF0099000700B30000015520000168FFFF
830	 20F	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x168FFFF00E600080100050401CCFFFF0099000700B30000015520000168FFFF
- stack 0: 0xF0
831	 211	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x168
832	 212	JUMP		 	 
- stack 0: 0x4C0
833	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4C0
834	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
835	 16A	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x168FFFF00E600080100050401CCFFFF0099000700B30000015520000168FFFF
836	 16B	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0x168FFFF00E600080100050401CCFFFF0099000700B30000015520000168FFFF
- stack 0: 0xE0
837	 16D	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x168FFFF
838	 16E	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
839	 171	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFF
840	 172	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFF
- stack 0: 0x1
841	 174	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
842	 175	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
843	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
844	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C0
- stack 0: 0x7FFFFFFF
845	 17A	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
846	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C0
847	 17E	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
848	 180	ADD		 	 
- stack 0: 0x4C4
849	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
850	 182	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE600080100050401CCFFFF0099000700B30000015520000168FFFF00E60009
851	 183	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xE600080100050401CCFFFF0099000700B30000015520000168FFFF00E60009
- stack 0: 0xF0
852	 185	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE6
853	 186	JUMP		 	 
- stack 0: 0x4C4
854	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
855	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
856	 E8	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE600080100050401CCFFFF0099000700B30000015520000168FFFF00E60009
857	 E9	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xE600080100050401CCFFFF0099000700B30000015520000168FFFF00E60009
- stack 0: 0xE0
858	 EB	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE60008
859	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0xE60008
- stack 0: 0xFFFF
860	 EF	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
861	 F0	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x1
862	 F2	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x8
863	 F3	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x8
- stack 0: 0x380
864	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
865	 F7	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
866	 F9	ADD		 	 
- stack 0: 0x4C8
867	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
868	 FB	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x100050401CCFFFF0099000700B30000015520000168FFFF00E60009010004E8
869	 FC	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x100050401CCFFFF0099000700B30000015520000168FFFF00E60009010004E8
- stack 0: 0xF0
870	 FE	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x100
871	 FF	JUMP		 	 
- stack 0: 0x4C8
872	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x4C8
873	 101	PUSH2	0060	 	 
- stack 1: 0x4C8
- stack 0: 0x60
874	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C8
- stack 0: 0x7FFFFFFF
875	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
876	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0x7FFFFFFF
877	 10B	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
878	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
879	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
880	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
881	 115	SUB		 	 
- stack 1: 0x4C8
- stack 0: 0x0
882	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x11E
883	 119	JUMPI		 	 
- stack 0: 0x4C8
884	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x4C8
- stack 0: 0x138
885	 11D	JUMP		 	 
- stack 0: 0x4C8
886	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x4C8
887	 139	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
888	 13B	ADD		 	 
- stack 0: 0x4CC
889	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
890	 13D	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1CCFFFF0099000700B30000015520000168FFFF00E60009010004E801CCFFFF
891	 13E	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x1CCFFFF0099000700B30000015520000168FFFF00E60009010004E801CCFFFF
- stack 0: 0xF0
892	 140	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x1CC
893	 141	JUMP		 	 
- stack 0: 0x4CC
894	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4CC
895	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
896	 1CE	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x1CCFFFF0099000700B30000015520000168FFFF00E60009010004E801CCFFFF
897	 1CF	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x1CCFFFF0099000700B30000015520000168FFFF00E60009010004E801CCFFFF
- stack 0: 0xE0
898	 1D1	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x1CCFFFF
899	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x1CCFFFF
- stack 0: 0xFFFF
900	 1D5	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFF
901	 1D6	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFF
- stack 0: 0x1
902	 1D8	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
903	 1D9	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
904	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x4CC
905	 1DD	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
906	 1DF	ADD		 	 
- stack 0: 0x4D0
907	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
908	 1E1	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x99000700B30000015520000168FFFF00E60009010004E801CCFFFF0099000E
909	 1E2	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x99000700B30000015520000168FFFF00E60009010004E801CCFFFF0099000E
- stack 0: 0xF0
910	 1E4	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x99
911	 1E5	JUMP		 	 
- stack 0: 0x4D0
912	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4D0
913	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
914	 9B	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x99000700B30000015520000168FFFF00E60009010004E801CCFFFF0099000E
915	 9C	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x99000700B30000015520000168FFFF00E60009010004E801CCFFFF0099000E
- stack 0: 0xE0
916	 9E	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x990007
917	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x990007
- stack 0: 0xFFFF
918	 A2	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x7
919	 A3	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x7
- stack 0: 0x1
920	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x7
921	 A6	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0x7
- stack 0: 0x40
922	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
923	 AA	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
924	 AC	ADD		 	 
- stack 0: 0x4D4
925	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
926	 AE	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0xB30000015520000168FFFF00E60009010004E801CCFFFF0099000E00B30000
927	 AF	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0xB30000015520000168FFFF00E60009010004E801CCFFFF0099000E00B30000
- stack 0: 0xF0
928	 B1	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0xB3
929	 B2	JUMP		 	 
- stack 0: 0x4D4
930	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x4D4
931	 B4	PUSH2	0020	 	 
- stack 1: 0x4D4
- stack 0: 0x20
932	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
933	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
934	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFF
935	 BE	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
936	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0x7
937	 C2	PUSH1	1F	 	 
- stack 3: 0x4D4
- stack 2: 0xFFFFFFFF
- stack 1: 0x7
- stack 0: 0x1F
938	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFF
- stack 0: 0x7
939	 C5	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1FFFFFF
940	 C6	PUSH2	0060	 	 
- stack 2: 0x4D4
- stack 1: 0x1FFFFFF
- stack 0: 0x60
941	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D4
942	 CA	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
943	 CC	ADD		 	 
- stack 0: 0x4D8
944	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
945	 CE	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x15520000168FFFF00E60009010004E801CCFFFF0099000E00B3000001870040
946	 CF	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x15520000168FFFF00E60009010004E801CCFFFF0099000E00B3000001870040
- stack 0: 0xF0
947	 D1	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x155
948	 D2	JUMP		 	 
- stack 0: 0x4D8
949	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x4D8
950	 156	PUSH4	02000000	 	 
- stack 1: 0x4D8
- stack 0: 0x2000000
951	 15B	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0x2000000
- stack 0: 0x3A0
952	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
953	 15F	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
954	 161	ADD		 	 
- stack 0: 0x4DC
955	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
956	 163	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x168FFFF00E60009010004E801CCFFFF0099000E00B30000018700400168FFFF
957	 164	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x168FFFF00E60009010004E801CCFFFF0099000E00B30000018700400168FFFF
- stack 0: 0xF0
958	 166	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x168
959	 167	JUMP		 	 
- stack 0: 0x4DC
960	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4DC
961	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
962	 16A	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x168FFFF00E60009010004E801CCFFFF0099000E00B30000018700400168FFFF
963	 16B	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x168FFFF00E60009010004E801CCFFFF0099000E00B30000018700400168FFFF
- stack 0: 0xE0
964	 16D	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x168FFFF
965	 16E	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
966	 171	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFF
967	 172	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFF
- stack 0: 0x1
968	 174	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
969	 175	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
970	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x2000000
971	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x4DC
- stack 0: 0x1FFFFFF
972	 17A	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x1FFFFFF
- stack 0: 0x3A0
973	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
974	 17E	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
975	 180	ADD		 	 
- stack 0: 0x4E0
976	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
977	 182	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE60009010004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A
978	 183	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0xE60009010004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A
- stack 0: 0xF0
979	 185	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE6
980	 186	JUMP		 	 
- stack 0: 0x4E0
981	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
982	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
983	 E8	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0xE60009010004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A
984	 E9	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0xE60009010004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A
- stack 0: 0xE0
985	 EB	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0xE60009
986	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0xE60009
- stack 0: 0xFFFF
987	 EF	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
988	 F0	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x1
989	 F2	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x9
990	 F3	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x9
- stack 0: 0x380
991	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
992	 F7	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
993	 F9	ADD		 	 
- stack 0: 0x4E4
994	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
995	 FB	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x10004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC
996	 FC	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x10004E801CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC
- stack 0: 0xF0
997	 FE	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x100
998	 FF	JUMP		 	 
- stack 0: 0x4E4
999	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x4E4
1000	 101	PUSH2	0060	 	 
- stack 1: 0x4E4
- stack 0: 0x60
1001	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x4E4
- stack 0: 0x1FFFFFF
1002	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x1FFFFFF
- stack 0: 0xFFFFFFFF
1003	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0x1FFFFFF
1004	 10B	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0x1FFFFFF
- stack 0: 0x3A0
1005	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0x1FFFFFF
- stack 0: 0x1FFFFFF
1006	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0x1FFFFFF
- stack 1: 0x1FFFFFF
- stack 0: 0xFFFFFFFF
1007	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0x1FFFFFF
- stack 0: 0x1FFFFFF
1008	 115	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
1009	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x11E
1010	 119	JUMPI		 	 
- stack 0: 0x4E4
1011	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x4E4
- stack 0: 0x138
1012	 11D	JUMP		 	 
- stack 0: 0x4E4
1013	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x4E4
1014	 139	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1015	 13B	ADD		 	 
- stack 0: 0x4E8
1016	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1017	 13D	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF
1018	 13E	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF
- stack 0: 0xF0
1019	 140	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1CC
1020	 141	JUMP		 	 
- stack 0: 0x4E8
1021	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4E8
1022	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1023	 1CE	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF
1024	 1CF	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x1CCFFFF0099000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF
- stack 0: 0xE0
1025	 1D1	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1CCFFFF
1026	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1CCFFFF
- stack 0: 0xFFFF
1027	 1D5	AND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFF
1028	 1D6	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFF
- stack 0: 0x1
1029	 1D8	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1030	 1D9	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1031	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
1032	 1DD	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1033	 1DF	ADD		 	 
- stack 0: 0x4EC
1034	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1035	 1E1	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F
1036	 1E2	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x99000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F
- stack 0: 0xF0
1037	 1E4	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99
1038	 1E5	JUMP		 	 
- stack 0: 0x4EC
1039	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4EC
1040	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1041	 9B	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F
1042	 9C	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x99000E00B30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F
- stack 0: 0xE0
1043	 9E	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99000E
1044	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x99000E
- stack 0: 0xFFFF
1045	 A2	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xE
1046	 A3	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xE
- stack 0: 0x1
1047	 A5	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xE
1048	 A6	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xE
- stack 0: 0x40
1049	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1050	 AA	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1051	 AC	ADD		 	 
- stack 0: 0x4F0
1052	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1053	 AE	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xB30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F00B30000
1054	 AF	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xB30000018700400168FFFF00E6000A010004CC01CCFFFF0099001F00B30000
- stack 0: 0xF0
1055	 B1	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xB3
1056	 B2	JUMP		 	 
- stack 0: 0x4F0
1057	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x4F0
1058	 B4	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1059	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1060	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1061	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0xFFFFFFFF
1062	 BE	PUSH2	0040	 	 
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
1063	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0xE
1064	 C2	PUSH1	1F	 	 
- stack 3: 0x4F0
- stack 2: 0xFFFFFFFF
- stack 1: 0xE
- stack 0: 0x1F
1065	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x4F0
- stack 1: 0xFFFFFFFF
- stack 0: 0xE
1066	 C5	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x3FFFF
1067	 C6	PUSH2	0060	 	 
- stack 2: 0x4F0
- stack 1: 0x3FFFF
- stack 0: 0x60
1068	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F0
1069	 CA	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1070	 CC	ADD		 	 
- stack 0: 0x4F4
1071	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1072	 CE	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x18700400168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E60001
1073	 CF	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x18700400168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E60001
- stack 0: 0xF0
1074	 D1	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x187
1075	 D2	JUMP		 	 
- stack 0: 0x4F4
1076	 187	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x4F4
1077	 188	PUSH4	00040000	 	 
- stack 1: 0x4F4
- stack 0: 0x40000
1078	 18D	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x40000
- stack 0: 0x3A0
1079	 190	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1080	 191	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1081	 193	ADD		 	 
- stack 0: 0x4F8
1082	 194	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1083	 195	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B
1084	 196	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B
- stack 0: 0xF0
1085	 198	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x168
1086	 199	JUMP		 	 
- stack 0: 0x4F8
1087	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4F8
1088	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1089	 16A	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B
1090	 16B	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x168FFFF00E6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B
- stack 0: 0xE0
1091	 16D	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x168FFFF
1092	 16E	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
1093	 171	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFF
1094	 172	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFF
- stack 0: 0x1
1095	 174	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1096	 175	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1097	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40000
1098	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F8
- stack 0: 0x3FFFF
1099	 17A	PUSH2	03A0	 	 
- stack 2: 0x4F8
- stack 1: 0x3FFFF
- stack 0: 0x3A0
1100	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F8
1101	 17E	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1102	 180	ADD		 	 
- stack 0: 0x4FC
1103	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1104	 182	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B4
1105	 183	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0xE6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B4
- stack 0: 0xF0
1106	 185	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE6
1107	 186	JUMP		 	 
- stack 0: 0x4FC
1108	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4FC
1109	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4FC
- stack 0: 0x4FC
1110	 E8	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0xE6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B4
1111	 E9	PUSH1	E0	 	 
- stack 2: 0x4FC
- stack 1: 0xE6000A010004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B4
- stack 0: 0xE0
1112	 EB	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0xE6000A
1113	 EC	PUSH2	FFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xE6000A
- stack 0: 0xFFFF
1114	 EF	AND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1115	 F0	PUSH1	01	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x1
1116	 F2	SIGNEXTEND		 	 
- stack 1: 0x4FC
- stack 0: 0xA
1117	 F3	PUSH2	0380	 	 
- stack 2: 0x4FC
- stack 1: 0xA
- stack 0: 0x380
1118	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4FC
1119	 F7	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1120	 F9	ADD		 	 
- stack 0: 0x500
1121	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1122	 FB	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x10004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B402131212
1123	 FC	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x10004CC01CCFFFF0099001F00B3000001E6000100E6000B010004B402131212
- stack 0: 0xF0
1124	 FE	SHR		 	 
- stack 1: 0x500
- stack 0: 0x100
1125	 FF	JUMP		 	 
- stack 0: 0x500
1126	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x500
1127	 101	PUSH2	0060	 	 
- stack 1: 0x500
- stack 0: 0x60
1128	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x500
- stack 0: 0x3FFFF
1129	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x500
- stack 1: 0x3FFFF
- stack 0: 0xFFFFFFFF
1130	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x500
- stack 0: 0x3FFFF
1131	 10B	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x3FFFF
- stack 0: 0x3A0
1132	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x500
- stack 1: 0x3FFFF
- stack 0: 0x3FFFF
1133	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x500
- stack 2: 0x3FFFF
- stack 1: 0x3FFFF
- stack 0: 0xFFFFFFFF
1134	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x500
- stack 1: 0x3FFFF
- stack 0: 0x3FFFF
1135	 115	SUB		 	 
- stack 1: 0x500
- stack 0: 0x0
1136	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x11E
1137	 119	JUMPI		 	 
- stack 0: 0x500
1138	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x500
- stack 0: 0x138
1139	 11D	JUMP		 	 
- stack 0: 0x500
1140	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x500
1141	 139	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1142	 13B	ADD		 	 
- stack 0: 0x504
1143	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1144	 13D	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x1CCFFFF0099001F00B3000001E6000100E6000B010004B402131212019A0121
1145	 13E	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x1CCFFFF0099001F00B3000001E6000100E6000B010004B402131212019A0121
- stack 0: 0xF0
1146	 140	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1CC
1147	 141	JUMP		 	 
- stack 0: 0x504
1148	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x504
1149	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1150	 1CE	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x1CCFFFF0099001F00B3000001E6000100E6000B010004B402131212019A0121
1151	 1CF	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x1CCFFFF0099001F00B3000001E6000100E6000B010004B402131212019A0121
- stack 0: 0xE0
1152	 1D1	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1CCFFFF
1153	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1CCFFFF
- stack 0: 0xFFFF
1154	 1D5	AND		 	 
- stack 1: 0x504
- stack 0: 0xFFFF
1155	 1D6	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0xFFFF
- stack 0: 0x1
1156	 1D8	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1157	 1D9	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1158	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1159	 1DD	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1160	 1DF	ADD		 	 
- stack 0: 0x508
1161	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1162	 1E1	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99001F00B3000001E6000100E6000B010004B402131212019A012100990000
1163	 1E2	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99001F00B3000001E6000100E6000B010004B402131212019A012100990000
- stack 0: 0xF0
1164	 1E4	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1165	 1E5	JUMP		 	 
- stack 0: 0x508
1166	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x508
1167	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1168	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99001F00B3000001E6000100E6000B010004B402131212019A012100990000
1169	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99001F00B3000001E6000100E6000B010004B402131212019A012100990000
- stack 0: 0xE0
1170	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99001F
1171	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99001F
- stack 0: 0xFFFF
1172	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0x1F
1173	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0x1F
- stack 0: 0x1
1174	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0x1F
1175	 A6	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0x1F
- stack 0: 0x40
1176	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x508
1177	 AA	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1178	 AC	ADD		 	 
- stack 0: 0x50C
1179	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1180	 AE	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB3000001E6000100E6000B010004B402131212019A01210099000000B30000
1181	 AF	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB3000001E6000100E6000B010004B402131212019A01210099000000B30000
- stack 0: 0xF0
1182	 B1	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB3
1183	 B2	JUMP		 	 
- stack 0: 0x50C
1184	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x50C
1185	 B4	PUSH2	0020	 	 
- stack 1: 0x50C
- stack 0: 0x20
1186	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1187	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1188	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0xFFFFFFFF
1189	 BE	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFF
- stack 0: 0x40
1190	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x50C
- stack 1: 0xFFFFFFFF
- stack 0: 0x1F
1191	 C2	PUSH1	1F	 	 
- stack 3: 0x50C
- stack 2: 0xFFFFFFFF
- stack 1: 0x1F
- stack 0: 0x1F
1192	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x50C
- stack 1: 0xFFFFFFFF
- stack 0: 0x1F
1193	 C5	SHR		 	 
- stack 1: 0x50C
- stack 0: 0x1
1194	 C6	PUSH2	0060	 	 
- stack 2: 0x50C
- stack 1: 0x1
- stack 0: 0x60
1195	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x50C
1196	 CA	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1197	 CC	ADD		 	 
- stack 0: 0x510
1198	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1199	 CE	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E6000100E6000B010004B402131212019A01210099000000B3000002261212
1200	 CF	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1E6000100E6000B010004B402131212019A01210099000000B3000002261212
- stack 0: 0xF0
1201	 D1	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E6
1202	 D2	JUMP		 	 
- stack 0: 0x510
1203	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x510
1204	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1205	 1E8	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1E6000100E6000B010004B402131212019A01210099000000B3000002261212
1206	 1E9	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x1E6000100E6000B010004B402131212019A01210099000000B3000002261212
- stack 0: 0xE0
1207	 1EB	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1E60001
1208	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x1E60001
- stack 0: 0xFFFF
1209	 1EF	AND		 	 
- stack 1: 0x510
- stack 0: 0x1
1210	 1F0	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x1
- stack 0: 0x1
1211	 1F2	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x1
1212	 1F3	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0x1
- stack 0: 0x3A0
1213	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x510
1214	 1F7	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1215	 1F9	ADD		 	 
- stack 0: 0x514
1216	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1217	 1FB	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xE6000B010004B402131212019A01210099000000B300000226121201680121
1218	 1FC	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xE6000B010004B402131212019A01210099000000B300000226121201680121
- stack 0: 0xF0
1219	 1FE	SHR		 	 
- stack 1: 0x514
- stack 0: 0xE6
1220	 1FF	JUMP		 	 
- stack 0: 0x514
1221	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x514
1222	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1223	 E8	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xE6000B010004B402131212019A01210099000000B300000226121201680121
1224	 E9	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xE6000B010004B402131212019A01210099000000B300000226121201680121
- stack 0: 0xE0
1225	 EB	SHR		 	 
- stack 1: 0x514
- stack 0: 0xE6000B
1226	 EC	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0xE6000B
- stack 0: 0xFFFF
1227	 EF	AND		 	 
- stack 1: 0x514
- stack 0: 0xB
1228	 F0	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0xB
- stack 0: 0x1
1229	 F2	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0xB
1230	 F3	PUSH2	0380	 	 
- stack 2: 0x514
- stack 1: 0xB
- stack 0: 0x380
1231	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x514
1232	 F7	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1233	 F9	ADD		 	 
- stack 0: 0x518
1234	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1235	 FB	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x10004B402131212019A01210099000000B30000022612120168012100E6000C
1236	 FC	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x10004B402131212019A01210099000000B30000022612120168012100E6000C
- stack 0: 0xF0
1237	 FE	SHR		 	 
- stack 1: 0x518
- stack 0: 0x100
1238	 FF	JUMP		 	 
- stack 0: 0x518
1239	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x518
1240	 101	PUSH2	0060	 	 
- stack 1: 0x518
- stack 0: 0x60
1241	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x518
- stack 0: 0x1
1242	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1243	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x1
1244	 10B	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x3A0
1245	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1246	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x518
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1247	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x518
- stack 1: 0x1
- stack 0: 0x1
1248	 115	SUB		 	 
- stack 1: 0x518
- stack 0: 0x0
1249	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x11E
1250	 119	JUMPI		 	 
- stack 0: 0x518
1251	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x518
- stack 0: 0x138
1252	 11D	JUMP		 	 
- stack 0: 0x518
1253	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x518
1254	 139	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1255	 13B	ADD		 	 
- stack 0: 0x51C
1256	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1257	 13D	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x2131212019A01210099000000B30000022612120168012100E6000C01000494
1258	 13E	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x2131212019A01210099000000B30000022612120168012100E6000C01000494
- stack 0: 0xF0
1259	 140	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x213
1260	 141	JUMP		 	 
- stack 0: 0x51C
1261	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x51C
1262	 214	PUSH4	21212000	 	 
- stack 1: 0x51C
- stack 0: 0x21212000
1263	 219	PUSH2	0020	 	 
- stack 2: 0x51C
- stack 1: 0x21212000
- stack 0: 0x20
1264	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x51C
1265	 21D	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1266	 21F	ADD		 	 
- stack 0: 0x520
1267	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1268	 221	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x19A01210099000000B30000022612120168012100E6000C0100049402131212
1269	 222	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x19A01210099000000B30000022612120168012100E6000C0100049402131212
- stack 0: 0xF0
1270	 224	SHR		 	 
- stack 1: 0x520
- stack 0: 0x19A
1271	 225	JUMP		 	 
- stack 0: 0x520
1272	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x520
1273	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1274	 19C	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x19A01210099000000B30000022612120168012100E6000C0100049402131212
1275	 19D	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x19A01210099000000B30000022612120168012100E6000C0100049402131212
- stack 0: 0xE0
1276	 19F	SHR		 	 
- stack 1: 0x520
- stack 0: 0x19A0121
1277	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1278	 1A3	AND		 	 
- stack 1: 0x520
- stack 0: 0x121
1279	 1A4	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x121
- stack 0: 0x1
1280	 1A6	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x121
1281	 1A7	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x121
- stack 0: 0x20
1282	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x520
- stack 1: 0x121
- stack 0: 0x21212000
1283	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x520
- stack 0: 0x21212121
1284	 1AC	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x21212121
- stack 0: 0x20
1285	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1286	 1B0	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1287	 1B2	ADD		 	 
- stack 0: 0x524
1288	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1289	 1B4	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x99000000B30000022612120168012100E6000C0100049402131212019A0121
1290	 1B5	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x99000000B30000022612120168012100E6000C0100049402131212019A0121
- stack 0: 0xF0
1291	 1B7	SHR		 	 
- stack 1: 0x524
- stack 0: 0x99
1292	 1B8	JUMP		 	 
- stack 0: 0x524
1293	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x524
1294	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1295	 9B	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x99000000B30000022612120168012100E6000C0100049402131212019A0121
1296	 9C	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x99000000B30000022612120168012100E6000C0100049402131212019A0121
- stack 0: 0xE0
1297	 9E	SHR		 	 
- stack 1: 0x524
- stack 0: 0x990000
1298	 9F	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x990000
- stack 0: 0xFFFF
1299	 A2	AND		 	 
- stack 1: 0x524
- stack 0: 0x0
1300	 A3	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1
1301	 A5	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0x0
1302	 A6	PUSH2	0040	 	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x40
1303	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x524
1304	 AA	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1305	 AC	ADD		 	 
- stack 0: 0x528
1306	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1307	 AE	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xB30000022612120168012100E6000C0100049402131212019A012100990001
1308	 AF	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xB30000022612120168012100E6000C0100049402131212019A012100990001
- stack 0: 0xF0
1309	 B1	SHR		 	 
- stack 1: 0x528
- stack 0: 0xB3
1310	 B2	JUMP		 	 
- stack 0: 0x528
1311	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x528
1312	 B4	PUSH2	0020	 	 
- stack 1: 0x528
- stack 0: 0x20
1313	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x528
- stack 0: 0x21212121
1314	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1315	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x21212121
1316	 BE	PUSH2	0040	 	 
- stack 2: 0x528
- stack 1: 0x21212121
- stack 0: 0x40
1317	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x528
- stack 1: 0x21212121
- stack 0: 0x0
1318	 C2	PUSH1	1F	 	 
- stack 3: 0x528
- stack 2: 0x21212121
- stack 1: 0x0
- stack 0: 0x1F
1319	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x528
- stack 1: 0x21212121
- stack 0: 0x0
1320	 C5	SHR		 	 
- stack 1: 0x528
- stack 0: 0x21212121
1321	 C6	PUSH2	0060	 	 
- stack 2: 0x528
- stack 1: 0x21212121
- stack 0: 0x60
1322	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x528
1323	 CA	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1324	 CC	ADD		 	 
- stack 0: 0x52C
1325	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1326	 CE	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x22612120168012100E6000C0100049402131212019A01210099000100B30000
1327	 CF	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x22612120168012100E6000C0100049402131212019A01210099000100B30000
- stack 0: 0xF0
1328	 D1	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x226
1329	 D2	JUMP		 	 
- stack 0: 0x52C
1330	 226	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x52C
1331	 227	PUSH4	21212000	 	 
- stack 1: 0x52C
- stack 0: 0x21212000
1332	 22C	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0x21212000
- stack 0: 0x3A0
1333	 22F	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1334	 230	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1335	 232	ADD		 	 
- stack 0: 0x530
1336	 233	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1337	 234	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x168012100E6000C0100049402131212019A01210099000100B3000002390909
1338	 235	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x168012100E6000C0100049402131212019A01210099000100B3000002390909
- stack 0: 0xF0
1339	 237	SHR		 	 
- stack 1: 0x530
- stack 0: 0x168
1340	 238	JUMP		 	 
- stack 0: 0x530
1341	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x530
1342	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1343	 16A	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x168012100E6000C0100049402131212019A01210099000100B3000002390909
1344	 16B	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x168012100E6000C0100049402131212019A01210099000100B3000002390909
- stack 0: 0xE0
1345	 16D	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1680121
1346	 16E	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1680121
- stack 0: 0xFFFF
1347	 171	AND		 	 
- stack 1: 0x530
- stack 0: 0x121
1348	 172	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x1
1349	 174	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x121
1350	 175	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x3A0
1351	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x21212000
1352	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x530
- stack 0: 0x21212121
1353	 17A	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x21212121
- stack 0: 0x3A0
1354	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1355	 17E	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1356	 180	ADD		 	 
- stack 0: 0x534
1357	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1358	 182	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xE6000C0100049402131212019A01210099000100B300000239090901680090
1359	 183	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xE6000C0100049402131212019A01210099000100B300000239090901680090
- stack 0: 0xF0
1360	 185	SHR		 	 
- stack 1: 0x534
- stack 0: 0xE6
1361	 186	JUMP		 	 
- stack 0: 0x534
1362	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x534
1363	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1364	 E8	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xE6000C0100049402131212019A01210099000100B300000239090901680090
1365	 E9	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0xE6000C0100049402131212019A01210099000100B300000239090901680090
- stack 0: 0xE0
1366	 EB	SHR		 	 
- stack 1: 0x534
- stack 0: 0xE6000C
1367	 EC	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0xE6000C
- stack 0: 0xFFFF
1368	 EF	AND		 	 
- stack 1: 0x534
- stack 0: 0xC
1369	 F0	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xC
- stack 0: 0x1
1370	 F2	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xC
1371	 F3	PUSH2	0380	 	 
- stack 2: 0x534
- stack 1: 0xC
- stack 0: 0x380
1372	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x534
1373	 F7	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1374	 F9	ADD		 	 
- stack 0: 0x538
1375	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1376	 FB	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x100049402131212019A01210099000100B30000023909090168009000E6000D
1377	 FC	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x100049402131212019A01210099000100B30000023909090168009000E6000D
- stack 0: 0xF0
1378	 FE	SHR		 	 
- stack 1: 0x538
- stack 0: 0x100
1379	 FF	JUMP		 	 
- stack 0: 0x538
1380	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x538
1381	 101	PUSH2	0060	 	 
- stack 1: 0x538
- stack 0: 0x60
1382	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x538
- stack 0: 0x21212121
1383	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1384	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0x21212121
1385	 10B	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0x21212121
- stack 0: 0x3A0
1386	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x538
- stack 1: 0x21212121
- stack 0: 0x21212121
1387	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1388	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x538
- stack 1: 0x21212121
- stack 0: 0x21212121
1389	 115	SUB		 	 
- stack 1: 0x538
- stack 0: 0x0
1390	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x11E
1391	 119	JUMPI		 	 
- stack 0: 0x538
1392	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x538
- stack 0: 0x138
1393	 11D	JUMP		 	 
- stack 0: 0x538
1394	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x538
1395	 139	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1396	 13B	ADD		 	 
- stack 0: 0x53C
1397	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1398	 13D	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x2131212019A01210099000100B30000023909090168009000E6000D01000474
1399	 13E	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x2131212019A01210099000100B30000023909090168009000E6000D01000474
- stack 0: 0xF0
1400	 140	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x213
1401	 141	JUMP		 	 
- stack 0: 0x53C
1402	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x53C
1403	 214	PUSH4	21212000	 	 
- stack 1: 0x53C
- stack 0: 0x21212000
1404	 219	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0x21212000
- stack 0: 0x20
1405	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1406	 21D	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1407	 21F	ADD		 	 
- stack 0: 0x540
1408	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1409	 221	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x19A01210099000100B30000023909090168009000E6000D0100047402131212
1410	 222	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x19A01210099000100B30000023909090168009000E6000D0100047402131212
- stack 0: 0xF0
1411	 224	SHR		 	 
- stack 1: 0x540
- stack 0: 0x19A
1412	 225	JUMP		 	 
- stack 0: 0x540
1413	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x540
1414	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1415	 19C	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x19A01210099000100B30000023909090168009000E6000D0100047402131212
1416	 19D	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x19A01210099000100B30000023909090168009000E6000D0100047402131212
- stack 0: 0xE0
1417	 19F	SHR		 	 
- stack 1: 0x540
- stack 0: 0x19A0121
1418	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1419	 1A3	AND		 	 
- stack 1: 0x540
- stack 0: 0x121
1420	 1A4	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x121
- stack 0: 0x1
1421	 1A6	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x121
1422	 1A7	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x121
- stack 0: 0x20
1423	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0x121
- stack 0: 0x21212000
1424	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0x21212121
1425	 1AC	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x21212121
- stack 0: 0x20
1426	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1427	 1B0	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1428	 1B2	ADD		 	 
- stack 0: 0x544
1429	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1430	 1B4	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99000100B30000023909090168009000E6000D0100047402131212019A0121
1431	 1B5	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x99000100B30000023909090168009000E6000D0100047402131212019A0121
- stack 0: 0xF0
1432	 1B7	SHR		 	 
- stack 1: 0x544
- stack 0: 0x99
1433	 1B8	JUMP		 	 
- stack 0: 0x544
1434	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x544
1435	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1436	 9B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x99000100B30000023909090168009000E6000D0100047402131212019A0121
1437	 9C	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x99000100B30000023909090168009000E6000D0100047402131212019A0121
- stack 0: 0xE0
1438	 9E	SHR		 	 
- stack 1: 0x544
- stack 0: 0x990001
1439	 9F	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x990001
- stack 0: 0xFFFF
1440	 A2	AND		 	 
- stack 1: 0x544
- stack 0: 0x1
1441	 A3	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x1
1442	 A5	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0x1
1443	 A6	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0x1
- stack 0: 0x40
1444	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1445	 AA	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1446	 AC	ADD		 	 
- stack 0: 0x548
1447	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1448	 AE	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xB30000023909090168009000E6000D0100047402131212019A012100990007
1449	 AF	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xB30000023909090168009000E6000D0100047402131212019A012100990007
- stack 0: 0xF0
1450	 B1	SHR		 	 
- stack 1: 0x548
- stack 0: 0xB3
1451	 B2	JUMP		 	 
- stack 0: 0x548
1452	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x548
1453	 B4	PUSH2	0020	 	 
- stack 1: 0x548
- stack 0: 0x20
1454	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x548
- stack 0: 0x21212121
1455	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x548
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1456	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x548
- stack 0: 0x21212121
1457	 BE	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0x21212121
- stack 0: 0x40
1458	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x548
- stack 1: 0x21212121
- stack 0: 0x1
1459	 C2	PUSH1	1F	 	 
- stack 3: 0x548
- stack 2: 0x21212121
- stack 1: 0x1
- stack 0: 0x1F
1460	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x548
- stack 1: 0x21212121
- stack 0: 0x1
1461	 C5	SHR		 	 
- stack 1: 0x548
- stack 0: 0x10909090
1462	 C6	PUSH2	0060	 	 
- stack 2: 0x548
- stack 1: 0x10909090
- stack 0: 0x60
1463	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x548
1464	 CA	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1465	 CC	ADD		 	 
- stack 0: 0x54C
1466	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1467	 CE	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x23909090168009000E6000D0100047402131212019A01210099000700B30000
1468	 CF	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x23909090168009000E6000D0100047402131212019A01210099000700B30000
- stack 0: 0xF0
1469	 D1	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x239
1470	 D2	JUMP		 	 
- stack 0: 0x54C
1471	 239	JUMPDEST		 ;; __riscvimpl_LUI_10909eb7	  ;; # instr: lui t4,0x10909(ignore imm)
- stack 0: 0x54C
1472	 23A	PUSH4	10909000	 	 
- stack 1: 0x54C
- stack 0: 0x10909000
1473	 23F	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0x10909000
- stack 0: 0x3A0
1474	 242	MSTORE		 	  ;; # store to x29
- stack 0: 0x54C
1475	 243	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1476	 245	ADD		 	 
- stack 0: 0x550
1477	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1478	 247	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x168009000E6000D0100047402131212019A01210099000700B30000024C0424
1479	 248	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x168009000E6000D0100047402131212019A01210099000700B30000024C0424
- stack 0: 0xF0
1480	 24A	SHR		 	 
- stack 1: 0x550
- stack 0: 0x168
1481	 24B	JUMP		 	 
- stack 0: 0x550
1482	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x550
1483	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1484	 16A	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x168009000E6000D0100047402131212019A01210099000700B30000024C0424
1485	 16B	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x168009000E6000D0100047402131212019A01210099000700B30000024C0424
- stack 0: 0xE0
1486	 16D	SHR		 	 
- stack 1: 0x550
- stack 0: 0x1680090
1487	 16E	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x1680090
- stack 0: 0xFFFF
1488	 171	AND		 	 
- stack 1: 0x550
- stack 0: 0x90
1489	 172	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x90
- stack 0: 0x1
1490	 174	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x90
1491	 175	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0x90
- stack 0: 0x3A0
1492	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x550
- stack 1: 0x90
- stack 0: 0x10909000
1493	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x550
- stack 0: 0x10909090
1494	 17A	PUSH2	03A0	 	 
- stack 2: 0x550
- stack 1: 0x10909090
- stack 0: 0x3A0
1495	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x550
1496	 17E	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1497	 180	ADD		 	 
- stack 0: 0x554
1498	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1499	 182	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xE6000D0100047402131212019A01210099000700B30000024C042401680242
1500	 183	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0xE6000D0100047402131212019A01210099000700B30000024C042401680242
- stack 0: 0xF0
1501	 185	SHR		 	 
- stack 1: 0x554
- stack 0: 0xE6
1502	 186	JUMP		 	 
- stack 0: 0x554
1503	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x554
1504	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1505	 E8	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0xE6000D0100047402131212019A01210099000700B30000024C042401680242
1506	 E9	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0xE6000D0100047402131212019A01210099000700B30000024C042401680242
- stack 0: 0xE0
1507	 EB	SHR		 	 
- stack 1: 0x554
- stack 0: 0xE6000D
1508	 EC	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0xE6000D
- stack 0: 0xFFFF
1509	 EF	AND		 	 
- stack 1: 0x554
- stack 0: 0xD
1510	 F0	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x1
1511	 F2	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0xD
1512	 F3	PUSH2	0380	 	 
- stack 2: 0x554
- stack 1: 0xD
- stack 0: 0x380
1513	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x554
1514	 F7	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1515	 F9	ADD		 	 
- stack 0: 0x558
1516	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1517	 FB	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x100047402131212019A01210099000700B30000024C04240168024200E6000E
1518	 FC	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x100047402131212019A01210099000700B30000024C04240168024200E6000E
- stack 0: 0xF0
1519	 FE	SHR		 	 
- stack 1: 0x558
- stack 0: 0x100
1520	 FF	JUMP		 	 
- stack 0: 0x558
1521	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x558
1522	 101	PUSH2	0060	 	 
- stack 1: 0x558
- stack 0: 0x60
1523	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x558
- stack 0: 0x10909090
1524	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x558
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
1525	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x558
- stack 0: 0x10909090
1526	 10B	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0x10909090
- stack 0: 0x3A0
1527	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0x10909090
- stack 0: 0x10909090
1528	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x558
- stack 2: 0x10909090
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
1529	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x558
- stack 1: 0x10909090
- stack 0: 0x10909090
1530	 115	SUB		 	 
- stack 1: 0x558
- stack 0: 0x0
1531	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x558
- stack 1: 0x0
- stack 0: 0x11E
1532	 119	JUMPI		 	 
- stack 0: 0x558
1533	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x558
- stack 0: 0x138
1534	 11D	JUMP		 	 
- stack 0: 0x558
1535	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x558
1536	 139	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1537	 13B	ADD		 	 
- stack 0: 0x55C
1538	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1539	 13D	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x2131212019A01210099000700B30000024C04240168024200E6000E01000454
1540	 13E	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x2131212019A01210099000700B30000024C04240168024200E6000E01000454
- stack 0: 0xF0
1541	 140	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x213
1542	 141	JUMP		 	 
- stack 0: 0x55C
1543	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x55C
1544	 214	PUSH4	21212000	 	 
- stack 1: 0x55C
- stack 0: 0x21212000
1545	 219	PUSH2	0020	 	 
- stack 2: 0x55C
- stack 1: 0x21212000
- stack 0: 0x20
1546	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x55C
1547	 21D	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1548	 21F	ADD		 	 
- stack 0: 0x560
1549	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1550	 221	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x19A01210099000700B30000024C04240168024200E6000E0100045402131212
1551	 222	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x19A01210099000700B30000024C04240168024200E6000E0100045402131212
- stack 0: 0xF0
1552	 224	SHR		 	 
- stack 1: 0x560
- stack 0: 0x19A
1553	 225	JUMP		 	 
- stack 0: 0x560
1554	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x560
1555	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1556	 19C	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x19A01210099000700B30000024C04240168024200E6000E0100045402131212
1557	 19D	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x19A01210099000700B30000024C04240168024200E6000E0100045402131212
- stack 0: 0xE0
1558	 19F	SHR		 	 
- stack 1: 0x560
- stack 0: 0x19A0121
1559	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1560	 1A3	AND		 	 
- stack 1: 0x560
- stack 0: 0x121
1561	 1A4	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0x121
- stack 0: 0x1
1562	 1A6	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0x121
1563	 1A7	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x121
- stack 0: 0x20
1564	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0x121
- stack 0: 0x21212000
1565	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x560
- stack 0: 0x21212121
1566	 1AC	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x21212121
- stack 0: 0x20
1567	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x560
1568	 1B0	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1569	 1B2	ADD		 	 
- stack 0: 0x564
1570	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1571	 1B4	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x99000700B30000024C04240168024200E6000E0100045402131212019A0121
1572	 1B5	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x99000700B30000024C04240168024200E6000E0100045402131212019A0121
- stack 0: 0xF0
1573	 1B7	SHR		 	 
- stack 1: 0x564
- stack 0: 0x99
1574	 1B8	JUMP		 	 
- stack 0: 0x564
1575	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x564
1576	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1577	 9B	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x99000700B30000024C04240168024200E6000E0100045402131212019A0121
1578	 9C	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x99000700B30000024C04240168024200E6000E0100045402131212019A0121
- stack 0: 0xE0
1579	 9E	SHR		 	 
- stack 1: 0x564
- stack 0: 0x990007
1580	 9F	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x990007
- stack 0: 0xFFFF
1581	 A2	AND		 	 
- stack 1: 0x564
- stack 0: 0x7
1582	 A3	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x7
- stack 0: 0x1
1583	 A5	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x7
1584	 A6	PUSH2	0040	 	 
- stack 2: 0x564
- stack 1: 0x7
- stack 0: 0x40
1585	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x564
1586	 AA	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1587	 AC	ADD		 	 
- stack 0: 0x568
1588	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1589	 AE	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xB30000024C04240168024200E6000E0100045402131212019A01210099000E
1590	 AF	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xB30000024C04240168024200E6000E0100045402131212019A01210099000E
- stack 0: 0xF0
1591	 B1	SHR		 	 
- stack 1: 0x568
- stack 0: 0xB3
1592	 B2	JUMP		 	 
- stack 0: 0x568
1593	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x568
1594	 B4	PUSH2	0020	 	 
- stack 1: 0x568
- stack 0: 0x20
1595	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x568
- stack 0: 0x21212121
1596	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x568
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1597	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x568
- stack 0: 0x21212121
1598	 BE	PUSH2	0040	 	 
- stack 2: 0x568
- stack 1: 0x21212121
- stack 0: 0x40
1599	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x568
- stack 1: 0x21212121
- stack 0: 0x7
1600	 C2	PUSH1	1F	 	 
- stack 3: 0x568
- stack 2: 0x21212121
- stack 1: 0x7
- stack 0: 0x1F
1601	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x568
- stack 1: 0x21212121
- stack 0: 0x7
1602	 C5	SHR		 	 
- stack 1: 0x568
- stack 0: 0x424242
1603	 C6	PUSH2	0060	 	 
- stack 2: 0x568
- stack 1: 0x424242
- stack 0: 0x60
1604	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x568
1605	 CA	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1606	 CC	ADD		 	 
- stack 0: 0x56C
1607	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1608	 CE	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x24C04240168024200E6000E0100045402131212019A01210099000E00B30000
1609	 CF	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x24C04240168024200E6000E0100045402131212019A01210099000E00B30000
- stack 0: 0xF0
1610	 D1	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x24C
1611	 D2	JUMP		 	 
- stack 0: 0x56C
1612	 24C	JUMPDEST		 ;; __riscvimpl_LUI_424eb7	  ;; # instr: lui t4,0x424(ignore imm)
- stack 0: 0x56C
1613	 24D	PUSH4	00424000	 	 
- stack 1: 0x56C
- stack 0: 0x424000
1614	 252	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0x424000
- stack 0: 0x3A0
1615	 255	MSTORE		 	  ;; # store to x29
- stack 0: 0x56C
1616	 256	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1617	 258	ADD		 	 
- stack 0: 0x570
1618	 259	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1619	 25A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x168024200E6000E0100045402131212019A01210099000E00B30000025F0008
1620	 25B	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x168024200E6000E0100045402131212019A01210099000E00B30000025F0008
- stack 0: 0xF0
1621	 25D	SHR		 	 
- stack 1: 0x570
- stack 0: 0x168
1622	 25E	JUMP		 	 
- stack 0: 0x570
1623	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x570
1624	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1625	 16A	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x168024200E6000E0100045402131212019A01210099000E00B30000025F0008
1626	 16B	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x168024200E6000E0100045402131212019A01210099000E00B30000025F0008
- stack 0: 0xE0
1627	 16D	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1680242
1628	 16E	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1680242
- stack 0: 0xFFFF
1629	 171	AND		 	 
- stack 1: 0x570
- stack 0: 0x242
1630	 172	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x242
- stack 0: 0x1
1631	 174	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x242
1632	 175	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x242
- stack 0: 0x3A0
1633	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0x242
- stack 0: 0x424000
1634	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x570
- stack 0: 0x424242
1635	 17A	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x424242
- stack 0: 0x3A0
1636	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
1637	 17E	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1638	 180	ADD		 	 
- stack 0: 0x574
1639	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1640	 182	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xE6000E0100045402131212019A01210099000E00B30000025F000801680484
1641	 183	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xE6000E0100045402131212019A01210099000E00B30000025F000801680484
- stack 0: 0xF0
1642	 185	SHR		 	 
- stack 1: 0x574
- stack 0: 0xE6
1643	 186	JUMP		 	 
- stack 0: 0x574
1644	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x574
1645	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1646	 E8	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xE6000E0100045402131212019A01210099000E00B30000025F000801680484
1647	 E9	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xE6000E0100045402131212019A01210099000E00B30000025F000801680484
- stack 0: 0xE0
1648	 EB	SHR		 	 
- stack 1: 0x574
- stack 0: 0xE6000E
1649	 EC	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xE6000E
- stack 0: 0xFFFF
1650	 EF	AND		 	 
- stack 1: 0x574
- stack 0: 0xE
1651	 F0	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xE
- stack 0: 0x1
1652	 F2	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xE
1653	 F3	PUSH2	0380	 	 
- stack 2: 0x574
- stack 1: 0xE
- stack 0: 0x380
1654	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x574
1655	 F7	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1656	 F9	ADD		 	 
- stack 0: 0x578
1657	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1658	 FB	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x100045402131212019A01210099000E00B30000025F00080168048400E6000F
1659	 FC	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x100045402131212019A01210099000E00B30000025F00080168048400E6000F
- stack 0: 0xF0
1660	 FE	SHR		 	 
- stack 1: 0x578
- stack 0: 0x100
1661	 FF	JUMP		 	 
- stack 0: 0x578
1662	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x578
1663	 101	PUSH2	0060	 	 
- stack 1: 0x578
- stack 0: 0x60
1664	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x578
- stack 0: 0x424242
1665	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
1666	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x424242
1667	 10B	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0x424242
- stack 0: 0x3A0
1668	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0x424242
- stack 0: 0x424242
1669	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x424242
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
1670	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x424242
- stack 0: 0x424242
1671	 115	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
1672	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x11E
1673	 119	JUMPI		 	 
- stack 0: 0x578
1674	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x578
- stack 0: 0x138
1675	 11D	JUMP		 	 
- stack 0: 0x578
1676	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x578
1677	 139	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1678	 13B	ADD		 	 
- stack 0: 0x57C
1679	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1680	 13D	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x2131212019A01210099000E00B30000025F00080168048400E6000F01000434
1681	 13E	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x2131212019A01210099000E00B30000025F00080168048400E6000F01000434
- stack 0: 0xF0
1682	 140	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x213
1683	 141	JUMP		 	 
- stack 0: 0x57C
1684	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x57C
1685	 214	PUSH4	21212000	 	 
- stack 1: 0x57C
- stack 0: 0x21212000
1686	 219	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x21212000
- stack 0: 0x20
1687	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1688	 21D	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1689	 21F	ADD		 	 
- stack 0: 0x580
1690	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1691	 221	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x19A01210099000E00B30000025F00080168048400E6000F0100043402131212
1692	 222	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x19A01210099000E00B30000025F00080168048400E6000F0100043402131212
- stack 0: 0xF0
1693	 224	SHR		 	 
- stack 1: 0x580
- stack 0: 0x19A
1694	 225	JUMP		 	 
- stack 0: 0x580
1695	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x580
1696	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1697	 19C	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x19A01210099000E00B30000025F00080168048400E6000F0100043402131212
1698	 19D	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x19A01210099000E00B30000025F00080168048400E6000F0100043402131212
- stack 0: 0xE0
1699	 19F	SHR		 	 
- stack 1: 0x580
- stack 0: 0x19A0121
1700	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1701	 1A3	AND		 	 
- stack 1: 0x580
- stack 0: 0x121
1702	 1A4	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x1
1703	 1A6	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x121
1704	 1A7	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x20
1705	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0x121
- stack 0: 0x21212000
1706	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x580
- stack 0: 0x21212121
1707	 1AC	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x21212121
- stack 0: 0x20
1708	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
1709	 1B0	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1710	 1B2	ADD		 	 
- stack 0: 0x584
1711	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1712	 1B4	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x99000E00B30000025F00080168048400E6000F0100043402131212019A0121
1713	 1B5	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x99000E00B30000025F00080168048400E6000F0100043402131212019A0121
- stack 0: 0xF0
1714	 1B7	SHR		 	 
- stack 1: 0x584
- stack 0: 0x99
1715	 1B8	JUMP		 	 
- stack 0: 0x584
1716	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x584
1717	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
1718	 9B	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x99000E00B30000025F00080168048400E6000F0100043402131212019A0121
1719	 9C	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0x99000E00B30000025F00080168048400E6000F0100043402131212019A0121
- stack 0: 0xE0
1720	 9E	SHR		 	 
- stack 1: 0x584
- stack 0: 0x99000E
1721	 9F	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0x99000E
- stack 0: 0xFFFF
1722	 A2	AND		 	 
- stack 1: 0x584
- stack 0: 0xE
1723	 A3	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xE
- stack 0: 0x1
1724	 A5	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xE
1725	 A6	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xE
- stack 0: 0x40
1726	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
1727	 AA	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1728	 AC	ADD		 	 
- stack 0: 0x588
1729	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1730	 AE	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xB30000025F00080168048400E6000F0100043402131212019A01210099001F
1731	 AF	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xB30000025F00080168048400E6000F0100043402131212019A01210099001F
- stack 0: 0xF0
1732	 B1	SHR		 	 
- stack 1: 0x588
- stack 0: 0xB3
1733	 B2	JUMP		 	 
- stack 0: 0x588
1734	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x588
1735	 B4	PUSH2	0020	 	 
- stack 1: 0x588
- stack 0: 0x20
1736	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x588
- stack 0: 0x21212121
1737	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1738	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x588
- stack 0: 0x21212121
1739	 BE	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0x40
1740	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0xE
1741	 C2	PUSH1	1F	 	 
- stack 3: 0x588
- stack 2: 0x21212121
- stack 1: 0xE
- stack 0: 0x1F
1742	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x588
- stack 1: 0x21212121
- stack 0: 0xE
1743	 C5	SHR		 	 
- stack 1: 0x588
- stack 0: 0x8484
1744	 C6	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0x8484
- stack 0: 0x60
1745	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
1746	 CA	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1747	 CC	ADD		 	 
- stack 0: 0x58C
1748	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1749	 CE	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x25F00080168048400E6000F0100043402131212019A01210099001F00B30000
1750	 CF	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x25F00080168048400E6000F0100043402131212019A01210099001F00B30000
- stack 0: 0xF0
1751	 D1	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x25F
1752	 D2	JUMP		 	 
- stack 0: 0x58C
1753	 25F	JUMPDEST		 ;; __riscvimpl_LUI_8eb7	  ;; # instr: lui t4,0x8(ignore imm)
- stack 0: 0x58C
1754	 260	PUSH4	00008000	 	 
- stack 1: 0x58C
- stack 0: 0x8000
1755	 265	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0x8000
- stack 0: 0x3A0
1756	 268	MSTORE		 	  ;; # store to x29
- stack 0: 0x58C
1757	 269	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1758	 26B	ADD		 	 
- stack 0: 0x590
1759	 26C	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1760	 26D	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x168048400E6000F0100043402131212019A01210099001F00B3000001E60000
1761	 26E	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x168048400E6000F0100043402131212019A01210099001F00B3000001E60000
- stack 0: 0xF0
1762	 270	SHR		 	 
- stack 1: 0x590
- stack 0: 0x168
1763	 271	JUMP		 	 
- stack 0: 0x590
1764	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x590
1765	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1766	 16A	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x168048400E6000F0100043402131212019A01210099001F00B3000001E60000
1767	 16B	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x168048400E6000F0100043402131212019A01210099001F00B3000001E60000
- stack 0: 0xE0
1768	 16D	SHR		 	 
- stack 1: 0x590
- stack 0: 0x1680484
1769	 16E	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x1680484
- stack 0: 0xFFFF
1770	 171	AND		 	 
- stack 1: 0x590
- stack 0: 0x484
1771	 172	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x484
- stack 0: 0x1
1772	 174	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x484
1773	 175	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0x484
- stack 0: 0x3A0
1774	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x590
- stack 1: 0x484
- stack 0: 0x8000
1775	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x590
- stack 0: 0x8484
1776	 17A	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0x8484
- stack 0: 0x3A0
1777	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x590
1778	 17E	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1779	 180	ADD		 	 
- stack 0: 0x594
1780	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1781	 182	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xE6000F0100043402131212019A01210099001F00B3000001E6000000E60010
1782	 183	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xE6000F0100043402131212019A01210099001F00B3000001E6000000E60010
- stack 0: 0xF0
1783	 185	SHR		 	 
- stack 1: 0x594
- stack 0: 0xE6
1784	 186	JUMP		 	 
- stack 0: 0x594
1785	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x594
1786	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
1787	 E8	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xE6000F0100043402131212019A01210099001F00B3000001E6000000E60010
1788	 E9	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0xE6000F0100043402131212019A01210099001F00B3000001E6000000E60010
- stack 0: 0xE0
1789	 EB	SHR		 	 
- stack 1: 0x594
- stack 0: 0xE6000F
1790	 EC	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0xE6000F
- stack 0: 0xFFFF
1791	 EF	AND		 	 
- stack 1: 0x594
- stack 0: 0xF
1792	 F0	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x1
1793	 F2	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0xF
1794	 F3	PUSH2	0380	 	 
- stack 2: 0x594
- stack 1: 0xF
- stack 0: 0x380
1795	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x594
1796	 F7	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1797	 F9	ADD		 	 
- stack 0: 0x598
1798	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1799	 FB	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x100043402131212019A01210099001F00B3000001E6000000E6001001000418
1800	 FC	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x100043402131212019A01210099001F00B3000001E6000000E6001001000418
- stack 0: 0xF0
1801	 FE	SHR		 	 
- stack 1: 0x598
- stack 0: 0x100
1802	 FF	JUMP		 	 
- stack 0: 0x598
1803	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x598
1804	 101	PUSH2	0060	 	 
- stack 1: 0x598
- stack 0: 0x60
1805	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x598
- stack 0: 0x8484
1806	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
1807	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0x8484
1808	 10B	PUSH2	03A0	 	 
- stack 2: 0x598
- stack 1: 0x8484
- stack 0: 0x3A0
1809	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x598
- stack 1: 0x8484
- stack 0: 0x8484
1810	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x598
- stack 2: 0x8484
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
1811	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x598
- stack 1: 0x8484
- stack 0: 0x8484
1812	 115	SUB		 	 
- stack 1: 0x598
- stack 0: 0x0
1813	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x598
- stack 1: 0x0
- stack 0: 0x11E
1814	 119	JUMPI		 	 
- stack 0: 0x598
1815	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x598
- stack 0: 0x138
1816	 11D	JUMP		 	 
- stack 0: 0x598
1817	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x598
1818	 139	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1819	 13B	ADD		 	 
- stack 0: 0x59C
1820	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1821	 13D	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2131212019A01210099001F00B3000001E6000000E600100100041802131212
1822	 13E	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2131212019A01210099001F00B3000001E6000000E600100100041802131212
- stack 0: 0xF0
1823	 140	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x213
1824	 141	JUMP		 	 
- stack 0: 0x59C
1825	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x59C
1826	 214	PUSH4	21212000	 	 
- stack 1: 0x59C
- stack 0: 0x21212000
1827	 219	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0x21212000
- stack 0: 0x20
1828	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
1829	 21D	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1830	 21F	ADD		 	 
- stack 0: 0x5A0
1831	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1832	 221	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x19A01210099001F00B3000001E6000000E600100100041802131212019A0121
1833	 222	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x19A01210099001F00B3000001E6000000E600100100041802131212019A0121
- stack 0: 0xF0
1834	 224	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x19A
1835	 225	JUMP		 	 
- stack 0: 0x5A0
1836	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5A0
1837	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1838	 19C	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x19A01210099001F00B3000001E6000000E600100100041802131212019A0121
1839	 19D	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x19A01210099001F00B3000001E6000000E600100100041802131212019A0121
- stack 0: 0xE0
1840	 19F	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x19A0121
1841	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1842	 1A3	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x121
1843	 1A4	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x121
- stack 0: 0x1
1844	 1A6	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x121
1845	 1A7	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x121
- stack 0: 0x20
1846	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A0
- stack 1: 0x121
- stack 0: 0x21212000
1847	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x5A0
- stack 0: 0x21212121
1848	 1AC	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0x21212121
- stack 0: 0x20
1849	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
1850	 1B0	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1851	 1B2	ADD		 	 
- stack 0: 0x5A4
1852	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1853	 1B4	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x99001F00B3000001E6000000E600100100041802131212019A01210099FFE0
1854	 1B5	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x99001F00B3000001E6000000E600100100041802131212019A01210099FFE0
- stack 0: 0xF0
1855	 1B7	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x99
1856	 1B8	JUMP		 	 
- stack 0: 0x5A4
1857	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5A4
1858	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
1859	 9B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x99001F00B3000001E6000000E600100100041802131212019A01210099FFE0
1860	 9C	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x99001F00B3000001E6000000E600100100041802131212019A01210099FFE0
- stack 0: 0xE0
1861	 9E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x99001F
1862	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x99001F
- stack 0: 0xFFFF
1863	 A2	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x1F
1864	 A3	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x1F
- stack 0: 0x1
1865	 A5	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x1F
1866	 A6	PUSH2	0040	 	 
- stack 2: 0x5A4
- stack 1: 0x1F
- stack 0: 0x40
1867	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A4
1868	 AA	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1869	 AC	ADD		 	 
- stack 0: 0x5A8
1870	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1871	 AE	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB3000001E6000000E600100100041802131212019A01210099FFE000B30000
1872	 AF	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB3000001E6000000E600100100041802131212019A01210099FFE000B30000
- stack 0: 0xF0
1873	 B1	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB3
1874	 B2	JUMP		 	 
- stack 0: 0x5A8
1875	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x5A8
1876	 B4	PUSH2	0020	 	 
- stack 1: 0x5A8
- stack 0: 0x20
1877	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5A8
- stack 0: 0x21212121
1878	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1879	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x21212121
1880	 BE	PUSH2	0040	 	 
- stack 2: 0x5A8
- stack 1: 0x21212121
- stack 0: 0x40
1881	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x5A8
- stack 1: 0x21212121
- stack 0: 0x1F
1882	 C2	PUSH1	1F	 	 
- stack 3: 0x5A8
- stack 2: 0x21212121
- stack 1: 0x1F
- stack 0: 0x1F
1883	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5A8
- stack 1: 0x21212121
- stack 0: 0x1F
1884	 C5	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x0
1885	 C6	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x60
1886	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
1887	 CA	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1888	 CC	ADD		 	 
- stack 0: 0x5AC
1889	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1890	 CE	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1E6000000E600100100041802131212019A01210099FFE000B3000002261212
1891	 CF	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x1E6000000E600100100041802131212019A01210099FFE000B3000002261212
- stack 0: 0xF0
1892	 D1	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1E6
1893	 D2	JUMP		 	 
- stack 0: 0x5AC
1894	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x5AC
1895	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1896	 1E8	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1E6000000E600100100041802131212019A01210099FFE000B3000002261212
1897	 1E9	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x1E6000000E600100100041802131212019A01210099FFE000B3000002261212
- stack 0: 0xE0
1898	 1EB	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1E60000
1899	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
1900	 1EF	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
1901	 1F0	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1
1902	 1F2	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x0
1903	 1F3	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x3A0
1904	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
1905	 1F7	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1906	 1F9	ADD		 	 
- stack 0: 0x5B0
1907	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1908	 1FB	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xE600100100041802131212019A01210099FFE000B300000226121201680121
1909	 1FC	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xE600100100041802131212019A01210099FFE000B300000226121201680121
- stack 0: 0xF0
1910	 1FE	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xE6
1911	 1FF	JUMP		 	 
- stack 0: 0x5B0
1912	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
1913	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
1914	 E8	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xE600100100041802131212019A01210099FFE000B300000226121201680121
1915	 E9	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xE600100100041802131212019A01210099FFE000B300000226121201680121
- stack 0: 0xE0
1916	 EB	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xE60010
1917	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xE60010
- stack 0: 0xFFFF
1918	 EF	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x10
1919	 F0	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x10
- stack 0: 0x1
1920	 F2	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x10
1921	 F3	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0x10
- stack 0: 0x380
1922	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
1923	 F7	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1924	 F9	ADD		 	 
- stack 0: 0x5B4
1925	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1926	 FB	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x100041802131212019A01210099FFE000B30000022612120168012100E60011
1927	 FC	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x100041802131212019A01210099FFE000B30000022612120168012100E60011
- stack 0: 0xF0
1928	 FE	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x100
1929	 FF	JUMP		 	 
- stack 0: 0x5B4
1930	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x5B4
1931	 101	PUSH2	0060	 	 
- stack 1: 0x5B4
- stack 0: 0x60
1932	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x5B4
- stack 0: 0x0
1933	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1934	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x0
1935	 10B	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x3A0
1936	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
1937	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1938	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x0
1939	 115	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
1940	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x11E
1941	 119	JUMPI		 	 
- stack 0: 0x5B4
1942	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x5B4
- stack 0: 0x138
1943	 11D	JUMP		 	 
- stack 0: 0x5B4
1944	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x5B4
1945	 139	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1946	 13B	ADD		 	 
- stack 0: 0x5B8
1947	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1948	 13D	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x2131212019A01210099FFE000B30000022612120168012100E60011010003F8
1949	 13E	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x2131212019A01210099FFE000B30000022612120168012100E60011010003F8
- stack 0: 0xF0
1950	 140	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x213
1951	 141	JUMP		 	 
- stack 0: 0x5B8
1952	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5B8
1953	 214	PUSH4	21212000	 	 
- stack 1: 0x5B8
- stack 0: 0x21212000
1954	 219	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0x21212000
- stack 0: 0x20
1955	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
1956	 21D	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
1957	 21F	ADD		 	 
- stack 0: 0x5BC
1958	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
1959	 221	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x19A01210099FFE000B30000022612120168012100E60011010003F802131212
1960	 222	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x19A01210099FFE000B30000022612120168012100E60011010003F802131212
- stack 0: 0xF0
1961	 224	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x19A
1962	 225	JUMP		 	 
- stack 0: 0x5BC
1963	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5BC
1964	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
1965	 19C	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x19A01210099FFE000B30000022612120168012100E60011010003F802131212
1966	 19D	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x19A01210099FFE000B30000022612120168012100E60011010003F802131212
- stack 0: 0xE0
1967	 19F	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x19A0121
1968	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x19A0121
- stack 0: 0xFFFF
1969	 1A3	AND		 	 
- stack 1: 0x5BC
- stack 0: 0x121
1970	 1A4	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x1
1971	 1A6	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0x121
1972	 1A7	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x20
1973	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0x121
- stack 0: 0x21212000
1974	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0x21212121
1975	 1AC	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x21212121
- stack 0: 0x20
1976	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
1977	 1B0	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
1978	 1B2	ADD		 	 
- stack 0: 0x5C0
1979	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
1980	 1B4	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FFE000B30000022612120168012100E60011010003F802131212019A0121
1981	 1B5	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FFE000B30000022612120168012100E60011010003F802131212019A0121
- stack 0: 0xF0
1982	 1B7	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99
1983	 1B8	JUMP		 	 
- stack 0: 0x5C0
1984	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5C0
1985	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
1986	 9B	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99FFE000B30000022612120168012100E60011010003F802131212019A0121
1987	 9C	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x99FFE000B30000022612120168012100E60011010003F802131212019A0121
- stack 0: 0xE0
1988	 9E	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99FFE0
1989	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x99FFE0
- stack 0: 0xFFFF
1990	 A2	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFE0
1991	 A3	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xFFE0
- stack 0: 0x1
1992	 A5	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1993	 A6	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x40
1994	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
1995	 AA	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
1996	 AC	ADD		 	 
- stack 0: 0x5C4
1997	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
1998	 AE	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xB30000022612120168012100E60011010003F802131212019A01210099FFE1
1999	 AF	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xB30000022612120168012100E60011010003F802131212019A01210099FFE1
- stack 0: 0xF0
2000	 B1	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xB3
2001	 B2	JUMP		 	 
- stack 0: 0x5C4
2002	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x5C4
2003	 B4	PUSH2	0020	 	 
- stack 1: 0x5C4
- stack 0: 0x20
2004	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C4
- stack 0: 0x21212121
2005	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2006	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0x21212121
2007	 BE	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0x40
2008	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2009	 C2	PUSH1	1F	 	 
- stack 3: 0x5C4
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x1F
2010	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0x0
2011	 C5	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x21212121
2012	 C6	PUSH2	0060	 	 
- stack 2: 0x5C4
- stack 1: 0x21212121
- stack 0: 0x60
2013	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C4
2014	 CA	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2015	 CC	ADD		 	 
- stack 0: 0x5C8
2016	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2017	 CE	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x22612120168012100E60011010003F802131212019A01210099FFE100B30000
2018	 CF	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x22612120168012100E60011010003F802131212019A01210099FFE100B30000
- stack 0: 0xF0
2019	 D1	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x226
2020	 D2	JUMP		 	 
- stack 0: 0x5C8
2021	 226	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x5C8
2022	 227	PUSH4	21212000	 	 
- stack 1: 0x5C8
- stack 0: 0x21212000
2023	 22C	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0x21212000
- stack 0: 0x3A0
2024	 22F	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C8
2025	 230	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2026	 232	ADD		 	 
- stack 0: 0x5CC
2027	 233	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2028	 234	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x168012100E60011010003F802131212019A01210099FFE100B3000002390909
2029	 235	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x168012100E60011010003F802131212019A01210099FFE100B3000002390909
- stack 0: 0xF0
2030	 237	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x168
2031	 238	JUMP		 	 
- stack 0: 0x5CC
2032	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5CC
2033	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2034	 16A	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x168012100E60011010003F802131212019A01210099FFE100B3000002390909
2035	 16B	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x168012100E60011010003F802131212019A01210099FFE100B3000002390909
- stack 0: 0xE0
2036	 16D	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x1680121
2037	 16E	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x1680121
- stack 0: 0xFFFF
2038	 171	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x121
2039	 172	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x121
- stack 0: 0x1
2040	 174	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x121
2041	 175	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0x121
- stack 0: 0x3A0
2042	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x5CC
- stack 1: 0x121
- stack 0: 0x21212000
2043	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x5CC
- stack 0: 0x21212121
2044	 17A	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0x21212121
- stack 0: 0x3A0
2045	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x5CC
2046	 17E	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2047	 180	ADD		 	 
- stack 0: 0x5D0
2048	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2049	 182	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xE60011010003F802131212019A01210099FFE100B300000239090901680090
2050	 183	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0xE60011010003F802131212019A01210099FFE100B300000239090901680090
- stack 0: 0xF0
2051	 185	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xE6
2052	 186	JUMP		 	 
- stack 0: 0x5D0
2053	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D0
2054	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2055	 E8	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0xE60011010003F802131212019A01210099FFE100B300000239090901680090
2056	 E9	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0xE60011010003F802131212019A01210099FFE100B300000239090901680090
- stack 0: 0xE0
2057	 EB	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0xE60011
2058	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0xE60011
- stack 0: 0xFFFF
2059	 EF	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x11
2060	 F0	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x11
- stack 0: 0x1
2061	 F2	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x11
2062	 F3	PUSH2	0380	 	 
- stack 2: 0x5D0
- stack 1: 0x11
- stack 0: 0x380
2063	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D0
2064	 F7	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2065	 F9	ADD		 	 
- stack 0: 0x5D4
2066	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2067	 FB	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x10003F802131212019A01210099FFE100B30000023909090168009000E60012
2068	 FC	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x10003F802131212019A01210099FFE100B30000023909090168009000E60012
- stack 0: 0xF0
2069	 FE	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x100
2070	 FF	JUMP		 	 
- stack 0: 0x5D4
2071	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x5D4
2072	 101	PUSH2	0060	 	 
- stack 1: 0x5D4
- stack 0: 0x60
2073	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x5D4
- stack 0: 0x21212121
2074	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2075	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x21212121
2076	 10B	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0x21212121
- stack 0: 0x3A0
2077	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0x21212121
- stack 0: 0x21212121
2078	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2079	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x21212121
- stack 0: 0x21212121
2080	 115	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2081	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x11E
2082	 119	JUMPI		 	 
- stack 0: 0x5D4
2083	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x5D4
- stack 0: 0x138
2084	 11D	JUMP		 	 
- stack 0: 0x5D4
2085	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x5D4
2086	 139	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2087	 13B	ADD		 	 
- stack 0: 0x5D8
2088	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2089	 13D	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x2131212019A01210099FFE100B30000023909090168009000E60012010003D8
2090	 13E	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x2131212019A01210099FFE100B30000023909090168009000E60012010003D8
- stack 0: 0xF0
2091	 140	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x213
2092	 141	JUMP		 	 
- stack 0: 0x5D8
2093	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5D8
2094	 214	PUSH4	21212000	 	 
- stack 1: 0x5D8
- stack 0: 0x21212000
2095	 219	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0x21212000
- stack 0: 0x20
2096	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
2097	 21D	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2098	 21F	ADD		 	 
- stack 0: 0x5DC
2099	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2100	 221	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x19A01210099FFE100B30000023909090168009000E60012010003D802131212
2101	 222	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x19A01210099FFE100B30000023909090168009000E60012010003D802131212
- stack 0: 0xF0
2102	 224	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x19A
2103	 225	JUMP		 	 
- stack 0: 0x5DC
2104	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5DC
2105	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2106	 19C	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x19A01210099FFE100B30000023909090168009000E60012010003D802131212
2107	 19D	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x19A01210099FFE100B30000023909090168009000E60012010003D802131212
- stack 0: 0xE0
2108	 19F	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x19A0121
2109	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x19A0121
- stack 0: 0xFFFF
2110	 1A3	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x121
2111	 1A4	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x1
2112	 1A6	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x121
2113	 1A7	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x20
2114	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x5DC
- stack 1: 0x121
- stack 0: 0x21212000
2115	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x5DC
- stack 0: 0x21212121
2116	 1AC	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0x21212121
- stack 0: 0x20
2117	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
2118	 1B0	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2119	 1B2	ADD		 	 
- stack 0: 0x5E0
2120	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2121	 1B4	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x99FFE100B30000023909090168009000E60012010003D802131212019A0121
2122	 1B5	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x99FFE100B30000023909090168009000E60012010003D802131212019A0121
- stack 0: 0xF0
2123	 1B7	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x99
2124	 1B8	JUMP		 	 
- stack 0: 0x5E0
2125	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5E0
2126	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2127	 9B	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x99FFE100B30000023909090168009000E60012010003D802131212019A0121
2128	 9C	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x99FFE100B30000023909090168009000E60012010003D802131212019A0121
- stack 0: 0xE0
2129	 9E	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x99FFE1
2130	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x99FFE1
- stack 0: 0xFFFF
2131	 A2	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFE1
2132	 A3	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xFFE1
- stack 0: 0x1
2133	 A5	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
2134	 A6	PUSH2	0040	 	 
- stack 2: 0x5E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
- stack 0: 0x40
2135	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x5E0
2136	 AA	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2137	 AC	ADD		 	 
- stack 0: 0x5E4
2138	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2139	 AE	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0xB30000023909090168009000E60012010003D802131212019A01210099FFE7
2140	 AF	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0xB30000023909090168009000E60012010003D802131212019A01210099FFE7
- stack 0: 0xF0
2141	 B1	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0xB3
2142	 B2	JUMP		 	 
- stack 0: 0x5E4
2143	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x5E4
2144	 B4	PUSH2	0020	 	 
- stack 1: 0x5E4
- stack 0: 0x20
2145	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x5E4
- stack 0: 0x21212121
2146	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2147	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x21212121
2148	 BE	PUSH2	0040	 	 
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0x40
2149	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
2150	 C2	PUSH1	1F	 	 
- stack 3: 0x5E4
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1
- stack 0: 0x1F
2151	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x5E4
- stack 1: 0x21212121
- stack 0: 0x1
2152	 C5	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x10909090
2153	 C6	PUSH2	0060	 	 
- stack 2: 0x5E4
- stack 1: 0x10909090
- stack 0: 0x60
2154	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x5E4
2155	 CA	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2156	 CC	ADD		 	 
- stack 0: 0x5E8
2157	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2158	 CE	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x23909090168009000E60012010003D802131212019A01210099FFE700B30000
2159	 CF	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x23909090168009000E60012010003D802131212019A01210099FFE700B30000
- stack 0: 0xF0
2160	 D1	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x239
2161	 D2	JUMP		 	 
- stack 0: 0x5E8
2162	 239	JUMPDEST		 ;; __riscvimpl_LUI_10909eb7	  ;; # instr: lui t4,0x10909(ignore imm)
- stack 0: 0x5E8
2163	 23A	PUSH4	10909000	 	 
- stack 1: 0x5E8
- stack 0: 0x10909000
2164	 23F	PUSH2	03A0	 	 
- stack 2: 0x5E8
- stack 1: 0x10909000
- stack 0: 0x3A0
2165	 242	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E8
2166	 243	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2167	 245	ADD		 	 
- stack 0: 0x5EC
2168	 246	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2169	 247	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x168009000E60012010003D802131212019A01210099FFE700B30000024C0424
2170	 248	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x168009000E60012010003D802131212019A01210099FFE700B30000024C0424
- stack 0: 0xF0
2171	 24A	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x168
2172	 24B	JUMP		 	 
- stack 0: 0x5EC
2173	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5EC
2174	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2175	 16A	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x168009000E60012010003D802131212019A01210099FFE700B30000024C0424
2176	 16B	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x168009000E60012010003D802131212019A01210099FFE700B30000024C0424
- stack 0: 0xE0
2177	 16D	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x1680090
2178	 16E	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x1680090
- stack 0: 0xFFFF
2179	 171	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x90
2180	 172	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x90
- stack 0: 0x1
2181	 174	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x90
2182	 175	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x90
- stack 0: 0x3A0
2183	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x5EC
- stack 1: 0x90
- stack 0: 0x10909000
2184	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x5EC
- stack 0: 0x10909090
2185	 17A	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x10909090
- stack 0: 0x3A0
2186	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x5EC
2187	 17E	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2188	 180	ADD		 	 
- stack 0: 0x5F0
2189	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2190	 182	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xE60012010003D802131212019A01210099FFE700B30000024C042401680242
2191	 183	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xE60012010003D802131212019A01210099FFE700B30000024C042401680242
- stack 0: 0xF0
2192	 185	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xE6
2193	 186	JUMP		 	 
- stack 0: 0x5F0
2194	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F0
2195	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2196	 E8	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xE60012010003D802131212019A01210099FFE700B30000024C042401680242
2197	 E9	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xE60012010003D802131212019A01210099FFE700B30000024C042401680242
- stack 0: 0xE0
2198	 EB	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xE60012
2199	 EC	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xE60012
- stack 0: 0xFFFF
2200	 EF	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x12
2201	 F0	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x12
- stack 0: 0x1
2202	 F2	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x12
2203	 F3	PUSH2	0380	 	 
- stack 2: 0x5F0
- stack 1: 0x12
- stack 0: 0x380
2204	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F0
2205	 F7	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2206	 F9	ADD		 	 
- stack 0: 0x5F4
2207	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2208	 FB	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x10003D802131212019A01210099FFE700B30000024C04240168024200E60013
2209	 FC	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x10003D802131212019A01210099FFE700B30000024C04240168024200E60013
- stack 0: 0xF0
2210	 FE	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x100
2211	 FF	JUMP		 	 
- stack 0: 0x5F4
2212	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x5F4
2213	 101	PUSH2	0060	 	 
- stack 1: 0x5F4
- stack 0: 0x60
2214	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x5F4
- stack 0: 0x10909090
2215	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
2216	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x10909090
2217	 10B	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0x10909090
- stack 0: 0x3A0
2218	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F4
- stack 1: 0x10909090
- stack 0: 0x10909090
2219	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x10909090
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
2220	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x10909090
- stack 0: 0x10909090
2221	 115	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2222	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x11E
2223	 119	JUMPI		 	 
- stack 0: 0x5F4
2224	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x5F4
- stack 0: 0x138
2225	 11D	JUMP		 	 
- stack 0: 0x5F4
2226	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x5F4
2227	 139	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2228	 13B	ADD		 	 
- stack 0: 0x5F8
2229	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2230	 13D	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x2131212019A01210099FFE700B30000024C04240168024200E60013010003B8
2231	 13E	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x2131212019A01210099FFE700B30000024C04240168024200E60013010003B8
- stack 0: 0xF0
2232	 140	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x213
2233	 141	JUMP		 	 
- stack 0: 0x5F8
2234	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x5F8
2235	 214	PUSH4	21212000	 	 
- stack 1: 0x5F8
- stack 0: 0x21212000
2236	 219	PUSH2	0020	 	 
- stack 2: 0x5F8
- stack 1: 0x21212000
- stack 0: 0x20
2237	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F8
2238	 21D	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2239	 21F	ADD		 	 
- stack 0: 0x5FC
2240	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2241	 221	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x19A01210099FFE700B30000024C04240168024200E60013010003B802131212
2242	 222	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x19A01210099FFE700B30000024C04240168024200E60013010003B802131212
- stack 0: 0xF0
2243	 224	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x19A
2244	 225	JUMP		 	 
- stack 0: 0x5FC
2245	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x5FC
2246	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2247	 19C	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x19A01210099FFE700B30000024C04240168024200E60013010003B802131212
2248	 19D	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x19A01210099FFE700B30000024C04240168024200E60013010003B802131212
- stack 0: 0xE0
2249	 19F	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x19A0121
2250	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x19A0121
- stack 0: 0xFFFF
2251	 1A3	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x121
2252	 1A4	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x1
2253	 1A6	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x121
2254	 1A7	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x20
2255	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x5FC
- stack 1: 0x121
- stack 0: 0x21212000
2256	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x5FC
- stack 0: 0x21212121
2257	 1AC	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0x21212121
- stack 0: 0x20
2258	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2259	 1B0	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2260	 1B2	ADD		 	 
- stack 0: 0x600
2261	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2262	 1B4	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x99FFE700B30000024C04240168024200E60013010003B802131212019A0121
2263	 1B5	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x99FFE700B30000024C04240168024200E60013010003B802131212019A0121
- stack 0: 0xF0
2264	 1B7	SHR		 	 
- stack 1: 0x600
- stack 0: 0x99
2265	 1B8	JUMP		 	 
- stack 0: 0x600
2266	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x600
2267	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2268	 9B	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x99FFE700B30000024C04240168024200E60013010003B802131212019A0121
2269	 9C	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x99FFE700B30000024C04240168024200E60013010003B802131212019A0121
- stack 0: 0xE0
2270	 9E	SHR		 	 
- stack 1: 0x600
- stack 0: 0x99FFE7
2271	 9F	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x99FFE7
- stack 0: 0xFFFF
2272	 A2	AND		 	 
- stack 1: 0x600
- stack 0: 0xFFE7
2273	 A3	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xFFE7
- stack 0: 0x1
2274	 A5	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
2275	 A6	PUSH2	0040	 	 
- stack 2: 0x600
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
- stack 0: 0x40
2276	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x600
2277	 AA	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2278	 AC	ADD		 	 
- stack 0: 0x604
2279	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2280	 AE	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xB30000024C04240168024200E60013010003B802131212019A01210099FFEE
2281	 AF	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xB30000024C04240168024200E60013010003B802131212019A01210099FFEE
- stack 0: 0xF0
2282	 B1	SHR		 	 
- stack 1: 0x604
- stack 0: 0xB3
2283	 B2	JUMP		 	 
- stack 0: 0x604
2284	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x604
2285	 B4	PUSH2	0020	 	 
- stack 1: 0x604
- stack 0: 0x20
2286	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x604
- stack 0: 0x21212121
2287	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2288	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x21212121
2289	 BE	PUSH2	0040	 	 
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0x40
2290	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
2291	 C2	PUSH1	1F	 	 
- stack 3: 0x604
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE7
- stack 0: 0x1F
2292	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x604
- stack 1: 0x21212121
- stack 0: 0x7
2293	 C5	SHR		 	 
- stack 1: 0x604
- stack 0: 0x424242
2294	 C6	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x424242
- stack 0: 0x60
2295	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
2296	 CA	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2297	 CC	ADD		 	 
- stack 0: 0x608
2298	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2299	 CE	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x24C04240168024200E60013010003B802131212019A01210099FFEE00B30000
2300	 CF	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x24C04240168024200E60013010003B802131212019A01210099FFEE00B30000
- stack 0: 0xF0
2301	 D1	SHR		 	 
- stack 1: 0x608
- stack 0: 0x24C
2302	 D2	JUMP		 	 
- stack 0: 0x608
2303	 24C	JUMPDEST		 ;; __riscvimpl_LUI_424eb7	  ;; # instr: lui t4,0x424(ignore imm)
- stack 0: 0x608
2304	 24D	PUSH4	00424000	 	 
- stack 1: 0x608
- stack 0: 0x424000
2305	 252	PUSH2	03A0	 	 
- stack 2: 0x608
- stack 1: 0x424000
- stack 0: 0x3A0
2306	 255	MSTORE		 	  ;; # store to x29
- stack 0: 0x608
2307	 256	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2308	 258	ADD		 	 
- stack 0: 0x60C
2309	 259	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2310	 25A	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x168024200E60013010003B802131212019A01210099FFEE00B30000025F0008
2311	 25B	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x168024200E60013010003B802131212019A01210099FFEE00B30000025F0008
- stack 0: 0xF0
2312	 25D	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x168
2313	 25E	JUMP		 	 
- stack 0: 0x60C
2314	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x60C
2315	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2316	 16A	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x168024200E60013010003B802131212019A01210099FFEE00B30000025F0008
2317	 16B	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x168024200E60013010003B802131212019A01210099FFEE00B30000025F0008
- stack 0: 0xE0
2318	 16D	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1680242
2319	 16E	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1680242
- stack 0: 0xFFFF
2320	 171	AND		 	 
- stack 1: 0x60C
- stack 0: 0x242
2321	 172	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x242
- stack 0: 0x1
2322	 174	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x242
2323	 175	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x242
- stack 0: 0x3A0
2324	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x60C
- stack 1: 0x242
- stack 0: 0x424000
2325	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x60C
- stack 0: 0x424242
2326	 17A	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x424242
- stack 0: 0x3A0
2327	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
2328	 17E	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2329	 180	ADD		 	 
- stack 0: 0x610
2330	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2331	 182	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xE60013010003B802131212019A01210099FFEE00B30000025F000801680484
2332	 183	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0xE60013010003B802131212019A01210099FFEE00B30000025F000801680484
- stack 0: 0xF0
2333	 185	SHR		 	 
- stack 1: 0x610
- stack 0: 0xE6
2334	 186	JUMP		 	 
- stack 0: 0x610
2335	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x610
2336	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2337	 E8	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0xE60013010003B802131212019A01210099FFEE00B30000025F000801680484
2338	 E9	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0xE60013010003B802131212019A01210099FFEE00B30000025F000801680484
- stack 0: 0xE0
2339	 EB	SHR		 	 
- stack 1: 0x610
- stack 0: 0xE60013
2340	 EC	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0xE60013
- stack 0: 0xFFFF
2341	 EF	AND		 	 
- stack 1: 0x610
- stack 0: 0x13
2342	 F0	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x13
- stack 0: 0x1
2343	 F2	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x13
2344	 F3	PUSH2	0380	 	 
- stack 2: 0x610
- stack 1: 0x13
- stack 0: 0x380
2345	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x610
2346	 F7	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2347	 F9	ADD		 	 
- stack 0: 0x614
2348	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2349	 FB	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x10003B802131212019A01210099FFEE00B30000025F00080168048400E60014
2350	 FC	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x10003B802131212019A01210099FFEE00B30000025F00080168048400E60014
- stack 0: 0xF0
2351	 FE	SHR		 	 
- stack 1: 0x614
- stack 0: 0x100
2352	 FF	JUMP		 	 
- stack 0: 0x614
2353	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x614
2354	 101	PUSH2	0060	 	 
- stack 1: 0x614
- stack 0: 0x60
2355	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x614
- stack 0: 0x424242
2356	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
2357	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0x424242
2358	 10B	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0x424242
- stack 0: 0x3A0
2359	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0x424242
- stack 0: 0x424242
2360	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0x424242
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
2361	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0x424242
- stack 0: 0x424242
2362	 115	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
2363	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x11E
2364	 119	JUMPI		 	 
- stack 0: 0x614
2365	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x614
- stack 0: 0x138
2366	 11D	JUMP		 	 
- stack 0: 0x614
2367	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x614
2368	 139	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2369	 13B	ADD		 	 
- stack 0: 0x618
2370	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2371	 13D	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x2131212019A01210099FFEE00B30000025F00080168048400E6001401000398
2372	 13E	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x2131212019A01210099FFEE00B30000025F00080168048400E6001401000398
- stack 0: 0xF0
2373	 140	SHR		 	 
- stack 1: 0x618
- stack 0: 0x213
2374	 141	JUMP		 	 
- stack 0: 0x618
2375	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x618
2376	 214	PUSH4	21212000	 	 
- stack 1: 0x618
- stack 0: 0x21212000
2377	 219	PUSH2	0020	 	 
- stack 2: 0x618
- stack 1: 0x21212000
- stack 0: 0x20
2378	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x618
2379	 21D	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2380	 21F	ADD		 	 
- stack 0: 0x61C
2381	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2382	 221	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x19A01210099FFEE00B30000025F00080168048400E600140100039802131212
2383	 222	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x19A01210099FFEE00B30000025F00080168048400E600140100039802131212
- stack 0: 0xF0
2384	 224	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x19A
2385	 225	JUMP		 	 
- stack 0: 0x61C
2386	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x61C
2387	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2388	 19C	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x19A01210099FFEE00B30000025F00080168048400E600140100039802131212
2389	 19D	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x19A01210099FFEE00B30000025F00080168048400E600140100039802131212
- stack 0: 0xE0
2390	 19F	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x19A0121
2391	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x19A0121
- stack 0: 0xFFFF
2392	 1A3	AND		 	 
- stack 1: 0x61C
- stack 0: 0x121
2393	 1A4	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x121
- stack 0: 0x1
2394	 1A6	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x121
2395	 1A7	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0x121
- stack 0: 0x20
2396	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x61C
- stack 1: 0x121
- stack 0: 0x21212000
2397	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x61C
- stack 0: 0x21212121
2398	 1AC	PUSH2	0020	 	 
- stack 2: 0x61C
- stack 1: 0x21212121
- stack 0: 0x20
2399	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x61C
2400	 1B0	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2401	 1B2	ADD		 	 
- stack 0: 0x620
2402	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2403	 1B4	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x99FFEE00B30000025F00080168048400E600140100039802131212019A0121
2404	 1B5	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x99FFEE00B30000025F00080168048400E600140100039802131212019A0121
- stack 0: 0xF0
2405	 1B7	SHR		 	 
- stack 1: 0x620
- stack 0: 0x99
2406	 1B8	JUMP		 	 
- stack 0: 0x620
2407	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x620
2408	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2409	 9B	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x99FFEE00B30000025F00080168048400E600140100039802131212019A0121
2410	 9C	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x99FFEE00B30000025F00080168048400E600140100039802131212019A0121
- stack 0: 0xE0
2411	 9E	SHR		 	 
- stack 1: 0x620
- stack 0: 0x99FFEE
2412	 9F	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x99FFEE
- stack 0: 0xFFFF
2413	 A2	AND		 	 
- stack 1: 0x620
- stack 0: 0xFFEE
2414	 A3	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xFFEE
- stack 0: 0x1
2415	 A5	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
2416	 A6	PUSH2	0040	 	 
- stack 2: 0x620
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
- stack 0: 0x40
2417	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x620
2418	 AA	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2419	 AC	ADD		 	 
- stack 0: 0x624
2420	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2421	 AE	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0xB30000025F00080168048400E600140100039802131212019A01210099FFFF
2422	 AF	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0xB30000025F00080168048400E600140100039802131212019A01210099FFFF
- stack 0: 0xF0
2423	 B1	SHR		 	 
- stack 1: 0x624
- stack 0: 0xB3
2424	 B2	JUMP		 	 
- stack 0: 0x624
2425	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x624
2426	 B4	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
2427	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0x21212121
2428	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2429	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x21212121
2430	 BE	PUSH2	0040	 	 
- stack 2: 0x624
- stack 1: 0x21212121
- stack 0: 0x40
2431	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x624
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
2432	 C2	PUSH1	1F	 	 
- stack 3: 0x624
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEE
- stack 0: 0x1F
2433	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x624
- stack 1: 0x21212121
- stack 0: 0xE
2434	 C5	SHR		 	 
- stack 1: 0x624
- stack 0: 0x8484
2435	 C6	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x8484
- stack 0: 0x60
2436	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
2437	 CA	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2438	 CC	ADD		 	 
- stack 0: 0x628
2439	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2440	 CE	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x25F00080168048400E600140100039802131212019A01210099FFFF00B30000
2441	 CF	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x25F00080168048400E600140100039802131212019A01210099FFFF00B30000
- stack 0: 0xF0
2442	 D1	SHR		 	 
- stack 1: 0x628
- stack 0: 0x25F
2443	 D2	JUMP		 	 
- stack 0: 0x628
2444	 25F	JUMPDEST		 ;; __riscvimpl_LUI_8eb7	  ;; # instr: lui t4,0x8(ignore imm)
- stack 0: 0x628
2445	 260	PUSH4	00008000	 	 
- stack 1: 0x628
- stack 0: 0x8000
2446	 265	PUSH2	03A0	 	 
- stack 2: 0x628
- stack 1: 0x8000
- stack 0: 0x3A0
2447	 268	MSTORE		 	  ;; # store to x29
- stack 0: 0x628
2448	 269	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2449	 26B	ADD		 	 
- stack 0: 0x62C
2450	 26C	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2451	 26D	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x168048400E600140100039802131212019A01210099FFFF00B3000001E60000
2452	 26E	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x168048400E600140100039802131212019A01210099FFFF00B3000001E60000
- stack 0: 0xF0
2453	 270	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x168
2454	 271	JUMP		 	 
- stack 0: 0x62C
2455	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x62C
2456	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2457	 16A	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x168048400E600140100039802131212019A01210099FFFF00B3000001E60000
2458	 16B	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x168048400E600140100039802131212019A01210099FFFF00B3000001E60000
- stack 0: 0xE0
2459	 16D	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x1680484
2460	 16E	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x1680484
- stack 0: 0xFFFF
2461	 171	AND		 	 
- stack 1: 0x62C
- stack 0: 0x484
2462	 172	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x484
- stack 0: 0x1
2463	 174	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x484
2464	 175	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x484
- stack 0: 0x3A0
2465	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x62C
- stack 1: 0x484
- stack 0: 0x8000
2466	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x62C
- stack 0: 0x8484
2467	 17A	PUSH2	03A0	 	 
- stack 2: 0x62C
- stack 1: 0x8484
- stack 0: 0x3A0
2468	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x62C
2469	 17E	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2470	 180	ADD		 	 
- stack 0: 0x630
2471	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2472	 182	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xE600140100039802131212019A01210099FFFF00B3000001E6000000E60015
2473	 183	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xE600140100039802131212019A01210099FFFF00B3000001E6000000E60015
- stack 0: 0xF0
2474	 185	SHR		 	 
- stack 1: 0x630
- stack 0: 0xE6
2475	 186	JUMP		 	 
- stack 0: 0x630
2476	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x630
2477	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2478	 E8	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xE600140100039802131212019A01210099FFFF00B3000001E6000000E60015
2479	 E9	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xE600140100039802131212019A01210099FFFF00B3000001E6000000E60015
- stack 0: 0xE0
2480	 EB	SHR		 	 
- stack 1: 0x630
- stack 0: 0xE60014
2481	 EC	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xE60014
- stack 0: 0xFFFF
2482	 EF	AND		 	 
- stack 1: 0x630
- stack 0: 0x14
2483	 F0	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0x14
- stack 0: 0x1
2484	 F2	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0x14
2485	 F3	PUSH2	0380	 	 
- stack 2: 0x630
- stack 1: 0x14
- stack 0: 0x380
2486	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x630
2487	 F7	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2488	 F9	ADD		 	 
- stack 0: 0x634
2489	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2490	 FB	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x100039802131212019A01210099FFFF00B3000001E6000000E600150100037C
2491	 FC	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x100039802131212019A01210099FFFF00B3000001E6000000E600150100037C
- stack 0: 0xF0
2492	 FE	SHR		 	 
- stack 1: 0x634
- stack 0: 0x100
2493	 FF	JUMP		 	 
- stack 0: 0x634
2494	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x634
2495	 101	PUSH2	0060	 	 
- stack 1: 0x634
- stack 0: 0x60
2496	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x634
- stack 0: 0x8484
2497	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x634
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
2498	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x634
- stack 0: 0x8484
2499	 10B	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0x8484
- stack 0: 0x3A0
2500	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x634
- stack 1: 0x8484
- stack 0: 0x8484
2501	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x634
- stack 2: 0x8484
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
2502	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x634
- stack 1: 0x8484
- stack 0: 0x8484
2503	 115	SUB		 	 
- stack 1: 0x634
- stack 0: 0x0
2504	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x11E
2505	 119	JUMPI		 	 
- stack 0: 0x634
2506	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x634
- stack 0: 0x138
2507	 11D	JUMP		 	 
- stack 0: 0x634
2508	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x634
2509	 139	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2510	 13B	ADD		 	 
- stack 0: 0x638
2511	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2512	 13D	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x2131212019A01210099FFFF00B3000001E6000000E600150100037C0086FFF8
2513	 13E	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x2131212019A01210099FFFF00B3000001E6000000E600150100037C0086FFF8
- stack 0: 0xF0
2514	 140	SHR		 	 
- stack 1: 0x638
- stack 0: 0x213
2515	 141	JUMP		 	 
- stack 0: 0x638
2516	 213	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x638
2517	 214	PUSH4	21212000	 	 
- stack 1: 0x638
- stack 0: 0x21212000
2518	 219	PUSH2	0020	 	 
- stack 2: 0x638
- stack 1: 0x21212000
- stack 0: 0x20
2519	 21C	MSTORE		 	  ;; # store to x1
- stack 0: 0x638
2520	 21D	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2521	 21F	ADD		 	 
- stack 0: 0x63C
2522	 220	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2523	 221	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x19A01210099FFFF00B3000001E6000000E600150100037C0086FFF800990001
2524	 222	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x19A01210099FFFF00B3000001E6000000E600150100037C0086FFF800990001
- stack 0: 0xF0
2525	 224	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x19A
2526	 225	JUMP		 	 
- stack 0: 0x63C
2527	 19A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x63C
2528	 19B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2529	 19C	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x19A01210099FFFF00B3000001E6000000E600150100037C0086FFF800990001
2530	 19D	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x19A01210099FFFF00B3000001E6000000E600150100037C0086FFF800990001
- stack 0: 0xE0
2531	 19F	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x19A0121
2532	 1A0	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x19A0121
- stack 0: 0xFFFF
2533	 1A3	AND		 	 
- stack 1: 0x63C
- stack 0: 0x121
2534	 1A4	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x121
- stack 0: 0x1
2535	 1A6	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x121
2536	 1A7	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0x121
- stack 0: 0x20
2537	 1AA	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0x121
- stack 0: 0x21212000
2538	 1AB	ADD		 	  ;; # ADDI 1
- stack 1: 0x63C
- stack 0: 0x21212121
2539	 1AC	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0x21212121
- stack 0: 0x20
2540	 1AF	MSTORE		 	  ;; # store to x1
- stack 0: 0x63C
2541	 1B0	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2542	 1B2	ADD		 	 
- stack 0: 0x640
2543	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2544	 1B4	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x99FFFF00B3000001E6000000E600150100037C0086FFF80099000102720000
2545	 1B5	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x99FFFF00B3000001E6000000E600150100037C0086FFF80099000102720000
- stack 0: 0xF0
2546	 1B7	SHR		 	 
- stack 1: 0x640
- stack 0: 0x99
2547	 1B8	JUMP		 	 
- stack 0: 0x640
2548	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x640
2549	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2550	 9B	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x99FFFF00B3000001E6000000E600150100037C0086FFF80099000102720000
2551	 9C	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x99FFFF00B3000001E6000000E600150100037C0086FFF80099000102720000
- stack 0: 0xE0
2552	 9E	SHR		 	 
- stack 1: 0x640
- stack 0: 0x99FFFF
2553	 9F	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x99FFFF
- stack 0: 0xFFFF
2554	 A2	AND		 	 
- stack 1: 0x640
- stack 0: 0xFFFF
2555	 A3	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0xFFFF
- stack 0: 0x1
2556	 A5	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2557	 A6	PUSH2	0040	 	 
- stack 2: 0x640
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
2558	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x640
2559	 AA	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2560	 AC	ADD		 	 
- stack 0: 0x644
2561	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2562	 AE	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0xB3000001E6000000E600150100037C0086FFF800990001027200000142FFFC
2563	 AF	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0xB3000001E6000000E600150100037C0086FFF800990001027200000142FFFC
- stack 0: 0xF0
2564	 B1	SHR		 	 
- stack 1: 0x644
- stack 0: 0xB3
2565	 B2	JUMP		 	 
- stack 0: 0x644
2566	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x644
2567	 B4	PUSH2	0020	 	 
- stack 1: 0x644
- stack 0: 0x20
2568	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x644
- stack 0: 0x21212121
2569	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
2570	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x21212121
2571	 BE	PUSH2	0040	 	 
- stack 2: 0x644
- stack 1: 0x21212121
- stack 0: 0x40
2572	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x644
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2573	 C2	PUSH1	1F	 	 
- stack 3: 0x644
- stack 2: 0x21212121
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x1F
2574	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x644
- stack 1: 0x21212121
- stack 0: 0x1F
2575	 C5	SHR		 	 
- stack 1: 0x644
- stack 0: 0x0
2576	 C6	PUSH2	0060	 	 
- stack 2: 0x644
- stack 1: 0x0
- stack 0: 0x60
2577	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x644
2578	 CA	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2579	 CC	ADD		 	 
- stack 0: 0x648
2580	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2581	 CE	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1E6000000E600150100037C0086FFF800990001027200000142FFFC00E60016
2582	 CF	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x1E6000000E600150100037C0086FFF800990001027200000142FFFC00E60016
- stack 0: 0xF0
2583	 D1	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1E6
2584	 D2	JUMP		 	 
- stack 0: 0x648
2585	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x648
2586	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2587	 1E8	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x1E6000000E600150100037C0086FFF800990001027200000142FFFC00E60016
2588	 1E9	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x1E6000000E600150100037C0086FFF800990001027200000142FFFC00E60016
- stack 0: 0xE0
2589	 1EB	SHR		 	 
- stack 1: 0x648
- stack 0: 0x1E60000
2590	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2591	 1EF	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
2592	 1F0	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
2593	 1F2	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
2594	 1F3	PUSH2	03A0	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x3A0
2595	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x648
2596	 1F7	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
2597	 1F9	ADD		 	 
- stack 0: 0x64C
2598	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
2599	 1FB	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE600150100037C0086FFF800990001027200000142FFFC00E6001602920364
2600	 1FC	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0xE600150100037C0086FFF800990001027200000142FFFC00E6001602920364
- stack 0: 0xF0
2601	 1FE	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE6
2602	 1FF	JUMP		 	 
- stack 0: 0x64C
2603	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x64C
2604	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
2605	 E8	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0xE600150100037C0086FFF800990001027200000142FFFC00E6001602920364
2606	 E9	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0xE600150100037C0086FFF800990001027200000142FFFC00E6001602920364
- stack 0: 0xE0
2607	 EB	SHR		 	 
- stack 1: 0x64C
- stack 0: 0xE60015
2608	 EC	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0xE60015
- stack 0: 0xFFFF
2609	 EF	AND		 	 
- stack 1: 0x64C
- stack 0: 0x15
2610	 F0	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0x15
- stack 0: 0x1
2611	 F2	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0x15
2612	 F3	PUSH2	0380	 	 
- stack 2: 0x64C
- stack 1: 0x15
- stack 0: 0x380
2613	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x64C
2614	 F7	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
2615	 F9	ADD		 	 
- stack 0: 0x650
2616	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
2617	 FB	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x100037C0086FFF800990001027200000142FFFC00E60016029203640086FFF8
2618	 FC	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x100037C0086FFF800990001027200000142FFFC00E60016029203640086FFF8
- stack 0: 0xF0
2619	 FE	SHR		 	 
- stack 1: 0x650
- stack 0: 0x100
2620	 FF	JUMP		 	 
- stack 0: 0x650
2621	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x650
2622	 101	PUSH2	0060	 	 
- stack 1: 0x650
- stack 0: 0x60
2623	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x650
- stack 0: 0x0
2624	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2625	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x650
- stack 0: 0x0
2626	 10B	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x3A0
2627	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x0
2628	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x650
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2629	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x0
2630	 115	SUB		 	 
- stack 1: 0x650
- stack 0: 0x0
2631	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x650
- stack 1: 0x0
- stack 0: 0x11E
2632	 119	JUMPI		 	 
- stack 0: 0x650
2633	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x650
- stack 0: 0x138
2634	 11D	JUMP		 	 
- stack 0: 0x650
2635	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x650
2636	 139	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
2637	 13B	ADD		 	 
- stack 0: 0x654
2638	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
2639	 13D	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x86FFF800990001027200000142FFFC00E60016029203640086FFF80099000E
2640	 13E	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x86FFF800990001027200000142FFFC00E60016029203640086FFF80099000E
- stack 0: 0xF0
2641	 140	SHR		 	 
- stack 1: 0x654
- stack 0: 0x86
2642	 141	JUMP		 	 
- stack 0: 0x654
2643	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x654
2644	 87	PUSH4	ffff8000	 	 
- stack 1: 0x654
- stack 0: 0xFFFF8000
2645	 8C	PUSH2	0020	 	 
- stack 2: 0x654
- stack 1: 0xFFFF8000
- stack 0: 0x20
2646	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x654
2647	 90	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
2648	 92	ADD		 	 
- stack 0: 0x658
2649	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
2650	 94	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x990001027200000142FFFC00E60016029203640086FFF80099000E02D40000
2651	 95	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x990001027200000142FFFC00E60016029203640086FFF80099000E02D40000
- stack 0: 0xF0
2652	 97	SHR		 	 
- stack 1: 0x658
- stack 0: 0x99
2653	 98	JUMP		 	 
- stack 0: 0x658
2654	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x658
2655	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
2656	 9B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x990001027200000142FFFC00E60016029203640086FFF80099000E02D40000
2657	 9C	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x990001027200000142FFFC00E60016029203640086FFF80099000E02D40000
- stack 0: 0xE0
2658	 9E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x990001
2659	 9F	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x990001
- stack 0: 0xFFFF
2660	 A2	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
2661	 A3	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
2662	 A5	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
2663	 A6	PUSH2	0040	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x40
2664	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x658
2665	 AA	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
2666	 AC	ADD		 	 
- stack 0: 0x65C
2667	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
2668	 AE	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x27200000142FFFC00E60016029203640086FFF80099000E02D4000001870040
2669	 AF	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x27200000142FFFC00E60016029203640086FFF80099000E02D4000001870040
- stack 0: 0xF0
2670	 B1	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x272
2671	 B2	JUMP		 	 
- stack 0: 0x65C
2672	 272	JUMPDEST		 ;; __riscvimpl_SRL_1_1_2	  ;; # instr: srl ra,ra,sp(ignore imm)
- stack 0: 0x65C
2673	 273	PUSH2	0020	 	 
- stack 1: 0x65C
- stack 0: 0x20
2674	 276	MLOAD		 	  ;; # read from x1
- stack 1: 0x65C
- stack 0: 0xFFFF8000
2675	 277	PUSH4	FFFFFFFF	 	 
- stack 2: 0x65C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2676	 27C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x65C
- stack 0: 0xFFFF8000
2677	 27D	PUSH2	0040	 	 
- stack 2: 0x65C
- stack 1: 0xFFFF8000
- stack 0: 0x40
2678	 280	MLOAD		 	  ;; # read from x2
- stack 2: 0x65C
- stack 1: 0xFFFF8000
- stack 0: 0x1
2679	 281	PUSH1	1F	 	 
- stack 3: 0x65C
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
2680	 283	AND		 	  ;; # mask to 5 bits
- stack 2: 0x65C
- stack 1: 0xFFFF8000
- stack 0: 0x1
2681	 284	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x7FFFC000
2682	 285	PUSH2	0020	 	 
- stack 2: 0x65C
- stack 1: 0x7FFFC000
- stack 0: 0x20
2683	 288	MSTORE		 	  ;; # store to x1
- stack 0: 0x65C
2684	 289	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
2685	 28B	ADD		 	 
- stack 0: 0x660
2686	 28C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
2687	 28D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x142FFFC00E60016029203640086FFF80099000E02D40000018700400168FFFE
2688	 28E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x142FFFC00E60016029203640086FFF80099000E02D40000018700400168FFFE
- stack 0: 0xF0
2689	 290	SHR		 	 
- stack 1: 0x660
- stack 0: 0x142
2690	 291	JUMP		 	 
- stack 0: 0x660
2691	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x660
2692	 143	PUSH4	7fffc000	 	 
- stack 1: 0x660
- stack 0: 0x7FFFC000
2693	 148	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
2694	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x660
2695	 14C	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
2696	 14E	ADD		 	 
- stack 0: 0x664
2697	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
2698	 150	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xE60016029203640086FFF80099000E02D40000018700400168FFFE00E60017
2699	 151	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xE60016029203640086FFF80099000E02D40000018700400168FFFE00E60017
- stack 0: 0xF0
2700	 153	SHR		 	 
- stack 1: 0x664
- stack 0: 0xE6
2701	 154	JUMP		 	 
- stack 0: 0x664
2702	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
2703	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
2704	 E8	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xE60016029203640086FFF80099000E02D40000018700400168FFFE00E60017
2705	 E9	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xE60016029203640086FFF80099000E02D40000018700400168FFFE00E60017
- stack 0: 0xE0
2706	 EB	SHR		 	 
- stack 1: 0x664
- stack 0: 0xE60016
2707	 EC	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xE60016
- stack 0: 0xFFFF
2708	 EF	AND		 	 
- stack 1: 0x664
- stack 0: 0x16
2709	 F0	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x16
- stack 0: 0x1
2710	 F2	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x16
2711	 F3	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0x16
- stack 0: 0x380
2712	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
2713	 F7	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
2714	 F9	ADD		 	 
- stack 0: 0x668
2715	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
2716	 FB	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x29203640086FFF80099000E02D40000018700400168FFFE00E6001702F40348
2717	 FC	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x29203640086FFF80099000E02D40000018700400168FFFE00E6001702F40348
- stack 0: 0xF0
2718	 FE	SHR		 	 
- stack 1: 0x668
- stack 0: 0x292
2719	 FF	JUMP		 	 
- stack 0: 0x668
2720	 292	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,364(ignore imm)
- stack 0: 0x668
2721	 293	PUSH2	0020	 	 
- stack 1: 0x668
- stack 0: 0x20
2722	 296	MLOAD		 	  ;; # read from x1
- stack 1: 0x668
- stack 0: 0x7FFFC000
2723	 297	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
2724	 29C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x7FFFC000
2725	 29D	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
2726	 2A0	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
2727	 2A1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
2728	 2A6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
2729	 2A7	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
2730	 2A8	PUSH2	02B0	 ;; _neq_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x2B0
2731	 2AB	JUMPI		 	 
- stack 0: 0x668
2732	 2AC	PUSH2	02CA	 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 1: 0x668
- stack 0: 0x2CA
2733	 2AF	JUMP		 	 
- stack 0: 0x668
2734	 2CA	JUMPDEST		 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 0: 0x668
2735	 2CB	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
2736	 2CD	ADD		 	 
- stack 0: 0x66C
2737	 2CE	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
2738	 2CF	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x86FFF80099000E02D40000018700400168FFFE00E6001702F4034801CC0007
2739	 2D0	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x86FFF80099000E02D40000018700400168FFFE00E6001702F4034801CC0007
- stack 0: 0xF0
2740	 2D2	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x86
2741	 2D3	JUMP		 	 
- stack 0: 0x66C
2742	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x66C
2743	 87	PUSH4	ffff8000	 	 
- stack 1: 0x66C
- stack 0: 0xFFFF8000
2744	 8C	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xFFFF8000
- stack 0: 0x20
2745	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
2746	 90	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
2747	 92	ADD		 	 
- stack 0: 0x670
2748	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
2749	 94	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x99000E02D40000018700400168FFFE00E6001702F4034801CC000703360000
2750	 95	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x99000E02D40000018700400168FFFE00E6001702F4034801CC000703360000
- stack 0: 0xF0
2751	 97	SHR		 	 
- stack 1: 0x670
- stack 0: 0x99
2752	 98	JUMP		 	 
- stack 0: 0x670
2753	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x670
2754	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
2755	 9B	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x99000E02D40000018700400168FFFE00E6001702F4034801CC000703360000
2756	 9C	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x99000E02D40000018700400168FFFE00E6001702F4034801CC000703360000
- stack 0: 0xE0
2757	 9E	SHR		 	 
- stack 1: 0x670
- stack 0: 0x99000E
2758	 9F	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x99000E
- stack 0: 0xFFFF
2759	 A2	AND		 	 
- stack 1: 0x670
- stack 0: 0xE
2760	 A3	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xE
- stack 0: 0x1
2761	 A5	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xE
2762	 A6	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xE
- stack 0: 0x40
2763	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
2764	 AA	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
2765	 AC	ADD		 	 
- stack 0: 0x674
2766	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
2767	 AE	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x2D40000018700400168FFFE00E6001702F4034801CC00070336000001E60000
2768	 AF	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x2D40000018700400168FFFE00E6001702F4034801CC00070336000001E60000
- stack 0: 0xF0
2769	 B1	SHR		 	 
- stack 1: 0x674
- stack 0: 0x2D4
2770	 B2	JUMP		 	 
- stack 0: 0x674
2771	 2D4	JUMPDEST		 ;; __riscvimpl_SRL_2_1_2	  ;; # instr: srl sp,ra,sp(ignore imm)
- stack 0: 0x674
2772	 2D5	PUSH2	0020	 	 
- stack 1: 0x674
- stack 0: 0x20
2773	 2D8	MLOAD		 	  ;; # read from x1
- stack 1: 0x674
- stack 0: 0xFFFF8000
2774	 2D9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2775	 2DE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0xFFFF8000
2776	 2DF	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0xFFFF8000
- stack 0: 0x40
2777	 2E2	MLOAD		 	  ;; # read from x2
- stack 2: 0x674
- stack 1: 0xFFFF8000
- stack 0: 0xE
2778	 2E3	PUSH1	1F	 	 
- stack 3: 0x674
- stack 2: 0xFFFF8000
- stack 1: 0xE
- stack 0: 0x1F
2779	 2E5	AND		 	  ;; # mask to 5 bits
- stack 2: 0x674
- stack 1: 0xFFFF8000
- stack 0: 0xE
2780	 2E6	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3FFFE
2781	 2E7	PUSH2	0040	 	 
- stack 2: 0x674
- stack 1: 0x3FFFE
- stack 0: 0x40
2782	 2EA	MSTORE		 	  ;; # store to x2
- stack 0: 0x674
2783	 2EB	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
2784	 2ED	ADD		 	 
- stack 0: 0x678
2785	 2EE	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
2786	 2EF	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x18700400168FFFE00E6001702F4034801CC00070336000001E6000000E60018
2787	 2F0	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x18700400168FFFE00E6001702F4034801CC00070336000001E6000000E60018
- stack 0: 0xF0
2788	 2F2	SHR		 	 
- stack 1: 0x678
- stack 0: 0x187
2789	 2F3	JUMP		 	 
- stack 0: 0x678
2790	 187	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x678
2791	 188	PUSH4	00040000	 	 
- stack 1: 0x678
- stack 0: 0x40000
2792	 18D	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0x40000
- stack 0: 0x3A0
2793	 190	MSTORE		 	  ;; # store to x29
- stack 0: 0x678
2794	 191	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
2795	 193	ADD		 	 
- stack 0: 0x67C
2796	 194	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
2797	 195	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x168FFFE00E6001702F4034801CC00070336000001E6000000E6001802920334
2798	 196	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x168FFFE00E6001702F4034801CC00070336000001E6000000E6001802920334
- stack 0: 0xF0
2799	 198	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x168
2800	 199	JUMP		 	 
- stack 0: 0x67C
2801	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x67C
2802	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
2803	 16A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x168FFFE00E6001702F4034801CC00070336000001E6000000E6001802920334
2804	 16B	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x168FFFE00E6001702F4034801CC00070336000001E6000000E6001802920334
- stack 0: 0xE0
2805	 16D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x168FFFE
2806	 16E	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x168FFFE
- stack 0: 0xFFFF
2807	 171	AND		 	 
- stack 1: 0x67C
- stack 0: 0xFFFE
2808	 172	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0xFFFE
- stack 0: 0x1
2809	 174	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
2810	 175	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
2811	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x67C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
2812	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x67C
- stack 0: 0x3FFFE
2813	 17A	PUSH2	03A0	 	 
- stack 2: 0x67C
- stack 1: 0x3FFFE
- stack 0: 0x3A0
2814	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x67C
2815	 17E	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
2816	 180	ADD		 	 
- stack 0: 0x680
2817	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
2818	 182	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xE6001702F4034801CC00070336000001E6000000E600180292033403560000
2819	 183	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0xE6001702F4034801CC00070336000001E6000000E600180292033403560000
- stack 0: 0xF0
2820	 185	SHR		 	 
- stack 1: 0x680
- stack 0: 0xE6
2821	 186	JUMP		 	 
- stack 0: 0x680
2822	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x680
2823	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
2824	 E8	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0xE6001702F4034801CC00070336000001E6000000E600180292033403560000
2825	 E9	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0xE6001702F4034801CC00070336000001E6000000E600180292033403560000
- stack 0: 0xE0
2826	 EB	SHR		 	 
- stack 1: 0x680
- stack 0: 0xE60017
2827	 EC	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0xE60017
- stack 0: 0xFFFF
2828	 EF	AND		 	 
- stack 1: 0x680
- stack 0: 0x17
2829	 F0	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x17
- stack 0: 0x1
2830	 F2	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x17
2831	 F3	PUSH2	0380	 	 
- stack 2: 0x680
- stack 1: 0x17
- stack 0: 0x380
2832	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x680
2833	 F7	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
2834	 F9	ADD		 	 
- stack 0: 0x684
2835	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
2836	 FB	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x2F4034801CC00070336000001E6000000E6001802920334035600000086FFF8
2837	 FC	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x2F4034801CC00070336000001E6000000E6001802920334035600000086FFF8
- stack 0: 0xF0
2838	 FE	SHR		 	 
- stack 1: 0x684
- stack 0: 0x2F4
2839	 FF	JUMP		 	 
- stack 0: 0x684
2840	 2F4	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,348(ignore imm)
- stack 0: 0x684
2841	 2F5	PUSH2	0040	 	 
- stack 1: 0x684
- stack 0: 0x40
2842	 2F8	MLOAD		 	  ;; # read from x2
- stack 1: 0x684
- stack 0: 0x3FFFE
2843	 2F9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
2844	 2FE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x3FFFE
2845	 2FF	PUSH2	03A0	 	 
- stack 2: 0x684
- stack 1: 0x3FFFE
- stack 0: 0x3A0
2846	 302	MLOAD		 	  ;; # read from x29
- stack 2: 0x684
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
2847	 303	PUSH4	FFFFFFFF	 	 
- stack 3: 0x684
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
2848	 308	AND		 	  ;; # mask to 32 bits
- stack 2: 0x684
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
2849	 309	SUB		 	 
- stack 1: 0x684
- stack 0: 0x0
2850	 30A	PUSH2	0312	 ;; _neq_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x312
2851	 30D	JUMPI		 	 
- stack 0: 0x684
2852	 30E	PUSH2	032C	 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 1: 0x684
- stack 0: 0x32C
2853	 311	JUMP		 	 
- stack 0: 0x684
2854	 32C	JUMPDEST		 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 0: 0x684
2855	 32D	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
2856	 32F	ADD		 	 
- stack 0: 0x688
2857	 330	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
2858	 331	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1CC00070336000001E6000000E6001802920334035600000086FFF800990001
2859	 332	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x1CC00070336000001E6000000E6001802920334035600000086FFF800990001
- stack 0: 0xF0
2860	 334	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1CC
2861	 335	JUMP		 	 
- stack 0: 0x688
2862	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x688
2863	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
2864	 1CE	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x1CC00070336000001E6000000E6001802920334035600000086FFF800990001
2865	 1CF	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x1CC00070336000001E6000000E6001802920334035600000086FFF800990001
- stack 0: 0xE0
2866	 1D1	SHR		 	 
- stack 1: 0x688
- stack 0: 0x1CC0007
2867	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x1CC0007
- stack 0: 0xFFFF
2868	 1D5	AND		 	 
- stack 1: 0x688
- stack 0: 0x7
2869	 1D6	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0x7
- stack 0: 0x1
2870	 1D8	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0x7
2871	 1D9	PUSH2	0020	 	 
- stack 2: 0x688
- stack 1: 0x7
- stack 0: 0x20
2872	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x688
2873	 1DD	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
2874	 1DF	ADD		 	 
- stack 0: 0x68C
2875	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
2876	 1E1	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x336000001E6000000E6001802920334035600000086FFF80099000100B30000
2877	 1E2	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x336000001E6000000E6001802920334035600000086FFF80099000100B30000
- stack 0: 0xF0
2878	 1E4	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x336
2879	 1E5	JUMP		 	 
- stack 0: 0x68C
2880	 336	JUMPDEST		 ;; __riscvimpl_SRL_1_1_1	  ;; # instr: srl ra,ra,ra(ignore imm)
- stack 0: 0x68C
2881	 337	PUSH2	0020	 	 
- stack 1: 0x68C
- stack 0: 0x20
2882	 33A	MLOAD		 	  ;; # read from x1
- stack 1: 0x68C
- stack 0: 0x7
2883	 33B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x68C
- stack 1: 0x7
- stack 0: 0xFFFFFFFF
2884	 340	AND		 	  ;; # mask to 32 bits
- stack 1: 0x68C
- stack 0: 0x7
2885	 341	PUSH2	0020	 	 
- stack 2: 0x68C
- stack 1: 0x7
- stack 0: 0x20
2886	 344	MLOAD		 	  ;; # read from x1
- stack 2: 0x68C
- stack 1: 0x7
- stack 0: 0x7
2887	 345	PUSH1	1F	 	 
- stack 3: 0x68C
- stack 2: 0x7
- stack 1: 0x7
- stack 0: 0x1F
2888	 347	AND		 	  ;; # mask to 5 bits
- stack 2: 0x68C
- stack 1: 0x7
- stack 0: 0x7
2889	 348	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x0
2890	 349	PUSH2	0020	 	 
- stack 2: 0x68C
- stack 1: 0x0
- stack 0: 0x20
2891	 34C	MSTORE		 	  ;; # store to x1
- stack 0: 0x68C
2892	 34D	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
2893	 34F	ADD		 	 
- stack 0: 0x690
2894	 350	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
2895	 351	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1E6000000E6001802920334035600000086FFF80099000100B3000003700000
2896	 352	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1E6000000E6001802920334035600000086FFF80099000100B3000003700000
- stack 0: 0xF0
2897	 354	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1E6
2898	 355	JUMP		 	 
- stack 0: 0x690
2899	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x690
2900	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
2901	 1E8	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1E6000000E6001802920334035600000086FFF80099000100B3000003700000
2902	 1E9	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x1E6000000E6001802920334035600000086FFF80099000100B3000003700000
- stack 0: 0xE0
2903	 1EB	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1E60000
2904	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x1E60000
- stack 0: 0xFFFF
2905	 1EF	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
2906	 1F0	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
2907	 1F2	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
2908	 1F3	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x3A0
2909	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x690
2910	 1F7	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
2911	 1F9	ADD		 	 
- stack 0: 0x694
2912	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
2913	 1FB	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xE6001802920334035600000086FFF80099000100B3000003700000038F0001
2914	 1FC	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xE6001802920334035600000086FFF80099000100B3000003700000038F0001
- stack 0: 0xF0
2915	 1FE	SHR		 	 
- stack 1: 0x694
- stack 0: 0xE6
2916	 1FF	JUMP		 	 
- stack 0: 0x694
2917	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x694
2918	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
2919	 E8	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xE6001802920334035600000086FFF80099000100B3000003700000038F0001
2920	 E9	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xE6001802920334035600000086FFF80099000100B3000003700000038F0001
- stack 0: 0xE0
2921	 EB	SHR		 	 
- stack 1: 0x694
- stack 0: 0xE60018
2922	 EC	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xE60018
- stack 0: 0xFFFF
2923	 EF	AND		 	 
- stack 1: 0x694
- stack 0: 0x18
2924	 F0	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x18
- stack 0: 0x1
2925	 F2	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x18
2926	 F3	PUSH2	0380	 	 
- stack 2: 0x694
- stack 1: 0x18
- stack 0: 0x380
2927	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x694
2928	 F7	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
2929	 F9	ADD		 	 
- stack 0: 0x698
2930	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
2931	 FB	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x2920334035600000086FFF80099000100B3000003700000038F000103AE0002
2932	 FC	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x2920334035600000086FFF80099000100B3000003700000038F000103AE0002
- stack 0: 0xF0
2933	 FE	SHR		 	 
- stack 1: 0x698
- stack 0: 0x292
2934	 FF	JUMP		 	 
- stack 0: 0x698
2935	 292	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,364(ignore imm)
- stack 0: 0x698
2936	 293	PUSH2	0020	 	 
- stack 1: 0x698
- stack 0: 0x20
2937	 296	MLOAD		 	  ;; # read from x1
- stack 1: 0x698
- stack 0: 0x0
2938	 297	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2939	 29C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x0
2940	 29D	PUSH2	03A0	 	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x3A0
2941	 2A0	MLOAD		 	  ;; # read from x29
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x0
2942	 2A1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x698
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
2943	 2A6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x0
2944	 2A7	SUB		 	 
- stack 1: 0x698
- stack 0: 0x0
2945	 2A8	PUSH2	02B0	 ;; _neq_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x2B0
2946	 2AB	JUMPI		 	 
- stack 0: 0x698
2947	 2AC	PUSH2	02CA	 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 1: 0x698
- stack 0: 0x2CA
2948	 2AF	JUMP		 	 
- stack 0: 0x698
2949	 2CA	JUMPDEST		 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 0: 0x698
2950	 2CB	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
2951	 2CD	ADD		 	 
- stack 0: 0x69C
2952	 2CE	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
2953	 2CF	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35600000086FFF80099000100B3000003700000038F000103AE000203C8FFE8
2954	 2D0	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x35600000086FFF80099000100B3000003700000038F000103AE000203C8FFE8
- stack 0: 0xF0
2955	 2D2	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x356
2956	 2D3	JUMP		 	 
- stack 0: 0x69C
2957	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x69C
2958	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
2959	 358	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35600000086FFF80099000100B3000003700000038F000103AE000203C8FFE8
2960	 359	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x35600000086FFF80099000100B3000003700000038F000103AE000203C8FFE8
- stack 0: 0xE0
2961	 35B	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x3560000
2962	 35C	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x3560000
- stack 0: 0xFFFF
2963	 35F	AND		 	 
- stack 1: 0x69C
- stack 0: 0x0
2964	 360	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1
2965	 362	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x0
2966	 363	PUSH2	0080	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x80
2967	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x69C
2968	 367	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
2969	 369	ADD		 	 
- stack 0: 0x6A0
2970	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
2971	 36B	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x86FFF80099000100B3000003700000038F000103AE000203C8FFE80142FFFC
2972	 36C	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x86FFF80099000100B3000003700000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
2973	 36E	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x86
2974	 36F	JUMP		 	 
- stack 0: 0x6A0
2975	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x6A0
2976	 87	PUSH4	ffff8000	 	 
- stack 1: 0x6A0
- stack 0: 0xFFFF8000
2977	 8C	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFF8000
- stack 0: 0x20
2978	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
2979	 90	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
2980	 92	ADD		 	 
- stack 0: 0x6A4
2981	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
2982	 94	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
2983	 95	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
- stack 0: 0xF0
2984	 97	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x99
2985	 98	JUMP		 	 
- stack 0: 0x6A4
2986	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6A4
2987	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
2988	 9B	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
2989	 9C	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
- stack 0: 0xE0
2990	 9E	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x990001
2991	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x990001
- stack 0: 0xFFFF
2992	 A2	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
2993	 A3	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
2994	 A5	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
2995	 A6	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x40
2996	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
2997	 AA	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
2998	 AC	ADD		 	 
- stack 0: 0x6A8
2999	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3000	 AE	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xB3000003700000038F000103AE000203C8FFE80142FFFC00E60019040A0308
3001	 AF	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xB3000003700000038F000103AE000203C8FFE80142FFFC00E60019040A0308
- stack 0: 0xF0
3002	 B1	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xB3
3003	 B2	JUMP		 	 
- stack 0: 0x6A8
3004	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x6A8
3005	 B4	PUSH2	0020	 	 
- stack 1: 0x6A8
- stack 0: 0x20
3006	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A8
- stack 0: 0xFFFF8000
3007	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3008	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0xFFFF8000
3009	 BE	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x40
3010	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x1
3011	 C2	PUSH1	1F	 	 
- stack 3: 0x6A8
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
3012	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x1
3013	 C5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x7FFFC000
3014	 C6	PUSH2	0060	 	 
- stack 2: 0x6A8
- stack 1: 0x7FFFC000
- stack 0: 0x60
3015	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6A8
3016	 CA	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3017	 CC	ADD		 	 
- stack 0: 0x6AC
3018	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3019	 CE	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
3020	 CF	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
- stack 0: 0xF0
3021	 D1	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x370
3022	 D2	JUMP		 	 
- stack 0: 0x6AC
3023	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6AC
3024	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3025	 372	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
3026	 373	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
- stack 0: 0xE0
3027	 375	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000
3028	 376	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000
- stack 0: 0xFFFF
3029	 379	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3030	 37A	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
3031	 37C	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3032	 37D	PUSH2	0060	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x60
3033	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x7FFFC000
3034	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x6AC
- stack 0: 0x7FFFC000
3035	 382	PUSH2	00C0	 	 
- stack 2: 0x6AC
- stack 1: 0x7FFFC000
- stack 0: 0xC0
3036	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x6AC
3037	 386	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3038	 388	ADD		 	 
- stack 0: 0x6B0
3039	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3040	 38A	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
3041	 38B	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
- stack 0: 0xF0
3042	 38D	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x38F
3043	 38E	JUMP		 	 
- stack 0: 0x6B0
3044	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B0
3045	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3046	 391	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
3047	 392	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
- stack 0: 0xE0
3048	 394	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x38F0001
3049	 395	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3050	 398	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x1
3051	 399	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x1
3052	 39B	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x1
3053	 39C	PUSH2	0080	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x80
3054	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x0
3055	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B0
- stack 0: 0x1
3056	 3A1	PUSH2	0080	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x80
3057	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B0
3058	 3A5	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3059	 3A7	ADD		 	 
- stack 0: 0x6B4
3060	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3061	 3A9	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
3062	 3AA	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
- stack 0: 0xF0
3063	 3AC	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE
3064	 3AD	JUMP		 	 
- stack 0: 0x6B4
3065	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B4
3066	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3067	 3B0	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
3068	 3B1	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
- stack 0: 0xE0
3069	 3B3	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE0002
3070	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
3071	 3B7	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x2
3072	 3B8	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0x1
3073	 3BA	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x2
3074	 3BB	PUSH2	00A0	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0xA0
3075	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B4
3076	 3BF	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3077	 3C1	ADD		 	 
- stack 0: 0x6B8
3078	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3079	 3C3	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
3080	 3C4	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
- stack 0: 0xF0
3081	 3C6	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8
3082	 3C7	JUMP		 	 
- stack 0: 0x6B8
3083	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6B8
3084	 3C9	PUSH2	0080	 	 
- stack 1: 0x6B8
- stack 0: 0x80
3085	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x6B8
- stack 0: 0x1
3086	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3087	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B8
- stack 0: 0x1
3088	 3D3	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0xA0
3089	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x2
3090	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3091	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x2
3092	 3DD	SUB		 	 
- stack 1: 0x6B8
- stack 0: 0x1
3093	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x6B8
- stack 1: 0x1
- stack 0: 0x3E6
3094	 3E1	JUMPI		 	 
- stack 0: 0x6B8
3095	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x6B8
3096	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3097	 3E8	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
3098	 3E9	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
- stack 0: 0xE0
3099	 3EB	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8FFE8
3100	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x3C8FFE8
- stack 0: 0xFFFF
3101	 3EF	AND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFE8
3102	 3F0	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0xFFE8
- stack 0: 0x1
3103	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3104	 3F3	ADD		 	 
- stack 0: 0x6A0
3105	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFF
3106	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A0
3107	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3108	 3FB	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x86FFF80099000100B3000003700000038F000103AE000203C8FFE80142FFFC
3109	 3FC	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x86FFF80099000100B3000003700000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
3110	 3FE	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x86
3111	 3FF	JUMP		 	 
- stack 0: 0x6A0
3112	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x6A0
3113	 87	PUSH4	ffff8000	 	 
- stack 1: 0x6A0
- stack 0: 0xFFFF8000
3114	 8C	PUSH2	0020	 	 
- stack 2: 0x6A0
- stack 1: 0xFFFF8000
- stack 0: 0x20
3115	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A0
3116	 90	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3117	 92	ADD		 	 
- stack 0: 0x6A4
3118	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3119	 94	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
3120	 95	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
- stack 0: 0xF0
3121	 97	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x99
3122	 98	JUMP		 	 
- stack 0: 0x6A4
3123	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6A4
3124	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3125	 9B	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
3126	 9C	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x99000100B3000003700000038F000103AE000203C8FFE80142FFFC00E60019
- stack 0: 0xE0
3127	 9E	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x990001
3128	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x990001
- stack 0: 0xFFFF
3129	 A2	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3130	 A3	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x1
3131	 A5	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1
3132	 A6	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0x1
- stack 0: 0x40
3133	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
3134	 AA	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3135	 AC	ADD		 	 
- stack 0: 0x6A8
3136	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3137	 AE	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xB3000003700000038F000103AE000203C8FFE80142FFFC00E60019040A0308
3138	 AF	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xB3000003700000038F000103AE000203C8FFE80142FFFC00E60019040A0308
- stack 0: 0xF0
3139	 B1	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xB3
3140	 B2	JUMP		 	 
- stack 0: 0x6A8
3141	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x6A8
3142	 B4	PUSH2	0020	 	 
- stack 1: 0x6A8
- stack 0: 0x20
3143	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A8
- stack 0: 0xFFFF8000
3144	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3145	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0xFFFF8000
3146	 BE	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x40
3147	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x1
3148	 C2	PUSH1	1F	 	 
- stack 3: 0x6A8
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
3149	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6A8
- stack 1: 0xFFFF8000
- stack 0: 0x1
3150	 C5	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x7FFFC000
3151	 C6	PUSH2	0060	 	 
- stack 2: 0x6A8
- stack 1: 0x7FFFC000
- stack 0: 0x60
3152	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6A8
3153	 CA	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3154	 CC	ADD		 	 
- stack 0: 0x6AC
3155	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3156	 CE	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
3157	 CF	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
- stack 0: 0xF0
3158	 D1	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x370
3159	 D2	JUMP		 	 
- stack 0: 0x6AC
3160	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6AC
3161	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3162	 372	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
3163	 373	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000038F000103AE000203C8FFE80142FFFC00E60019040A030803560000
- stack 0: 0xE0
3164	 375	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3700000
3165	 376	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3700000
- stack 0: 0xFFFF
3166	 379	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3167	 37A	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
3168	 37C	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3169	 37D	PUSH2	0060	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x60
3170	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x7FFFC000
3171	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x6AC
- stack 0: 0x7FFFC000
3172	 382	PUSH2	00C0	 	 
- stack 2: 0x6AC
- stack 1: 0x7FFFC000
- stack 0: 0xC0
3173	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x6AC
3174	 386	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3175	 388	ADD		 	 
- stack 0: 0x6B0
3176	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3177	 38A	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
3178	 38B	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
- stack 0: 0xF0
3179	 38D	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x38F
3180	 38E	JUMP		 	 
- stack 0: 0x6B0
3181	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B0
3182	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3183	 391	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
3184	 392	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF8
- stack 0: 0xE0
3185	 394	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x38F0001
3186	 395	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3187	 398	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x1
3188	 399	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x1
3189	 39B	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x1
3190	 39C	PUSH2	0080	 	 
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x80
3191	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B0
- stack 1: 0x1
- stack 0: 0x1
3192	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B0
- stack 0: 0x2
3193	 3A1	PUSH2	0080	 	 
- stack 2: 0x6B0
- stack 1: 0x2
- stack 0: 0x80
3194	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B0
3195	 3A5	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3196	 3A7	ADD		 	 
- stack 0: 0x6B4
3197	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3198	 3A9	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
3199	 3AA	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
- stack 0: 0xF0
3200	 3AC	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE
3201	 3AD	JUMP		 	 
- stack 0: 0x6B4
3202	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B4
3203	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3204	 3B0	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
3205	 3B1	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE000203C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E
- stack 0: 0xE0
3206	 3B3	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3AE0002
3207	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
3208	 3B7	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x2
3209	 3B8	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0x1
3210	 3BA	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x2
3211	 3BB	PUSH2	00A0	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0xA0
3212	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B4
3213	 3BF	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3214	 3C1	ADD		 	 
- stack 0: 0x6B8
3215	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3216	 3C3	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
3217	 3C4	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x3C8FFE80142FFFC00E60019040A0308035600000086FFF80099000E00B30000
- stack 0: 0xF0
3218	 3C6	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x3C8
3219	 3C7	JUMP		 	 
- stack 0: 0x6B8
3220	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6B8
3221	 3C9	PUSH2	0080	 	 
- stack 1: 0x6B8
- stack 0: 0x80
3222	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x6B8
- stack 0: 0x2
3223	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3224	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B8
- stack 0: 0x2
3225	 3D3	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xA0
3226	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x2
3227	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3228	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x2
3229	 3DD	SUB		 	 
- stack 1: 0x6B8
- stack 0: 0x0
3230	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x6B8
- stack 1: 0x0
- stack 0: 0x3E6
3231	 3E1	JUMPI		 	 
- stack 0: 0x6B8
3232	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x6B8
- stack 0: 0x400
3233	 3E5	JUMP		 	 
- stack 0: 0x6B8
3234	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x6B8
3235	 401	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3236	 403	ADD		 	 
- stack 0: 0x6BC
3237	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3238	 405	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x142FFFC00E60019040A0308035600000086FFF80099000E00B30000044C0000
3239	 406	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x142FFFC00E60019040A0308035600000086FFF80099000E00B30000044C0000
- stack 0: 0xF0
3240	 408	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x142
3241	 409	JUMP		 	 
- stack 0: 0x6BC
3242	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x6BC
3243	 143	PUSH4	7fffc000	 	 
- stack 1: 0x6BC
- stack 0: 0x7FFFC000
3244	 148	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
3245	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x6BC
3246	 14C	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3247	 14E	ADD		 	 
- stack 0: 0x6C0
3248	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3249	 150	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xE60019040A0308035600000086FFF80099000E00B30000044C000003700000
3250	 151	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0xE60019040A0308035600000086FFF80099000E00B30000044C000003700000
- stack 0: 0xF0
3251	 153	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xE6
3252	 154	JUMP		 	 
- stack 0: 0x6C0
3253	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C0
3254	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3255	 E8	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0xE60019040A0308035600000086FFF80099000E00B30000044C000003700000
3256	 E9	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0xE60019040A0308035600000086FFF80099000E00B30000044C000003700000
- stack 0: 0xE0
3257	 EB	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0xE60019
3258	 EC	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0xE60019
- stack 0: 0xFFFF
3259	 EF	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x19
3260	 F0	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x19
- stack 0: 0x1
3261	 F2	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x19
3262	 F3	PUSH2	0380	 	 
- stack 2: 0x6C0
- stack 1: 0x19
- stack 0: 0x380
3263	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C0
3264	 F7	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
3265	 F9	ADD		 	 
- stack 0: 0x6C4
3266	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
3267	 FB	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x40A0308035600000086FFF80099000E00B30000044C000003700000038F0001
3268	 FC	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x40A0308035600000086FFF80099000E00B30000044C000003700000038F0001
- stack 0: 0xF0
3269	 FE	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x40A
3270	 FF	JUMP		 	 
- stack 0: 0x6C4
3271	 40A	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,308(ignore imm)
- stack 0: 0x6C4
3272	 40B	PUSH2	00C0	 	 
- stack 1: 0x6C4
- stack 0: 0xC0
3273	 40E	MLOAD		 	  ;; # read from x6
- stack 1: 0x6C4
- stack 0: 0x7FFFC000
3274	 40F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
3275	 414	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x7FFFC000
3276	 415	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
3277	 418	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C4
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
3278	 419	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
3279	 41E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C4
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
3280	 41F	SUB		 	 
- stack 1: 0x6C4
- stack 0: 0x0
3281	 420	PUSH2	0428	 ;; _neq_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 2: 0x6C4
- stack 1: 0x0
- stack 0: 0x428
3282	 423	JUMPI		 	 
- stack 0: 0x6C4
3283	 424	PUSH2	0442	 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 1: 0x6C4
- stack 0: 0x442
3284	 427	JUMP		 	 
- stack 0: 0x6C4
3285	 442	JUMPDEST		 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 0: 0x6C4
3286	 443	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
3287	 445	ADD		 	 
- stack 0: 0x6C8
3288	 446	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
3289	 447	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x35600000086FFF80099000E00B30000044C000003700000038F000103AE0002
3290	 448	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x35600000086FFF80099000E00B30000044C000003700000038F000103AE0002
- stack 0: 0xF0
3291	 44A	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x356
3292	 44B	JUMP		 	 
- stack 0: 0x6C8
3293	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6C8
3294	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
3295	 358	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x35600000086FFF80099000E00B30000044C000003700000038F000103AE0002
3296	 359	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x35600000086FFF80099000E00B30000044C000003700000038F000103AE0002
- stack 0: 0xE0
3297	 35B	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x3560000
3298	 35C	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x3560000
- stack 0: 0xFFFF
3299	 35F	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
3300	 360	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x1
3301	 362	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x0
3302	 363	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x0
- stack 0: 0x80
3303	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C8
3304	 367	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
3305	 369	ADD		 	 
- stack 0: 0x6CC
3306	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3307	 36B	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x86FFF80099000E00B30000044C000003700000038F000103AE000203C8FFE4
3308	 36C	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x86FFF80099000E00B30000044C000003700000038F000103AE000203C8FFE4
- stack 0: 0xF0
3309	 36E	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x86
3310	 36F	JUMP		 	 
- stack 0: 0x6CC
3311	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x6CC
3312	 87	PUSH4	ffff8000	 	 
- stack 1: 0x6CC
- stack 0: 0xFFFF8000
3313	 8C	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xFFFF8000
- stack 0: 0x20
3314	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6CC
3315	 90	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3316	 92	ADD		 	 
- stack 0: 0x6D0
3317	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3318	 94	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
3319	 95	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
- stack 0: 0xF0
3320	 97	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x99
3321	 98	JUMP		 	 
- stack 0: 0x6D0
3322	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D0
3323	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3324	 9B	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
3325	 9C	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
- stack 0: 0xE0
3326	 9E	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E
3327	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E
- stack 0: 0xFFFF
3328	 A2	AND		 	 
- stack 1: 0x6D0
- stack 0: 0xE
3329	 A3	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0xE
- stack 0: 0x1
3330	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0xE
3331	 A6	PUSH2	0040	 	 
- stack 2: 0x6D0
- stack 1: 0xE
- stack 0: 0x40
3332	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D0
3333	 AA	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
3334	 AC	ADD		 	 
- stack 0: 0x6D4
3335	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3336	 AE	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xB30000044C000003700000038F000103AE000203C8FFE4018700400168FFFE
3337	 AF	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0xB30000044C000003700000038F000103AE000203C8FFE4018700400168FFFE
- stack 0: 0xF0
3338	 B1	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xB3
3339	 B2	JUMP		 	 
- stack 0: 0x6D4
3340	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x6D4
3341	 B4	PUSH2	0020	 	 
- stack 1: 0x6D4
- stack 0: 0x20
3342	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6D4
- stack 0: 0xFFFF8000
3343	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3344	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D4
- stack 0: 0xFFFF8000
3345	 BE	PUSH2	0040	 	 
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0x40
3346	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xE
3347	 C2	PUSH1	1F	 	 
- stack 3: 0x6D4
- stack 2: 0xFFFF8000
- stack 1: 0xE
- stack 0: 0x1F
3348	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xE
3349	 C5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x3FFFE
3350	 C6	PUSH2	0060	 	 
- stack 2: 0x6D4
- stack 1: 0x3FFFE
- stack 0: 0x60
3351	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6D4
3352	 CA	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3353	 CC	ADD		 	 
- stack 0: 0x6D8
3354	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3355	 CE	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
3356	 CF	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
- stack 0: 0xF0
3357	 D1	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x44C
3358	 D2	JUMP		 	 
- stack 0: 0x6D8
3359	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6D8
3360	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3361	 44E	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
3362	 44F	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
- stack 0: 0xE0
3363	 451	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x44C0000
3364	 452	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3365	 455	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x0
3366	 456	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x0
- stack 0: 0x1
3367	 458	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x0
3368	 459	POP		 	 
- stack 0: 0x6D8
3369	 45A	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3370	 45C	ADD		 	 
- stack 0: 0x6DC
3371	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3372	 45E	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
3373	 45F	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
- stack 0: 0xF0
3374	 461	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x370
3375	 462	JUMP		 	 
- stack 0: 0x6DC
3376	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6DC
3377	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
3378	 372	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
3379	 373	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
- stack 0: 0xE0
3380	 375	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000
3381	 376	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000
- stack 0: 0xFFFF
3382	 379	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3383	 37A	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
3384	 37C	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3385	 37D	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x60
3386	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x3FFFE
3387	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x6DC
- stack 0: 0x3FFFE
3388	 382	PUSH2	00C0	 	 
- stack 2: 0x6DC
- stack 1: 0x3FFFE
- stack 0: 0xC0
3389	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x6DC
3390	 386	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3391	 388	ADD		 	 
- stack 0: 0x6E0
3392	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3393	 38A	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
3394	 38B	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
- stack 0: 0xF0
3395	 38D	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x38F
3396	 38E	JUMP		 	 
- stack 0: 0x6E0
3397	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E0
3398	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3399	 391	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
3400	 392	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
- stack 0: 0xE0
3401	 394	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x38F0001
3402	 395	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3403	 398	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x1
3404	 399	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x1
3405	 39B	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x1
3406	 39C	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x80
3407	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x0
3408	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E0
- stack 0: 0x1
3409	 3A1	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x80
3410	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E0
3411	 3A5	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3412	 3A7	ADD		 	 
- stack 0: 0x6E4
3413	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3414	 3A9	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
3415	 3AA	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
- stack 0: 0xF0
3416	 3AC	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE
3417	 3AD	JUMP		 	 
- stack 0: 0x6E4
3418	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6E4
3419	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3420	 3B0	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
3421	 3B1	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
- stack 0: 0xE0
3422	 3B3	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE0002
3423	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
3424	 3B7	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x2
3425	 3B8	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x2
- stack 0: 0x1
3426	 3BA	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x2
3427	 3BB	PUSH2	00A0	 	 
- stack 2: 0x6E4
- stack 1: 0x2
- stack 0: 0xA0
3428	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x6E4
3429	 3BF	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3430	 3C1	ADD		 	 
- stack 0: 0x6E8
3431	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3432	 3C3	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
3433	 3C4	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
- stack 0: 0xF0
3434	 3C6	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8
3435	 3C7	JUMP		 	 
- stack 0: 0x6E8
3436	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6E8
3437	 3C9	PUSH2	0080	 	 
- stack 1: 0x6E8
- stack 0: 0x80
3438	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x6E8
- stack 0: 0x1
3439	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3440	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6E8
- stack 0: 0x1
3441	 3D3	PUSH2	00A0	 	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0xA0
3442	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x2
3443	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3444	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x2
3445	 3DD	SUB		 	 
- stack 1: 0x6E8
- stack 0: 0x1
3446	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x6E8
- stack 1: 0x1
- stack 0: 0x3E6
3447	 3E1	JUMPI		 	 
- stack 0: 0x6E8
3448	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x6E8
3449	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
3450	 3E8	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
3451	 3E9	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
- stack 0: 0xE0
3452	 3EB	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8FFE4
3453	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
3454	 3EF	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFE4
3455	 3F0	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFFE4
- stack 0: 0x1
3456	 3F2	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3457	 3F3	ADD		 	 
- stack 0: 0x6CC
3458	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6CC
- stack 0: 0xFFFFFFFF
3459	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6CC
3460	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3461	 3FB	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x86FFF80099000E00B30000044C000003700000038F000103AE000203C8FFE4
3462	 3FC	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x86FFF80099000E00B30000044C000003700000038F000103AE000203C8FFE4
- stack 0: 0xF0
3463	 3FE	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x86
3464	 3FF	JUMP		 	 
- stack 0: 0x6CC
3465	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x6CC
3466	 87	PUSH4	ffff8000	 	 
- stack 1: 0x6CC
- stack 0: 0xFFFF8000
3467	 8C	PUSH2	0020	 	 
- stack 2: 0x6CC
- stack 1: 0xFFFF8000
- stack 0: 0x20
3468	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x6CC
3469	 90	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3470	 92	ADD		 	 
- stack 0: 0x6D0
3471	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3472	 94	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
3473	 95	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
- stack 0: 0xF0
3474	 97	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x99
3475	 98	JUMP		 	 
- stack 0: 0x6D0
3476	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6D0
3477	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3478	 9B	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
3479	 9C	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E00B30000044C000003700000038F000103AE000203C8FFE401870040
- stack 0: 0xE0
3480	 9E	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x99000E
3481	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x99000E
- stack 0: 0xFFFF
3482	 A2	AND		 	 
- stack 1: 0x6D0
- stack 0: 0xE
3483	 A3	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0xE
- stack 0: 0x1
3484	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0xE
3485	 A6	PUSH2	0040	 	 
- stack 2: 0x6D0
- stack 1: 0xE
- stack 0: 0x40
3486	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x6D0
3487	 AA	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
3488	 AC	ADD		 	 
- stack 0: 0x6D4
3489	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
3490	 AE	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xB30000044C000003700000038F000103AE000203C8FFE4018700400168FFFE
3491	 AF	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0xB30000044C000003700000038F000103AE000203C8FFE4018700400168FFFE
- stack 0: 0xF0
3492	 B1	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xB3
3493	 B2	JUMP		 	 
- stack 0: 0x6D4
3494	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x6D4
3495	 B4	PUSH2	0020	 	 
- stack 1: 0x6D4
- stack 0: 0x20
3496	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x6D4
- stack 0: 0xFFFF8000
3497	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3498	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D4
- stack 0: 0xFFFF8000
3499	 BE	PUSH2	0040	 	 
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0x40
3500	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xE
3501	 C2	PUSH1	1F	 	 
- stack 3: 0x6D4
- stack 2: 0xFFFF8000
- stack 1: 0xE
- stack 0: 0x1F
3502	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x6D4
- stack 1: 0xFFFF8000
- stack 0: 0xE
3503	 C5	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x3FFFE
3504	 C6	PUSH2	0060	 	 
- stack 2: 0x6D4
- stack 1: 0x3FFFE
- stack 0: 0x60
3505	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x6D4
3506	 CA	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
3507	 CC	ADD		 	 
- stack 0: 0x6D8
3508	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3509	 CE	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
3510	 CF	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
- stack 0: 0xF0
3511	 D1	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x44C
3512	 D2	JUMP		 	 
- stack 0: 0x6D8
3513	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6D8
3514	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
3515	 44E	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
3516	 44F	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x44C000003700000038F000103AE000203C8FFE4018700400168FFFE00E6001A
- stack 0: 0xE0
3517	 451	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x44C0000
3518	 452	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3519	 455	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x0
3520	 456	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x0
- stack 0: 0x1
3521	 458	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x0
3522	 459	POP		 	 
- stack 0: 0x6D8
3523	 45A	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3524	 45C	ADD		 	 
- stack 0: 0x6DC
3525	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3526	 45E	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
3527	 45F	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
- stack 0: 0xF0
3528	 461	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x370
3529	 462	JUMP		 	 
- stack 0: 0x6DC
3530	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x6DC
3531	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
3532	 372	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
3533	 373	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000038F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D4
- stack 0: 0xE0
3534	 375	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3700000
3535	 376	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3700000
- stack 0: 0xFFFF
3536	 379	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3537	 37A	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
3538	 37C	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
3539	 37D	PUSH2	0060	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x60
3540	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x3FFFE
3541	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x6DC
- stack 0: 0x3FFFE
3542	 382	PUSH2	00C0	 	 
- stack 2: 0x6DC
- stack 1: 0x3FFFE
- stack 0: 0xC0
3543	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x6DC
3544	 386	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
3545	 388	ADD		 	 
- stack 0: 0x6E0
3546	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
3547	 38A	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
3548	 38B	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
- stack 0: 0xF0
3549	 38D	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x38F
3550	 38E	JUMP		 	 
- stack 0: 0x6E0
3551	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6E0
3552	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
3553	 391	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
3554	 392	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x38F000103AE000203C8FFE4018700400168FFFE00E6001A040A02D403560000
- stack 0: 0xE0
3555	 394	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x38F0001
3556	 395	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3557	 398	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x1
3558	 399	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x1
3559	 39B	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x1
3560	 39C	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x80
3561	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x6E0
- stack 1: 0x1
- stack 0: 0x1
3562	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x6E0
- stack 0: 0x2
3563	 3A1	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x2
- stack 0: 0x80
3564	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E0
3565	 3A5	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
3566	 3A7	ADD		 	 
- stack 0: 0x6E4
3567	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
3568	 3A9	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
3569	 3AA	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
- stack 0: 0xF0
3570	 3AC	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE
3571	 3AD	JUMP		 	 
- stack 0: 0x6E4
3572	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6E4
3573	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
3574	 3B0	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
3575	 3B1	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE000203C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF8
- stack 0: 0xE0
3576	 3B3	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x3AE0002
3577	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
3578	 3B7	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x2
3579	 3B8	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x2
- stack 0: 0x1
3580	 3BA	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x2
3581	 3BB	PUSH2	00A0	 	 
- stack 2: 0x6E4
- stack 1: 0x2
- stack 0: 0xA0
3582	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x6E4
3583	 3BF	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
3584	 3C1	ADD		 	 
- stack 0: 0x6E8
3585	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
3586	 3C3	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
3587	 3C4	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x3C8FFE4018700400168FFFE00E6001A040A02D4035600000086FFF80099000F
- stack 0: 0xF0
3588	 3C6	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3C8
3589	 3C7	JUMP		 	 
- stack 0: 0x6E8
3590	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6E8
3591	 3C9	PUSH2	0080	 	 
- stack 1: 0x6E8
- stack 0: 0x80
3592	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x6E8
- stack 0: 0x2
3593	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3594	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6E8
- stack 0: 0x2
3595	 3D3	PUSH2	00A0	 	 
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0xA0
3596	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0x2
3597	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3598	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6E8
- stack 1: 0x2
- stack 0: 0x2
3599	 3DD	SUB		 	 
- stack 1: 0x6E8
- stack 0: 0x0
3600	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x3E6
3601	 3E1	JUMPI		 	 
- stack 0: 0x6E8
3602	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x6E8
- stack 0: 0x400
3603	 3E5	JUMP		 	 
- stack 0: 0x6E8
3604	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x6E8
3605	 401	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
3606	 403	ADD		 	 
- stack 0: 0x6EC
3607	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
3608	 405	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x18700400168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000
3609	 406	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x18700400168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000
- stack 0: 0xF0
3610	 408	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x187
3611	 409	JUMP		 	 
- stack 0: 0x6EC
3612	 187	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x6EC
3613	 188	PUSH4	00040000	 	 
- stack 1: 0x6EC
- stack 0: 0x40000
3614	 18D	PUSH2	03A0	 	 
- stack 2: 0x6EC
- stack 1: 0x40000
- stack 0: 0x3A0
3615	 190	MSTORE		 	  ;; # store to x29
- stack 0: 0x6EC
3616	 191	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
3617	 193	ADD		 	 
- stack 0: 0x6F0
3618	 194	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
3619	 195	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000044C0000
3620	 196	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000044C0000
- stack 0: 0xF0
3621	 198	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x168
3622	 199	JUMP		 	 
- stack 0: 0x6F0
3623	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x6F0
3624	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
3625	 16A	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000044C0000
3626	 16B	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x168FFFE00E6001A040A02D4035600000086FFF80099000F00B30000044C0000
- stack 0: 0xE0
3627	 16D	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x168FFFE
3628	 16E	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x168FFFE
- stack 0: 0xFFFF
3629	 171	AND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFFE
3630	 172	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0xFFFE
- stack 0: 0x1
3631	 174	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
3632	 175	PUSH2	03A0	 	 
- stack 2: 0x6F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
3633	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x6F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
3634	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x6F0
- stack 0: 0x3FFFE
3635	 17A	PUSH2	03A0	 	 
- stack 2: 0x6F0
- stack 1: 0x3FFFE
- stack 0: 0x3A0
3636	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x6F0
3637	 17E	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
3638	 180	ADD		 	 
- stack 0: 0x6F4
3639	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
3640	 182	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xE6001A040A02D4035600000086FFF80099000F00B30000044C0000044C0000
3641	 183	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0xE6001A040A02D4035600000086FFF80099000F00B30000044C0000044C0000
- stack 0: 0xF0
3642	 185	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xE6
3643	 186	JUMP		 	 
- stack 0: 0x6F4
3644	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6F4
3645	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
3646	 E8	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0xE6001A040A02D4035600000086FFF80099000F00B30000044C0000044C0000
3647	 E9	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0xE6001A040A02D4035600000086FFF80099000F00B30000044C0000044C0000
- stack 0: 0xE0
3648	 EB	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0xE6001A
3649	 EC	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0xE6001A
- stack 0: 0xFFFF
3650	 EF	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1A
3651	 F0	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1A
- stack 0: 0x1
3652	 F2	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1A
3653	 F3	PUSH2	0380	 	 
- stack 2: 0x6F4
- stack 1: 0x1A
- stack 0: 0x380
3654	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x6F4
3655	 F7	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
3656	 F9	ADD		 	 
- stack 0: 0x6F8
3657	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
3658	 FB	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x40A02D4035600000086FFF80099000F00B30000044C0000044C000003700000
3659	 FC	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x40A02D4035600000086FFF80099000F00B30000044C0000044C000003700000
- stack 0: 0xF0
3660	 FE	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x40A
3661	 FF	JUMP		 	 
- stack 0: 0x6F8
3662	 40A	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,308(ignore imm)
- stack 0: 0x6F8
3663	 40B	PUSH2	00C0	 	 
- stack 1: 0x6F8
- stack 0: 0xC0
3664	 40E	MLOAD		 	  ;; # read from x6
- stack 1: 0x6F8
- stack 0: 0x3FFFE
3665	 40F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
3666	 414	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0x3FFFE
3667	 415	PUSH2	03A0	 	 
- stack 2: 0x6F8
- stack 1: 0x3FFFE
- stack 0: 0x3A0
3668	 418	MLOAD		 	  ;; # read from x29
- stack 2: 0x6F8
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
3669	 419	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
3670	 41E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
3671	 41F	SUB		 	 
- stack 1: 0x6F8
- stack 0: 0x0
3672	 420	PUSH2	0428	 ;; _neq_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x428
3673	 423	JUMPI		 	 
- stack 0: 0x6F8
3674	 424	PUSH2	0442	 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 1: 0x6F8
- stack 0: 0x442
3675	 427	JUMP		 	 
- stack 0: 0x6F8
3676	 442	JUMPDEST		 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 0: 0x6F8
3677	 443	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
3678	 445	ADD		 	 
- stack 0: 0x6FC
3679	 446	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
3680	 447	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x35600000086FFF80099000F00B30000044C0000044C000003700000038F0001
3681	 448	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x35600000086FFF80099000F00B30000044C0000044C000003700000038F0001
- stack 0: 0xF0
3682	 44A	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x356
3683	 44B	JUMP		 	 
- stack 0: 0x6FC
3684	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6FC
3685	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
3686	 358	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x35600000086FFF80099000F00B30000044C0000044C000003700000038F0001
3687	 359	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x35600000086FFF80099000F00B30000044C0000044C000003700000038F0001
- stack 0: 0xE0
3688	 35B	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x3560000
3689	 35C	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x3560000
- stack 0: 0xFFFF
3690	 35F	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x0
3691	 360	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x1
3692	 362	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x0
3693	 363	PUSH2	0080	 	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x80
3694	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x6FC
3695	 367	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
3696	 369	ADD		 	 
- stack 0: 0x700
3697	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
3698	 36B	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x86FFF80099000F00B30000044C0000044C000003700000038F000103AE0002
3699	 36C	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x86FFF80099000F00B30000044C0000044C000003700000038F000103AE0002
- stack 0: 0xF0
3700	 36E	SHR		 	 
- stack 1: 0x700
- stack 0: 0x86
3701	 36F	JUMP		 	 
- stack 0: 0x700
3702	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x700
3703	 87	PUSH4	ffff8000	 	 
- stack 1: 0x700
- stack 0: 0xFFFF8000
3704	 8C	PUSH2	0020	 	 
- stack 2: 0x700
- stack 1: 0xFFFF8000
- stack 0: 0x20
3705	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x700
3706	 90	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
3707	 92	ADD		 	 
- stack 0: 0x704
3708	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
3709	 94	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
3710	 95	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
- stack 0: 0xF0
3711	 97	SHR		 	 
- stack 1: 0x704
- stack 0: 0x99
3712	 98	JUMP		 	 
- stack 0: 0x704
3713	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x704
3714	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
3715	 9B	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
3716	 9C	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
- stack 0: 0xE0
3717	 9E	SHR		 	 
- stack 1: 0x704
- stack 0: 0x99000F
3718	 9F	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x99000F
- stack 0: 0xFFFF
3719	 A2	AND		 	 
- stack 1: 0x704
- stack 0: 0xF
3720	 A3	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xF
- stack 0: 0x1
3721	 A5	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xF
3722	 A6	PUSH2	0040	 	 
- stack 2: 0x704
- stack 1: 0xF
- stack 0: 0x40
3723	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x704
3724	 AA	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
3725	 AC	ADD		 	 
- stack 0: 0x708
3726	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
3727	 AE	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0xB30000044C0000044C000003700000038F000103AE000203C8FFE001B90020
3728	 AF	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0xB30000044C0000044C000003700000038F000103AE000203C8FFE001B90020
- stack 0: 0xF0
3729	 B1	SHR		 	 
- stack 1: 0x708
- stack 0: 0xB3
3730	 B2	JUMP		 	 
- stack 0: 0x708
3731	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x708
3732	 B4	PUSH2	0020	 	 
- stack 1: 0x708
- stack 0: 0x20
3733	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x708
- stack 0: 0xFFFF8000
3734	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3735	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x708
- stack 0: 0xFFFF8000
3736	 BE	PUSH2	0040	 	 
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0x40
3737	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xF
3738	 C2	PUSH1	1F	 	 
- stack 3: 0x708
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
3739	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xF
3740	 C5	SHR		 	 
- stack 1: 0x708
- stack 0: 0x1FFFF
3741	 C6	PUSH2	0060	 	 
- stack 2: 0x708
- stack 1: 0x1FFFF
- stack 0: 0x60
3742	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x708
3743	 CA	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
3744	 CC	ADD		 	 
- stack 0: 0x70C
3745	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
3746	 CE	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
3747	 CF	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
- stack 0: 0xF0
3748	 D1	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x44C
3749	 D2	JUMP		 	 
- stack 0: 0x70C
3750	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x70C
3751	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
3752	 44E	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
3753	 44F	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
- stack 0: 0xE0
3754	 451	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000
3755	 452	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3756	 455	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
3757	 456	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
3758	 458	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
3759	 459	POP		 	 
- stack 0: 0x70C
3760	 45A	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
3761	 45C	ADD		 	 
- stack 0: 0x710
3762	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
3763	 45E	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
3764	 45F	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
- stack 0: 0xF0
3765	 461	SHR		 	 
- stack 1: 0x710
- stack 0: 0x44C
3766	 462	JUMP		 	 
- stack 0: 0x710
3767	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x710
3768	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
3769	 44E	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
3770	 44F	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
- stack 0: 0xE0
3771	 451	SHR		 	 
- stack 1: 0x710
- stack 0: 0x44C0000
3772	 452	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3773	 455	AND		 	 
- stack 1: 0x710
- stack 0: 0x0
3774	 456	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1
3775	 458	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x0
3776	 459	POP		 	 
- stack 0: 0x710
3777	 45A	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
3778	 45C	ADD		 	 
- stack 0: 0x714
3779	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
3780	 45E	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
3781	 45F	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
- stack 0: 0xF0
3782	 461	SHR		 	 
- stack 1: 0x714
- stack 0: 0x370
3783	 462	JUMP		 	 
- stack 0: 0x714
3784	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x714
3785	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
3786	 372	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
3787	 373	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
- stack 0: 0xE0
3788	 375	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3700000
3789	 376	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3700000
- stack 0: 0xFFFF
3790	 379	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
3791	 37A	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
3792	 37C	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
3793	 37D	PUSH2	0060	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x60
3794	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1FFFF
3795	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x714
- stack 0: 0x1FFFF
3796	 382	PUSH2	00C0	 	 
- stack 2: 0x714
- stack 1: 0x1FFFF
- stack 0: 0xC0
3797	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x714
3798	 386	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
3799	 388	ADD		 	 
- stack 0: 0x718
3800	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
3801	 38A	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
3802	 38B	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
- stack 0: 0xF0
3803	 38D	SHR		 	 
- stack 1: 0x718
- stack 0: 0x38F
3804	 38E	JUMP		 	 
- stack 0: 0x718
3805	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x718
3806	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
3807	 391	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
3808	 392	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
- stack 0: 0xE0
3809	 394	SHR		 	 
- stack 1: 0x718
- stack 0: 0x38F0001
3810	 395	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3811	 398	AND		 	 
- stack 1: 0x718
- stack 0: 0x1
3812	 399	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x1
3813	 39B	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x1
3814	 39C	PUSH2	0080	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x80
3815	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x0
3816	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x718
- stack 0: 0x1
3817	 3A1	PUSH2	0080	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x80
3818	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x718
3819	 3A5	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
3820	 3A7	ADD		 	 
- stack 0: 0x71C
3821	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
3822	 3A9	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
3823	 3AA	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
- stack 0: 0xF0
3824	 3AC	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3AE
3825	 3AD	JUMP		 	 
- stack 0: 0x71C
3826	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x71C
3827	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
3828	 3B0	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
3829	 3B1	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
- stack 0: 0xE0
3830	 3B3	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3AE0002
3831	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
3832	 3B7	AND		 	 
- stack 1: 0x71C
- stack 0: 0x2
3833	 3B8	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x1
3834	 3BA	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x2
3835	 3BB	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xA0
3836	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x71C
3837	 3BF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
3838	 3C1	ADD		 	 
- stack 0: 0x720
3839	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
3840	 3C3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
3841	 3C4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
- stack 0: 0xF0
3842	 3C6	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3C8
3843	 3C7	JUMP		 	 
- stack 0: 0x720
3844	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x720
3845	 3C9	PUSH2	0080	 	 
- stack 1: 0x720
- stack 0: 0x80
3846	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x720
- stack 0: 0x1
3847	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x720
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3848	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x720
- stack 0: 0x1
3849	 3D3	PUSH2	00A0	 	 
- stack 2: 0x720
- stack 1: 0x1
- stack 0: 0xA0
3850	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x720
- stack 1: 0x1
- stack 0: 0x2
3851	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x720
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3852	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x720
- stack 1: 0x1
- stack 0: 0x2
3853	 3DD	SUB		 	 
- stack 1: 0x720
- stack 0: 0x1
3854	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x720
- stack 1: 0x1
- stack 0: 0x3E6
3855	 3E1	JUMPI		 	 
- stack 0: 0x720
3856	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x720
3857	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
3858	 3E8	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
3859	 3E9	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
- stack 0: 0xE0
3860	 3EB	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3C8FFE0
3861	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x3C8FFE0
- stack 0: 0xFFFF
3862	 3EF	AND		 	 
- stack 1: 0x720
- stack 0: 0xFFE0
3863	 3F0	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0xFFE0
- stack 0: 0x1
3864	 3F2	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3865	 3F3	ADD		 	 
- stack 0: 0x700
3866	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x700
- stack 0: 0xFFFFFFFF
3867	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x700
3868	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
3869	 3FB	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x86FFF80099000F00B30000044C0000044C000003700000038F000103AE0002
3870	 3FC	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x86FFF80099000F00B30000044C0000044C000003700000038F000103AE0002
- stack 0: 0xF0
3871	 3FE	SHR		 	 
- stack 1: 0x700
- stack 0: 0x86
3872	 3FF	JUMP		 	 
- stack 0: 0x700
3873	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x700
3874	 87	PUSH4	ffff8000	 	 
- stack 1: 0x700
- stack 0: 0xFFFF8000
3875	 8C	PUSH2	0020	 	 
- stack 2: 0x700
- stack 1: 0xFFFF8000
- stack 0: 0x20
3876	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x700
3877	 90	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
3878	 92	ADD		 	 
- stack 0: 0x704
3879	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
3880	 94	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
3881	 95	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
- stack 0: 0xF0
3882	 97	SHR		 	 
- stack 1: 0x704
- stack 0: 0x99
3883	 98	JUMP		 	 
- stack 0: 0x704
3884	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x704
3885	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
3886	 9B	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
3887	 9C	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x99000F00B30000044C0000044C000003700000038F000103AE000203C8FFE0
- stack 0: 0xE0
3888	 9E	SHR		 	 
- stack 1: 0x704
- stack 0: 0x99000F
3889	 9F	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x99000F
- stack 0: 0xFFFF
3890	 A2	AND		 	 
- stack 1: 0x704
- stack 0: 0xF
3891	 A3	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0xF
- stack 0: 0x1
3892	 A5	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0xF
3893	 A6	PUSH2	0040	 	 
- stack 2: 0x704
- stack 1: 0xF
- stack 0: 0x40
3894	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x704
3895	 AA	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
3896	 AC	ADD		 	 
- stack 0: 0x708
3897	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
3898	 AE	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0xB30000044C0000044C000003700000038F000103AE000203C8FFE001B90020
3899	 AF	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0xB30000044C0000044C000003700000038F000103AE000203C8FFE001B90020
- stack 0: 0xF0
3900	 B1	SHR		 	 
- stack 1: 0x708
- stack 0: 0xB3
3901	 B2	JUMP		 	 
- stack 0: 0x708
3902	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x708
3903	 B4	PUSH2	0020	 	 
- stack 1: 0x708
- stack 0: 0x20
3904	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x708
- stack 0: 0xFFFF8000
3905	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3906	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x708
- stack 0: 0xFFFF8000
3907	 BE	PUSH2	0040	 	 
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0x40
3908	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xF
3909	 C2	PUSH1	1F	 	 
- stack 3: 0x708
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
3910	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x708
- stack 1: 0xFFFF8000
- stack 0: 0xF
3911	 C5	SHR		 	 
- stack 1: 0x708
- stack 0: 0x1FFFF
3912	 C6	PUSH2	0060	 	 
- stack 2: 0x708
- stack 1: 0x1FFFF
- stack 0: 0x60
3913	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x708
3914	 CA	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
3915	 CC	ADD		 	 
- stack 0: 0x70C
3916	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
3917	 CE	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
3918	 CF	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
- stack 0: 0xF0
3919	 D1	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x44C
3920	 D2	JUMP		 	 
- stack 0: 0x70C
3921	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x70C
3922	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
3923	 44E	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
3924	 44F	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000044C000003700000038F000103AE000203C8FFE001B900200168FFFF
- stack 0: 0xE0
3925	 451	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x44C0000
3926	 452	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3927	 455	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
3928	 456	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
3929	 458	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
3930	 459	POP		 	 
- stack 0: 0x70C
3931	 45A	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
3932	 45C	ADD		 	 
- stack 0: 0x710
3933	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
3934	 45E	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
3935	 45F	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
- stack 0: 0xF0
3936	 461	SHR		 	 
- stack 1: 0x710
- stack 0: 0x44C
3937	 462	JUMP		 	 
- stack 0: 0x710
3938	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x710
3939	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
3940	 44E	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
3941	 44F	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x44C000003700000038F000103AE000203C8FFE001B900200168FFFF00E6001B
- stack 0: 0xE0
3942	 451	SHR		 	 
- stack 1: 0x710
- stack 0: 0x44C0000
3943	 452	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x44C0000
- stack 0: 0xFFFF
3944	 455	AND		 	 
- stack 1: 0x710
- stack 0: 0x0
3945	 456	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1
3946	 458	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0x0
3947	 459	POP		 	 
- stack 0: 0x710
3948	 45A	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
3949	 45C	ADD		 	 
- stack 0: 0x714
3950	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
3951	 45E	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
3952	 45F	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
- stack 0: 0xF0
3953	 461	SHR		 	 
- stack 1: 0x714
- stack 0: 0x370
3954	 462	JUMP		 	 
- stack 0: 0x714
3955	 370	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x714
3956	 371	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
3957	 372	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
3958	 373	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x3700000038F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C
- stack 0: 0xE0
3959	 375	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3700000
3960	 376	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3700000
- stack 0: 0xFFFF
3961	 379	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
3962	 37A	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
3963	 37C	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
3964	 37D	PUSH2	0060	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x60
3965	 380	MLOAD		 	  ;; # read from x3
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1FFFF
3966	 381	ADD		 	  ;; # ADDI 3
- stack 1: 0x714
- stack 0: 0x1FFFF
3967	 382	PUSH2	00C0	 	 
- stack 2: 0x714
- stack 1: 0x1FFFF
- stack 0: 0xC0
3968	 385	MSTORE		 	  ;; # store to x6
- stack 0: 0x714
3969	 386	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
3970	 388	ADD		 	 
- stack 0: 0x718
3971	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
3972	 38A	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
3973	 38B	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
- stack 0: 0xF0
3974	 38D	SHR		 	 
- stack 1: 0x718
- stack 0: 0x38F
3975	 38E	JUMP		 	 
- stack 0: 0x718
3976	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x718
3977	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
3978	 391	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
3979	 392	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x38F000103AE000203C8FFE001B900200168FFFF00E6001B040A029C03560000
- stack 0: 0xE0
3980	 394	SHR		 	 
- stack 1: 0x718
- stack 0: 0x38F0001
3981	 395	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x38F0001
- stack 0: 0xFFFF
3982	 398	AND		 	 
- stack 1: 0x718
- stack 0: 0x1
3983	 399	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x1
3984	 39B	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x1
3985	 39C	PUSH2	0080	 	 
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x80
3986	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x718
- stack 1: 0x1
- stack 0: 0x1
3987	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x718
- stack 0: 0x2
3988	 3A1	PUSH2	0080	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x80
3989	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x718
3990	 3A5	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
3991	 3A7	ADD		 	 
- stack 0: 0x71C
3992	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
3993	 3A9	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
3994	 3AA	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
- stack 0: 0xF0
3995	 3AC	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3AE
3996	 3AD	JUMP		 	 
- stack 0: 0x71C
3997	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x71C
3998	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
3999	 3B0	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
4000	 3B1	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x3AE000203C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF8
- stack 0: 0xE0
4001	 3B3	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3AE0002
4002	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4003	 3B7	AND		 	 
- stack 1: 0x71C
- stack 0: 0x2
4004	 3B8	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x1
4005	 3BA	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x2
4006	 3BB	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xA0
4007	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x71C
4008	 3BF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4009	 3C1	ADD		 	 
- stack 0: 0x720
4010	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4011	 3C3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
4012	 3C4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x3C8FFE001B900200168FFFF00E6001B040A029C035600000086FFF800990001
- stack 0: 0xF0
4013	 3C6	SHR		 	 
- stack 1: 0x720
- stack 0: 0x3C8
4014	 3C7	JUMP		 	 
- stack 0: 0x720
4015	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x720
4016	 3C9	PUSH2	0080	 	 
- stack 1: 0x720
- stack 0: 0x80
4017	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x720
- stack 0: 0x2
4018	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4019	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x720
- stack 0: 0x2
4020	 3D3	PUSH2	00A0	 	 
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0xA0
4021	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0x2
4022	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x720
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4023	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x720
- stack 1: 0x2
- stack 0: 0x2
4024	 3DD	SUB		 	 
- stack 1: 0x720
- stack 0: 0x0
4025	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x720
- stack 1: 0x0
- stack 0: 0x3E6
4026	 3E1	JUMPI		 	 
- stack 0: 0x720
4027	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x720
- stack 0: 0x400
4028	 3E5	JUMP		 	 
- stack 0: 0x720
4029	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x720
4030	 401	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4031	 403	ADD		 	 
- stack 0: 0x724
4032	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4033	 405	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x1B900200168FFFF00E6001B040A029C035600000086FFF80099000100B30000
4034	 406	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x1B900200168FFFF00E6001B040A029C035600000086FFF80099000100B30000
- stack 0: 0xF0
4035	 408	SHR		 	 
- stack 1: 0x724
- stack 0: 0x1B9
4036	 409	JUMP		 	 
- stack 0: 0x724
4037	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x724
4038	 1BA	PUSH4	00020000	 	 
- stack 1: 0x724
- stack 0: 0x20000
4039	 1BF	PUSH2	03A0	 	 
- stack 2: 0x724
- stack 1: 0x20000
- stack 0: 0x3A0
4040	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x724
4041	 1C3	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4042	 1C5	ADD		 	 
- stack 0: 0x728
4043	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4044	 1C7	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x168FFFF00E6001B040A029C035600000086FFF80099000100B30000038F0001
4045	 1C8	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x168FFFF00E6001B040A029C035600000086FFF80099000100B30000038F0001
- stack 0: 0xF0
4046	 1CA	SHR		 	 
- stack 1: 0x728
- stack 0: 0x168
4047	 1CB	JUMP		 	 
- stack 0: 0x728
4048	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x728
4049	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
4050	 16A	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x168FFFF00E6001B040A029C035600000086FFF80099000100B30000038F0001
4051	 16B	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x168FFFF00E6001B040A029C035600000086FFF80099000100B30000038F0001
- stack 0: 0xE0
4052	 16D	SHR		 	 
- stack 1: 0x728
- stack 0: 0x168FFFF
4053	 16E	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
4054	 171	AND		 	 
- stack 1: 0x728
- stack 0: 0xFFFF
4055	 172	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0xFFFF
- stack 0: 0x1
4056	 174	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4057	 175	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
4058	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x728
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
4059	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x728
- stack 0: 0x1FFFF
4060	 17A	PUSH2	03A0	 	 
- stack 2: 0x728
- stack 1: 0x1FFFF
- stack 0: 0x3A0
4061	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x728
4062	 17E	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4063	 180	ADD		 	 
- stack 0: 0x72C
4064	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4065	 182	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xE6001B040A029C035600000086FFF80099000100B30000038F000103AE0002
4066	 183	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0xE6001B040A029C035600000086FFF80099000100B30000038F000103AE0002
- stack 0: 0xF0
4067	 185	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xE6
4068	 186	JUMP		 	 
- stack 0: 0x72C
4069	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x72C
4070	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4071	 E8	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xE6001B040A029C035600000086FFF80099000100B30000038F000103AE0002
4072	 E9	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0xE6001B040A029C035600000086FFF80099000100B30000038F000103AE0002
- stack 0: 0xE0
4073	 EB	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xE6001B
4074	 EC	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0xE6001B
- stack 0: 0xFFFF
4075	 EF	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1B
4076	 F0	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1B
- stack 0: 0x1
4077	 F2	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1B
4078	 F3	PUSH2	0380	 	 
- stack 2: 0x72C
- stack 1: 0x1B
- stack 0: 0x380
4079	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x72C
4080	 F7	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4081	 F9	ADD		 	 
- stack 0: 0x730
4082	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4083	 FB	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x40A029C035600000086FFF80099000100B30000038F000103AE000203C8FFEC
4084	 FC	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x40A029C035600000086FFF80099000100B30000038F000103AE000203C8FFEC
- stack 0: 0xF0
4085	 FE	SHR		 	 
- stack 1: 0x730
- stack 0: 0x40A
4086	 FF	JUMP		 	 
- stack 0: 0x730
4087	 40A	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,308(ignore imm)
- stack 0: 0x730
4088	 40B	PUSH2	00C0	 	 
- stack 1: 0x730
- stack 0: 0xC0
4089	 40E	MLOAD		 	  ;; # read from x6
- stack 1: 0x730
- stack 0: 0x1FFFF
4090	 40F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x730
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
4091	 414	AND		 	  ;; # mask to 32 bits
- stack 1: 0x730
- stack 0: 0x1FFFF
4092	 415	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0x1FFFF
- stack 0: 0x3A0
4093	 418	MLOAD		 	  ;; # read from x29
- stack 2: 0x730
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
4094	 419	PUSH4	FFFFFFFF	 	 
- stack 3: 0x730
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
4095	 41E	AND		 	  ;; # mask to 32 bits
- stack 2: 0x730
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
4096	 41F	SUB		 	 
- stack 1: 0x730
- stack 0: 0x0
4097	 420	PUSH2	0428	 ;; _neq_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 2: 0x730
- stack 1: 0x0
- stack 0: 0x428
4098	 423	JUMPI		 	 
- stack 0: 0x730
4099	 424	PUSH2	0442	 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 1: 0x730
- stack 0: 0x442
4100	 427	JUMP		 	 
- stack 0: 0x730
4101	 442	JUMPDEST		 ;; _neq_after_34353ea4c1b29b71210fb666d4b6230835a0f0d13c63fb99586e3864d43214d7	 
- stack 0: 0x730
4102	 443	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4103	 445	ADD		 	 
- stack 0: 0x734
4104	 446	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4105	 447	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x35600000086FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC
4106	 448	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x35600000086FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC
- stack 0: 0xF0
4107	 44A	SHR		 	 
- stack 1: 0x734
- stack 0: 0x356
4108	 44B	JUMP		 	 
- stack 0: 0x734
4109	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x734
4110	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4111	 358	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x35600000086FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC
4112	 359	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x35600000086FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC
- stack 0: 0xE0
4113	 35B	SHR		 	 
- stack 1: 0x734
- stack 0: 0x3560000
4114	 35C	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x3560000
- stack 0: 0xFFFF
4115	 35F	AND		 	 
- stack 1: 0x734
- stack 0: 0x0
4116	 360	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x1
4117	 362	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x0
4118	 363	PUSH2	0080	 	 
- stack 2: 0x734
- stack 1: 0x0
- stack 0: 0x80
4119	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x734
4120	 367	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4121	 369	ADD		 	 
- stack 0: 0x738
4122	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4123	 36B	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x86FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C
4124	 36C	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x86FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C
- stack 0: 0xF0
4125	 36E	SHR		 	 
- stack 1: 0x738
- stack 0: 0x86
4126	 36F	JUMP		 	 
- stack 0: 0x738
4127	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x738
4128	 87	PUSH4	ffff8000	 	 
- stack 1: 0x738
- stack 0: 0xFFFF8000
4129	 8C	PUSH2	0020	 	 
- stack 2: 0x738
- stack 1: 0xFFFF8000
- stack 0: 0x20
4130	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x738
4131	 90	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4132	 92	ADD		 	 
- stack 0: 0x73C
4133	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4134	 94	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
4135	 95	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
- stack 0: 0xF0
4136	 97	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x99
4137	 98	JUMP		 	 
- stack 0: 0x73C
4138	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x73C
4139	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4140	 9B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
4141	 9C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
- stack 0: 0xE0
4142	 9E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x990001
4143	 9F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x990001
- stack 0: 0xFFFF
4144	 A2	AND		 	 
- stack 1: 0x73C
- stack 0: 0x1
4145	 A3	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x1
4146	 A5	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x1
4147	 A6	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x40
4148	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x73C
4149	 AA	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4150	 AC	ADD		 	 
- stack 0: 0x740
4151	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4152	 AE	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xB30000038F000103AE000203C8FFEC0142FFFC00E6001C0100027403560000
4153	 AF	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xB30000038F000103AE000203C8FFEC0142FFFC00E6001C0100027403560000
- stack 0: 0xF0
4154	 B1	SHR		 	 
- stack 1: 0x740
- stack 0: 0xB3
4155	 B2	JUMP		 	 
- stack 0: 0x740
4156	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x740
4157	 B4	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4158	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0xFFFF8000
4159	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4160	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x740
- stack 0: 0xFFFF8000
4161	 BE	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x40
4162	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x1
4163	 C2	PUSH1	1F	 	 
- stack 3: 0x740
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
4164	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x1
4165	 C5	SHR		 	 
- stack 1: 0x740
- stack 0: 0x7FFFC000
4166	 C6	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0x7FFFC000
- stack 0: 0x60
4167	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4168	 CA	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4169	 CC	ADD		 	 
- stack 0: 0x744
4170	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4171	 CE	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
4172	 CF	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
- stack 0: 0xF0
4173	 D1	SHR		 	 
- stack 1: 0x744
- stack 0: 0x38F
4174	 D2	JUMP		 	 
- stack 0: 0x744
4175	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4176	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4177	 391	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
4178	 392	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
- stack 0: 0xE0
4179	 394	SHR		 	 
- stack 1: 0x744
- stack 0: 0x38F0001
4180	 395	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x38F0001
- stack 0: 0xFFFF
4181	 398	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4182	 399	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4183	 39B	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4184	 39C	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4185	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x0
4186	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x1
4187	 3A1	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4188	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4189	 3A5	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4190	 3A7	ADD		 	 
- stack 0: 0x748
4191	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4192	 3A9	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
4193	 3AA	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
- stack 0: 0xF0
4194	 3AC	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3AE
4195	 3AD	JUMP		 	 
- stack 0: 0x748
4196	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4197	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4198	 3B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
4199	 3B1	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
- stack 0: 0xE0
4200	 3B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3AE0002
4201	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4202	 3B7	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4203	 3B8	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4204	 3BA	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4205	 3BB	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4206	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4207	 3BF	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4208	 3C1	ADD		 	 
- stack 0: 0x74C
4209	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4210	 3C3	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
4211	 3C4	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
- stack 0: 0xF0
4212	 3C6	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3C8
4213	 3C7	JUMP		 	 
- stack 0: 0x74C
4214	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4215	 3C9	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4216	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x1
4217	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4218	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x1
4219	 3D3	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0xA0
4220	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4221	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4222	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x2
4223	 3DD	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x1
4224	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x3E6
4225	 3E1	JUMPI		 	 
- stack 0: 0x74C
4226	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x74C
4227	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
4228	 3E8	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
4229	 3E9	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
- stack 0: 0xE0
4230	 3EB	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3C8FFEC
4231	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x3C8FFEC
- stack 0: 0xFFFF
4232	 3EF	AND		 	 
- stack 1: 0x74C
- stack 0: 0xFFEC
4233	 3F0	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xFFEC
- stack 0: 0x1
4234	 3F2	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
4235	 3F3	ADD		 	 
- stack 0: 0x738
4236	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x738
- stack 0: 0xFFFFFFFF
4237	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x738
4238	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4239	 3FB	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x86FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C
4240	 3FC	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x86FFF80099000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C
- stack 0: 0xF0
4241	 3FE	SHR		 	 
- stack 1: 0x738
- stack 0: 0x86
4242	 3FF	JUMP		 	 
- stack 0: 0x738
4243	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x738
4244	 87	PUSH4	ffff8000	 	 
- stack 1: 0x738
- stack 0: 0xFFFF8000
4245	 8C	PUSH2	0020	 	 
- stack 2: 0x738
- stack 1: 0xFFFF8000
- stack 0: 0x20
4246	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x738
4247	 90	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4248	 92	ADD		 	 
- stack 0: 0x73C
4249	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4250	 94	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
4251	 95	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
- stack 0: 0xF0
4252	 97	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x99
4253	 98	JUMP		 	 
- stack 0: 0x73C
4254	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x73C
4255	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4256	 9B	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
4257	 9C	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x99000100B30000038F000103AE000203C8FFEC0142FFFC00E6001C01000274
- stack 0: 0xE0
4258	 9E	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x990001
4259	 9F	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x990001
- stack 0: 0xFFFF
4260	 A2	AND		 	 
- stack 1: 0x73C
- stack 0: 0x1
4261	 A3	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x1
4262	 A5	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x1
4263	 A6	PUSH2	0040	 	 
- stack 2: 0x73C
- stack 1: 0x1
- stack 0: 0x40
4264	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x73C
4265	 AA	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4266	 AC	ADD		 	 
- stack 0: 0x740
4267	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4268	 AE	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0xB30000038F000103AE000203C8FFEC0142FFFC00E6001C0100027403560000
4269	 AF	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0xB30000038F000103AE000203C8FFEC0142FFFC00E6001C0100027403560000
- stack 0: 0xF0
4270	 B1	SHR		 	 
- stack 1: 0x740
- stack 0: 0xB3
4271	 B2	JUMP		 	 
- stack 0: 0x740
4272	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x740
4273	 B4	PUSH2	0020	 	 
- stack 1: 0x740
- stack 0: 0x20
4274	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x740
- stack 0: 0xFFFF8000
4275	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4276	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x740
- stack 0: 0xFFFF8000
4277	 BE	PUSH2	0040	 	 
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x40
4278	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x1
4279	 C2	PUSH1	1F	 	 
- stack 3: 0x740
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
4280	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x740
- stack 1: 0xFFFF8000
- stack 0: 0x1
4281	 C5	SHR		 	 
- stack 1: 0x740
- stack 0: 0x7FFFC000
4282	 C6	PUSH2	0060	 	 
- stack 2: 0x740
- stack 1: 0x7FFFC000
- stack 0: 0x60
4283	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x740
4284	 CA	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4285	 CC	ADD		 	 
- stack 0: 0x744
4286	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4287	 CE	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
4288	 CF	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
- stack 0: 0xF0
4289	 D1	SHR		 	 
- stack 1: 0x744
- stack 0: 0x38F
4290	 D2	JUMP		 	 
- stack 0: 0x744
4291	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x744
4292	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4293	 391	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
4294	 392	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF8
- stack 0: 0xE0
4295	 394	SHR		 	 
- stack 1: 0x744
- stack 0: 0x38F0001
4296	 395	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x38F0001
- stack 0: 0xFFFF
4297	 398	AND		 	 
- stack 1: 0x744
- stack 0: 0x1
4298	 399	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4299	 39B	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x1
4300	 39C	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x80
4301	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x744
- stack 1: 0x1
- stack 0: 0x1
4302	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x744
- stack 0: 0x2
4303	 3A1	PUSH2	0080	 	 
- stack 2: 0x744
- stack 1: 0x2
- stack 0: 0x80
4304	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x744
4305	 3A5	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4306	 3A7	ADD		 	 
- stack 0: 0x748
4307	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4308	 3A9	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
4309	 3AA	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
- stack 0: 0xF0
4310	 3AC	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3AE
4311	 3AD	JUMP		 	 
- stack 0: 0x748
4312	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x748
4313	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4314	 3B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
4315	 3B1	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3AE000203C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007
- stack 0: 0xE0
4316	 3B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3AE0002
4317	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4318	 3B7	AND		 	 
- stack 1: 0x748
- stack 0: 0x2
4319	 3B8	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0x1
4320	 3BA	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x2
4321	 3BB	PUSH2	00A0	 	 
- stack 2: 0x748
- stack 1: 0x2
- stack 0: 0xA0
4322	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x748
4323	 3BF	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4324	 3C1	ADD		 	 
- stack 0: 0x74C
4325	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4326	 3C3	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
4327	 3C4	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x3C8FFEC0142FFFC00E6001C01000274035600000086FFF800990007044C0000
- stack 0: 0xF0
4328	 3C6	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x3C8
4329	 3C7	JUMP		 	 
- stack 0: 0x74C
4330	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x74C
4331	 3C9	PUSH2	0080	 	 
- stack 1: 0x74C
- stack 0: 0x80
4332	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x74C
- stack 0: 0x2
4333	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4334	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x74C
- stack 0: 0x2
4335	 3D3	PUSH2	00A0	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0xA0
4336	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4337	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x74C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4338	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x2
4339	 3DD	SUB		 	 
- stack 1: 0x74C
- stack 0: 0x0
4340	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x74C
- stack 1: 0x0
- stack 0: 0x3E6
4341	 3E1	JUMPI		 	 
- stack 0: 0x74C
4342	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x74C
- stack 0: 0x400
4343	 3E5	JUMP		 	 
- stack 0: 0x74C
4344	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x74C
4345	 401	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
4346	 403	ADD		 	 
- stack 0: 0x750
4347	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
4348	 405	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x142FFFC00E6001C01000274035600000086FFF800990007044C000000B30000
4349	 406	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x142FFFC00E6001C01000274035600000086FFF800990007044C000000B30000
- stack 0: 0xF0
4350	 408	SHR		 	 
- stack 1: 0x750
- stack 0: 0x142
4351	 409	JUMP		 	 
- stack 0: 0x750
4352	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x750
4353	 143	PUSH4	7fffc000	 	 
- stack 1: 0x750
- stack 0: 0x7FFFC000
4354	 148	PUSH2	03A0	 	 
- stack 2: 0x750
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
4355	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x750
4356	 14C	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
4357	 14E	ADD		 	 
- stack 0: 0x754
4358	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
4359	 150	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xE6001C01000274035600000086FFF800990007044C000000B30000038F0001
4360	 151	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0xE6001C01000274035600000086FFF800990007044C000000B30000038F0001
- stack 0: 0xF0
4361	 153	SHR		 	 
- stack 1: 0x754
- stack 0: 0xE6
4362	 154	JUMP		 	 
- stack 0: 0x754
4363	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x754
4364	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
4365	 E8	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0xE6001C01000274035600000086FFF800990007044C000000B30000038F0001
4366	 E9	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0xE6001C01000274035600000086FFF800990007044C000000B30000038F0001
- stack 0: 0xE0
4367	 EB	SHR		 	 
- stack 1: 0x754
- stack 0: 0xE6001C
4368	 EC	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0xE6001C
- stack 0: 0xFFFF
4369	 EF	AND		 	 
- stack 1: 0x754
- stack 0: 0x1C
4370	 F0	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x1C
- stack 0: 0x1
4371	 F2	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x1C
4372	 F3	PUSH2	0380	 	 
- stack 2: 0x754
- stack 1: 0x1C
- stack 0: 0x380
4373	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x754
4374	 F7	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
4375	 F9	ADD		 	 
- stack 0: 0x758
4376	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
4377	 FB	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1000274035600000086FFF800990007044C000000B30000038F000103AE0002
4378	 FC	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x1000274035600000086FFF800990007044C000000B30000038F000103AE0002
- stack 0: 0xF0
4379	 FE	SHR		 	 
- stack 1: 0x758
- stack 0: 0x100
4380	 FF	JUMP		 	 
- stack 0: 0x758
4381	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x758
4382	 101	PUSH2	0060	 	 
- stack 1: 0x758
- stack 0: 0x60
4383	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x758
- stack 0: 0x7FFFC000
4384	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x758
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
4385	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x758
- stack 0: 0x7FFFC000
4386	 10B	PUSH2	03A0	 	 
- stack 2: 0x758
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
4387	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x758
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
4388	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x758
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
4389	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x758
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
4390	 115	SUB		 	 
- stack 1: 0x758
- stack 0: 0x0
4391	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x758
- stack 1: 0x0
- stack 0: 0x11E
4392	 119	JUMPI		 	 
- stack 0: 0x758
4393	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x758
- stack 0: 0x138
4394	 11D	JUMP		 	 
- stack 0: 0x758
4395	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x758
4396	 139	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
4397	 13B	ADD		 	 
- stack 0: 0x75C
4398	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
4399	 13D	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x35600000086FFF800990007044C000000B30000038F000103AE000203C8FFE8
4400	 13E	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x35600000086FFF800990007044C000000B30000038F000103AE000203C8FFE8
- stack 0: 0xF0
4401	 140	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x356
4402	 141	JUMP		 	 
- stack 0: 0x75C
4403	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x75C
4404	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
4405	 358	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x35600000086FFF800990007044C000000B30000038F000103AE000203C8FFE8
4406	 359	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x35600000086FFF800990007044C000000B30000038F000103AE000203C8FFE8
- stack 0: 0xE0
4407	 35B	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3560000
4408	 35C	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3560000
- stack 0: 0xFFFF
4409	 35F	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
4410	 360	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
4411	 362	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
4412	 363	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x80
4413	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
4414	 367	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
4415	 369	ADD		 	 
- stack 0: 0x760
4416	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4417	 36B	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86FFF800990007044C000000B30000038F000103AE000203C8FFE801552000
4418	 36C	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x86FFF800990007044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xF0
4419	 36E	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
4420	 36F	JUMP		 	 
- stack 0: 0x760
4421	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x760
4422	 87	PUSH4	ffff8000	 	 
- stack 1: 0x760
- stack 0: 0xFFFF8000
4423	 8C	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0xFFFF8000
- stack 0: 0x20
4424	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
4425	 90	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4426	 92	ADD		 	 
- stack 0: 0x764
4427	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4428	 94	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
4429	 95	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xF0
4430	 97	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99
4431	 98	JUMP		 	 
- stack 0: 0x764
4432	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x764
4433	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4434	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
4435	 9C	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xE0
4436	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x990007
4437	 9F	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x990007
- stack 0: 0xFFFF
4438	 A2	AND		 	 
- stack 1: 0x764
- stack 0: 0x7
4439	 A3	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x7
- stack 0: 0x1
4440	 A5	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x7
4441	 A6	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x7
- stack 0: 0x40
4442	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
4443	 AA	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4444	 AC	ADD		 	 
- stack 0: 0x768
4445	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4446	 AE	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
4447	 AF	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
- stack 0: 0xF0
4448	 B1	SHR		 	 
- stack 1: 0x768
- stack 0: 0x44C
4449	 B2	JUMP		 	 
- stack 0: 0x768
4450	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4451	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4452	 44E	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
4453	 44F	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
- stack 0: 0xE0
4454	 451	SHR		 	 
- stack 1: 0x768
- stack 0: 0x44C0000
4455	 452	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4456	 455	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4457	 456	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4458	 458	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4459	 459	POP		 	 
- stack 0: 0x768
4460	 45A	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4461	 45C	ADD		 	 
- stack 0: 0x76C
4462	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4463	 45E	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6001D01000244
4464	 45F	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6001D01000244
- stack 0: 0xF0
4465	 461	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xB3
4466	 462	JUMP		 	 
- stack 0: 0x76C
4467	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x76C
4468	 B4	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4469	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0xFFFF8000
4470	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4471	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x76C
- stack 0: 0xFFFF8000
4472	 BE	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x40
4473	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x7
4474	 C2	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
4475	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x7
4476	 C5	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x1FFFF00
4477	 C6	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0x1FFFF00
- stack 0: 0x60
4478	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4479	 CA	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4480	 CC	ADD		 	 
- stack 0: 0x770
4481	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4482	 CE	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
4483	 CF	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
- stack 0: 0xF0
4484	 D1	SHR		 	 
- stack 1: 0x770
- stack 0: 0x38F
4485	 D2	JUMP		 	 
- stack 0: 0x770
4486	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4487	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4488	 391	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
4489	 392	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
- stack 0: 0xE0
4490	 394	SHR		 	 
- stack 1: 0x770
- stack 0: 0x38F0001
4491	 395	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x38F0001
- stack 0: 0xFFFF
4492	 398	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4493	 399	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4494	 39B	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4495	 39C	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4496	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x0
4497	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x1
4498	 3A1	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4499	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4500	 3A5	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4501	 3A7	ADD		 	 
- stack 0: 0x774
4502	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4503	 3A9	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
4504	 3AA	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
- stack 0: 0xF0
4505	 3AC	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3AE
4506	 3AD	JUMP		 	 
- stack 0: 0x774
4507	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4508	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4509	 3B0	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
4510	 3B1	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
- stack 0: 0xE0
4511	 3B3	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3AE0002
4512	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4513	 3B7	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4514	 3B8	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4515	 3BA	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4516	 3BB	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4517	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4518	 3BF	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4519	 3C1	ADD		 	 
- stack 0: 0x778
4520	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4521	 3C3	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
4522	 3C4	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
- stack 0: 0xF0
4523	 3C6	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3C8
4524	 3C7	JUMP		 	 
- stack 0: 0x778
4525	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4526	 3C9	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4527	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x1
4528	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4529	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x1
4530	 3D3	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0xA0
4531	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4532	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4533	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x2
4534	 3DD	SUB		 	 
- stack 1: 0x778
- stack 0: 0x1
4535	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x778
- stack 1: 0x1
- stack 0: 0x3E6
4536	 3E1	JUMPI		 	 
- stack 0: 0x778
4537	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x778
4538	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
4539	 3E8	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
4540	 3E9	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
- stack 0: 0xE0
4541	 3EB	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3C8FFE8
4542	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x3C8FFE8
- stack 0: 0xFFFF
4543	 3EF	AND		 	 
- stack 1: 0x778
- stack 0: 0xFFE8
4544	 3F0	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0xFFE8
- stack 0: 0x1
4545	 3F2	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4546	 3F3	ADD		 	 
- stack 0: 0x760
4547	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x760
- stack 0: 0xFFFFFFFF
4548	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x760
4549	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
4550	 3FB	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x86FFF800990007044C000000B30000038F000103AE000203C8FFE801552000
4551	 3FC	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x86FFF800990007044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xF0
4552	 3FE	SHR		 	 
- stack 1: 0x760
- stack 0: 0x86
4553	 3FF	JUMP		 	 
- stack 0: 0x760
4554	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x760
4555	 87	PUSH4	ffff8000	 	 
- stack 1: 0x760
- stack 0: 0xFFFF8000
4556	 8C	PUSH2	0020	 	 
- stack 2: 0x760
- stack 1: 0xFFFF8000
- stack 0: 0x20
4557	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x760
4558	 90	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
4559	 92	ADD		 	 
- stack 0: 0x764
4560	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
4561	 94	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
4562	 95	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xF0
4563	 97	SHR		 	 
- stack 1: 0x764
- stack 0: 0x99
4564	 98	JUMP		 	 
- stack 0: 0x764
4565	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x764
4566	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
4567	 9B	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
4568	 9C	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xE0
4569	 9E	SHR		 	 
- stack 1: 0x764
- stack 0: 0x990007
4570	 9F	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x990007
- stack 0: 0xFFFF
4571	 A2	AND		 	 
- stack 1: 0x764
- stack 0: 0x7
4572	 A3	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x7
- stack 0: 0x1
4573	 A5	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x7
4574	 A6	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x7
- stack 0: 0x40
4575	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
4576	 AA	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
4577	 AC	ADD		 	 
- stack 0: 0x768
4578	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
4579	 AE	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
4580	 AF	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
- stack 0: 0xF0
4581	 B1	SHR		 	 
- stack 1: 0x768
- stack 0: 0x44C
4582	 B2	JUMP		 	 
- stack 0: 0x768
4583	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x768
4584	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x768
- stack 0: 0x768
4585	 44E	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
4586	 44F	PUSH1	E0	 	 
- stack 2: 0x768
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E6001D
- stack 0: 0xE0
4587	 451	SHR		 	 
- stack 1: 0x768
- stack 0: 0x44C0000
4588	 452	PUSH2	FFFF	 	 
- stack 2: 0x768
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4589	 455	AND		 	 
- stack 1: 0x768
- stack 0: 0x0
4590	 456	PUSH1	01	 	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x1
4591	 458	SIGNEXTEND		 	 
- stack 1: 0x768
- stack 0: 0x0
4592	 459	POP		 	 
- stack 0: 0x768
4593	 45A	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
4594	 45C	ADD		 	 
- stack 0: 0x76C
4595	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
4596	 45E	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6001D01000244
4597	 45F	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6001D01000244
- stack 0: 0xF0
4598	 461	SHR		 	 
- stack 1: 0x76C
- stack 0: 0xB3
4599	 462	JUMP		 	 
- stack 0: 0x76C
4600	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x76C
4601	 B4	PUSH2	0020	 	 
- stack 1: 0x76C
- stack 0: 0x20
4602	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x76C
- stack 0: 0xFFFF8000
4603	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4604	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x76C
- stack 0: 0xFFFF8000
4605	 BE	PUSH2	0040	 	 
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x40
4606	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x7
4607	 C2	PUSH1	1F	 	 
- stack 3: 0x76C
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
4608	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x76C
- stack 1: 0xFFFF8000
- stack 0: 0x7
4609	 C5	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x1FFFF00
4610	 C6	PUSH2	0060	 	 
- stack 2: 0x76C
- stack 1: 0x1FFFF00
- stack 0: 0x60
4611	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x76C
4612	 CA	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
4613	 CC	ADD		 	 
- stack 0: 0x770
4614	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
4615	 CE	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
4616	 CF	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
- stack 0: 0xF0
4617	 D1	SHR		 	 
- stack 1: 0x770
- stack 0: 0x38F
4618	 D2	JUMP		 	 
- stack 0: 0x770
4619	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x770
4620	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
4621	 391	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
4622	 392	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E6001D0100024403560000
- stack 0: 0xE0
4623	 394	SHR		 	 
- stack 1: 0x770
- stack 0: 0x38F0001
4624	 395	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x38F0001
- stack 0: 0xFFFF
4625	 398	AND		 	 
- stack 1: 0x770
- stack 0: 0x1
4626	 399	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4627	 39B	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x1
4628	 39C	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x80
4629	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x770
- stack 1: 0x1
- stack 0: 0x1
4630	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x770
- stack 0: 0x2
4631	 3A1	PUSH2	0080	 	 
- stack 2: 0x770
- stack 1: 0x2
- stack 0: 0x80
4632	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x770
4633	 3A5	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
4634	 3A7	ADD		 	 
- stack 0: 0x774
4635	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
4636	 3A9	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
4637	 3AA	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
- stack 0: 0xF0
4638	 3AC	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3AE
4639	 3AD	JUMP		 	 
- stack 0: 0x774
4640	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x774
4641	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
4642	 3B0	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
4643	 3B1	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6001D01000244035600000086FFF8
- stack 0: 0xE0
4644	 3B3	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3AE0002
4645	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4646	 3B7	AND		 	 
- stack 1: 0x774
- stack 0: 0x2
4647	 3B8	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0x1
4648	 3BA	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0x2
4649	 3BB	PUSH2	00A0	 	 
- stack 2: 0x774
- stack 1: 0x2
- stack 0: 0xA0
4650	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x774
4651	 3BF	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
4652	 3C1	ADD		 	 
- stack 0: 0x778
4653	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
4654	 3C3	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
4655	 3C4	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x3C8FFE8015520000168FF0000E6001D01000244035600000086FFF80099000F
- stack 0: 0xF0
4656	 3C6	SHR		 	 
- stack 1: 0x778
- stack 0: 0x3C8
4657	 3C7	JUMP		 	 
- stack 0: 0x778
4658	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x778
4659	 3C9	PUSH2	0080	 	 
- stack 1: 0x778
- stack 0: 0x80
4660	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x778
- stack 0: 0x2
4661	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4662	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x2
4663	 3D3	PUSH2	00A0	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0xA0
4664	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4665	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x778
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4666	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x2
4667	 3DD	SUB		 	 
- stack 1: 0x778
- stack 0: 0x0
4668	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x3E6
4669	 3E1	JUMPI		 	 
- stack 0: 0x778
4670	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x778
- stack 0: 0x400
4671	 3E5	JUMP		 	 
- stack 0: 0x778
4672	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x778
4673	 401	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
4674	 403	ADD		 	 
- stack 0: 0x77C
4675	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
4676	 405	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x15520000168FF0000E6001D01000244035600000086FFF80099000F044C0000
4677	 406	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x15520000168FF0000E6001D01000244035600000086FFF80099000F044C0000
- stack 0: 0xF0
4678	 408	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x155
4679	 409	JUMP		 	 
- stack 0: 0x77C
4680	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x77C
4681	 156	PUSH4	02000000	 	 
- stack 1: 0x77C
- stack 0: 0x2000000
4682	 15B	PUSH2	03A0	 	 
- stack 2: 0x77C
- stack 1: 0x2000000
- stack 0: 0x3A0
4683	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x77C
4684	 15F	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
4685	 161	ADD		 	 
- stack 0: 0x780
4686	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
4687	 163	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x168FF0000E6001D01000244035600000086FFF80099000F044C0000044C0000
4688	 164	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x168FF0000E6001D01000244035600000086FFF80099000F044C0000044C0000
- stack 0: 0xF0
4689	 166	SHR		 	 
- stack 1: 0x780
- stack 0: 0x168
4690	 167	JUMP		 	 
- stack 0: 0x780
4691	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x780
4692	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
4693	 16A	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x168FF0000E6001D01000244035600000086FFF80099000F044C0000044C0000
4694	 16B	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x168FF0000E6001D01000244035600000086FFF80099000F044C0000044C0000
- stack 0: 0xE0
4695	 16D	SHR		 	 
- stack 1: 0x780
- stack 0: 0x168FF00
4696	 16E	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x168FF00
- stack 0: 0xFFFF
4697	 171	AND		 	 
- stack 1: 0x780
- stack 0: 0xFF00
4698	 172	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFF00
- stack 0: 0x1
4699	 174	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
4700	 175	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
4701	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
4702	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x780
- stack 0: 0x1FFFF00
4703	 17A	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
4704	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x780
4705	 17E	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
4706	 180	ADD		 	 
- stack 0: 0x784
4707	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
4708	 182	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xE6001D01000244035600000086FFF80099000F044C0000044C000000B30000
4709	 183	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0xE6001D01000244035600000086FFF80099000F044C0000044C000000B30000
- stack 0: 0xF0
4710	 185	SHR		 	 
- stack 1: 0x784
- stack 0: 0xE6
4711	 186	JUMP		 	 
- stack 0: 0x784
4712	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x784
4713	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
4714	 E8	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0xE6001D01000244035600000086FFF80099000F044C0000044C000000B30000
4715	 E9	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0xE6001D01000244035600000086FFF80099000F044C0000044C000000B30000
- stack 0: 0xE0
4716	 EB	SHR		 	 
- stack 1: 0x784
- stack 0: 0xE6001D
4717	 EC	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0xE6001D
- stack 0: 0xFFFF
4718	 EF	AND		 	 
- stack 1: 0x784
- stack 0: 0x1D
4719	 F0	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0x1D
- stack 0: 0x1
4720	 F2	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0x1D
4721	 F3	PUSH2	0380	 	 
- stack 2: 0x784
- stack 1: 0x1D
- stack 0: 0x380
4722	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x784
4723	 F7	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
4724	 F9	ADD		 	 
- stack 0: 0x788
4725	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
4726	 FB	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x1000244035600000086FFF80099000F044C0000044C000000B30000038F0001
4727	 FC	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x1000244035600000086FFF80099000F044C0000044C000000B30000038F0001
- stack 0: 0xF0
4728	 FE	SHR		 	 
- stack 1: 0x788
- stack 0: 0x100
4729	 FF	JUMP		 	 
- stack 0: 0x788
4730	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x788
4731	 101	PUSH2	0060	 	 
- stack 1: 0x788
- stack 0: 0x60
4732	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x788
- stack 0: 0x1FFFF00
4733	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x788
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
4734	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x788
- stack 0: 0x1FFFF00
4735	 10B	PUSH2	03A0	 	 
- stack 2: 0x788
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
4736	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x788
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
4737	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x788
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
4738	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x788
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
4739	 115	SUB		 	 
- stack 1: 0x788
- stack 0: 0x0
4740	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x788
- stack 1: 0x0
- stack 0: 0x11E
4741	 119	JUMPI		 	 
- stack 0: 0x788
4742	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x788
- stack 0: 0x138
4743	 11D	JUMP		 	 
- stack 0: 0x788
4744	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x788
4745	 139	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
4746	 13B	ADD		 	 
- stack 0: 0x78C
4747	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
4748	 13D	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x35600000086FFF80099000F044C0000044C000000B30000038F000103AE0002
4749	 13E	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x35600000086FFF80099000F044C0000044C000000B30000038F000103AE0002
- stack 0: 0xF0
4750	 140	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x356
4751	 141	JUMP		 	 
- stack 0: 0x78C
4752	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x78C
4753	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
4754	 358	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x35600000086FFF80099000F044C0000044C000000B30000038F000103AE0002
4755	 359	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x35600000086FFF80099000F044C0000044C000000B30000038F000103AE0002
- stack 0: 0xE0
4756	 35B	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3560000
4757	 35C	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3560000
- stack 0: 0xFFFF
4758	 35F	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
4759	 360	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
4760	 362	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
4761	 363	PUSH2	0080	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x80
4762	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x78C
4763	 367	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
4764	 369	ADD		 	 
- stack 0: 0x790
4765	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
4766	 36B	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x86FFF80099000F044C0000044C000000B30000038F000103AE000203C8FFE4
4767	 36C	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x86FFF80099000F044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
4768	 36E	SHR		 	 
- stack 1: 0x790
- stack 0: 0x86
4769	 36F	JUMP		 	 
- stack 0: 0x790
4770	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x790
4771	 87	PUSH4	ffff8000	 	 
- stack 1: 0x790
- stack 0: 0xFFFF8000
4772	 8C	PUSH2	0020	 	 
- stack 2: 0x790
- stack 1: 0xFFFF8000
- stack 0: 0x20
4773	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x790
4774	 90	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
4775	 92	ADD		 	 
- stack 0: 0x794
4776	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
4777	 94	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
4778	 95	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
4779	 97	SHR		 	 
- stack 1: 0x794
- stack 0: 0x99
4780	 98	JUMP		 	 
- stack 0: 0x794
4781	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x794
4782	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
4783	 9B	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
4784	 9C	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
4785	 9E	SHR		 	 
- stack 1: 0x794
- stack 0: 0x99000F
4786	 9F	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x99000F
- stack 0: 0xFFFF
4787	 A2	AND		 	 
- stack 1: 0x794
- stack 0: 0xF
4788	 A3	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0xF
- stack 0: 0x1
4789	 A5	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0xF
4790	 A6	PUSH2	0040	 	 
- stack 2: 0x794
- stack 1: 0xF
- stack 0: 0x40
4791	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x794
4792	 AA	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
4793	 AC	ADD		 	 
- stack 0: 0x798
4794	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
4795	 AE	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
4796	 AF	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
4797	 B1	SHR		 	 
- stack 1: 0x798
- stack 0: 0x44C
4798	 B2	JUMP		 	 
- stack 0: 0x798
4799	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
4800	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
4801	 44E	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
4802	 44F	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
4803	 451	SHR		 	 
- stack 1: 0x798
- stack 0: 0x44C0000
4804	 452	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4805	 455	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
4806	 456	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
4807	 458	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
4808	 459	POP		 	 
- stack 0: 0x798
4809	 45A	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
4810	 45C	ADD		 	 
- stack 0: 0x79C
4811	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
4812	 45E	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
4813	 45F	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
- stack 0: 0xF0
4814	 461	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x44C
4815	 462	JUMP		 	 
- stack 0: 0x79C
4816	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x79C
4817	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
4818	 44E	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
4819	 44F	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
- stack 0: 0xE0
4820	 451	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x44C0000
4821	 452	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4822	 455	AND		 	 
- stack 1: 0x79C
- stack 0: 0x0
4823	 456	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x1
4824	 458	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x0
4825	 459	POP		 	 
- stack 0: 0x79C
4826	 45A	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
4827	 45C	ADD		 	 
- stack 0: 0x7A0
4828	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
4829	 45E	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E6001E01000210
4830	 45F	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E6001E01000210
- stack 0: 0xF0
4831	 461	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xB3
4832	 462	JUMP		 	 
- stack 0: 0x7A0
4833	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x7A0
4834	 B4	PUSH2	0020	 	 
- stack 1: 0x7A0
- stack 0: 0x20
4835	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7A0
- stack 0: 0xFFFF8000
4836	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4837	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0xFFFF8000
4838	 BE	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0x40
4839	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xF
4840	 C2	PUSH1	1F	 	 
- stack 3: 0x7A0
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
4841	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xF
4842	 C5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x1FFFF
4843	 C6	PUSH2	0060	 	 
- stack 2: 0x7A0
- stack 1: 0x1FFFF
- stack 0: 0x60
4844	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A0
4845	 CA	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
4846	 CC	ADD		 	 
- stack 0: 0x7A4
4847	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
4848	 CE	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
4849	 CF	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
- stack 0: 0xF0
4850	 D1	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38F
4851	 D2	JUMP		 	 
- stack 0: 0x7A4
4852	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A4
4853	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
4854	 391	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
4855	 392	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
- stack 0: 0xE0
4856	 394	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38F0001
4857	 395	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
4858	 398	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x1
4859	 399	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x1
4860	 39B	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x1
4861	 39C	PUSH2	0080	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x80
4862	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x0
4863	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A4
- stack 0: 0x1
4864	 3A1	PUSH2	0080	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x80
4865	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A4
4866	 3A5	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
4867	 3A7	ADD		 	 
- stack 0: 0x7A8
4868	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
4869	 3A9	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
4870	 3AA	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
- stack 0: 0xF0
4871	 3AC	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE
4872	 3AD	JUMP		 	 
- stack 0: 0x7A8
4873	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A8
4874	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
4875	 3B0	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
4876	 3B1	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
- stack 0: 0xE0
4877	 3B3	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE0002
4878	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
4879	 3B7	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x2
4880	 3B8	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0x1
4881	 3BA	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x2
4882	 3BB	PUSH2	00A0	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0xA0
4883	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A8
4884	 3BF	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
4885	 3C1	ADD		 	 
- stack 0: 0x7AC
4886	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
4887	 3C3	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
4888	 3C4	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
- stack 0: 0xF0
4889	 3C6	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8
4890	 3C7	JUMP		 	 
- stack 0: 0x7AC
4891	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7AC
4892	 3C9	PUSH2	0080	 	 
- stack 1: 0x7AC
- stack 0: 0x80
4893	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x7AC
- stack 0: 0x1
4894	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4895	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7AC
- stack 0: 0x1
4896	 3D3	PUSH2	00A0	 	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0xA0
4897	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x2
4898	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7AC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4899	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x2
4900	 3DD	SUB		 	 
- stack 1: 0x7AC
- stack 0: 0x1
4901	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x7AC
- stack 1: 0x1
- stack 0: 0x3E6
4902	 3E1	JUMPI		 	 
- stack 0: 0x7AC
4903	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x7AC
4904	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
4905	 3E8	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
4906	 3E9	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
- stack 0: 0xE0
4907	 3EB	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8FFE4
4908	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
4909	 3EF	AND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFE4
4910	 3F0	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0xFFE4
- stack 0: 0x1
4911	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4912	 3F3	ADD		 	 
- stack 0: 0x790
4913	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x790
- stack 0: 0xFFFFFFFF
4914	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x790
4915	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
4916	 3FB	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x86FFF80099000F044C0000044C000000B30000038F000103AE000203C8FFE4
4917	 3FC	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x86FFF80099000F044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
4918	 3FE	SHR		 	 
- stack 1: 0x790
- stack 0: 0x86
4919	 3FF	JUMP		 	 
- stack 0: 0x790
4920	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x790
4921	 87	PUSH4	ffff8000	 	 
- stack 1: 0x790
- stack 0: 0xFFFF8000
4922	 8C	PUSH2	0020	 	 
- stack 2: 0x790
- stack 1: 0xFFFF8000
- stack 0: 0x20
4923	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x790
4924	 90	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
4925	 92	ADD		 	 
- stack 0: 0x794
4926	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
4927	 94	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
4928	 95	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
4929	 97	SHR		 	 
- stack 1: 0x794
- stack 0: 0x99
4930	 98	JUMP		 	 
- stack 0: 0x794
4931	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x794
4932	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
4933	 9B	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
4934	 9C	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x99000F044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
4935	 9E	SHR		 	 
- stack 1: 0x794
- stack 0: 0x99000F
4936	 9F	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x99000F
- stack 0: 0xFFFF
4937	 A2	AND		 	 
- stack 1: 0x794
- stack 0: 0xF
4938	 A3	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0xF
- stack 0: 0x1
4939	 A5	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0xF
4940	 A6	PUSH2	0040	 	 
- stack 2: 0x794
- stack 1: 0xF
- stack 0: 0x40
4941	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x794
4942	 AA	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
4943	 AC	ADD		 	 
- stack 0: 0x798
4944	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
4945	 AE	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
4946	 AF	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
4947	 B1	SHR		 	 
- stack 1: 0x798
- stack 0: 0x44C
4948	 B2	JUMP		 	 
- stack 0: 0x798
4949	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x798
4950	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
4951	 44E	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
4952	 44F	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
4953	 451	SHR		 	 
- stack 1: 0x798
- stack 0: 0x44C0000
4954	 452	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4955	 455	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
4956	 456	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
4957	 458	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
4958	 459	POP		 	 
- stack 0: 0x798
4959	 45A	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
4960	 45C	ADD		 	 
- stack 0: 0x79C
4961	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
4962	 45E	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
4963	 45F	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
- stack 0: 0xF0
4964	 461	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x44C
4965	 462	JUMP		 	 
- stack 0: 0x79C
4966	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x79C
4967	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
4968	 44E	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
4969	 44F	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E6001E
- stack 0: 0xE0
4970	 451	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x44C0000
4971	 452	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
4972	 455	AND		 	 
- stack 1: 0x79C
- stack 0: 0x0
4973	 456	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x0
- stack 0: 0x1
4974	 458	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x0
4975	 459	POP		 	 
- stack 0: 0x79C
4976	 45A	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
4977	 45C	ADD		 	 
- stack 0: 0x7A0
4978	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
4979	 45E	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E6001E01000210
4980	 45F	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E6001E01000210
- stack 0: 0xF0
4981	 461	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xB3
4982	 462	JUMP		 	 
- stack 0: 0x7A0
4983	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x7A0
4984	 B4	PUSH2	0020	 	 
- stack 1: 0x7A0
- stack 0: 0x20
4985	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7A0
- stack 0: 0xFFFF8000
4986	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
4987	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0xFFFF8000
4988	 BE	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0x40
4989	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xF
4990	 C2	PUSH1	1F	 	 
- stack 3: 0x7A0
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
4991	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7A0
- stack 1: 0xFFFF8000
- stack 0: 0xF
4992	 C5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x1FFFF
4993	 C6	PUSH2	0060	 	 
- stack 2: 0x7A0
- stack 1: 0x1FFFF
- stack 0: 0x60
4994	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A0
4995	 CA	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
4996	 CC	ADD		 	 
- stack 0: 0x7A4
4997	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
4998	 CE	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
4999	 CF	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
- stack 0: 0xF0
5000	 D1	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38F
5001	 D2	JUMP		 	 
- stack 0: 0x7A4
5002	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A4
5003	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A4
- stack 0: 0x7A4
5004	 391	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
5005	 392	PUSH1	E0	 	 
- stack 2: 0x7A4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E6001E0100021003560000
- stack 0: 0xE0
5006	 394	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x38F0001
5007	 395	PUSH2	FFFF	 	 
- stack 2: 0x7A4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5008	 398	AND		 	 
- stack 1: 0x7A4
- stack 0: 0x1
5009	 399	PUSH1	01	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x1
5010	 39B	SIGNEXTEND		 	 
- stack 1: 0x7A4
- stack 0: 0x1
5011	 39C	PUSH2	0080	 	 
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x80
5012	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A4
- stack 1: 0x1
- stack 0: 0x1
5013	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A4
- stack 0: 0x2
5014	 3A1	PUSH2	0080	 	 
- stack 2: 0x7A4
- stack 1: 0x2
- stack 0: 0x80
5015	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A4
5016	 3A5	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5017	 3A7	ADD		 	 
- stack 0: 0x7A8
5018	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5019	 3A9	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
5020	 3AA	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
- stack 0: 0xF0
5021	 3AC	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE
5022	 3AD	JUMP		 	 
- stack 0: 0x7A8
5023	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7A8
5024	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5025	 3B0	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
5026	 3B1	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8
- stack 0: 0xE0
5027	 3B3	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x3AE0002
5028	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5029	 3B7	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x2
5030	 3B8	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0x1
5031	 3BA	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x2
5032	 3BB	PUSH2	00A0	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0xA0
5033	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x7A8
5034	 3BF	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5035	 3C1	ADD		 	 
- stack 0: 0x7AC
5036	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5037	 3C3	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
5038	 3C4	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x3C8FFE401B900200168FFFF00E6001E01000210035600000086FFF8044C0000
- stack 0: 0xF0
5039	 3C6	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x3C8
5040	 3C7	JUMP		 	 
- stack 0: 0x7AC
5041	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7AC
5042	 3C9	PUSH2	0080	 	 
- stack 1: 0x7AC
- stack 0: 0x80
5043	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x7AC
- stack 0: 0x2
5044	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5045	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7AC
- stack 0: 0x2
5046	 3D3	PUSH2	00A0	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0xA0
5047	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0x2
5048	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7AC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5049	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0x2
5050	 3DD	SUB		 	 
- stack 1: 0x7AC
- stack 0: 0x0
5051	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x7AC
- stack 1: 0x0
- stack 0: 0x3E6
5052	 3E1	JUMPI		 	 
- stack 0: 0x7AC
5053	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x7AC
- stack 0: 0x400
5054	 3E5	JUMP		 	 
- stack 0: 0x7AC
5055	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x7AC
5056	 401	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5057	 403	ADD		 	 
- stack 0: 0x7B0
5058	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5059	 405	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x1B900200168FFFF00E6001E01000210035600000086FFF8044C000000990001
5060	 406	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x1B900200168FFFF00E6001E01000210035600000086FFF8044C000000990001
- stack 0: 0xF0
5061	 408	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x1B9
5062	 409	JUMP		 	 
- stack 0: 0x7B0
5063	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x7B0
5064	 1BA	PUSH4	00020000	 	 
- stack 1: 0x7B0
- stack 0: 0x20000
5065	 1BF	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0x20000
- stack 0: 0x3A0
5066	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x7B0
5067	 1C3	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5068	 1C5	ADD		 	 
- stack 0: 0x7B4
5069	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5070	 1C7	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x168FFFF00E6001E01000210035600000086FFF8044C00000099000100B30000
5071	 1C8	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x168FFFF00E6001E01000210035600000086FFF8044C00000099000100B30000
- stack 0: 0xF0
5072	 1CA	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x168
5073	 1CB	JUMP		 	 
- stack 0: 0x7B4
5074	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x7B4
5075	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
5076	 16A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x168FFFF00E6001E01000210035600000086FFF8044C00000099000100B30000
5077	 16B	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x168FFFF00E6001E01000210035600000086FFF8044C00000099000100B30000
- stack 0: 0xE0
5078	 16D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x168FFFF
5079	 16E	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
5080	 171	AND		 	 
- stack 1: 0x7B4
- stack 0: 0xFFFF
5081	 172	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0xFFFF
- stack 0: 0x1
5082	 174	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5083	 175	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
5084	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
5085	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x7B4
- stack 0: 0x1FFFF
5086	 17A	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0x1FFFF
- stack 0: 0x3A0
5087	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x7B4
5088	 17E	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5089	 180	ADD		 	 
- stack 0: 0x7B8
5090	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5091	 182	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xE6001E01000210035600000086FFF8044C00000099000100B30000038F0001
5092	 183	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xE6001E01000210035600000086FFF8044C00000099000100B30000038F0001
- stack 0: 0xF0
5093	 185	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xE6
5094	 186	JUMP		 	 
- stack 0: 0x7B8
5095	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7B8
5096	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5097	 E8	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xE6001E01000210035600000086FFF8044C00000099000100B30000038F0001
5098	 E9	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0xE6001E01000210035600000086FFF8044C00000099000100B30000038F0001
- stack 0: 0xE0
5099	 EB	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xE6001E
5100	 EC	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0xE6001E
- stack 0: 0xFFFF
5101	 EF	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1E
5102	 F0	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1E
- stack 0: 0x1
5103	 F2	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1E
5104	 F3	PUSH2	0380	 	 
- stack 2: 0x7B8
- stack 1: 0x1E
- stack 0: 0x380
5105	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x7B8
5106	 F7	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5107	 F9	ADD		 	 
- stack 0: 0x7BC
5108	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5109	 FB	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x1000210035600000086FFF8044C00000099000100B30000038F000103AE0002
5110	 FC	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x1000210035600000086FFF8044C00000099000100B30000038F000103AE0002
- stack 0: 0xF0
5111	 FE	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x100
5112	 FF	JUMP		 	 
- stack 0: 0x7BC
5113	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x7BC
5114	 101	PUSH2	0060	 	 
- stack 1: 0x7BC
- stack 0: 0x60
5115	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x7BC
- stack 0: 0x1FFFF
5116	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
5117	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7BC
- stack 0: 0x1FFFF
5118	 10B	PUSH2	03A0	 	 
- stack 2: 0x7BC
- stack 1: 0x1FFFF
- stack 0: 0x3A0
5119	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7BC
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
5120	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7BC
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
5121	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7BC
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
5122	 115	SUB		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5123	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x11E
5124	 119	JUMPI		 	 
- stack 0: 0x7BC
5125	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x7BC
- stack 0: 0x138
5126	 11D	JUMP		 	 
- stack 0: 0x7BC
5127	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x7BC
5128	 139	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5129	 13B	ADD		 	 
- stack 0: 0x7C0
5130	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5131	 13D	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x35600000086FFF8044C00000099000100B30000038F000103AE000203C8FFE8
5132	 13E	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x35600000086FFF8044C00000099000100B30000038F000103AE000203C8FFE8
- stack 0: 0xF0
5133	 140	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x356
5134	 141	JUMP		 	 
- stack 0: 0x7C0
5135	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7C0
5136	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5137	 358	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x35600000086FFF8044C00000099000100B30000038F000103AE000203C8FFE8
5138	 359	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x35600000086FFF8044C00000099000100B30000038F000103AE000203C8FFE8
- stack 0: 0xE0
5139	 35B	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3560000
5140	 35C	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3560000
- stack 0: 0xFFFF
5141	 35F	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5142	 360	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5143	 362	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5144	 363	PUSH2	0080	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x80
5145	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C0
5146	 367	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5147	 369	ADD		 	 
- stack 0: 0x7C4
5148	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5149	 36B	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86FFF8044C00000099000100B30000038F000103AE000203C8FFE80142FFFC
5150	 36C	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86FFF8044C00000099000100B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
5151	 36E	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
5152	 36F	JUMP		 	 
- stack 0: 0x7C4
5153	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x7C4
5154	 87	PUSH4	ffff8000	 	 
- stack 1: 0x7C4
- stack 0: 0xFFFF8000
5155	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFFFF8000
- stack 0: 0x20
5156	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
5157	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5158	 92	ADD		 	 
- stack 0: 0x7C8
5159	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5160	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
5161	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
- stack 0: 0xF0
5162	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x44C
5163	 98	JUMP		 	 
- stack 0: 0x7C8
5164	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C8
5165	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
5166	 44E	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
5167	 44F	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
- stack 0: 0xE0
5168	 451	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x44C0000
5169	 452	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5170	 455	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
5171	 456	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
5172	 458	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
5173	 459	POP		 	 
- stack 0: 0x7C8
5174	 45A	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5175	 45C	ADD		 	 
- stack 0: 0x7CC
5176	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5177	 45E	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
5178	 45F	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
- stack 0: 0xF0
5179	 461	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99
5180	 462	JUMP		 	 
- stack 0: 0x7CC
5181	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7CC
5182	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5183	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
5184	 9C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
- stack 0: 0xE0
5185	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x990001
5186	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x990001
- stack 0: 0xFFFF
5187	 A2	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5188	 A3	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5189	 A5	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5190	 A6	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x40
5191	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
5192	 AA	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5193	 AC	ADD		 	 
- stack 0: 0x7D0
5194	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5195	 AE	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0xB30000038F000103AE000203C8FFE80142FFFC00E6001F010001E403560000
5196	 AF	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0xB30000038F000103AE000203C8FFE80142FFFC00E6001F010001E403560000
- stack 0: 0xF0
5197	 B1	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0xB3
5198	 B2	JUMP		 	 
- stack 0: 0x7D0
5199	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x7D0
5200	 B4	PUSH2	0020	 	 
- stack 1: 0x7D0
- stack 0: 0x20
5201	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7D0
- stack 0: 0xFFFF8000
5202	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
5203	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0xFFFF8000
5204	 BE	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x40
5205	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x1
5206	 C2	PUSH1	1F	 	 
- stack 3: 0x7D0
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
5207	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x1
5208	 C5	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x7FFFC000
5209	 C6	PUSH2	0060	 	 
- stack 2: 0x7D0
- stack 1: 0x7FFFC000
- stack 0: 0x60
5210	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D0
5211	 CA	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5212	 CC	ADD		 	 
- stack 0: 0x7D4
5213	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5214	 CE	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
5215	 CF	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
- stack 0: 0xF0
5216	 D1	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x38F
5217	 D2	JUMP		 	 
- stack 0: 0x7D4
5218	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D4
5219	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
5220	 391	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
5221	 392	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
- stack 0: 0xE0
5222	 394	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x38F0001
5223	 395	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5224	 398	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5225	 399	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
5226	 39B	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5227	 39C	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
5228	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x0
5229	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D4
- stack 0: 0x1
5230	 3A1	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
5231	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D4
5232	 3A5	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5233	 3A7	ADD		 	 
- stack 0: 0x7D8
5234	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5235	 3A9	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
5236	 3AA	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
- stack 0: 0xF0
5237	 3AC	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE
5238	 3AD	JUMP		 	 
- stack 0: 0x7D8
5239	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D8
5240	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
5241	 3B0	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
5242	 3B1	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
- stack 0: 0xE0
5243	 3B3	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE0002
5244	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5245	 3B7	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
5246	 3B8	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x1
5247	 3BA	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
5248	 3BB	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
5249	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D8
5250	 3BF	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
5251	 3C1	ADD		 	 
- stack 0: 0x7DC
5252	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
5253	 3C3	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
5254	 3C4	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
- stack 0: 0xF0
5255	 3C6	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8
5256	 3C7	JUMP		 	 
- stack 0: 0x7DC
5257	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7DC
5258	 3C9	PUSH2	0080	 	 
- stack 1: 0x7DC
- stack 0: 0x80
5259	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x7DC
- stack 0: 0x1
5260	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5261	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x1
5262	 3D3	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0xA0
5263	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x2
5264	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5265	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x2
5266	 3DD	SUB		 	 
- stack 1: 0x7DC
- stack 0: 0x1
5267	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x7DC
- stack 1: 0x1
- stack 0: 0x3E6
5268	 3E1	JUMPI		 	 
- stack 0: 0x7DC
5269	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x7DC
5270	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
5271	 3E8	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
5272	 3E9	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
- stack 0: 0xE0
5273	 3EB	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8FFE8
5274	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x3C8FFE8
- stack 0: 0xFFFF
5275	 3EF	AND		 	 
- stack 1: 0x7DC
- stack 0: 0xFFE8
5276	 3F0	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0xFFE8
- stack 0: 0x1
5277	 3F2	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5278	 3F3	ADD		 	 
- stack 0: 0x7C4
5279	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7C4
- stack 0: 0xFFFFFFFF
5280	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7C4
5281	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5282	 3FB	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86FFF8044C00000099000100B30000038F000103AE000203C8FFE80142FFFC
5283	 3FC	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86FFF8044C00000099000100B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
5284	 3FE	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
5285	 3FF	JUMP		 	 
- stack 0: 0x7C4
5286	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x7C4
5287	 87	PUSH4	ffff8000	 	 
- stack 1: 0x7C4
- stack 0: 0xFFFF8000
5288	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFFFF8000
- stack 0: 0x20
5289	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
5290	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5291	 92	ADD		 	 
- stack 0: 0x7C8
5292	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5293	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
5294	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
- stack 0: 0xF0
5295	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x44C
5296	 98	JUMP		 	 
- stack 0: 0x7C8
5297	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C8
5298	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
5299	 44E	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
5300	 44F	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x44C00000099000100B30000038F000103AE000203C8FFE80142FFFC00E6001F
- stack 0: 0xE0
5301	 451	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x44C0000
5302	 452	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5303	 455	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
5304	 456	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x0
- stack 0: 0x1
5305	 458	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x0
5306	 459	POP		 	 
- stack 0: 0x7C8
5307	 45A	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5308	 45C	ADD		 	 
- stack 0: 0x7CC
5309	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5310	 45E	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
5311	 45F	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
- stack 0: 0xF0
5312	 461	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x99
5313	 462	JUMP		 	 
- stack 0: 0x7CC
5314	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7CC
5315	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5316	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
5317	 9C	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x99000100B30000038F000103AE000203C8FFE80142FFFC00E6001F010001E4
- stack 0: 0xE0
5318	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x990001
5319	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x990001
- stack 0: 0xFFFF
5320	 A2	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5321	 A3	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x1
5322	 A5	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x1
5323	 A6	PUSH2	0040	 	 
- stack 2: 0x7CC
- stack 1: 0x1
- stack 0: 0x40
5324	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7CC
5325	 AA	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5326	 AC	ADD		 	 
- stack 0: 0x7D0
5327	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5328	 AE	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0xB30000038F000103AE000203C8FFE80142FFFC00E6001F010001E403560000
5329	 AF	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0xB30000038F000103AE000203C8FFE80142FFFC00E6001F010001E403560000
- stack 0: 0xF0
5330	 B1	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0xB3
5331	 B2	JUMP		 	 
- stack 0: 0x7D0
5332	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x7D0
5333	 B4	PUSH2	0020	 	 
- stack 1: 0x7D0
- stack 0: 0x20
5334	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x7D0
- stack 0: 0xFFFF8000
5335	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
5336	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0xFFFF8000
5337	 BE	PUSH2	0040	 	 
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x40
5338	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x1
5339	 C2	PUSH1	1F	 	 
- stack 3: 0x7D0
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
5340	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x7D0
- stack 1: 0xFFFF8000
- stack 0: 0x1
5341	 C5	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x7FFFC000
5342	 C6	PUSH2	0060	 	 
- stack 2: 0x7D0
- stack 1: 0x7FFFC000
- stack 0: 0x60
5343	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D0
5344	 CA	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5345	 CC	ADD		 	 
- stack 0: 0x7D4
5346	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5347	 CE	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
5348	 CF	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
- stack 0: 0xF0
5349	 D1	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x38F
5350	 D2	JUMP		 	 
- stack 0: 0x7D4
5351	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D4
5352	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
5353	 391	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
5354	 392	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8
- stack 0: 0xE0
5355	 394	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x38F0001
5356	 395	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5357	 398	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5358	 399	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
5359	 39B	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x1
5360	 39C	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x80
5361	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D4
- stack 1: 0x1
- stack 0: 0x1
5362	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D4
- stack 0: 0x2
5363	 3A1	PUSH2	0080	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x80
5364	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D4
5365	 3A5	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5366	 3A7	ADD		 	 
- stack 0: 0x7D8
5367	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5368	 3A9	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
5369	 3AA	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
- stack 0: 0xF0
5370	 3AC	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE
5371	 3AD	JUMP		 	 
- stack 0: 0x7D8
5372	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D8
5373	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
5374	 3B0	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
5375	 3B1	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE000203C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C0000
- stack 0: 0xE0
5376	 3B3	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x3AE0002
5377	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5378	 3B7	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
5379	 3B8	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x1
5380	 3BA	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x2
5381	 3BB	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
5382	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D8
5383	 3BF	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
5384	 3C1	ADD		 	 
- stack 0: 0x7DC
5385	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
5386	 3C3	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
5387	 3C4	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x3C8FFE80142FFFC00E6001F010001E4035600000086FFF8044C000000990007
- stack 0: 0xF0
5388	 3C6	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x3C8
5389	 3C7	JUMP		 	 
- stack 0: 0x7DC
5390	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7DC
5391	 3C9	PUSH2	0080	 	 
- stack 1: 0x7DC
- stack 0: 0x80
5392	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x7DC
- stack 0: 0x2
5393	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5394	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7DC
- stack 0: 0x2
5395	 3D3	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xA0
5396	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x2
5397	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5398	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x2
5399	 3DD	SUB		 	 
- stack 1: 0x7DC
- stack 0: 0x0
5400	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x7DC
- stack 1: 0x0
- stack 0: 0x3E6
5401	 3E1	JUMPI		 	 
- stack 0: 0x7DC
5402	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x7DC
- stack 0: 0x400
5403	 3E5	JUMP		 	 
- stack 0: 0x7DC
5404	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x7DC
5405	 401	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
5406	 403	ADD		 	 
- stack 0: 0x7E0
5407	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
5408	 405	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x142FFFC00E6001F010001E4035600000086FFF8044C000000990007044C0000
5409	 406	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x142FFFC00E6001F010001E4035600000086FFF8044C000000990007044C0000
- stack 0: 0xF0
5410	 408	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x142
5411	 409	JUMP		 	 
- stack 0: 0x7E0
5412	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x7E0
5413	 143	PUSH4	7fffc000	 	 
- stack 1: 0x7E0
- stack 0: 0x7FFFC000
5414	 148	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
5415	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E0
5416	 14C	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
5417	 14E	ADD		 	 
- stack 0: 0x7E4
5418	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
5419	 150	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xE6001F010001E4035600000086FFF8044C000000990007044C000000B30000
5420	 151	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0xE6001F010001E4035600000086FFF8044C000000990007044C000000B30000
- stack 0: 0xF0
5421	 153	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xE6
5422	 154	JUMP		 	 
- stack 0: 0x7E4
5423	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7E4
5424	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
5425	 E8	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xE6001F010001E4035600000086FFF8044C000000990007044C000000B30000
5426	 E9	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0xE6001F010001E4035600000086FFF8044C000000990007044C000000B30000
- stack 0: 0xE0
5427	 EB	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xE6001F
5428	 EC	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0xE6001F
- stack 0: 0xFFFF
5429	 EF	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x1F
5430	 F0	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x1F
- stack 0: 0x1
5431	 F2	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x1F
5432	 F3	PUSH2	0380	 	 
- stack 2: 0x7E4
- stack 1: 0x1F
- stack 0: 0x380
5433	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x7E4
5434	 F7	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
5435	 F9	ADD		 	 
- stack 0: 0x7E8
5436	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
5437	 FB	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x10001E4035600000086FFF8044C000000990007044C000000B30000038F0001
5438	 FC	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x10001E4035600000086FFF8044C000000990007044C000000B30000038F0001
- stack 0: 0xF0
5439	 FE	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x100
5440	 FF	JUMP		 	 
- stack 0: 0x7E8
5441	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x7E8
5442	 101	PUSH2	0060	 	 
- stack 1: 0x7E8
- stack 0: 0x60
5443	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E8
- stack 0: 0x7FFFC000
5444	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
5445	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0x7FFFC000
5446	 10B	PUSH2	03A0	 	 
- stack 2: 0x7E8
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
5447	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E8
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
5448	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
5449	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
5450	 115	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
5451	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x11E
5452	 119	JUMPI		 	 
- stack 0: 0x7E8
5453	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x7E8
- stack 0: 0x138
5454	 11D	JUMP		 	 
- stack 0: 0x7E8
5455	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x7E8
5456	 139	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
5457	 13B	ADD		 	 
- stack 0: 0x7EC
5458	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
5459	 13D	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x35600000086FFF8044C000000990007044C000000B30000038F000103AE0002
5460	 13E	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x35600000086FFF8044C000000990007044C000000B30000038F000103AE0002
- stack 0: 0xF0
5461	 140	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x356
5462	 141	JUMP		 	 
- stack 0: 0x7EC
5463	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7EC
5464	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
5465	 358	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x35600000086FFF8044C000000990007044C000000B30000038F000103AE0002
5466	 359	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x35600000086FFF8044C000000990007044C000000B30000038F000103AE0002
- stack 0: 0xE0
5467	 35B	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x3560000
5468	 35C	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x3560000
- stack 0: 0xFFFF
5469	 35F	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5470	 360	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
5471	 362	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
5472	 363	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x80
5473	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x7EC
5474	 367	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
5475	 369	ADD		 	 
- stack 0: 0x7F0
5476	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5477	 36B	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x86FFF8044C000000990007044C000000B30000038F000103AE000203C8FFE4
5478	 36C	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x86FFF8044C000000990007044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
5479	 36E	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x86
5480	 36F	JUMP		 	 
- stack 0: 0x7F0
5481	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x7F0
5482	 87	PUSH4	ffff8000	 	 
- stack 1: 0x7F0
- stack 0: 0xFFFF8000
5483	 8C	PUSH2	0020	 	 
- stack 2: 0x7F0
- stack 1: 0xFFFF8000
- stack 0: 0x20
5484	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7F0
5485	 90	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5486	 92	ADD		 	 
- stack 0: 0x7F4
5487	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5488	 94	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
5489	 95	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xF0
5490	 97	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x44C
5491	 98	JUMP		 	 
- stack 0: 0x7F4
5492	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F4
5493	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5494	 44E	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
5495	 44F	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xE0
5496	 451	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x44C0000
5497	 452	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5498	 455	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5499	 456	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x1
5500	 458	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5501	 459	POP		 	 
- stack 0: 0x7F4
5502	 45A	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5503	 45C	ADD		 	 
- stack 0: 0x7F8
5504	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5505	 45E	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
5506	 45F	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xF0
5507	 461	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x99
5508	 462	JUMP		 	 
- stack 0: 0x7F8
5509	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F8
5510	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
5511	 9B	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
5512	 9C	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xE0
5513	 9E	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x990007
5514	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x990007
- stack 0: 0xFFFF
5515	 A2	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x7
5516	 A3	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x7
- stack 0: 0x1
5517	 A5	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x7
5518	 A6	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0x7
- stack 0: 0x40
5519	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F8
5520	 AA	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5521	 AC	ADD		 	 
- stack 0: 0x7FC
5522	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
5523	 AE	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
5524	 AF	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
- stack 0: 0xF0
5525	 B1	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x44C
5526	 B2	JUMP		 	 
- stack 0: 0x7FC
5527	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7FC
5528	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
5529	 44E	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
5530	 44F	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
- stack 0: 0xE0
5531	 451	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x44C0000
5532	 452	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5533	 455	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
5534	 456	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x1
5535	 458	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
5536	 459	POP		 	 
- stack 0: 0x7FC
5537	 45A	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
5538	 45C	ADD		 	 
- stack 0: 0x800
5539	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
5540	 45E	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E60020010001B0
5541	 45F	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E60020010001B0
- stack 0: 0xF0
5542	 461	SHR		 	 
- stack 1: 0x800
- stack 0: 0xB3
5543	 462	JUMP		 	 
- stack 0: 0x800
5544	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x800
5545	 B4	PUSH2	0020	 	 
- stack 1: 0x800
- stack 0: 0x20
5546	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x800
- stack 0: 0xFFFF8000
5547	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
5548	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0xFFFF8000
5549	 BE	PUSH2	0040	 	 
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x40
5550	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x7
5551	 C2	PUSH1	1F	 	 
- stack 3: 0x800
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
5552	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x7
5553	 C5	SHR		 	 
- stack 1: 0x800
- stack 0: 0x1FFFF00
5554	 C6	PUSH2	0060	 	 
- stack 2: 0x800
- stack 1: 0x1FFFF00
- stack 0: 0x60
5555	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x800
5556	 CA	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
5557	 CC	ADD		 	 
- stack 0: 0x804
5558	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
5559	 CE	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
5560	 CF	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
- stack 0: 0xF0
5561	 D1	SHR		 	 
- stack 1: 0x804
- stack 0: 0x38F
5562	 D2	JUMP		 	 
- stack 0: 0x804
5563	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x804
5564	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
5565	 391	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
5566	 392	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
- stack 0: 0xE0
5567	 394	SHR		 	 
- stack 1: 0x804
- stack 0: 0x38F0001
5568	 395	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5569	 398	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
5570	 399	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
5571	 39B	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
5572	 39C	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
5573	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x0
5574	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x1
5575	 3A1	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
5576	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
5577	 3A5	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
5578	 3A7	ADD		 	 
- stack 0: 0x808
5579	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
5580	 3A9	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
5581	 3AA	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
- stack 0: 0xF0
5582	 3AC	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3AE
5583	 3AD	JUMP		 	 
- stack 0: 0x808
5584	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
5585	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
5586	 3B0	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
5587	 3B1	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
- stack 0: 0xE0
5588	 3B3	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3AE0002
5589	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5590	 3B7	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
5591	 3B8	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
5592	 3BA	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
5593	 3BB	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
5594	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
5595	 3BF	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
5596	 3C1	ADD		 	 
- stack 0: 0x80C
5597	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
5598	 3C3	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
5599	 3C4	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
- stack 0: 0xF0
5600	 3C6	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3C8
5601	 3C7	JUMP		 	 
- stack 0: 0x80C
5602	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x80C
5603	 3C9	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
5604	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x1
5605	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5606	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x1
5607	 3D3	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xA0
5608	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
5609	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5610	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
5611	 3DD	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x1
5612	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x3E6
5613	 3E1	JUMPI		 	 
- stack 0: 0x80C
5614	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x80C
5615	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
5616	 3E8	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
5617	 3E9	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
- stack 0: 0xE0
5618	 3EB	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3C8FFE4
5619	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
5620	 3EF	AND		 	 
- stack 1: 0x80C
- stack 0: 0xFFE4
5621	 3F0	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0xFFE4
- stack 0: 0x1
5622	 3F2	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5623	 3F3	ADD		 	 
- stack 0: 0x7F0
5624	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7F0
- stack 0: 0xFFFFFFFF
5625	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7F0
5626	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
5627	 3FB	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x86FFF8044C000000990007044C000000B30000038F000103AE000203C8FFE4
5628	 3FC	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x86FFF8044C000000990007044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
5629	 3FE	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x86
5630	 3FF	JUMP		 	 
- stack 0: 0x7F0
5631	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x7F0
5632	 87	PUSH4	ffff8000	 	 
- stack 1: 0x7F0
- stack 0: 0xFFFF8000
5633	 8C	PUSH2	0020	 	 
- stack 2: 0x7F0
- stack 1: 0xFFFF8000
- stack 0: 0x20
5634	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7F0
5635	 90	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
5636	 92	ADD		 	 
- stack 0: 0x7F4
5637	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
5638	 94	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
5639	 95	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xF0
5640	 97	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x44C
5641	 98	JUMP		 	 
- stack 0: 0x7F4
5642	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F4
5643	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
5644	 44E	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
5645	 44F	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x44C000000990007044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xE0
5646	 451	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x44C0000
5647	 452	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5648	 455	AND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5649	 456	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0x0
- stack 0: 0x1
5650	 458	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0x0
5651	 459	POP		 	 
- stack 0: 0x7F4
5652	 45A	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
5653	 45C	ADD		 	 
- stack 0: 0x7F8
5654	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
5655	 45E	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
5656	 45F	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xF0
5657	 461	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x99
5658	 462	JUMP		 	 
- stack 0: 0x7F8
5659	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F8
5660	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
5661	 9B	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
5662	 9C	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x990007044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xE0
5663	 9E	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x990007
5664	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x990007
- stack 0: 0xFFFF
5665	 A2	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x7
5666	 A3	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x7
- stack 0: 0x1
5667	 A5	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x7
5668	 A6	PUSH2	0040	 	 
- stack 2: 0x7F8
- stack 1: 0x7
- stack 0: 0x40
5669	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F8
5670	 AA	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
5671	 AC	ADD		 	 
- stack 0: 0x7FC
5672	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
5673	 AE	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
5674	 AF	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
- stack 0: 0xF0
5675	 B1	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x44C
5676	 B2	JUMP		 	 
- stack 0: 0x7FC
5677	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7FC
5678	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
5679	 44E	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
5680	 44F	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60020
- stack 0: 0xE0
5681	 451	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x44C0000
5682	 452	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5683	 455	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
5684	 456	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x0
- stack 0: 0x1
5685	 458	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x0
5686	 459	POP		 	 
- stack 0: 0x7FC
5687	 45A	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
5688	 45C	ADD		 	 
- stack 0: 0x800
5689	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
5690	 45E	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E60020010001B0
5691	 45F	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E60020010001B0
- stack 0: 0xF0
5692	 461	SHR		 	 
- stack 1: 0x800
- stack 0: 0xB3
5693	 462	JUMP		 	 
- stack 0: 0x800
5694	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x800
5695	 B4	PUSH2	0020	 	 
- stack 1: 0x800
- stack 0: 0x20
5696	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x800
- stack 0: 0xFFFF8000
5697	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
5698	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0xFFFF8000
5699	 BE	PUSH2	0040	 	 
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x40
5700	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x7
5701	 C2	PUSH1	1F	 	 
- stack 3: 0x800
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
5702	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x800
- stack 1: 0xFFFF8000
- stack 0: 0x7
5703	 C5	SHR		 	 
- stack 1: 0x800
- stack 0: 0x1FFFF00
5704	 C6	PUSH2	0060	 	 
- stack 2: 0x800
- stack 1: 0x1FFFF00
- stack 0: 0x60
5705	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x800
5706	 CA	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
5707	 CC	ADD		 	 
- stack 0: 0x804
5708	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
5709	 CE	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
5710	 CF	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
- stack 0: 0xF0
5711	 D1	SHR		 	 
- stack 1: 0x804
- stack 0: 0x38F
5712	 D2	JUMP		 	 
- stack 0: 0x804
5713	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x804
5714	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
5715	 391	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
5716	 392	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E60020010001B003560000
- stack 0: 0xE0
5717	 394	SHR		 	 
- stack 1: 0x804
- stack 0: 0x38F0001
5718	 395	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5719	 398	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
5720	 399	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
5721	 39B	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
5722	 39C	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
5723	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
5724	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x2
5725	 3A1	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x80
5726	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
5727	 3A5	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
5728	 3A7	ADD		 	 
- stack 0: 0x808
5729	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
5730	 3A9	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
5731	 3AA	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
- stack 0: 0xF0
5732	 3AC	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3AE
5733	 3AD	JUMP		 	 
- stack 0: 0x808
5734	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
5735	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
5736	 3B0	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
5737	 3B1	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E60020010001B0035600000086FFF8
- stack 0: 0xE0
5738	 3B3	SHR		 	 
- stack 1: 0x808
- stack 0: 0x3AE0002
5739	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5740	 3B7	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
5741	 3B8	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
5742	 3BA	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
5743	 3BB	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
5744	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
5745	 3BF	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
5746	 3C1	ADD		 	 
- stack 0: 0x80C
5747	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
5748	 3C3	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
5749	 3C4	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3C8FFE4015520000168FF0000E60020010001B0035600000086FFF8044C0000
- stack 0: 0xF0
5750	 3C6	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3C8
5751	 3C7	JUMP		 	 
- stack 0: 0x80C
5752	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x80C
5753	 3C9	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
5754	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x2
5755	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5756	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x2
5757	 3D3	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xA0
5758	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
5759	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5760	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
5761	 3DD	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x0
5762	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x80C
- stack 1: 0x0
- stack 0: 0x3E6
5763	 3E1	JUMPI		 	 
- stack 0: 0x80C
5764	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x80C
- stack 0: 0x400
5765	 3E5	JUMP		 	 
- stack 0: 0x80C
5766	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x80C
5767	 401	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
5768	 403	ADD		 	 
- stack 0: 0x810
5769	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
5770	 405	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x15520000168FF0000E60020010001B0035600000086FFF8044C0000044C0000
5771	 406	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x15520000168FF0000E60020010001B0035600000086FFF8044C0000044C0000
- stack 0: 0xF0
5772	 408	SHR		 	 
- stack 1: 0x810
- stack 0: 0x155
5773	 409	JUMP		 	 
- stack 0: 0x810
5774	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x810
5775	 156	PUSH4	02000000	 	 
- stack 1: 0x810
- stack 0: 0x2000000
5776	 15B	PUSH2	03A0	 	 
- stack 2: 0x810
- stack 1: 0x2000000
- stack 0: 0x3A0
5777	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x810
5778	 15F	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
5779	 161	ADD		 	 
- stack 0: 0x814
5780	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
5781	 163	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x168FF0000E60020010001B0035600000086FFF8044C0000044C00000099000F
5782	 164	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x168FF0000E60020010001B0035600000086FFF8044C0000044C00000099000F
- stack 0: 0xF0
5783	 166	SHR		 	 
- stack 1: 0x814
- stack 0: 0x168
5784	 167	JUMP		 	 
- stack 0: 0x814
5785	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x814
5786	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
5787	 16A	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x168FF0000E60020010001B0035600000086FFF8044C0000044C00000099000F
5788	 16B	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x168FF0000E60020010001B0035600000086FFF8044C0000044C00000099000F
- stack 0: 0xE0
5789	 16D	SHR		 	 
- stack 1: 0x814
- stack 0: 0x168FF00
5790	 16E	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x168FF00
- stack 0: 0xFFFF
5791	 171	AND		 	 
- stack 1: 0x814
- stack 0: 0xFF00
5792	 172	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xFF00
- stack 0: 0x1
5793	 174	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5794	 175	PUSH2	03A0	 	 
- stack 2: 0x814
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
5795	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x814
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
5796	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x814
- stack 0: 0x1FFFF00
5797	 17A	PUSH2	03A0	 	 
- stack 2: 0x814
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
5798	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x814
5799	 17E	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
5800	 180	ADD		 	 
- stack 0: 0x818
5801	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
5802	 182	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xE60020010001B0035600000086FFF8044C0000044C00000099000F00B30000
5803	 183	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0xE60020010001B0035600000086FFF8044C0000044C00000099000F00B30000
- stack 0: 0xF0
5804	 185	SHR		 	 
- stack 1: 0x818
- stack 0: 0xE6
5805	 186	JUMP		 	 
- stack 0: 0x818
5806	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x818
5807	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x818
- stack 0: 0x818
5808	 E8	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0xE60020010001B0035600000086FFF8044C0000044C00000099000F00B30000
5809	 E9	PUSH1	E0	 	 
- stack 2: 0x818
- stack 1: 0xE60020010001B0035600000086FFF8044C0000044C00000099000F00B30000
- stack 0: 0xE0
5810	 EB	SHR		 	 
- stack 1: 0x818
- stack 0: 0xE60020
5811	 EC	PUSH2	FFFF	 	 
- stack 2: 0x818
- stack 1: 0xE60020
- stack 0: 0xFFFF
5812	 EF	AND		 	 
- stack 1: 0x818
- stack 0: 0x20
5813	 F0	PUSH1	01	 	 
- stack 2: 0x818
- stack 1: 0x20
- stack 0: 0x1
5814	 F2	SIGNEXTEND		 	 
- stack 1: 0x818
- stack 0: 0x20
5815	 F3	PUSH2	0380	 	 
- stack 2: 0x818
- stack 1: 0x20
- stack 0: 0x380
5816	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x818
5817	 F7	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
5818	 F9	ADD		 	 
- stack 0: 0x81C
5819	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
5820	 FB	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x10001B0035600000086FFF8044C0000044C00000099000F00B30000038F0001
5821	 FC	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x10001B0035600000086FFF8044C0000044C00000099000F00B30000038F0001
- stack 0: 0xF0
5822	 FE	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x100
5823	 FF	JUMP		 	 
- stack 0: 0x81C
5824	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x81C
5825	 101	PUSH2	0060	 	 
- stack 1: 0x81C
- stack 0: 0x60
5826	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x81C
- stack 0: 0x1FFFF00
5827	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x81C
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
5828	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x81C
- stack 0: 0x1FFFF00
5829	 10B	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
5830	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x81C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
5831	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x81C
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
5832	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x81C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
5833	 115	SUB		 	 
- stack 1: 0x81C
- stack 0: 0x0
5834	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x81C
- stack 1: 0x0
- stack 0: 0x11E
5835	 119	JUMPI		 	 
- stack 0: 0x81C
5836	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x81C
- stack 0: 0x138
5837	 11D	JUMP		 	 
- stack 0: 0x81C
5838	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x81C
5839	 139	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
5840	 13B	ADD		 	 
- stack 0: 0x820
5841	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
5842	 13D	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x35600000086FFF8044C0000044C00000099000F00B30000038F000103AE0002
5843	 13E	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x35600000086FFF8044C0000044C00000099000F00B30000038F000103AE0002
- stack 0: 0xF0
5844	 140	SHR		 	 
- stack 1: 0x820
- stack 0: 0x356
5845	 141	JUMP		 	 
- stack 0: 0x820
5846	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x820
5847	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
5848	 358	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x35600000086FFF8044C0000044C00000099000F00B30000038F000103AE0002
5849	 359	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x35600000086FFF8044C0000044C00000099000F00B30000038F000103AE0002
- stack 0: 0xE0
5850	 35B	SHR		 	 
- stack 1: 0x820
- stack 0: 0x3560000
5851	 35C	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x3560000
- stack 0: 0xFFFF
5852	 35F	AND		 	 
- stack 1: 0x820
- stack 0: 0x0
5853	 360	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1
5854	 362	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x0
5855	 363	PUSH2	0080	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x80
5856	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x820
5857	 367	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
5858	 369	ADD		 	 
- stack 0: 0x824
5859	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
5860	 36B	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x86FFF8044C0000044C00000099000F00B30000038F000103AE000203C8FFE4
5861	 36C	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x86FFF8044C0000044C00000099000F00B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
5862	 36E	SHR		 	 
- stack 1: 0x824
- stack 0: 0x86
5863	 36F	JUMP		 	 
- stack 0: 0x824
5864	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x824
5865	 87	PUSH4	ffff8000	 	 
- stack 1: 0x824
- stack 0: 0xFFFF8000
5866	 8C	PUSH2	0020	 	 
- stack 2: 0x824
- stack 1: 0xFFFF8000
- stack 0: 0x20
5867	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x824
5868	 90	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
5869	 92	ADD		 	 
- stack 0: 0x828
5870	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
5871	 94	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
5872	 95	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
5873	 97	SHR		 	 
- stack 1: 0x828
- stack 0: 0x44C
5874	 98	JUMP		 	 
- stack 0: 0x828
5875	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x828
5876	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
5877	 44E	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
5878	 44F	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
5879	 451	SHR		 	 
- stack 1: 0x828
- stack 0: 0x44C0000
5880	 452	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5881	 455	AND		 	 
- stack 1: 0x828
- stack 0: 0x0
5882	 456	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x1
5883	 458	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x0
5884	 459	POP		 	 
- stack 0: 0x828
5885	 45A	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
5886	 45C	ADD		 	 
- stack 0: 0x82C
5887	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
5888	 45E	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
5889	 45F	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
5890	 461	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x44C
5891	 462	JUMP		 	 
- stack 0: 0x82C
5892	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
5893	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
5894	 44E	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
5895	 44F	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
5896	 451	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x44C0000
5897	 452	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
5898	 455	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
5899	 456	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
5900	 458	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
5901	 459	POP		 	 
- stack 0: 0x82C
5902	 45A	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
5903	 45C	ADD		 	 
- stack 0: 0x830
5904	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
5905	 45E	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
5906	 45F	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
- stack 0: 0xF0
5907	 461	SHR		 	 
- stack 1: 0x830
- stack 0: 0x99
5908	 462	JUMP		 	 
- stack 0: 0x830
5909	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x830
5910	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
5911	 9B	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
5912	 9C	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
- stack 0: 0xE0
5913	 9E	SHR		 	 
- stack 1: 0x830
- stack 0: 0x99000F
5914	 9F	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x99000F
- stack 0: 0xFFFF
5915	 A2	AND		 	 
- stack 1: 0x830
- stack 0: 0xF
5916	 A3	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xF
- stack 0: 0x1
5917	 A5	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xF
5918	 A6	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF
- stack 0: 0x40
5919	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
5920	 AA	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
5921	 AC	ADD		 	 
- stack 0: 0x834
5922	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
5923	 AE	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600210100017C
5924	 AF	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600210100017C
- stack 0: 0xF0
5925	 B1	SHR		 	 
- stack 1: 0x834
- stack 0: 0xB3
5926	 B2	JUMP		 	 
- stack 0: 0x834
5927	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x834
5928	 B4	PUSH2	0020	 	 
- stack 1: 0x834
- stack 0: 0x20
5929	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x834
- stack 0: 0xFFFF8000
5930	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
5931	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0xFFFF8000
5932	 BE	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0x40
5933	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xF
5934	 C2	PUSH1	1F	 	 
- stack 3: 0x834
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
5935	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xF
5936	 C5	SHR		 	 
- stack 1: 0x834
- stack 0: 0x1FFFF
5937	 C6	PUSH2	0060	 	 
- stack 2: 0x834
- stack 1: 0x1FFFF
- stack 0: 0x60
5938	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x834
5939	 CA	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
5940	 CC	ADD		 	 
- stack 0: 0x838
5941	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
5942	 CE	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
5943	 CF	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
- stack 0: 0xF0
5944	 D1	SHR		 	 
- stack 1: 0x838
- stack 0: 0x38F
5945	 D2	JUMP		 	 
- stack 0: 0x838
5946	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x838
5947	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
5948	 391	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
5949	 392	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
- stack 0: 0xE0
5950	 394	SHR		 	 
- stack 1: 0x838
- stack 0: 0x38F0001
5951	 395	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x38F0001
- stack 0: 0xFFFF
5952	 398	AND		 	 
- stack 1: 0x838
- stack 0: 0x1
5953	 399	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x1
5954	 39B	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x1
5955	 39C	PUSH2	0080	 	 
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x80
5956	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x0
5957	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x838
- stack 0: 0x1
5958	 3A1	PUSH2	0080	 	 
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x80
5959	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x838
5960	 3A5	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
5961	 3A7	ADD		 	 
- stack 0: 0x83C
5962	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
5963	 3A9	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
5964	 3AA	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
- stack 0: 0xF0
5965	 3AC	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3AE
5966	 3AD	JUMP		 	 
- stack 0: 0x83C
5967	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x83C
5968	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
5969	 3B0	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
5970	 3B1	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
- stack 0: 0xE0
5971	 3B3	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3AE0002
5972	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
5973	 3B7	AND		 	 
- stack 1: 0x83C
- stack 0: 0x2
5974	 3B8	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0x1
5975	 3BA	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x2
5976	 3BB	PUSH2	00A0	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0xA0
5977	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x83C
5978	 3BF	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
5979	 3C1	ADD		 	 
- stack 0: 0x840
5980	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
5981	 3C3	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
5982	 3C4	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
- stack 0: 0xF0
5983	 3C6	SHR		 	 
- stack 1: 0x840
- stack 0: 0x3C8
5984	 3C7	JUMP		 	 
- stack 0: 0x840
5985	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x840
5986	 3C9	PUSH2	0080	 	 
- stack 1: 0x840
- stack 0: 0x80
5987	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x840
- stack 0: 0x1
5988	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5989	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x840
- stack 0: 0x1
5990	 3D3	PUSH2	00A0	 	 
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0xA0
5991	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x2
5992	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x840
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5993	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x2
5994	 3DD	SUB		 	 
- stack 1: 0x840
- stack 0: 0x1
5995	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x840
- stack 1: 0x1
- stack 0: 0x3E6
5996	 3E1	JUMPI		 	 
- stack 0: 0x840
5997	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x840
5998	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
5999	 3E8	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
6000	 3E9	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
- stack 0: 0xE0
6001	 3EB	SHR		 	 
- stack 1: 0x840
- stack 0: 0x3C8FFE4
6002	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
6003	 3EF	AND		 	 
- stack 1: 0x840
- stack 0: 0xFFE4
6004	 3F0	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xFFE4
- stack 0: 0x1
6005	 3F2	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6006	 3F3	ADD		 	 
- stack 0: 0x824
6007	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x824
- stack 0: 0xFFFFFFFF
6008	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x824
6009	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6010	 3FB	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x86FFF8044C0000044C00000099000F00B30000038F000103AE000203C8FFE4
6011	 3FC	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x86FFF8044C0000044C00000099000F00B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
6012	 3FE	SHR		 	 
- stack 1: 0x824
- stack 0: 0x86
6013	 3FF	JUMP		 	 
- stack 0: 0x824
6014	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x824
6015	 87	PUSH4	ffff8000	 	 
- stack 1: 0x824
- stack 0: 0xFFFF8000
6016	 8C	PUSH2	0020	 	 
- stack 2: 0x824
- stack 1: 0xFFFF8000
- stack 0: 0x20
6017	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x824
6018	 90	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6019	 92	ADD		 	 
- stack 0: 0x828
6020	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6021	 94	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
6022	 95	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
6023	 97	SHR		 	 
- stack 1: 0x828
- stack 0: 0x44C
6024	 98	JUMP		 	 
- stack 0: 0x828
6025	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x828
6026	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6027	 44E	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
6028	 44F	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x44C0000044C00000099000F00B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
6029	 451	SHR		 	 
- stack 1: 0x828
- stack 0: 0x44C0000
6030	 452	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6031	 455	AND		 	 
- stack 1: 0x828
- stack 0: 0x0
6032	 456	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x1
6033	 458	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x0
6034	 459	POP		 	 
- stack 0: 0x828
6035	 45A	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6036	 45C	ADD		 	 
- stack 0: 0x82C
6037	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6038	 45E	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
6039	 45F	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
6040	 461	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x44C
6041	 462	JUMP		 	 
- stack 0: 0x82C
6042	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
6043	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6044	 44E	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
6045	 44F	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x44C00000099000F00B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
6046	 451	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x44C0000
6047	 452	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6048	 455	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6049	 456	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
6050	 458	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6051	 459	POP		 	 
- stack 0: 0x82C
6052	 45A	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6053	 45C	ADD		 	 
- stack 0: 0x830
6054	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6055	 45E	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
6056	 45F	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
- stack 0: 0xF0
6057	 461	SHR		 	 
- stack 1: 0x830
- stack 0: 0x99
6058	 462	JUMP		 	 
- stack 0: 0x830
6059	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x830
6060	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
6061	 9B	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
6062	 9C	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0x99000F00B30000038F000103AE000203C8FFE401B900200168FFFF00E60021
- stack 0: 0xE0
6063	 9E	SHR		 	 
- stack 1: 0x830
- stack 0: 0x99000F
6064	 9F	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0x99000F
- stack 0: 0xFFFF
6065	 A2	AND		 	 
- stack 1: 0x830
- stack 0: 0xF
6066	 A3	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xF
- stack 0: 0x1
6067	 A5	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xF
6068	 A6	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF
- stack 0: 0x40
6069	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
6070	 AA	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6071	 AC	ADD		 	 
- stack 0: 0x834
6072	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6073	 AE	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600210100017C
6074	 AF	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600210100017C
- stack 0: 0xF0
6075	 B1	SHR		 	 
- stack 1: 0x834
- stack 0: 0xB3
6076	 B2	JUMP		 	 
- stack 0: 0x834
6077	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x834
6078	 B4	PUSH2	0020	 	 
- stack 1: 0x834
- stack 0: 0x20
6079	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x834
- stack 0: 0xFFFF8000
6080	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6081	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0xFFFF8000
6082	 BE	PUSH2	0040	 	 
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0x40
6083	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xF
6084	 C2	PUSH1	1F	 	 
- stack 3: 0x834
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
6085	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x834
- stack 1: 0xFFFF8000
- stack 0: 0xF
6086	 C5	SHR		 	 
- stack 1: 0x834
- stack 0: 0x1FFFF
6087	 C6	PUSH2	0060	 	 
- stack 2: 0x834
- stack 1: 0x1FFFF
- stack 0: 0x60
6088	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x834
6089	 CA	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6090	 CC	ADD		 	 
- stack 0: 0x838
6091	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6092	 CE	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
6093	 CF	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
- stack 0: 0xF0
6094	 D1	SHR		 	 
- stack 1: 0x838
- stack 0: 0x38F
6095	 D2	JUMP		 	 
- stack 0: 0x838
6096	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x838
6097	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
6098	 391	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
6099	 392	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600210100017C03560000
- stack 0: 0xE0
6100	 394	SHR		 	 
- stack 1: 0x838
- stack 0: 0x38F0001
6101	 395	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6102	 398	AND		 	 
- stack 1: 0x838
- stack 0: 0x1
6103	 399	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x1
6104	 39B	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x1
6105	 39C	PUSH2	0080	 	 
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x80
6106	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x838
- stack 1: 0x1
- stack 0: 0x1
6107	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x838
- stack 0: 0x2
6108	 3A1	PUSH2	0080	 	 
- stack 2: 0x838
- stack 1: 0x2
- stack 0: 0x80
6109	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x838
6110	 3A5	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6111	 3A7	ADD		 	 
- stack 0: 0x83C
6112	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6113	 3A9	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
6114	 3AA	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
- stack 0: 0xF0
6115	 3AC	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3AE
6116	 3AD	JUMP		 	 
- stack 0: 0x83C
6117	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x83C
6118	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6119	 3B0	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
6120	 3B1	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600210100017C0356000000990001
- stack 0: 0xE0
6121	 3B3	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x3AE0002
6122	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6123	 3B7	AND		 	 
- stack 1: 0x83C
- stack 0: 0x2
6124	 3B8	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0x1
6125	 3BA	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x2
6126	 3BB	PUSH2	00A0	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0xA0
6127	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x83C
6128	 3BF	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6129	 3C1	ADD		 	 
- stack 0: 0x840
6130	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6131	 3C3	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
6132	 3C4	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x3C8FFE401B900200168FFFF00E600210100017C03560000009900010086FFF8
- stack 0: 0xF0
6133	 3C6	SHR		 	 
- stack 1: 0x840
- stack 0: 0x3C8
6134	 3C7	JUMP		 	 
- stack 0: 0x840
6135	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x840
6136	 3C9	PUSH2	0080	 	 
- stack 1: 0x840
- stack 0: 0x80
6137	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x840
- stack 0: 0x2
6138	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6139	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x840
- stack 0: 0x2
6140	 3D3	PUSH2	00A0	 	 
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0xA0
6141	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x2
6142	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x840
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6143	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x840
- stack 1: 0x2
- stack 0: 0x2
6144	 3DD	SUB		 	 
- stack 1: 0x840
- stack 0: 0x0
6145	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x3E6
6146	 3E1	JUMPI		 	 
- stack 0: 0x840
6147	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x840
- stack 0: 0x400
6148	 3E5	JUMP		 	 
- stack 0: 0x840
6149	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x840
6150	 401	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6151	 403	ADD		 	 
- stack 0: 0x844
6152	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6153	 405	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x1B900200168FFFF00E600210100017C03560000009900010086FFF800B30000
6154	 406	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x1B900200168FFFF00E600210100017C03560000009900010086FFF800B30000
- stack 0: 0xF0
6155	 408	SHR		 	 
- stack 1: 0x844
- stack 0: 0x1B9
6156	 409	JUMP		 	 
- stack 0: 0x844
6157	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x844
6158	 1BA	PUSH4	00020000	 	 
- stack 1: 0x844
- stack 0: 0x20000
6159	 1BF	PUSH2	03A0	 	 
- stack 2: 0x844
- stack 1: 0x20000
- stack 0: 0x3A0
6160	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x844
6161	 1C3	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6162	 1C5	ADD		 	 
- stack 0: 0x848
6163	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6164	 1C7	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x168FFFF00E600210100017C03560000009900010086FFF800B30000038F0001
6165	 1C8	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x168FFFF00E600210100017C03560000009900010086FFF800B30000038F0001
- stack 0: 0xF0
6166	 1CA	SHR		 	 
- stack 1: 0x848
- stack 0: 0x168
6167	 1CB	JUMP		 	 
- stack 0: 0x848
6168	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x848
6169	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
6170	 16A	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x168FFFF00E600210100017C03560000009900010086FFF800B30000038F0001
6171	 16B	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x168FFFF00E600210100017C03560000009900010086FFF800B30000038F0001
- stack 0: 0xE0
6172	 16D	SHR		 	 
- stack 1: 0x848
- stack 0: 0x168FFFF
6173	 16E	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
6174	 171	AND		 	 
- stack 1: 0x848
- stack 0: 0xFFFF
6175	 172	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0xFFFF
- stack 0: 0x1
6176	 174	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6177	 175	PUSH2	03A0	 	 
- stack 2: 0x848
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
6178	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x848
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
6179	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x848
- stack 0: 0x1FFFF
6180	 17A	PUSH2	03A0	 	 
- stack 2: 0x848
- stack 1: 0x1FFFF
- stack 0: 0x3A0
6181	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x848
6182	 17E	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6183	 180	ADD		 	 
- stack 0: 0x84C
6184	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6185	 182	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xE600210100017C03560000009900010086FFF800B30000038F000103AE0002
6186	 183	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0xE600210100017C03560000009900010086FFF800B30000038F000103AE0002
- stack 0: 0xF0
6187	 185	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xE6
6188	 186	JUMP		 	 
- stack 0: 0x84C
6189	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x84C
6190	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
6191	 E8	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0xE600210100017C03560000009900010086FFF800B30000038F000103AE0002
6192	 E9	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0xE600210100017C03560000009900010086FFF800B30000038F000103AE0002
- stack 0: 0xE0
6193	 EB	SHR		 	 
- stack 1: 0x84C
- stack 0: 0xE60021
6194	 EC	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0xE60021
- stack 0: 0xFFFF
6195	 EF	AND		 	 
- stack 1: 0x84C
- stack 0: 0x21
6196	 F0	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x21
- stack 0: 0x1
6197	 F2	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x21
6198	 F3	PUSH2	0380	 	 
- stack 2: 0x84C
- stack 1: 0x21
- stack 0: 0x380
6199	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x84C
6200	 F7	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6201	 F9	ADD		 	 
- stack 0: 0x850
6202	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6203	 FB	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x100017C03560000009900010086FFF800B30000038F000103AE000203C8FFEC
6204	 FC	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x100017C03560000009900010086FFF800B30000038F000103AE000203C8FFEC
- stack 0: 0xF0
6205	 FE	SHR		 	 
- stack 1: 0x850
- stack 0: 0x100
6206	 FF	JUMP		 	 
- stack 0: 0x850
6207	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x850
6208	 101	PUSH2	0060	 	 
- stack 1: 0x850
- stack 0: 0x60
6209	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x850
- stack 0: 0x1FFFF
6210	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
6211	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x1FFFF
6212	 10B	PUSH2	03A0	 	 
- stack 2: 0x850
- stack 1: 0x1FFFF
- stack 0: 0x3A0
6213	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x850
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
6214	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
6215	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
6216	 115	SUB		 	 
- stack 1: 0x850
- stack 0: 0x0
6217	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x11E
6218	 119	JUMPI		 	 
- stack 0: 0x850
6219	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x850
- stack 0: 0x138
6220	 11D	JUMP		 	 
- stack 0: 0x850
6221	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x850
6222	 139	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
6223	 13B	ADD		 	 
- stack 0: 0x854
6224	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
6225	 13D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3560000009900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC
6226	 13E	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x3560000009900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC
- stack 0: 0xF0
6227	 140	SHR		 	 
- stack 1: 0x854
- stack 0: 0x356
6228	 141	JUMP		 	 
- stack 0: 0x854
6229	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x854
6230	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
6231	 358	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3560000009900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC
6232	 359	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x3560000009900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC
- stack 0: 0xE0
6233	 35B	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3560000
6234	 35C	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3560000
- stack 0: 0xFFFF
6235	 35F	AND		 	 
- stack 1: 0x854
- stack 0: 0x0
6236	 360	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x1
6237	 362	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x0
6238	 363	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x80
6239	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
6240	 367	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
6241	 369	ADD		 	 
- stack 0: 0x858
6242	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6243	 36B	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
6244	 36C	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
- stack 0: 0xF0
6245	 36E	SHR		 	 
- stack 1: 0x858
- stack 0: 0x99
6246	 36F	JUMP		 	 
- stack 0: 0x858
6247	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x858
6248	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6249	 9B	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
6250	 9C	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
- stack 0: 0xE0
6251	 9E	SHR		 	 
- stack 1: 0x858
- stack 0: 0x990001
6252	 9F	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x990001
- stack 0: 0xFFFF
6253	 A2	AND		 	 
- stack 1: 0x858
- stack 0: 0x1
6254	 A3	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x1
6255	 A5	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x1
6256	 A6	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x40
6257	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
6258	 AA	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6259	 AC	ADD		 	 
- stack 0: 0x85C
6260	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6261	 AE	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFEC0142FFFC00E6002201000154
6262	 AF	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFEC0142FFFC00E6002201000154
- stack 0: 0xF0
6263	 B1	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86
6264	 B2	JUMP		 	 
- stack 0: 0x85C
6265	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x85C
6266	 87	PUSH4	ffff8000	 	 
- stack 1: 0x85C
- stack 0: 0xFFFF8000
6267	 8C	PUSH2	0020	 	 
- stack 2: 0x85C
- stack 1: 0xFFFF8000
- stack 0: 0x20
6268	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x85C
6269	 90	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
6270	 92	ADD		 	 
- stack 0: 0x860
6271	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
6272	 94	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xB30000038F000103AE000203C8FFEC0142FFFC00E600220100015403560000
6273	 95	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xB30000038F000103AE000203C8FFEC0142FFFC00E600220100015403560000
- stack 0: 0xF0
6274	 97	SHR		 	 
- stack 1: 0x860
- stack 0: 0xB3
6275	 98	JUMP		 	 
- stack 0: 0x860
6276	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x860
6277	 B4	PUSH2	0020	 	 
- stack 1: 0x860
- stack 0: 0x20
6278	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x860
- stack 0: 0xFFFF8000
6279	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6280	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0xFFFF8000
6281	 BE	PUSH2	0040	 	 
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x40
6282	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x1
6283	 C2	PUSH1	1F	 	 
- stack 3: 0x860
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
6284	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x1
6285	 C5	SHR		 	 
- stack 1: 0x860
- stack 0: 0x7FFFC000
6286	 C6	PUSH2	0060	 	 
- stack 2: 0x860
- stack 1: 0x7FFFC000
- stack 0: 0x60
6287	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x860
6288	 CA	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
6289	 CC	ADD		 	 
- stack 0: 0x864
6290	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
6291	 CE	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
6292	 CF	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
- stack 0: 0xF0
6293	 D1	SHR		 	 
- stack 1: 0x864
- stack 0: 0x38F
6294	 D2	JUMP		 	 
- stack 0: 0x864
6295	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x864
6296	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
6297	 391	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
6298	 392	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
- stack 0: 0xE0
6299	 394	SHR		 	 
- stack 1: 0x864
- stack 0: 0x38F0001
6300	 395	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6301	 398	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
6302	 399	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
6303	 39B	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
6304	 39C	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
6305	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x0
6306	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x1
6307	 3A1	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
6308	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
6309	 3A5	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
6310	 3A7	ADD		 	 
- stack 0: 0x868
6311	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
6312	 3A9	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
6313	 3AA	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
- stack 0: 0xF0
6314	 3AC	SHR		 	 
- stack 1: 0x868
- stack 0: 0x3AE
6315	 3AD	JUMP		 	 
- stack 0: 0x868
6316	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
6317	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
6318	 3B0	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
6319	 3B1	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
- stack 0: 0xE0
6320	 3B3	SHR		 	 
- stack 1: 0x868
- stack 0: 0x3AE0002
6321	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6322	 3B7	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
6323	 3B8	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
6324	 3BA	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
6325	 3BB	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
6326	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
6327	 3BF	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
6328	 3C1	ADD		 	 
- stack 0: 0x86C
6329	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
6330	 3C3	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
6331	 3C4	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
- stack 0: 0xF0
6332	 3C6	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x3C8
6333	 3C7	JUMP		 	 
- stack 0: 0x86C
6334	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x86C
6335	 3C9	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
6336	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x1
6337	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6338	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x1
6339	 3D3	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xA0
6340	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
6341	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6342	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
6343	 3DD	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x1
6344	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x3E6
6345	 3E1	JUMPI		 	 
- stack 0: 0x86C
6346	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x86C
6347	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
6348	 3E8	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
6349	 3E9	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
- stack 0: 0xE0
6350	 3EB	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x3C8FFEC
6351	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x3C8FFEC
- stack 0: 0xFFFF
6352	 3EF	AND		 	 
- stack 1: 0x86C
- stack 0: 0xFFEC
6353	 3F0	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0xFFEC
- stack 0: 0x1
6354	 3F2	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
6355	 3F3	ADD		 	 
- stack 0: 0x858
6356	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x858
- stack 0: 0xFFFFFFFF
6357	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x858
6358	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
6359	 3FB	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
6360	 3FC	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
- stack 0: 0xF0
6361	 3FE	SHR		 	 
- stack 1: 0x858
- stack 0: 0x99
6362	 3FF	JUMP		 	 
- stack 0: 0x858
6363	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x858
6364	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
6365	 9B	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
6366	 9C	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x9900010086FFF800B30000038F000103AE000203C8FFEC0142FFFC00E60022
- stack 0: 0xE0
6367	 9E	SHR		 	 
- stack 1: 0x858
- stack 0: 0x990001
6368	 9F	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x990001
- stack 0: 0xFFFF
6369	 A2	AND		 	 
- stack 1: 0x858
- stack 0: 0x1
6370	 A3	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x1
6371	 A5	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x1
6372	 A6	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0x1
- stack 0: 0x40
6373	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
6374	 AA	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
6375	 AC	ADD		 	 
- stack 0: 0x85C
6376	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
6377	 AE	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFEC0142FFFC00E6002201000154
6378	 AF	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFEC0142FFFC00E6002201000154
- stack 0: 0xF0
6379	 B1	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86
6380	 B2	JUMP		 	 
- stack 0: 0x85C
6381	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x85C
6382	 87	PUSH4	ffff8000	 	 
- stack 1: 0x85C
- stack 0: 0xFFFF8000
6383	 8C	PUSH2	0020	 	 
- stack 2: 0x85C
- stack 1: 0xFFFF8000
- stack 0: 0x20
6384	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x85C
6385	 90	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
6386	 92	ADD		 	 
- stack 0: 0x860
6387	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
6388	 94	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xB30000038F000103AE000203C8FFEC0142FFFC00E600220100015403560000
6389	 95	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xB30000038F000103AE000203C8FFEC0142FFFC00E600220100015403560000
- stack 0: 0xF0
6390	 97	SHR		 	 
- stack 1: 0x860
- stack 0: 0xB3
6391	 98	JUMP		 	 
- stack 0: 0x860
6392	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x860
6393	 B4	PUSH2	0020	 	 
- stack 1: 0x860
- stack 0: 0x20
6394	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x860
- stack 0: 0xFFFF8000
6395	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6396	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0xFFFF8000
6397	 BE	PUSH2	0040	 	 
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x40
6398	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x1
6399	 C2	PUSH1	1F	 	 
- stack 3: 0x860
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
6400	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x860
- stack 1: 0xFFFF8000
- stack 0: 0x1
6401	 C5	SHR		 	 
- stack 1: 0x860
- stack 0: 0x7FFFC000
6402	 C6	PUSH2	0060	 	 
- stack 2: 0x860
- stack 1: 0x7FFFC000
- stack 0: 0x60
6403	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x860
6404	 CA	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
6405	 CC	ADD		 	 
- stack 0: 0x864
6406	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
6407	 CE	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
6408	 CF	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
- stack 0: 0xF0
6409	 D1	SHR		 	 
- stack 1: 0x864
- stack 0: 0x38F
6410	 D2	JUMP		 	 
- stack 0: 0x864
6411	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x864
6412	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
6413	 391	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
6414	 392	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x38F000103AE000203C8FFEC0142FFFC00E60022010001540356000000990007
- stack 0: 0xE0
6415	 394	SHR		 	 
- stack 1: 0x864
- stack 0: 0x38F0001
6416	 395	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6417	 398	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
6418	 399	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
6419	 39B	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
6420	 39C	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
6421	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
6422	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x2
6423	 3A1	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x2
- stack 0: 0x80
6424	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
6425	 3A5	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
6426	 3A7	ADD		 	 
- stack 0: 0x868
6427	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
6428	 3A9	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
6429	 3AA	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
- stack 0: 0xF0
6430	 3AC	SHR		 	 
- stack 1: 0x868
- stack 0: 0x3AE
6431	 3AD	JUMP		 	 
- stack 0: 0x868
6432	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
6433	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
6434	 3B0	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
6435	 3B1	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x3AE000203C8FFEC0142FFFC00E600220100015403560000009900070086FFF8
- stack 0: 0xE0
6436	 3B3	SHR		 	 
- stack 1: 0x868
- stack 0: 0x3AE0002
6437	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6438	 3B7	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
6439	 3B8	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
6440	 3BA	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
6441	 3BB	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
6442	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
6443	 3BF	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
6444	 3C1	ADD		 	 
- stack 0: 0x86C
6445	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
6446	 3C3	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
6447	 3C4	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x3C8FFEC0142FFFC00E600220100015403560000009900070086FFF8044C0000
- stack 0: 0xF0
6448	 3C6	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x3C8
6449	 3C7	JUMP		 	 
- stack 0: 0x86C
6450	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x86C
6451	 3C9	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
6452	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x2
6453	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6454	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x2
6455	 3D3	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xA0
6456	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
6457	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6458	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
6459	 3DD	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x0
6460	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x3E6
6461	 3E1	JUMPI		 	 
- stack 0: 0x86C
6462	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x86C
- stack 0: 0x400
6463	 3E5	JUMP		 	 
- stack 0: 0x86C
6464	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x86C
6465	 401	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
6466	 403	ADD		 	 
- stack 0: 0x870
6467	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
6468	 405	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x142FFFC00E600220100015403560000009900070086FFF8044C000000B30000
6469	 406	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x142FFFC00E600220100015403560000009900070086FFF8044C000000B30000
- stack 0: 0xF0
6470	 408	SHR		 	 
- stack 1: 0x870
- stack 0: 0x142
6471	 409	JUMP		 	 
- stack 0: 0x870
6472	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x870
6473	 143	PUSH4	7fffc000	 	 
- stack 1: 0x870
- stack 0: 0x7FFFC000
6474	 148	PUSH2	03A0	 	 
- stack 2: 0x870
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
6475	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x870
6476	 14C	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
6477	 14E	ADD		 	 
- stack 0: 0x874
6478	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
6479	 150	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0xE600220100015403560000009900070086FFF8044C000000B30000038F0001
6480	 151	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0xE600220100015403560000009900070086FFF8044C000000B30000038F0001
- stack 0: 0xF0
6481	 153	SHR		 	 
- stack 1: 0x874
- stack 0: 0xE6
6482	 154	JUMP		 	 
- stack 0: 0x874
6483	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x874
6484	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
6485	 E8	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0xE600220100015403560000009900070086FFF8044C000000B30000038F0001
6486	 E9	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0xE600220100015403560000009900070086FFF8044C000000B30000038F0001
- stack 0: 0xE0
6487	 EB	SHR		 	 
- stack 1: 0x874
- stack 0: 0xE60022
6488	 EC	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0xE60022
- stack 0: 0xFFFF
6489	 EF	AND		 	 
- stack 1: 0x874
- stack 0: 0x22
6490	 F0	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x22
- stack 0: 0x1
6491	 F2	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x22
6492	 F3	PUSH2	0380	 	 
- stack 2: 0x874
- stack 1: 0x22
- stack 0: 0x380
6493	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x874
6494	 F7	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
6495	 F9	ADD		 	 
- stack 0: 0x878
6496	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
6497	 FB	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x100015403560000009900070086FFF8044C000000B30000038F000103AE0002
6498	 FC	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x100015403560000009900070086FFF8044C000000B30000038F000103AE0002
- stack 0: 0xF0
6499	 FE	SHR		 	 
- stack 1: 0x878
- stack 0: 0x100
6500	 FF	JUMP		 	 
- stack 0: 0x878
6501	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x878
6502	 101	PUSH2	0060	 	 
- stack 1: 0x878
- stack 0: 0x60
6503	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x878
- stack 0: 0x7FFFC000
6504	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x878
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
6505	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x878
- stack 0: 0x7FFFC000
6506	 10B	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
6507	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x878
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
6508	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x878
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
6509	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x878
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
6510	 115	SUB		 	 
- stack 1: 0x878
- stack 0: 0x0
6511	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x11E
6512	 119	JUMPI		 	 
- stack 0: 0x878
6513	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x878
- stack 0: 0x138
6514	 11D	JUMP		 	 
- stack 0: 0x878
6515	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x878
6516	 139	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
6517	 13B	ADD		 	 
- stack 0: 0x87C
6518	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
6519	 13D	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x3560000009900070086FFF8044C000000B30000038F000103AE000203C8FFE8
6520	 13E	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x3560000009900070086FFF8044C000000B30000038F000103AE000203C8FFE8
- stack 0: 0xF0
6521	 140	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x356
6522	 141	JUMP		 	 
- stack 0: 0x87C
6523	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x87C
6524	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
6525	 358	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x3560000009900070086FFF8044C000000B30000038F000103AE000203C8FFE8
6526	 359	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x3560000009900070086FFF8044C000000B30000038F000103AE000203C8FFE8
- stack 0: 0xE0
6527	 35B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x3560000
6528	 35C	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x3560000
- stack 0: 0xFFFF
6529	 35F	AND		 	 
- stack 1: 0x87C
- stack 0: 0x0
6530	 360	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x0
- stack 0: 0x1
6531	 362	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x0
6532	 363	PUSH2	0080	 	 
- stack 2: 0x87C
- stack 1: 0x0
- stack 0: 0x80
6533	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x87C
6534	 367	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
6535	 369	ADD		 	 
- stack 0: 0x880
6536	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
6537	 36B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
6538	 36C	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xF0
6539	 36E	SHR		 	 
- stack 1: 0x880
- stack 0: 0x99
6540	 36F	JUMP		 	 
- stack 0: 0x880
6541	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x880
6542	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
6543	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
6544	 9C	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xE0
6545	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0x990007
6546	 9F	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x990007
- stack 0: 0xFFFF
6547	 A2	AND		 	 
- stack 1: 0x880
- stack 0: 0x7
6548	 A3	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x7
- stack 0: 0x1
6549	 A5	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x7
6550	 A6	PUSH2	0040	 	 
- stack 2: 0x880
- stack 1: 0x7
- stack 0: 0x40
6551	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x880
6552	 AA	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
6553	 AC	ADD		 	 
- stack 0: 0x884
6554	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
6555	 AE	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x86FFF8044C000000B30000038F000103AE000203C8FFE8015520000168FF00
6556	 AF	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x86FFF8044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xF0
6557	 B1	SHR		 	 
- stack 1: 0x884
- stack 0: 0x86
6558	 B2	JUMP		 	 
- stack 0: 0x884
6559	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x884
6560	 87	PUSH4	ffff8000	 	 
- stack 1: 0x884
- stack 0: 0xFFFF8000
6561	 8C	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFFFF8000
- stack 0: 0x20
6562	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x884
6563	 90	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
6564	 92	ADD		 	 
- stack 0: 0x888
6565	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
6566	 94	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
6567	 95	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
- stack 0: 0xF0
6568	 97	SHR		 	 
- stack 1: 0x888
- stack 0: 0x44C
6569	 98	JUMP		 	 
- stack 0: 0x888
6570	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x888
6571	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
6572	 44E	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
6573	 44F	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
- stack 0: 0xE0
6574	 451	SHR		 	 
- stack 1: 0x888
- stack 0: 0x44C0000
6575	 452	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6576	 455	AND		 	 
- stack 1: 0x888
- stack 0: 0x0
6577	 456	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x1
6578	 458	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x0
6579	 459	POP		 	 
- stack 0: 0x888
6580	 45A	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
6581	 45C	ADD		 	 
- stack 0: 0x88C
6582	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
6583	 45E	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6002301000124
6584	 45F	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6002301000124
- stack 0: 0xF0
6585	 461	SHR		 	 
- stack 1: 0x88C
- stack 0: 0xB3
6586	 462	JUMP		 	 
- stack 0: 0x88C
6587	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x88C
6588	 B4	PUSH2	0020	 	 
- stack 1: 0x88C
- stack 0: 0x20
6589	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x88C
- stack 0: 0xFFFF8000
6590	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6591	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0xFFFF8000
6592	 BE	PUSH2	0040	 	 
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x40
6593	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x7
6594	 C2	PUSH1	1F	 	 
- stack 3: 0x88C
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
6595	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x7
6596	 C5	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x1FFFF00
6597	 C6	PUSH2	0060	 	 
- stack 2: 0x88C
- stack 1: 0x1FFFF00
- stack 0: 0x60
6598	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x88C
6599	 CA	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
6600	 CC	ADD		 	 
- stack 0: 0x890
6601	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
6602	 CE	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
6603	 CF	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
- stack 0: 0xF0
6604	 D1	SHR		 	 
- stack 1: 0x890
- stack 0: 0x38F
6605	 D2	JUMP		 	 
- stack 0: 0x890
6606	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x890
6607	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
6608	 391	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
6609	 392	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
- stack 0: 0xE0
6610	 394	SHR		 	 
- stack 1: 0x890
- stack 0: 0x38F0001
6611	 395	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6612	 398	AND		 	 
- stack 1: 0x890
- stack 0: 0x1
6613	 399	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x1
6614	 39B	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x1
6615	 39C	PUSH2	0080	 	 
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x80
6616	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x0
6617	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x890
- stack 0: 0x1
6618	 3A1	PUSH2	0080	 	 
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x80
6619	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x890
6620	 3A5	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
6621	 3A7	ADD		 	 
- stack 0: 0x894
6622	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
6623	 3A9	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
6624	 3AA	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
- stack 0: 0xF0
6625	 3AC	SHR		 	 
- stack 1: 0x894
- stack 0: 0x3AE
6626	 3AD	JUMP		 	 
- stack 0: 0x894
6627	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x894
6628	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x894
- stack 0: 0x894
6629	 3B0	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
6630	 3B1	PUSH1	E0	 	 
- stack 2: 0x894
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
- stack 0: 0xE0
6631	 3B3	SHR		 	 
- stack 1: 0x894
- stack 0: 0x3AE0002
6632	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x894
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6633	 3B7	AND		 	 
- stack 1: 0x894
- stack 0: 0x2
6634	 3B8	PUSH1	01	 	 
- stack 2: 0x894
- stack 1: 0x2
- stack 0: 0x1
6635	 3BA	SIGNEXTEND		 	 
- stack 1: 0x894
- stack 0: 0x2
6636	 3BB	PUSH2	00A0	 	 
- stack 2: 0x894
- stack 1: 0x2
- stack 0: 0xA0
6637	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x894
6638	 3BF	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
6639	 3C1	ADD		 	 
- stack 0: 0x898
6640	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
6641	 3C3	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
6642	 3C4	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
- stack 0: 0xF0
6643	 3C6	SHR		 	 
- stack 1: 0x898
- stack 0: 0x3C8
6644	 3C7	JUMP		 	 
- stack 0: 0x898
6645	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x898
6646	 3C9	PUSH2	0080	 	 
- stack 1: 0x898
- stack 0: 0x80
6647	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x898
- stack 0: 0x1
6648	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x898
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6649	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x898
- stack 0: 0x1
6650	 3D3	PUSH2	00A0	 	 
- stack 2: 0x898
- stack 1: 0x1
- stack 0: 0xA0
6651	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x898
- stack 1: 0x1
- stack 0: 0x2
6652	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x898
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6653	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x898
- stack 1: 0x1
- stack 0: 0x2
6654	 3DD	SUB		 	 
- stack 1: 0x898
- stack 0: 0x1
6655	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x898
- stack 1: 0x1
- stack 0: 0x3E6
6656	 3E1	JUMPI		 	 
- stack 0: 0x898
6657	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x898
6658	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
6659	 3E8	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
6660	 3E9	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
- stack 0: 0xE0
6661	 3EB	SHR		 	 
- stack 1: 0x898
- stack 0: 0x3C8FFE8
6662	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0x3C8FFE8
- stack 0: 0xFFFF
6663	 3EF	AND		 	 
- stack 1: 0x898
- stack 0: 0xFFE8
6664	 3F0	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0xFFE8
- stack 0: 0x1
6665	 3F2	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6666	 3F3	ADD		 	 
- stack 0: 0x880
6667	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x880
- stack 0: 0xFFFFFFFF
6668	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x880
6669	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
6670	 3FB	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
6671	 3FC	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xF0
6672	 3FE	SHR		 	 
- stack 1: 0x880
- stack 0: 0x99
6673	 3FF	JUMP		 	 
- stack 0: 0x880
6674	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x880
6675	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x880
- stack 0: 0x880
6676	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
6677	 9C	PUSH1	E0	 	 
- stack 2: 0x880
- stack 1: 0x9900070086FFF8044C000000B30000038F000103AE000203C8FFE801552000
- stack 0: 0xE0
6678	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0x990007
6679	 9F	PUSH2	FFFF	 	 
- stack 2: 0x880
- stack 1: 0x990007
- stack 0: 0xFFFF
6680	 A2	AND		 	 
- stack 1: 0x880
- stack 0: 0x7
6681	 A3	PUSH1	01	 	 
- stack 2: 0x880
- stack 1: 0x7
- stack 0: 0x1
6682	 A5	SIGNEXTEND		 	 
- stack 1: 0x880
- stack 0: 0x7
6683	 A6	PUSH2	0040	 	 
- stack 2: 0x880
- stack 1: 0x7
- stack 0: 0x40
6684	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x880
6685	 AA	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
6686	 AC	ADD		 	 
- stack 0: 0x884
6687	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
6688	 AE	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x86FFF8044C000000B30000038F000103AE000203C8FFE8015520000168FF00
6689	 AF	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x86FFF8044C000000B30000038F000103AE000203C8FFE8015520000168FF00
- stack 0: 0xF0
6690	 B1	SHR		 	 
- stack 1: 0x884
- stack 0: 0x86
6691	 B2	JUMP		 	 
- stack 0: 0x884
6692	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x884
6693	 87	PUSH4	ffff8000	 	 
- stack 1: 0x884
- stack 0: 0xFFFF8000
6694	 8C	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFFFF8000
- stack 0: 0x20
6695	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x884
6696	 90	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
6697	 92	ADD		 	 
- stack 0: 0x888
6698	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
6699	 94	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
6700	 95	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
- stack 0: 0xF0
6701	 97	SHR		 	 
- stack 1: 0x888
- stack 0: 0x44C
6702	 98	JUMP		 	 
- stack 0: 0x888
6703	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x888
6704	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
6705	 44E	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
6706	 44F	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE8015520000168FF0000E60023
- stack 0: 0xE0
6707	 451	SHR		 	 
- stack 1: 0x888
- stack 0: 0x44C0000
6708	 452	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6709	 455	AND		 	 
- stack 1: 0x888
- stack 0: 0x0
6710	 456	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x1
6711	 458	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x0
6712	 459	POP		 	 
- stack 0: 0x888
6713	 45A	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
6714	 45C	ADD		 	 
- stack 0: 0x88C
6715	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
6716	 45E	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6002301000124
6717	 45F	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0xB30000038F000103AE000203C8FFE8015520000168FF0000E6002301000124
- stack 0: 0xF0
6718	 461	SHR		 	 
- stack 1: 0x88C
- stack 0: 0xB3
6719	 462	JUMP		 	 
- stack 0: 0x88C
6720	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x88C
6721	 B4	PUSH2	0020	 	 
- stack 1: 0x88C
- stack 0: 0x20
6722	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x88C
- stack 0: 0xFFFF8000
6723	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6724	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0xFFFF8000
6725	 BE	PUSH2	0040	 	 
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x40
6726	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x7
6727	 C2	PUSH1	1F	 	 
- stack 3: 0x88C
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
6728	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x88C
- stack 1: 0xFFFF8000
- stack 0: 0x7
6729	 C5	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x1FFFF00
6730	 C6	PUSH2	0060	 	 
- stack 2: 0x88C
- stack 1: 0x1FFFF00
- stack 0: 0x60
6731	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x88C
6732	 CA	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
6733	 CC	ADD		 	 
- stack 0: 0x890
6734	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
6735	 CE	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
6736	 CF	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
- stack 0: 0xF0
6737	 D1	SHR		 	 
- stack 1: 0x890
- stack 0: 0x38F
6738	 D2	JUMP		 	 
- stack 0: 0x890
6739	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x890
6740	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
6741	 391	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
6742	 392	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0x38F000103AE000203C8FFE8015520000168FF0000E600230100012403560000
- stack 0: 0xE0
6743	 394	SHR		 	 
- stack 1: 0x890
- stack 0: 0x38F0001
6744	 395	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6745	 398	AND		 	 
- stack 1: 0x890
- stack 0: 0x1
6746	 399	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x1
6747	 39B	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x1
6748	 39C	PUSH2	0080	 	 
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x80
6749	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x890
- stack 1: 0x1
- stack 0: 0x1
6750	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x890
- stack 0: 0x2
6751	 3A1	PUSH2	0080	 	 
- stack 2: 0x890
- stack 1: 0x2
- stack 0: 0x80
6752	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x890
6753	 3A5	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
6754	 3A7	ADD		 	 
- stack 0: 0x894
6755	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
6756	 3A9	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
6757	 3AA	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
- stack 0: 0xF0
6758	 3AC	SHR		 	 
- stack 1: 0x894
- stack 0: 0x3AE
6759	 3AD	JUMP		 	 
- stack 0: 0x894
6760	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x894
6761	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x894
- stack 0: 0x894
6762	 3B0	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
6763	 3B1	PUSH1	E0	 	 
- stack 2: 0x894
- stack 1: 0x3AE000203C8FFE8015520000168FF0000E6002301000124035600000099000F
- stack 0: 0xE0
6764	 3B3	SHR		 	 
- stack 1: 0x894
- stack 0: 0x3AE0002
6765	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x894
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6766	 3B7	AND		 	 
- stack 1: 0x894
- stack 0: 0x2
6767	 3B8	PUSH1	01	 	 
- stack 2: 0x894
- stack 1: 0x2
- stack 0: 0x1
6768	 3BA	SIGNEXTEND		 	 
- stack 1: 0x894
- stack 0: 0x2
6769	 3BB	PUSH2	00A0	 	 
- stack 2: 0x894
- stack 1: 0x2
- stack 0: 0xA0
6770	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x894
6771	 3BF	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
6772	 3C1	ADD		 	 
- stack 0: 0x898
6773	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
6774	 3C3	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
6775	 3C4	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x3C8FFE8015520000168FF0000E6002301000124035600000099000F0086FFF8
- stack 0: 0xF0
6776	 3C6	SHR		 	 
- stack 1: 0x898
- stack 0: 0x3C8
6777	 3C7	JUMP		 	 
- stack 0: 0x898
6778	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x898
6779	 3C9	PUSH2	0080	 	 
- stack 1: 0x898
- stack 0: 0x80
6780	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x898
- stack 0: 0x2
6781	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x898
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6782	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x898
- stack 0: 0x2
6783	 3D3	PUSH2	00A0	 	 
- stack 2: 0x898
- stack 1: 0x2
- stack 0: 0xA0
6784	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x898
- stack 1: 0x2
- stack 0: 0x2
6785	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x898
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6786	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x898
- stack 1: 0x2
- stack 0: 0x2
6787	 3DD	SUB		 	 
- stack 1: 0x898
- stack 0: 0x0
6788	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x3E6
6789	 3E1	JUMPI		 	 
- stack 0: 0x898
6790	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x898
- stack 0: 0x400
6791	 3E5	JUMP		 	 
- stack 0: 0x898
6792	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x898
6793	 401	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
6794	 403	ADD		 	 
- stack 0: 0x89C
6795	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
6796	 405	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x15520000168FF0000E6002301000124035600000099000F0086FFF8044C0000
6797	 406	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x15520000168FF0000E6002301000124035600000099000F0086FFF8044C0000
- stack 0: 0xF0
6798	 408	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x155
6799	 409	JUMP		 	 
- stack 0: 0x89C
6800	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x89C
6801	 156	PUSH4	02000000	 	 
- stack 1: 0x89C
- stack 0: 0x2000000
6802	 15B	PUSH2	03A0	 	 
- stack 2: 0x89C
- stack 1: 0x2000000
- stack 0: 0x3A0
6803	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x89C
6804	 15F	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
6805	 161	ADD		 	 
- stack 0: 0x8A0
6806	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
6807	 163	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x168FF0000E6002301000124035600000099000F0086FFF8044C0000044C0000
6808	 164	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x168FF0000E6002301000124035600000099000F0086FFF8044C0000044C0000
- stack 0: 0xF0
6809	 166	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x168
6810	 167	JUMP		 	 
- stack 0: 0x8A0
6811	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x8A0
6812	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
6813	 16A	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x168FF0000E6002301000124035600000099000F0086FFF8044C0000044C0000
6814	 16B	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0x168FF0000E6002301000124035600000099000F0086FFF8044C0000044C0000
- stack 0: 0xE0
6815	 16D	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x168FF00
6816	 16E	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x168FF00
- stack 0: 0xFFFF
6817	 171	AND		 	 
- stack 1: 0x8A0
- stack 0: 0xFF00
6818	 172	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0xFF00
- stack 0: 0x1
6819	 174	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6820	 175	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
6821	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
6822	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x8A0
- stack 0: 0x1FFFF00
6823	 17A	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
6824	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A0
6825	 17E	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
6826	 180	ADD		 	 
- stack 0: 0x8A4
6827	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
6828	 182	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xE6002301000124035600000099000F0086FFF8044C0000044C000000B30000
6829	 183	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0xE6002301000124035600000099000F0086FFF8044C0000044C000000B30000
- stack 0: 0xF0
6830	 185	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xE6
6831	 186	JUMP		 	 
- stack 0: 0x8A4
6832	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8A4
6833	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
6834	 E8	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0xE6002301000124035600000099000F0086FFF8044C0000044C000000B30000
6835	 E9	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0xE6002301000124035600000099000F0086FFF8044C0000044C000000B30000
- stack 0: 0xE0
6836	 EB	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0xE60023
6837	 EC	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0xE60023
- stack 0: 0xFFFF
6838	 EF	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x23
6839	 F0	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x23
- stack 0: 0x1
6840	 F2	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x23
6841	 F3	PUSH2	0380	 	 
- stack 2: 0x8A4
- stack 1: 0x23
- stack 0: 0x380
6842	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x8A4
6843	 F7	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
6844	 F9	ADD		 	 
- stack 0: 0x8A8
6845	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
6846	 FB	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x1000124035600000099000F0086FFF8044C0000044C000000B30000038F0001
6847	 FC	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x1000124035600000099000F0086FFF8044C0000044C000000B30000038F0001
- stack 0: 0xF0
6848	 FE	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x100
6849	 FF	JUMP		 	 
- stack 0: 0x8A8
6850	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x8A8
6851	 101	PUSH2	0060	 	 
- stack 1: 0x8A8
- stack 0: 0x60
6852	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x8A8
- stack 0: 0x1FFFF00
6853	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
6854	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A8
- stack 0: 0x1FFFF00
6855	 10B	PUSH2	03A0	 	 
- stack 2: 0x8A8
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
6856	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A8
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
6857	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8A8
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
6858	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8A8
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
6859	 115	SUB		 	 
- stack 1: 0x8A8
- stack 0: 0x0
6860	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x11E
6861	 119	JUMPI		 	 
- stack 0: 0x8A8
6862	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x8A8
- stack 0: 0x138
6863	 11D	JUMP		 	 
- stack 0: 0x8A8
6864	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x8A8
6865	 139	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
6866	 13B	ADD		 	 
- stack 0: 0x8AC
6867	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
6868	 13D	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x35600000099000F0086FFF8044C0000044C000000B30000038F000103AE0002
6869	 13E	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x35600000099000F0086FFF8044C0000044C000000B30000038F000103AE0002
- stack 0: 0xF0
6870	 140	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x356
6871	 141	JUMP		 	 
- stack 0: 0x8AC
6872	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8AC
6873	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8AC
- stack 0: 0x8AC
6874	 358	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x35600000099000F0086FFF8044C0000044C000000B30000038F000103AE0002
6875	 359	PUSH1	E0	 	 
- stack 2: 0x8AC
- stack 1: 0x35600000099000F0086FFF8044C0000044C000000B30000038F000103AE0002
- stack 0: 0xE0
6876	 35B	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x3560000
6877	 35C	PUSH2	FFFF	 	 
- stack 2: 0x8AC
- stack 1: 0x3560000
- stack 0: 0xFFFF
6878	 35F	AND		 	 
- stack 1: 0x8AC
- stack 0: 0x0
6879	 360	PUSH1	01	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x1
6880	 362	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0x0
6881	 363	PUSH2	0080	 	 
- stack 2: 0x8AC
- stack 1: 0x0
- stack 0: 0x80
6882	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x8AC
6883	 367	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
6884	 369	ADD		 	 
- stack 0: 0x8B0
6885	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
6886	 36B	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
6887	 36C	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
6888	 36E	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x99
6889	 36F	JUMP		 	 
- stack 0: 0x8B0
6890	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8B0
6891	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
6892	 9B	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
6893	 9C	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
6894	 9E	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F
6895	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F
- stack 0: 0xFFFF
6896	 A2	AND		 	 
- stack 1: 0x8B0
- stack 0: 0xF
6897	 A3	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0xF
- stack 0: 0x1
6898	 A5	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0xF
6899	 A6	PUSH2	0040	 	 
- stack 2: 0x8B0
- stack 1: 0xF
- stack 0: 0x40
6900	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B0
6901	 AA	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
6902	 AC	ADD		 	 
- stack 0: 0x8B4
6903	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
6904	 AE	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x86FFF8044C0000044C000000B30000038F000103AE000203C8FFE401B90020
6905	 AF	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x86FFF8044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
6906	 B1	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x86
6907	 B2	JUMP		 	 
- stack 0: 0x8B4
6908	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x8B4
6909	 87	PUSH4	ffff8000	 	 
- stack 1: 0x8B4
- stack 0: 0xFFFF8000
6910	 8C	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0xFFFF8000
- stack 0: 0x20
6911	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B4
6912	 90	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
6913	 92	ADD		 	 
- stack 0: 0x8B8
6914	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
6915	 94	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
6916	 95	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
6917	 97	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x44C
6918	 98	JUMP		 	 
- stack 0: 0x8B8
6919	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8B8
6920	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
6921	 44E	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
6922	 44F	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
6923	 451	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000
6924	 452	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6925	 455	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
6926	 456	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x1
6927	 458	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
6928	 459	POP		 	 
- stack 0: 0x8B8
6929	 45A	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
6930	 45C	ADD		 	 
- stack 0: 0x8BC
6931	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
6932	 45E	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
6933	 45F	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
- stack 0: 0xF0
6934	 461	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x44C
6935	 462	JUMP		 	 
- stack 0: 0x8BC
6936	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8BC
6937	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
6938	 44E	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
6939	 44F	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
- stack 0: 0xE0
6940	 451	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x44C0000
6941	 452	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0x44C0000
- stack 0: 0xFFFF
6942	 455	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x0
6943	 456	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x0
- stack 0: 0x1
6944	 458	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x0
6945	 459	POP		 	 
- stack 0: 0x8BC
6946	 45A	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
6947	 45C	ADD		 	 
- stack 0: 0x8C0
6948	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
6949	 45E	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E60024010000F0
6950	 45F	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E60024010000F0
- stack 0: 0xF0
6951	 461	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xB3
6952	 462	JUMP		 	 
- stack 0: 0x8C0
6953	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x8C0
6954	 B4	PUSH2	0020	 	 
- stack 1: 0x8C0
- stack 0: 0x20
6955	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8C0
- stack 0: 0xFFFF8000
6956	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
6957	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C0
- stack 0: 0xFFFF8000
6958	 BE	PUSH2	0040	 	 
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0x40
6959	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xF
6960	 C2	PUSH1	1F	 	 
- stack 3: 0x8C0
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
6961	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xF
6962	 C5	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x1FFFF
6963	 C6	PUSH2	0060	 	 
- stack 2: 0x8C0
- stack 1: 0x1FFFF
- stack 0: 0x60
6964	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x8C0
6965	 CA	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
6966	 CC	ADD		 	 
- stack 0: 0x8C4
6967	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
6968	 CE	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
6969	 CF	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
- stack 0: 0xF0
6970	 D1	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x38F
6971	 D2	JUMP		 	 
- stack 0: 0x8C4
6972	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8C4
6973	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
6974	 391	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
6975	 392	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
- stack 0: 0xE0
6976	 394	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x38F0001
6977	 395	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
6978	 398	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x1
6979	 399	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x1
6980	 39B	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x1
6981	 39C	PUSH2	0080	 	 
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x80
6982	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x0
6983	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x8C4
- stack 0: 0x1
6984	 3A1	PUSH2	0080	 	 
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x80
6985	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x8C4
6986	 3A5	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
6987	 3A7	ADD		 	 
- stack 0: 0x8C8
6988	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
6989	 3A9	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
6990	 3AA	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
- stack 0: 0xF0
6991	 3AC	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE
6992	 3AD	JUMP		 	 
- stack 0: 0x8C8
6993	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8C8
6994	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
6995	 3B0	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
6996	 3B1	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
- stack 0: 0xE0
6997	 3B3	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE0002
6998	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
6999	 3B7	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x2
7000	 3B8	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x2
- stack 0: 0x1
7001	 3BA	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x2
7002	 3BB	PUSH2	00A0	 	 
- stack 2: 0x8C8
- stack 1: 0x2
- stack 0: 0xA0
7003	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x8C8
7004	 3BF	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7005	 3C1	ADD		 	 
- stack 0: 0x8CC
7006	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7007	 3C3	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
7008	 3C4	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
- stack 0: 0xF0
7009	 3C6	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8
7010	 3C7	JUMP		 	 
- stack 0: 0x8CC
7011	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8CC
7012	 3C9	PUSH2	0080	 	 
- stack 1: 0x8CC
- stack 0: 0x80
7013	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x8CC
- stack 0: 0x1
7014	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7015	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8CC
- stack 0: 0x1
7016	 3D3	PUSH2	00A0	 	 
- stack 2: 0x8CC
- stack 1: 0x1
- stack 0: 0xA0
7017	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x8CC
- stack 1: 0x1
- stack 0: 0x2
7018	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8CC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7019	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8CC
- stack 1: 0x1
- stack 0: 0x2
7020	 3DD	SUB		 	 
- stack 1: 0x8CC
- stack 0: 0x1
7021	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x8CC
- stack 1: 0x1
- stack 0: 0x3E6
7022	 3E1	JUMPI		 	 
- stack 0: 0x8CC
7023	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x8CC
7024	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7025	 3E8	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
7026	 3E9	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
- stack 0: 0xE0
7027	 3EB	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8FFE4
7028	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
7029	 3EF	AND		 	 
- stack 1: 0x8CC
- stack 0: 0xFFE4
7030	 3F0	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0xFFE4
- stack 0: 0x1
7031	 3F2	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7032	 3F3	ADD		 	 
- stack 0: 0x8B0
7033	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8B0
- stack 0: 0xFFFFFFFF
7034	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8B0
7035	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7036	 3FB	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
7037	 3FC	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
7038	 3FE	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x99
7039	 3FF	JUMP		 	 
- stack 0: 0x8B0
7040	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8B0
7041	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7042	 9B	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
7043	 9C	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F0086FFF8044C0000044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
7044	 9E	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x99000F
7045	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x99000F
- stack 0: 0xFFFF
7046	 A2	AND		 	 
- stack 1: 0x8B0
- stack 0: 0xF
7047	 A3	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0xF
- stack 0: 0x1
7048	 A5	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0xF
7049	 A6	PUSH2	0040	 	 
- stack 2: 0x8B0
- stack 1: 0xF
- stack 0: 0x40
7050	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B0
7051	 AA	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7052	 AC	ADD		 	 
- stack 0: 0x8B4
7053	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7054	 AE	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x86FFF8044C0000044C000000B30000038F000103AE000203C8FFE401B90020
7055	 AF	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x86FFF8044C0000044C000000B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
7056	 B1	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x86
7057	 B2	JUMP		 	 
- stack 0: 0x8B4
7058	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x8B4
7059	 87	PUSH4	ffff8000	 	 
- stack 1: 0x8B4
- stack 0: 0xFFFF8000
7060	 8C	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0xFFFF8000
- stack 0: 0x20
7061	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B4
7062	 90	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7063	 92	ADD		 	 
- stack 0: 0x8B8
7064	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7065	 94	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
7066	 95	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
7067	 97	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x44C
7068	 98	JUMP		 	 
- stack 0: 0x8B8
7069	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8B8
7070	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7071	 44E	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
7072	 44F	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000044C000000B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
7073	 451	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x44C0000
7074	 452	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7075	 455	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7076	 456	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x1
7077	 458	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x0
7078	 459	POP		 	 
- stack 0: 0x8B8
7079	 45A	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7080	 45C	ADD		 	 
- stack 0: 0x8BC
7081	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7082	 45E	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
7083	 45F	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
- stack 0: 0xF0
7084	 461	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x44C
7085	 462	JUMP		 	 
- stack 0: 0x8BC
7086	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8BC
7087	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8BC
- stack 0: 0x8BC
7088	 44E	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
7089	 44F	PUSH1	E0	 	 
- stack 2: 0x8BC
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE401B900200168FFFF00E60024
- stack 0: 0xE0
7090	 451	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x44C0000
7091	 452	PUSH2	FFFF	 	 
- stack 2: 0x8BC
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7092	 455	AND		 	 
- stack 1: 0x8BC
- stack 0: 0x0
7093	 456	PUSH1	01	 	 
- stack 2: 0x8BC
- stack 1: 0x0
- stack 0: 0x1
7094	 458	SIGNEXTEND		 	 
- stack 1: 0x8BC
- stack 0: 0x0
7095	 459	POP		 	 
- stack 0: 0x8BC
7096	 45A	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7097	 45C	ADD		 	 
- stack 0: 0x8C0
7098	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7099	 45E	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E60024010000F0
7100	 45F	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E60024010000F0
- stack 0: 0xF0
7101	 461	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xB3
7102	 462	JUMP		 	 
- stack 0: 0x8C0
7103	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x8C0
7104	 B4	PUSH2	0020	 	 
- stack 1: 0x8C0
- stack 0: 0x20
7105	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8C0
- stack 0: 0xFFFF8000
7106	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
7107	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C0
- stack 0: 0xFFFF8000
7108	 BE	PUSH2	0040	 	 
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0x40
7109	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xF
7110	 C2	PUSH1	1F	 	 
- stack 3: 0x8C0
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
7111	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8C0
- stack 1: 0xFFFF8000
- stack 0: 0xF
7112	 C5	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x1FFFF
7113	 C6	PUSH2	0060	 	 
- stack 2: 0x8C0
- stack 1: 0x1FFFF
- stack 0: 0x60
7114	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x8C0
7115	 CA	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7116	 CC	ADD		 	 
- stack 0: 0x8C4
7117	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7118	 CE	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
7119	 CF	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
- stack 0: 0xF0
7120	 D1	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x38F
7121	 D2	JUMP		 	 
- stack 0: 0x8C4
7122	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8C4
7123	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7124	 391	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
7125	 392	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E60024010000F003560000
- stack 0: 0xE0
7126	 394	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x38F0001
7127	 395	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
7128	 398	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x1
7129	 399	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x1
7130	 39B	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x1
7131	 39C	PUSH2	0080	 	 
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x80
7132	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x8C4
- stack 1: 0x1
- stack 0: 0x1
7133	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x8C4
- stack 0: 0x2
7134	 3A1	PUSH2	0080	 	 
- stack 2: 0x8C4
- stack 1: 0x2
- stack 0: 0x80
7135	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x8C4
7136	 3A5	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7137	 3A7	ADD		 	 
- stack 0: 0x8C8
7138	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7139	 3A9	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
7140	 3AA	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
- stack 0: 0xF0
7141	 3AC	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE
7142	 3AD	JUMP		 	 
- stack 0: 0x8C8
7143	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8C8
7144	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C8
- stack 0: 0x8C8
7145	 3B0	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
7146	 3B1	PUSH1	E0	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E60024010000F00356000000990001
- stack 0: 0xE0
7147	 3B3	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x3AE0002
7148	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
7149	 3B7	AND		 	 
- stack 1: 0x8C8
- stack 0: 0x2
7150	 3B8	PUSH1	01	 	 
- stack 2: 0x8C8
- stack 1: 0x2
- stack 0: 0x1
7151	 3BA	SIGNEXTEND		 	 
- stack 1: 0x8C8
- stack 0: 0x2
7152	 3BB	PUSH2	00A0	 	 
- stack 2: 0x8C8
- stack 1: 0x2
- stack 0: 0xA0
7153	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x8C8
7154	 3BF	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7155	 3C1	ADD		 	 
- stack 0: 0x8CC
7156	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7157	 3C3	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
7158	 3C4	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x3C8FFE401B900200168FFFF00E60024010000F00356000000990001044C0000
- stack 0: 0xF0
7159	 3C6	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x3C8
7160	 3C7	JUMP		 	 
- stack 0: 0x8CC
7161	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8CC
7162	 3C9	PUSH2	0080	 	 
- stack 1: 0x8CC
- stack 0: 0x80
7163	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x8CC
- stack 0: 0x2
7164	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7165	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8CC
- stack 0: 0x2
7166	 3D3	PUSH2	00A0	 	 
- stack 2: 0x8CC
- stack 1: 0x2
- stack 0: 0xA0
7167	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x8CC
- stack 1: 0x2
- stack 0: 0x2
7168	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8CC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7169	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8CC
- stack 1: 0x2
- stack 0: 0x2
7170	 3DD	SUB		 	 
- stack 1: 0x8CC
- stack 0: 0x0
7171	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x3E6
7172	 3E1	JUMPI		 	 
- stack 0: 0x8CC
7173	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x8CC
- stack 0: 0x400
7174	 3E5	JUMP		 	 
- stack 0: 0x8CC
7175	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x8CC
7176	 401	PUSH1	04	 	 
- stack 1: 0x8CC
- stack 0: 0x4
7177	 403	ADD		 	 
- stack 0: 0x8D0
7178	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x8D0
- stack 0: 0x8D0
7179	 405	MLOAD		 	 
- stack 1: 0x8D0
- stack 0: 0x1B900200168FFFF00E60024010000F00356000000990001044C00000086FFF8
7180	 406	PUSH1	F0	 	 
- stack 2: 0x8D0
- stack 1: 0x1B900200168FFFF00E60024010000F00356000000990001044C00000086FFF8
- stack 0: 0xF0
7181	 408	SHR		 	 
- stack 1: 0x8D0
- stack 0: 0x1B9
7182	 409	JUMP		 	 
- stack 0: 0x8D0
7183	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x8D0
7184	 1BA	PUSH4	00020000	 	 
- stack 1: 0x8D0
- stack 0: 0x20000
7185	 1BF	PUSH2	03A0	 	 
- stack 2: 0x8D0
- stack 1: 0x20000
- stack 0: 0x3A0
7186	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x8D0
7187	 1C3	PUSH1	04	 	 
- stack 1: 0x8D0
- stack 0: 0x4
7188	 1C5	ADD		 	 
- stack 0: 0x8D4
7189	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x8D4
- stack 0: 0x8D4
7190	 1C7	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x168FFFF00E60024010000F00356000000990001044C00000086FFF800B30000
7191	 1C8	PUSH1	F0	 	 
- stack 2: 0x8D4
- stack 1: 0x168FFFF00E60024010000F00356000000990001044C00000086FFF800B30000
- stack 0: 0xF0
7192	 1CA	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x168
7193	 1CB	JUMP		 	 
- stack 0: 0x8D4
7194	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x8D4
7195	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D4
- stack 0: 0x8D4
7196	 16A	MLOAD		 	 
- stack 1: 0x8D4
- stack 0: 0x168FFFF00E60024010000F00356000000990001044C00000086FFF800B30000
7197	 16B	PUSH1	E0	 	 
- stack 2: 0x8D4
- stack 1: 0x168FFFF00E60024010000F00356000000990001044C00000086FFF800B30000
- stack 0: 0xE0
7198	 16D	SHR		 	 
- stack 1: 0x8D4
- stack 0: 0x168FFFF
7199	 16E	PUSH2	FFFF	 	 
- stack 2: 0x8D4
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
7200	 171	AND		 	 
- stack 1: 0x8D4
- stack 0: 0xFFFF
7201	 172	PUSH1	01	 	 
- stack 2: 0x8D4
- stack 1: 0xFFFF
- stack 0: 0x1
7202	 174	SIGNEXTEND		 	 
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7203	 175	PUSH2	03A0	 	 
- stack 2: 0x8D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
7204	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x8D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
7205	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x8D4
- stack 0: 0x1FFFF
7206	 17A	PUSH2	03A0	 	 
- stack 2: 0x8D4
- stack 1: 0x1FFFF
- stack 0: 0x3A0
7207	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x8D4
7208	 17E	PUSH1	04	 	 
- stack 1: 0x8D4
- stack 0: 0x4
7209	 180	ADD		 	 
- stack 0: 0x8D8
7210	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x8D8
- stack 0: 0x8D8
7211	 182	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xE60024010000F00356000000990001044C00000086FFF800B30000038F0001
7212	 183	PUSH1	F0	 	 
- stack 2: 0x8D8
- stack 1: 0xE60024010000F00356000000990001044C00000086FFF800B30000038F0001
- stack 0: 0xF0
7213	 185	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xE6
7214	 186	JUMP		 	 
- stack 0: 0x8D8
7215	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8D8
7216	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8D8
- stack 0: 0x8D8
7217	 E8	MLOAD		 	 
- stack 1: 0x8D8
- stack 0: 0xE60024010000F00356000000990001044C00000086FFF800B30000038F0001
7218	 E9	PUSH1	E0	 	 
- stack 2: 0x8D8
- stack 1: 0xE60024010000F00356000000990001044C00000086FFF800B30000038F0001
- stack 0: 0xE0
7219	 EB	SHR		 	 
- stack 1: 0x8D8
- stack 0: 0xE60024
7220	 EC	PUSH2	FFFF	 	 
- stack 2: 0x8D8
- stack 1: 0xE60024
- stack 0: 0xFFFF
7221	 EF	AND		 	 
- stack 1: 0x8D8
- stack 0: 0x24
7222	 F0	PUSH1	01	 	 
- stack 2: 0x8D8
- stack 1: 0x24
- stack 0: 0x1
7223	 F2	SIGNEXTEND		 	 
- stack 1: 0x8D8
- stack 0: 0x24
7224	 F3	PUSH2	0380	 	 
- stack 2: 0x8D8
- stack 1: 0x24
- stack 0: 0x380
7225	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x8D8
7226	 F7	PUSH1	04	 	 
- stack 1: 0x8D8
- stack 0: 0x4
7227	 F9	ADD		 	 
- stack 0: 0x8DC
7228	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x8DC
- stack 0: 0x8DC
7229	 FB	MLOAD		 	 
- stack 1: 0x8DC
- stack 0: 0x10000F00356000000990001044C00000086FFF800B30000038F000103AE0002
7230	 FC	PUSH1	F0	 	 
- stack 2: 0x8DC
- stack 1: 0x10000F00356000000990001044C00000086FFF800B30000038F000103AE0002
- stack 0: 0xF0
7231	 FE	SHR		 	 
- stack 1: 0x8DC
- stack 0: 0x100
7232	 FF	JUMP		 	 
- stack 0: 0x8DC
7233	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x8DC
7234	 101	PUSH2	0060	 	 
- stack 1: 0x8DC
- stack 0: 0x60
7235	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x8DC
- stack 0: 0x1FFFF
7236	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8DC
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
7237	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8DC
- stack 0: 0x1FFFF
7238	 10B	PUSH2	03A0	 	 
- stack 2: 0x8DC
- stack 1: 0x1FFFF
- stack 0: 0x3A0
7239	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x8DC
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
7240	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8DC
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
7241	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8DC
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
7242	 115	SUB		 	 
- stack 1: 0x8DC
- stack 0: 0x0
7243	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x8DC
- stack 1: 0x0
- stack 0: 0x11E
7244	 119	JUMPI		 	 
- stack 0: 0x8DC
7245	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x8DC
- stack 0: 0x138
7246	 11D	JUMP		 	 
- stack 0: 0x8DC
7247	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x8DC
7248	 139	PUSH1	04	 	 
- stack 1: 0x8DC
- stack 0: 0x4
7249	 13B	ADD		 	 
- stack 0: 0x8E0
7250	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x8E0
- stack 0: 0x8E0
7251	 13D	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x356000000990001044C00000086FFF800B30000038F000103AE000203C8FFE8
7252	 13E	PUSH1	F0	 	 
- stack 2: 0x8E0
- stack 1: 0x356000000990001044C00000086FFF800B30000038F000103AE000203C8FFE8
- stack 0: 0xF0
7253	 140	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x356
7254	 141	JUMP		 	 
- stack 0: 0x8E0
7255	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x8E0
7256	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E0
- stack 0: 0x8E0
7257	 358	MLOAD		 	 
- stack 1: 0x8E0
- stack 0: 0x356000000990001044C00000086FFF800B30000038F000103AE000203C8FFE8
7258	 359	PUSH1	E0	 	 
- stack 2: 0x8E0
- stack 1: 0x356000000990001044C00000086FFF800B30000038F000103AE000203C8FFE8
- stack 0: 0xE0
7259	 35B	SHR		 	 
- stack 1: 0x8E0
- stack 0: 0x3560000
7260	 35C	PUSH2	FFFF	 	 
- stack 2: 0x8E0
- stack 1: 0x3560000
- stack 0: 0xFFFF
7261	 35F	AND		 	 
- stack 1: 0x8E0
- stack 0: 0x0
7262	 360	PUSH1	01	 	 
- stack 2: 0x8E0
- stack 1: 0x0
- stack 0: 0x1
7263	 362	SIGNEXTEND		 	 
- stack 1: 0x8E0
- stack 0: 0x0
7264	 363	PUSH2	0080	 	 
- stack 2: 0x8E0
- stack 1: 0x0
- stack 0: 0x80
7265	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x8E0
7266	 367	PUSH1	04	 	 
- stack 1: 0x8E0
- stack 0: 0x4
7267	 369	ADD		 	 
- stack 0: 0x8E4
7268	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7269	 36B	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
7270	 36C	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
7271	 36E	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x99
7272	 36F	JUMP		 	 
- stack 0: 0x8E4
7273	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8E4
7274	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E4
- stack 0: 0x8E4
7275	 9B	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
7276	 9C	PUSH1	E0	 	 
- stack 2: 0x8E4
- stack 1: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xE0
7277	 9E	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x990001
7278	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x990001
- stack 0: 0xFFFF
7279	 A2	AND		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7280	 A3	PUSH1	01	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x1
7281	 A5	SIGNEXTEND		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7282	 A6	PUSH2	0040	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x40
7283	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8E4
7284	 AA	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7285	 AC	ADD		 	 
- stack 0: 0x8E8
7286	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7287	 AE	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
7288	 AF	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
- stack 0: 0xF0
7289	 B1	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x44C
7290	 B2	JUMP		 	 
- stack 0: 0x8E8
7291	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8E8
7292	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E8
- stack 0: 0x8E8
7293	 44E	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
7294	 44F	PUSH1	E0	 	 
- stack 2: 0x8E8
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
- stack 0: 0xE0
7295	 451	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x44C0000
7296	 452	PUSH2	FFFF	 	 
- stack 2: 0x8E8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7297	 455	AND		 	 
- stack 1: 0x8E8
- stack 0: 0x0
7298	 456	PUSH1	01	 	 
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x1
7299	 458	SIGNEXTEND		 	 
- stack 1: 0x8E8
- stack 0: 0x0
7300	 459	POP		 	 
- stack 0: 0x8E8
7301	 45A	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7302	 45C	ADD		 	 
- stack 0: 0x8EC
7303	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7304	 45E	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025010000C4
7305	 45F	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025010000C4
- stack 0: 0xF0
7306	 461	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x86
7307	 462	JUMP		 	 
- stack 0: 0x8EC
7308	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x8EC
7309	 87	PUSH4	ffff8000	 	 
- stack 1: 0x8EC
- stack 0: 0xFFFF8000
7310	 8C	PUSH2	0020	 	 
- stack 2: 0x8EC
- stack 1: 0xFFFF8000
- stack 0: 0x20
7311	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8EC
7312	 90	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
7313	 92	ADD		 	 
- stack 0: 0x8F0
7314	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
7315	 94	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0xB30000038F000103AE000203C8FFE80142FFFC00E60025010000C403560000
7316	 95	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0xB30000038F000103AE000203C8FFE80142FFFC00E60025010000C403560000
- stack 0: 0xF0
7317	 97	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0xB3
7318	 98	JUMP		 	 
- stack 0: 0x8F0
7319	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x8F0
7320	 B4	PUSH2	0020	 	 
- stack 1: 0x8F0
- stack 0: 0x20
7321	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8F0
- stack 0: 0xFFFF8000
7322	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
7323	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8F0
- stack 0: 0xFFFF8000
7324	 BE	PUSH2	0040	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x40
7325	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x1
7326	 C2	PUSH1	1F	 	 
- stack 3: 0x8F0
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
7327	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x1
7328	 C5	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x7FFFC000
7329	 C6	PUSH2	0060	 	 
- stack 2: 0x8F0
- stack 1: 0x7FFFC000
- stack 0: 0x60
7330	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x8F0
7331	 CA	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7332	 CC	ADD		 	 
- stack 0: 0x8F4
7333	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
7334	 CE	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
7335	 CF	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
- stack 0: 0xF0
7336	 D1	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x38F
7337	 D2	JUMP		 	 
- stack 0: 0x8F4
7338	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8F4
7339	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F4
- stack 0: 0x8F4
7340	 391	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
7341	 392	PUSH1	E0	 	 
- stack 2: 0x8F4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
- stack 0: 0xE0
7342	 394	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x38F0001
7343	 395	PUSH2	FFFF	 	 
- stack 2: 0x8F4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
7344	 398	AND		 	 
- stack 1: 0x8F4
- stack 0: 0x1
7345	 399	PUSH1	01	 	 
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x1
7346	 39B	SIGNEXTEND		 	 
- stack 1: 0x8F4
- stack 0: 0x1
7347	 39C	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x80
7348	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x0
7349	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x8F4
- stack 0: 0x1
7350	 3A1	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x80
7351	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x8F4
7352	 3A5	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
7353	 3A7	ADD		 	 
- stack 0: 0x8F8
7354	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7355	 3A9	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
7356	 3AA	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
- stack 0: 0xF0
7357	 3AC	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE
7358	 3AD	JUMP		 	 
- stack 0: 0x8F8
7359	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8F8
7360	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
7361	 3B0	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
7362	 3B1	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
- stack 0: 0xE0
7363	 3B3	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE0002
7364	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
7365	 3B7	AND		 	 
- stack 1: 0x8F8
- stack 0: 0x2
7366	 3B8	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0x2
- stack 0: 0x1
7367	 3BA	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0x2
7368	 3BB	PUSH2	00A0	 	 
- stack 2: 0x8F8
- stack 1: 0x2
- stack 0: 0xA0
7369	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x8F8
7370	 3BF	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
7371	 3C1	ADD		 	 
- stack 0: 0x8FC
7372	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
7373	 3C3	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
7374	 3C4	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
- stack 0: 0xF0
7375	 3C6	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8
7376	 3C7	JUMP		 	 
- stack 0: 0x8FC
7377	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8FC
7378	 3C9	PUSH2	0080	 	 
- stack 1: 0x8FC
- stack 0: 0x80
7379	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x8FC
- stack 0: 0x1
7380	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7381	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8FC
- stack 0: 0x1
7382	 3D3	PUSH2	00A0	 	 
- stack 2: 0x8FC
- stack 1: 0x1
- stack 0: 0xA0
7383	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x8FC
- stack 1: 0x1
- stack 0: 0x2
7384	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7385	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8FC
- stack 1: 0x1
- stack 0: 0x2
7386	 3DD	SUB		 	 
- stack 1: 0x8FC
- stack 0: 0x1
7387	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x8FC
- stack 1: 0x1
- stack 0: 0x3E6
7388	 3E1	JUMPI		 	 
- stack 0: 0x8FC
7389	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x8FC
7390	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8FC
- stack 0: 0x8FC
7391	 3E8	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
7392	 3E9	PUSH1	E0	 	 
- stack 2: 0x8FC
- stack 1: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
- stack 0: 0xE0
7393	 3EB	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8FFE8
7394	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x3C8FFE8
- stack 0: 0xFFFF
7395	 3EF	AND		 	 
- stack 1: 0x8FC
- stack 0: 0xFFE8
7396	 3F0	PUSH1	01	 	 
- stack 2: 0x8FC
- stack 1: 0xFFE8
- stack 0: 0x1
7397	 3F2	SIGNEXTEND		 	 
- stack 1: 0x8FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
7398	 3F3	ADD		 	 
- stack 0: 0x8E4
7399	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
7400	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8E4
7401	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7402	 3FB	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
7403	 3FC	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xF0
7404	 3FE	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x99
7405	 3FF	JUMP		 	 
- stack 0: 0x8E4
7406	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8E4
7407	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E4
- stack 0: 0x8E4
7408	 9B	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
7409	 9C	PUSH1	E0	 	 
- stack 2: 0x8E4
- stack 1: 0x990001044C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC
- stack 0: 0xE0
7410	 9E	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x990001
7411	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8E4
- stack 1: 0x990001
- stack 0: 0xFFFF
7412	 A2	AND		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7413	 A3	PUSH1	01	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x1
7414	 A5	SIGNEXTEND		 	 
- stack 1: 0x8E4
- stack 0: 0x1
7415	 A6	PUSH2	0040	 	 
- stack 2: 0x8E4
- stack 1: 0x1
- stack 0: 0x40
7416	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x8E4
7417	 AA	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7418	 AC	ADD		 	 
- stack 0: 0x8E8
7419	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7420	 AE	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
7421	 AF	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
- stack 0: 0xF0
7422	 B1	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x44C
7423	 B2	JUMP		 	 
- stack 0: 0x8E8
7424	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x8E8
7425	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E8
- stack 0: 0x8E8
7426	 44E	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
7427	 44F	PUSH1	E0	 	 
- stack 2: 0x8E8
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025
- stack 0: 0xE0
7428	 451	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x44C0000
7429	 452	PUSH2	FFFF	 	 
- stack 2: 0x8E8
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7430	 455	AND		 	 
- stack 1: 0x8E8
- stack 0: 0x0
7431	 456	PUSH1	01	 	 
- stack 2: 0x8E8
- stack 1: 0x0
- stack 0: 0x1
7432	 458	SIGNEXTEND		 	 
- stack 1: 0x8E8
- stack 0: 0x0
7433	 459	POP		 	 
- stack 0: 0x8E8
7434	 45A	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7435	 45C	ADD		 	 
- stack 0: 0x8EC
7436	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7437	 45E	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025010000C4
7438	 45F	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFE80142FFFC00E60025010000C4
- stack 0: 0xF0
7439	 461	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x86
7440	 462	JUMP		 	 
- stack 0: 0x8EC
7441	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x8EC
7442	 87	PUSH4	ffff8000	 	 
- stack 1: 0x8EC
- stack 0: 0xFFFF8000
7443	 8C	PUSH2	0020	 	 
- stack 2: 0x8EC
- stack 1: 0xFFFF8000
- stack 0: 0x20
7444	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x8EC
7445	 90	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
7446	 92	ADD		 	 
- stack 0: 0x8F0
7447	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
7448	 94	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0xB30000038F000103AE000203C8FFE80142FFFC00E60025010000C403560000
7449	 95	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0xB30000038F000103AE000203C8FFE80142FFFC00E60025010000C403560000
- stack 0: 0xF0
7450	 97	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0xB3
7451	 98	JUMP		 	 
- stack 0: 0x8F0
7452	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x8F0
7453	 B4	PUSH2	0020	 	 
- stack 1: 0x8F0
- stack 0: 0x20
7454	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x8F0
- stack 0: 0xFFFF8000
7455	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
7456	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8F0
- stack 0: 0xFFFF8000
7457	 BE	PUSH2	0040	 	 
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x40
7458	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x1
7459	 C2	PUSH1	1F	 	 
- stack 3: 0x8F0
- stack 2: 0xFFFF8000
- stack 1: 0x1
- stack 0: 0x1F
7460	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x8F0
- stack 1: 0xFFFF8000
- stack 0: 0x1
7461	 C5	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x7FFFC000
7462	 C6	PUSH2	0060	 	 
- stack 2: 0x8F0
- stack 1: 0x7FFFC000
- stack 0: 0x60
7463	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x8F0
7464	 CA	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7465	 CC	ADD		 	 
- stack 0: 0x8F4
7466	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
7467	 CE	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
7468	 CF	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
- stack 0: 0xF0
7469	 D1	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x38F
7470	 D2	JUMP		 	 
- stack 0: 0x8F4
7471	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x8F4
7472	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F4
- stack 0: 0x8F4
7473	 391	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
7474	 392	PUSH1	E0	 	 
- stack 2: 0x8F4
- stack 1: 0x38F000103AE000203C8FFE80142FFFC00E60025010000C40356000000990007
- stack 0: 0xE0
7475	 394	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x38F0001
7476	 395	PUSH2	FFFF	 	 
- stack 2: 0x8F4
- stack 1: 0x38F0001
- stack 0: 0xFFFF
7477	 398	AND		 	 
- stack 1: 0x8F4
- stack 0: 0x1
7478	 399	PUSH1	01	 	 
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x1
7479	 39B	SIGNEXTEND		 	 
- stack 1: 0x8F4
- stack 0: 0x1
7480	 39C	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x80
7481	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x8F4
- stack 1: 0x1
- stack 0: 0x1
7482	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x8F4
- stack 0: 0x2
7483	 3A1	PUSH2	0080	 	 
- stack 2: 0x8F4
- stack 1: 0x2
- stack 0: 0x80
7484	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x8F4
7485	 3A5	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
7486	 3A7	ADD		 	 
- stack 0: 0x8F8
7487	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7488	 3A9	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
7489	 3AA	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
- stack 0: 0xF0
7490	 3AC	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE
7491	 3AD	JUMP		 	 
- stack 0: 0x8F8
7492	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x8F8
7493	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8F8
- stack 0: 0x8F8
7494	 3B0	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
7495	 3B1	PUSH1	E0	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE000203C8FFE80142FFFC00E60025010000C40356000000990007044C0000
- stack 0: 0xE0
7496	 3B3	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x3AE0002
7497	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x8F8
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
7498	 3B7	AND		 	 
- stack 1: 0x8F8
- stack 0: 0x2
7499	 3B8	PUSH1	01	 	 
- stack 2: 0x8F8
- stack 1: 0x2
- stack 0: 0x1
7500	 3BA	SIGNEXTEND		 	 
- stack 1: 0x8F8
- stack 0: 0x2
7501	 3BB	PUSH2	00A0	 	 
- stack 2: 0x8F8
- stack 1: 0x2
- stack 0: 0xA0
7502	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x8F8
7503	 3BF	PUSH1	04	 	 
- stack 1: 0x8F8
- stack 0: 0x4
7504	 3C1	ADD		 	 
- stack 0: 0x8FC
7505	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x8FC
- stack 0: 0x8FC
7506	 3C3	MLOAD		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
7507	 3C4	PUSH1	F0	 	 
- stack 2: 0x8FC
- stack 1: 0x3C8FFE80142FFFC00E60025010000C40356000000990007044C00000086FFF8
- stack 0: 0xF0
7508	 3C6	SHR		 	 
- stack 1: 0x8FC
- stack 0: 0x3C8
7509	 3C7	JUMP		 	 
- stack 0: 0x8FC
7510	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x8FC
7511	 3C9	PUSH2	0080	 	 
- stack 1: 0x8FC
- stack 0: 0x80
7512	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x8FC
- stack 0: 0x2
7513	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7514	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8FC
- stack 0: 0x2
7515	 3D3	PUSH2	00A0	 	 
- stack 2: 0x8FC
- stack 1: 0x2
- stack 0: 0xA0
7516	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x8FC
- stack 1: 0x2
- stack 0: 0x2
7517	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7518	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8FC
- stack 1: 0x2
- stack 0: 0x2
7519	 3DD	SUB		 	 
- stack 1: 0x8FC
- stack 0: 0x0
7520	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x8FC
- stack 1: 0x0
- stack 0: 0x3E6
7521	 3E1	JUMPI		 	 
- stack 0: 0x8FC
7522	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x8FC
- stack 0: 0x400
7523	 3E5	JUMP		 	 
- stack 0: 0x8FC
7524	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x8FC
7525	 401	PUSH1	04	 	 
- stack 1: 0x8FC
- stack 0: 0x4
7526	 403	ADD		 	 
- stack 0: 0x900
7527	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x900
- stack 0: 0x900
7528	 405	MLOAD		 	 
- stack 1: 0x900
- stack 0: 0x142FFFC00E60025010000C40356000000990007044C00000086FFF8044C0000
7529	 406	PUSH1	F0	 	 
- stack 2: 0x900
- stack 1: 0x142FFFC00E60025010000C40356000000990007044C00000086FFF8044C0000
- stack 0: 0xF0
7530	 408	SHR		 	 
- stack 1: 0x900
- stack 0: 0x142
7531	 409	JUMP		 	 
- stack 0: 0x900
7532	 142	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x900
7533	 143	PUSH4	7fffc000	 	 
- stack 1: 0x900
- stack 0: 0x7FFFC000
7534	 148	PUSH2	03A0	 	 
- stack 2: 0x900
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
7535	 14B	MSTORE		 	  ;; # store to x29
- stack 0: 0x900
7536	 14C	PUSH1	04	 	 
- stack 1: 0x900
- stack 0: 0x4
7537	 14E	ADD		 	 
- stack 0: 0x904
7538	 14F	DUP1		 	  ;; # executing pc
- stack 1: 0x904
- stack 0: 0x904
7539	 150	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0xE60025010000C40356000000990007044C00000086FFF8044C000000B30000
7540	 151	PUSH1	F0	 	 
- stack 2: 0x904
- stack 1: 0xE60025010000C40356000000990007044C00000086FFF8044C000000B30000
- stack 0: 0xF0
7541	 153	SHR		 	 
- stack 1: 0x904
- stack 0: 0xE6
7542	 154	JUMP		 	 
- stack 0: 0x904
7543	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x904
7544	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x904
- stack 0: 0x904
7545	 E8	MLOAD		 	 
- stack 1: 0x904
- stack 0: 0xE60025010000C40356000000990007044C00000086FFF8044C000000B30000
7546	 E9	PUSH1	E0	 	 
- stack 2: 0x904
- stack 1: 0xE60025010000C40356000000990007044C00000086FFF8044C000000B30000
- stack 0: 0xE0
7547	 EB	SHR		 	 
- stack 1: 0x904
- stack 0: 0xE60025
7548	 EC	PUSH2	FFFF	 	 
- stack 2: 0x904
- stack 1: 0xE60025
- stack 0: 0xFFFF
7549	 EF	AND		 	 
- stack 1: 0x904
- stack 0: 0x25
7550	 F0	PUSH1	01	 	 
- stack 2: 0x904
- stack 1: 0x25
- stack 0: 0x1
7551	 F2	SIGNEXTEND		 	 
- stack 1: 0x904
- stack 0: 0x25
7552	 F3	PUSH2	0380	 	 
- stack 2: 0x904
- stack 1: 0x25
- stack 0: 0x380
7553	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x904
7554	 F7	PUSH1	04	 	 
- stack 1: 0x904
- stack 0: 0x4
7555	 F9	ADD		 	 
- stack 0: 0x908
7556	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x908
- stack 0: 0x908
7557	 FB	MLOAD		 	 
- stack 1: 0x908
- stack 0: 0x10000C40356000000990007044C00000086FFF8044C000000B30000038F0001
7558	 FC	PUSH1	F0	 	 
- stack 2: 0x908
- stack 1: 0x10000C40356000000990007044C00000086FFF8044C000000B30000038F0001
- stack 0: 0xF0
7559	 FE	SHR		 	 
- stack 1: 0x908
- stack 0: 0x100
7560	 FF	JUMP		 	 
- stack 0: 0x908
7561	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x908
7562	 101	PUSH2	0060	 	 
- stack 1: 0x908
- stack 0: 0x60
7563	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x908
- stack 0: 0x7FFFC000
7564	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x908
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
7565	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x908
- stack 0: 0x7FFFC000
7566	 10B	PUSH2	03A0	 	 
- stack 2: 0x908
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
7567	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x908
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
7568	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x908
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
7569	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x908
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
7570	 115	SUB		 	 
- stack 1: 0x908
- stack 0: 0x0
7571	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x908
- stack 1: 0x0
- stack 0: 0x11E
7572	 119	JUMPI		 	 
- stack 0: 0x908
7573	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x908
- stack 0: 0x138
7574	 11D	JUMP		 	 
- stack 0: 0x908
7575	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x908
7576	 139	PUSH1	04	 	 
- stack 1: 0x908
- stack 0: 0x4
7577	 13B	ADD		 	 
- stack 0: 0x90C
7578	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x90C
- stack 0: 0x90C
7579	 13D	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x356000000990007044C00000086FFF8044C000000B30000038F000103AE0002
7580	 13E	PUSH1	F0	 	 
- stack 2: 0x90C
- stack 1: 0x356000000990007044C00000086FFF8044C000000B30000038F000103AE0002
- stack 0: 0xF0
7581	 140	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x356
7582	 141	JUMP		 	 
- stack 0: 0x90C
7583	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x90C
7584	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x90C
- stack 0: 0x90C
7585	 358	MLOAD		 	 
- stack 1: 0x90C
- stack 0: 0x356000000990007044C00000086FFF8044C000000B30000038F000103AE0002
7586	 359	PUSH1	E0	 	 
- stack 2: 0x90C
- stack 1: 0x356000000990007044C00000086FFF8044C000000B30000038F000103AE0002
- stack 0: 0xE0
7587	 35B	SHR		 	 
- stack 1: 0x90C
- stack 0: 0x3560000
7588	 35C	PUSH2	FFFF	 	 
- stack 2: 0x90C
- stack 1: 0x3560000
- stack 0: 0xFFFF
7589	 35F	AND		 	 
- stack 1: 0x90C
- stack 0: 0x0
7590	 360	PUSH1	01	 	 
- stack 2: 0x90C
- stack 1: 0x0
- stack 0: 0x1
7591	 362	SIGNEXTEND		 	 
- stack 1: 0x90C
- stack 0: 0x0
7592	 363	PUSH2	0080	 	 
- stack 2: 0x90C
- stack 1: 0x0
- stack 0: 0x80
7593	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x90C
7594	 367	PUSH1	04	 	 
- stack 1: 0x90C
- stack 0: 0x4
7595	 369	ADD		 	 
- stack 0: 0x910
7596	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7597	 36B	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
7598	 36C	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
7599	 36E	SHR		 	 
- stack 1: 0x910
- stack 0: 0x99
7600	 36F	JUMP		 	 
- stack 0: 0x910
7601	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x910
7602	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
7603	 9B	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
7604	 9C	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
7605	 9E	SHR		 	 
- stack 1: 0x910
- stack 0: 0x990007
7606	 9F	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x990007
- stack 0: 0xFFFF
7607	 A2	AND		 	 
- stack 1: 0x910
- stack 0: 0x7
7608	 A3	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x7
- stack 0: 0x1
7609	 A5	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x7
7610	 A6	PUSH2	0040	 	 
- stack 2: 0x910
- stack 1: 0x7
- stack 0: 0x40
7611	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x910
7612	 AA	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7613	 AC	ADD		 	 
- stack 0: 0x914
7614	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
7615	 AE	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
7616	 AF	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xF0
7617	 B1	SHR		 	 
- stack 1: 0x914
- stack 0: 0x44C
7618	 B2	JUMP		 	 
- stack 0: 0x914
7619	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x914
7620	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x914
- stack 0: 0x914
7621	 44E	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
7622	 44F	PUSH1	E0	 	 
- stack 2: 0x914
- stack 1: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xE0
7623	 451	SHR		 	 
- stack 1: 0x914
- stack 0: 0x44C0000
7624	 452	PUSH2	FFFF	 	 
- stack 2: 0x914
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7625	 455	AND		 	 
- stack 1: 0x914
- stack 0: 0x0
7626	 456	PUSH1	01	 	 
- stack 2: 0x914
- stack 1: 0x0
- stack 0: 0x1
7627	 458	SIGNEXTEND		 	 
- stack 1: 0x914
- stack 0: 0x0
7628	 459	POP		 	 
- stack 0: 0x914
7629	 45A	PUSH1	04	 	 
- stack 1: 0x914
- stack 0: 0x4
7630	 45C	ADD		 	 
- stack 0: 0x918
7631	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x918
- stack 0: 0x918
7632	 45E	MLOAD		 	 
- stack 1: 0x918
- stack 0: 0x86FFF8044C000000B30000038F000103AE000203C8FFE4015520000168FF00
7633	 45F	PUSH1	F0	 	 
- stack 2: 0x918
- stack 1: 0x86FFF8044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xF0
7634	 461	SHR		 	 
- stack 1: 0x918
- stack 0: 0x86
7635	 462	JUMP		 	 
- stack 0: 0x918
7636	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x918
7637	 87	PUSH4	ffff8000	 	 
- stack 1: 0x918
- stack 0: 0xFFFF8000
7638	 8C	PUSH2	0020	 	 
- stack 2: 0x918
- stack 1: 0xFFFF8000
- stack 0: 0x20
7639	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x918
7640	 90	PUSH1	04	 	 
- stack 1: 0x918
- stack 0: 0x4
7641	 92	ADD		 	 
- stack 0: 0x91C
7642	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x91C
- stack 0: 0x91C
7643	 94	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
7644	 95	PUSH1	F0	 	 
- stack 2: 0x91C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
- stack 0: 0xF0
7645	 97	SHR		 	 
- stack 1: 0x91C
- stack 0: 0x44C
7646	 98	JUMP		 	 
- stack 0: 0x91C
7647	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x91C
7648	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x91C
- stack 0: 0x91C
7649	 44E	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
7650	 44F	PUSH1	E0	 	 
- stack 2: 0x91C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
- stack 0: 0xE0
7651	 451	SHR		 	 
- stack 1: 0x91C
- stack 0: 0x44C0000
7652	 452	PUSH2	FFFF	 	 
- stack 2: 0x91C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7653	 455	AND		 	 
- stack 1: 0x91C
- stack 0: 0x0
7654	 456	PUSH1	01	 	 
- stack 2: 0x91C
- stack 1: 0x0
- stack 0: 0x1
7655	 458	SIGNEXTEND		 	 
- stack 1: 0x91C
- stack 0: 0x0
7656	 459	POP		 	 
- stack 0: 0x91C
7657	 45A	PUSH1	04	 	 
- stack 1: 0x91C
- stack 0: 0x4
7658	 45C	ADD		 	 
- stack 0: 0x920
7659	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x920
- stack 0: 0x920
7660	 45E	MLOAD		 	 
- stack 1: 0x920
- stack 0: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E6002601000090
7661	 45F	PUSH1	F0	 	 
- stack 2: 0x920
- stack 1: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E6002601000090
- stack 0: 0xF0
7662	 461	SHR		 	 
- stack 1: 0x920
- stack 0: 0xB3
7663	 462	JUMP		 	 
- stack 0: 0x920
7664	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x920
7665	 B4	PUSH2	0020	 	 
- stack 1: 0x920
- stack 0: 0x20
7666	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x920
- stack 0: 0xFFFF8000
7667	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
7668	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x920
- stack 0: 0xFFFF8000
7669	 BE	PUSH2	0040	 	 
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x40
7670	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x7
7671	 C2	PUSH1	1F	 	 
- stack 3: 0x920
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
7672	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x7
7673	 C5	SHR		 	 
- stack 1: 0x920
- stack 0: 0x1FFFF00
7674	 C6	PUSH2	0060	 	 
- stack 2: 0x920
- stack 1: 0x1FFFF00
- stack 0: 0x60
7675	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x920
7676	 CA	PUSH1	04	 	 
- stack 1: 0x920
- stack 0: 0x4
7677	 CC	ADD		 	 
- stack 0: 0x924
7678	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x924
- stack 0: 0x924
7679	 CE	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
7680	 CF	PUSH1	F0	 	 
- stack 2: 0x924
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
- stack 0: 0xF0
7681	 D1	SHR		 	 
- stack 1: 0x924
- stack 0: 0x38F
7682	 D2	JUMP		 	 
- stack 0: 0x924
7683	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x924
7684	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x924
- stack 0: 0x924
7685	 391	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
7686	 392	PUSH1	E0	 	 
- stack 2: 0x924
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
- stack 0: 0xE0
7687	 394	SHR		 	 
- stack 1: 0x924
- stack 0: 0x38F0001
7688	 395	PUSH2	FFFF	 	 
- stack 2: 0x924
- stack 1: 0x38F0001
- stack 0: 0xFFFF
7689	 398	AND		 	 
- stack 1: 0x924
- stack 0: 0x1
7690	 399	PUSH1	01	 	 
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x1
7691	 39B	SIGNEXTEND		 	 
- stack 1: 0x924
- stack 0: 0x1
7692	 39C	PUSH2	0080	 	 
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x80
7693	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x0
7694	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x924
- stack 0: 0x1
7695	 3A1	PUSH2	0080	 	 
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x80
7696	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x924
7697	 3A5	PUSH1	04	 	 
- stack 1: 0x924
- stack 0: 0x4
7698	 3A7	ADD		 	 
- stack 0: 0x928
7699	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x928
- stack 0: 0x928
7700	 3A9	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
7701	 3AA	PUSH1	F0	 	 
- stack 2: 0x928
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
- stack 0: 0xF0
7702	 3AC	SHR		 	 
- stack 1: 0x928
- stack 0: 0x3AE
7703	 3AD	JUMP		 	 
- stack 0: 0x928
7704	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x928
7705	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x928
- stack 0: 0x928
7706	 3B0	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
7707	 3B1	PUSH1	E0	 	 
- stack 2: 0x928
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
- stack 0: 0xE0
7708	 3B3	SHR		 	 
- stack 1: 0x928
- stack 0: 0x3AE0002
7709	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x928
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
7710	 3B7	AND		 	 
- stack 1: 0x928
- stack 0: 0x2
7711	 3B8	PUSH1	01	 	 
- stack 2: 0x928
- stack 1: 0x2
- stack 0: 0x1
7712	 3BA	SIGNEXTEND		 	 
- stack 1: 0x928
- stack 0: 0x2
7713	 3BB	PUSH2	00A0	 	 
- stack 2: 0x928
- stack 1: 0x2
- stack 0: 0xA0
7714	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x928
7715	 3BF	PUSH1	04	 	 
- stack 1: 0x928
- stack 0: 0x4
7716	 3C1	ADD		 	 
- stack 0: 0x92C
7717	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x92C
- stack 0: 0x92C
7718	 3C3	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
7719	 3C4	PUSH1	F0	 	 
- stack 2: 0x92C
- stack 1: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
- stack 0: 0xF0
7720	 3C6	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x3C8
7721	 3C7	JUMP		 	 
- stack 0: 0x92C
7722	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x92C
7723	 3C9	PUSH2	0080	 	 
- stack 1: 0x92C
- stack 0: 0x80
7724	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x92C
- stack 0: 0x1
7725	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x92C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7726	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x92C
- stack 0: 0x1
7727	 3D3	PUSH2	00A0	 	 
- stack 2: 0x92C
- stack 1: 0x1
- stack 0: 0xA0
7728	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x92C
- stack 1: 0x1
- stack 0: 0x2
7729	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x92C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7730	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x92C
- stack 1: 0x1
- stack 0: 0x2
7731	 3DD	SUB		 	 
- stack 1: 0x92C
- stack 0: 0x1
7732	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x92C
- stack 1: 0x1
- stack 0: 0x3E6
7733	 3E1	JUMPI		 	 
- stack 0: 0x92C
7734	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x92C
7735	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x92C
- stack 0: 0x92C
7736	 3E8	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
7737	 3E9	PUSH1	E0	 	 
- stack 2: 0x92C
- stack 1: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
- stack 0: 0xE0
7738	 3EB	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x3C8FFE4
7739	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x92C
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
7740	 3EF	AND		 	 
- stack 1: 0x92C
- stack 0: 0xFFE4
7741	 3F0	PUSH1	01	 	 
- stack 2: 0x92C
- stack 1: 0xFFE4
- stack 0: 0x1
7742	 3F2	SIGNEXTEND		 	 
- stack 1: 0x92C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7743	 3F3	ADD		 	 
- stack 0: 0x910
7744	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x910
- stack 0: 0xFFFFFFFF
7745	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x910
7746	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x910
- stack 0: 0x910
7747	 3FB	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
7748	 3FC	PUSH1	F0	 	 
- stack 2: 0x910
- stack 1: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
7749	 3FE	SHR		 	 
- stack 1: 0x910
- stack 0: 0x99
7750	 3FF	JUMP		 	 
- stack 0: 0x910
7751	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x910
7752	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x910
- stack 0: 0x910
7753	 9B	MLOAD		 	 
- stack 1: 0x910
- stack 0: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
7754	 9C	PUSH1	E0	 	 
- stack 2: 0x910
- stack 1: 0x990007044C00000086FFF8044C000000B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
7755	 9E	SHR		 	 
- stack 1: 0x910
- stack 0: 0x990007
7756	 9F	PUSH2	FFFF	 	 
- stack 2: 0x910
- stack 1: 0x990007
- stack 0: 0xFFFF
7757	 A2	AND		 	 
- stack 1: 0x910
- stack 0: 0x7
7758	 A3	PUSH1	01	 	 
- stack 2: 0x910
- stack 1: 0x7
- stack 0: 0x1
7759	 A5	SIGNEXTEND		 	 
- stack 1: 0x910
- stack 0: 0x7
7760	 A6	PUSH2	0040	 	 
- stack 2: 0x910
- stack 1: 0x7
- stack 0: 0x40
7761	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x910
7762	 AA	PUSH1	04	 	 
- stack 1: 0x910
- stack 0: 0x4
7763	 AC	ADD		 	 
- stack 0: 0x914
7764	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x914
- stack 0: 0x914
7765	 AE	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
7766	 AF	PUSH1	F0	 	 
- stack 2: 0x914
- stack 1: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xF0
7767	 B1	SHR		 	 
- stack 1: 0x914
- stack 0: 0x44C
7768	 B2	JUMP		 	 
- stack 0: 0x914
7769	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x914
7770	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x914
- stack 0: 0x914
7771	 44E	MLOAD		 	 
- stack 1: 0x914
- stack 0: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
7772	 44F	PUSH1	E0	 	 
- stack 2: 0x914
- stack 1: 0x44C00000086FFF8044C000000B30000038F000103AE000203C8FFE401552000
- stack 0: 0xE0
7773	 451	SHR		 	 
- stack 1: 0x914
- stack 0: 0x44C0000
7774	 452	PUSH2	FFFF	 	 
- stack 2: 0x914
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7775	 455	AND		 	 
- stack 1: 0x914
- stack 0: 0x0
7776	 456	PUSH1	01	 	 
- stack 2: 0x914
- stack 1: 0x0
- stack 0: 0x1
7777	 458	SIGNEXTEND		 	 
- stack 1: 0x914
- stack 0: 0x0
7778	 459	POP		 	 
- stack 0: 0x914
7779	 45A	PUSH1	04	 	 
- stack 1: 0x914
- stack 0: 0x4
7780	 45C	ADD		 	 
- stack 0: 0x918
7781	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x918
- stack 0: 0x918
7782	 45E	MLOAD		 	 
- stack 1: 0x918
- stack 0: 0x86FFF8044C000000B30000038F000103AE000203C8FFE4015520000168FF00
7783	 45F	PUSH1	F0	 	 
- stack 2: 0x918
- stack 1: 0x86FFF8044C000000B30000038F000103AE000203C8FFE4015520000168FF00
- stack 0: 0xF0
7784	 461	SHR		 	 
- stack 1: 0x918
- stack 0: 0x86
7785	 462	JUMP		 	 
- stack 0: 0x918
7786	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x918
7787	 87	PUSH4	ffff8000	 	 
- stack 1: 0x918
- stack 0: 0xFFFF8000
7788	 8C	PUSH2	0020	 	 
- stack 2: 0x918
- stack 1: 0xFFFF8000
- stack 0: 0x20
7789	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x918
7790	 90	PUSH1	04	 	 
- stack 1: 0x918
- stack 0: 0x4
7791	 92	ADD		 	 
- stack 0: 0x91C
7792	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x91C
- stack 0: 0x91C
7793	 94	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
7794	 95	PUSH1	F0	 	 
- stack 2: 0x91C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
- stack 0: 0xF0
7795	 97	SHR		 	 
- stack 1: 0x91C
- stack 0: 0x44C
7796	 98	JUMP		 	 
- stack 0: 0x91C
7797	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x91C
7798	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x91C
- stack 0: 0x91C
7799	 44E	MLOAD		 	 
- stack 1: 0x91C
- stack 0: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
7800	 44F	PUSH1	E0	 	 
- stack 2: 0x91C
- stack 1: 0x44C000000B30000038F000103AE000203C8FFE4015520000168FF0000E60026
- stack 0: 0xE0
7801	 451	SHR		 	 
- stack 1: 0x91C
- stack 0: 0x44C0000
7802	 452	PUSH2	FFFF	 	 
- stack 2: 0x91C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
7803	 455	AND		 	 
- stack 1: 0x91C
- stack 0: 0x0
7804	 456	PUSH1	01	 	 
- stack 2: 0x91C
- stack 1: 0x0
- stack 0: 0x1
7805	 458	SIGNEXTEND		 	 
- stack 1: 0x91C
- stack 0: 0x0
7806	 459	POP		 	 
- stack 0: 0x91C
7807	 45A	PUSH1	04	 	 
- stack 1: 0x91C
- stack 0: 0x4
7808	 45C	ADD		 	 
- stack 0: 0x920
7809	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x920
- stack 0: 0x920
7810	 45E	MLOAD		 	 
- stack 1: 0x920
- stack 0: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E6002601000090
7811	 45F	PUSH1	F0	 	 
- stack 2: 0x920
- stack 1: 0xB30000038F000103AE000203C8FFE4015520000168FF0000E6002601000090
- stack 0: 0xF0
7812	 461	SHR		 	 
- stack 1: 0x920
- stack 0: 0xB3
7813	 462	JUMP		 	 
- stack 0: 0x920
7814	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x920
7815	 B4	PUSH2	0020	 	 
- stack 1: 0x920
- stack 0: 0x20
7816	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x920
- stack 0: 0xFFFF8000
7817	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
7818	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x920
- stack 0: 0xFFFF8000
7819	 BE	PUSH2	0040	 	 
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x40
7820	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x7
7821	 C2	PUSH1	1F	 	 
- stack 3: 0x920
- stack 2: 0xFFFF8000
- stack 1: 0x7
- stack 0: 0x1F
7822	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x920
- stack 1: 0xFFFF8000
- stack 0: 0x7
7823	 C5	SHR		 	 
- stack 1: 0x920
- stack 0: 0x1FFFF00
7824	 C6	PUSH2	0060	 	 
- stack 2: 0x920
- stack 1: 0x1FFFF00
- stack 0: 0x60
7825	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x920
7826	 CA	PUSH1	04	 	 
- stack 1: 0x920
- stack 0: 0x4
7827	 CC	ADD		 	 
- stack 0: 0x924
7828	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x924
- stack 0: 0x924
7829	 CE	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
7830	 CF	PUSH1	F0	 	 
- stack 2: 0x924
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
- stack 0: 0xF0
7831	 D1	SHR		 	 
- stack 1: 0x924
- stack 0: 0x38F
7832	 D2	JUMP		 	 
- stack 0: 0x924
7833	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x924
7834	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x924
- stack 0: 0x924
7835	 391	MLOAD		 	 
- stack 1: 0x924
- stack 0: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
7836	 392	PUSH1	E0	 	 
- stack 2: 0x924
- stack 1: 0x38F000103AE000203C8FFE4015520000168FF0000E600260100009003560000
- stack 0: 0xE0
7837	 394	SHR		 	 
- stack 1: 0x924
- stack 0: 0x38F0001
7838	 395	PUSH2	FFFF	 	 
- stack 2: 0x924
- stack 1: 0x38F0001
- stack 0: 0xFFFF
7839	 398	AND		 	 
- stack 1: 0x924
- stack 0: 0x1
7840	 399	PUSH1	01	 	 
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x1
7841	 39B	SIGNEXTEND		 	 
- stack 1: 0x924
- stack 0: 0x1
7842	 39C	PUSH2	0080	 	 
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x80
7843	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x924
- stack 1: 0x1
- stack 0: 0x1
7844	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x924
- stack 0: 0x2
7845	 3A1	PUSH2	0080	 	 
- stack 2: 0x924
- stack 1: 0x2
- stack 0: 0x80
7846	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x924
7847	 3A5	PUSH1	04	 	 
- stack 1: 0x924
- stack 0: 0x4
7848	 3A7	ADD		 	 
- stack 0: 0x928
7849	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x928
- stack 0: 0x928
7850	 3A9	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
7851	 3AA	PUSH1	F0	 	 
- stack 2: 0x928
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
- stack 0: 0xF0
7852	 3AC	SHR		 	 
- stack 1: 0x928
- stack 0: 0x3AE
7853	 3AD	JUMP		 	 
- stack 0: 0x928
7854	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x928
7855	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x928
- stack 0: 0x928
7856	 3B0	MLOAD		 	 
- stack 1: 0x928
- stack 0: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
7857	 3B1	PUSH1	E0	 	 
- stack 2: 0x928
- stack 1: 0x3AE000203C8FFE4015520000168FF0000E6002601000090035600000099000F
- stack 0: 0xE0
7858	 3B3	SHR		 	 
- stack 1: 0x928
- stack 0: 0x3AE0002
7859	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x928
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
7860	 3B7	AND		 	 
- stack 1: 0x928
- stack 0: 0x2
7861	 3B8	PUSH1	01	 	 
- stack 2: 0x928
- stack 1: 0x2
- stack 0: 0x1
7862	 3BA	SIGNEXTEND		 	 
- stack 1: 0x928
- stack 0: 0x2
7863	 3BB	PUSH2	00A0	 	 
- stack 2: 0x928
- stack 1: 0x2
- stack 0: 0xA0
7864	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x928
7865	 3BF	PUSH1	04	 	 
- stack 1: 0x928
- stack 0: 0x4
7866	 3C1	ADD		 	 
- stack 0: 0x92C
7867	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x92C
- stack 0: 0x92C
7868	 3C3	MLOAD		 	 
- stack 1: 0x92C
- stack 0: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
7869	 3C4	PUSH1	F0	 	 
- stack 2: 0x92C
- stack 1: 0x3C8FFE4015520000168FF0000E6002601000090035600000099000F044C0000
- stack 0: 0xF0
7870	 3C6	SHR		 	 
- stack 1: 0x92C
- stack 0: 0x3C8
7871	 3C7	JUMP		 	 
- stack 0: 0x92C
7872	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x92C
7873	 3C9	PUSH2	0080	 	 
- stack 1: 0x92C
- stack 0: 0x80
7874	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x92C
- stack 0: 0x2
7875	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x92C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7876	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x92C
- stack 0: 0x2
7877	 3D3	PUSH2	00A0	 	 
- stack 2: 0x92C
- stack 1: 0x2
- stack 0: 0xA0
7878	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x92C
- stack 1: 0x2
- stack 0: 0x2
7879	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x92C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7880	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x92C
- stack 1: 0x2
- stack 0: 0x2
7881	 3DD	SUB		 	 
- stack 1: 0x92C
- stack 0: 0x0
7882	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x92C
- stack 1: 0x0
- stack 0: 0x3E6
7883	 3E1	JUMPI		 	 
- stack 0: 0x92C
7884	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x92C
- stack 0: 0x400
7885	 3E5	JUMP		 	 
- stack 0: 0x92C
7886	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x92C
7887	 401	PUSH1	04	 	 
- stack 1: 0x92C
- stack 0: 0x4
7888	 403	ADD		 	 
- stack 0: 0x930
7889	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x930
- stack 0: 0x930
7890	 405	MLOAD		 	 
- stack 1: 0x930
- stack 0: 0x15520000168FF0000E6002601000090035600000099000F044C0000044C0000
7891	 406	PUSH1	F0	 	 
- stack 2: 0x930
- stack 1: 0x15520000168FF0000E6002601000090035600000099000F044C0000044C0000
- stack 0: 0xF0
7892	 408	SHR		 	 
- stack 1: 0x930
- stack 0: 0x155
7893	 409	JUMP		 	 
- stack 0: 0x930
7894	 155	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x930
7895	 156	PUSH4	02000000	 	 
- stack 1: 0x930
- stack 0: 0x2000000
7896	 15B	PUSH2	03A0	 	 
- stack 2: 0x930
- stack 1: 0x2000000
- stack 0: 0x3A0
7897	 15E	MSTORE		 	  ;; # store to x29
- stack 0: 0x930
7898	 15F	PUSH1	04	 	 
- stack 1: 0x930
- stack 0: 0x4
7899	 161	ADD		 	 
- stack 0: 0x934
7900	 162	DUP1		 	  ;; # executing pc
- stack 1: 0x934
- stack 0: 0x934
7901	 163	MLOAD		 	 
- stack 1: 0x934
- stack 0: 0x168FF0000E6002601000090035600000099000F044C0000044C00000086FFF8
7902	 164	PUSH1	F0	 	 
- stack 2: 0x934
- stack 1: 0x168FF0000E6002601000090035600000099000F044C0000044C00000086FFF8
- stack 0: 0xF0
7903	 166	SHR		 	 
- stack 1: 0x934
- stack 0: 0x168
7904	 167	JUMP		 	 
- stack 0: 0x934
7905	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x934
7906	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x934
- stack 0: 0x934
7907	 16A	MLOAD		 	 
- stack 1: 0x934
- stack 0: 0x168FF0000E6002601000090035600000099000F044C0000044C00000086FFF8
7908	 16B	PUSH1	E0	 	 
- stack 2: 0x934
- stack 1: 0x168FF0000E6002601000090035600000099000F044C0000044C00000086FFF8
- stack 0: 0xE0
7909	 16D	SHR		 	 
- stack 1: 0x934
- stack 0: 0x168FF00
7910	 16E	PUSH2	FFFF	 	 
- stack 2: 0x934
- stack 1: 0x168FF00
- stack 0: 0xFFFF
7911	 171	AND		 	 
- stack 1: 0x934
- stack 0: 0xFF00
7912	 172	PUSH1	01	 	 
- stack 2: 0x934
- stack 1: 0xFF00
- stack 0: 0x1
7913	 174	SIGNEXTEND		 	 
- stack 1: 0x934
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7914	 175	PUSH2	03A0	 	 
- stack 2: 0x934
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
7915	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x934
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
7916	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x934
- stack 0: 0x1FFFF00
7917	 17A	PUSH2	03A0	 	 
- stack 2: 0x934
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
7918	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x934
7919	 17E	PUSH1	04	 	 
- stack 1: 0x934
- stack 0: 0x4
7920	 180	ADD		 	 
- stack 0: 0x938
7921	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x938
- stack 0: 0x938
7922	 182	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0xE6002601000090035600000099000F044C0000044C00000086FFF800B30000
7923	 183	PUSH1	F0	 	 
- stack 2: 0x938
- stack 1: 0xE6002601000090035600000099000F044C0000044C00000086FFF800B30000
- stack 0: 0xF0
7924	 185	SHR		 	 
- stack 1: 0x938
- stack 0: 0xE6
7925	 186	JUMP		 	 
- stack 0: 0x938
7926	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x938
7927	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x938
- stack 0: 0x938
7928	 E8	MLOAD		 	 
- stack 1: 0x938
- stack 0: 0xE6002601000090035600000099000F044C0000044C00000086FFF800B30000
7929	 E9	PUSH1	E0	 	 
- stack 2: 0x938
- stack 1: 0xE6002601000090035600000099000F044C0000044C00000086FFF800B30000
- stack 0: 0xE0
7930	 EB	SHR		 	 
- stack 1: 0x938
- stack 0: 0xE60026
7931	 EC	PUSH2	FFFF	 	 
- stack 2: 0x938
- stack 1: 0xE60026
- stack 0: 0xFFFF
7932	 EF	AND		 	 
- stack 1: 0x938
- stack 0: 0x26
7933	 F0	PUSH1	01	 	 
- stack 2: 0x938
- stack 1: 0x26
- stack 0: 0x1
7934	 F2	SIGNEXTEND		 	 
- stack 1: 0x938
- stack 0: 0x26
7935	 F3	PUSH2	0380	 	 
- stack 2: 0x938
- stack 1: 0x26
- stack 0: 0x380
7936	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x938
7937	 F7	PUSH1	04	 	 
- stack 1: 0x938
- stack 0: 0x4
7938	 F9	ADD		 	 
- stack 0: 0x93C
7939	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x93C
- stack 0: 0x93C
7940	 FB	MLOAD		 	 
- stack 1: 0x93C
- stack 0: 0x1000090035600000099000F044C0000044C00000086FFF800B30000038F0001
7941	 FC	PUSH1	F0	 	 
- stack 2: 0x93C
- stack 1: 0x1000090035600000099000F044C0000044C00000086FFF800B30000038F0001
- stack 0: 0xF0
7942	 FE	SHR		 	 
- stack 1: 0x93C
- stack 0: 0x100
7943	 FF	JUMP		 	 
- stack 0: 0x93C
7944	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x93C
7945	 101	PUSH2	0060	 	 
- stack 1: 0x93C
- stack 0: 0x60
7946	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x93C
- stack 0: 0x1FFFF00
7947	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x93C
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
7948	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x93C
- stack 0: 0x1FFFF00
7949	 10B	PUSH2	03A0	 	 
- stack 2: 0x93C
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
7950	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x93C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
7951	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x93C
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
7952	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x93C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
7953	 115	SUB		 	 
- stack 1: 0x93C
- stack 0: 0x0
7954	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x93C
- stack 1: 0x0
- stack 0: 0x11E
7955	 119	JUMPI		 	 
- stack 0: 0x93C
7956	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x93C
- stack 0: 0x138
7957	 11D	JUMP		 	 
- stack 0: 0x93C
7958	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x93C
7959	 139	PUSH1	04	 	 
- stack 1: 0x93C
- stack 0: 0x4
7960	 13B	ADD		 	 
- stack 0: 0x940
7961	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x940
- stack 0: 0x940
7962	 13D	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x35600000099000F044C0000044C00000086FFF800B30000038F000103AE0002
7963	 13E	PUSH1	F0	 	 
- stack 2: 0x940
- stack 1: 0x35600000099000F044C0000044C00000086FFF800B30000038F000103AE0002
- stack 0: 0xF0
7964	 140	SHR		 	 
- stack 1: 0x940
- stack 0: 0x356
7965	 141	JUMP		 	 
- stack 0: 0x940
7966	 356	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x940
7967	 357	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x940
- stack 0: 0x940
7968	 358	MLOAD		 	 
- stack 1: 0x940
- stack 0: 0x35600000099000F044C0000044C00000086FFF800B30000038F000103AE0002
7969	 359	PUSH1	E0	 	 
- stack 2: 0x940
- stack 1: 0x35600000099000F044C0000044C00000086FFF800B30000038F000103AE0002
- stack 0: 0xE0
7970	 35B	SHR		 	 
- stack 1: 0x940
- stack 0: 0x3560000
7971	 35C	PUSH2	FFFF	 	 
- stack 2: 0x940
- stack 1: 0x3560000
- stack 0: 0xFFFF
7972	 35F	AND		 	 
- stack 1: 0x940
- stack 0: 0x0
7973	 360	PUSH1	01	 	 
- stack 2: 0x940
- stack 1: 0x0
- stack 0: 0x1
7974	 362	SIGNEXTEND		 	 
- stack 1: 0x940
- stack 0: 0x0
7975	 363	PUSH2	0080	 	 
- stack 2: 0x940
- stack 1: 0x0
- stack 0: 0x80
7976	 366	MSTORE		 	  ;; # store to x4
- stack 0: 0x940
7977	 367	PUSH1	04	 	 
- stack 1: 0x940
- stack 0: 0x4
7978	 369	ADD		 	 
- stack 0: 0x944
7979	 36A	DUP1		 	  ;; # executing pc
- stack 1: 0x944
- stack 0: 0x944
7980	 36B	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
7981	 36C	PUSH1	F0	 	 
- stack 2: 0x944
- stack 1: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
7982	 36E	SHR		 	 
- stack 1: 0x944
- stack 0: 0x99
7983	 36F	JUMP		 	 
- stack 0: 0x944
7984	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x944
7985	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x944
- stack 0: 0x944
7986	 9B	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
7987	 9C	PUSH1	E0	 	 
- stack 2: 0x944
- stack 1: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
7988	 9E	SHR		 	 
- stack 1: 0x944
- stack 0: 0x99000F
7989	 9F	PUSH2	FFFF	 	 
- stack 2: 0x944
- stack 1: 0x99000F
- stack 0: 0xFFFF
7990	 A2	AND		 	 
- stack 1: 0x944
- stack 0: 0xF
7991	 A3	PUSH1	01	 	 
- stack 2: 0x944
- stack 1: 0xF
- stack 0: 0x1
7992	 A5	SIGNEXTEND		 	 
- stack 1: 0x944
- stack 0: 0xF
7993	 A6	PUSH2	0040	 	 
- stack 2: 0x944
- stack 1: 0xF
- stack 0: 0x40
7994	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x944
7995	 AA	PUSH1	04	 	 
- stack 1: 0x944
- stack 0: 0x4
7996	 AC	ADD		 	 
- stack 0: 0x948
7997	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x948
- stack 0: 0x948
7998	 AE	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
7999	 AF	PUSH1	F0	 	 
- stack 2: 0x948
- stack 1: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
8000	 B1	SHR		 	 
- stack 1: 0x948
- stack 0: 0x44C
8001	 B2	JUMP		 	 
- stack 0: 0x948
8002	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x948
8003	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x948
- stack 0: 0x948
8004	 44E	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
8005	 44F	PUSH1	E0	 	 
- stack 2: 0x948
- stack 1: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
8006	 451	SHR		 	 
- stack 1: 0x948
- stack 0: 0x44C0000
8007	 452	PUSH2	FFFF	 	 
- stack 2: 0x948
- stack 1: 0x44C0000
- stack 0: 0xFFFF
8008	 455	AND		 	 
- stack 1: 0x948
- stack 0: 0x0
8009	 456	PUSH1	01	 	 
- stack 2: 0x948
- stack 1: 0x0
- stack 0: 0x1
8010	 458	SIGNEXTEND		 	 
- stack 1: 0x948
- stack 0: 0x0
8011	 459	POP		 	 
- stack 0: 0x948
8012	 45A	PUSH1	04	 	 
- stack 1: 0x948
- stack 0: 0x4
8013	 45C	ADD		 	 
- stack 0: 0x94C
8014	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x94C
- stack 0: 0x94C
8015	 45E	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
8016	 45F	PUSH1	F0	 	 
- stack 2: 0x94C
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
8017	 461	SHR		 	 
- stack 1: 0x94C
- stack 0: 0x44C
8018	 462	JUMP		 	 
- stack 0: 0x94C
8019	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x94C
8020	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x94C
- stack 0: 0x94C
8021	 44E	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
8022	 44F	PUSH1	E0	 	 
- stack 2: 0x94C
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
8023	 451	SHR		 	 
- stack 1: 0x94C
- stack 0: 0x44C0000
8024	 452	PUSH2	FFFF	 	 
- stack 2: 0x94C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
8025	 455	AND		 	 
- stack 1: 0x94C
- stack 0: 0x0
8026	 456	PUSH1	01	 	 
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0x1
8027	 458	SIGNEXTEND		 	 
- stack 1: 0x94C
- stack 0: 0x0
8028	 459	POP		 	 
- stack 0: 0x94C
8029	 45A	PUSH1	04	 	 
- stack 1: 0x94C
- stack 0: 0x4
8030	 45C	ADD		 	 
- stack 0: 0x950
8031	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x950
- stack 0: 0x950
8032	 45E	MLOAD		 	 
- stack 1: 0x950
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFE401B900200168FFFF00E60027
8033	 45F	PUSH1	F0	 	 
- stack 2: 0x950
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFE401B900200168FFFF00E60027
- stack 0: 0xF0
8034	 461	SHR		 	 
- stack 1: 0x950
- stack 0: 0x86
8035	 462	JUMP		 	 
- stack 0: 0x950
8036	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x950
8037	 87	PUSH4	ffff8000	 	 
- stack 1: 0x950
- stack 0: 0xFFFF8000
8038	 8C	PUSH2	0020	 	 
- stack 2: 0x950
- stack 1: 0xFFFF8000
- stack 0: 0x20
8039	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x950
8040	 90	PUSH1	04	 	 
- stack 1: 0x950
- stack 0: 0x4
8041	 92	ADD		 	 
- stack 0: 0x954
8042	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x954
- stack 0: 0x954
8043	 94	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600270100005C
8044	 95	PUSH1	F0	 	 
- stack 2: 0x954
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600270100005C
- stack 0: 0xF0
8045	 97	SHR		 	 
- stack 1: 0x954
- stack 0: 0xB3
8046	 98	JUMP		 	 
- stack 0: 0x954
8047	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x954
8048	 B4	PUSH2	0020	 	 
- stack 1: 0x954
- stack 0: 0x20
8049	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x954
- stack 0: 0xFFFF8000
8050	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
8051	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x954
- stack 0: 0xFFFF8000
8052	 BE	PUSH2	0040	 	 
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0x40
8053	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xF
8054	 C2	PUSH1	1F	 	 
- stack 3: 0x954
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
8055	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xF
8056	 C5	SHR		 	 
- stack 1: 0x954
- stack 0: 0x1FFFF
8057	 C6	PUSH2	0060	 	 
- stack 2: 0x954
- stack 1: 0x1FFFF
- stack 0: 0x60
8058	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x954
8059	 CA	PUSH1	04	 	 
- stack 1: 0x954
- stack 0: 0x4
8060	 CC	ADD		 	 
- stack 0: 0x958
8061	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x958
- stack 0: 0x958
8062	 CE	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
8063	 CF	PUSH1	F0	 	 
- stack 2: 0x958
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
- stack 0: 0xF0
8064	 D1	SHR		 	 
- stack 1: 0x958
- stack 0: 0x38F
8065	 D2	JUMP		 	 
- stack 0: 0x958
8066	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x958
8067	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x958
- stack 0: 0x958
8068	 391	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
8069	 392	PUSH1	E0	 	 
- stack 2: 0x958
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
- stack 0: 0xE0
8070	 394	SHR		 	 
- stack 1: 0x958
- stack 0: 0x38F0001
8071	 395	PUSH2	FFFF	 	 
- stack 2: 0x958
- stack 1: 0x38F0001
- stack 0: 0xFFFF
8072	 398	AND		 	 
- stack 1: 0x958
- stack 0: 0x1
8073	 399	PUSH1	01	 	 
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x1
8074	 39B	SIGNEXTEND		 	 
- stack 1: 0x958
- stack 0: 0x1
8075	 39C	PUSH2	0080	 	 
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x80
8076	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x0
8077	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x958
- stack 0: 0x1
8078	 3A1	PUSH2	0080	 	 
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x80
8079	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x958
8080	 3A5	PUSH1	04	 	 
- stack 1: 0x958
- stack 0: 0x4
8081	 3A7	ADD		 	 
- stack 0: 0x95C
8082	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x95C
- stack 0: 0x95C
8083	 3A9	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
8084	 3AA	PUSH1	F0	 	 
- stack 2: 0x95C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
- stack 0: 0xF0
8085	 3AC	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x3AE
8086	 3AD	JUMP		 	 
- stack 0: 0x95C
8087	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x95C
8088	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x95C
- stack 0: 0x95C
8089	 3B0	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
8090	 3B1	PUSH1	E0	 	 
- stack 2: 0x95C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
- stack 0: 0xE0
8091	 3B3	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x3AE0002
8092	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x95C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
8093	 3B7	AND		 	 
- stack 1: 0x95C
- stack 0: 0x2
8094	 3B8	PUSH1	01	 	 
- stack 2: 0x95C
- stack 1: 0x2
- stack 0: 0x1
8095	 3BA	SIGNEXTEND		 	 
- stack 1: 0x95C
- stack 0: 0x2
8096	 3BB	PUSH2	00A0	 	 
- stack 2: 0x95C
- stack 1: 0x2
- stack 0: 0xA0
8097	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x95C
8098	 3BF	PUSH1	04	 	 
- stack 1: 0x95C
- stack 0: 0x4
8099	 3C1	ADD		 	 
- stack 0: 0x960
8100	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x960
- stack 0: 0x960
8101	 3C3	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
8102	 3C4	PUSH1	F0	 	 
- stack 2: 0x960
- stack 1: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
- stack 0: 0xF0
8103	 3C6	SHR		 	 
- stack 1: 0x960
- stack 0: 0x3C8
8104	 3C7	JUMP		 	 
- stack 0: 0x960
8105	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x960
8106	 3C9	PUSH2	0080	 	 
- stack 1: 0x960
- stack 0: 0x80
8107	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x960
- stack 0: 0x1
8108	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x960
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8109	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x960
- stack 0: 0x1
8110	 3D3	PUSH2	00A0	 	 
- stack 2: 0x960
- stack 1: 0x1
- stack 0: 0xA0
8111	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x960
- stack 1: 0x1
- stack 0: 0x2
8112	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x960
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8113	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x960
- stack 1: 0x1
- stack 0: 0x2
8114	 3DD	SUB		 	 
- stack 1: 0x960
- stack 0: 0x1
8115	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x960
- stack 1: 0x1
- stack 0: 0x3E6
8116	 3E1	JUMPI		 	 
- stack 0: 0x960
8117	 3E6	JUMPDEST		 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x960
8118	 3E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x960
- stack 0: 0x960
8119	 3E8	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
8120	 3E9	PUSH1	E0	 	 
- stack 2: 0x960
- stack 1: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
- stack 0: 0xE0
8121	 3EB	SHR		 	 
- stack 1: 0x960
- stack 0: 0x3C8FFE4
8122	 3EC	PUSH2	FFFF	 	 
- stack 2: 0x960
- stack 1: 0x3C8FFE4
- stack 0: 0xFFFF
8123	 3EF	AND		 	 
- stack 1: 0x960
- stack 0: 0xFFE4
8124	 3F0	PUSH1	01	 	 
- stack 2: 0x960
- stack 1: 0xFFE4
- stack 0: 0x1
8125	 3F2	SIGNEXTEND		 	 
- stack 1: 0x960
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
8126	 3F3	ADD		 	 
- stack 0: 0x944
8127	 3F4	PUSH4	FFFFFFFF	 	 
- stack 1: 0x944
- stack 0: 0xFFFFFFFF
8128	 3F9	AND		 	  ;; # mask to 32 bits
- stack 0: 0x944
8129	 3FA	DUP1		 	  ;; # executing pc
- stack 1: 0x944
- stack 0: 0x944
8130	 3FB	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
8131	 3FC	PUSH1	F0	 	 
- stack 2: 0x944
- stack 1: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
- stack 0: 0xF0
8132	 3FE	SHR		 	 
- stack 1: 0x944
- stack 0: 0x99
8133	 3FF	JUMP		 	 
- stack 0: 0x944
8134	 99	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x944
8135	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x944
- stack 0: 0x944
8136	 9B	MLOAD		 	 
- stack 1: 0x944
- stack 0: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
8137	 9C	PUSH1	E0	 	 
- stack 2: 0x944
- stack 1: 0x99000F044C0000044C00000086FFF800B30000038F000103AE000203C8FFE4
- stack 0: 0xE0
8138	 9E	SHR		 	 
- stack 1: 0x944
- stack 0: 0x99000F
8139	 9F	PUSH2	FFFF	 	 
- stack 2: 0x944
- stack 1: 0x99000F
- stack 0: 0xFFFF
8140	 A2	AND		 	 
- stack 1: 0x944
- stack 0: 0xF
8141	 A3	PUSH1	01	 	 
- stack 2: 0x944
- stack 1: 0xF
- stack 0: 0x1
8142	 A5	SIGNEXTEND		 	 
- stack 1: 0x944
- stack 0: 0xF
8143	 A6	PUSH2	0040	 	 
- stack 2: 0x944
- stack 1: 0xF
- stack 0: 0x40
8144	 A9	MSTORE		 	  ;; # store to x2
- stack 0: 0x944
8145	 AA	PUSH1	04	 	 
- stack 1: 0x944
- stack 0: 0x4
8146	 AC	ADD		 	 
- stack 0: 0x948
8147	 AD	DUP1		 	  ;; # executing pc
- stack 1: 0x948
- stack 0: 0x948
8148	 AE	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
8149	 AF	PUSH1	F0	 	 
- stack 2: 0x948
- stack 1: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xF0
8150	 B1	SHR		 	 
- stack 1: 0x948
- stack 0: 0x44C
8151	 B2	JUMP		 	 
- stack 0: 0x948
8152	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x948
8153	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x948
- stack 0: 0x948
8154	 44E	MLOAD		 	 
- stack 1: 0x948
- stack 0: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
8155	 44F	PUSH1	E0	 	 
- stack 2: 0x948
- stack 1: 0x44C0000044C00000086FFF800B30000038F000103AE000203C8FFE401B90020
- stack 0: 0xE0
8156	 451	SHR		 	 
- stack 1: 0x948
- stack 0: 0x44C0000
8157	 452	PUSH2	FFFF	 	 
- stack 2: 0x948
- stack 1: 0x44C0000
- stack 0: 0xFFFF
8158	 455	AND		 	 
- stack 1: 0x948
- stack 0: 0x0
8159	 456	PUSH1	01	 	 
- stack 2: 0x948
- stack 1: 0x0
- stack 0: 0x1
8160	 458	SIGNEXTEND		 	 
- stack 1: 0x948
- stack 0: 0x0
8161	 459	POP		 	 
- stack 0: 0x948
8162	 45A	PUSH1	04	 	 
- stack 1: 0x948
- stack 0: 0x4
8163	 45C	ADD		 	 
- stack 0: 0x94C
8164	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x94C
- stack 0: 0x94C
8165	 45E	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
8166	 45F	PUSH1	F0	 	 
- stack 2: 0x94C
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xF0
8167	 461	SHR		 	 
- stack 1: 0x94C
- stack 0: 0x44C
8168	 462	JUMP		 	 
- stack 0: 0x94C
8169	 44C	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x94C
8170	 44D	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x94C
- stack 0: 0x94C
8171	 44E	MLOAD		 	 
- stack 1: 0x94C
- stack 0: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
8172	 44F	PUSH1	E0	 	 
- stack 2: 0x94C
- stack 1: 0x44C00000086FFF800B30000038F000103AE000203C8FFE401B900200168FFFF
- stack 0: 0xE0
8173	 451	SHR		 	 
- stack 1: 0x94C
- stack 0: 0x44C0000
8174	 452	PUSH2	FFFF	 	 
- stack 2: 0x94C
- stack 1: 0x44C0000
- stack 0: 0xFFFF
8175	 455	AND		 	 
- stack 1: 0x94C
- stack 0: 0x0
8176	 456	PUSH1	01	 	 
- stack 2: 0x94C
- stack 1: 0x0
- stack 0: 0x1
8177	 458	SIGNEXTEND		 	 
- stack 1: 0x94C
- stack 0: 0x0
8178	 459	POP		 	 
- stack 0: 0x94C
8179	 45A	PUSH1	04	 	 
- stack 1: 0x94C
- stack 0: 0x4
8180	 45C	ADD		 	 
- stack 0: 0x950
8181	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x950
- stack 0: 0x950
8182	 45E	MLOAD		 	 
- stack 1: 0x950
- stack 0: 0x86FFF800B30000038F000103AE000203C8FFE401B900200168FFFF00E60027
8183	 45F	PUSH1	F0	 	 
- stack 2: 0x950
- stack 1: 0x86FFF800B30000038F000103AE000203C8FFE401B900200168FFFF00E60027
- stack 0: 0xF0
8184	 461	SHR		 	 
- stack 1: 0x950
- stack 0: 0x86
8185	 462	JUMP		 	 
- stack 0: 0x950
8186	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x950
8187	 87	PUSH4	ffff8000	 	 
- stack 1: 0x950
- stack 0: 0xFFFF8000
8188	 8C	PUSH2	0020	 	 
- stack 2: 0x950
- stack 1: 0xFFFF8000
- stack 0: 0x20
8189	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x950
8190	 90	PUSH1	04	 	 
- stack 1: 0x950
- stack 0: 0x4
8191	 92	ADD		 	 
- stack 0: 0x954
8192	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x954
- stack 0: 0x954
8193	 94	MLOAD		 	 
- stack 1: 0x954
- stack 0: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600270100005C
8194	 95	PUSH1	F0	 	 
- stack 2: 0x954
- stack 1: 0xB30000038F000103AE000203C8FFE401B900200168FFFF00E600270100005C
- stack 0: 0xF0
8195	 97	SHR		 	 
- stack 1: 0x954
- stack 0: 0xB3
8196	 98	JUMP		 	 
- stack 0: 0x954
8197	 B3	JUMPDEST		 ;; __riscvimpl_SRL_3_1_2	  ;; # instr: srl gp,ra,sp(ignore imm)
- stack 0: 0x954
8198	 B4	PUSH2	0020	 	 
- stack 1: 0x954
- stack 0: 0x20
8199	 B7	MLOAD		 	  ;; # read from x1
- stack 1: 0x954
- stack 0: 0xFFFF8000
8200	 B8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
8201	 BD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x954
- stack 0: 0xFFFF8000
8202	 BE	PUSH2	0040	 	 
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0x40
8203	 C1	MLOAD		 	  ;; # read from x2
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xF
8204	 C2	PUSH1	1F	 	 
- stack 3: 0x954
- stack 2: 0xFFFF8000
- stack 1: 0xF
- stack 0: 0x1F
8205	 C4	AND		 	  ;; # mask to 5 bits
- stack 2: 0x954
- stack 1: 0xFFFF8000
- stack 0: 0xF
8206	 C5	SHR		 	 
- stack 1: 0x954
- stack 0: 0x1FFFF
8207	 C6	PUSH2	0060	 	 
- stack 2: 0x954
- stack 1: 0x1FFFF
- stack 0: 0x60
8208	 C9	MSTORE		 	  ;; # store to x3
- stack 0: 0x954
8209	 CA	PUSH1	04	 	 
- stack 1: 0x954
- stack 0: 0x4
8210	 CC	ADD		 	 
- stack 0: 0x958
8211	 CD	DUP1		 	  ;; # executing pc
- stack 1: 0x958
- stack 0: 0x958
8212	 CE	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
8213	 CF	PUSH1	F0	 	 
- stack 2: 0x958
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
- stack 0: 0xF0
8214	 D1	SHR		 	 
- stack 1: 0x958
- stack 0: 0x38F
8215	 D2	JUMP		 	 
- stack 0: 0x958
8216	 38F	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x958
8217	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x958
- stack 0: 0x958
8218	 391	MLOAD		 	 
- stack 1: 0x958
- stack 0: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
8219	 392	PUSH1	E0	 	 
- stack 2: 0x958
- stack 1: 0x38F000103AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F
- stack 0: 0xE0
8220	 394	SHR		 	 
- stack 1: 0x958
- stack 0: 0x38F0001
8221	 395	PUSH2	FFFF	 	 
- stack 2: 0x958
- stack 1: 0x38F0001
- stack 0: 0xFFFF
8222	 398	AND		 	 
- stack 1: 0x958
- stack 0: 0x1
8223	 399	PUSH1	01	 	 
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x1
8224	 39B	SIGNEXTEND		 	 
- stack 1: 0x958
- stack 0: 0x1
8225	 39C	PUSH2	0080	 	 
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x80
8226	 39F	MLOAD		 	  ;; # read from x4
- stack 2: 0x958
- stack 1: 0x1
- stack 0: 0x1
8227	 3A0	ADD		 	  ;; # ADDI 4
- stack 1: 0x958
- stack 0: 0x2
8228	 3A1	PUSH2	0080	 	 
- stack 2: 0x958
- stack 1: 0x2
- stack 0: 0x80
8229	 3A4	MSTORE		 	  ;; # store to x4
- stack 0: 0x958
8230	 3A5	PUSH1	04	 	 
- stack 1: 0x958
- stack 0: 0x4
8231	 3A7	ADD		 	 
- stack 0: 0x95C
8232	 3A8	DUP1		 	  ;; # executing pc
- stack 1: 0x95C
- stack 0: 0x95C
8233	 3A9	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
8234	 3AA	PUSH1	F0	 	 
- stack 2: 0x95C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
- stack 0: 0xF0
8235	 3AC	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x3AE
8236	 3AD	JUMP		 	 
- stack 0: 0x95C
8237	 3AE	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x95C
8238	 3AF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x95C
- stack 0: 0x95C
8239	 3B0	MLOAD		 	 
- stack 1: 0x95C
- stack 0: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
8240	 3B1	PUSH1	E0	 	 
- stack 2: 0x95C
- stack 1: 0x3AE000203C8FFE401B900200168FFFF00E600270100005C01CC000F04630000
- stack 0: 0xE0
8241	 3B3	SHR		 	 
- stack 1: 0x95C
- stack 0: 0x3AE0002
8242	 3B4	PUSH2	FFFF	 	 
- stack 2: 0x95C
- stack 1: 0x3AE0002
- stack 0: 0xFFFF
8243	 3B7	AND		 	 
- stack 1: 0x95C
- stack 0: 0x2
8244	 3B8	PUSH1	01	 	 
- stack 2: 0x95C
- stack 1: 0x2
- stack 0: 0x1
8245	 3BA	SIGNEXTEND		 	 
- stack 1: 0x95C
- stack 0: 0x2
8246	 3BB	PUSH2	00A0	 	 
- stack 2: 0x95C
- stack 1: 0x2
- stack 0: 0xA0
8247	 3BE	MSTORE		 	  ;; # store to x5
- stack 0: 0x95C
8248	 3BF	PUSH1	04	 	 
- stack 1: 0x95C
- stack 0: 0x4
8249	 3C1	ADD		 	 
- stack 0: 0x960
8250	 3C2	DUP1		 	  ;; # executing pc
- stack 1: 0x960
- stack 0: 0x960
8251	 3C3	MLOAD		 	 
- stack 1: 0x960
- stack 0: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
8252	 3C4	PUSH1	F0	 	 
- stack 2: 0x960
- stack 1: 0x3C8FFE401B900200168FFFF00E600270100005C01CC000F0463000001E60000
- stack 0: 0xF0
8253	 3C6	SHR		 	 
- stack 1: 0x960
- stack 0: 0x3C8
8254	 3C7	JUMP		 	 
- stack 0: 0x960
8255	 3C8	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x960
8256	 3C9	PUSH2	0080	 	 
- stack 1: 0x960
- stack 0: 0x80
8257	 3CC	MLOAD		 	  ;; # read from x4
- stack 1: 0x960
- stack 0: 0x2
8258	 3CD	PUSH4	FFFFFFFF	 	 
- stack 2: 0x960
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8259	 3D2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x960
- stack 0: 0x2
8260	 3D3	PUSH2	00A0	 	 
- stack 2: 0x960
- stack 1: 0x2
- stack 0: 0xA0
8261	 3D6	MLOAD		 	  ;; # read from x5
- stack 2: 0x960
- stack 1: 0x2
- stack 0: 0x2
8262	 3D7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x960
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8263	 3DC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x960
- stack 1: 0x2
- stack 0: 0x2
8264	 3DD	SUB		 	 
- stack 1: 0x960
- stack 0: 0x0
8265	 3DE	PUSH2	03E6	 ;; _neq_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 2: 0x960
- stack 1: 0x0
- stack 0: 0x3E6
8266	 3E1	JUMPI		 	 
- stack 0: 0x960
8267	 3E2	PUSH2	0400	 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 1: 0x960
- stack 0: 0x400
8268	 3E5	JUMP		 	 
- stack 0: 0x960
8269	 400	JUMPDEST		 ;; _neq_after_ac91ca888a3a483fb7ba732664b41c6eb3829400e3c041e830d4b822fb7f9964	 
- stack 0: 0x960
8270	 401	PUSH1	04	 	 
- stack 1: 0x960
- stack 0: 0x4
8271	 403	ADD		 	 
- stack 0: 0x964
8272	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x964
- stack 0: 0x964
8273	 405	MLOAD		 	 
- stack 1: 0x964
- stack 0: 0x1B900200168FFFF00E600270100005C01CC000F0463000001E6000000E60028
8274	 406	PUSH1	F0	 	 
- stack 2: 0x964
- stack 1: 0x1B900200168FFFF00E600270100005C01CC000F0463000001E6000000E60028
- stack 0: 0xF0
8275	 408	SHR		 	 
- stack 1: 0x964
- stack 0: 0x1B9
8276	 409	JUMP		 	 
- stack 0: 0x964
8277	 1B9	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x964
8278	 1BA	PUSH4	00020000	 	 
- stack 1: 0x964
- stack 0: 0x20000
8279	 1BF	PUSH2	03A0	 	 
- stack 2: 0x964
- stack 1: 0x20000
- stack 0: 0x3A0
8280	 1C2	MSTORE		 	  ;; # store to x29
- stack 0: 0x964
8281	 1C3	PUSH1	04	 	 
- stack 1: 0x964
- stack 0: 0x4
8282	 1C5	ADD		 	 
- stack 0: 0x968
8283	 1C6	DUP1		 	  ;; # executing pc
- stack 1: 0x968
- stack 0: 0x968
8284	 1C7	MLOAD		 	 
- stack 1: 0x968
- stack 0: 0x168FFFF00E600270100005C01CC000F0463000001E6000000E6002802F40048
8285	 1C8	PUSH1	F0	 	 
- stack 2: 0x968
- stack 1: 0x168FFFF00E600270100005C01CC000F0463000001E6000000E6002802F40048
- stack 0: 0xF0
8286	 1CA	SHR		 	 
- stack 1: 0x968
- stack 0: 0x168
8287	 1CB	JUMP		 	 
- stack 0: 0x968
8288	 168	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x968
8289	 169	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x968
- stack 0: 0x968
8290	 16A	MLOAD		 	 
- stack 1: 0x968
- stack 0: 0x168FFFF00E600270100005C01CC000F0463000001E6000000E6002802F40048
8291	 16B	PUSH1	E0	 	 
- stack 2: 0x968
- stack 1: 0x168FFFF00E600270100005C01CC000F0463000001E6000000E6002802F40048
- stack 0: 0xE0
8292	 16D	SHR		 	 
- stack 1: 0x968
- stack 0: 0x168FFFF
8293	 16E	PUSH2	FFFF	 	 
- stack 2: 0x968
- stack 1: 0x168FFFF
- stack 0: 0xFFFF
8294	 171	AND		 	 
- stack 1: 0x968
- stack 0: 0xFFFF
8295	 172	PUSH1	01	 	 
- stack 2: 0x968
- stack 1: 0xFFFF
- stack 0: 0x1
8296	 174	SIGNEXTEND		 	 
- stack 1: 0x968
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8297	 175	PUSH2	03A0	 	 
- stack 2: 0x968
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
8298	 178	MLOAD		 	  ;; # read from x29
- stack 2: 0x968
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
8299	 179	ADD		 	  ;; # ADDI 29
- stack 1: 0x968
- stack 0: 0x1FFFF
8300	 17A	PUSH2	03A0	 	 
- stack 2: 0x968
- stack 1: 0x1FFFF
- stack 0: 0x3A0
8301	 17D	MSTORE		 	  ;; # store to x29
- stack 0: 0x968
8302	 17E	PUSH1	04	 	 
- stack 1: 0x968
- stack 0: 0x4
8303	 180	ADD		 	 
- stack 0: 0x96C
8304	 181	DUP1		 	  ;; # executing pc
- stack 1: 0x96C
- stack 0: 0x96C
8305	 182	MLOAD		 	 
- stack 1: 0x96C
- stack 0: 0xE600270100005C01CC000F0463000001E6000000E6002802F4004801CC0020
8306	 183	PUSH1	F0	 	 
- stack 2: 0x96C
- stack 1: 0xE600270100005C01CC000F0463000001E6000000E6002802F4004801CC0020
- stack 0: 0xF0
8307	 185	SHR		 	 
- stack 1: 0x96C
- stack 0: 0xE6
8308	 186	JUMP		 	 
- stack 0: 0x96C
8309	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x96C
8310	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x96C
- stack 0: 0x96C
8311	 E8	MLOAD		 	 
- stack 1: 0x96C
- stack 0: 0xE600270100005C01CC000F0463000001E6000000E6002802F4004801CC0020
8312	 E9	PUSH1	E0	 	 
- stack 2: 0x96C
- stack 1: 0xE600270100005C01CC000F0463000001E6000000E6002802F4004801CC0020
- stack 0: 0xE0
8313	 EB	SHR		 	 
- stack 1: 0x96C
- stack 0: 0xE60027
8314	 EC	PUSH2	FFFF	 	 
- stack 2: 0x96C
- stack 1: 0xE60027
- stack 0: 0xFFFF
8315	 EF	AND		 	 
- stack 1: 0x96C
- stack 0: 0x27
8316	 F0	PUSH1	01	 	 
- stack 2: 0x96C
- stack 1: 0x27
- stack 0: 0x1
8317	 F2	SIGNEXTEND		 	 
- stack 1: 0x96C
- stack 0: 0x27
8318	 F3	PUSH2	0380	 	 
- stack 2: 0x96C
- stack 1: 0x27
- stack 0: 0x380
8319	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x96C
8320	 F7	PUSH1	04	 	 
- stack 1: 0x96C
- stack 0: 0x4
8321	 F9	ADD		 	 
- stack 0: 0x970
8322	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x970
- stack 0: 0x970
8323	 FB	MLOAD		 	 
- stack 1: 0x970
- stack 0: 0x100005C01CC000F0463000001E6000000E6002802F4004801CC002004810000
8324	 FC	PUSH1	F0	 	 
- stack 2: 0x970
- stack 1: 0x100005C01CC000F0463000001E6000000E6002802F4004801CC002004810000
- stack 0: 0xF0
8325	 FE	SHR		 	 
- stack 1: 0x970
- stack 0: 0x100
8326	 FF	JUMP		 	 
- stack 0: 0x970
8327	 100	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,5a8(ignore imm)
- stack 0: 0x970
8328	 101	PUSH2	0060	 	 
- stack 1: 0x970
- stack 0: 0x60
8329	 104	MLOAD		 	  ;; # read from x3
- stack 1: 0x970
- stack 0: 0x1FFFF
8330	 105	PUSH4	FFFFFFFF	 	 
- stack 2: 0x970
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
8331	 10A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x970
- stack 0: 0x1FFFF
8332	 10B	PUSH2	03A0	 	 
- stack 2: 0x970
- stack 1: 0x1FFFF
- stack 0: 0x3A0
8333	 10E	MLOAD		 	  ;; # read from x29
- stack 2: 0x970
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
8334	 10F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x970
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
8335	 114	AND		 	  ;; # mask to 32 bits
- stack 2: 0x970
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
8336	 115	SUB		 	 
- stack 1: 0x970
- stack 0: 0x0
8337	 116	PUSH2	011E	 ;; _neq_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 2: 0x970
- stack 1: 0x0
- stack 0: 0x11E
8338	 119	JUMPI		 	 
- stack 0: 0x970
8339	 11A	PUSH2	0138	 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 1: 0x970
- stack 0: 0x138
8340	 11D	JUMP		 	 
- stack 0: 0x970
8341	 138	JUMPDEST		 ;; _neq_after_5923e94b8cb6e3e844676e59a9c198c42956ee7d4274d9bbfe754cd766b7c92a	 
- stack 0: 0x970
8342	 139	PUSH1	04	 	 
- stack 1: 0x970
- stack 0: 0x4
8343	 13B	ADD		 	 
- stack 0: 0x974
8344	 13C	DUP1		 	  ;; # executing pc
- stack 1: 0x974
- stack 0: 0x974
8345	 13D	MLOAD		 	 
- stack 1: 0x974
- stack 0: 0x1CC000F0463000001E6000000E6002802F4004801CC00200481000001E60020
8346	 13E	PUSH1	F0	 	 
- stack 2: 0x974
- stack 1: 0x1CC000F0463000001E6000000E6002802F4004801CC00200481000001E60020
- stack 0: 0xF0
8347	 140	SHR		 	 
- stack 1: 0x974
- stack 0: 0x1CC
8348	 141	JUMP		 	 
- stack 0: 0x974
8349	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x974
8350	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x974
- stack 0: 0x974
8351	 1CE	MLOAD		 	 
- stack 1: 0x974
- stack 0: 0x1CC000F0463000001E6000000E6002802F4004801CC00200481000001E60020
8352	 1CF	PUSH1	E0	 	 
- stack 2: 0x974
- stack 1: 0x1CC000F0463000001E6000000E6002802F4004801CC00200481000001E60020
- stack 0: 0xE0
8353	 1D1	SHR		 	 
- stack 1: 0x974
- stack 0: 0x1CC000F
8354	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x974
- stack 1: 0x1CC000F
- stack 0: 0xFFFF
8355	 1D5	AND		 	 
- stack 1: 0x974
- stack 0: 0xF
8356	 1D6	PUSH1	01	 	 
- stack 2: 0x974
- stack 1: 0xF
- stack 0: 0x1
8357	 1D8	SIGNEXTEND		 	 
- stack 1: 0x974
- stack 0: 0xF
8358	 1D9	PUSH2	0020	 	 
- stack 2: 0x974
- stack 1: 0xF
- stack 0: 0x20
8359	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x974
8360	 1DD	PUSH1	04	 	 
- stack 1: 0x974
- stack 0: 0x4
8361	 1DF	ADD		 	 
- stack 0: 0x978
8362	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x978
- stack 0: 0x978
8363	 1E1	MLOAD		 	 
- stack 1: 0x978
- stack 0: 0x463000001E6000000E6002802F4004801CC00200481000001E6002000E60029
8364	 1E2	PUSH1	F0	 	 
- stack 2: 0x978
- stack 1: 0x463000001E6000000E6002802F4004801CC00200481000001E6002000E60029
- stack 0: 0xF0
8365	 1E4	SHR		 	 
- stack 1: 0x978
- stack 0: 0x463
8366	 1E5	JUMP		 	 
- stack 0: 0x978
8367	 463	JUMPDEST		 ;; __riscvimpl_SRL_2_0_1	  ;; # instr: srl sp,zero,ra(ignore imm)
- stack 0: 0x978
8368	 464	PUSH1	00	 	 
- stack 1: 0x978
- stack 0: 0x0
8369	 466	PUSH4	FFFFFFFF	 	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8370	 46B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x978
- stack 0: 0x0
8371	 46C	PUSH2	0020	 	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x20
8372	 46F	MLOAD		 	  ;; # read from x1
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0xF
8373	 470	PUSH1	1F	 	 
- stack 3: 0x978
- stack 2: 0x0
- stack 1: 0xF
- stack 0: 0x1F
8374	 472	AND		 	  ;; # mask to 5 bits
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0xF
8375	 473	SHR		 	 
- stack 1: 0x978
- stack 0: 0x0
8376	 474	PUSH2	0040	 	 
- stack 2: 0x978
- stack 1: 0x0
- stack 0: 0x40
8377	 477	MSTORE		 	  ;; # store to x2
- stack 0: 0x978
8378	 478	PUSH1	04	 	 
- stack 1: 0x978
- stack 0: 0x4
8379	 47A	ADD		 	 
- stack 0: 0x97C
8380	 47B	DUP1		 	  ;; # executing pc
- stack 1: 0x97C
- stack 0: 0x97C
8381	 47C	MLOAD		 	 
- stack 1: 0x97C
- stack 0: 0x1E6000000E6002802F4004801CC00200481000001E6002000E6002902F40034
8382	 47D	PUSH1	F0	 	 
- stack 2: 0x97C
- stack 1: 0x1E6000000E6002802F4004801CC00200481000001E6002000E6002902F40034
- stack 0: 0xF0
8383	 47F	SHR		 	 
- stack 1: 0x97C
- stack 0: 0x1E6
8384	 480	JUMP		 	 
- stack 0: 0x97C
8385	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x97C
8386	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x97C
- stack 0: 0x97C
8387	 1E8	MLOAD		 	 
- stack 1: 0x97C
- stack 0: 0x1E6000000E6002802F4004801CC00200481000001E6002000E6002902F40034
8388	 1E9	PUSH1	E0	 	 
- stack 2: 0x97C
- stack 1: 0x1E6000000E6002802F4004801CC00200481000001E6002000E6002902F40034
- stack 0: 0xE0
8389	 1EB	SHR		 	 
- stack 1: 0x97C
- stack 0: 0x1E60000
8390	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x97C
- stack 1: 0x1E60000
- stack 0: 0xFFFF
8391	 1EF	AND		 	 
- stack 1: 0x97C
- stack 0: 0x0
8392	 1F0	PUSH1	01	 	 
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x1
8393	 1F2	SIGNEXTEND		 	 
- stack 1: 0x97C
- stack 0: 0x0
8394	 1F3	PUSH2	03A0	 	 
- stack 2: 0x97C
- stack 1: 0x0
- stack 0: 0x3A0
8395	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x97C
8396	 1F7	PUSH1	04	 	 
- stack 1: 0x97C
- stack 0: 0x4
8397	 1F9	ADD		 	 
- stack 0: 0x980
8398	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x980
- stack 0: 0x980
8399	 1FB	MLOAD		 	 
- stack 1: 0x980
- stack 0: 0xE6002802F4004801CC00200481000001E6002000E6002902F40034049F0000
8400	 1FC	PUSH1	F0	 	 
- stack 2: 0x980
- stack 1: 0xE6002802F4004801CC00200481000001E6002000E6002902F40034049F0000
- stack 0: 0xF0
8401	 1FE	SHR		 	 
- stack 1: 0x980
- stack 0: 0xE6
8402	 1FF	JUMP		 	 
- stack 0: 0x980
8403	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x980
8404	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x980
- stack 0: 0x980
8405	 E8	MLOAD		 	 
- stack 1: 0x980
- stack 0: 0xE6002802F4004801CC00200481000001E6002000E6002902F40034049F0000
8406	 E9	PUSH1	E0	 	 
- stack 2: 0x980
- stack 1: 0xE6002802F4004801CC00200481000001E6002000E6002902F40034049F0000
- stack 0: 0xE0
8407	 EB	SHR		 	 
- stack 1: 0x980
- stack 0: 0xE60028
8408	 EC	PUSH2	FFFF	 	 
- stack 2: 0x980
- stack 1: 0xE60028
- stack 0: 0xFFFF
8409	 EF	AND		 	 
- stack 1: 0x980
- stack 0: 0x28
8410	 F0	PUSH1	01	 	 
- stack 2: 0x980
- stack 1: 0x28
- stack 0: 0x1
8411	 F2	SIGNEXTEND		 	 
- stack 1: 0x980
- stack 0: 0x28
8412	 F3	PUSH2	0380	 	 
- stack 2: 0x980
- stack 1: 0x28
- stack 0: 0x380
8413	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x980
8414	 F7	PUSH1	04	 	 
- stack 1: 0x980
- stack 0: 0x4
8415	 F9	ADD		 	 
- stack 0: 0x984
8416	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x984
- stack 0: 0x984
8417	 FB	MLOAD		 	 
- stack 1: 0x984
- stack 0: 0x2F4004801CC00200481000001E6002000E6002902F40034049F000001E60000
8418	 FC	PUSH1	F0	 	 
- stack 2: 0x984
- stack 1: 0x2F4004801CC00200481000001E6002000E6002902F40034049F000001E60000
- stack 0: 0xF0
8419	 FE	SHR		 	 
- stack 1: 0x984
- stack 0: 0x2F4
8420	 FF	JUMP		 	 
- stack 0: 0x984
8421	 2F4	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,348(ignore imm)
- stack 0: 0x984
8422	 2F5	PUSH2	0040	 	 
- stack 1: 0x984
- stack 0: 0x40
8423	 2F8	MLOAD		 	  ;; # read from x2
- stack 1: 0x984
- stack 0: 0x0
8424	 2F9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x984
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8425	 2FE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x984
- stack 0: 0x0
8426	 2FF	PUSH2	03A0	 	 
- stack 2: 0x984
- stack 1: 0x0
- stack 0: 0x3A0
8427	 302	MLOAD		 	  ;; # read from x29
- stack 2: 0x984
- stack 1: 0x0
- stack 0: 0x0
8428	 303	PUSH4	FFFFFFFF	 	 
- stack 3: 0x984
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8429	 308	AND		 	  ;; # mask to 32 bits
- stack 2: 0x984
- stack 1: 0x0
- stack 0: 0x0
8430	 309	SUB		 	 
- stack 1: 0x984
- stack 0: 0x0
8431	 30A	PUSH2	0312	 ;; _neq_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 2: 0x984
- stack 1: 0x0
- stack 0: 0x312
8432	 30D	JUMPI		 	 
- stack 0: 0x984
8433	 30E	PUSH2	032C	 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 1: 0x984
- stack 0: 0x32C
8434	 311	JUMP		 	 
- stack 0: 0x984
8435	 32C	JUMPDEST		 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 0: 0x984
8436	 32D	PUSH1	04	 	 
- stack 1: 0x984
- stack 0: 0x4
8437	 32F	ADD		 	 
- stack 0: 0x988
8438	 330	DUP1		 	  ;; # executing pc
- stack 1: 0x988
- stack 0: 0x988
8439	 331	MLOAD		 	 
- stack 1: 0x988
- stack 0: 0x1CC00200481000001E6002000E6002902F40034049F000001E6000000E6002A
8440	 332	PUSH1	F0	 	 
- stack 2: 0x988
- stack 1: 0x1CC00200481000001E6002000E6002902F40034049F000001E6000000E6002A
- stack 0: 0xF0
8441	 334	SHR		 	 
- stack 1: 0x988
- stack 0: 0x1CC
8442	 335	JUMP		 	 
- stack 0: 0x988
8443	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x988
8444	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x988
- stack 0: 0x988
8445	 1CE	MLOAD		 	 
- stack 1: 0x988
- stack 0: 0x1CC00200481000001E6002000E6002902F40034049F000001E6000000E6002A
8446	 1CF	PUSH1	E0	 	 
- stack 2: 0x988
- stack 1: 0x1CC00200481000001E6002000E6002902F40034049F000001E6000000E6002A
- stack 0: 0xE0
8447	 1D1	SHR		 	 
- stack 1: 0x988
- stack 0: 0x1CC0020
8448	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x988
- stack 1: 0x1CC0020
- stack 0: 0xFFFF
8449	 1D5	AND		 	 
- stack 1: 0x988
- stack 0: 0x20
8450	 1D6	PUSH1	01	 	 
- stack 2: 0x988
- stack 1: 0x20
- stack 0: 0x1
8451	 1D8	SIGNEXTEND		 	 
- stack 1: 0x988
- stack 0: 0x20
8452	 1D9	PUSH2	0020	 	 
- stack 2: 0x988
- stack 1: 0x20
- stack 0: 0x20
8453	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x988
8454	 1DD	PUSH1	04	 	 
- stack 1: 0x988
- stack 0: 0x4
8455	 1DF	ADD		 	 
- stack 0: 0x98C
8456	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x98C
- stack 0: 0x98C
8457	 1E1	MLOAD		 	 
- stack 1: 0x98C
- stack 0: 0x481000001E6002000E6002902F40034049F000001E6000000E6002A02920024
8458	 1E2	PUSH1	F0	 	 
- stack 2: 0x98C
- stack 1: 0x481000001E6002000E6002902F40034049F000001E6000000E6002A02920024
- stack 0: 0xF0
8459	 1E4	SHR		 	 
- stack 1: 0x98C
- stack 0: 0x481
8460	 1E5	JUMP		 	 
- stack 0: 0x98C
8461	 481	JUMPDEST		 ;; __riscvimpl_SRL_2_1_0	  ;; # instr: srl sp,ra,zero(ignore imm)
- stack 0: 0x98C
8462	 482	PUSH2	0020	 	 
- stack 1: 0x98C
- stack 0: 0x20
8463	 485	MLOAD		 	  ;; # read from x1
- stack 1: 0x98C
- stack 0: 0x20
8464	 486	PUSH4	FFFFFFFF	 	 
- stack 2: 0x98C
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8465	 48B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x98C
- stack 0: 0x20
8466	 48C	PUSH1	00	 	 
- stack 2: 0x98C
- stack 1: 0x20
- stack 0: 0x0
8467	 48E	PUSH1	1F	 	 
- stack 3: 0x98C
- stack 2: 0x20
- stack 1: 0x0
- stack 0: 0x1F
8468	 490	AND		 	  ;; # mask to 5 bits
- stack 2: 0x98C
- stack 1: 0x20
- stack 0: 0x0
8469	 491	SHR		 	 
- stack 1: 0x98C
- stack 0: 0x20
8470	 492	PUSH2	0040	 	 
- stack 2: 0x98C
- stack 1: 0x20
- stack 0: 0x40
8471	 495	MSTORE		 	  ;; # store to x2
- stack 0: 0x98C
8472	 496	PUSH1	04	 	 
- stack 1: 0x98C
- stack 0: 0x4
8473	 498	ADD		 	 
- stack 0: 0x990
8474	 499	DUP1		 	  ;; # executing pc
- stack 1: 0x990
- stack 0: 0x990
8475	 49A	MLOAD		 	 
- stack 1: 0x990
- stack 0: 0x1E6002000E6002902F40034049F000001E6000000E6002A0292002401CC0400
8476	 49B	PUSH1	F0	 	 
- stack 2: 0x990
- stack 1: 0x1E6002000E6002902F40034049F000001E6000000E6002A0292002401CC0400
- stack 0: 0xF0
8477	 49D	SHR		 	 
- stack 1: 0x990
- stack 0: 0x1E6
8478	 49E	JUMP		 	 
- stack 0: 0x990
8479	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x990
8480	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x990
- stack 0: 0x990
8481	 1E8	MLOAD		 	 
- stack 1: 0x990
- stack 0: 0x1E6002000E6002902F40034049F000001E6000000E6002A0292002401CC0400
8482	 1E9	PUSH1	E0	 	 
- stack 2: 0x990
- stack 1: 0x1E6002000E6002902F40034049F000001E6000000E6002A0292002401CC0400
- stack 0: 0xE0
8483	 1EB	SHR		 	 
- stack 1: 0x990
- stack 0: 0x1E60020
8484	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x990
- stack 1: 0x1E60020
- stack 0: 0xFFFF
8485	 1EF	AND		 	 
- stack 1: 0x990
- stack 0: 0x20
8486	 1F0	PUSH1	01	 	 
- stack 2: 0x990
- stack 1: 0x20
- stack 0: 0x1
8487	 1F2	SIGNEXTEND		 	 
- stack 1: 0x990
- stack 0: 0x20
8488	 1F3	PUSH2	03A0	 	 
- stack 2: 0x990
- stack 1: 0x20
- stack 0: 0x3A0
8489	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x990
8490	 1F7	PUSH1	04	 	 
- stack 1: 0x990
- stack 0: 0x4
8491	 1F9	ADD		 	 
- stack 0: 0x994
8492	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x994
- stack 0: 0x994
8493	 1FB	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0xE6002902F40034049F000001E6000000E6002A0292002401CC040004BB0001
8494	 1FC	PUSH1	F0	 	 
- stack 2: 0x994
- stack 1: 0xE6002902F40034049F000001E6000000E6002A0292002401CC040004BB0001
- stack 0: 0xF0
8495	 1FE	SHR		 	 
- stack 1: 0x994
- stack 0: 0xE6
8496	 1FF	JUMP		 	 
- stack 0: 0x994
8497	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x994
8498	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x994
- stack 0: 0x994
8499	 E8	MLOAD		 	 
- stack 1: 0x994
- stack 0: 0xE6002902F40034049F000001E6000000E6002A0292002401CC040004BB0001
8500	 E9	PUSH1	E0	 	 
- stack 2: 0x994
- stack 1: 0xE6002902F40034049F000001E6000000E6002A0292002401CC040004BB0001
- stack 0: 0xE0
8501	 EB	SHR		 	 
- stack 1: 0x994
- stack 0: 0xE60029
8502	 EC	PUSH2	FFFF	 	 
- stack 2: 0x994
- stack 1: 0xE60029
- stack 0: 0xFFFF
8503	 EF	AND		 	 
- stack 1: 0x994
- stack 0: 0x29
8504	 F0	PUSH1	01	 	 
- stack 2: 0x994
- stack 1: 0x29
- stack 0: 0x1
8505	 F2	SIGNEXTEND		 	 
- stack 1: 0x994
- stack 0: 0x29
8506	 F3	PUSH2	0380	 	 
- stack 2: 0x994
- stack 1: 0x29
- stack 0: 0x380
8507	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x994
8508	 F7	PUSH1	04	 	 
- stack 1: 0x994
- stack 0: 0x4
8509	 F9	ADD		 	 
- stack 0: 0x998
8510	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x998
- stack 0: 0x998
8511	 FB	MLOAD		 	 
- stack 1: 0x998
- stack 0: 0x2F40034049F000001E6000000E6002A0292002401CC040004BB000104CEF800
8512	 FC	PUSH1	F0	 	 
- stack 2: 0x998
- stack 1: 0x2F40034049F000001E6000000E6002A0292002401CC040004BB000104CEF800
- stack 0: 0xF0
8513	 FE	SHR		 	 
- stack 1: 0x998
- stack 0: 0x2F4
8514	 FF	JUMP		 	 
- stack 0: 0x998
8515	 2F4	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,348(ignore imm)
- stack 0: 0x998
8516	 2F5	PUSH2	0040	 	 
- stack 1: 0x998
- stack 0: 0x40
8517	 2F8	MLOAD		 	  ;; # read from x2
- stack 1: 0x998
- stack 0: 0x20
8518	 2F9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x998
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8519	 2FE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x998
- stack 0: 0x20
8520	 2FF	PUSH2	03A0	 	 
- stack 2: 0x998
- stack 1: 0x20
- stack 0: 0x3A0
8521	 302	MLOAD		 	  ;; # read from x29
- stack 2: 0x998
- stack 1: 0x20
- stack 0: 0x20
8522	 303	PUSH4	FFFFFFFF	 	 
- stack 3: 0x998
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
8523	 308	AND		 	  ;; # mask to 32 bits
- stack 2: 0x998
- stack 1: 0x20
- stack 0: 0x20
8524	 309	SUB		 	 
- stack 1: 0x998
- stack 0: 0x0
8525	 30A	PUSH2	0312	 ;; _neq_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 2: 0x998
- stack 1: 0x0
- stack 0: 0x312
8526	 30D	JUMPI		 	 
- stack 0: 0x998
8527	 30E	PUSH2	032C	 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 1: 0x998
- stack 0: 0x32C
8528	 311	JUMP		 	 
- stack 0: 0x998
8529	 32C	JUMPDEST		 ;; _neq_after_67609e3b9a8c723e390966e0c3ee8816f481c4c61c3c521e05280a8b6e0896fb	 
- stack 0: 0x998
8530	 32D	PUSH1	04	 	 
- stack 1: 0x998
- stack 0: 0x4
8531	 32F	ADD		 	 
- stack 0: 0x99C
8532	 330	DUP1		 	  ;; # executing pc
- stack 1: 0x99C
- stack 0: 0x99C
8533	 331	MLOAD		 	 
- stack 1: 0x99C
- stack 0: 0x49F000001E6000000E6002A0292002401CC040004BB000104CEF80004ED0000
8534	 332	PUSH1	F0	 	 
- stack 2: 0x99C
- stack 1: 0x49F000001E6000000E6002A0292002401CC040004BB000104CEF80004ED0000
- stack 0: 0xF0
8535	 334	SHR		 	 
- stack 1: 0x99C
- stack 0: 0x49F
8536	 335	JUMP		 	 
- stack 0: 0x99C
8537	 49F	JUMPDEST		 ;; __riscvimpl_SRL_1_0_0	  ;; # instr: srl ra,zero,zero(ignore imm)
- stack 0: 0x99C
8538	 4A0	PUSH1	00	 	 
- stack 1: 0x99C
- stack 0: 0x0
8539	 4A2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8540	 4A7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x99C
- stack 0: 0x0
8541	 4A8	PUSH1	00	 	 
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0x0
8542	 4AA	PUSH1	1F	 	 
- stack 3: 0x99C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0x1F
8543	 4AC	AND		 	  ;; # mask to 5 bits
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0x0
8544	 4AD	SHR		 	 
- stack 1: 0x99C
- stack 0: 0x0
8545	 4AE	PUSH2	0020	 	 
- stack 2: 0x99C
- stack 1: 0x0
- stack 0: 0x20
8546	 4B1	MSTORE		 	  ;; # store to x1
- stack 0: 0x99C
8547	 4B2	PUSH1	04	 	 
- stack 1: 0x99C
- stack 0: 0x4
8548	 4B4	ADD		 	 
- stack 0: 0x9A0
8549	 4B5	DUP1		 	  ;; # executing pc
- stack 1: 0x9A0
- stack 0: 0x9A0
8550	 4B6	MLOAD		 	 
- stack 1: 0x9A0
- stack 0: 0x1E6000000E6002A0292002401CC040004BB000104CEF80004ED000001E60000
8551	 4B7	PUSH1	F0	 	 
- stack 2: 0x9A0
- stack 1: 0x1E6000000E6002A0292002401CC040004BB000104CEF80004ED000001E60000
- stack 0: 0xF0
8552	 4B9	SHR		 	 
- stack 1: 0x9A0
- stack 0: 0x1E6
8553	 4BA	JUMP		 	 
- stack 0: 0x9A0
8554	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x9A0
8555	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9A0
- stack 0: 0x9A0
8556	 1E8	MLOAD		 	 
- stack 1: 0x9A0
- stack 0: 0x1E6000000E6002A0292002401CC040004BB000104CEF80004ED000001E60000
8557	 1E9	PUSH1	E0	 	 
- stack 2: 0x9A0
- stack 1: 0x1E6000000E6002A0292002401CC040004BB000104CEF80004ED000001E60000
- stack 0: 0xE0
8558	 1EB	SHR		 	 
- stack 1: 0x9A0
- stack 0: 0x1E60000
8559	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x9A0
- stack 1: 0x1E60000
- stack 0: 0xFFFF
8560	 1EF	AND		 	 
- stack 1: 0x9A0
- stack 0: 0x0
8561	 1F0	PUSH1	01	 	 
- stack 2: 0x9A0
- stack 1: 0x0
- stack 0: 0x1
8562	 1F2	SIGNEXTEND		 	 
- stack 1: 0x9A0
- stack 0: 0x0
8563	 1F3	PUSH2	03A0	 	 
- stack 2: 0x9A0
- stack 1: 0x0
- stack 0: 0x3A0
8564	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x9A0
8565	 1F7	PUSH1	04	 	 
- stack 1: 0x9A0
- stack 0: 0x4
8566	 1F9	ADD		 	 
- stack 0: 0x9A4
8567	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x9A4
- stack 0: 0x9A4
8568	 1FB	MLOAD		 	 
- stack 1: 0x9A4
- stack 0: 0xE6002A0292002401CC040004BB000104CEF80004ED000001E6000000E6002B
8569	 1FC	PUSH1	F0	 	 
- stack 2: 0x9A4
- stack 1: 0xE6002A0292002401CC040004BB000104CEF80004ED000001E6000000E6002B
- stack 0: 0xF0
8570	 1FE	SHR		 	 
- stack 1: 0x9A4
- stack 0: 0xE6
8571	 1FF	JUMP		 	 
- stack 0: 0x9A4
8572	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x9A4
8573	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9A4
- stack 0: 0x9A4
8574	 E8	MLOAD		 	 
- stack 1: 0x9A4
- stack 0: 0xE6002A0292002401CC040004BB000104CEF80004ED000001E6000000E6002B
8575	 E9	PUSH1	E0	 	 
- stack 2: 0x9A4
- stack 1: 0xE6002A0292002401CC040004BB000104CEF80004ED000001E6000000E6002B
- stack 0: 0xE0
8576	 EB	SHR		 	 
- stack 1: 0x9A4
- stack 0: 0xE6002A
8577	 EC	PUSH2	FFFF	 	 
- stack 2: 0x9A4
- stack 1: 0xE6002A
- stack 0: 0xFFFF
8578	 EF	AND		 	 
- stack 1: 0x9A4
- stack 0: 0x2A
8579	 F0	PUSH1	01	 	 
- stack 2: 0x9A4
- stack 1: 0x2A
- stack 0: 0x1
8580	 F2	SIGNEXTEND		 	 
- stack 1: 0x9A4
- stack 0: 0x2A
8581	 F3	PUSH2	0380	 	 
- stack 2: 0x9A4
- stack 1: 0x2A
- stack 0: 0x380
8582	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x9A4
8583	 F7	PUSH1	04	 	 
- stack 1: 0x9A4
- stack 0: 0x4
8584	 F9	ADD		 	 
- stack 0: 0x9A8
8585	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x9A8
- stack 0: 0x9A8
8586	 FB	MLOAD		 	 
- stack 1: 0x9A8
- stack 0: 0x292002401CC040004BB000104CEF80004ED000001E6000000E6002B050A0008
8587	 FC	PUSH1	F0	 	 
- stack 2: 0x9A8
- stack 1: 0x292002401CC040004BB000104CEF80004ED000001E6000000E6002B050A0008
- stack 0: 0xF0
8588	 FE	SHR		 	 
- stack 1: 0x9A8
- stack 0: 0x292
8589	 FF	JUMP		 	 
- stack 0: 0x9A8
8590	 292	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,364(ignore imm)
- stack 0: 0x9A8
8591	 293	PUSH2	0020	 	 
- stack 1: 0x9A8
- stack 0: 0x20
8592	 296	MLOAD		 	  ;; # read from x1
- stack 1: 0x9A8
- stack 0: 0x0
8593	 297	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8594	 29C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9A8
- stack 0: 0x0
8595	 29D	PUSH2	03A0	 	 
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x3A0
8596	 2A0	MLOAD		 	  ;; # read from x29
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x0
8597	 2A1	PUSH4	FFFFFFFF	 	 
- stack 3: 0x9A8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8598	 2A6	AND		 	  ;; # mask to 32 bits
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x0
8599	 2A7	SUB		 	 
- stack 1: 0x9A8
- stack 0: 0x0
8600	 2A8	PUSH2	02B0	 ;; _neq_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 2: 0x9A8
- stack 1: 0x0
- stack 0: 0x2B0
8601	 2AB	JUMPI		 	 
- stack 0: 0x9A8
8602	 2AC	PUSH2	02CA	 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 1: 0x9A8
- stack 0: 0x2CA
8603	 2AF	JUMP		 	 
- stack 0: 0x9A8
8604	 2CA	JUMPDEST		 ;; _neq_after_f16248d4fe84ae930f913540e5cce070c7aac3010b044a9a5bea848faa5454df	 
- stack 0: 0x9A8
8605	 2CB	PUSH1	04	 	 
- stack 1: 0x9A8
- stack 0: 0x4
8606	 2CD	ADD		 	 
- stack 0: 0x9AC
8607	 2CE	DUP1		 	  ;; # executing pc
- stack 1: 0x9AC
- stack 0: 0x9AC
8608	 2CF	MLOAD		 	 
- stack 1: 0x9AC
- stack 0: 0x1CC040004BB000104CEF80004ED000001E6000000E6002B050A0008054A0018
8609	 2D0	PUSH1	F0	 	 
- stack 2: 0x9AC
- stack 1: 0x1CC040004BB000104CEF80004ED000001E6000000E6002B050A0008054A0018
- stack 0: 0xF0
8610	 2D2	SHR		 	 
- stack 1: 0x9AC
- stack 0: 0x1CC
8611	 2D3	JUMP		 	 
- stack 0: 0x9AC
8612	 1CC	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x9AC
8613	 1CD	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9AC
- stack 0: 0x9AC
8614	 1CE	MLOAD		 	 
- stack 1: 0x9AC
- stack 0: 0x1CC040004BB000104CEF80004ED000001E6000000E6002B050A0008054A0018
8615	 1CF	PUSH1	E0	 	 
- stack 2: 0x9AC
- stack 1: 0x1CC040004BB000104CEF80004ED000001E6000000E6002B050A0008054A0018
- stack 0: 0xE0
8616	 1D1	SHR		 	 
- stack 1: 0x9AC
- stack 0: 0x1CC0400
8617	 1D2	PUSH2	FFFF	 	 
- stack 2: 0x9AC
- stack 1: 0x1CC0400
- stack 0: 0xFFFF
8618	 1D5	AND		 	 
- stack 1: 0x9AC
- stack 0: 0x400
8619	 1D6	PUSH1	01	 	 
- stack 2: 0x9AC
- stack 1: 0x400
- stack 0: 0x1
8620	 1D8	SIGNEXTEND		 	 
- stack 1: 0x9AC
- stack 0: 0x400
8621	 1D9	PUSH2	0020	 	 
- stack 2: 0x9AC
- stack 1: 0x400
- stack 0: 0x20
8622	 1DC	MSTORE		 	  ;; # store to x1
- stack 0: 0x9AC
8623	 1DD	PUSH1	04	 	 
- stack 1: 0x9AC
- stack 0: 0x4
8624	 1DF	ADD		 	 
- stack 0: 0x9B0
8625	 1E0	DUP1		 	  ;; # executing pc
- stack 1: 0x9B0
- stack 0: 0x9B0
8626	 1E1	MLOAD		 	 
- stack 1: 0x9B0
- stack 0: 0x4BB000104CEF80004ED000001E6000000E6002B050A0008054A001800210001
8627	 1E2	PUSH1	F0	 	 
- stack 2: 0x9B0
- stack 1: 0x4BB000104CEF80004ED000001E6000000E6002B050A0008054A001800210001
- stack 0: 0xF0
8628	 1E4	SHR		 	 
- stack 1: 0x9B0
- stack 0: 0x4BB
8629	 1E5	JUMP		 	 
- stack 0: 0x9B0
8630	 4BB	JUMPDEST		 ;; __riscvimpl_LUI_1137	  ;; # instr: lui sp,0x1(ignore imm)
- stack 0: 0x9B0
8631	 4BC	PUSH4	00001000	 	 
- stack 1: 0x9B0
- stack 0: 0x1000
8632	 4C1	PUSH2	0040	 	 
- stack 2: 0x9B0
- stack 1: 0x1000
- stack 0: 0x40
8633	 4C4	MSTORE		 	  ;; # store to x2
- stack 0: 0x9B0
8634	 4C5	PUSH1	04	 	 
- stack 1: 0x9B0
- stack 0: 0x4
8635	 4C7	ADD		 	 
- stack 0: 0x9B4
8636	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x9B4
- stack 0: 0x9B4
8637	 4C9	MLOAD		 	 
- stack 1: 0x9B4
- stack 0: 0x4CEF80004ED000001E6000000E6002B050A0008054A0018002100010034FA08
8638	 4CA	PUSH1	F0	 	 
- stack 2: 0x9B4
- stack 1: 0x4CEF80004ED000001E6000000E6002B050A0008054A0018002100010034FA08
- stack 0: 0xF0
8639	 4CC	SHR		 	 
- stack 1: 0x9B4
- stack 0: 0x4CE
8640	 4CD	JUMP		 	 
- stack 0: 0x9B4
8641	 4CE	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-2048(ignore imm)
- stack 0: 0x9B4
8642	 4CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9B4
- stack 0: 0x9B4
8643	 4D0	MLOAD		 	 
- stack 1: 0x9B4
- stack 0: 0x4CEF80004ED000001E6000000E6002B050A0008054A0018002100010034FA08
8644	 4D1	PUSH1	E0	 	 
- stack 2: 0x9B4
- stack 1: 0x4CEF80004ED000001E6000000E6002B050A0008054A0018002100010034FA08
- stack 0: 0xE0
8645	 4D3	SHR		 	 
- stack 1: 0x9B4
- stack 0: 0x4CEF800
8646	 4D4	PUSH2	FFFF	 	 
- stack 2: 0x9B4
- stack 1: 0x4CEF800
- stack 0: 0xFFFF
8647	 4D7	AND		 	 
- stack 1: 0x9B4
- stack 0: 0xF800
8648	 4D8	PUSH1	01	 	 
- stack 2: 0x9B4
- stack 1: 0xF800
- stack 0: 0x1
8649	 4DA	SIGNEXTEND		 	 
- stack 1: 0x9B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
8650	 4DB	PUSH2	0040	 	 
- stack 2: 0x9B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x40
8651	 4DE	MLOAD		 	  ;; # read from x2
- stack 2: 0x9B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF800
- stack 0: 0x1000
8652	 4DF	ADD		 	  ;; # ADDI 2
- stack 1: 0x9B4
- stack 0: 0x800
8653	 4E0	PUSH2	0040	 	 
- stack 2: 0x9B4
- stack 1: 0x800
- stack 0: 0x40
8654	 4E3	MSTORE		 	  ;; # store to x2
- stack 0: 0x9B4
8655	 4E4	PUSH1	04	 	 
- stack 1: 0x9B4
- stack 0: 0x4
8656	 4E6	ADD		 	 
- stack 0: 0x9B8
8657	 4E7	DUP1		 	  ;; # executing pc
- stack 1: 0x9B8
- stack 0: 0x9B8
8658	 4E8	MLOAD		 	 
- stack 1: 0x9B8
- stack 0: 0x4ED000001E6000000E6002B050A0008054A0018002100010034FA0800530042
8659	 4E9	PUSH1	F0	 	 
- stack 2: 0x9B8
- stack 1: 0x4ED000001E6000000E6002B050A0008054A0018002100010034FA0800530042
- stack 0: 0xF0
8660	 4EB	SHR		 	 
- stack 1: 0x9B8
- stack 0: 0x4ED
8661	 4EC	JUMP		 	 
- stack 0: 0x9B8
8662	 4ED	JUMPDEST		 ;; __riscvimpl_SRL_0_1_2	  ;; # instr: srl zero,ra,sp(ignore imm)
- stack 0: 0x9B8
8663	 4EE	PUSH2	0020	 	 
- stack 1: 0x9B8
- stack 0: 0x20
8664	 4F1	MLOAD		 	  ;; # read from x1
- stack 1: 0x9B8
- stack 0: 0x400
8665	 4F2	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9B8
- stack 1: 0x400
- stack 0: 0xFFFFFFFF
8666	 4F7	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9B8
- stack 0: 0x400
8667	 4F8	PUSH2	0040	 	 
- stack 2: 0x9B8
- stack 1: 0x400
- stack 0: 0x40
8668	 4FB	MLOAD		 	  ;; # read from x2
- stack 2: 0x9B8
- stack 1: 0x400
- stack 0: 0x800
8669	 4FC	PUSH1	1F	 	 
- stack 3: 0x9B8
- stack 2: 0x400
- stack 1: 0x800
- stack 0: 0x1F
8670	 4FE	AND		 	  ;; # mask to 5 bits
- stack 2: 0x9B8
- stack 1: 0x400
- stack 0: 0x0
8671	 4FF	SHR		 	 
- stack 1: 0x9B8
- stack 0: 0x400
8672	 500	POP		 	 
- stack 0: 0x9B8
8673	 501	PUSH1	04	 	 
- stack 1: 0x9B8
- stack 0: 0x4
8674	 503	ADD		 	 
- stack 0: 0x9BC
8675	 504	DUP1		 	  ;; # executing pc
- stack 1: 0x9BC
- stack 0: 0x9BC
8676	 505	MLOAD		 	 
- stack 1: 0x9BC
- stack 0: 0x1E6000000E6002B050A0008054A0018002100010034FA080053004200660000
8677	 506	PUSH1	F0	 	 
- stack 2: 0x9BC
- stack 1: 0x1E6000000E6002B050A0008054A0018002100010034FA080053004200660000
- stack 0: 0xF0
8678	 508	SHR		 	 
- stack 1: 0x9BC
- stack 0: 0x1E6
8679	 509	JUMP		 	 
- stack 0: 0x9BC
8680	 1E6	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x9BC
8681	 1E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9BC
- stack 0: 0x9BC
8682	 1E8	MLOAD		 	 
- stack 1: 0x9BC
- stack 0: 0x1E6000000E6002B050A0008054A0018002100010034FA080053004200660000
8683	 1E9	PUSH1	E0	 	 
- stack 2: 0x9BC
- stack 1: 0x1E6000000E6002B050A0008054A0018002100010034FA080053004200660000
- stack 0: 0xE0
8684	 1EB	SHR		 	 
- stack 1: 0x9BC
- stack 0: 0x1E60000
8685	 1EC	PUSH2	FFFF	 	 
- stack 2: 0x9BC
- stack 1: 0x1E60000
- stack 0: 0xFFFF
8686	 1EF	AND		 	 
- stack 1: 0x9BC
- stack 0: 0x0
8687	 1F0	PUSH1	01	 	 
- stack 2: 0x9BC
- stack 1: 0x0
- stack 0: 0x1
8688	 1F2	SIGNEXTEND		 	 
- stack 1: 0x9BC
- stack 0: 0x0
8689	 1F3	PUSH2	03A0	 	 
- stack 2: 0x9BC
- stack 1: 0x0
- stack 0: 0x3A0
8690	 1F6	MSTORE		 	  ;; # store to x29
- stack 0: 0x9BC
8691	 1F7	PUSH1	04	 	 
- stack 1: 0x9BC
- stack 0: 0x4
8692	 1F9	ADD		 	 
- stack 0: 0x9C0
8693	 1FA	DUP1		 	  ;; # executing pc
- stack 1: 0x9C0
- stack 0: 0x9C0
8694	 1FB	MLOAD		 	 
- stack 1: 0x9C0
- stack 0: 0xE6002B050A0008054A0018002100010034FA080053004200660000058A0001
8695	 1FC	PUSH1	F0	 	 
- stack 2: 0x9C0
- stack 1: 0xE6002B050A0008054A0018002100010034FA080053004200660000058A0001
- stack 0: 0xF0
8696	 1FE	SHR		 	 
- stack 1: 0x9C0
- stack 0: 0xE6
8697	 1FF	JUMP		 	 
- stack 0: 0x9C0
8698	 E6	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x9C0
8699	 E7	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9C0
- stack 0: 0x9C0
8700	 E8	MLOAD		 	 
- stack 1: 0x9C0
- stack 0: 0xE6002B050A0008054A0018002100010034FA080053004200660000058A0001
8701	 E9	PUSH1	E0	 	 
- stack 2: 0x9C0
- stack 1: 0xE6002B050A0008054A0018002100010034FA080053004200660000058A0001
- stack 0: 0xE0
8702	 EB	SHR		 	 
- stack 1: 0x9C0
- stack 0: 0xE6002B
8703	 EC	PUSH2	FFFF	 	 
- stack 2: 0x9C0
- stack 1: 0xE6002B
- stack 0: 0xFFFF
8704	 EF	AND		 	 
- stack 1: 0x9C0
- stack 0: 0x2B
8705	 F0	PUSH1	01	 	 
- stack 2: 0x9C0
- stack 1: 0x2B
- stack 0: 0x1
8706	 F2	SIGNEXTEND		 	 
- stack 1: 0x9C0
- stack 0: 0x2B
8707	 F3	PUSH2	0380	 	 
- stack 2: 0x9C0
- stack 1: 0x2B
- stack 0: 0x380
8708	 F6	MSTORE		 	  ;; # store to x28
- stack 0: 0x9C0
8709	 F7	PUSH1	04	 	 
- stack 1: 0x9C0
- stack 0: 0x4
8710	 F9	ADD		 	 
- stack 0: 0x9C4
8711	 FA	DUP1		 	  ;; # executing pc
- stack 1: 0x9C4
- stack 0: 0x9C4
8712	 FB	MLOAD		 	 
- stack 1: 0x9C4
- stack 0: 0x50A0008054A0018002100010034FA080053004200660000058A000100210001
8713	 FC	PUSH1	F0	 	 
- stack 2: 0x9C4
- stack 1: 0x50A0008054A0018002100010034FA080053004200660000058A000100210001
- stack 0: 0xF0
8714	 FE	SHR		 	 
- stack 1: 0x9C4
- stack 0: 0x50A
8715	 FF	JUMP		 	 
- stack 0: 0x9C4
8716	 50A	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x9C4
8717	 50B	PUSH1	00	 	 
- stack 1: 0x9C4
- stack 0: 0x0
8718	 50D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9C4
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8719	 512	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9C4
- stack 0: 0x0
8720	 513	PUSH2	03A0	 	 
- stack 2: 0x9C4
- stack 1: 0x0
- stack 0: 0x3A0
8721	 516	MLOAD		 	  ;; # read from x29
- stack 2: 0x9C4
- stack 1: 0x0
- stack 0: 0x0
8722	 517	PUSH4	FFFFFFFF	 	 
- stack 3: 0x9C4
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8723	 51C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x9C4
- stack 1: 0x0
- stack 0: 0x0
8724	 51D	SUB		 	 
- stack 1: 0x9C4
- stack 0: 0x0
8725	 51E	PUSH2	0526	 ;; _neq_2573881caf337e0161e8ba92797f0f2e891073c89a9debe4f15c65cd2c406cc3	 
- stack 2: 0x9C4
- stack 1: 0x0
- stack 0: 0x526
8726	 521	JUMPI		 	 
- stack 0: 0x9C4
8727	 522	PUSH2	0540	 ;; _neq_after_2573881caf337e0161e8ba92797f0f2e891073c89a9debe4f15c65cd2c406cc3	 
- stack 1: 0x9C4
- stack 0: 0x540
8728	 525	JUMP		 	 
- stack 0: 0x9C4
8729	 540	JUMPDEST		 ;; _neq_after_2573881caf337e0161e8ba92797f0f2e891073c89a9debe4f15c65cd2c406cc3	 
- stack 0: 0x9C4
8730	 541	PUSH1	04	 	 
- stack 1: 0x9C4
- stack 0: 0x4
8731	 543	ADD		 	 
- stack 0: 0x9C8
8732	 544	DUP1		 	  ;; # executing pc
- stack 1: 0x9C8
- stack 0: 0x9C8
8733	 545	MLOAD		 	 
- stack 1: 0x9C8
- stack 0: 0x54A0018002100010034FA080053004200660000058A0001002100010034FA0C
8734	 546	PUSH1	F0	 	 
- stack 2: 0x9C8
- stack 1: 0x54A0018002100010034FA080053004200660000058A0001002100010034FA0C
- stack 0: 0xF0
8735	 548	SHR		 	 
- stack 1: 0x9C8
- stack 0: 0x54A
8736	 549	JUMP		 	 
- stack 0: 0x9C8
8737	 54A	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x9C8
8738	 54B	PUSH1	00	 	 
- stack 1: 0x9C8
- stack 0: 0x0
8739	 54D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x9C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8740	 552	AND		 	  ;; # mask to 32 bits
- stack 1: 0x9C8
- stack 0: 0x0
8741	 553	PUSH2	0380	 	 
- stack 2: 0x9C8
- stack 1: 0x0
- stack 0: 0x380
8742	 556	MLOAD		 	  ;; # read from x28
- stack 2: 0x9C8
- stack 1: 0x0
- stack 0: 0x2B
8743	 557	PUSH4	FFFFFFFF	 	 
- stack 3: 0x9C8
- stack 2: 0x0
- stack 1: 0x2B
- stack 0: 0xFFFFFFFF
8744	 55C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x9C8
- stack 1: 0x0
- stack 0: 0x2B
8745	 55D	SUB		 	 
- stack 1: 0x9C8
- stack 0: 0x2B
8746	 55E	PUSH2	0566	 ;; _neq_88234a4c2480aab83dee2565c0b45cc7c339449d350b387dd4194db3cd8dd908	 
- stack 2: 0x9C8
- stack 1: 0x2B
- stack 0: 0x566
8747	 561	JUMPI		 	 
- stack 0: 0x9C8
8748	 566	JUMPDEST		 ;; _neq_88234a4c2480aab83dee2565c0b45cc7c339449d350b387dd4194db3cd8dd908	 
- stack 0: 0x9C8
8749	 567	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9C8
- stack 0: 0x9C8
8750	 568	MLOAD		 	 
- stack 1: 0x9C8
- stack 0: 0x54A0018002100010034FA080053004200660000058A0001002100010034FA0C
8751	 569	PUSH1	E0	 	 
- stack 2: 0x9C8
- stack 1: 0x54A0018002100010034FA080053004200660000058A0001002100010034FA0C
- stack 0: 0xE0
8752	 56B	SHR		 	 
- stack 1: 0x9C8
- stack 0: 0x54A0018
8753	 56C	PUSH2	FFFF	 	 
- stack 2: 0x9C8
- stack 1: 0x54A0018
- stack 0: 0xFFFF
8754	 56F	AND		 	 
- stack 1: 0x9C8
- stack 0: 0x18
8755	 570	PUSH1	01	 	 
- stack 2: 0x9C8
- stack 1: 0x18
- stack 0: 0x1
8756	 572	SIGNEXTEND		 	 
- stack 1: 0x9C8
- stack 0: 0x18
8757	 573	ADD		 	 
- stack 0: 0x9E0
8758	 574	PUSH4	FFFFFFFF	 	 
- stack 1: 0x9E0
- stack 0: 0xFFFFFFFF
8759	 579	AND		 	  ;; # mask to 32 bits
- stack 0: 0x9E0
8760	 57A	DUP1		 	  ;; # executing pc
- stack 1: 0x9E0
- stack 0: 0x9E0
8761	 57B	MLOAD		 	 
- stack 1: 0x9E0
- stack 0: 0x2100010034FA0C005300420066000005950000006600000000000000000000
8762	 57C	PUSH1	F0	 	 
- stack 2: 0x9E0
- stack 1: 0x2100010034FA0C005300420066000005950000006600000000000000000000
- stack 0: 0xF0
8763	 57E	SHR		 	 
- stack 1: 0x9E0
- stack 0: 0x21
8764	 57F	JUMP		 	 
- stack 0: 0x9E0
8765	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x9E0
8766	 22	PUSH4	00001000	 	 
- stack 1: 0x9E0
- stack 0: 0x1000
8767	 27	PUSH2	0160	 	 
- stack 2: 0x9E0
- stack 1: 0x1000
- stack 0: 0x160
8768	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x9E0
8769	 2B	PUSH1	04	 	 
- stack 1: 0x9E0
- stack 0: 0x4
8770	 2D	ADD		 	 
- stack 0: 0x9E4
8771	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x9E4
- stack 0: 0x9E4
8772	 2F	MLOAD		 	 
- stack 1: 0x9E4
- stack 0: 0x34FA0C0053004200660000059500000066000000000000000000006574796D
8773	 30	PUSH1	F0	 	 
- stack 2: 0x9E4
- stack 1: 0x34FA0C0053004200660000059500000066000000000000000000006574796D
- stack 0: 0xF0
8774	 32	SHR		 	 
- stack 1: 0x9E4
- stack 0: 0x34
8775	 33	JUMP		 	 
- stack 0: 0x9E4
8776	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1536(ignore imm)
- stack 0: 0x9E4
8777	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x9E4
- stack 0: 0x9E4
8778	 36	MLOAD		 	 
- stack 1: 0x9E4
- stack 0: 0x34FA0C0053004200660000059500000066000000000000000000006574796D
8779	 37	PUSH1	E0	 	 
- stack 2: 0x9E4
- stack 1: 0x34FA0C0053004200660000059500000066000000000000000000006574796D
- stack 0: 0xE0
8780	 39	SHR		 	 
- stack 1: 0x9E4
- stack 0: 0x34FA0C
8781	 3A	PUSH2	FFFF	 	 
- stack 2: 0x9E4
- stack 1: 0x34FA0C
- stack 0: 0xFFFF
8782	 3D	AND		 	 
- stack 1: 0x9E4
- stack 0: 0xFA0C
8783	 3E	PUSH1	01	 	 
- stack 2: 0x9E4
- stack 1: 0xFA0C
- stack 0: 0x1
8784	 40	SIGNEXTEND		 	 
- stack 1: 0x9E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0C
8785	 41	PUSH2	0160	 	 
- stack 2: 0x9E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0C
- stack 0: 0x160
8786	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x9E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0C
- stack 0: 0x1000
8787	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x9E4
- stack 0: 0xA0C
8788	 46	PUSH2	0160	 	 
- stack 2: 0x9E4
- stack 1: 0xA0C
- stack 0: 0x160
8789	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x9E4
8790	 4A	PUSH1	04	 	 
- stack 1: 0x9E4
- stack 0: 0x4
8791	 4C	ADD		 	 
- stack 0: 0x9E8
8792	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x9E8
- stack 0: 0x9E8
8793	 4E	MLOAD		 	 
- stack 1: 0x9E8
- stack 0: 0x53004200660000059500000066000000000000000000006574796D00007473
8794	 4F	PUSH1	F0	 	 
- stack 2: 0x9E8
- stack 1: 0x53004200660000059500000066000000000000000000006574796D00007473
- stack 0: 0xF0
8795	 51	SHR		 	 
- stack 1: 0x9E8
- stack 0: 0x53
8796	 52	JUMP		 	 
- stack 0: 0x9E8
8797	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x9E8
8798	 54	PUSH4	00042000	 	 
- stack 1: 0x9E8
- stack 0: 0x42000
8799	 59	PUSH2	0140	 	 
- stack 2: 0x9E8
- stack 1: 0x42000
- stack 0: 0x140
8800	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x9E8
8801	 5D	PUSH1	04	 	 
- stack 1: 0x9E8
- stack 0: 0x4
8802	 5F	ADD		 	 
- stack 0: 0x9EC
8803	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x9EC
- stack 0: 0x9EC
8804	 61	MLOAD		 	 
- stack 1: 0x9EC
- stack 0: 0x660000059500000066000000000000000000006574796D0000747300525245
8805	 62	PUSH1	F0	 	 
- stack 2: 0x9EC
- stack 1: 0x660000059500000066000000000000000000006574796D0000747300525245
- stack 0: 0xF0
8806	 64	SHR		 	 
- stack 1: 0x9EC
- stack 0: 0x66
8807	 65	JUMP		 	 
- stack 0: 0x9EC
8808	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x9EC
8809	 67	PUSH2	0140	 	 
- stack 1: 0x9EC
- stack 0: 0x140
8810	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x9EC
- stack 0: 0x42000
8811	 6B	PUSH2	0075	 ;; _ecall_5d311210ec258714f9a35b531bf680aff1e66ce4f67adb17a0eecf36366ffc06	 
- stack 2: 0x9EC
- stack 1: 0x42000
- stack 0: 0x75
8812	 6E	JUMPI		 	 
- stack 0: 0x9EC
8813	 75	JUMPDEST		 ;; _ecall_5d311210ec258714f9a35b531bf680aff1e66ce4f67adb17a0eecf36366ffc06	 
- stack 0: 0x9EC
8814	 76	PUSH1	04	 	 
- stack 1: 0x9EC
- stack 0: 0x4
8815	 78	PUSH2	0160	 	 
- stack 2: 0x9EC
- stack 1: 0x4
- stack 0: 0x160
8816	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x9EC
- stack 1: 0x4
- stack 0: 0xA0C
8817	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x9EC
8818	 7D	PUSH1	04	 	 
- stack 1: 0x9EC
- stack 0: 0x4
8819	 7F	ADD		 	 
- stack 0: 0x9F0
8820	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x9F0
- stack 0: 0x9F0
8821	 81	MLOAD		 	 
- stack 1: 0x9F0
- stack 0: 0x59500000066000000000000000000006574796D000074730052524500004B4F
8822	 82	PUSH1	F0	 	 
- stack 2: 0x9F0
- stack 1: 0x59500000066000000000000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8823	 84	SHR		 	 
- stack 1: 0x9F0
- stack 0: 0x595
8824	 85	JUMP		 	 
- stack 0: 0x9F0
8825	 595	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x9F0
8826	 596	PUSH4	00000000	 	 
- stack 1: 0x9F0
- stack 0: 0x0
8827	 59B	PUSH2	0140	 	 
- stack 2: 0x9F0
- stack 1: 0x0
- stack 0: 0x140
8828	 59E	MSTORE		 	  ;; # store to x10
- stack 0: 0x9F0
8829	 59F	PUSH1	04	 	 
- stack 1: 0x9F0
- stack 0: 0x4
8830	 5A1	ADD		 	 
- stack 0: 0x9F4
8831	 5A2	DUP1		 	  ;; # executing pc
- stack 1: 0x9F4
- stack 0: 0x9F4
8832	 5A3	MLOAD		 	 
- stack 1: 0x9F4
- stack 0: 0x66000000000000000000006574796D000074730052524500004B4F00000000
8833	 5A4	PUSH1	F0	 	 
- stack 2: 0x9F4
- stack 1: 0x66000000000000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
8834	 5A6	SHR		 	 
- stack 1: 0x9F4
- stack 0: 0x66
8835	 5A7	JUMP		 	 
- stack 0: 0x9F4
8836	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x9F4
8837	 67	PUSH2	0140	 	 
- stack 1: 0x9F4
- stack 0: 0x140
8838	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x9F4
- stack 0: 0x0
8839	 6B	PUSH2	0075	 ;; _ecall_5d311210ec258714f9a35b531bf680aff1e66ce4f67adb17a0eecf36366ffc06	 
- stack 2: 0x9F4
- stack 1: 0x0
- stack 0: 0x75
8840	 6E	JUMPI		 	 
- stack 0: 0x9F4
8841	 6F	PUSH1	20	 	 
- stack 1: 0x9F4
- stack 0: 0x20
8842	 71	PUSH2	0160	 	 
- stack 2: 0x9F4
- stack 1: 0x20
- stack 0: 0x160
8843	 74	RETURN		 	 
Final bytecode length; 3001
Returned: 0000000000000000000000000000000000000000000000000000000000000a0c
gasUsed : 30409
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454,458
** HOT: 45c - range: 45c,460,464,468,46c,470,474
** HOT: 478 - range: 478,47c,480,484,488,48c,490,494
** HOT: 498 - range: 498,49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4,4c8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc,500
** HOT: 504 - range: 504,508,50c,510,514,518
** HOT: 51c - range: 51c,520,524,528,52c,530,534,538
** HOT: 53c - range: 53c,540,544,548,54c,550,554,558
** HOT: 55c - range: 55c,560,564,568,56c,570,574,578
** HOT: 57c - range: 57c,580,584,588,58c,590,594,598
** HOT: 59c - range: 59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8,5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c,610,614
** HOT: 618 - range: 618,61c,620,624,628,62c,630,634
** HOT: 638 - range: 638,63c,640,644,648,64c,650
** HOT: 654 - range: 654,658,65c,660,664,668
** HOT: 66c - range: 66c,670,674,678,67c,680,684
** HOT: 688 - range: 688,68c,690,694,698
** HOT: 69c - range: 69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8
** HOT: 6a0 - range: 6a0,6a4,6a8,6ac,6b0,6b4,6b8
** HOT: 6bc - range: 6bc,6c0,6c4
** HOT: 6c8 - range: 6c8,6cc,6d0,6d4,6d8,6dc,6e0,6e4,6e8
** HOT: 6cc - range: 6cc,6d0,6d4,6d8,6dc,6e0,6e4,6e8
** HOT: 6ec - range: 6ec,6f0,6f4,6f8
** HOT: 6fc - range: 6fc,700,704,708,70c,710,714,718,71c,720
** HOT: 700 - range: 700,704,708,70c,710,714,718,71c,720
** HOT: 724 - range: 724,728,72c,730
** HOT: 734 - range: 734,738,73c,740,744,748,74c
** HOT: 738 - range: 738,73c,740,744,748,74c
** HOT: 750 - range: 750,754,758
** HOT: 75c - range: 75c,760,764,768,76c,770,774,778
** HOT: 760 - range: 760,764,768,76c,770,774,778
** HOT: 77c - range: 77c,780,784,788
** HOT: 78c - range: 78c,790,794,798,79c,7a0,7a4,7a8,7ac
** HOT: 790 - range: 790,794,798,79c,7a0,7a4,7a8,7ac
** HOT: 7b0 - range: 7b0,7b4,7b8,7bc
** HOT: 7c0 - range: 7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc
** HOT: 7c4 - range: 7c4,7c8,7cc,7d0,7d4,7d8,7dc
** HOT: 7e0 - range: 7e0,7e4,7e8
** HOT: 7ec - range: 7ec,7f0,7f4,7f8,7fc,800,804,808,80c
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800,804,808,80c
** HOT: 810 - range: 810,814,818,81c
** HOT: 820 - range: 820,824,828,82c,830,834,838,83c,840
** HOT: 824 - range: 824,828,82c,830,834,838,83c,840
** HOT: 844 - range: 844,848,84c,850
** HOT: 854 - range: 854,858,85c,860,864,868,86c
** HOT: 858 - range: 858,85c,860,864,868,86c
** HOT: 870 - range: 870,874,878
** HOT: 87c - range: 87c,880,884,888,88c,890,894,898
** HOT: 880 - range: 880,884,888,88c,890,894,898
** HOT: 89c - range: 89c,8a0,8a4,8a8
** HOT: 8ac - range: 8ac,8b0,8b4,8b8,8bc,8c0,8c4,8c8,8cc
** HOT: 8b0 - range: 8b0,8b4,8b8,8bc,8c0,8c4,8c8,8cc
** HOT: 8d0 - range: 8d0,8d4,8d8,8dc
** HOT: 8e0 - range: 8e0,8e4,8e8,8ec,8f0,8f4,8f8,8fc
** HOT: 8e4 - range: 8e4,8e8,8ec,8f0,8f4,8f8,8fc
** HOT: 900 - range: 900,904,908
** HOT: 90c - range: 90c,910,914,918,91c,920,924,928,92c
** HOT: 910 - range: 910,914,918,91c,920,924,928,92c
** HOT: 930 - range: 930,934,938,93c
** HOT: 940 - range: 940,944,948,94c,950,954,958,95c,960
** HOT: 944 - range: 944,948,94c,950,954,958,95c,960
** HOT: 964 - range: 964,968,96c,970
** HOT: 974 - range: 974,978,97c,980,984
** HOT: 988 - range: 988,98c,990,994,998
** HOT: 99c - range: 99c,9a0,9a4,9a8
** HOT: 9ac - range: 9ac,9b0,9b4,9b8,9bc,9c0,9c4
