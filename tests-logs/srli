Running in EVM:
0	 0	PUSH4	0300	 	 
- stack 0: 0x300
1	 5	PUSH2	04A8	 ;; _rambegin	 
- stack 1: 0x300
- stack 0: 0x4A8
2	 8	PUSH1	01	 	 
- stack 2: 0x300
- stack 1: 0x4A8
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x300
- stack 0: 0x4A9
4	 B	PUSH2	0400	 	 
- stack 2: 0x300
- stack 1: 0x4A9
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x210000003406F000530042006600000086FFF80099000000BBFFF800CE0002
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x210000003406F000530042006600000086FFF80099000000BBFFF800CE0002
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406F000530042006600000086FFF80099000000BBFFF800CE000200E802A4
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x3406F000530042006600000086FFF80099000000BBFFF800CE000200E802A4
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1776(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x3406F000530042006600000086FFF80099000000BBFFF800CE000200E802A4
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x3406F000530042006600000086FFF80099000000BBFFF800CE000200E802A4
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x3406F0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x3406F0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x6F0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x6F0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x6F0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6F0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x6F0
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x6F0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x6F0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086FFF80099000000BBFFF800CE000200E802A40086FFF8
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086FFF80099000000BBFFF800CE000200E802A40086FFF8
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086FFF80099000000BBFFF800CE000200E802A40086FFF800990001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086FFF80099000000BBFFF800CE000200E802A40086FFF800990001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_f2b82b416558f6771771c4c051cfa616a087e0070e5d0bed6e1866d7b32f24f3	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_f2b82b416558f6771771c4c051cfa616a087e0070e5d0bed6e1866d7b32f24f3	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x6F0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86FFF80099000000BBFFF800CE000200E802A40086FFF800990001012AFFFC
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86FFF80099000000BBFFF800CE000200E802A40086FFF800990001012AFFFC
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ffff8000	 	 
- stack 1: 0x410
- stack 0: 0xFFFF8000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFFFF8000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99000000BBFFF800CE000200E802A40086FFF800990001012AFFFC00CE0003
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99000000BBFFF800CE000200E802A40086FFF800990001012AFFFC00CE0003
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x414
87	 9A	PUSH2	0020	 	 
- stack 1: 0x414
- stack 0: 0x20
88	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x414
- stack 0: 0xFFFF8000
89	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
90	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x414
- stack 0: 0xFFFF8000
91	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0x414
92	 A5	MLOAD		 	 
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0x99000000BBFFF800CE000200E802A40086FFF800990001012AFFFC00CE0003
93	 A6	PUSH1	E0	 	 
- stack 3: 0x414
- stack 2: 0xFFFF8000
- stack 1: 0x99000000BBFFF800CE000200E802A40086FFF800990001012AFFFC00CE0003
- stack 0: 0xE0
94	 A8	SHR		 	 
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0x990000
95	 A9	PUSH2	FFFF	 	 
- stack 3: 0x414
- stack 2: 0xFFFF8000
- stack 1: 0x990000
- stack 0: 0xFFFF
96	 AC	AND		 	 
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0x0
97	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x414
- stack 0: 0xFFFF8000
98	 AE	PUSH2	0060	 	 
- stack 2: 0x414
- stack 1: 0xFFFF8000
- stack 0: 0x60
99	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x414
100	 B2	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B4	ADD		 	 
- stack 0: 0x418
102	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B6	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBBFFF800CE000200E802A40086FFF800990001012AFFFC00CE000300E80290
104	 B7	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBBFFF800CE000200E802A40086FFF800990001012AFFFC00CE000300E80290
- stack 0: 0xF0
105	 B9	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBB
106	 BA	JUMP		 	 
- stack 0: 0x418
107	 BB	JUMPDEST		 ;; __riscvimpl_LUI_ffff8eb7	  ;; # instr: lui t4,0xffff8(ignore imm)
- stack 0: 0x418
108	 BC	PUSH4	ffff8000	 	 
- stack 1: 0x418
- stack 0: 0xFFFF8000
109	 C1	PUSH2	03A0	 	 
- stack 2: 0x418
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
110	 C4	MSTORE		 	  ;; # store to x29
- stack 0: 0x418
111	 C5	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
112	 C7	ADD		 	 
- stack 0: 0x41C
113	 C8	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
114	 C9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCE000200E802A40086FFF800990001012AFFFC00CE000300E802900086FFF8
115	 CA	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCE000200E802A40086FFF800990001012AFFFC00CE000300E802900086FFF8
- stack 0: 0xF0
116	 CC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCE
117	 CD	JUMP		 	 
- stack 0: 0x41C
118	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x41C
119	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
120	 D0	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCE000200E802A40086FFF800990001012AFFFC00CE000300E802900086FFF8
121	 D1	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xCE000200E802A40086FFF800990001012AFFFC00CE000300E802900086FFF8
- stack 0: 0xE0
122	 D3	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCE0002
123	 D4	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xCE0002
- stack 0: 0xFFFF
124	 D7	AND		 	 
- stack 1: 0x41C
- stack 0: 0x2
125	 D8	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x1
126	 DA	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x2
127	 DB	PUSH2	0380	 	 
- stack 2: 0x41C
- stack 1: 0x2
- stack 0: 0x380
128	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x41C
129	 DF	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
130	 E1	ADD		 	 
- stack 0: 0x420
131	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
132	 E3	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE802A40086FFF800990001012AFFFC00CE000300E802900086FFF800990007
133	 E4	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xE802A40086FFF800990001012AFFFC00CE000300E802900086FFF800990007
- stack 0: 0xF0
134	 E6	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE8
135	 E7	JUMP		 	 
- stack 0: 0x420
136	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x420
137	 E9	PUSH2	0060	 	 
- stack 1: 0x420
- stack 0: 0x60
138	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x420
- stack 0: 0xFFFF8000
139	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
140	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0xFFFF8000
141	 F3	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
142	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
143	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0xFFFF8000
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
144	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x420
- stack 1: 0xFFFF8000
- stack 0: 0xFFFF8000
145	 FD	SUB		 	 
- stack 1: 0x420
- stack 0: 0x0
146	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x420
- stack 1: 0x0
- stack 0: 0x106
147	 101	JUMPI		 	 
- stack 0: 0x420
148	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x420
- stack 0: 0x120
149	 105	JUMP		 	 
- stack 0: 0x420
150	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x420
151	 121	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
152	 123	ADD		 	 
- stack 0: 0x424
153	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
154	 125	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x86FFF800990001012AFFFC00CE000300E802900086FFF800990007013D2000
155	 126	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x86FFF800990001012AFFFC00CE000300E802900086FFF800990007013D2000
- stack 0: 0xF0
156	 128	SHR		 	 
- stack 1: 0x424
- stack 0: 0x86
157	 129	JUMP		 	 
- stack 0: 0x424
158	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x424
159	 87	PUSH4	ffff8000	 	 
- stack 1: 0x424
- stack 0: 0xFFFF8000
160	 8C	PUSH2	0020	 	 
- stack 2: 0x424
- stack 1: 0xFFFF8000
- stack 0: 0x20
161	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x424
162	 90	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
163	 92	ADD		 	 
- stack 0: 0x428
164	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
165	 94	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x990001012AFFFC00CE000300E802900086FFF800990007013D20000150FF00
166	 95	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x990001012AFFFC00CE000300E802900086FFF800990007013D20000150FF00
- stack 0: 0xF0
167	 97	SHR		 	 
- stack 1: 0x428
- stack 0: 0x99
168	 98	JUMP		 	 
- stack 0: 0x428
169	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x428
170	 9A	PUSH2	0020	 	 
- stack 1: 0x428
- stack 0: 0x20
171	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x428
- stack 0: 0xFFFF8000
172	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
173	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0xFFFF8000
174	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0x428
175	 A5	MLOAD		 	 
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0x990001012AFFFC00CE000300E802900086FFF800990007013D20000150FF00
176	 A6	PUSH1	E0	 	 
- stack 3: 0x428
- stack 2: 0xFFFF8000
- stack 1: 0x990001012AFFFC00CE000300E802900086FFF800990007013D20000150FF00
- stack 0: 0xE0
177	 A8	SHR		 	 
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0x990001
178	 A9	PUSH2	FFFF	 	 
- stack 3: 0x428
- stack 2: 0xFFFF8000
- stack 1: 0x990001
- stack 0: 0xFFFF
179	 AC	AND		 	 
- stack 2: 0x428
- stack 1: 0xFFFF8000
- stack 0: 0x1
180	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x428
- stack 0: 0x7FFFC000
181	 AE	PUSH2	0060	 	 
- stack 2: 0x428
- stack 1: 0x7FFFC000
- stack 0: 0x60
182	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x428
183	 B2	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
184	 B4	ADD		 	 
- stack 0: 0x42C
185	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
186	 B6	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x12AFFFC00CE000300E802900086FFF800990007013D20000150FF0000CE0004
187	 B7	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x12AFFFC00CE000300E802900086FFF800990007013D20000150FF0000CE0004
- stack 0: 0xF0
188	 B9	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x12A
189	 BA	JUMP		 	 
- stack 0: 0x42C
190	 12A	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x42C
191	 12B	PUSH4	7fffc000	 	 
- stack 1: 0x42C
- stack 0: 0x7FFFC000
192	 130	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
193	 133	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
194	 134	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
195	 136	ADD		 	 
- stack 0: 0x430
196	 137	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
197	 138	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xCE000300E802900086FFF800990007013D20000150FF0000CE000400E80278
198	 139	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xCE000300E802900086FFF800990007013D20000150FF0000CE000400E80278
- stack 0: 0xF0
199	 13B	SHR		 	 
- stack 1: 0x430
- stack 0: 0xCE
200	 13C	JUMP		 	 
- stack 0: 0x430
201	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
202	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
203	 D0	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xCE000300E802900086FFF800990007013D20000150FF0000CE000400E80278
204	 D1	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0xCE000300E802900086FFF800990007013D20000150FF0000CE000400E80278
- stack 0: 0xE0
205	 D3	SHR		 	 
- stack 1: 0x430
- stack 0: 0xCE0003
206	 D4	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0xCE0003
- stack 0: 0xFFFF
207	 D7	AND		 	 
- stack 1: 0x430
- stack 0: 0x3
208	 D8	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x1
209	 DA	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x3
210	 DB	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x3
- stack 0: 0x380
211	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
212	 DF	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
213	 E1	ADD		 	 
- stack 0: 0x434
214	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
215	 E3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xE802900086FFF800990007013D20000150FF0000CE000400E802780086FFF8
216	 E4	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xE802900086FFF800990007013D20000150FF0000CE000400E802780086FFF8
- stack 0: 0xF0
217	 E6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xE8
218	 E7	JUMP		 	 
- stack 0: 0x434
219	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x434
220	 E9	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
221	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0x7FFFC000
222	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
223	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0x7FFFC000
224	 F3	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
225	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
226	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
227	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
228	 FD	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
229	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x106
230	 101	JUMPI		 	 
- stack 0: 0x434
231	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x434
- stack 0: 0x120
232	 105	JUMP		 	 
- stack 0: 0x434
233	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x434
234	 121	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
235	 123	ADD		 	 
- stack 0: 0x438
236	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
237	 125	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x86FFF800990007013D20000150FF0000CE000400E802780086FFF80099000E
238	 126	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x86FFF800990007013D20000150FF0000CE000400E802780086FFF80099000E
- stack 0: 0xF0
239	 128	SHR		 	 
- stack 1: 0x438
- stack 0: 0x86
240	 129	JUMP		 	 
- stack 0: 0x438
241	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x438
242	 87	PUSH4	ffff8000	 	 
- stack 1: 0x438
- stack 0: 0xFFFF8000
243	 8C	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFFFF8000
- stack 0: 0x20
244	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
245	 90	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
246	 92	ADD		 	 
- stack 0: 0x43C
247	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
248	 94	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x990007013D20000150FF0000CE000400E802780086FFF80099000E016F0040
249	 95	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x990007013D20000150FF0000CE000400E802780086FFF80099000E016F0040
- stack 0: 0xF0
250	 97	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x99
251	 98	JUMP		 	 
- stack 0: 0x43C
252	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x43C
253	 9A	PUSH2	0020	 	 
- stack 1: 0x43C
- stack 0: 0x20
254	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x43C
- stack 0: 0xFFFF8000
255	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
256	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0xFFFF8000
257	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x43C
- stack 1: 0xFFFF8000
- stack 0: 0x43C
258	 A5	MLOAD		 	 
- stack 2: 0x43C
- stack 1: 0xFFFF8000
- stack 0: 0x990007013D20000150FF0000CE000400E802780086FFF80099000E016F0040
259	 A6	PUSH1	E0	 	 
- stack 3: 0x43C
- stack 2: 0xFFFF8000
- stack 1: 0x990007013D20000150FF0000CE000400E802780086FFF80099000E016F0040
- stack 0: 0xE0
260	 A8	SHR		 	 
- stack 2: 0x43C
- stack 1: 0xFFFF8000
- stack 0: 0x990007
261	 A9	PUSH2	FFFF	 	 
- stack 3: 0x43C
- stack 2: 0xFFFF8000
- stack 1: 0x990007
- stack 0: 0xFFFF
262	 AC	AND		 	 
- stack 2: 0x43C
- stack 1: 0xFFFF8000
- stack 0: 0x7
263	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x43C
- stack 0: 0x1FFFF00
264	 AE	PUSH2	0060	 	 
- stack 2: 0x43C
- stack 1: 0x1FFFF00
- stack 0: 0x60
265	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x43C
266	 B2	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
267	 B4	ADD		 	 
- stack 0: 0x440
268	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
269	 B6	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x13D20000150FF0000CE000400E802780086FFF80099000E016F00400150FFFE
270	 B7	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x13D20000150FF0000CE000400E802780086FFF80099000E016F00400150FFFE
- stack 0: 0xF0
271	 B9	SHR		 	 
- stack 1: 0x440
- stack 0: 0x13D
272	 BA	JUMP		 	 
- stack 0: 0x440
273	 13D	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x440
274	 13E	PUSH4	02000000	 	 
- stack 1: 0x440
- stack 0: 0x2000000
275	 143	PUSH2	03A0	 	 
- stack 2: 0x440
- stack 1: 0x2000000
- stack 0: 0x3A0
276	 146	MSTORE		 	  ;; # store to x29
- stack 0: 0x440
277	 147	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
278	 149	ADD		 	 
- stack 0: 0x444
279	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
280	 14B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x150FF0000CE000400E802780086FFF80099000E016F00400150FFFE00CE0005
281	 14C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x150FF0000CE000400E802780086FFF80099000E016F00400150FFFE00CE0005
- stack 0: 0xF0
282	 14E	SHR		 	 
- stack 1: 0x444
- stack 0: 0x150
283	 14F	JUMP		 	 
- stack 0: 0x444
284	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x444
285	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
286	 152	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x150FF0000CE000400E802780086FFF80099000E016F00400150FFFE00CE0005
287	 153	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0x150FF0000CE000400E802780086FFF80099000E016F00400150FFFE00CE0005
- stack 0: 0xE0
288	 155	SHR		 	 
- stack 1: 0x444
- stack 0: 0x150FF00
289	 156	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0x150FF00
- stack 0: 0xFFFF
290	 159	AND		 	 
- stack 1: 0x444
- stack 0: 0xFF00
291	 15A	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xFF00
- stack 0: 0x1
292	 15C	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
293	 15D	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
294	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x2000000
295	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x444
- stack 0: 0x1FFFF00
296	 162	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
297	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x444
298	 166	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
299	 168	ADD		 	 
- stack 0: 0x448
300	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
301	 16A	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xCE000400E802780086FFF80099000E016F00400150FFFE00CE000500E80260
302	 16B	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xCE000400E802780086FFF80099000E016F00400150FFFE00CE000500E80260
- stack 0: 0xF0
303	 16D	SHR		 	 
- stack 1: 0x448
- stack 0: 0xCE
304	 16E	JUMP		 	 
- stack 0: 0x448
305	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x448
306	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x448
- stack 0: 0x448
307	 D0	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xCE000400E802780086FFF80099000E016F00400150FFFE00CE000500E80260
308	 D1	PUSH1	E0	 	 
- stack 2: 0x448
- stack 1: 0xCE000400E802780086FFF80099000E016F00400150FFFE00CE000500E80260
- stack 0: 0xE0
309	 D3	SHR		 	 
- stack 1: 0x448
- stack 0: 0xCE0004
310	 D4	PUSH2	FFFF	 	 
- stack 2: 0x448
- stack 1: 0xCE0004
- stack 0: 0xFFFF
311	 D7	AND		 	 
- stack 1: 0x448
- stack 0: 0x4
312	 D8	PUSH1	01	 	 
- stack 2: 0x448
- stack 1: 0x4
- stack 0: 0x1
313	 DA	SIGNEXTEND		 	 
- stack 1: 0x448
- stack 0: 0x4
314	 DB	PUSH2	0380	 	 
- stack 2: 0x448
- stack 1: 0x4
- stack 0: 0x380
315	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x448
316	 DF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
317	 E1	ADD		 	 
- stack 0: 0x44C
318	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
319	 E3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xE802780086FFF80099000E016F00400150FFFE00CE000500E802600086FFF8
320	 E4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xE802780086FFF80099000E016F00400150FFFE00CE000500E802600086FFF8
- stack 0: 0xF0
321	 E6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xE8
322	 E7	JUMP		 	 
- stack 0: 0x44C
323	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x44C
324	 E9	PUSH2	0060	 	 
- stack 1: 0x44C
- stack 0: 0x60
325	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x44C
- stack 0: 0x1FFFF00
326	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
327	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x1FFFF00
328	 F3	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0x1FFFF00
- stack 0: 0x3A0
329	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
330	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x44C
- stack 2: 0x1FFFF00
- stack 1: 0x1FFFF00
- stack 0: 0xFFFFFFFF
331	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x44C
- stack 1: 0x1FFFF00
- stack 0: 0x1FFFF00
332	 FD	SUB		 	 
- stack 1: 0x44C
- stack 0: 0x0
333	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x44C
- stack 1: 0x0
- stack 0: 0x106
334	 101	JUMPI		 	 
- stack 0: 0x44C
335	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x44C
- stack 0: 0x120
336	 105	JUMP		 	 
- stack 0: 0x44C
337	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x44C
338	 121	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
339	 123	ADD		 	 
- stack 0: 0x450
340	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
341	 125	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x86FFF80099000E016F00400150FFFE00CE000500E802600086FFF801820001
342	 126	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x86FFF80099000E016F00400150FFFE00CE000500E802600086FFF801820001
- stack 0: 0xF0
343	 128	SHR		 	 
- stack 1: 0x450
- stack 0: 0x86
344	 129	JUMP		 	 
- stack 0: 0x450
345	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x450
346	 87	PUSH4	ffff8000	 	 
- stack 1: 0x450
- stack 0: 0xFFFF8000
347	 8C	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0xFFFF8000
- stack 0: 0x20
348	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x450
349	 90	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
350	 92	ADD		 	 
- stack 0: 0x454
351	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
352	 94	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x99000E016F00400150FFFE00CE000500E802600086FFF8018200010099000F
353	 95	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x99000E016F00400150FFFE00CE000500E802600086FFF8018200010099000F
- stack 0: 0xF0
354	 97	SHR		 	 
- stack 1: 0x454
- stack 0: 0x99
355	 98	JUMP		 	 
- stack 0: 0x454
356	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x454
357	 9A	PUSH2	0020	 	 
- stack 1: 0x454
- stack 0: 0x20
358	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x454
- stack 0: 0xFFFF8000
359	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
360	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFFFF8000
361	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x454
- stack 1: 0xFFFF8000
- stack 0: 0x454
362	 A5	MLOAD		 	 
- stack 2: 0x454
- stack 1: 0xFFFF8000
- stack 0: 0x99000E016F00400150FFFE00CE000500E802600086FFF8018200010099000F
363	 A6	PUSH1	E0	 	 
- stack 3: 0x454
- stack 2: 0xFFFF8000
- stack 1: 0x99000E016F00400150FFFE00CE000500E802600086FFF8018200010099000F
- stack 0: 0xE0
364	 A8	SHR		 	 
- stack 2: 0x454
- stack 1: 0xFFFF8000
- stack 0: 0x99000E
365	 A9	PUSH2	FFFF	 	 
- stack 3: 0x454
- stack 2: 0xFFFF8000
- stack 1: 0x99000E
- stack 0: 0xFFFF
366	 AC	AND		 	 
- stack 2: 0x454
- stack 1: 0xFFFF8000
- stack 0: 0xE
367	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x454
- stack 0: 0x3FFFE
368	 AE	PUSH2	0060	 	 
- stack 2: 0x454
- stack 1: 0x3FFFE
- stack 0: 0x60
369	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x454
370	 B2	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
371	 B4	ADD		 	 
- stack 0: 0x458
372	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
373	 B6	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x16F00400150FFFE00CE000500E802600086FFF8018200010099000F01A10020
374	 B7	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x16F00400150FFFE00CE000500E802600086FFF8018200010099000F01A10020
- stack 0: 0xF0
375	 B9	SHR		 	 
- stack 1: 0x458
- stack 0: 0x16F
376	 BA	JUMP		 	 
- stack 0: 0x458
377	 16F	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x458
378	 170	PUSH4	00040000	 	 
- stack 1: 0x458
- stack 0: 0x40000
379	 175	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0x40000
- stack 0: 0x3A0
380	 178	MSTORE		 	  ;; # store to x29
- stack 0: 0x458
381	 179	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
382	 17B	ADD		 	 
- stack 0: 0x45C
383	 17C	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
384	 17D	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x150FFFE00CE000500E802600086FFF8018200010099000F01A100200150FFFF
385	 17E	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x150FFFE00CE000500E802600086FFF8018200010099000F01A100200150FFFF
- stack 0: 0xF0
386	 180	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x150
387	 181	JUMP		 	 
- stack 0: 0x45C
388	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x45C
389	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
390	 152	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x150FFFE00CE000500E802600086FFF8018200010099000F01A100200150FFFF
391	 153	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x150FFFE00CE000500E802600086FFF8018200010099000F01A100200150FFFF
- stack 0: 0xE0
392	 155	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x150FFFE
393	 156	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x150FFFE
- stack 0: 0xFFFF
394	 159	AND		 	 
- stack 1: 0x45C
- stack 0: 0xFFFE
395	 15A	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xFFFE
- stack 0: 0x1
396	 15C	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
397	 15D	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
398	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
399	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x45C
- stack 0: 0x3FFFE
400	 162	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0x3FFFE
- stack 0: 0x3A0
401	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x45C
402	 166	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
403	 168	ADD		 	 
- stack 0: 0x460
404	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
405	 16A	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xCE000500E802600086FFF8018200010099000F01A100200150FFFF00CE0006
406	 16B	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xCE000500E802600086FFF8018200010099000F01A100200150FFFF00CE0006
- stack 0: 0xF0
407	 16D	SHR		 	 
- stack 1: 0x460
- stack 0: 0xCE
408	 16E	JUMP		 	 
- stack 0: 0x460
409	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x460
410	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x460
- stack 0: 0x460
411	 D0	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xCE000500E802600086FFF8018200010099000F01A100200150FFFF00CE0006
412	 D1	PUSH1	E0	 	 
- stack 2: 0x460
- stack 1: 0xCE000500E802600086FFF8018200010099000F01A100200150FFFF00CE0006
- stack 0: 0xE0
413	 D3	SHR		 	 
- stack 1: 0x460
- stack 0: 0xCE0005
414	 D4	PUSH2	FFFF	 	 
- stack 2: 0x460
- stack 1: 0xCE0005
- stack 0: 0xFFFF
415	 D7	AND		 	 
- stack 1: 0x460
- stack 0: 0x5
416	 D8	PUSH1	01	 	 
- stack 2: 0x460
- stack 1: 0x5
- stack 0: 0x1
417	 DA	SIGNEXTEND		 	 
- stack 1: 0x460
- stack 0: 0x5
418	 DB	PUSH2	0380	 	 
- stack 2: 0x460
- stack 1: 0x5
- stack 0: 0x380
419	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x460
420	 DF	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
421	 E1	ADD		 	 
- stack 0: 0x464
422	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
423	 E3	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xE802600086FFF8018200010099000F01A100200150FFFF00CE000600E80244
424	 E4	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xE802600086FFF8018200010099000F01A100200150FFFF00CE000600E80244
- stack 0: 0xF0
425	 E6	SHR		 	 
- stack 1: 0x464
- stack 0: 0xE8
426	 E7	JUMP		 	 
- stack 0: 0x464
427	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x464
428	 E9	PUSH2	0060	 	 
- stack 1: 0x464
- stack 0: 0x60
429	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x464
- stack 0: 0x3FFFE
430	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x464
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
431	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x464
- stack 0: 0x3FFFE
432	 F3	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0x3FFFE
- stack 0: 0x3A0
433	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x464
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
434	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x464
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
435	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x464
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
436	 FD	SUB		 	 
- stack 1: 0x464
- stack 0: 0x0
437	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x464
- stack 1: 0x0
- stack 0: 0x106
438	 101	JUMPI		 	 
- stack 0: 0x464
439	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x464
- stack 0: 0x120
440	 105	JUMP		 	 
- stack 0: 0x464
441	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x464
442	 121	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
443	 123	ADD		 	 
- stack 0: 0x468
444	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
445	 125	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x86FFF8018200010099000F01A100200150FFFF00CE000600E8024401B4FFFF
446	 126	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x86FFF8018200010099000F01A100200150FFFF00CE000600E8024401B4FFFF
- stack 0: 0xF0
447	 128	SHR		 	 
- stack 1: 0x468
- stack 0: 0x86
448	 129	JUMP		 	 
- stack 0: 0x468
449	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x468
450	 87	PUSH4	ffff8000	 	 
- stack 1: 0x468
- stack 0: 0xFFFF8000
451	 8C	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xFFFF8000
- stack 0: 0x20
452	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x468
453	 90	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
454	 92	ADD		 	 
- stack 0: 0x46C
455	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
456	 94	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x18200010099000F01A100200150FFFF00CE000600E8024401B4FFFF00990000
457	 95	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x18200010099000F01A100200150FFFF00CE000600E8024401B4FFFF00990000
- stack 0: 0xF0
458	 97	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x182
459	 98	JUMP		 	 
- stack 0: 0x46C
460	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x46C
461	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
462	 184	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x18200010099000F01A100200150FFFF00CE000600E8024401B4FFFF00990000
463	 185	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0x18200010099000F01A100200150FFFF00CE000600E8024401B4FFFF00990000
- stack 0: 0xE0
464	 187	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1820001
465	 188	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0x1820001
- stack 0: 0xFFFF
466	 18B	AND		 	 
- stack 1: 0x46C
- stack 0: 0x1
467	 18C	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0x1
- stack 0: 0x1
468	 18E	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0x1
469	 18F	PUSH2	0020	 	 
- stack 2: 0x46C
- stack 1: 0x1
- stack 0: 0x20
470	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x46C
- stack 1: 0x1
- stack 0: 0xFFFF8000
471	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x46C
- stack 0: 0xFFFF8001
472	 194	PUSH2	0020	 	 
- stack 2: 0x46C
- stack 1: 0xFFFF8001
- stack 0: 0x20
473	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x46C
474	 198	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
475	 19A	ADD		 	 
- stack 0: 0x470
476	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
477	 19C	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x99000F01A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF
478	 19D	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x99000F01A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF
- stack 0: 0xF0
479	 19F	SHR		 	 
- stack 1: 0x470
- stack 0: 0x99
480	 1A0	JUMP		 	 
- stack 0: 0x470
481	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x470
482	 9A	PUSH2	0020	 	 
- stack 1: 0x470
- stack 0: 0x20
483	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x470
- stack 0: 0xFFFF8001
484	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0xFFFF8001
- stack 0: 0xFFFFFFFF
485	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0xFFFF8001
486	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x470
- stack 1: 0xFFFF8001
- stack 0: 0x470
487	 A5	MLOAD		 	 
- stack 2: 0x470
- stack 1: 0xFFFF8001
- stack 0: 0x99000F01A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF
488	 A6	PUSH1	E0	 	 
- stack 3: 0x470
- stack 2: 0xFFFF8001
- stack 1: 0x99000F01A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF
- stack 0: 0xE0
489	 A8	SHR		 	 
- stack 2: 0x470
- stack 1: 0xFFFF8001
- stack 0: 0x99000F
490	 A9	PUSH2	FFFF	 	 
- stack 3: 0x470
- stack 2: 0xFFFF8001
- stack 1: 0x99000F
- stack 0: 0xFFFF
491	 AC	AND		 	 
- stack 2: 0x470
- stack 1: 0xFFFF8001
- stack 0: 0xF
492	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x470
- stack 0: 0x1FFFF
493	 AE	PUSH2	0060	 	 
- stack 2: 0x470
- stack 1: 0x1FFFF
- stack 0: 0x60
494	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x470
495	 B2	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
496	 B4	ADD		 	 
- stack 0: 0x474
497	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
498	 B6	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE0007
499	 B7	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1A100200150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE0007
- stack 0: 0xF0
500	 B9	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1A1
501	 BA	JUMP		 	 
- stack 0: 0x474
502	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x474
503	 1A2	PUSH4	00020000	 	 
- stack 1: 0x474
- stack 0: 0x20000
504	 1A7	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0x20000
- stack 0: 0x3A0
505	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x474
506	 1AB	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
507	 1AD	ADD		 	 
- stack 0: 0x478
508	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
509	 1AF	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE000700E80230
510	 1B0	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE000700E80230
- stack 0: 0xF0
511	 1B2	SHR		 	 
- stack 1: 0x478
- stack 0: 0x150
512	 1B3	JUMP		 	 
- stack 0: 0x478
513	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x478
514	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
515	 152	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE000700E80230
516	 153	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x150FFFF00CE000600E8024401B4FFFF0099000001CEFFFF00CE000700E80230
- stack 0: 0xE0
517	 155	SHR		 	 
- stack 1: 0x478
- stack 0: 0x150FFFF
518	 156	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
519	 159	AND		 	 
- stack 1: 0x478
- stack 0: 0xFFFF
520	 15A	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0xFFFF
- stack 0: 0x1
521	 15C	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
522	 15D	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
523	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
524	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x478
- stack 0: 0x1FFFF
525	 162	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0x1FFFF
- stack 0: 0x3A0
526	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x478
527	 166	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
528	 168	ADD		 	 
- stack 0: 0x47C
529	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
530	 16A	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xCE000600E8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF
531	 16B	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0xCE000600E8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF
- stack 0: 0xF0
532	 16D	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xCE
533	 16E	JUMP		 	 
- stack 0: 0x47C
534	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x47C
535	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
536	 D0	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0xCE000600E8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF
537	 D1	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0xCE000600E8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF
- stack 0: 0xE0
538	 D3	SHR		 	 
- stack 1: 0x47C
- stack 0: 0xCE0006
539	 D4	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0xCE0006
- stack 0: 0xFFFF
540	 D7	AND		 	 
- stack 1: 0x47C
- stack 0: 0x6
541	 D8	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0x6
- stack 0: 0x1
542	 DA	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0x6
543	 DB	PUSH2	0380	 	 
- stack 2: 0x47C
- stack 1: 0x6
- stack 0: 0x380
544	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x47C
545	 DF	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
546	 E1	ADD		 	 
- stack 0: 0x480
547	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
548	 E3	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xE8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF00990001
549	 E4	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xE8024401B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF00990001
- stack 0: 0xF0
550	 E6	SHR		 	 
- stack 1: 0x480
- stack 0: 0xE8
551	 E7	JUMP		 	 
- stack 0: 0x480
552	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x480
553	 E9	PUSH2	0060	 	 
- stack 1: 0x480
- stack 0: 0x60
554	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x480
- stack 0: 0x1FFFF
555	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x480
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
556	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x480
- stack 0: 0x1FFFF
557	 F3	PUSH2	03A0	 	 
- stack 2: 0x480
- stack 1: 0x1FFFF
- stack 0: 0x3A0
558	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x480
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
559	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x480
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
560	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x480
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
561	 FD	SUB		 	 
- stack 1: 0x480
- stack 0: 0x0
562	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x480
- stack 1: 0x0
- stack 0: 0x106
563	 101	JUMPI		 	 
- stack 0: 0x480
564	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x480
- stack 0: 0x120
565	 105	JUMP		 	 
- stack 0: 0x480
566	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x480
567	 121	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
568	 123	ADD		 	 
- stack 0: 0x484
569	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
570	 125	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF0099000101E80000
571	 126	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF0099000101E80000
- stack 0: 0xF0
572	 128	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1B4
573	 129	JUMP		 	 
- stack 0: 0x484
574	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x484
575	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
576	 1B6	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF0099000101E80000
577	 1B7	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x1B4FFFF0099000001CEFFFF00CE000700E8023001B4FFFF0099000101E80000
- stack 0: 0xE0
578	 1B9	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1B4FFFF
579	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x1B4FFFF
- stack 0: 0xFFFF
580	 1BD	AND		 	 
- stack 1: 0x484
- stack 0: 0xFFFF
581	 1BE	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0xFFFF
- stack 0: 0x1
582	 1C0	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
583	 1C1	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
584	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x484
585	 1C5	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
586	 1C7	ADD		 	 
- stack 0: 0x488
587	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
588	 1C9	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x99000001CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF
589	 1CA	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x99000001CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF
- stack 0: 0xF0
590	 1CC	SHR		 	 
- stack 1: 0x488
- stack 0: 0x99
591	 1CD	JUMP		 	 
- stack 0: 0x488
592	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x488
593	 9A	PUSH2	0020	 	 
- stack 1: 0x488
- stack 0: 0x20
594	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x488
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
595	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
596	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
597	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x488
598	 A5	MLOAD		 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x99000001CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF
599	 A6	PUSH1	E0	 	 
- stack 3: 0x488
- stack 2: 0xFFFFFFFF
- stack 1: 0x99000001CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF
- stack 0: 0xE0
600	 A8	SHR		 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x990000
601	 A9	PUSH2	FFFF	 	 
- stack 3: 0x488
- stack 2: 0xFFFFFFFF
- stack 1: 0x990000
- stack 0: 0xFFFF
602	 AC	AND		 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x0
603	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x488
- stack 0: 0xFFFFFFFF
604	 AE	PUSH2	0060	 	 
- stack 2: 0x488
- stack 1: 0xFFFFFFFF
- stack 0: 0x60
605	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x488
606	 B2	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
607	 B4	ADD		 	 
- stack 0: 0x48C
608	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
609	 B6	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF00CE0008
610	 B7	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x1CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF00CE0008
- stack 0: 0xF0
611	 B9	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x1CE
612	 BA	JUMP		 	 
- stack 0: 0x48C
613	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x48C
614	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
615	 1D0	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x1CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF00CE0008
616	 1D1	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x1CEFFFF00CE000700E8023001B4FFFF0099000101E800000150FFFF00CE0008
- stack 0: 0xE0
617	 1D3	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x1CEFFFF
618	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x1CEFFFF
- stack 0: 0xFFFF
619	 1D7	AND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFF
620	 1D8	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0xFFFF
- stack 0: 0x1
621	 1DA	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
622	 1DB	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
623	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
624	 1DF	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
625	 1E1	ADD		 	 
- stack 0: 0x490
626	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
627	 1E3	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xCE000700E8023001B4FFFF0099000101E800000150FFFF00CE000800E80218
628	 1E4	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xCE000700E8023001B4FFFF0099000101E800000150FFFF00CE000800E80218
- stack 0: 0xF0
629	 1E6	SHR		 	 
- stack 1: 0x490
- stack 0: 0xCE
630	 1E7	JUMP		 	 
- stack 0: 0x490
631	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x490
632	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
633	 D0	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xCE000700E8023001B4FFFF0099000101E800000150FFFF00CE000800E80218
634	 D1	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xCE000700E8023001B4FFFF0099000101E800000150FFFF00CE000800E80218
- stack 0: 0xE0
635	 D3	SHR		 	 
- stack 1: 0x490
- stack 0: 0xCE0007
636	 D4	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xCE0007
- stack 0: 0xFFFF
637	 D7	AND		 	 
- stack 1: 0x490
- stack 0: 0x7
638	 D8	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0x7
- stack 0: 0x1
639	 DA	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0x7
640	 DB	PUSH2	0380	 	 
- stack 2: 0x490
- stack 1: 0x7
- stack 0: 0x380
641	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x490
642	 DF	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
643	 E1	ADD		 	 
- stack 0: 0x494
644	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
645	 E3	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xE8023001B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF
646	 E4	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xE8023001B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF
- stack 0: 0xF0
647	 E6	SHR		 	 
- stack 1: 0x494
- stack 0: 0xE8
648	 E7	JUMP		 	 
- stack 0: 0x494
649	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x494
650	 E9	PUSH2	0060	 	 
- stack 1: 0x494
- stack 0: 0x60
651	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x494
- stack 0: 0xFFFFFFFF
652	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
653	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x494
- stack 0: 0xFFFFFFFF
654	 F3	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFFFFFFFF
- stack 0: 0x3A0
655	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
656	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x494
- stack 2: 0xFFFFFFFF
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
657	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x494
- stack 1: 0xFFFFFFFF
- stack 0: 0xFFFFFFFF
658	 FD	SUB		 	 
- stack 1: 0x494
- stack 0: 0x0
659	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x494
- stack 1: 0x0
- stack 0: 0x106
660	 101	JUMPI		 	 
- stack 0: 0x494
661	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x494
- stack 0: 0x120
662	 105	JUMP		 	 
- stack 0: 0x494
663	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x494
664	 121	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
665	 123	ADD		 	 
- stack 0: 0x498
666	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
667	 125	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF00990007
668	 126	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF00990007
- stack 0: 0xF0
669	 128	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1B4
670	 129	JUMP		 	 
- stack 0: 0x498
671	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x498
672	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
673	 1B6	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF00990007
674	 1B7	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1B4FFFF0099000101E800000150FFFF00CE000800E8021801B4FFFF00990007
- stack 0: 0xE0
675	 1B9	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1B4FFFF
676	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1B4FFFF
- stack 0: 0xFFFF
677	 1BD	AND		 	 
- stack 1: 0x498
- stack 0: 0xFFFF
678	 1BE	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0xFFFF
- stack 0: 0x1
679	 1C0	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
680	 1C1	PUSH2	0020	 	 
- stack 2: 0x498
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
681	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x498
682	 1C5	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
683	 1C7	ADD		 	 
- stack 0: 0x49C
684	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
685	 1C9	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x99000101E800000150FFFF00CE000800E8021801B4FFFF00990007013D2000
686	 1CA	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x99000101E800000150FFFF00CE000800E8021801B4FFFF00990007013D2000
- stack 0: 0xF0
687	 1CC	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x99
688	 1CD	JUMP		 	 
- stack 0: 0x49C
689	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x49C
690	 9A	PUSH2	0020	 	 
- stack 1: 0x49C
- stack 0: 0x20
691	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
692	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
693	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0xFFFFFFFF
694	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0x49C
695	 A5	MLOAD		 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0x99000101E800000150FFFF00CE000800E8021801B4FFFF00990007013D2000
696	 A6	PUSH1	E0	 	 
- stack 3: 0x49C
- stack 2: 0xFFFFFFFF
- stack 1: 0x99000101E800000150FFFF00CE000800E8021801B4FFFF00990007013D2000
- stack 0: 0xE0
697	 A8	SHR		 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0x990001
698	 A9	PUSH2	FFFF	 	 
- stack 3: 0x49C
- stack 2: 0xFFFFFFFF
- stack 1: 0x990001
- stack 0: 0xFFFF
699	 AC	AND		 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFF
- stack 0: 0x1
700	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x49C
- stack 0: 0x7FFFFFFF
701	 AE	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
702	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x49C
703	 B2	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
704	 B4	ADD		 	 
- stack 0: 0x4A0
705	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
706	 B6	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x1E800000150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF
707	 B7	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x1E800000150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF
- stack 0: 0xF0
708	 B9	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x1E8
709	 BA	JUMP		 	 
- stack 0: 0x4A0
710	 1E8	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4A0
711	 1E9	PUSH4	80000000	 	 
- stack 1: 0x4A0
- stack 0: 0x80000000
712	 1EE	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0x80000000
- stack 0: 0x3A0
713	 1F1	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A0
714	 1F2	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
715	 1F4	ADD		 	 
- stack 0: 0x4A4
716	 1F5	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
717	 1F6	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF00CE0009
718	 1F7	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF00CE0009
- stack 0: 0xF0
719	 1F9	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x150
720	 1FA	JUMP		 	 
- stack 0: 0x4A4
721	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4A4
722	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
723	 152	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF00CE0009
724	 153	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x150FFFF00CE000800E8021801B4FFFF00990007013D20000150FFFF00CE0009
- stack 0: 0xE0
725	 155	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x150FFFF
726	 156	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
727	 159	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFF
728	 15A	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFF
- stack 0: 0x1
729	 15C	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
730	 15D	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
731	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
732	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x4A4
- stack 0: 0x7FFFFFFF
733	 162	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
734	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
735	 166	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
736	 168	ADD		 	 
- stack 0: 0x4A8
737	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
738	 16A	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xCE000800E8021801B4FFFF00990007013D20000150FFFF00CE000900E80200
739	 16B	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xCE000800E8021801B4FFFF00990007013D20000150FFFF00CE000900E80200
- stack 0: 0xF0
740	 16D	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xCE
741	 16E	JUMP		 	 
- stack 0: 0x4A8
742	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
743	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
744	 D0	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xCE000800E8021801B4FFFF00990007013D20000150FFFF00CE000900E80200
745	 D1	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xCE000800E8021801B4FFFF00990007013D20000150FFFF00CE000900E80200
- stack 0: 0xE0
746	 D3	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xCE0008
747	 D4	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xCE0008
- stack 0: 0xFFFF
748	 D7	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x8
749	 D8	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x8
- stack 0: 0x1
750	 DA	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x8
751	 DB	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x8
- stack 0: 0x380
752	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
753	 DF	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
754	 E1	ADD		 	 
- stack 0: 0x4AC
755	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
756	 E3	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xE8021801B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF
757	 E4	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xE8021801B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF
- stack 0: 0xF0
758	 E6	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xE8
759	 E7	JUMP		 	 
- stack 0: 0x4AC
760	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x4AC
761	 E9	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
762	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0x7FFFFFFF
763	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
764	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0x7FFFFFFF
765	 F3	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
766	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
767	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
768	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
769	 FD	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
770	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x106
771	 101	JUMPI		 	 
- stack 0: 0x4AC
772	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x4AC
- stack 0: 0x120
773	 105	JUMP		 	 
- stack 0: 0x4AC
774	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x4AC
775	 121	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
776	 123	ADD		 	 
- stack 0: 0x4B0
777	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
778	 125	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E
779	 126	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E
- stack 0: 0xF0
780	 128	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1B4
781	 129	JUMP		 	 
- stack 0: 0x4B0
782	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4B0
783	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
784	 1B6	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E
785	 1B7	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x1B4FFFF00990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E
- stack 0: 0xE0
786	 1B9	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1B4FFFF
787	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x1B4FFFF
- stack 0: 0xFFFF
788	 1BD	AND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF
789	 1BE	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF
- stack 0: 0x1
790	 1C0	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
791	 1C1	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
792	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
793	 1C5	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
794	 1C7	ADD		 	 
- stack 0: 0x4B4
795	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
796	 1C9	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E016F0040
797	 1CA	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E016F0040
- stack 0: 0xF0
798	 1CC	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x99
799	 1CD	JUMP		 	 
- stack 0: 0x4B4
800	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x4B4
801	 9A	PUSH2	0020	 	 
- stack 1: 0x4B4
- stack 0: 0x20
802	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
803	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
804	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B4
- stack 0: 0xFFFFFFFF
805	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x4B4
806	 A5	MLOAD		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E016F0040
807	 A6	PUSH1	E0	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFF
- stack 1: 0x990007013D20000150FFFF00CE000900E8020001B4FFFF0099000E016F0040
- stack 0: 0xE0
808	 A8	SHR		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x990007
809	 A9	PUSH2	FFFF	 	 
- stack 3: 0x4B4
- stack 2: 0xFFFFFFFF
- stack 1: 0x990007
- stack 0: 0xFFFF
810	 AC	AND		 	 
- stack 2: 0x4B4
- stack 1: 0xFFFFFFFF
- stack 0: 0x7
811	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x4B4
- stack 0: 0x1FFFFFF
812	 AE	PUSH2	0060	 	 
- stack 2: 0x4B4
- stack 1: 0x1FFFFFF
- stack 0: 0x60
813	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x4B4
814	 B2	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
815	 B4	ADD		 	 
- stack 0: 0x4B8
816	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
817	 B6	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x13D20000150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF
818	 B7	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x13D20000150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF
- stack 0: 0xF0
819	 B9	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x13D
820	 BA	JUMP		 	 
- stack 0: 0x4B8
821	 13D	JUMPDEST		 ;; __riscvimpl_LUI_2000eb7	  ;; # instr: lui t4,0x2000(ignore imm)
- stack 0: 0x4B8
822	 13E	PUSH4	02000000	 	 
- stack 1: 0x4B8
- stack 0: 0x2000000
823	 143	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0x2000000
- stack 0: 0x3A0
824	 146	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
825	 147	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
826	 149	ADD		 	 
- stack 0: 0x4BC
827	 14A	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
828	 14B	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A
829	 14C	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A
- stack 0: 0xF0
830	 14E	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x150
831	 14F	JUMP		 	 
- stack 0: 0x4BC
832	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4BC
833	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
834	 152	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A
835	 153	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x150FFFF00CE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A
- stack 0: 0xE0
836	 155	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x150FFFF
837	 156	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
838	 159	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xFFFF
839	 15A	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFF
- stack 0: 0x1
840	 15C	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
841	 15D	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
842	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x2000000
843	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x4BC
- stack 0: 0x1FFFFFF
844	 162	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0x1FFFFFF
- stack 0: 0x3A0
845	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
846	 166	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
847	 168	ADD		 	 
- stack 0: 0x4C0
848	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
849	 16A	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xCE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E8
850	 16B	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xCE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E8
- stack 0: 0xF0
851	 16D	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xCE
852	 16E	JUMP		 	 
- stack 0: 0x4C0
853	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C0
854	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
855	 D0	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xCE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E8
856	 D1	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xCE000900E8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E8
- stack 0: 0xE0
857	 D3	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xCE0009
858	 D4	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xCE0009
- stack 0: 0xFFFF
859	 D7	AND		 	 
- stack 1: 0x4C0
- stack 0: 0x9
860	 D8	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0x9
- stack 0: 0x1
861	 DA	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0x9
862	 DB	PUSH2	0380	 	 
- stack 2: 0x4C0
- stack 1: 0x9
- stack 0: 0x380
863	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C0
864	 DF	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
865	 E1	ADD		 	 
- stack 0: 0x4C4
866	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
867	 E3	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xE8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF
868	 E4	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0xE8020001B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF
- stack 0: 0xF0
869	 E6	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xE8
870	 E7	JUMP		 	 
- stack 0: 0x4C4
871	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x4C4
872	 E9	PUSH2	0060	 	 
- stack 1: 0x4C4
- stack 0: 0x60
873	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x4C4
- stack 0: 0x1FFFFFF
874	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x1FFFFFF
- stack 0: 0xFFFFFFFF
875	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x1FFFFFF
876	 F3	PUSH2	03A0	 	 
- stack 2: 0x4C4
- stack 1: 0x1FFFFFF
- stack 0: 0x3A0
877	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C4
- stack 1: 0x1FFFFFF
- stack 0: 0x1FFFFFF
878	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x1FFFFFF
- stack 1: 0x1FFFFFF
- stack 0: 0xFFFFFFFF
879	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C4
- stack 1: 0x1FFFFFF
- stack 0: 0x1FFFFFF
880	 FD	SUB		 	 
- stack 1: 0x4C4
- stack 0: 0x0
881	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x4C4
- stack 1: 0x0
- stack 0: 0x106
882	 101	JUMPI		 	 
- stack 0: 0x4C4
883	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x4C4
- stack 0: 0x120
884	 105	JUMP		 	 
- stack 0: 0x4C4
885	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x4C4
886	 121	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
887	 123	ADD		 	 
- stack 0: 0x4C8
888	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
889	 125	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F
890	 126	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F
- stack 0: 0xF0
891	 128	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x1B4
892	 129	JUMP		 	 
- stack 0: 0x4C8
893	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4C8
894	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
895	 1B6	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F
896	 1B7	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x1B4FFFF0099000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F
- stack 0: 0xE0
897	 1B9	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x1B4FFFF
898	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x1B4FFFF
- stack 0: 0xFFFF
899	 1BD	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFF
900	 1BE	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFF
- stack 0: 0x1
901	 1C0	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
902	 1C1	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
903	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
904	 1C5	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
905	 1C7	ADD		 	 
- stack 0: 0x4CC
906	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
907	 1C9	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x99000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE0001
908	 1CA	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x99000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE0001
- stack 0: 0xF0
909	 1CC	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x99
910	 1CD	JUMP		 	 
- stack 0: 0x4CC
911	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x4CC
912	 9A	PUSH2	0020	 	 
- stack 1: 0x4CC
- stack 0: 0x20
913	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
914	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
915	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4CC
- stack 0: 0xFFFFFFFF
916	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFF
- stack 0: 0x4CC
917	 A5	MLOAD		 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFF
- stack 0: 0x99000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE0001
918	 A6	PUSH1	E0	 	 
- stack 3: 0x4CC
- stack 2: 0xFFFFFFFF
- stack 1: 0x99000E016F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE0001
- stack 0: 0xE0
919	 A8	SHR		 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFF
- stack 0: 0x99000E
920	 A9	PUSH2	FFFF	 	 
- stack 3: 0x4CC
- stack 2: 0xFFFFFFFF
- stack 1: 0x99000E
- stack 0: 0xFFFF
921	 AC	AND		 	 
- stack 2: 0x4CC
- stack 1: 0xFFFFFFFF
- stack 0: 0xE
922	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x4CC
- stack 0: 0x3FFFF
923	 AE	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0x3FFFF
- stack 0: 0x60
924	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x4CC
925	 B2	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
926	 B4	ADD		 	 
- stack 0: 0x4D0
927	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
928	 B6	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x16F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B
929	 B7	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x16F00400150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B
- stack 0: 0xF0
930	 B9	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x16F
931	 BA	JUMP		 	 
- stack 0: 0x4D0
932	 16F	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x4D0
933	 170	PUSH4	00040000	 	 
- stack 1: 0x4D0
- stack 0: 0x40000
934	 175	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0x40000
- stack 0: 0x3A0
935	 178	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D0
936	 179	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
937	 17B	ADD		 	 
- stack 0: 0x4D4
938	 17C	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
939	 17D	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D4
940	 17E	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D4
- stack 0: 0xF0
941	 180	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x150
942	 181	JUMP		 	 
- stack 0: 0x4D4
943	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x4D4
944	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
945	 152	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D4
946	 153	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x150FFFF00CE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D4
- stack 0: 0xE0
947	 155	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x150FFFF
948	 156	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
949	 159	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFF
950	 15A	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFF
- stack 0: 0x1
951	 15C	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
952	 15D	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
953	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40000
954	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x4D4
- stack 0: 0x3FFFF
955	 162	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x3FFFF
- stack 0: 0x3A0
956	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
957	 166	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
958	 168	ADD		 	 
- stack 0: 0x4D8
959	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
960	 16A	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xCE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D401FB1212
961	 16B	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xCE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D401FB1212
- stack 0: 0xF0
962	 16D	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xCE
963	 16E	JUMP		 	 
- stack 0: 0x4D8
964	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D8
965	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
966	 D0	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xCE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D401FB1212
967	 D1	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xCE000A00E801E801B4FFFF0099001F01CE000100CE000B00E801D401FB1212
- stack 0: 0xE0
968	 D3	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xCE000A
969	 D4	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xCE000A
- stack 0: 0xFFFF
970	 D7	AND		 	 
- stack 1: 0x4D8
- stack 0: 0xA
971	 D8	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0xA
- stack 0: 0x1
972	 DA	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0xA
973	 DB	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0xA
- stack 0: 0x380
974	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D8
975	 DF	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
976	 E1	ADD		 	 
- stack 0: 0x4DC
977	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
978	 E3	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0xE801E801B4FFFF0099001F01CE000100CE000B00E801D401FB121201820121
979	 E4	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0xE801E801B4FFFF0099001F01CE000100CE000B00E801D401FB121201820121
- stack 0: 0xF0
980	 E6	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0xE8
981	 E7	JUMP		 	 
- stack 0: 0x4DC
982	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x4DC
983	 E9	PUSH2	0060	 	 
- stack 1: 0x4DC
- stack 0: 0x60
984	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x4DC
- stack 0: 0x3FFFF
985	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x3FFFF
- stack 0: 0xFFFFFFFF
986	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x3FFFF
987	 F3	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x3FFFF
- stack 0: 0x3A0
988	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0x3FFFF
- stack 0: 0x3FFFF
989	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x3FFFF
- stack 1: 0x3FFFF
- stack 0: 0xFFFFFFFF
990	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x3FFFF
- stack 0: 0x3FFFF
991	 FD	SUB		 	 
- stack 1: 0x4DC
- stack 0: 0x0
992	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x106
993	 101	JUMPI		 	 
- stack 0: 0x4DC
994	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x4DC
- stack 0: 0x120
995	 105	JUMP		 	 
- stack 0: 0x4DC
996	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x4DC
997	 121	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
998	 123	ADD		 	 
- stack 0: 0x4E0
999	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1000	 125	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1B4FFFF0099001F01CE000100CE000B00E801D401FB12120182012100990000
1001	 126	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1B4FFFF0099001F01CE000100CE000B00E801D401FB12120182012100990000
- stack 0: 0xF0
1002	 128	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1B4
1003	 129	JUMP		 	 
- stack 0: 0x4E0
1004	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x4E0
1005	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1006	 1B6	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1B4FFFF0099001F01CE000100CE000B00E801D401FB12120182012100990000
1007	 1B7	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x1B4FFFF0099001F01CE000100CE000B00E801D401FB12120182012100990000
- stack 0: 0xE0
1008	 1B9	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1B4FFFF
1009	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1B4FFFF
- stack 0: 0xFFFF
1010	 1BD	AND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFF
1011	 1BE	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFF
- stack 0: 0x1
1012	 1C0	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1013	 1C1	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1014	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E0
1015	 1C5	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1016	 1C7	ADD		 	 
- stack 0: 0x4E4
1017	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1018	 1C9	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x99001F01CE000100CE000B00E801D401FB12120182012100990000020E1212
1019	 1CA	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x99001F01CE000100CE000B00E801D401FB12120182012100990000020E1212
- stack 0: 0xF0
1020	 1CC	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x99
1021	 1CD	JUMP		 	 
- stack 0: 0x4E4
1022	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x4E4
1023	 9A	PUSH2	0020	 	 
- stack 1: 0x4E4
- stack 0: 0x20
1024	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1025	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFF
1026	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFF
1027	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFF
- stack 0: 0x4E4
1028	 A5	MLOAD		 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFF
- stack 0: 0x99001F01CE000100CE000B00E801D401FB12120182012100990000020E1212
1029	 A6	PUSH1	E0	 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFF
- stack 1: 0x99001F01CE000100CE000B00E801D401FB12120182012100990000020E1212
- stack 0: 0xE0
1030	 A8	SHR		 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFF
- stack 0: 0x99001F
1031	 A9	PUSH2	FFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xFFFFFFFF
- stack 1: 0x99001F
- stack 0: 0xFFFF
1032	 AC	AND		 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFF
- stack 0: 0x1F
1033	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x4E4
- stack 0: 0x1
1034	 AE	PUSH2	0060	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x60
1035	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x4E4
1036	 B2	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1037	 B4	ADD		 	 
- stack 0: 0x4E8
1038	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1039	 B6	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1CE000100CE000B00E801D401FB12120182012100990000020E121201500121
1040	 B7	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1CE000100CE000B00E801D401FB12120182012100990000020E121201500121
- stack 0: 0xF0
1041	 B9	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1CE
1042	 BA	JUMP		 	 
- stack 0: 0x4E8
1043	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x4E8
1044	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1045	 1D0	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1CE000100CE000B00E801D401FB12120182012100990000020E121201500121
1046	 1D1	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x1CE000100CE000B00E801D401FB12120182012100990000020E121201500121
- stack 0: 0xE0
1047	 1D3	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1CE0001
1048	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x1CE0001
- stack 0: 0xFFFF
1049	 1D7	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1050	 1D8	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x1
1051	 1DA	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x1
1052	 1DB	PUSH2	03A0	 	 
- stack 2: 0x4E8
- stack 1: 0x1
- stack 0: 0x3A0
1053	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x4E8
1054	 1DF	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1055	 1E1	ADD		 	 
- stack 0: 0x4EC
1056	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1057	 1E3	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xCE000B00E801D401FB12120182012100990000020E12120150012100CE000C
1058	 1E4	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0xCE000B00E801D401FB12120182012100990000020E12120150012100CE000C
- stack 0: 0xF0
1059	 1E6	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xCE
1060	 1E7	JUMP		 	 
- stack 0: 0x4EC
1061	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4EC
1062	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1063	 D0	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xCE000B00E801D401FB12120182012100990000020E12120150012100CE000C
1064	 D1	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xCE000B00E801D401FB12120182012100990000020E12120150012100CE000C
- stack 0: 0xE0
1065	 D3	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xCE000B
1066	 D4	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0xCE000B
- stack 0: 0xFFFF
1067	 D7	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xB
1068	 D8	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xB
- stack 0: 0x1
1069	 DA	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xB
1070	 DB	PUSH2	0380	 	 
- stack 2: 0x4EC
- stack 1: 0xB
- stack 0: 0x380
1071	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x4EC
1072	 DF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1073	 E1	ADD		 	 
- stack 0: 0x4F0
1074	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1075	 E3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xE801D401FB12120182012100990000020E12120150012100CE000C00E801B8
1076	 E4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xE801D401FB12120182012100990000020E12120150012100CE000C00E801B8
- stack 0: 0xF0
1077	 E6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xE8
1078	 E7	JUMP		 	 
- stack 0: 0x4F0
1079	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x4F0
1080	 E9	PUSH2	0060	 	 
- stack 1: 0x4F0
- stack 0: 0x60
1081	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x4F0
- stack 0: 0x1
1082	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1083	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4F0
- stack 0: 0x1
1084	 F3	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x3A0
1085	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x1
1086	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4F0
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1087	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4F0
- stack 1: 0x1
- stack 0: 0x1
1088	 FD	SUB		 	 
- stack 1: 0x4F0
- stack 0: 0x0
1089	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x106
1090	 101	JUMPI		 	 
- stack 0: 0x4F0
1091	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x4F0
- stack 0: 0x120
1092	 105	JUMP		 	 
- stack 0: 0x4F0
1093	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x4F0
1094	 121	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1095	 123	ADD		 	 
- stack 0: 0x4F4
1096	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1097	 125	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x1FB12120182012100990000020E12120150012100CE000C00E801B801FB1212
1098	 126	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x1FB12120182012100990000020E12120150012100CE000C00E801B801FB1212
- stack 0: 0xF0
1099	 128	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x1FB
1100	 129	JUMP		 	 
- stack 0: 0x4F4
1101	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x4F4
1102	 1FC	PUSH4	21212000	 	 
- stack 1: 0x4F4
- stack 0: 0x21212000
1103	 201	PUSH2	0020	 	 
- stack 2: 0x4F4
- stack 1: 0x21212000
- stack 0: 0x20
1104	 204	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F4
1105	 205	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1106	 207	ADD		 	 
- stack 0: 0x4F8
1107	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1108	 209	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x182012100990000020E12120150012100CE000C00E801B801FB121201820121
1109	 20A	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x182012100990000020E12120150012100CE000C00E801B801FB121201820121
- stack 0: 0xF0
1110	 20C	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x182
1111	 20D	JUMP		 	 
- stack 0: 0x4F8
1112	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x4F8
1113	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1114	 184	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x182012100990000020E12120150012100CE000C00E801B801FB121201820121
1115	 185	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x182012100990000020E12120150012100CE000C00E801B801FB121201820121
- stack 0: 0xE0
1116	 187	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1820121
1117	 188	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1820121
- stack 0: 0xFFFF
1118	 18B	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x121
1119	 18C	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x1
1120	 18E	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x121
1121	 18F	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x20
1122	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F8
- stack 1: 0x121
- stack 0: 0x21212000
1123	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x4F8
- stack 0: 0x21212121
1124	 194	PUSH2	0020	 	 
- stack 2: 0x4F8
- stack 1: 0x21212121
- stack 0: 0x20
1125	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F8
1126	 198	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1127	 19A	ADD		 	 
- stack 0: 0x4FC
1128	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1129	 19C	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x990000020E12120150012100CE000C00E801B801FB12120182012100990001
1130	 19D	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x990000020E12120150012100CE000C00E801B801FB12120182012100990001
- stack 0: 0xF0
1131	 19F	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x99
1132	 1A0	JUMP		 	 
- stack 0: 0x4FC
1133	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x4FC
1134	 9A	PUSH2	0020	 	 
- stack 1: 0x4FC
- stack 0: 0x20
1135	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x4FC
- stack 0: 0x21212121
1136	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1137	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x21212121
1138	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x4FC
1139	 A5	MLOAD		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x990000020E12120150012100CE000C00E801B801FB12120182012100990001
1140	 A6	PUSH1	E0	 	 
- stack 3: 0x4FC
- stack 2: 0x21212121
- stack 1: 0x990000020E12120150012100CE000C00E801B801FB12120182012100990001
- stack 0: 0xE0
1141	 A8	SHR		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x990000
1142	 A9	PUSH2	FFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x21212121
- stack 1: 0x990000
- stack 0: 0xFFFF
1143	 AC	AND		 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x0
1144	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x4FC
- stack 0: 0x21212121
1145	 AE	PUSH2	0060	 	 
- stack 2: 0x4FC
- stack 1: 0x21212121
- stack 0: 0x60
1146	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x4FC
1147	 B2	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1148	 B4	ADD		 	 
- stack 0: 0x500
1149	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1150	 B6	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x20E12120150012100CE000C00E801B801FB1212018201210099000102210909
1151	 B7	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x20E12120150012100CE000C00E801B801FB1212018201210099000102210909
- stack 0: 0xF0
1152	 B9	SHR		 	 
- stack 1: 0x500
- stack 0: 0x20E
1153	 BA	JUMP		 	 
- stack 0: 0x500
1154	 20E	JUMPDEST		 ;; __riscvimpl_LUI_21212eb7	  ;; # instr: lui t4,0x21212(ignore imm)
- stack 0: 0x500
1155	 20F	PUSH4	21212000	 	 
- stack 1: 0x500
- stack 0: 0x21212000
1156	 214	PUSH2	03A0	 	 
- stack 2: 0x500
- stack 1: 0x21212000
- stack 0: 0x3A0
1157	 217	MSTORE		 	  ;; # store to x29
- stack 0: 0x500
1158	 218	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1159	 21A	ADD		 	 
- stack 0: 0x504
1160	 21B	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1161	 21C	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x150012100CE000C00E801B801FB121201820121009900010221090901500090
1162	 21D	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x150012100CE000C00E801B801FB121201820121009900010221090901500090
- stack 0: 0xF0
1163	 21F	SHR		 	 
- stack 1: 0x504
- stack 0: 0x150
1164	 220	JUMP		 	 
- stack 0: 0x504
1165	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x504
1166	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1167	 152	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x150012100CE000C00E801B801FB121201820121009900010221090901500090
1168	 153	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x150012100CE000C00E801B801FB121201820121009900010221090901500090
- stack 0: 0xE0
1169	 155	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1500121
1170	 156	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x1500121
- stack 0: 0xFFFF
1171	 159	AND		 	 
- stack 1: 0x504
- stack 0: 0x121
1172	 15A	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x1
1173	 15C	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x121
1174	 15D	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x3A0
1175	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x504
- stack 1: 0x121
- stack 0: 0x21212000
1176	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x504
- stack 0: 0x21212121
1177	 162	PUSH2	03A0	 	 
- stack 2: 0x504
- stack 1: 0x21212121
- stack 0: 0x3A0
1178	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x504
1179	 166	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1180	 168	ADD		 	 
- stack 0: 0x508
1181	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1182	 16A	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xCE000C00E801B801FB12120182012100990001022109090150009000CE000D
1183	 16B	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0xCE000C00E801B801FB12120182012100990001022109090150009000CE000D
- stack 0: 0xF0
1184	 16D	SHR		 	 
- stack 1: 0x508
- stack 0: 0xCE
1185	 16E	JUMP		 	 
- stack 0: 0x508
1186	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x508
1187	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1188	 D0	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0xCE000C00E801B801FB12120182012100990001022109090150009000CE000D
1189	 D1	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0xCE000C00E801B801FB12120182012100990001022109090150009000CE000D
- stack 0: 0xE0
1190	 D3	SHR		 	 
- stack 1: 0x508
- stack 0: 0xCE000C
1191	 D4	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0xCE000C
- stack 0: 0xFFFF
1192	 D7	AND		 	 
- stack 1: 0x508
- stack 0: 0xC
1193	 D8	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x1
1194	 DA	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xC
1195	 DB	PUSH2	0380	 	 
- stack 2: 0x508
- stack 1: 0xC
- stack 0: 0x380
1196	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x508
1197	 DF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1198	 E1	ADD		 	 
- stack 0: 0x50C
1199	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1200	 E3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xE801B801FB12120182012100990001022109090150009000CE000D00E8019C
1201	 E4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xE801B801FB12120182012100990001022109090150009000CE000D00E8019C
- stack 0: 0xF0
1202	 E6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xE8
1203	 E7	JUMP		 	 
- stack 0: 0x50C
1204	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x50C
1205	 E9	PUSH2	0060	 	 
- stack 1: 0x50C
- stack 0: 0x60
1206	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x50C
- stack 0: 0x21212121
1207	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1208	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x50C
- stack 0: 0x21212121
1209	 F3	PUSH2	03A0	 	 
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x3A0
1210	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x21212121
1211	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x50C
- stack 2: 0x21212121
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1212	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x50C
- stack 1: 0x21212121
- stack 0: 0x21212121
1213	 FD	SUB		 	 
- stack 1: 0x50C
- stack 0: 0x0
1214	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x50C
- stack 1: 0x0
- stack 0: 0x106
1215	 101	JUMPI		 	 
- stack 0: 0x50C
1216	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x50C
- stack 0: 0x120
1217	 105	JUMP		 	 
- stack 0: 0x50C
1218	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x50C
1219	 121	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1220	 123	ADD		 	 
- stack 0: 0x510
1221	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1222	 125	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x1FB12120182012100990001022109090150009000CE000D00E8019C01FB1212
1223	 126	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x1FB12120182012100990001022109090150009000CE000D00E8019C01FB1212
- stack 0: 0xF0
1224	 128	SHR		 	 
- stack 1: 0x510
- stack 0: 0x1FB
1225	 129	JUMP		 	 
- stack 0: 0x510
1226	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x510
1227	 1FC	PUSH4	21212000	 	 
- stack 1: 0x510
- stack 0: 0x21212000
1228	 201	PUSH2	0020	 	 
- stack 2: 0x510
- stack 1: 0x21212000
- stack 0: 0x20
1229	 204	MSTORE		 	  ;; # store to x1
- stack 0: 0x510
1230	 205	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1231	 207	ADD		 	 
- stack 0: 0x514
1232	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1233	 209	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x182012100990001022109090150009000CE000D00E8019C01FB121201820121
1234	 20A	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x182012100990001022109090150009000CE000D00E8019C01FB121201820121
- stack 0: 0xF0
1235	 20C	SHR		 	 
- stack 1: 0x514
- stack 0: 0x182
1236	 20D	JUMP		 	 
- stack 0: 0x514
1237	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x514
1238	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1239	 184	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x182012100990001022109090150009000CE000D00E8019C01FB121201820121
1240	 185	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x182012100990001022109090150009000CE000D00E8019C01FB121201820121
- stack 0: 0xE0
1241	 187	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1820121
1242	 188	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1820121
- stack 0: 0xFFFF
1243	 18B	AND		 	 
- stack 1: 0x514
- stack 0: 0x121
1244	 18C	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x1
1245	 18E	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x121
1246	 18F	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x20
1247	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0x121
- stack 0: 0x21212000
1248	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x514
- stack 0: 0x21212121
1249	 194	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0x21212121
- stack 0: 0x20
1250	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x514
1251	 198	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1252	 19A	ADD		 	 
- stack 0: 0x518
1253	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1254	 19C	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x990001022109090150009000CE000D00E8019C01FB12120182012100990007
1255	 19D	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x990001022109090150009000CE000D00E8019C01FB12120182012100990007
- stack 0: 0xF0
1256	 19F	SHR		 	 
- stack 1: 0x518
- stack 0: 0x99
1257	 1A0	JUMP		 	 
- stack 0: 0x518
1258	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x518
1259	 9A	PUSH2	0020	 	 
- stack 1: 0x518
- stack 0: 0x20
1260	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x518
- stack 0: 0x21212121
1261	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1262	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x518
- stack 0: 0x21212121
1263	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x518
1264	 A5	MLOAD		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x990001022109090150009000CE000D00E8019C01FB12120182012100990007
1265	 A6	PUSH1	E0	 	 
- stack 3: 0x518
- stack 2: 0x21212121
- stack 1: 0x990001022109090150009000CE000D00E8019C01FB12120182012100990007
- stack 0: 0xE0
1266	 A8	SHR		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x990001
1267	 A9	PUSH2	FFFF	 	 
- stack 3: 0x518
- stack 2: 0x21212121
- stack 1: 0x990001
- stack 0: 0xFFFF
1268	 AC	AND		 	 
- stack 2: 0x518
- stack 1: 0x21212121
- stack 0: 0x1
1269	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x518
- stack 0: 0x10909090
1270	 AE	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x10909090
- stack 0: 0x60
1271	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x518
1272	 B2	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1273	 B4	ADD		 	 
- stack 0: 0x51C
1274	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1275	 B6	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x22109090150009000CE000D00E8019C01FB1212018201210099000702340424
1276	 B7	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x22109090150009000CE000D00E8019C01FB1212018201210099000702340424
- stack 0: 0xF0
1277	 B9	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x221
1278	 BA	JUMP		 	 
- stack 0: 0x51C
1279	 221	JUMPDEST		 ;; __riscvimpl_LUI_10909eb7	  ;; # instr: lui t4,0x10909(ignore imm)
- stack 0: 0x51C
1280	 222	PUSH4	10909000	 	 
- stack 1: 0x51C
- stack 0: 0x10909000
1281	 227	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x10909000
- stack 0: 0x3A0
1282	 22A	MSTORE		 	  ;; # store to x29
- stack 0: 0x51C
1283	 22B	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1284	 22D	ADD		 	 
- stack 0: 0x520
1285	 22E	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1286	 22F	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x150009000CE000D00E8019C01FB121201820121009900070234042401500242
1287	 230	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x150009000CE000D00E8019C01FB121201820121009900070234042401500242
- stack 0: 0xF0
1288	 232	SHR		 	 
- stack 1: 0x520
- stack 0: 0x150
1289	 233	JUMP		 	 
- stack 0: 0x520
1290	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x520
1291	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1292	 152	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x150009000CE000D00E8019C01FB121201820121009900070234042401500242
1293	 153	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x150009000CE000D00E8019C01FB121201820121009900070234042401500242
- stack 0: 0xE0
1294	 155	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1500090
1295	 156	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1500090
- stack 0: 0xFFFF
1296	 159	AND		 	 
- stack 1: 0x520
- stack 0: 0x90
1297	 15A	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x90
- stack 0: 0x1
1298	 15C	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x90
1299	 15D	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x90
- stack 0: 0x3A0
1300	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x520
- stack 1: 0x90
- stack 0: 0x10909000
1301	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x520
- stack 0: 0x10909090
1302	 162	PUSH2	03A0	 	 
- stack 2: 0x520
- stack 1: 0x10909090
- stack 0: 0x3A0
1303	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x520
1304	 166	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1305	 168	ADD		 	 
- stack 0: 0x524
1306	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1307	 16A	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xCE000D00E8019C01FB12120182012100990007023404240150024200CE000E
1308	 16B	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0xCE000D00E8019C01FB12120182012100990007023404240150024200CE000E
- stack 0: 0xF0
1309	 16D	SHR		 	 
- stack 1: 0x524
- stack 0: 0xCE
1310	 16E	JUMP		 	 
- stack 0: 0x524
1311	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x524
1312	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1313	 D0	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0xCE000D00E8019C01FB12120182012100990007023404240150024200CE000E
1314	 D1	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0xCE000D00E8019C01FB12120182012100990007023404240150024200CE000E
- stack 0: 0xE0
1315	 D3	SHR		 	 
- stack 1: 0x524
- stack 0: 0xCE000D
1316	 D4	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0xCE000D
- stack 0: 0xFFFF
1317	 D7	AND		 	 
- stack 1: 0x524
- stack 0: 0xD
1318	 D8	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xD
- stack 0: 0x1
1319	 DA	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xD
1320	 DB	PUSH2	0380	 	 
- stack 2: 0x524
- stack 1: 0xD
- stack 0: 0x380
1321	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x524
1322	 DF	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1323	 E1	ADD		 	 
- stack 0: 0x528
1324	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1325	 E3	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0xE8019C01FB12120182012100990007023404240150024200CE000E00E80180
1326	 E4	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0xE8019C01FB12120182012100990007023404240150024200CE000E00E80180
- stack 0: 0xF0
1327	 E6	SHR		 	 
- stack 1: 0x528
- stack 0: 0xE8
1328	 E7	JUMP		 	 
- stack 0: 0x528
1329	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x528
1330	 E9	PUSH2	0060	 	 
- stack 1: 0x528
- stack 0: 0x60
1331	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x528
- stack 0: 0x10909090
1332	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x528
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
1333	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x528
- stack 0: 0x10909090
1334	 F3	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0x10909090
- stack 0: 0x3A0
1335	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x528
- stack 1: 0x10909090
- stack 0: 0x10909090
1336	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x528
- stack 2: 0x10909090
- stack 1: 0x10909090
- stack 0: 0xFFFFFFFF
1337	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x528
- stack 1: 0x10909090
- stack 0: 0x10909090
1338	 FD	SUB		 	 
- stack 1: 0x528
- stack 0: 0x0
1339	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x528
- stack 1: 0x0
- stack 0: 0x106
1340	 101	JUMPI		 	 
- stack 0: 0x528
1341	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x528
- stack 0: 0x120
1342	 105	JUMP		 	 
- stack 0: 0x528
1343	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x528
1344	 121	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1345	 123	ADD		 	 
- stack 0: 0x52C
1346	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1347	 125	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x1FB12120182012100990007023404240150024200CE000E00E8018001FB1212
1348	 126	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x1FB12120182012100990007023404240150024200CE000E00E8018001FB1212
- stack 0: 0xF0
1349	 128	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x1FB
1350	 129	JUMP		 	 
- stack 0: 0x52C
1351	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x52C
1352	 1FC	PUSH4	21212000	 	 
- stack 1: 0x52C
- stack 0: 0x21212000
1353	 201	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x21212000
- stack 0: 0x20
1354	 204	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1355	 205	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1356	 207	ADD		 	 
- stack 0: 0x530
1357	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1358	 209	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x182012100990007023404240150024200CE000E00E8018001FB121201820121
1359	 20A	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x182012100990007023404240150024200CE000E00E8018001FB121201820121
- stack 0: 0xF0
1360	 20C	SHR		 	 
- stack 1: 0x530
- stack 0: 0x182
1361	 20D	JUMP		 	 
- stack 0: 0x530
1362	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x530
1363	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1364	 184	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x182012100990007023404240150024200CE000E00E8018001FB121201820121
1365	 185	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x182012100990007023404240150024200CE000E00E8018001FB121201820121
- stack 0: 0xE0
1366	 187	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1820121
1367	 188	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1820121
- stack 0: 0xFFFF
1368	 18B	AND		 	 
- stack 1: 0x530
- stack 0: 0x121
1369	 18C	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x1
1370	 18E	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x121
1371	 18F	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x20
1372	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x530
- stack 1: 0x121
- stack 0: 0x21212000
1373	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x530
- stack 0: 0x21212121
1374	 194	PUSH2	0020	 	 
- stack 2: 0x530
- stack 1: 0x21212121
- stack 0: 0x20
1375	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x530
1376	 198	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1377	 19A	ADD		 	 
- stack 0: 0x534
1378	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1379	 19C	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x990007023404240150024200CE000E00E8018001FB1212018201210099000E
1380	 19D	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x990007023404240150024200CE000E00E8018001FB1212018201210099000E
- stack 0: 0xF0
1381	 19F	SHR		 	 
- stack 1: 0x534
- stack 0: 0x99
1382	 1A0	JUMP		 	 
- stack 0: 0x534
1383	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x534
1384	 9A	PUSH2	0020	 	 
- stack 1: 0x534
- stack 0: 0x20
1385	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x534
- stack 0: 0x21212121
1386	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1387	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0x21212121
1388	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0x534
1389	 A5	MLOAD		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0x990007023404240150024200CE000E00E8018001FB1212018201210099000E
1390	 A6	PUSH1	E0	 	 
- stack 3: 0x534
- stack 2: 0x21212121
- stack 1: 0x990007023404240150024200CE000E00E8018001FB1212018201210099000E
- stack 0: 0xE0
1391	 A8	SHR		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0x990007
1392	 A9	PUSH2	FFFF	 	 
- stack 3: 0x534
- stack 2: 0x21212121
- stack 1: 0x990007
- stack 0: 0xFFFF
1393	 AC	AND		 	 
- stack 2: 0x534
- stack 1: 0x21212121
- stack 0: 0x7
1394	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x534
- stack 0: 0x424242
1395	 AE	PUSH2	0060	 	 
- stack 2: 0x534
- stack 1: 0x424242
- stack 0: 0x60
1396	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x534
1397	 B2	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1398	 B4	ADD		 	 
- stack 0: 0x538
1399	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1400	 B6	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x23404240150024200CE000E00E8018001FB1212018201210099000E02470008
1401	 B7	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x23404240150024200CE000E00E8018001FB1212018201210099000E02470008
- stack 0: 0xF0
1402	 B9	SHR		 	 
- stack 1: 0x538
- stack 0: 0x234
1403	 BA	JUMP		 	 
- stack 0: 0x538
1404	 234	JUMPDEST		 ;; __riscvimpl_LUI_424eb7	  ;; # instr: lui t4,0x424(ignore imm)
- stack 0: 0x538
1405	 235	PUSH4	00424000	 	 
- stack 1: 0x538
- stack 0: 0x424000
1406	 23A	PUSH2	03A0	 	 
- stack 2: 0x538
- stack 1: 0x424000
- stack 0: 0x3A0
1407	 23D	MSTORE		 	  ;; # store to x29
- stack 0: 0x538
1408	 23E	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1409	 240	ADD		 	 
- stack 0: 0x53C
1410	 241	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1411	 242	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x150024200CE000E00E8018001FB1212018201210099000E0247000801500484
1412	 243	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x150024200CE000E00E8018001FB1212018201210099000E0247000801500484
- stack 0: 0xF0
1413	 245	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x150
1414	 246	JUMP		 	 
- stack 0: 0x53C
1415	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x53C
1416	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x53C
- stack 0: 0x53C
1417	 152	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x150024200CE000E00E8018001FB1212018201210099000E0247000801500484
1418	 153	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0x150024200CE000E00E8018001FB1212018201210099000E0247000801500484
- stack 0: 0xE0
1419	 155	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x1500242
1420	 156	PUSH2	FFFF	 	 
- stack 2: 0x53C
- stack 1: 0x1500242
- stack 0: 0xFFFF
1421	 159	AND		 	 
- stack 1: 0x53C
- stack 0: 0x242
1422	 15A	PUSH1	01	 	 
- stack 2: 0x53C
- stack 1: 0x242
- stack 0: 0x1
1423	 15C	SIGNEXTEND		 	 
- stack 1: 0x53C
- stack 0: 0x242
1424	 15D	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x242
- stack 0: 0x3A0
1425	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0x242
- stack 0: 0x424000
1426	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x53C
- stack 0: 0x424242
1427	 162	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x424242
- stack 0: 0x3A0
1428	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x53C
1429	 166	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1430	 168	ADD		 	 
- stack 0: 0x540
1431	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1432	 16A	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xCE000E00E8018001FB1212018201210099000E024700080150048400CE000F
1433	 16B	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0xCE000E00E8018001FB1212018201210099000E024700080150048400CE000F
- stack 0: 0xF0
1434	 16D	SHR		 	 
- stack 1: 0x540
- stack 0: 0xCE
1435	 16E	JUMP		 	 
- stack 0: 0x540
1436	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x540
1437	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1438	 D0	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0xCE000E00E8018001FB1212018201210099000E024700080150048400CE000F
1439	 D1	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0xCE000E00E8018001FB1212018201210099000E024700080150048400CE000F
- stack 0: 0xE0
1440	 D3	SHR		 	 
- stack 1: 0x540
- stack 0: 0xCE000E
1441	 D4	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0xCE000E
- stack 0: 0xFFFF
1442	 D7	AND		 	 
- stack 1: 0x540
- stack 0: 0xE
1443	 D8	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xE
- stack 0: 0x1
1444	 DA	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xE
1445	 DB	PUSH2	0380	 	 
- stack 2: 0x540
- stack 1: 0xE
- stack 0: 0x380
1446	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x540
1447	 DF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1448	 E1	ADD		 	 
- stack 0: 0x544
1449	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1450	 E3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xE8018001FB1212018201210099000E024700080150048400CE000F00E80164
1451	 E4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xE8018001FB1212018201210099000E024700080150048400CE000F00E80164
- stack 0: 0xF0
1452	 E6	SHR		 	 
- stack 1: 0x544
- stack 0: 0xE8
1453	 E7	JUMP		 	 
- stack 0: 0x544
1454	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x544
1455	 E9	PUSH2	0060	 	 
- stack 1: 0x544
- stack 0: 0x60
1456	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x544
- stack 0: 0x424242
1457	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x544
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
1458	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x544
- stack 0: 0x424242
1459	 F3	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0x424242
- stack 0: 0x3A0
1460	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0x424242
- stack 0: 0x424242
1461	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x544
- stack 2: 0x424242
- stack 1: 0x424242
- stack 0: 0xFFFFFFFF
1462	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x544
- stack 1: 0x424242
- stack 0: 0x424242
1463	 FD	SUB		 	 
- stack 1: 0x544
- stack 0: 0x0
1464	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x544
- stack 1: 0x0
- stack 0: 0x106
1465	 101	JUMPI		 	 
- stack 0: 0x544
1466	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x544
- stack 0: 0x120
1467	 105	JUMP		 	 
- stack 0: 0x544
1468	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x544
1469	 121	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1470	 123	ADD		 	 
- stack 0: 0x548
1471	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1472	 125	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x1FB1212018201210099000E024700080150048400CE000F00E8016401FB1212
1473	 126	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x1FB1212018201210099000E024700080150048400CE000F00E8016401FB1212
- stack 0: 0xF0
1474	 128	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1FB
1475	 129	JUMP		 	 
- stack 0: 0x548
1476	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x548
1477	 1FC	PUSH4	21212000	 	 
- stack 1: 0x548
- stack 0: 0x21212000
1478	 201	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0x21212000
- stack 0: 0x20
1479	 204	MSTORE		 	  ;; # store to x1
- stack 0: 0x548
1480	 205	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1481	 207	ADD		 	 
- stack 0: 0x54C
1482	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1483	 209	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x18201210099000E024700080150048400CE000F00E8016401FB121201820121
1484	 20A	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x18201210099000E024700080150048400CE000F00E8016401FB121201820121
- stack 0: 0xF0
1485	 20C	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x182
1486	 20D	JUMP		 	 
- stack 0: 0x54C
1487	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x54C
1488	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1489	 184	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x18201210099000E024700080150048400CE000F00E8016401FB121201820121
1490	 185	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x18201210099000E024700080150048400CE000F00E8016401FB121201820121
- stack 0: 0xE0
1491	 187	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1820121
1492	 188	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x1820121
- stack 0: 0xFFFF
1493	 18B	AND		 	 
- stack 1: 0x54C
- stack 0: 0x121
1494	 18C	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x121
- stack 0: 0x1
1495	 18E	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x121
1496	 18F	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x121
- stack 0: 0x20
1497	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0x121
- stack 0: 0x21212000
1498	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x54C
- stack 0: 0x21212121
1499	 194	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0x21212121
- stack 0: 0x20
1500	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x54C
1501	 198	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1502	 19A	ADD		 	 
- stack 0: 0x550
1503	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1504	 19C	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x99000E024700080150048400CE000F00E8016401FB1212018201210099001F
1505	 19D	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x99000E024700080150048400CE000F00E8016401FB1212018201210099001F
- stack 0: 0xF0
1506	 19F	SHR		 	 
- stack 1: 0x550
- stack 0: 0x99
1507	 1A0	JUMP		 	 
- stack 0: 0x550
1508	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x550
1509	 9A	PUSH2	0020	 	 
- stack 1: 0x550
- stack 0: 0x20
1510	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x550
- stack 0: 0x21212121
1511	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1512	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0x21212121
1513	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x550
- stack 1: 0x21212121
- stack 0: 0x550
1514	 A5	MLOAD		 	 
- stack 2: 0x550
- stack 1: 0x21212121
- stack 0: 0x99000E024700080150048400CE000F00E8016401FB1212018201210099001F
1515	 A6	PUSH1	E0	 	 
- stack 3: 0x550
- stack 2: 0x21212121
- stack 1: 0x99000E024700080150048400CE000F00E8016401FB1212018201210099001F
- stack 0: 0xE0
1516	 A8	SHR		 	 
- stack 2: 0x550
- stack 1: 0x21212121
- stack 0: 0x99000E
1517	 A9	PUSH2	FFFF	 	 
- stack 3: 0x550
- stack 2: 0x21212121
- stack 1: 0x99000E
- stack 0: 0xFFFF
1518	 AC	AND		 	 
- stack 2: 0x550
- stack 1: 0x21212121
- stack 0: 0xE
1519	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x550
- stack 0: 0x8484
1520	 AE	PUSH2	0060	 	 
- stack 2: 0x550
- stack 1: 0x8484
- stack 0: 0x60
1521	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x550
1522	 B2	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1523	 B4	ADD		 	 
- stack 0: 0x554
1524	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1525	 B6	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x24700080150048400CE000F00E8016401FB1212018201210099001F01CE0000
1526	 B7	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x24700080150048400CE000F00E8016401FB1212018201210099001F01CE0000
- stack 0: 0xF0
1527	 B9	SHR		 	 
- stack 1: 0x554
- stack 0: 0x247
1528	 BA	JUMP		 	 
- stack 0: 0x554
1529	 247	JUMPDEST		 ;; __riscvimpl_LUI_8eb7	  ;; # instr: lui t4,0x8(ignore imm)
- stack 0: 0x554
1530	 248	PUSH4	00008000	 	 
- stack 1: 0x554
- stack 0: 0x8000
1531	 24D	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x8000
- stack 0: 0x3A0
1532	 250	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
1533	 251	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1534	 253	ADD		 	 
- stack 0: 0x558
1535	 254	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1536	 255	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x150048400CE000F00E8016401FB1212018201210099001F01CE000000CE0010
1537	 256	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x150048400CE000F00E8016401FB1212018201210099001F01CE000000CE0010
- stack 0: 0xF0
1538	 258	SHR		 	 
- stack 1: 0x558
- stack 0: 0x150
1539	 259	JUMP		 	 
- stack 0: 0x558
1540	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x558
1541	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1542	 152	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x150048400CE000F00E8016401FB1212018201210099001F01CE000000CE0010
1543	 153	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x150048400CE000F00E8016401FB1212018201210099001F01CE000000CE0010
- stack 0: 0xE0
1544	 155	SHR		 	 
- stack 1: 0x558
- stack 0: 0x1500484
1545	 156	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x1500484
- stack 0: 0xFFFF
1546	 159	AND		 	 
- stack 1: 0x558
- stack 0: 0x484
1547	 15A	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x484
- stack 0: 0x1
1548	 15C	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x484
1549	 15D	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0x484
- stack 0: 0x3A0
1550	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0x484
- stack 0: 0x8000
1551	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x558
- stack 0: 0x8484
1552	 162	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0x8484
- stack 0: 0x3A0
1553	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x558
1554	 166	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1555	 168	ADD		 	 
- stack 0: 0x55C
1556	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1557	 16A	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xCE000F00E8016401FB1212018201210099001F01CE000000CE001000E8014C
1558	 16B	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xCE000F00E8016401FB1212018201210099001F01CE000000CE001000E8014C
- stack 0: 0xF0
1559	 16D	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xCE
1560	 16E	JUMP		 	 
- stack 0: 0x55C
1561	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x55C
1562	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1563	 D0	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xCE000F00E8016401FB1212018201210099001F01CE000000CE001000E8014C
1564	 D1	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xCE000F00E8016401FB1212018201210099001F01CE000000CE001000E8014C
- stack 0: 0xE0
1565	 D3	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xCE000F
1566	 D4	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xCE000F
- stack 0: 0xFFFF
1567	 D7	AND		 	 
- stack 1: 0x55C
- stack 0: 0xF
1568	 D8	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xF
- stack 0: 0x1
1569	 DA	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xF
1570	 DB	PUSH2	0380	 	 
- stack 2: 0x55C
- stack 1: 0xF
- stack 0: 0x380
1571	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x55C
1572	 DF	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1573	 E1	ADD		 	 
- stack 0: 0x560
1574	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1575	 E3	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xE8016401FB1212018201210099001F01CE000000CE001000E8014C0086FFF8
1576	 E4	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xE8016401FB1212018201210099001F01CE000000CE001000E8014C0086FFF8
- stack 0: 0xF0
1577	 E6	SHR		 	 
- stack 1: 0x560
- stack 0: 0xE8
1578	 E7	JUMP		 	 
- stack 0: 0x560
1579	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x560
1580	 E9	PUSH2	0060	 	 
- stack 1: 0x560
- stack 0: 0x60
1581	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x560
- stack 0: 0x8484
1582	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
1583	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x8484
1584	 F3	PUSH2	03A0	 	 
- stack 2: 0x560
- stack 1: 0x8484
- stack 0: 0x3A0
1585	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x560
- stack 1: 0x8484
- stack 0: 0x8484
1586	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x8484
- stack 1: 0x8484
- stack 0: 0xFFFFFFFF
1587	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x8484
- stack 0: 0x8484
1588	 FD	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
1589	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x106
1590	 101	JUMPI		 	 
- stack 0: 0x560
1591	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x560
- stack 0: 0x120
1592	 105	JUMP		 	 
- stack 0: 0x560
1593	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x560
1594	 121	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1595	 123	ADD		 	 
- stack 0: 0x564
1596	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1597	 125	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1FB1212018201210099001F01CE000000CE001000E8014C0086FFF8025A0001
1598	 126	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1FB1212018201210099001F01CE000000CE001000E8014C0086FFF8025A0001
- stack 0: 0xF0
1599	 128	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1FB
1600	 129	JUMP		 	 
- stack 0: 0x564
1601	 1FB	JUMPDEST		 ;; __riscvimpl_LUI_212120b7	  ;; # instr: lui ra,0x21212(ignore imm)
- stack 0: 0x564
1602	 1FC	PUSH4	21212000	 	 
- stack 1: 0x564
- stack 0: 0x21212000
1603	 201	PUSH2	0020	 	 
- stack 2: 0x564
- stack 1: 0x21212000
- stack 0: 0x20
1604	 204	MSTORE		 	  ;; # store to x1
- stack 0: 0x564
1605	 205	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1606	 207	ADD		 	 
- stack 0: 0x568
1607	 208	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1608	 209	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18201210099001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC
1609	 20A	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x18201210099001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC
- stack 0: 0xF0
1610	 20C	SHR		 	 
- stack 1: 0x568
- stack 0: 0x182
1611	 20D	JUMP		 	 
- stack 0: 0x568
1612	 182	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1(ignore imm)
- stack 0: 0x568
1613	 183	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1614	 184	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x18201210099001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC
1615	 185	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x18201210099001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC
- stack 0: 0xE0
1616	 187	SHR		 	 
- stack 1: 0x568
- stack 0: 0x1820121
1617	 188	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x1820121
- stack 0: 0xFFFF
1618	 18B	AND		 	 
- stack 1: 0x568
- stack 0: 0x121
1619	 18C	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0x121
- stack 0: 0x1
1620	 18E	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0x121
1621	 18F	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x121
- stack 0: 0x20
1622	 192	MLOAD		 	  ;; # read from x1
- stack 2: 0x568
- stack 1: 0x121
- stack 0: 0x21212000
1623	 193	ADD		 	  ;; # ADDI 1
- stack 1: 0x568
- stack 0: 0x21212121
1624	 194	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0x21212121
- stack 0: 0x20
1625	 197	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
1626	 198	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1627	 19A	ADD		 	 
- stack 0: 0x56C
1628	 19B	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1629	 19C	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x99001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015
1630	 19D	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x99001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015
- stack 0: 0xF0
1631	 19F	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x99
1632	 1A0	JUMP		 	 
- stack 0: 0x56C
1633	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x56C
1634	 9A	PUSH2	0020	 	 
- stack 1: 0x56C
- stack 0: 0x20
1635	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x56C
- stack 0: 0x21212121
1636	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0xFFFFFFFF
1637	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0x21212121
1638	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0x56C
1639	 A5	MLOAD		 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0x99001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015
1640	 A6	PUSH1	E0	 	 
- stack 3: 0x56C
- stack 2: 0x21212121
- stack 1: 0x99001F01CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015
- stack 0: 0xE0
1641	 A8	SHR		 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0x99001F
1642	 A9	PUSH2	FFFF	 	 
- stack 3: 0x56C
- stack 2: 0x21212121
- stack 1: 0x99001F
- stack 0: 0xFFFF
1643	 AC	AND		 	 
- stack 2: 0x56C
- stack 1: 0x21212121
- stack 0: 0x1F
1644	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x56C
- stack 0: 0x0
1645	 AE	PUSH2	0060	 	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x60
1646	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x56C
1647	 B2	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1648	 B4	ADD		 	 
- stack 0: 0x570
1649	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1650	 B6	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C0138
1651	 B7	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x1CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C0138
- stack 0: 0xF0
1652	 B9	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1CE
1653	 BA	JUMP		 	 
- stack 0: 0x570
1654	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x570
1655	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1656	 1D0	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x1CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C0138
1657	 1D1	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x1CE000000CE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C0138
- stack 0: 0xE0
1658	 1D3	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1CE0000
1659	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
1660	 1D7	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
1661	 1D8	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
1662	 1DA	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
1663	 1DB	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x3A0
1664	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
1665	 1DF	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1666	 1E1	ADD		 	 
- stack 0: 0x574
1667	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1668	 1E3	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xCE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE0000
1669	 1E4	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xCE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE0000
- stack 0: 0xF0
1670	 1E6	SHR		 	 
- stack 1: 0x574
- stack 0: 0xCE
1671	 1E7	JUMP		 	 
- stack 0: 0x574
1672	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x574
1673	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1674	 D0	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xCE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE0000
1675	 D1	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xCE001000E8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE0000
- stack 0: 0xE0
1676	 D3	SHR		 	 
- stack 1: 0x574
- stack 0: 0xCE0010
1677	 D4	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xCE0010
- stack 0: 0xFFFF
1678	 D7	AND		 	 
- stack 1: 0x574
- stack 0: 0x10
1679	 D8	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x10
- stack 0: 0x1
1680	 DA	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x10
1681	 DB	PUSH2	0380	 	 
- stack 2: 0x574
- stack 1: 0x10
- stack 0: 0x380
1682	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x574
1683	 DF	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1684	 E1	ADD		 	 
- stack 0: 0x578
1685	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1686	 E3	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xE8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE00000086FFF8
1687	 E4	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xE8014C0086FFF8025A0001012AFFFC00CE0015027C013802BE00000086FFF8
- stack 0: 0xF0
1688	 E6	SHR		 	 
- stack 1: 0x578
- stack 0: 0xE8
1689	 E7	JUMP		 	 
- stack 0: 0x578
1690	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x578
1691	 E9	PUSH2	0060	 	 
- stack 1: 0x578
- stack 0: 0x60
1692	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x578
- stack 0: 0x0
1693	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1694	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x0
1695	 F3	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x3A0
1696	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x0
1697	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1698	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x0
1699	 FD	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
1700	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x106
1701	 101	JUMPI		 	 
- stack 0: 0x578
1702	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x578
- stack 0: 0x120
1703	 105	JUMP		 	 
- stack 0: 0x578
1704	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x578
1705	 121	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1706	 123	ADD		 	 
- stack 0: 0x57C
1707	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1708	 125	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x86FFF8025A0001012AFFFC00CE0015027C013802BE00000086FFF800990001
1709	 126	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x86FFF8025A0001012AFFFC00CE0015027C013802BE00000086FFF800990001
- stack 0: 0xF0
1710	 128	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x86
1711	 129	JUMP		 	 
- stack 0: 0x57C
1712	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x57C
1713	 87	PUSH4	ffff8000	 	 
- stack 1: 0x57C
- stack 0: 0xFFFF8000
1714	 8C	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFFFF8000
- stack 0: 0x20
1715	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1716	 90	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1717	 92	ADD		 	 
- stack 0: 0x580
1718	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1719	 94	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x25A0001012AFFFC00CE0015027C013802BE00000086FFF80099000102D80000
1720	 95	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x25A0001012AFFFC00CE0015027C013802BE00000086FFF80099000102D80000
- stack 0: 0xF0
1721	 97	SHR		 	 
- stack 1: 0x580
- stack 0: 0x25A
1722	 98	JUMP		 	 
- stack 0: 0x580
1723	 25A	JUMPDEST		 ;; __riscvimpl_SRLI_1_1_0	  ;; # instr: srai ra,ra,1(ignore imm)
- stack 0: 0x580
1724	 25B	PUSH2	0020	 	 
- stack 1: 0x580
- stack 0: 0x20
1725	 25E	MLOAD		 	  ;; # read from x1
- stack 1: 0x580
- stack 0: 0xFFFF8000
1726	 25F	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
1727	 264	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0xFFFF8000
1728	 265	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x580
- stack 1: 0xFFFF8000
- stack 0: 0x580
1729	 266	MLOAD		 	 
- stack 2: 0x580
- stack 1: 0xFFFF8000
- stack 0: 0x25A0001012AFFFC00CE0015027C013802BE00000086FFF80099000102D80000
1730	 267	PUSH1	E0	 	 
- stack 3: 0x580
- stack 2: 0xFFFF8000
- stack 1: 0x25A0001012AFFFC00CE0015027C013802BE00000086FFF80099000102D80000
- stack 0: 0xE0
1731	 269	SHR		 	 
- stack 2: 0x580
- stack 1: 0xFFFF8000
- stack 0: 0x25A0001
1732	 26A	PUSH2	FFFF	 	 
- stack 3: 0x580
- stack 2: 0xFFFF8000
- stack 1: 0x25A0001
- stack 0: 0xFFFF
1733	 26D	AND		 	 
- stack 2: 0x580
- stack 1: 0xFFFF8000
- stack 0: 0x1
1734	 26E	SHR		 	  ;; # SRLI
- stack 1: 0x580
- stack 0: 0x7FFFC000
1735	 26F	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x7FFFC000
- stack 0: 0x20
1736	 272	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
1737	 273	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1738	 275	ADD		 	 
- stack 0: 0x584
1739	 276	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1740	 277	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x12AFFFC00CE0015027C013802BE00000086FFF80099000102D8000002F70001
1741	 278	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x12AFFFC00CE0015027C013802BE00000086FFF80099000102D8000002F70001
- stack 0: 0xF0
1742	 27A	SHR		 	 
- stack 1: 0x584
- stack 0: 0x12A
1743	 27B	JUMP		 	 
- stack 0: 0x584
1744	 12A	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x584
1745	 12B	PUSH4	7fffc000	 	 
- stack 1: 0x584
- stack 0: 0x7FFFC000
1746	 130	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
1747	 133	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
1748	 134	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1749	 136	ADD		 	 
- stack 0: 0x588
1750	 137	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1751	 138	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCE0015027C013802BE00000086FFF80099000102D8000002F7000103160002
1752	 139	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xCE0015027C013802BE00000086FFF80099000102D8000002F7000103160002
- stack 0: 0xF0
1753	 13B	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCE
1754	 13C	JUMP		 	 
- stack 0: 0x588
1755	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x588
1756	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1757	 D0	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xCE0015027C013802BE00000086FFF80099000102D8000002F7000103160002
1758	 D1	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xCE0015027C013802BE00000086FFF80099000102D8000002F7000103160002
- stack 0: 0xE0
1759	 D3	SHR		 	 
- stack 1: 0x588
- stack 0: 0xCE0015
1760	 D4	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xCE0015
- stack 0: 0xFFFF
1761	 D7	AND		 	 
- stack 1: 0x588
- stack 0: 0x15
1762	 D8	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x15
- stack 0: 0x1
1763	 DA	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x15
1764	 DB	PUSH2	0380	 	 
- stack 2: 0x588
- stack 1: 0x15
- stack 0: 0x380
1765	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x588
1766	 DF	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1767	 E1	ADD		 	 
- stack 0: 0x58C
1768	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1769	 E3	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x27C013802BE00000086FFF80099000102D8000002F70001031600020330FFEC
1770	 E4	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x27C013802BE00000086FFF80099000102D8000002F70001031600020330FFEC
- stack 0: 0xF0
1771	 E6	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x27C
1772	 E7	JUMP		 	 
- stack 0: 0x58C
1773	 27C	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,138(ignore imm)
- stack 0: 0x58C
1774	 27D	PUSH2	0020	 	 
- stack 1: 0x58C
- stack 0: 0x20
1775	 280	MLOAD		 	  ;; # read from x1
- stack 1: 0x58C
- stack 0: 0x7FFFC000
1776	 281	PUSH4	FFFFFFFF	 	 
- stack 2: 0x58C
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
1777	 286	AND		 	  ;; # mask to 32 bits
- stack 1: 0x58C
- stack 0: 0x7FFFC000
1778	 287	PUSH2	03A0	 	 
- stack 2: 0x58C
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
1779	 28A	MLOAD		 	  ;; # read from x29
- stack 2: 0x58C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
1780	 28B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x58C
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
1781	 290	AND		 	  ;; # mask to 32 bits
- stack 2: 0x58C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
1782	 291	SUB		 	 
- stack 1: 0x58C
- stack 0: 0x0
1783	 292	PUSH2	029A	 ;; _neq_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x29A
1784	 295	JUMPI		 	 
- stack 0: 0x58C
1785	 296	PUSH2	02B4	 ;; _neq_after_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 1: 0x58C
- stack 0: 0x2B4
1786	 299	JUMP		 	 
- stack 0: 0x58C
1787	 2B4	JUMPDEST		 ;; _neq_after_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 0: 0x58C
1788	 2B5	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1789	 2B7	ADD		 	 
- stack 0: 0x590
1790	 2B8	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1791	 2B9	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2BE00000086FFF80099000102D8000002F70001031600020330FFEC012AFFFC
1792	 2BA	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x2BE00000086FFF80099000102D8000002F70001031600020330FFEC012AFFFC
- stack 0: 0xF0
1793	 2BC	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2BE
1794	 2BD	JUMP		 	 
- stack 0: 0x590
1795	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x590
1796	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
1797	 2C0	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x2BE00000086FFF80099000102D8000002F70001031600020330FFEC012AFFFC
1798	 2C1	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x2BE00000086FFF80099000102D8000002F70001031600020330FFEC012AFFFC
- stack 0: 0xE0
1799	 2C3	SHR		 	 
- stack 1: 0x590
- stack 0: 0x2BE0000
1800	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
1801	 2C7	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
1802	 2C8	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
1803	 2CA	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
1804	 2CB	PUSH2	0080	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x80
1805	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x590
1806	 2CF	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1807	 2D1	ADD		 	 
- stack 0: 0x594
1808	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1809	 2D3	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x86FFF80099000102D8000002F70001031600020330FFEC012AFFFC00CE0016
1810	 2D4	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x86FFF80099000102D8000002F70001031600020330FFEC012AFFFC00CE0016
- stack 0: 0xF0
1811	 2D6	SHR		 	 
- stack 1: 0x594
- stack 0: 0x86
1812	 2D7	JUMP		 	 
- stack 0: 0x594
1813	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x594
1814	 87	PUSH4	ffff8000	 	 
- stack 1: 0x594
- stack 0: 0xFFFF8000
1815	 8C	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xFFFF8000
- stack 0: 0x20
1816	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
1817	 90	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1818	 92	ADD		 	 
- stack 0: 0x598
1819	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1820	 94	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
1821	 95	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
- stack 0: 0xF0
1822	 97	SHR		 	 
- stack 1: 0x598
- stack 0: 0x99
1823	 98	JUMP		 	 
- stack 0: 0x598
1824	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x598
1825	 9A	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
1826	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0xFFFF8000
1827	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
1828	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0xFFFF8000
1829	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x598
1830	 A5	MLOAD		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
1831	 A6	PUSH1	E0	 	 
- stack 3: 0x598
- stack 2: 0xFFFF8000
- stack 1: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
- stack 0: 0xE0
1832	 A8	SHR		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x990001
1833	 A9	PUSH2	FFFF	 	 
- stack 3: 0x598
- stack 2: 0xFFFF8000
- stack 1: 0x990001
- stack 0: 0xFFFF
1834	 AC	AND		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x1
1835	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x598
- stack 0: 0x7FFFC000
1836	 AE	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x7FFFC000
- stack 0: 0x60
1837	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x598
1838	 B2	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1839	 B4	ADD		 	 
- stack 0: 0x59C
1840	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1841	 B6	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
1842	 B7	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
- stack 0: 0xF0
1843	 B9	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2D8
1844	 BA	JUMP		 	 
- stack 0: 0x59C
1845	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x59C
1846	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1847	 2DA	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
1848	 2DB	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
- stack 0: 0xE0
1849	 2DD	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2D80000
1850	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2D80000
- stack 0: 0xFFFF
1851	 2E1	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1852	 2E2	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
1853	 2E4	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1854	 2E5	PUSH2	0060	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x60
1855	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x7FFFC000
1856	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x59C
- stack 0: 0x7FFFC000
1857	 2EA	PUSH2	00C0	 	 
- stack 2: 0x59C
- stack 1: 0x7FFFC000
- stack 0: 0xC0
1858	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x59C
1859	 2EE	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1860	 2F0	ADD		 	 
- stack 0: 0x5A0
1861	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1862	 2F2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
1863	 2F3	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
- stack 0: 0xF0
1864	 2F5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2F7
1865	 2F6	JUMP		 	 
- stack 0: 0x5A0
1866	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A0
1867	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1868	 2F9	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
1869	 2FA	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
- stack 0: 0xE0
1870	 2FC	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001
1871	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001
- stack 0: 0xFFFF
1872	 300	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
1873	 301	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
1874	 303	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
1875	 304	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
1876	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x0
1877	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A0
- stack 0: 0x1
1878	 309	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
1879	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A0
1880	 30D	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1881	 30F	ADD		 	 
- stack 0: 0x5A4
1882	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1883	 311	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
1884	 312	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
- stack 0: 0xF0
1885	 314	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x316
1886	 315	JUMP		 	 
- stack 0: 0x5A4
1887	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A4
1888	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
1889	 318	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
1890	 319	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
- stack 0: 0xE0
1891	 31B	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3160002
1892	 31C	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x3160002
- stack 0: 0xFFFF
1893	 31F	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
1894	 320	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x1
1895	 322	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
1896	 323	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xA0
1897	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A4
1898	 327	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1899	 329	ADD		 	 
- stack 0: 0x5A8
1900	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1901	 32B	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
1902	 32C	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
- stack 0: 0xF0
1903	 32E	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x330
1904	 32F	JUMP		 	 
- stack 0: 0x5A8
1905	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A8
1906	 331	PUSH2	0080	 	 
- stack 1: 0x5A8
- stack 0: 0x80
1907	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A8
- stack 0: 0x1
1908	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1909	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x1
1910	 33B	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0xA0
1911	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x2
1912	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1913	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x2
1914	 345	SUB		 	 
- stack 1: 0x5A8
- stack 0: 0x1
1915	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x5A8
- stack 1: 0x1
- stack 0: 0x34E
1916	 349	JUMPI		 	 
- stack 0: 0x5A8
1917	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x5A8
1918	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
1919	 350	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
1920	 351	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
- stack 0: 0xE0
1921	 353	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x330FFEC
1922	 354	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x330FFEC
- stack 0: 0xFFFF
1923	 357	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFEC
1924	 358	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xFFEC
- stack 0: 0x1
1925	 35A	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
1926	 35B	ADD		 	 
- stack 0: 0x594
1927	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x594
- stack 0: 0xFFFFFFFF
1928	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x594
1929	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1930	 363	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x86FFF80099000102D8000002F70001031600020330FFEC012AFFFC00CE0016
1931	 364	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x86FFF80099000102D8000002F70001031600020330FFEC012AFFFC00CE0016
- stack 0: 0xF0
1932	 366	SHR		 	 
- stack 1: 0x594
- stack 0: 0x86
1933	 367	JUMP		 	 
- stack 0: 0x594
1934	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x594
1935	 87	PUSH4	ffff8000	 	 
- stack 1: 0x594
- stack 0: 0xFFFF8000
1936	 8C	PUSH2	0020	 	 
- stack 2: 0x594
- stack 1: 0xFFFF8000
- stack 0: 0x20
1937	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x594
1938	 90	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1939	 92	ADD		 	 
- stack 0: 0x598
1940	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1941	 94	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
1942	 95	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
- stack 0: 0xF0
1943	 97	SHR		 	 
- stack 1: 0x598
- stack 0: 0x99
1944	 98	JUMP		 	 
- stack 0: 0x598
1945	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x598
1946	 9A	PUSH2	0020	 	 
- stack 1: 0x598
- stack 0: 0x20
1947	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x598
- stack 0: 0xFFFF8000
1948	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
1949	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x598
- stack 0: 0xFFFF8000
1950	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x598
1951	 A5	MLOAD		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
1952	 A6	PUSH1	E0	 	 
- stack 3: 0x598
- stack 2: 0xFFFF8000
- stack 1: 0x99000102D8000002F70001031600020330FFEC012AFFFC00CE001603720110
- stack 0: 0xE0
1953	 A8	SHR		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x990001
1954	 A9	PUSH2	FFFF	 	 
- stack 3: 0x598
- stack 2: 0xFFFF8000
- stack 1: 0x990001
- stack 0: 0xFFFF
1955	 AC	AND		 	 
- stack 2: 0x598
- stack 1: 0xFFFF8000
- stack 0: 0x1
1956	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x598
- stack 0: 0x7FFFC000
1957	 AE	PUSH2	0060	 	 
- stack 2: 0x598
- stack 1: 0x7FFFC000
- stack 0: 0x60
1958	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x598
1959	 B2	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1960	 B4	ADD		 	 
- stack 0: 0x59C
1961	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1962	 B6	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
1963	 B7	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
- stack 0: 0xF0
1964	 B9	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2D8
1965	 BA	JUMP		 	 
- stack 0: 0x59C
1966	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x59C
1967	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
1968	 2DA	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
1969	 2DB	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x2D8000002F70001031600020330FFEC012AFFFC00CE00160372011002BE0000
- stack 0: 0xE0
1970	 2DD	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x2D80000
1971	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2D80000
- stack 0: 0xFFFF
1972	 2E1	AND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1973	 2E2	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x1
1974	 2E4	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x0
1975	 2E5	PUSH2	0060	 	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x60
1976	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x7FFFC000
1977	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x59C
- stack 0: 0x7FFFC000
1978	 2EA	PUSH2	00C0	 	 
- stack 2: 0x59C
- stack 1: 0x7FFFC000
- stack 0: 0xC0
1979	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x59C
1980	 2EE	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1981	 2F0	ADD		 	 
- stack 0: 0x5A0
1982	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1983	 2F2	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
1984	 2F3	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
- stack 0: 0xF0
1985	 2F5	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2F7
1986	 2F6	JUMP		 	 
- stack 0: 0x5A0
1987	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5A0
1988	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1989	 2F9	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
1990	 2FA	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001031600020330FFEC012AFFFC00CE00160372011002BE00000086FFF8
- stack 0: 0xE0
1991	 2FC	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x2F70001
1992	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2F70001
- stack 0: 0xFFFF
1993	 300	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
1994	 301	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
1995	 303	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x1
1996	 304	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x80
1997	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x1
1998	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x5A0
- stack 0: 0x2
1999	 309	PUSH2	0080	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x80
2000	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5A0
2001	 30D	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2002	 30F	ADD		 	 
- stack 0: 0x5A4
2003	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2004	 311	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
2005	 312	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
- stack 0: 0xF0
2006	 314	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x316
2007	 315	JUMP		 	 
- stack 0: 0x5A4
2008	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5A4
2009	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2010	 318	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
2011	 319	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x31600020330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E
- stack 0: 0xE0
2012	 31B	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x3160002
2013	 31C	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x3160002
- stack 0: 0xFFFF
2014	 31F	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2015	 320	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0x1
2016	 322	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x2
2017	 323	PUSH2	00A0	 	 
- stack 2: 0x5A4
- stack 1: 0x2
- stack 0: 0xA0
2018	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x5A4
2019	 327	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2020	 329	ADD		 	 
- stack 0: 0x5A8
2021	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2022	 32B	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
2023	 32C	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x330FFEC012AFFFC00CE00160372011002BE00000086FFF80099000E03B40000
- stack 0: 0xF0
2024	 32E	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x330
2025	 32F	JUMP		 	 
- stack 0: 0x5A8
2026	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5A8
2027	 331	PUSH2	0080	 	 
- stack 1: 0x5A8
- stack 0: 0x80
2028	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A8
- stack 0: 0x2
2029	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2030	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A8
- stack 0: 0x2
2031	 33B	PUSH2	00A0	 	 
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0xA0
2032	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x2
2033	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2034	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A8
- stack 1: 0x2
- stack 0: 0x2
2035	 345	SUB		 	 
- stack 1: 0x5A8
- stack 0: 0x0
2036	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x5A8
- stack 1: 0x0
- stack 0: 0x34E
2037	 349	JUMPI		 	 
- stack 0: 0x5A8
2038	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x5A8
- stack 0: 0x368
2039	 34D	JUMP		 	 
- stack 0: 0x5A8
2040	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x5A8
2041	 369	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2042	 36B	ADD		 	 
- stack 0: 0x5AC
2043	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2044	 36D	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x12AFFFC00CE00160372011002BE00000086FFF80099000E03B4000002D80000
2045	 36E	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x12AFFFC00CE00160372011002BE00000086FFF80099000E03B4000002D80000
- stack 0: 0xF0
2046	 370	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x12A
2047	 371	JUMP		 	 
- stack 0: 0x5AC
2048	 12A	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x5AC
2049	 12B	PUSH4	7fffc000	 	 
- stack 1: 0x5AC
- stack 0: 0x7FFFC000
2050	 130	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
2051	 133	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
2052	 134	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2053	 136	ADD		 	 
- stack 0: 0x5B0
2054	 137	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2055	 138	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xCE00160372011002BE00000086FFF80099000E03B4000002D8000002F70001
2056	 139	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xCE00160372011002BE00000086FFF80099000E03B4000002D8000002F70001
- stack 0: 0xF0
2057	 13B	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xCE
2058	 13C	JUMP		 	 
- stack 0: 0x5B0
2059	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
2060	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2061	 D0	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xCE00160372011002BE00000086FFF80099000E03B4000002D8000002F70001
2062	 D1	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xCE00160372011002BE00000086FFF80099000E03B4000002D8000002F70001
- stack 0: 0xE0
2063	 D3	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xCE0016
2064	 D4	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xCE0016
- stack 0: 0xFFFF
2065	 D7	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x16
2066	 D8	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x16
- stack 0: 0x1
2067	 DA	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x16
2068	 DB	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0x16
- stack 0: 0x380
2069	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
2070	 DF	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2071	 E1	ADD		 	 
- stack 0: 0x5B4
2072	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2073	 E3	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x372011002BE00000086FFF80099000E03B4000002D8000002F7000103160002
2074	 E4	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x372011002BE00000086FFF80099000E03B4000002D8000002F7000103160002
- stack 0: 0xF0
2075	 E6	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x372
2076	 E7	JUMP		 	 
- stack 0: 0x5B4
2077	 372	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,110(ignore imm)
- stack 0: 0x5B4
2078	 373	PUSH2	00C0	 	 
- stack 1: 0x5B4
- stack 0: 0xC0
2079	 376	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B4
- stack 0: 0x7FFFC000
2080	 377	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
2081	 37C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x7FFFC000
2082	 37D	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
2083	 380	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
2084	 381	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
2085	 386	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
2086	 387	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2087	 388	PUSH2	0390	 ;; _neq_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x390
2088	 38B	JUMPI		 	 
- stack 0: 0x5B4
2089	 38C	PUSH2	03AA	 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 1: 0x5B4
- stack 0: 0x3AA
2090	 38F	JUMP		 	 
- stack 0: 0x5B4
2091	 3AA	JUMPDEST		 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 0: 0x5B4
2092	 3AB	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2093	 3AD	ADD		 	 
- stack 0: 0x5B8
2094	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2095	 3AF	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x2BE00000086FFF80099000E03B4000002D8000002F70001031600020330FFE8
2096	 3B0	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x2BE00000086FFF80099000E03B4000002D8000002F70001031600020330FFE8
- stack 0: 0xF0
2097	 3B2	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x2BE
2098	 3B3	JUMP		 	 
- stack 0: 0x5B8
2099	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B8
2100	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
2101	 2C0	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x2BE00000086FFF80099000E03B4000002D8000002F70001031600020330FFE8
2102	 2C1	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x2BE00000086FFF80099000E03B4000002D8000002F70001031600020330FFE8
- stack 0: 0xE0
2103	 2C3	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x2BE0000
2104	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
2105	 2C7	AND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2106	 2C8	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x1
2107	 2CA	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0x0
2108	 2CB	PUSH2	0080	 	 
- stack 2: 0x5B8
- stack 1: 0x0
- stack 0: 0x80
2109	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B8
2110	 2CF	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2111	 2D1	ADD		 	 
- stack 0: 0x5BC
2112	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2113	 2D3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86FFF80099000E03B4000002D8000002F70001031600020330FFE8016F0040
2114	 2D4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x86FFF80099000E03B4000002D8000002F70001031600020330FFE8016F0040
- stack 0: 0xF0
2115	 2D6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86
2116	 2D7	JUMP		 	 
- stack 0: 0x5BC
2117	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x5BC
2118	 87	PUSH4	ffff8000	 	 
- stack 1: 0x5BC
- stack 0: 0xFFFF8000
2119	 8C	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFF8000
- stack 0: 0x20
2120	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2121	 90	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2122	 92	ADD		 	 
- stack 0: 0x5C0
2123	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2124	 94	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
2125	 95	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
- stack 0: 0xF0
2126	 97	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99
2127	 98	JUMP		 	 
- stack 0: 0x5C0
2128	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x5C0
2129	 9A	PUSH2	0020	 	 
- stack 1: 0x5C0
- stack 0: 0x20
2130	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C0
- stack 0: 0xFFFF8000
2131	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2132	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0xFFFF8000
2133	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x5C0
2134	 A5	MLOAD		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
2135	 A6	PUSH1	E0	 	 
- stack 3: 0x5C0
- stack 2: 0xFFFF8000
- stack 1: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
- stack 0: 0xE0
2136	 A8	SHR		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x99000E
2137	 A9	PUSH2	FFFF	 	 
- stack 3: 0x5C0
- stack 2: 0xFFFF8000
- stack 1: 0x99000E
- stack 0: 0xFFFF
2138	 AC	AND		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0xE
2139	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x5C0
- stack 0: 0x3FFFE
2140	 AE	PUSH2	0060	 	 
- stack 2: 0x5C0
- stack 1: 0x3FFFE
- stack 0: 0x60
2141	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C0
2142	 B2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2143	 B4	ADD		 	 
- stack 0: 0x5C4
2144	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2145	 B6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
2146	 B7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
- stack 0: 0xF0
2147	 B9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4
2148	 BA	JUMP		 	 
- stack 0: 0x5C4
2149	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C4
2150	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2151	 3B6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
2152	 3B7	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
- stack 0: 0xE0
2153	 3B9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x3B40000
2154	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2155	 3BD	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2156	 3BE	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2157	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2158	 3C1	POP		 	 
- stack 0: 0x5C4
2159	 3C2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2160	 3C4	ADD		 	 
- stack 0: 0x5C8
2161	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2162	 3C6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
2163	 3C7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
- stack 0: 0xF0
2164	 3C9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8
2165	 3CA	JUMP		 	 
- stack 0: 0x5C8
2166	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5C8
2167	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2168	 2DA	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
2169	 2DB	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
- stack 0: 0xE0
2170	 2DD	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2D80000
2171	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2D80000
- stack 0: 0xFFFF
2172	 2E1	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2173	 2E2	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
2174	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2175	 2E5	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x60
2176	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x3FFFE
2177	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5C8
- stack 0: 0x3FFFE
2178	 2EA	PUSH2	00C0	 	 
- stack 2: 0x5C8
- stack 1: 0x3FFFE
- stack 0: 0xC0
2179	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x5C8
2180	 2EE	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2181	 2F0	ADD		 	 
- stack 0: 0x5CC
2182	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2183	 2F2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
2184	 2F3	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
- stack 0: 0xF0
2185	 2F5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2F7
2186	 2F6	JUMP		 	 
- stack 0: 0x5CC
2187	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2188	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2189	 2F9	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
2190	 2FA	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
- stack 0: 0xE0
2191	 2FC	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001
2192	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001
- stack 0: 0xFFFF
2193	 300	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2194	 301	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2195	 303	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2196	 304	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2197	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x0
2198	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x1
2199	 309	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2200	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2201	 30D	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2202	 30F	ADD		 	 
- stack 0: 0x5D0
2203	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2204	 311	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
2205	 312	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
- stack 0: 0xF0
2206	 314	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x316
2207	 315	JUMP		 	 
- stack 0: 0x5D0
2208	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2209	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2210	 318	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
2211	 319	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
- stack 0: 0xE0
2212	 31B	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3160002
2213	 31C	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3160002
- stack 0: 0xFFFF
2214	 31F	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2215	 320	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2216	 322	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2217	 323	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2218	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2219	 327	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2220	 329	ADD		 	 
- stack 0: 0x5D4
2221	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2222	 32B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
2223	 32C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
- stack 0: 0xF0
2224	 32E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x330
2225	 32F	JUMP		 	 
- stack 0: 0x5D4
2226	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5D4
2227	 331	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2228	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x1
2229	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2230	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x1
2231	 33B	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xA0
2232	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2233	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2234	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2235	 345	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x1
2236	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x34E
2237	 349	JUMPI		 	 
- stack 0: 0x5D4
2238	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x5D4
2239	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2240	 350	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
2241	 351	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
- stack 0: 0xE0
2242	 353	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x330FFE8
2243	 354	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x330FFE8
- stack 0: 0xFFFF
2244	 357	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFE8
2245	 358	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFFE8
- stack 0: 0x1
2246	 35A	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2247	 35B	ADD		 	 
- stack 0: 0x5BC
2248	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFF
2249	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5BC
2250	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2251	 363	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x86FFF80099000E03B4000002D8000002F70001031600020330FFE8016F0040
2252	 364	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x86FFF80099000E03B4000002D8000002F70001031600020330FFE8016F0040
- stack 0: 0xF0
2253	 366	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x86
2254	 367	JUMP		 	 
- stack 0: 0x5BC
2255	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x5BC
2256	 87	PUSH4	ffff8000	 	 
- stack 1: 0x5BC
- stack 0: 0xFFFF8000
2257	 8C	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFF8000
- stack 0: 0x20
2258	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2259	 90	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2260	 92	ADD		 	 
- stack 0: 0x5C0
2261	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2262	 94	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
2263	 95	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
- stack 0: 0xF0
2264	 97	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x99
2265	 98	JUMP		 	 
- stack 0: 0x5C0
2266	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x5C0
2267	 9A	PUSH2	0020	 	 
- stack 1: 0x5C0
- stack 0: 0x20
2268	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C0
- stack 0: 0xFFFF8000
2269	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2270	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C0
- stack 0: 0xFFFF8000
2271	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x5C0
2272	 A5	MLOAD		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
2273	 A6	PUSH1	E0	 	 
- stack 3: 0x5C0
- stack 2: 0xFFFF8000
- stack 1: 0x99000E03B4000002D8000002F70001031600020330FFE8016F00400150FFFE
- stack 0: 0xE0
2274	 A8	SHR		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0x99000E
2275	 A9	PUSH2	FFFF	 	 
- stack 3: 0x5C0
- stack 2: 0xFFFF8000
- stack 1: 0x99000E
- stack 0: 0xFFFF
2276	 AC	AND		 	 
- stack 2: 0x5C0
- stack 1: 0xFFFF8000
- stack 0: 0xE
2277	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x5C0
- stack 0: 0x3FFFE
2278	 AE	PUSH2	0060	 	 
- stack 2: 0x5C0
- stack 1: 0x3FFFE
- stack 0: 0x60
2279	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C0
2280	 B2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2281	 B4	ADD		 	 
- stack 0: 0x5C4
2282	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2283	 B6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
2284	 B7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
- stack 0: 0xF0
2285	 B9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4
2286	 BA	JUMP		 	 
- stack 0: 0x5C4
2287	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5C4
2288	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2289	 3B6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
2290	 3B7	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0x3B4000002D8000002F70001031600020330FFE8016F00400150FFFE00CE0017
- stack 0: 0xE0
2291	 3B9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x3B40000
2292	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2293	 3BD	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2294	 3BE	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x1
2295	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2296	 3C1	POP		 	 
- stack 0: 0x5C4
2297	 3C2	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2298	 3C4	ADD		 	 
- stack 0: 0x5C8
2299	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2300	 3C6	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
2301	 3C7	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
- stack 0: 0xF0
2302	 3C9	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8
2303	 3CA	JUMP		 	 
- stack 0: 0x5C8
2304	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5C8
2305	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2306	 2DA	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
2307	 2DB	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x2D8000002F70001031600020330FFE8016F00400150FFFE00CE0017037200E0
- stack 0: 0xE0
2308	 2DD	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x2D80000
2309	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x2D80000
- stack 0: 0xFFFF
2310	 2E1	AND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2311	 2E2	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x1
2312	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0x0
2313	 2E5	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x60
2314	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x3FFFE
2315	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5C8
- stack 0: 0x3FFFE
2316	 2EA	PUSH2	00C0	 	 
- stack 2: 0x5C8
- stack 1: 0x3FFFE
- stack 0: 0xC0
2317	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x5C8
2318	 2EE	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2319	 2F0	ADD		 	 
- stack 0: 0x5CC
2320	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2321	 2F2	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
2322	 2F3	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
- stack 0: 0xF0
2323	 2F5	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2F7
2324	 2F6	JUMP		 	 
- stack 0: 0x5CC
2325	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2326	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2327	 2F9	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
2328	 2FA	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001031600020330FFE8016F00400150FFFE00CE0017037200E002BE0000
- stack 0: 0xE0
2329	 2FC	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x2F70001
2330	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x2F70001
- stack 0: 0xFFFF
2331	 300	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2332	 301	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2333	 303	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2334	 304	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2335	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2336	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x2
2337	 309	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x80
2338	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2339	 30D	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2340	 30F	ADD		 	 
- stack 0: 0x5D0
2341	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2342	 311	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
2343	 312	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
- stack 0: 0xF0
2344	 314	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x316
2345	 315	JUMP		 	 
- stack 0: 0x5D0
2346	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2347	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2348	 318	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
2349	 319	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x31600020330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF8
- stack 0: 0xE0
2350	 31B	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x3160002
2351	 31C	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x3160002
- stack 0: 0xFFFF
2352	 31F	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2353	 320	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2354	 322	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2355	 323	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2356	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2357	 327	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2358	 329	ADD		 	 
- stack 0: 0x5D4
2359	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2360	 32B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
2361	 32C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x330FFE8016F00400150FFFE00CE0017037200E002BE00000086FFF80099000F
- stack 0: 0xF0
2362	 32E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x330
2363	 32F	JUMP		 	 
- stack 0: 0x5D4
2364	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x5D4
2365	 331	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2366	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x2
2367	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2368	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x2
2369	 33B	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2370	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2371	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2372	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2373	 345	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2374	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x34E
2375	 349	JUMPI		 	 
- stack 0: 0x5D4
2376	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x5D4
- stack 0: 0x368
2377	 34D	JUMP		 	 
- stack 0: 0x5D4
2378	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x5D4
2379	 369	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2380	 36B	ADD		 	 
- stack 0: 0x5D8
2381	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2382	 36D	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x16F00400150FFFE00CE0017037200E002BE00000086FFF80099000F03B40000
2383	 36E	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x16F00400150FFFE00CE0017037200E002BE00000086FFF80099000F03B40000
- stack 0: 0xF0
2384	 370	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x16F
2385	 371	JUMP		 	 
- stack 0: 0x5D8
2386	 16F	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x5D8
2387	 170	PUSH4	00040000	 	 
- stack 1: 0x5D8
- stack 0: 0x40000
2388	 175	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0x40000
- stack 0: 0x3A0
2389	 178	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
2390	 179	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2391	 17B	ADD		 	 
- stack 0: 0x5DC
2392	 17C	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2393	 17D	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x150FFFE00CE0017037200E002BE00000086FFF80099000F03B4000003B40000
2394	 17E	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x150FFFE00CE0017037200E002BE00000086FFF80099000F03B4000003B40000
- stack 0: 0xF0
2395	 180	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x150
2396	 181	JUMP		 	 
- stack 0: 0x5DC
2397	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x5DC
2398	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2399	 152	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x150FFFE00CE0017037200E002BE00000086FFF80099000F03B4000003B40000
2400	 153	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x150FFFE00CE0017037200E002BE00000086FFF80099000F03B4000003B40000
- stack 0: 0xE0
2401	 155	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x150FFFE
2402	 156	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x150FFFE
- stack 0: 0xFFFF
2403	 159	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFE
2404	 15A	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFFFE
- stack 0: 0x1
2405	 15C	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
2406	 15D	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
2407	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
2408	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x5DC
- stack 0: 0x3FFFE
2409	 162	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0x3FFFE
- stack 0: 0x3A0
2410	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x5DC
2411	 166	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2412	 168	ADD		 	 
- stack 0: 0x5E0
2413	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2414	 16A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xCE0017037200E002BE00000086FFF80099000F03B4000003B4000002D80000
2415	 16B	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0xCE0017037200E002BE00000086FFF80099000F03B4000003B4000002D80000
- stack 0: 0xF0
2416	 16D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xCE
2417	 16E	JUMP		 	 
- stack 0: 0x5E0
2418	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
2419	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2420	 D0	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0xCE0017037200E002BE00000086FFF80099000F03B4000003B4000002D80000
2421	 D1	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0xCE0017037200E002BE00000086FFF80099000F03B4000003B4000002D80000
- stack 0: 0xE0
2422	 D3	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0xCE0017
2423	 D4	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0xCE0017
- stack 0: 0xFFFF
2424	 D7	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x17
2425	 D8	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x17
- stack 0: 0x1
2426	 DA	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x17
2427	 DB	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0x17
- stack 0: 0x380
2428	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
2429	 DF	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2430	 E1	ADD		 	 
- stack 0: 0x5E4
2431	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2432	 E3	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x37200E002BE00000086FFF80099000F03B4000003B4000002D8000002F70001
2433	 E4	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x37200E002BE00000086FFF80099000F03B4000003B4000002D8000002F70001
- stack 0: 0xF0
2434	 E6	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x372
2435	 E7	JUMP		 	 
- stack 0: 0x5E4
2436	 372	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,110(ignore imm)
- stack 0: 0x5E4
2437	 373	PUSH2	00C0	 	 
- stack 1: 0x5E4
- stack 0: 0xC0
2438	 376	MLOAD		 	  ;; # read from x6
- stack 1: 0x5E4
- stack 0: 0x3FFFE
2439	 377	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
2440	 37C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x3FFFE
2441	 37D	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0x3FFFE
- stack 0: 0x3A0
2442	 380	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
2443	 381	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
2444	 386	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
2445	 387	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2446	 388	PUSH2	0390	 ;; _neq_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x390
2447	 38B	JUMPI		 	 
- stack 0: 0x5E4
2448	 38C	PUSH2	03AA	 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 1: 0x5E4
- stack 0: 0x3AA
2449	 38F	JUMP		 	 
- stack 0: 0x5E4
2450	 3AA	JUMPDEST		 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 0: 0x5E4
2451	 3AB	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2452	 3AD	ADD		 	 
- stack 0: 0x5E8
2453	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2454	 3AF	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2BE00000086FFF80099000F03B4000003B4000002D8000002F7000103160002
2455	 3B0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2BE00000086FFF80099000F03B4000003B4000002D8000002F7000103160002
- stack 0: 0xF0
2456	 3B2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2BE
2457	 3B3	JUMP		 	 
- stack 0: 0x5E8
2458	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E8
2459	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2460	 2C0	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2BE00000086FFF80099000F03B4000003B4000002D8000002F7000103160002
2461	 2C1	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x2BE00000086FFF80099000F03B4000003B4000002D8000002F7000103160002
- stack 0: 0xE0
2462	 2C3	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2BE0000
2463	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
2464	 2C7	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2465	 2C8	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
2466	 2CA	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2467	 2CB	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x80
2468	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2469	 2CF	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2470	 2D1	ADD		 	 
- stack 0: 0x5EC
2471	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2472	 2D3	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x86FFF80099000F03B4000003B4000002D8000002F70001031600020330FFE4
2473	 2D4	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x86FFF80099000F03B4000003B4000002D8000002F70001031600020330FFE4
- stack 0: 0xF0
2474	 2D6	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x86
2475	 2D7	JUMP		 	 
- stack 0: 0x5EC
2476	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x5EC
2477	 87	PUSH4	ffff8000	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF8000
2478	 8C	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF8000
- stack 0: 0x20
2479	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2480	 90	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2481	 92	ADD		 	 
- stack 0: 0x5F0
2482	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2483	 94	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
2484	 95	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
- stack 0: 0xF0
2485	 97	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
2486	 98	JUMP		 	 
- stack 0: 0x5F0
2487	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x5F0
2488	 9A	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
2489	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0xFFFF8000
2490	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2491	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0xFFFF8000
2492	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x5F0
2493	 A5	MLOAD		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
2494	 A6	PUSH1	E0	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFF8000
- stack 1: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
- stack 0: 0xE0
2495	 A8	SHR		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x99000F
2496	 A9	PUSH2	FFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFF8000
- stack 1: 0x99000F
- stack 0: 0xFFFF
2497	 AC	AND		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0xF
2498	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x5F0
- stack 0: 0x1FFFF
2499	 AE	PUSH2	0060	 	 
- stack 2: 0x5F0
- stack 1: 0x1FFFF
- stack 0: 0x60
2500	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F0
2501	 B2	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2502	 B4	ADD		 	 
- stack 0: 0x5F4
2503	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2504	 B6	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
2505	 B7	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
- stack 0: 0xF0
2506	 B9	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4
2507	 BA	JUMP		 	 
- stack 0: 0x5F4
2508	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
2509	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2510	 3B6	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
2511	 3B7	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
- stack 0: 0xE0
2512	 3B9	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3B40000
2513	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2514	 3BD	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2515	 3BE	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
2516	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2517	 3C1	POP		 	 
- stack 0: 0x5F4
2518	 3C2	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2519	 3C4	ADD		 	 
- stack 0: 0x5F8
2520	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2521	 3C6	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
2522	 3C7	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
- stack 0: 0xF0
2523	 3C9	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4
2524	 3CA	JUMP		 	 
- stack 0: 0x5F8
2525	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F8
2526	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2527	 3B6	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
2528	 3B7	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
- stack 0: 0xE0
2529	 3B9	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3B40000
2530	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2531	 3BD	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2532	 3BE	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x1
2533	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2534	 3C1	POP		 	 
- stack 0: 0x5F8
2535	 3C2	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2536	 3C4	ADD		 	 
- stack 0: 0x5FC
2537	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2538	 3C6	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
2539	 3C7	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
- stack 0: 0xF0
2540	 3C9	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2541	 3CA	JUMP		 	 
- stack 0: 0x5FC
2542	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5FC
2543	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2544	 2DA	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
2545	 2DB	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
- stack 0: 0xE0
2546	 2DD	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2D80000
2547	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2D80000
- stack 0: 0xFFFF
2548	 2E1	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2549	 2E2	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2550	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2551	 2E5	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x60
2552	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1FFFF
2553	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5FC
- stack 0: 0x1FFFF
2554	 2EA	PUSH2	00C0	 	 
- stack 2: 0x5FC
- stack 1: 0x1FFFF
- stack 0: 0xC0
2555	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x5FC
2556	 2EE	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2557	 2F0	ADD		 	 
- stack 0: 0x600
2558	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2559	 2F2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
2560	 2F3	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
- stack 0: 0xF0
2561	 2F5	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2F7
2562	 2F6	JUMP		 	 
- stack 0: 0x600
2563	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2564	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2565	 2F9	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
2566	 2FA	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
- stack 0: 0xE0
2567	 2FC	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2F70001
2568	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2F70001
- stack 0: 0xFFFF
2569	 300	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2570	 301	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2571	 303	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2572	 304	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2573	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x0
2574	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x1
2575	 309	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2576	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2577	 30D	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2578	 30F	ADD		 	 
- stack 0: 0x604
2579	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2580	 311	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
2581	 312	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
- stack 0: 0xF0
2582	 314	SHR		 	 
- stack 1: 0x604
- stack 0: 0x316
2583	 315	JUMP		 	 
- stack 0: 0x604
2584	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2585	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2586	 318	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
2587	 319	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
- stack 0: 0xE0
2588	 31B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3160002
2589	 31C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3160002
- stack 0: 0xFFFF
2590	 31F	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2591	 320	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2592	 322	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2593	 323	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2594	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2595	 327	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2596	 329	ADD		 	 
- stack 0: 0x608
2597	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2598	 32B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
2599	 32C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
- stack 0: 0xF0
2600	 32E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x330
2601	 32F	JUMP		 	 
- stack 0: 0x608
2602	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x608
2603	 331	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2604	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x1
2605	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2606	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x1
2607	 33B	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0xA0
2608	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2609	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2610	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x2
2611	 345	SUB		 	 
- stack 1: 0x608
- stack 0: 0x1
2612	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x608
- stack 1: 0x1
- stack 0: 0x34E
2613	 349	JUMPI		 	 
- stack 0: 0x608
2614	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x608
2615	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2616	 350	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
2617	 351	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
- stack 0: 0xE0
2618	 353	SHR		 	 
- stack 1: 0x608
- stack 0: 0x330FFE4
2619	 354	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x330FFE4
- stack 0: 0xFFFF
2620	 357	AND		 	 
- stack 1: 0x608
- stack 0: 0xFFE4
2621	 358	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0xFFE4
- stack 0: 0x1
2622	 35A	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2623	 35B	ADD		 	 
- stack 0: 0x5EC
2624	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFF
2625	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5EC
2626	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2627	 363	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x86FFF80099000F03B4000003B4000002D8000002F70001031600020330FFE4
2628	 364	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x86FFF80099000F03B4000003B4000002D8000002F70001031600020330FFE4
- stack 0: 0xF0
2629	 366	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x86
2630	 367	JUMP		 	 
- stack 0: 0x5EC
2631	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x5EC
2632	 87	PUSH4	ffff8000	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFF8000
2633	 8C	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFFFF8000
- stack 0: 0x20
2634	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2635	 90	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2636	 92	ADD		 	 
- stack 0: 0x5F0
2637	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2638	 94	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
2639	 95	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
- stack 0: 0xF0
2640	 97	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
2641	 98	JUMP		 	 
- stack 0: 0x5F0
2642	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x5F0
2643	 9A	PUSH2	0020	 	 
- stack 1: 0x5F0
- stack 0: 0x20
2644	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x5F0
- stack 0: 0xFFFF8000
2645	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2646	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0xFFFF8000
2647	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x5F0
2648	 A5	MLOAD		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
2649	 A6	PUSH1	E0	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFF8000
- stack 1: 0x99000F03B4000003B4000002D8000002F70001031600020330FFE401A10020
- stack 0: 0xE0
2650	 A8	SHR		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0x99000F
2651	 A9	PUSH2	FFFF	 	 
- stack 3: 0x5F0
- stack 2: 0xFFFF8000
- stack 1: 0x99000F
- stack 0: 0xFFFF
2652	 AC	AND		 	 
- stack 2: 0x5F0
- stack 1: 0xFFFF8000
- stack 0: 0xF
2653	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x5F0
- stack 0: 0x1FFFF
2654	 AE	PUSH2	0060	 	 
- stack 2: 0x5F0
- stack 1: 0x1FFFF
- stack 0: 0x60
2655	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x5F0
2656	 B2	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2657	 B4	ADD		 	 
- stack 0: 0x5F4
2658	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2659	 B6	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
2660	 B7	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
- stack 0: 0xF0
2661	 B9	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4
2662	 BA	JUMP		 	 
- stack 0: 0x5F4
2663	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F4
2664	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2665	 3B6	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
2666	 3B7	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x3B4000003B4000002D8000002F70001031600020330FFE401A100200150FFFF
- stack 0: 0xE0
2667	 3B9	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3B40000
2668	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2669	 3BD	AND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2670	 3BE	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x1
2671	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2672	 3C1	POP		 	 
- stack 0: 0x5F4
2673	 3C2	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2674	 3C4	ADD		 	 
- stack 0: 0x5F8
2675	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2676	 3C6	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
2677	 3C7	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
- stack 0: 0xF0
2678	 3C9	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4
2679	 3CA	JUMP		 	 
- stack 0: 0x5F8
2680	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5F8
2681	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2682	 3B6	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
2683	 3B7	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x3B4000002D8000002F70001031600020330FFE401A100200150FFFF00CE0018
- stack 0: 0xE0
2684	 3B9	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3B40000
2685	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x3B40000
- stack 0: 0xFFFF
2686	 3BD	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2687	 3BE	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x1
2688	 3C0	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2689	 3C1	POP		 	 
- stack 0: 0x5F8
2690	 3C2	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2691	 3C4	ADD		 	 
- stack 0: 0x5FC
2692	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2693	 3C6	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
2694	 3C7	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
- stack 0: 0xF0
2695	 3C9	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2696	 3CA	JUMP		 	 
- stack 0: 0x5FC
2697	 2D8	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5FC
2698	 2D9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2699	 2DA	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
2700	 2DB	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8000002F70001031600020330FFE401A100200150FFFF00CE0018037200AC
- stack 0: 0xE0
2701	 2DD	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x2D80000
2702	 2DE	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x2D80000
- stack 0: 0xFFFF
2703	 2E1	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2704	 2E2	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2705	 2E4	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2706	 2E5	PUSH2	0060	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x60
2707	 2E8	MLOAD		 	  ;; # read from x3
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1FFFF
2708	 2E9	ADD		 	  ;; # ADDI 3
- stack 1: 0x5FC
- stack 0: 0x1FFFF
2709	 2EA	PUSH2	00C0	 	 
- stack 2: 0x5FC
- stack 1: 0x1FFFF
- stack 0: 0xC0
2710	 2ED	MSTORE		 	  ;; # store to x6
- stack 0: 0x5FC
2711	 2EE	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2712	 2F0	ADD		 	 
- stack 0: 0x600
2713	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2714	 2F2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
2715	 2F3	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
- stack 0: 0xF0
2716	 2F5	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2F7
2717	 2F6	JUMP		 	 
- stack 0: 0x600
2718	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x600
2719	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2720	 2F9	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
2721	 2FA	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x2F70001031600020330FFE401A100200150FFFF00CE0018037200AC02BE0000
- stack 0: 0xE0
2722	 2FC	SHR		 	 
- stack 1: 0x600
- stack 0: 0x2F70001
2723	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x2F70001
- stack 0: 0xFFFF
2724	 300	AND		 	 
- stack 1: 0x600
- stack 0: 0x1
2725	 301	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2726	 303	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x1
2727	 304	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x80
2728	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x600
- stack 1: 0x1
- stack 0: 0x1
2729	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x600
- stack 0: 0x2
2730	 309	PUSH2	0080	 	 
- stack 2: 0x600
- stack 1: 0x2
- stack 0: 0x80
2731	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x600
2732	 30D	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2733	 30F	ADD		 	 
- stack 0: 0x604
2734	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2735	 311	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
2736	 312	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
- stack 0: 0xF0
2737	 314	SHR		 	 
- stack 1: 0x604
- stack 0: 0x316
2738	 315	JUMP		 	 
- stack 0: 0x604
2739	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x604
2740	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2741	 318	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
2742	 319	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x31600020330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF8
- stack 0: 0xE0
2743	 31B	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3160002
2744	 31C	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3160002
- stack 0: 0xFFFF
2745	 31F	AND		 	 
- stack 1: 0x604
- stack 0: 0x2
2746	 320	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x1
2747	 322	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x2
2748	 323	PUSH2	00A0	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0xA0
2749	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x604
2750	 327	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2751	 329	ADD		 	 
- stack 0: 0x608
2752	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2753	 32B	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
2754	 32C	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x330FFE401A100200150FFFF00CE0018037200AC02BE00000086FFF800990001
- stack 0: 0xF0
2755	 32E	SHR		 	 
- stack 1: 0x608
- stack 0: 0x330
2756	 32F	JUMP		 	 
- stack 0: 0x608
2757	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x608
2758	 331	PUSH2	0080	 	 
- stack 1: 0x608
- stack 0: 0x80
2759	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x608
- stack 0: 0x2
2760	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2761	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x2
2762	 33B	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2763	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2764	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x608
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2765	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x2
2766	 345	SUB		 	 
- stack 1: 0x608
- stack 0: 0x0
2767	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x34E
2768	 349	JUMPI		 	 
- stack 0: 0x608
2769	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x608
- stack 0: 0x368
2770	 34D	JUMP		 	 
- stack 0: 0x608
2771	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x608
2772	 369	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2773	 36B	ADD		 	 
- stack 0: 0x60C
2774	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2775	 36D	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x1A100200150FFFF00CE0018037200AC02BE00000086FFF80099000102F70001
2776	 36E	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x1A100200150FFFF00CE0018037200AC02BE00000086FFF80099000102F70001
- stack 0: 0xF0
2777	 370	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x1A1
2778	 371	JUMP		 	 
- stack 0: 0x60C
2779	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x60C
2780	 1A2	PUSH4	00020000	 	 
- stack 1: 0x60C
- stack 0: 0x20000
2781	 1A7	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0x20000
- stack 0: 0x3A0
2782	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
2783	 1AB	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2784	 1AD	ADD		 	 
- stack 0: 0x610
2785	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2786	 1AF	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x150FFFF00CE0018037200AC02BE00000086FFF80099000102F7000103160002
2787	 1B0	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x150FFFF00CE0018037200AC02BE00000086FFF80099000102F7000103160002
- stack 0: 0xF0
2788	 1B2	SHR		 	 
- stack 1: 0x610
- stack 0: 0x150
2789	 1B3	JUMP		 	 
- stack 0: 0x610
2790	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x610
2791	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2792	 152	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x150FFFF00CE0018037200AC02BE00000086FFF80099000102F7000103160002
2793	 153	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x150FFFF00CE0018037200AC02BE00000086FFF80099000102F7000103160002
- stack 0: 0xE0
2794	 155	SHR		 	 
- stack 1: 0x610
- stack 0: 0x150FFFF
2795	 156	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
2796	 159	AND		 	 
- stack 1: 0x610
- stack 0: 0xFFFF
2797	 15A	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFFFF
- stack 0: 0x1
2798	 15C	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2799	 15D	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
2800	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
2801	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x610
- stack 0: 0x1FFFF
2802	 162	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0x1FFFF
- stack 0: 0x3A0
2803	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
2804	 166	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2805	 168	ADD		 	 
- stack 0: 0x614
2806	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2807	 16A	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xCE0018037200AC02BE00000086FFF80099000102F70001031600020330FFF0
2808	 16B	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0xCE0018037200AC02BE00000086FFF80099000102F70001031600020330FFF0
- stack 0: 0xF0
2809	 16D	SHR		 	 
- stack 1: 0x614
- stack 0: 0xCE
2810	 16E	JUMP		 	 
- stack 0: 0x614
2811	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x614
2812	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2813	 D0	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0xCE0018037200AC02BE00000086FFF80099000102F70001031600020330FFF0
2814	 D1	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0xCE0018037200AC02BE00000086FFF80099000102F70001031600020330FFF0
- stack 0: 0xE0
2815	 D3	SHR		 	 
- stack 1: 0x614
- stack 0: 0xCE0018
2816	 D4	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0xCE0018
- stack 0: 0xFFFF
2817	 D7	AND		 	 
- stack 1: 0x614
- stack 0: 0x18
2818	 D8	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0x1
2819	 DA	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x18
2820	 DB	PUSH2	0380	 	 
- stack 2: 0x614
- stack 1: 0x18
- stack 0: 0x380
2821	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x614
2822	 DF	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2823	 E1	ADD		 	 
- stack 0: 0x618
2824	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2825	 E3	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x37200AC02BE00000086FFF80099000102F70001031600020330FFF0012AFFFC
2826	 E4	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x37200AC02BE00000086FFF80099000102F70001031600020330FFF0012AFFFC
- stack 0: 0xF0
2827	 E6	SHR		 	 
- stack 1: 0x618
- stack 0: 0x372
2828	 E7	JUMP		 	 
- stack 0: 0x618
2829	 372	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,110(ignore imm)
- stack 0: 0x618
2830	 373	PUSH2	00C0	 	 
- stack 1: 0x618
- stack 0: 0xC0
2831	 376	MLOAD		 	  ;; # read from x6
- stack 1: 0x618
- stack 0: 0x1FFFF
2832	 377	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
2833	 37C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x1FFFF
2834	 37D	PUSH2	03A0	 	 
- stack 2: 0x618
- stack 1: 0x1FFFF
- stack 0: 0x3A0
2835	 380	MLOAD		 	  ;; # read from x29
- stack 2: 0x618
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
2836	 381	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
2837	 386	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
2838	 387	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
2839	 388	PUSH2	0390	 ;; _neq_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x390
2840	 38B	JUMPI		 	 
- stack 0: 0x618
2841	 38C	PUSH2	03AA	 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 1: 0x618
- stack 0: 0x3AA
2842	 38F	JUMP		 	 
- stack 0: 0x618
2843	 3AA	JUMPDEST		 ;; _neq_after_a9973b524ce19713dcaf7cf763f346b1f1e535369e70ac04a9cab1e0ae55b84b	 
- stack 0: 0x618
2844	 3AB	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2845	 3AD	ADD		 	 
- stack 0: 0x61C
2846	 3AE	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2847	 3AF	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2BE00000086FFF80099000102F70001031600020330FFF0012AFFFC00CE0019
2848	 3B0	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x2BE00000086FFF80099000102F70001031600020330FFF0012AFFFC00CE0019
- stack 0: 0xF0
2849	 3B2	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2BE
2850	 3B3	JUMP		 	 
- stack 0: 0x61C
2851	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x61C
2852	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2853	 2C0	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x2BE00000086FFF80099000102F70001031600020330FFF0012AFFFC00CE0019
2854	 2C1	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x2BE00000086FFF80099000102F70001031600020330FFF0012AFFFC00CE0019
- stack 0: 0xE0
2855	 2C3	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x2BE0000
2856	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
2857	 2C7	AND		 	 
- stack 1: 0x61C
- stack 0: 0x0
2858	 2C8	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x1
2859	 2CA	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x0
2860	 2CB	PUSH2	0080	 	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x80
2861	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x61C
2862	 2CF	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2863	 2D1	ADD		 	 
- stack 0: 0x620
2864	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2865	 2D3	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86FFF80099000102F70001031600020330FFF0012AFFFC00CE001900E80088
2866	 2D4	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x86FFF80099000102F70001031600020330FFF0012AFFFC00CE001900E80088
- stack 0: 0xF0
2867	 2D6	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86
2868	 2D7	JUMP		 	 
- stack 0: 0x620
2869	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x620
2870	 87	PUSH4	ffff8000	 	 
- stack 1: 0x620
- stack 0: 0xFFFF8000
2871	 8C	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFF8000
- stack 0: 0x20
2872	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
2873	 90	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2874	 92	ADD		 	 
- stack 0: 0x624
2875	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2876	 94	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
2877	 95	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
- stack 0: 0xF0
2878	 97	SHR		 	 
- stack 1: 0x624
- stack 0: 0x99
2879	 98	JUMP		 	 
- stack 0: 0x624
2880	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x624
2881	 9A	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
2882	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xFFFF8000
2883	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2884	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0xFFFF8000
2885	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x624
2886	 A5	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
2887	 A6	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0xFFFF8000
- stack 1: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
- stack 0: 0xE0
2888	 A8	SHR		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x990001
2889	 A9	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0xFFFF8000
- stack 1: 0x990001
- stack 0: 0xFFFF
2890	 AC	AND		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x1
2891	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x624
- stack 0: 0x7FFFC000
2892	 AE	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x7FFFC000
- stack 0: 0x60
2893	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
2894	 B2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2895	 B4	ADD		 	 
- stack 0: 0x628
2896	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2897	 B6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
2898	 B7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
- stack 0: 0xF0
2899	 B9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2F7
2900	 BA	JUMP		 	 
- stack 0: 0x628
2901	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x628
2902	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2903	 2F9	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
2904	 2FA	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
- stack 0: 0xE0
2905	 2FC	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2F70001
2906	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2F70001
- stack 0: 0xFFFF
2907	 300	AND		 	 
- stack 1: 0x628
- stack 0: 0x1
2908	 301	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
2909	 303	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x1
2910	 304	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
2911	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x0
2912	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x628
- stack 0: 0x1
2913	 309	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
2914	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
2915	 30D	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2916	 30F	ADD		 	 
- stack 0: 0x62C
2917	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2918	 311	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
2919	 312	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
- stack 0: 0xF0
2920	 314	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x316
2921	 315	JUMP		 	 
- stack 0: 0x62C
2922	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x62C
2923	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2924	 318	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
2925	 319	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
- stack 0: 0xE0
2926	 31B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x3160002
2927	 31C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x3160002
- stack 0: 0xFFFF
2928	 31F	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
2929	 320	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
2930	 322	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
2931	 323	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xA0
2932	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x62C
2933	 327	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2934	 329	ADD		 	 
- stack 0: 0x630
2935	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2936	 32B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
2937	 32C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
- stack 0: 0xF0
2938	 32E	SHR		 	 
- stack 1: 0x630
- stack 0: 0x330
2939	 32F	JUMP		 	 
- stack 0: 0x630
2940	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x630
2941	 331	PUSH2	0080	 	 
- stack 1: 0x630
- stack 0: 0x80
2942	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x630
- stack 0: 0x1
2943	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2944	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0x1
2945	 33B	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0xA0
2946	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x2
2947	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2948	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x2
2949	 345	SUB		 	 
- stack 1: 0x630
- stack 0: 0x1
2950	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x630
- stack 1: 0x1
- stack 0: 0x34E
2951	 349	JUMPI		 	 
- stack 0: 0x630
2952	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x630
2953	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2954	 350	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
2955	 351	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
- stack 0: 0xE0
2956	 353	SHR		 	 
- stack 1: 0x630
- stack 0: 0x330FFF0
2957	 354	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x330FFF0
- stack 0: 0xFFFF
2958	 357	AND		 	 
- stack 1: 0x630
- stack 0: 0xFFF0
2959	 358	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFFF0
- stack 0: 0x1
2960	 35A	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2961	 35B	ADD		 	 
- stack 0: 0x620
2962	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFF
2963	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x620
2964	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2965	 363	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x86FFF80099000102F70001031600020330FFF0012AFFFC00CE001900E80088
2966	 364	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x86FFF80099000102F70001031600020330FFF0012AFFFC00CE001900E80088
- stack 0: 0xF0
2967	 366	SHR		 	 
- stack 1: 0x620
- stack 0: 0x86
2968	 367	JUMP		 	 
- stack 0: 0x620
2969	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x620
2970	 87	PUSH4	ffff8000	 	 
- stack 1: 0x620
- stack 0: 0xFFFF8000
2971	 8C	PUSH2	0020	 	 
- stack 2: 0x620
- stack 1: 0xFFFF8000
- stack 0: 0x20
2972	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x620
2973	 90	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2974	 92	ADD		 	 
- stack 0: 0x624
2975	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2976	 94	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
2977	 95	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
- stack 0: 0xF0
2978	 97	SHR		 	 
- stack 1: 0x624
- stack 0: 0x99
2979	 98	JUMP		 	 
- stack 0: 0x624
2980	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x624
2981	 9A	PUSH2	0020	 	 
- stack 1: 0x624
- stack 0: 0x20
2982	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x624
- stack 0: 0xFFFF8000
2983	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
2984	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0xFFFF8000
2985	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x624
2986	 A5	MLOAD		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
2987	 A6	PUSH1	E0	 	 
- stack 3: 0x624
- stack 2: 0xFFFF8000
- stack 1: 0x99000102F70001031600020330FFF0012AFFFC00CE001900E8008802BE0000
- stack 0: 0xE0
2988	 A8	SHR		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x990001
2989	 A9	PUSH2	FFFF	 	 
- stack 3: 0x624
- stack 2: 0xFFFF8000
- stack 1: 0x990001
- stack 0: 0xFFFF
2990	 AC	AND		 	 
- stack 2: 0x624
- stack 1: 0xFFFF8000
- stack 0: 0x1
2991	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x624
- stack 0: 0x7FFFC000
2992	 AE	PUSH2	0060	 	 
- stack 2: 0x624
- stack 1: 0x7FFFC000
- stack 0: 0x60
2993	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x624
2994	 B2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2995	 B4	ADD		 	 
- stack 0: 0x628
2996	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2997	 B6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
2998	 B7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
- stack 0: 0xF0
2999	 B9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2F7
3000	 BA	JUMP		 	 
- stack 0: 0x628
3001	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x628
3002	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3003	 2F9	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
3004	 2FA	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x2F70001031600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF8
- stack 0: 0xE0
3005	 2FC	SHR		 	 
- stack 1: 0x628
- stack 0: 0x2F70001
3006	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x2F70001
- stack 0: 0xFFFF
3007	 300	AND		 	 
- stack 1: 0x628
- stack 0: 0x1
3008	 301	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
3009	 303	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x1
3010	 304	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x80
3011	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x628
- stack 1: 0x1
- stack 0: 0x1
3012	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x628
- stack 0: 0x2
3013	 309	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x2
- stack 0: 0x80
3014	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
3015	 30D	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3016	 30F	ADD		 	 
- stack 0: 0x62C
3017	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3018	 311	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
3019	 312	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
- stack 0: 0xF0
3020	 314	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x316
3021	 315	JUMP		 	 
- stack 0: 0x62C
3022	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x62C
3023	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
3024	 318	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
3025	 319	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x31600020330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B40000
- stack 0: 0xE0
3026	 31B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x3160002
3027	 31C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x3160002
- stack 0: 0xFFFF
3028	 31F	AND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3029	 320	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0x1
3030	 322	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0x2
3031	 323	PUSH2	00A0	 	 
- stack 2: 0x62C
- stack 1: 0x2
- stack 0: 0xA0
3032	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x62C
3033	 327	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3034	 329	ADD		 	 
- stack 0: 0x630
3035	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3036	 32B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
3037	 32C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x330FFF0012AFFFC00CE001900E8008802BE00000086FFF803B400000099000E
- stack 0: 0xF0
3038	 32E	SHR		 	 
- stack 1: 0x630
- stack 0: 0x330
3039	 32F	JUMP		 	 
- stack 0: 0x630
3040	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x630
3041	 331	PUSH2	0080	 	 
- stack 1: 0x630
- stack 0: 0x80
3042	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x630
- stack 0: 0x2
3043	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3044	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x630
- stack 0: 0x2
3045	 33B	PUSH2	00A0	 	 
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0xA0
3046	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x2
3047	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x630
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3048	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x630
- stack 1: 0x2
- stack 0: 0x2
3049	 345	SUB		 	 
- stack 1: 0x630
- stack 0: 0x0
3050	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x630
- stack 1: 0x0
- stack 0: 0x34E
3051	 349	JUMPI		 	 
- stack 0: 0x630
3052	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x630
- stack 0: 0x368
3053	 34D	JUMP		 	 
- stack 0: 0x630
3054	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x630
3055	 369	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3056	 36B	ADD		 	 
- stack 0: 0x634
3057	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3058	 36D	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x12AFFFC00CE001900E8008802BE00000086FFF803B400000099000E02F70001
3059	 36E	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x12AFFFC00CE001900E8008802BE00000086FFF803B400000099000E02F70001
- stack 0: 0xF0
3060	 370	SHR		 	 
- stack 1: 0x634
- stack 0: 0x12A
3061	 371	JUMP		 	 
- stack 0: 0x634
3062	 12A	JUMPDEST		 ;; __riscvimpl_LUI_7fffceb7	  ;; # instr: lui t4,0x7fffc(ignore imm)
- stack 0: 0x634
3063	 12B	PUSH4	7fffc000	 	 
- stack 1: 0x634
- stack 0: 0x7FFFC000
3064	 130	PUSH2	03A0	 	 
- stack 2: 0x634
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
3065	 133	MSTORE		 	  ;; # store to x29
- stack 0: 0x634
3066	 134	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3067	 136	ADD		 	 
- stack 0: 0x638
3068	 137	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3069	 138	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xCE001900E8008802BE00000086FFF803B400000099000E02F7000103160002
3070	 139	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xCE001900E8008802BE00000086FFF803B400000099000E02F7000103160002
- stack 0: 0xF0
3071	 13B	SHR		 	 
- stack 1: 0x638
- stack 0: 0xCE
3072	 13C	JUMP		 	 
- stack 0: 0x638
3073	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x638
3074	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3075	 D0	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xCE001900E8008802BE00000086FFF803B400000099000E02F7000103160002
3076	 D1	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xCE001900E8008802BE00000086FFF803B400000099000E02F7000103160002
- stack 0: 0xE0
3077	 D3	SHR		 	 
- stack 1: 0x638
- stack 0: 0xCE0019
3078	 D4	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xCE0019
- stack 0: 0xFFFF
3079	 D7	AND		 	 
- stack 1: 0x638
- stack 0: 0x19
3080	 D8	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x19
- stack 0: 0x1
3081	 DA	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x19
3082	 DB	PUSH2	0380	 	 
- stack 2: 0x638
- stack 1: 0x19
- stack 0: 0x380
3083	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x638
3084	 DF	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3085	 E1	ADD		 	 
- stack 0: 0x63C
3086	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3087	 E3	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xE8008802BE00000086FFF803B400000099000E02F70001031600020330FFEC
3088	 E4	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xE8008802BE00000086FFF803B400000099000E02F70001031600020330FFEC
- stack 0: 0xF0
3089	 E6	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xE8
3090	 E7	JUMP		 	 
- stack 0: 0x63C
3091	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x63C
3092	 E9	PUSH2	0060	 	 
- stack 1: 0x63C
- stack 0: 0x60
3093	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x63C
- stack 0: 0x7FFFC000
3094	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x63C
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
3095	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x63C
- stack 0: 0x7FFFC000
3096	 F3	PUSH2	03A0	 	 
- stack 2: 0x63C
- stack 1: 0x7FFFC000
- stack 0: 0x3A0
3097	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x63C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
3098	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x63C
- stack 2: 0x7FFFC000
- stack 1: 0x7FFFC000
- stack 0: 0xFFFFFFFF
3099	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x63C
- stack 1: 0x7FFFC000
- stack 0: 0x7FFFC000
3100	 FD	SUB		 	 
- stack 1: 0x63C
- stack 0: 0x0
3101	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x106
3102	 101	JUMPI		 	 
- stack 0: 0x63C
3103	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x63C
- stack 0: 0x120
3104	 105	JUMP		 	 
- stack 0: 0x63C
3105	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x63C
3106	 121	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3107	 123	ADD		 	 
- stack 0: 0x640
3108	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3109	 125	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2BE00000086FFF803B400000099000E02F70001031600020330FFEC016F0040
3110	 126	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x2BE00000086FFF803B400000099000E02F70001031600020330FFEC016F0040
- stack 0: 0xF0
3111	 128	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2BE
3112	 129	JUMP		 	 
- stack 0: 0x640
3113	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x640
3114	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3115	 2C0	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x2BE00000086FFF803B400000099000E02F70001031600020330FFEC016F0040
3116	 2C1	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x2BE00000086FFF803B400000099000E02F70001031600020330FFEC016F0040
- stack 0: 0xE0
3117	 2C3	SHR		 	 
- stack 1: 0x640
- stack 0: 0x2BE0000
3118	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
3119	 2C7	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3120	 2C8	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3121	 2CA	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3122	 2CB	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x80
3123	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3124	 2CF	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3125	 2D1	ADD		 	 
- stack 0: 0x644
3126	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3127	 2D3	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x86FFF803B400000099000E02F70001031600020330FFEC016F00400150FFFE
3128	 2D4	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x86FFF803B400000099000E02F70001031600020330FFEC016F00400150FFFE
- stack 0: 0xF0
3129	 2D6	SHR		 	 
- stack 1: 0x644
- stack 0: 0x86
3130	 2D7	JUMP		 	 
- stack 0: 0x644
3131	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x644
3132	 87	PUSH4	ffff8000	 	 
- stack 1: 0x644
- stack 0: 0xFFFF8000
3133	 8C	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xFFFF8000
- stack 0: 0x20
3134	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3135	 90	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3136	 92	ADD		 	 
- stack 0: 0x648
3137	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3138	 94	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
3139	 95	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
- stack 0: 0xF0
3140	 97	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3B4
3141	 98	JUMP		 	 
- stack 0: 0x648
3142	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x648
3143	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3144	 3B6	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
3145	 3B7	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
- stack 0: 0xE0
3146	 3B9	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3B40000
3147	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3148	 3BD	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3149	 3BE	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3150	 3C0	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3151	 3C1	POP		 	 
- stack 0: 0x648
3152	 3C2	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3153	 3C4	ADD		 	 
- stack 0: 0x64C
3154	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3155	 3C6	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
3156	 3C7	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
- stack 0: 0xF0
3157	 3C9	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x99
3158	 3CA	JUMP		 	 
- stack 0: 0x64C
3159	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x64C
3160	 9A	PUSH2	0020	 	 
- stack 1: 0x64C
- stack 0: 0x20
3161	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x64C
- stack 0: 0xFFFF8000
3162	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3163	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0xFFFF8000
3164	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x64C
3165	 A5	MLOAD		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
3166	 A6	PUSH1	E0	 	 
- stack 3: 0x64C
- stack 2: 0xFFFF8000
- stack 1: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
- stack 0: 0xE0
3167	 A8	SHR		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x99000E
3168	 A9	PUSH2	FFFF	 	 
- stack 3: 0x64C
- stack 2: 0xFFFF8000
- stack 1: 0x99000E
- stack 0: 0xFFFF
3169	 AC	AND		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0xE
3170	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x64C
- stack 0: 0x3FFFE
3171	 AE	PUSH2	0060	 	 
- stack 2: 0x64C
- stack 1: 0x3FFFE
- stack 0: 0x60
3172	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x64C
3173	 B2	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3174	 B4	ADD		 	 
- stack 0: 0x650
3175	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3176	 B6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
3177	 B7	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
- stack 0: 0xF0
3178	 B9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F7
3179	 BA	JUMP		 	 
- stack 0: 0x650
3180	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x650
3181	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3182	 2F9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
3183	 2FA	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
- stack 0: 0xE0
3184	 2FC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F70001
3185	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2F70001
- stack 0: 0xFFFF
3186	 300	AND		 	 
- stack 1: 0x650
- stack 0: 0x1
3187	 301	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
3188	 303	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x1
3189	 304	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
3190	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x0
3191	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x650
- stack 0: 0x1
3192	 309	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
3193	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x650
3194	 30D	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3195	 30F	ADD		 	 
- stack 0: 0x654
3196	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3197	 311	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
3198	 312	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
- stack 0: 0xF0
3199	 314	SHR		 	 
- stack 1: 0x654
- stack 0: 0x316
3200	 315	JUMP		 	 
- stack 0: 0x654
3201	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x654
3202	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3203	 318	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
3204	 319	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
- stack 0: 0xE0
3205	 31B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x3160002
3206	 31C	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x3160002
- stack 0: 0xFFFF
3207	 31F	AND		 	 
- stack 1: 0x654
- stack 0: 0x2
3208	 320	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x1
3209	 322	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x2
3210	 323	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xA0
3211	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x654
3212	 327	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3213	 329	ADD		 	 
- stack 0: 0x658
3214	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3215	 32B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
3216	 32C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
- stack 0: 0xF0
3217	 32E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x330
3218	 32F	JUMP		 	 
- stack 0: 0x658
3219	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x658
3220	 331	PUSH2	0080	 	 
- stack 1: 0x658
- stack 0: 0x80
3221	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x658
- stack 0: 0x1
3222	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3223	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x1
3224	 33B	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0xA0
3225	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x2
3226	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3227	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x2
3228	 345	SUB		 	 
- stack 1: 0x658
- stack 0: 0x1
3229	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x34E
3230	 349	JUMPI		 	 
- stack 0: 0x658
3231	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x658
3232	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3233	 350	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
3234	 351	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
- stack 0: 0xE0
3235	 353	SHR		 	 
- stack 1: 0x658
- stack 0: 0x330FFEC
3236	 354	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x330FFEC
- stack 0: 0xFFFF
3237	 357	AND		 	 
- stack 1: 0x658
- stack 0: 0xFFEC
3238	 358	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0xFFEC
- stack 0: 0x1
3239	 35A	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3240	 35B	ADD		 	 
- stack 0: 0x644
3241	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x644
- stack 0: 0xFFFFFFFF
3242	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x644
3243	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3244	 363	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x86FFF803B400000099000E02F70001031600020330FFEC016F00400150FFFE
3245	 364	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x86FFF803B400000099000E02F70001031600020330FFEC016F00400150FFFE
- stack 0: 0xF0
3246	 366	SHR		 	 
- stack 1: 0x644
- stack 0: 0x86
3247	 367	JUMP		 	 
- stack 0: 0x644
3248	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x644
3249	 87	PUSH4	ffff8000	 	 
- stack 1: 0x644
- stack 0: 0xFFFF8000
3250	 8C	PUSH2	0020	 	 
- stack 2: 0x644
- stack 1: 0xFFFF8000
- stack 0: 0x20
3251	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x644
3252	 90	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3253	 92	ADD		 	 
- stack 0: 0x648
3254	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3255	 94	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
3256	 95	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
- stack 0: 0xF0
3257	 97	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3B4
3258	 98	JUMP		 	 
- stack 0: 0x648
3259	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x648
3260	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3261	 3B6	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
3262	 3B7	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x3B400000099000E02F70001031600020330FFEC016F00400150FFFE00CE001A
- stack 0: 0xE0
3263	 3B9	SHR		 	 
- stack 1: 0x648
- stack 0: 0x3B40000
3264	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3265	 3BD	AND		 	 
- stack 1: 0x648
- stack 0: 0x0
3266	 3BE	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x1
3267	 3C0	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x0
3268	 3C1	POP		 	 
- stack 0: 0x648
3269	 3C2	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3270	 3C4	ADD		 	 
- stack 0: 0x64C
3271	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3272	 3C6	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
3273	 3C7	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
- stack 0: 0xF0
3274	 3C9	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x99
3275	 3CA	JUMP		 	 
- stack 0: 0x64C
3276	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x64C
3277	 9A	PUSH2	0020	 	 
- stack 1: 0x64C
- stack 0: 0x20
3278	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x64C
- stack 0: 0xFFFF8000
3279	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3280	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0xFFFF8000
3281	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x64C
3282	 A5	MLOAD		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
3283	 A6	PUSH1	E0	 	 
- stack 3: 0x64C
- stack 2: 0xFFFF8000
- stack 1: 0x99000E02F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C
- stack 0: 0xE0
3284	 A8	SHR		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0x99000E
3285	 A9	PUSH2	FFFF	 	 
- stack 3: 0x64C
- stack 2: 0xFFFF8000
- stack 1: 0x99000E
- stack 0: 0xFFFF
3286	 AC	AND		 	 
- stack 2: 0x64C
- stack 1: 0xFFFF8000
- stack 0: 0xE
3287	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x64C
- stack 0: 0x3FFFE
3288	 AE	PUSH2	0060	 	 
- stack 2: 0x64C
- stack 1: 0x3FFFE
- stack 0: 0x60
3289	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x64C
3290	 B2	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3291	 B4	ADD		 	 
- stack 0: 0x650
3292	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3293	 B6	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
3294	 B7	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
- stack 0: 0xF0
3295	 B9	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F7
3296	 BA	JUMP		 	 
- stack 0: 0x650
3297	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x650
3298	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3299	 2F9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
3300	 2FA	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x2F70001031600020330FFEC016F00400150FFFE00CE001A00E8005C02BE0000
- stack 0: 0xE0
3301	 2FC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x2F70001
3302	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x2F70001
- stack 0: 0xFFFF
3303	 300	AND		 	 
- stack 1: 0x650
- stack 0: 0x1
3304	 301	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
3305	 303	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x1
3306	 304	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x80
3307	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x650
- stack 1: 0x1
- stack 0: 0x1
3308	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x650
- stack 0: 0x2
3309	 309	PUSH2	0080	 	 
- stack 2: 0x650
- stack 1: 0x2
- stack 0: 0x80
3310	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x650
3311	 30D	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3312	 30F	ADD		 	 
- stack 0: 0x654
3313	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3314	 311	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
3315	 312	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
- stack 0: 0xF0
3316	 314	SHR		 	 
- stack 1: 0x654
- stack 0: 0x316
3317	 315	JUMP		 	 
- stack 0: 0x654
3318	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x654
3319	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3320	 318	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
3321	 319	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x31600020330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF8
- stack 0: 0xE0
3322	 31B	SHR		 	 
- stack 1: 0x654
- stack 0: 0x3160002
3323	 31C	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x3160002
- stack 0: 0xFFFF
3324	 31F	AND		 	 
- stack 1: 0x654
- stack 0: 0x2
3325	 320	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0x1
3326	 322	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x2
3327	 323	PUSH2	00A0	 	 
- stack 2: 0x654
- stack 1: 0x2
- stack 0: 0xA0
3328	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x654
3329	 327	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3330	 329	ADD		 	 
- stack 0: 0x658
3331	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3332	 32B	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
3333	 32C	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x330FFEC016F00400150FFFE00CE001A00E8005C02BE00000086FFF803B40000
- stack 0: 0xF0
3334	 32E	SHR		 	 
- stack 1: 0x658
- stack 0: 0x330
3335	 32F	JUMP		 	 
- stack 0: 0x658
3336	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x658
3337	 331	PUSH2	0080	 	 
- stack 1: 0x658
- stack 0: 0x80
3338	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x658
- stack 0: 0x2
3339	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3340	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x2
3341	 33B	PUSH2	00A0	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0xA0
3342	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x2
3343	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3344	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x2
3345	 345	SUB		 	 
- stack 1: 0x658
- stack 0: 0x0
3346	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x34E
3347	 349	JUMPI		 	 
- stack 0: 0x658
3348	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x658
- stack 0: 0x368
3349	 34D	JUMP		 	 
- stack 0: 0x658
3350	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x658
3351	 369	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3352	 36B	ADD		 	 
- stack 0: 0x65C
3353	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3354	 36D	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x16F00400150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B40000
3355	 36E	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x16F00400150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B40000
- stack 0: 0xF0
3356	 370	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x16F
3357	 371	JUMP		 	 
- stack 0: 0x65C
3358	 16F	JUMPDEST		 ;; __riscvimpl_LUI_40eb7	  ;; # instr: lui t4,0x40(ignore imm)
- stack 0: 0x65C
3359	 170	PUSH4	00040000	 	 
- stack 1: 0x65C
- stack 0: 0x40000
3360	 175	PUSH2	03A0	 	 
- stack 2: 0x65C
- stack 1: 0x40000
- stack 0: 0x3A0
3361	 178	MSTORE		 	  ;; # store to x29
- stack 0: 0x65C
3362	 179	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3363	 17B	ADD		 	 
- stack 0: 0x660
3364	 17C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3365	 17D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B400000099000F
3366	 17E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B400000099000F
- stack 0: 0xF0
3367	 180	SHR		 	 
- stack 1: 0x660
- stack 0: 0x150
3368	 181	JUMP		 	 
- stack 0: 0x660
3369	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x660
3370	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3371	 152	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B400000099000F
3372	 153	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x150FFFE00CE001A00E8005C02BE00000086FFF803B4000003B400000099000F
- stack 0: 0xE0
3373	 155	SHR		 	 
- stack 1: 0x660
- stack 0: 0x150FFFE
3374	 156	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x150FFFE
- stack 0: 0xFFFF
3375	 159	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFFE
3376	 15A	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFFE
- stack 0: 0x1
3377	 15C	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
3378	 15D	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
3379	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x660
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x40000
3380	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x660
- stack 0: 0x3FFFE
3381	 162	PUSH2	03A0	 	 
- stack 2: 0x660
- stack 1: 0x3FFFE
- stack 0: 0x3A0
3382	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x660
3383	 166	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3384	 168	ADD		 	 
- stack 0: 0x664
3385	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3386	 16A	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xCE001A00E8005C02BE00000086FFF803B4000003B400000099000F02F70001
3387	 16B	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xCE001A00E8005C02BE00000086FFF803B4000003B400000099000F02F70001
- stack 0: 0xF0
3388	 16D	SHR		 	 
- stack 1: 0x664
- stack 0: 0xCE
3389	 16E	JUMP		 	 
- stack 0: 0x664
3390	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
3391	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3392	 D0	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xCE001A00E8005C02BE00000086FFF803B4000003B400000099000F02F70001
3393	 D1	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xCE001A00E8005C02BE00000086FFF803B4000003B400000099000F02F70001
- stack 0: 0xE0
3394	 D3	SHR		 	 
- stack 1: 0x664
- stack 0: 0xCE001A
3395	 D4	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xCE001A
- stack 0: 0xFFFF
3396	 D7	AND		 	 
- stack 1: 0x664
- stack 0: 0x1A
3397	 D8	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0x1A
- stack 0: 0x1
3398	 DA	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0x1A
3399	 DB	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0x1A
- stack 0: 0x380
3400	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
3401	 DF	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3402	 E1	ADD		 	 
- stack 0: 0x668
3403	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3404	 E3	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xE8005C02BE00000086FFF803B4000003B400000099000F02F7000103160002
3405	 E4	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xE8005C02BE00000086FFF803B4000003B400000099000F02F7000103160002
- stack 0: 0xF0
3406	 E6	SHR		 	 
- stack 1: 0x668
- stack 0: 0xE8
3407	 E7	JUMP		 	 
- stack 0: 0x668
3408	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x668
3409	 E9	PUSH2	0060	 	 
- stack 1: 0x668
- stack 0: 0x60
3410	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x668
- stack 0: 0x3FFFE
3411	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x668
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
3412	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x668
- stack 0: 0x3FFFE
3413	 F3	PUSH2	03A0	 	 
- stack 2: 0x668
- stack 1: 0x3FFFE
- stack 0: 0x3A0
3414	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x668
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
3415	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x668
- stack 2: 0x3FFFE
- stack 1: 0x3FFFE
- stack 0: 0xFFFFFFFF
3416	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x668
- stack 1: 0x3FFFE
- stack 0: 0x3FFFE
3417	 FD	SUB		 	 
- stack 1: 0x668
- stack 0: 0x0
3418	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x106
3419	 101	JUMPI		 	 
- stack 0: 0x668
3420	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x668
- stack 0: 0x120
3421	 105	JUMP		 	 
- stack 0: 0x668
3422	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x668
3423	 121	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3424	 123	ADD		 	 
- stack 0: 0x66C
3425	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3426	 125	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2BE00000086FFF803B4000003B400000099000F02F70001031600020330FFE8
3427	 126	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x2BE00000086FFF803B4000003B400000099000F02F70001031600020330FFE8
- stack 0: 0xF0
3428	 128	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2BE
3429	 129	JUMP		 	 
- stack 0: 0x66C
3430	 2BE	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x66C
3431	 2BF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3432	 2C0	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x2BE00000086FFF803B4000003B400000099000F02F70001031600020330FFE8
3433	 2C1	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x2BE00000086FFF803B4000003B400000099000F02F70001031600020330FFE8
- stack 0: 0xE0
3434	 2C3	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x2BE0000
3435	 2C4	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x2BE0000
- stack 0: 0xFFFF
3436	 2C7	AND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3437	 2C8	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x1
3438	 2CA	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x0
3439	 2CB	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x0
- stack 0: 0x80
3440	 2CE	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
3441	 2CF	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3442	 2D1	ADD		 	 
- stack 0: 0x670
3443	 2D2	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3444	 2D3	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x86FFF803B4000003B400000099000F02F70001031600020330FFE801A10020
3445	 2D4	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x86FFF803B4000003B400000099000F02F70001031600020330FFE801A10020
- stack 0: 0xF0
3446	 2D6	SHR		 	 
- stack 1: 0x670
- stack 0: 0x86
3447	 2D7	JUMP		 	 
- stack 0: 0x670
3448	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x670
3449	 87	PUSH4	ffff8000	 	 
- stack 1: 0x670
- stack 0: 0xFFFF8000
3450	 8C	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xFFFF8000
- stack 0: 0x20
3451	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x670
3452	 90	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3453	 92	ADD		 	 
- stack 0: 0x674
3454	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3455	 94	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
3456	 95	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
- stack 0: 0xF0
3457	 97	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3B4
3458	 98	JUMP		 	 
- stack 0: 0x674
3459	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
3460	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3461	 3B6	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
3462	 3B7	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
- stack 0: 0xE0
3463	 3B9	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3B40000
3464	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3465	 3BD	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
3466	 3BE	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
3467	 3C0	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
3468	 3C1	POP		 	 
- stack 0: 0x674
3469	 3C2	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3470	 3C4	ADD		 	 
- stack 0: 0x678
3471	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3472	 3C6	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
3473	 3C7	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
- stack 0: 0xF0
3474	 3C9	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3B4
3475	 3CA	JUMP		 	 
- stack 0: 0x678
3476	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x678
3477	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3478	 3B6	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
3479	 3B7	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
- stack 0: 0xE0
3480	 3B9	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3B40000
3481	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3482	 3BD	AND		 	 
- stack 1: 0x678
- stack 0: 0x0
3483	 3BE	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1
3484	 3C0	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x0
3485	 3C1	POP		 	 
- stack 0: 0x678
3486	 3C2	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3487	 3C4	ADD		 	 
- stack 0: 0x67C
3488	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3489	 3C6	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
3490	 3C7	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
- stack 0: 0xF0
3491	 3C9	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x99
3492	 3CA	JUMP		 	 
- stack 0: 0x67C
3493	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x67C
3494	 9A	PUSH2	0020	 	 
- stack 1: 0x67C
- stack 0: 0x20
3495	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x67C
- stack 0: 0xFFFF8000
3496	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3497	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0xFFFF8000
3498	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x67C
3499	 A5	MLOAD		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
3500	 A6	PUSH1	E0	 	 
- stack 3: 0x67C
- stack 2: 0xFFFF8000
- stack 1: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
- stack 0: 0xE0
3501	 A8	SHR		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x99000F
3502	 A9	PUSH2	FFFF	 	 
- stack 3: 0x67C
- stack 2: 0xFFFF8000
- stack 1: 0x99000F
- stack 0: 0xFFFF
3503	 AC	AND		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0xF
3504	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x67C
- stack 0: 0x1FFFF
3505	 AE	PUSH2	0060	 	 
- stack 2: 0x67C
- stack 1: 0x1FFFF
- stack 0: 0x60
3506	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x67C
3507	 B2	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3508	 B4	ADD		 	 
- stack 0: 0x680
3509	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3510	 B6	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
3511	 B7	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
- stack 0: 0xF0
3512	 B9	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2F7
3513	 BA	JUMP		 	 
- stack 0: 0x680
3514	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x680
3515	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3516	 2F9	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
3517	 2FA	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
- stack 0: 0xE0
3518	 2FC	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2F70001
3519	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x2F70001
- stack 0: 0xFFFF
3520	 300	AND		 	 
- stack 1: 0x680
- stack 0: 0x1
3521	 301	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
3522	 303	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x1
3523	 304	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
3524	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x0
3525	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x680
- stack 0: 0x1
3526	 309	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
3527	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
3528	 30D	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3529	 30F	ADD		 	 
- stack 0: 0x684
3530	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3531	 311	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
3532	 312	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
- stack 0: 0xF0
3533	 314	SHR		 	 
- stack 1: 0x684
- stack 0: 0x316
3534	 315	JUMP		 	 
- stack 0: 0x684
3535	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x684
3536	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3537	 318	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
3538	 319	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
- stack 0: 0xE0
3539	 31B	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3160002
3540	 31C	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3160002
- stack 0: 0xFFFF
3541	 31F	AND		 	 
- stack 1: 0x684
- stack 0: 0x2
3542	 320	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x1
3543	 322	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x2
3544	 323	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
3545	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x684
3546	 327	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3547	 329	ADD		 	 
- stack 0: 0x688
3548	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3549	 32B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
3550	 32C	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
- stack 0: 0xF0
3551	 32E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x330
3552	 32F	JUMP		 	 
- stack 0: 0x688
3553	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x688
3554	 331	PUSH2	0080	 	 
- stack 1: 0x688
- stack 0: 0x80
3555	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x688
- stack 0: 0x1
3556	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3557	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x1
3558	 33B	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0xA0
3559	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x2
3560	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3561	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x2
3562	 345	SUB		 	 
- stack 1: 0x688
- stack 0: 0x1
3563	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x688
- stack 1: 0x1
- stack 0: 0x34E
3564	 349	JUMPI		 	 
- stack 0: 0x688
3565	 34E	JUMPDEST		 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x688
3566	 34F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3567	 350	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
3568	 351	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
- stack 0: 0xE0
3569	 353	SHR		 	 
- stack 1: 0x688
- stack 0: 0x330FFE8
3570	 354	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x330FFE8
- stack 0: 0xFFFF
3571	 357	AND		 	 
- stack 1: 0x688
- stack 0: 0xFFE8
3572	 358	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xFFE8
- stack 0: 0x1
3573	 35A	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3574	 35B	ADD		 	 
- stack 0: 0x670
3575	 35C	PUSH4	FFFFFFFF	 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFF
3576	 361	AND		 	  ;; # mask to 32 bits
- stack 0: 0x670
3577	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3578	 363	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x86FFF803B4000003B400000099000F02F70001031600020330FFE801A10020
3579	 364	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x86FFF803B4000003B400000099000F02F70001031600020330FFE801A10020
- stack 0: 0xF0
3580	 366	SHR		 	 
- stack 1: 0x670
- stack 0: 0x86
3581	 367	JUMP		 	 
- stack 0: 0x670
3582	 86	JUMPDEST		 ;; __riscvimpl_LUI_ffff80b7	  ;; # instr: lui ra,0xffff8(ignore imm)
- stack 0: 0x670
3583	 87	PUSH4	ffff8000	 	 
- stack 1: 0x670
- stack 0: 0xFFFF8000
3584	 8C	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xFFFF8000
- stack 0: 0x20
3585	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x670
3586	 90	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3587	 92	ADD		 	 
- stack 0: 0x674
3588	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3589	 94	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
3590	 95	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
- stack 0: 0xF0
3591	 97	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3B4
3592	 98	JUMP		 	 
- stack 0: 0x674
3593	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
3594	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3595	 3B6	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
3596	 3B7	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x3B4000003B400000099000F02F70001031600020330FFE801A100200150FFFF
- stack 0: 0xE0
3597	 3B9	SHR		 	 
- stack 1: 0x674
- stack 0: 0x3B40000
3598	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3599	 3BD	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
3600	 3BE	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
3601	 3C0	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
3602	 3C1	POP		 	 
- stack 0: 0x674
3603	 3C2	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3604	 3C4	ADD		 	 
- stack 0: 0x678
3605	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3606	 3C6	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
3607	 3C7	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
- stack 0: 0xF0
3608	 3C9	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3B4
3609	 3CA	JUMP		 	 
- stack 0: 0x678
3610	 3B4	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x678
3611	 3B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3612	 3B6	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
3613	 3B7	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3B400000099000F02F70001031600020330FFE801A100200150FFFF00CE001B
- stack 0: 0xE0
3614	 3B9	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3B40000
3615	 3BA	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3B40000
- stack 0: 0xFFFF
3616	 3BD	AND		 	 
- stack 1: 0x678
- stack 0: 0x0
3617	 3BE	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x0
- stack 0: 0x1
3618	 3C0	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x0
3619	 3C1	POP		 	 
- stack 0: 0x678
3620	 3C2	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3621	 3C4	ADD		 	 
- stack 0: 0x67C
3622	 3C5	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3623	 3C6	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
3624	 3C7	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
- stack 0: 0xF0
3625	 3C9	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x99
3626	 3CA	JUMP		 	 
- stack 0: 0x67C
3627	 99	JUMPDEST		 ;; __riscvimpl_SRLI_3_1_0	  ;; # instr: srai gp,ra,0(ignore imm)
- stack 0: 0x67C
3628	 9A	PUSH2	0020	 	 
- stack 1: 0x67C
- stack 0: 0x20
3629	 9D	MLOAD		 	  ;; # read from x1
- stack 1: 0x67C
- stack 0: 0xFFFF8000
3630	 9E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0xFFFFFFFF
3631	 A3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x67C
- stack 0: 0xFFFF8000
3632	 A4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x67C
3633	 A5	MLOAD		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
3634	 A6	PUSH1	E0	 	 
- stack 3: 0x67C
- stack 2: 0xFFFF8000
- stack 1: 0x99000F02F70001031600020330FFE801A100200150FFFF00CE001B00E8002C
- stack 0: 0xE0
3635	 A8	SHR		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0x99000F
3636	 A9	PUSH2	FFFF	 	 
- stack 3: 0x67C
- stack 2: 0xFFFF8000
- stack 1: 0x99000F
- stack 0: 0xFFFF
3637	 AC	AND		 	 
- stack 2: 0x67C
- stack 1: 0xFFFF8000
- stack 0: 0xF
3638	 AD	SHR		 	  ;; # SRLI
- stack 1: 0x67C
- stack 0: 0x1FFFF
3639	 AE	PUSH2	0060	 	 
- stack 2: 0x67C
- stack 1: 0x1FFFF
- stack 0: 0x60
3640	 B1	MSTORE		 	  ;; # store to x3
- stack 0: 0x67C
3641	 B2	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3642	 B4	ADD		 	 
- stack 0: 0x680
3643	 B5	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3644	 B6	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
3645	 B7	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
- stack 0: 0xF0
3646	 B9	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2F7
3647	 BA	JUMP		 	 
- stack 0: 0x680
3648	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x680
3649	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3650	 2F9	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
3651	 2FA	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x2F70001031600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F
- stack 0: 0xE0
3652	 2FC	SHR		 	 
- stack 1: 0x680
- stack 0: 0x2F70001
3653	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x2F70001
- stack 0: 0xFFFF
3654	 300	AND		 	 
- stack 1: 0x680
- stack 0: 0x1
3655	 301	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
3656	 303	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0x1
3657	 304	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x80
3658	 307	MLOAD		 	  ;; # read from x4
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x1
3659	 308	ADD		 	  ;; # ADDI 4
- stack 1: 0x680
- stack 0: 0x2
3660	 309	PUSH2	0080	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x80
3661	 30C	MSTORE		 	  ;; # store to x4
- stack 0: 0x680
3662	 30D	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3663	 30F	ADD		 	 
- stack 0: 0x684
3664	 310	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3665	 311	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
3666	 312	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
- stack 0: 0xF0
3667	 314	SHR		 	 
- stack 1: 0x684
- stack 0: 0x316
3668	 315	JUMP		 	 
- stack 0: 0x684
3669	 316	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x684
3670	 317	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3671	 318	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
3672	 319	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x31600020330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE0000
- stack 0: 0xE0
3673	 31B	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3160002
3674	 31C	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3160002
- stack 0: 0xFFFF
3675	 31F	AND		 	 
- stack 1: 0x684
- stack 0: 0x2
3676	 320	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0x1
3677	 322	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x2
3678	 323	PUSH2	00A0	 	 
- stack 2: 0x684
- stack 1: 0x2
- stack 0: 0xA0
3679	 326	MSTORE		 	  ;; # store to x5
- stack 0: 0x684
3680	 327	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3681	 329	ADD		 	 
- stack 0: 0x688
3682	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3683	 32B	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
3684	 32C	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x330FFE801A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C
- stack 0: 0xF0
3685	 32E	SHR		 	 
- stack 1: 0x688
- stack 0: 0x330
3686	 32F	JUMP		 	 
- stack 0: 0x688
3687	 330	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-14(ignore imm)
- stack 0: 0x688
3688	 331	PUSH2	0080	 	 
- stack 1: 0x688
- stack 0: 0x80
3689	 334	MLOAD		 	  ;; # read from x4
- stack 1: 0x688
- stack 0: 0x2
3690	 335	PUSH4	FFFFFFFF	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3691	 33A	AND		 	  ;; # mask to 32 bits
- stack 1: 0x688
- stack 0: 0x2
3692	 33B	PUSH2	00A0	 	 
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0xA0
3693	 33E	MLOAD		 	  ;; # read from x5
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
3694	 33F	PUSH4	FFFFFFFF	 	 
- stack 3: 0x688
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3695	 344	AND		 	  ;; # mask to 32 bits
- stack 2: 0x688
- stack 1: 0x2
- stack 0: 0x2
3696	 345	SUB		 	 
- stack 1: 0x688
- stack 0: 0x0
3697	 346	PUSH2	034E	 ;; _neq_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 2: 0x688
- stack 1: 0x0
- stack 0: 0x34E
3698	 349	JUMPI		 	 
- stack 0: 0x688
3699	 34A	PUSH2	0368	 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 1: 0x688
- stack 0: 0x368
3700	 34D	JUMP		 	 
- stack 0: 0x688
3701	 368	JUMPDEST		 ;; _neq_after_b398dcb88443a389b49091c7236840e81848efe329ea6f3e6655ad82662d9251	 
- stack 0: 0x688
3702	 369	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3703	 36B	ADD		 	 
- stack 0: 0x68C
3704	 36C	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3705	 36D	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x1A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C
3706	 36E	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x1A100200150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C
- stack 0: 0xF0
3707	 370	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x1A1
3708	 371	JUMP		 	 
- stack 0: 0x68C
3709	 1A1	JUMPDEST		 ;; __riscvimpl_LUI_20eb7	  ;; # instr: lui t4,0x20(ignore imm)
- stack 0: 0x68C
3710	 1A2	PUSH4	00020000	 	 
- stack 1: 0x68C
- stack 0: 0x20000
3711	 1A7	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0x20000
- stack 0: 0x3A0
3712	 1AA	MSTORE		 	  ;; # store to x29
- stack 0: 0x68C
3713	 1AB	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3714	 1AD	ADD		 	 
- stack 0: 0x690
3715	 1AE	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3716	 1AF	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C01B40021
3717	 1B0	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C01B40021
- stack 0: 0xF0
3718	 1B2	SHR		 	 
- stack 1: 0x690
- stack 0: 0x150
3719	 1B3	JUMP		 	 
- stack 0: 0x690
3720	 150	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,-256(ignore imm)
- stack 0: 0x690
3721	 151	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3722	 152	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C01B40021
3723	 153	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x150FFFF00CE001B00E8002C03CB001F01CE000000CE001C027C001C01B40021
- stack 0: 0xE0
3724	 155	SHR		 	 
- stack 1: 0x690
- stack 0: 0x150FFFF
3725	 156	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x150FFFF
- stack 0: 0xFFFF
3726	 159	AND		 	 
- stack 1: 0x690
- stack 0: 0xFFFF
3727	 15A	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0xFFFF
- stack 0: 0x1
3728	 15C	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3729	 15D	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
3730	 160	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20000
3731	 161	ADD		 	  ;; # ADDI 29
- stack 1: 0x690
- stack 0: 0x1FFFF
3732	 162	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0x1FFFF
- stack 0: 0x3A0
3733	 165	MSTORE		 	  ;; # store to x29
- stack 0: 0x690
3734	 166	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3735	 168	ADD		 	 
- stack 0: 0x694
3736	 169	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3737	 16A	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xCE001B00E8002C03CB001F01CE000000CE001C027C001C01B4002103EB0014
3738	 16B	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xCE001B00E8002C03CB001F01CE000000CE001C027C001C01B4002103EB0014
- stack 0: 0xF0
3739	 16D	SHR		 	 
- stack 1: 0x694
- stack 0: 0xCE
3740	 16E	JUMP		 	 
- stack 0: 0x694
3741	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x694
3742	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
3743	 D0	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xCE001B00E8002C03CB001F01CE000000CE001C027C001C01B4002103EB0014
3744	 D1	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0xCE001B00E8002C03CB001F01CE000000CE001C027C001C01B4002103EB0014
- stack 0: 0xE0
3745	 D3	SHR		 	 
- stack 1: 0x694
- stack 0: 0xCE001B
3746	 D4	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0xCE001B
- stack 0: 0xFFFF
3747	 D7	AND		 	 
- stack 1: 0x694
- stack 0: 0x1B
3748	 D8	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1B
- stack 0: 0x1
3749	 DA	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1B
3750	 DB	PUSH2	0380	 	 
- stack 2: 0x694
- stack 1: 0x1B
- stack 0: 0x380
3751	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x694
3752	 DF	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3753	 E1	ADD		 	 
- stack 0: 0x698
3754	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3755	 E3	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0xE8002C03CB001F01CE000000CE001C027C001C01B4002103EB001401CE0000
3756	 E4	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0xE8002C03CB001F01CE000000CE001C027C001C01B4002103EB001401CE0000
- stack 0: 0xF0
3757	 E6	SHR		 	 
- stack 1: 0x698
- stack 0: 0xE8
3758	 E7	JUMP		 	 
- stack 0: 0x698
3759	 E8	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,2a4(ignore imm)
- stack 0: 0x698
3760	 E9	PUSH2	0060	 	 
- stack 1: 0x698
- stack 0: 0x60
3761	 EC	MLOAD		 	  ;; # read from x3
- stack 1: 0x698
- stack 0: 0x1FFFF
3762	 ED	PUSH4	FFFFFFFF	 	 
- stack 2: 0x698
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
3763	 F2	AND		 	  ;; # mask to 32 bits
- stack 1: 0x698
- stack 0: 0x1FFFF
3764	 F3	PUSH2	03A0	 	 
- stack 2: 0x698
- stack 1: 0x1FFFF
- stack 0: 0x3A0
3765	 F6	MLOAD		 	  ;; # read from x29
- stack 2: 0x698
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
3766	 F7	PUSH4	FFFFFFFF	 	 
- stack 3: 0x698
- stack 2: 0x1FFFF
- stack 1: 0x1FFFF
- stack 0: 0xFFFFFFFF
3767	 FC	AND		 	  ;; # mask to 32 bits
- stack 2: 0x698
- stack 1: 0x1FFFF
- stack 0: 0x1FFFF
3768	 FD	SUB		 	 
- stack 1: 0x698
- stack 0: 0x0
3769	 FE	PUSH2	0106	 ;; _neq_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 2: 0x698
- stack 1: 0x0
- stack 0: 0x106
3770	 101	JUMPI		 	 
- stack 0: 0x698
3771	 102	PUSH2	0120	 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 1: 0x698
- stack 0: 0x120
3772	 105	JUMP		 	 
- stack 0: 0x698
3773	 120	JUMPDEST		 ;; _neq_after_6d863c6e73aa8791e5070f3d9d636f2be72ed83e14c3d1d7d76959693eff534e	 
- stack 0: 0x698
3774	 121	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3775	 123	ADD		 	 
- stack 0: 0x69C
3776	 124	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3777	 125	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x3CB001F01CE000000CE001C027C001C01B4002103EB001401CE000000CE001D
3778	 126	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x3CB001F01CE000000CE001C027C001C01B4002103EB001401CE000000CE001D
- stack 0: 0xF0
3779	 128	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x3CB
3780	 129	JUMP		 	 
- stack 0: 0x69C
3781	 3CB	JUMPDEST		 ;; __riscvimpl_SRLI_1_0_0	  ;; # instr: srai ra,zero,31(ignore imm)
- stack 0: 0x69C
3782	 3CC	PUSH1	00	 	 
- stack 1: 0x69C
- stack 0: 0x0
3783	 3CE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3784	 3D3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x0
3785	 3D4	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x69C
3786	 3D5	MLOAD		 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x3CB001F01CE000000CE001C027C001C01B4002103EB001401CE000000CE001D
3787	 3D6	PUSH1	E0	 	 
- stack 3: 0x69C
- stack 2: 0x0
- stack 1: 0x3CB001F01CE000000CE001C027C001C01B4002103EB001401CE000000CE001D
- stack 0: 0xE0
3788	 3D8	SHR		 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x3CB001F
3789	 3D9	PUSH2	FFFF	 	 
- stack 3: 0x69C
- stack 2: 0x0
- stack 1: 0x3CB001F
- stack 0: 0xFFFF
3790	 3DC	AND		 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x1F
3791	 3DD	SHR		 	  ;; # SRLI
- stack 1: 0x69C
- stack 0: 0x0
3792	 3DE	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x20
3793	 3E1	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
3794	 3E2	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3795	 3E4	ADD		 	 
- stack 0: 0x6A0
3796	 3E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3797	 3E6	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1CE000000CE001C027C001C01B4002103EB001401CE000000CE001D040A0008
3798	 3E7	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1CE000000CE001C027C001C01B4002103EB001401CE000000CE001D040A0008
- stack 0: 0xF0
3799	 3E9	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1CE
3800	 3EA	JUMP		 	 
- stack 0: 0x6A0
3801	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x6A0
3802	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
3803	 1D0	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1CE000000CE001C027C001C01B4002103EB001401CE000000CE001D040A0008
3804	 1D1	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x1CE000000CE001C027C001C01B4002103EB001401CE000000CE001D040A0008
- stack 0: 0xE0
3805	 1D3	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1CE0000
3806	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
3807	 1D7	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3808	 1D8	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
3809	 1DA	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3810	 1DB	PUSH2	03A0	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x3A0
3811	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x6A0
3812	 1DF	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3813	 1E1	ADD		 	 
- stack 0: 0x6A4
3814	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3815	 1E3	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xCE001C027C001C01B4002103EB001401CE000000CE001D040A0008044A0018
3816	 1E4	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xCE001C027C001C01B4002103EB001401CE000000CE001D040A0008044A0018
- stack 0: 0xF0
3817	 1E6	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xCE
3818	 1E7	JUMP		 	 
- stack 0: 0x6A4
3819	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6A4
3820	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3821	 D0	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xCE001C027C001C01B4002103EB001401CE000000CE001D040A0008044A0018
3822	 D1	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0xCE001C027C001C01B4002103EB001401CE000000CE001D040A0008044A0018
- stack 0: 0xE0
3823	 D3	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xCE001C
3824	 D4	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xCE001C
- stack 0: 0xFFFF
3825	 D7	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x1C
3826	 D8	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x1C
- stack 0: 0x1
3827	 DA	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x1C
3828	 DB	PUSH2	0380	 	 
- stack 2: 0x6A4
- stack 1: 0x1C
- stack 0: 0x380
3829	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x6A4
3830	 DF	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3831	 E1	ADD		 	 
- stack 0: 0x6A8
3832	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3833	 E3	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x27C001C01B4002103EB001401CE000000CE001D040A0008044A001800210000
3834	 E4	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x27C001C01B4002103EB001401CE000000CE001D040A0008044A001800210000
- stack 0: 0xF0
3835	 E6	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x27C
3836	 E7	JUMP		 	 
- stack 0: 0x6A8
3837	 27C	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,138(ignore imm)
- stack 0: 0x6A8
3838	 27D	PUSH2	0020	 	 
- stack 1: 0x6A8
- stack 0: 0x20
3839	 280	MLOAD		 	  ;; # read from x1
- stack 1: 0x6A8
- stack 0: 0x0
3840	 281	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3841	 286	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A8
- stack 0: 0x0
3842	 287	PUSH2	03A0	 	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x3A0
3843	 28A	MLOAD		 	  ;; # read from x29
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x0
3844	 28B	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3845	 290	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x0
3846	 291	SUB		 	 
- stack 1: 0x6A8
- stack 0: 0x0
3847	 292	PUSH2	029A	 ;; _neq_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 2: 0x6A8
- stack 1: 0x0
- stack 0: 0x29A
3848	 295	JUMPI		 	 
- stack 0: 0x6A8
3849	 296	PUSH2	02B4	 ;; _neq_after_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 1: 0x6A8
- stack 0: 0x2B4
3850	 299	JUMP		 	 
- stack 0: 0x6A8
3851	 2B4	JUMPDEST		 ;; _neq_after_4075f936f07bbd2565b4792f5bda5525dfd26b91fbf203ce9d746b08f67c60ad	 
- stack 0: 0x6A8
3852	 2B5	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3853	 2B7	ADD		 	 
- stack 0: 0x6AC
3854	 2B8	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3855	 2B9	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1B4002103EB001401CE000000CE001D040A0008044A001800210000003406F8
3856	 2BA	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1B4002103EB001401CE000000CE001D040A0008044A001800210000003406F8
- stack 0: 0xF0
3857	 2BC	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1B4
3858	 2BD	JUMP		 	 
- stack 0: 0x6AC
3859	 1B4	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,-1(ignore imm)
- stack 0: 0x6AC
3860	 1B5	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
3861	 1B6	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1B4002103EB001401CE000000CE001D040A0008044A001800210000003406F8
3862	 1B7	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x1B4002103EB001401CE000000CE001D040A0008044A001800210000003406F8
- stack 0: 0xE0
3863	 1B9	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x1B40021
3864	 1BA	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x1B40021
- stack 0: 0xFFFF
3865	 1BD	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x21
3866	 1BE	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x21
- stack 0: 0x1
3867	 1C0	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x21
3868	 1C1	PUSH2	0020	 	 
- stack 2: 0x6AC
- stack 1: 0x21
- stack 0: 0x20
3869	 1C4	MSTORE		 	  ;; # store to x1
- stack 0: 0x6AC
3870	 1C5	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3871	 1C7	ADD		 	 
- stack 0: 0x6B0
3872	 1C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3873	 1C9	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x3EB001401CE000000CE001D040A0008044A001800210000003406F800530042
3874	 1CA	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x3EB001401CE000000CE001D040A0008044A001800210000003406F800530042
- stack 0: 0xF0
3875	 1CC	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3EB
3876	 1CD	JUMP		 	 
- stack 0: 0x6B0
3877	 3EB	JUMPDEST		 ;; __riscvimpl_SRLI_0_1_0	  ;; # instr: srai zero,ra,20(ignore imm)
- stack 0: 0x6B0
3878	 3EC	PUSH2	0020	 	 
- stack 1: 0x6B0
- stack 0: 0x20
3879	 3EF	MLOAD		 	  ;; # read from x1
- stack 1: 0x6B0
- stack 0: 0x21
3880	 3F0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0xFFFFFFFF
3881	 3F5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6B0
- stack 0: 0x21
3882	 3F6	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x6B0
3883	 3F7	MLOAD		 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x3EB001401CE000000CE001D040A0008044A001800210000003406F800530042
3884	 3F8	PUSH1	E0	 	 
- stack 3: 0x6B0
- stack 2: 0x21
- stack 1: 0x3EB001401CE000000CE001D040A0008044A001800210000003406F800530042
- stack 0: 0xE0
3885	 3FA	SHR		 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x3EB0014
3886	 3FB	PUSH2	FFFF	 	 
- stack 3: 0x6B0
- stack 2: 0x21
- stack 1: 0x3EB0014
- stack 0: 0xFFFF
3887	 3FE	AND		 	 
- stack 2: 0x6B0
- stack 1: 0x21
- stack 0: 0x14
3888	 3FF	SHR		 	  ;; # SRLI
- stack 1: 0x6B0
- stack 0: 0x0
3889	 400	POP		 	 
- stack 0: 0x6B0
3890	 401	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3891	 403	ADD		 	 
- stack 0: 0x6B4
3892	 404	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3893	 405	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x1CE000000CE001D040A0008044A001800210000003406F80053004200660000
3894	 406	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x1CE000000CE001D040A0008044A001800210000003406F80053004200660000
- stack 0: 0xF0
3895	 408	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x1CE
3896	 409	JUMP		 	 
- stack 0: 0x6B4
3897	 1CE	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,-1(ignore imm)
- stack 0: 0x6B4
3898	 1CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3899	 1D0	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x1CE000000CE001D040A0008044A001800210000003406F80053004200660000
3900	 1D1	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x1CE000000CE001D040A0008044A001800210000003406F80053004200660000
- stack 0: 0xE0
3901	 1D3	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x1CE0000
3902	 1D4	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x1CE0000
- stack 0: 0xFFFF
3903	 1D7	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3904	 1D8	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x1
3905	 1DA	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x0
3906	 1DB	PUSH2	03A0	 	 
- stack 2: 0x6B4
- stack 1: 0x0
- stack 0: 0x3A0
3907	 1DE	MSTORE		 	  ;; # store to x29
- stack 0: 0x6B4
3908	 1DF	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3909	 1E1	ADD		 	 
- stack 0: 0x6B8
3910	 1E2	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3911	 1E3	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xCE001D040A0008044A001800210000003406F80053004200660000048A0001
3912	 1E4	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xCE001D040A0008044A001800210000003406F80053004200660000048A0001
- stack 0: 0xF0
3913	 1E6	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xCE
3914	 1E7	JUMP		 	 
- stack 0: 0x6B8
3915	 CE	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6B8
3916	 CF	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3917	 D0	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xCE001D040A0008044A001800210000003406F80053004200660000048A0001
3918	 D1	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xCE001D040A0008044A001800210000003406F80053004200660000048A0001
- stack 0: 0xE0
3919	 D3	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xCE001D
3920	 D4	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xCE001D
- stack 0: 0xFFFF
3921	 D7	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x1D
3922	 D8	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x1D
- stack 0: 0x1
3923	 DA	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x1D
3924	 DB	PUSH2	0380	 	 
- stack 2: 0x6B8
- stack 1: 0x1D
- stack 0: 0x380
3925	 DE	MSTORE		 	  ;; # store to x28
- stack 0: 0x6B8
3926	 DF	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3927	 E1	ADD		 	 
- stack 0: 0x6BC
3928	 E2	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3929	 E3	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x40A0008044A001800210000003406F80053004200660000048A000100210000
3930	 E4	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x40A0008044A001800210000003406F80053004200660000048A000100210000
- stack 0: 0xF0
3931	 E6	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x40A
3932	 E7	JUMP		 	 
- stack 0: 0x6BC
3933	 40A	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x6BC
3934	 40B	PUSH1	00	 	 
- stack 1: 0x6BC
- stack 0: 0x0
3935	 40D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3936	 412	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6BC
- stack 0: 0x0
3937	 413	PUSH2	03A0	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x3A0
3938	 416	MLOAD		 	  ;; # read from x29
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x0
3939	 417	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6BC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3940	 41C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x0
3941	 41D	SUB		 	 
- stack 1: 0x6BC
- stack 0: 0x0
3942	 41E	PUSH2	0426	 ;; _neq_b2811d1642f7d6ecfe8868f6e72a0c198e4105edaa99e1ab14e8e6b6d853211c	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x426
3943	 421	JUMPI		 	 
- stack 0: 0x6BC
3944	 422	PUSH2	0440	 ;; _neq_after_b2811d1642f7d6ecfe8868f6e72a0c198e4105edaa99e1ab14e8e6b6d853211c	 
- stack 1: 0x6BC
- stack 0: 0x440
3945	 425	JUMP		 	 
- stack 0: 0x6BC
3946	 440	JUMPDEST		 ;; _neq_after_b2811d1642f7d6ecfe8868f6e72a0c198e4105edaa99e1ab14e8e6b6d853211c	 
- stack 0: 0x6BC
3947	 441	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3948	 443	ADD		 	 
- stack 0: 0x6C0
3949	 444	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3950	 445	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x44A001800210000003406F80053004200660000048A000100210000003406FC
3951	 446	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x44A001800210000003406F80053004200660000048A000100210000003406FC
- stack 0: 0xF0
3952	 448	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x44A
3953	 449	JUMP		 	 
- stack 0: 0x6C0
3954	 44A	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x6C0
3955	 44B	PUSH1	00	 	 
- stack 1: 0x6C0
- stack 0: 0x0
3956	 44D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3957	 452	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x0
3958	 453	PUSH2	0380	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x380
3959	 456	MLOAD		 	  ;; # read from x28
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1D
3960	 457	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x0
- stack 1: 0x1D
- stack 0: 0xFFFFFFFF
3961	 45C	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1D
3962	 45D	SUB		 	 
- stack 1: 0x6C0
- stack 0: 0x1D
3963	 45E	PUSH2	0466	 ;; _neq_61116b4ed7d0fb3e26cf72a54bb71a04716e35f54217c78cb3c16004b42db4d1	 
- stack 2: 0x6C0
- stack 1: 0x1D
- stack 0: 0x466
3964	 461	JUMPI		 	 
- stack 0: 0x6C0
3965	 466	JUMPDEST		 ;; _neq_61116b4ed7d0fb3e26cf72a54bb71a04716e35f54217c78cb3c16004b42db4d1	 
- stack 0: 0x6C0
3966	 467	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3967	 468	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x44A001800210000003406F80053004200660000048A000100210000003406FC
3968	 469	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x44A001800210000003406F80053004200660000048A000100210000003406FC
- stack 0: 0xE0
3969	 46B	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x44A0018
3970	 46C	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x44A0018
- stack 0: 0xFFFF
3971	 46F	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x18
3972	 470	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x18
- stack 0: 0x1
3973	 472	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x18
3974	 473	ADD		 	 
- stack 0: 0x6D8
3975	 474	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D8
- stack 0: 0xFFFFFFFF
3976	 479	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D8
3977	 47A	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
3978	 47B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x210000003406FC005300420066000004950000006600006574796D00007473
3979	 47C	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x210000003406FC005300420066000004950000006600006574796D00007473
- stack 0: 0xF0
3980	 47E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x21
3981	 47F	JUMP		 	 
- stack 0: 0x6D8
3982	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x6D8
3983	 22	PUSH4	00000000	 	 
- stack 1: 0x6D8
- stack 0: 0x0
3984	 27	PUSH2	0160	 	 
- stack 2: 0x6D8
- stack 1: 0x0
- stack 0: 0x160
3985	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x6D8
3986	 2B	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
3987	 2D	ADD		 	 
- stack 0: 0x6DC
3988	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
3989	 2F	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3406FC005300420066000004950000006600006574796D0000747300525245
3990	 30	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3406FC005300420066000004950000006600006574796D0000747300525245
- stack 0: 0xF0
3991	 32	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x34
3992	 33	JUMP		 	 
- stack 0: 0x6DC
3993	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1776(ignore imm)
- stack 0: 0x6DC
3994	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
3995	 36	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3406FC005300420066000004950000006600006574796D0000747300525245
3996	 37	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3406FC005300420066000004950000006600006574796D0000747300525245
- stack 0: 0xE0
3997	 39	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3406FC
3998	 3A	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3406FC
- stack 0: 0xFFFF
3999	 3D	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x6FC
4000	 3E	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x6FC
- stack 0: 0x1
4001	 40	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x6FC
4002	 41	PUSH2	0160	 	 
- stack 2: 0x6DC
- stack 1: 0x6FC
- stack 0: 0x160
4003	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x6DC
- stack 1: 0x6FC
- stack 0: 0x0
4004	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x6DC
- stack 0: 0x6FC
4005	 46	PUSH2	0160	 	 
- stack 2: 0x6DC
- stack 1: 0x6FC
- stack 0: 0x160
4006	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x6DC
4007	 4A	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4008	 4C	ADD		 	 
- stack 0: 0x6E0
4009	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4010	 4E	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x5300420066000004950000006600006574796D000074730052524500004B4F
4011	 4F	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x5300420066000004950000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
4012	 51	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x53
4013	 52	JUMP		 	 
- stack 0: 0x6E0
4014	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x6E0
4015	 54	PUSH4	00042000	 	 
- stack 1: 0x6E0
- stack 0: 0x42000
4016	 59	PUSH2	0140	 	 
- stack 2: 0x6E0
- stack 1: 0x42000
- stack 0: 0x140
4017	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x6E0
4018	 5D	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4019	 5F	ADD		 	 
- stack 0: 0x6E4
4020	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4021	 61	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x66000004950000006600006574796D000074730052524500004B4F00000000
4022	 62	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x66000004950000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
4023	 64	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x66
4024	 65	JUMP		 	 
- stack 0: 0x6E4
4025	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6E4
4026	 67	PUSH2	0140	 	 
- stack 1: 0x6E4
- stack 0: 0x140
4027	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6E4
- stack 0: 0x42000
4028	 6B	PUSH2	0075	 ;; _ecall_f2b82b416558f6771771c4c051cfa616a087e0070e5d0bed6e1866d7b32f24f3	 
- stack 2: 0x6E4
- stack 1: 0x42000
- stack 0: 0x75
4029	 6E	JUMPI		 	 
- stack 0: 0x6E4
4030	 75	JUMPDEST		 ;; _ecall_f2b82b416558f6771771c4c051cfa616a087e0070e5d0bed6e1866d7b32f24f3	 
- stack 0: 0x6E4
4031	 76	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4032	 78	PUSH2	0160	 	 
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x160
4033	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x6E4
- stack 1: 0x4
- stack 0: 0x6FC
4034	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x6E4
4035	 7D	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4036	 7F	ADD		 	 
- stack 0: 0x6E8
4037	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4038	 81	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x4950000006600006574796D000074730052524500004B4F0000000000000000
4039	 82	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x4950000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
4040	 84	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x495
4041	 85	JUMP		 	 
- stack 0: 0x6E8
4042	 495	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x6E8
4043	 496	PUSH4	00000000	 	 
- stack 1: 0x6E8
- stack 0: 0x0
4044	 49B	PUSH2	0140	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x140
4045	 49E	MSTORE		 	  ;; # store to x10
- stack 0: 0x6E8
4046	 49F	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4047	 4A1	ADD		 	 
- stack 0: 0x6EC
4048	 4A2	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4049	 4A3	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
4050	 4A4	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
4051	 4A6	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x66
4052	 4A7	JUMP		 	 
- stack 0: 0x6EC
4053	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x6EC
4054	 67	PUSH2	0140	 	 
- stack 1: 0x6EC
- stack 0: 0x140
4055	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x6EC
- stack 0: 0x0
4056	 6B	PUSH2	0075	 ;; _ecall_f2b82b416558f6771771c4c051cfa616a087e0070e5d0bed6e1866d7b32f24f3	 
- stack 2: 0x6EC
- stack 1: 0x0
- stack 0: 0x75
4057	 6E	JUMPI		 	 
- stack 0: 0x6EC
4058	 6F	PUSH1	20	 	 
- stack 1: 0x6EC
- stack 0: 0x20
4059	 71	PUSH2	0160	 	 
- stack 2: 0x6EC
- stack 1: 0x20
- stack 0: 0x160
4060	 74	RETURN		 	 
Final bytecode length; 1961
Returned: 00000000000000000000000000000000000000000000000000000000000006fc
gasUsed : 14469
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420
** HOT: 424 - range: 424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448,44c
** HOT: 450 - range: 450,454,458,45c,460,464
** HOT: 468 - range: 468,46c,470,474,478,47c,480
** HOT: 484 - range: 484,488,48c,490,494
** HOT: 498 - range: 498,49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4
** HOT: 4c8 - range: 4c8,4cc,4d0,4d4,4d8,4dc
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0
** HOT: 4f4 - range: 4f4,4f8,4fc,500,504,508,50c
** HOT: 510 - range: 510,514,518,51c,520,524,528
** HOT: 52c - range: 52c,530,534,538,53c,540,544
** HOT: 548 - range: 548,54c,550,554,558,55c,560
** HOT: 564 - range: 564,568,56c,570,574,578
** HOT: 57c - range: 57c,580,584,588,58c
** HOT: 590 - range: 590,594,598,59c,5a0,5a4,5a8
** HOT: 594 - range: 594,598,59c,5a0,5a4,5a8
** HOT: 5ac - range: 5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5bc - range: 5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4,5f8,5fc,600,604,608
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608
** HOT: 60c - range: 60c,610,614,618
** HOT: 61c - range: 61c,620,624,628,62c,630
** HOT: 620 - range: 620,624,628,62c,630
** HOT: 634 - range: 634,638,63c
** HOT: 640 - range: 640,644,648,64c,650,654,658
** HOT: 644 - range: 644,648,64c,650,654,658
** HOT: 65c - range: 65c,660,664,668
** HOT: 66c - range: 66c,670,674,678,67c,680,684,688
** HOT: 670 - range: 670,674,678,67c,680,684,688
** HOT: 68c - range: 68c,690,694,698
** HOT: 69c - range: 69c,6a0,6a4,6a8
** HOT: 6ac - range: 6ac,6b0,6b4,6b8,6bc
