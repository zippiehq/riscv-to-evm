Running in EVM:
0	 0	PUSH4	0510	 	 
- stack 0: 0x510
1	 5	PUSH2	0501	 ;; _rambegin	 
- stack 1: 0x510
- stack 0: 0x501
2	 8	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x501
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x510
- stack 0: 0x502
4	 B	PUSH2	0400	 	 
- stack 2: 0x510
- stack 1: 0x502
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F90000530042006600000086000000A0000000BA000000D10000
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F90000530042006600000086000000A0000000BA000000D10000
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086000000A0000000BA000000D1000000EB0002
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086000000A0000000BA000000D1000000EB0002
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086000000A0000000BA000000D1000000EB0002
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086000000A0000000BA000000D1000000EB0002
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F900
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F900
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF900
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF900
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x900
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x900
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086000000A0000000BA000000D1000000EB0002010504AC
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086000000A0000000BA000000D1000000EB0002010504AC
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086000000A0000000BA000000D1000000EB0002010504AC00860001
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086000000A0000000BA000000D1000000EB0002010504AC00860001
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_357371cfc9c4318bb5498aa0e8f01fa7b2d57998f35078eeb79b24bb6e1e913c	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_357371cfc9c4318bb5498aa0e8f01fa7b2d57998f35078eeb79b24bb6e1e913c	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x900
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D1000000EB0002010504AC0086000100A00001
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D1000000EB0002010504AC0086000100A00001
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x410
- stack 0: 0x410
77	 88	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86000000A0000000BA000000D1000000EB0002010504AC0086000100A00001
78	 89	PUSH1	E0	 	 
- stack 2: 0x410
- stack 1: 0x86000000A0000000BA000000D1000000EB0002010504AC0086000100A00001
- stack 0: 0xE0
79	 8B	SHR		 	 
- stack 1: 0x410
- stack 0: 0x860000
80	 8C	PUSH2	FFFF	 	 
- stack 2: 0x410
- stack 1: 0x860000
- stack 0: 0xFFFF
81	 8F	AND		 	 
- stack 1: 0x410
- stack 0: 0x0
82	 90	PUSH1	01	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x1
83	 92	SIGNEXTEND		 	 
- stack 1: 0x410
- stack 0: 0x0
84	 93	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x0
- stack 0: 0x20
85	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
86	 97	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
87	 99	ADD		 	 
- stack 0: 0x414
88	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
89	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D1000000EB0002010504AC0086000100A0000100BA0000
90	 9C	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D1000000EB0002010504AC0086000100A0000100BA0000
- stack 0: 0xF0
91	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA0
92	 9F	JUMP		 	 
- stack 0: 0x414
93	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x414
94	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
95	 A2	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0xA0000000BA000000D1000000EB0002010504AC0086000100A0000100BA0000
96	 A3	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0xA0000000BA000000D1000000EB0002010504AC0086000100A0000100BA0000
- stack 0: 0xE0
97	 A5	SHR		 	 
- stack 1: 0x414
- stack 0: 0xA00000
98	 A6	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0xA00000
- stack 0: 0xFFFF
99	 A9	AND		 	 
- stack 1: 0x414
- stack 0: 0x0
100	 AA	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x1
101	 AC	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x0
102	 AD	PUSH2	0040	 	 
- stack 2: 0x414
- stack 1: 0x0
- stack 0: 0x40
103	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x414
104	 B1	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
105	 B3	ADD		 	 
- stack 0: 0x418
106	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
107	 B5	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xBA000000D1000000EB0002010504AC0086000100A0000100BA000000D10000
108	 B6	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xBA000000D1000000EB0002010504AC0086000100A0000100BA000000D10000
- stack 0: 0xF0
109	 B8	SHR		 	 
- stack 1: 0x418
- stack 0: 0xBA
110	 B9	JUMP		 	 
- stack 0: 0x418
111	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x418
112	 BB	PUSH2	0040	 	 
- stack 1: 0x418
- stack 0: 0x40
113	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x418
- stack 0: 0x0
114	 BF	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x20
115	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x0
116	 C3	SUB		 	  ;; # SUB
- stack 1: 0x418
- stack 0: 0x0
117	 C4	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0x0
- stack 0: 0x60
118	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
119	 C8	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
120	 CA	ADD		 	 
- stack 0: 0x41C
121	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
122	 CC	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000000EB0002010504AC0086000100A0000100BA000000D1000000EB0003
123	 CD	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000000EB0002010504AC0086000100A0000100BA000000D1000000EB0003
- stack 0: 0xF0
124	 CF	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD1
125	 D0	JUMP		 	 
- stack 0: 0x41C
126	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x41C
127	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
128	 D3	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD1000000EB0002010504AC0086000100A0000100BA000000D1000000EB0003
129	 D4	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xD1000000EB0002010504AC0086000100A0000100BA000000D1000000EB0003
- stack 0: 0xE0
130	 D6	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD10000
131	 D7	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xD10000
- stack 0: 0xFFFF
132	 DA	AND		 	 
- stack 1: 0x41C
- stack 0: 0x0
133	 DB	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x1
134	 DD	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0x0
135	 DE	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0x0
- stack 0: 0x3A0
136	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
137	 E2	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
138	 E4	ADD		 	 
- stack 0: 0x420
139	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
140	 E6	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010504AC0086000100A0000100BA000000D1000000EB000301050494
141	 E7	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010504AC0086000100A0000100BA000000D1000000EB000301050494
- stack 0: 0xF0
142	 E9	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB
143	 EA	JUMP		 	 
- stack 0: 0x420
144	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x420
145	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
146	 ED	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEB0002010504AC0086000100A0000100BA000000D1000000EB000301050494
147	 EE	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xEB0002010504AC0086000100A0000100BA000000D1000000EB000301050494
- stack 0: 0xE0
148	 F0	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEB0002
149	 F1	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xEB0002
- stack 0: 0xFFFF
150	 F4	AND		 	 
- stack 1: 0x420
- stack 0: 0x2
151	 F5	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x1
152	 F7	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0x2
153	 F8	PUSH2	0380	 	 
- stack 2: 0x420
- stack 1: 0x2
- stack 0: 0x380
154	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x420
155	 FC	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
156	 FE	ADD		 	 
- stack 0: 0x424
157	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
158	 100	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10504AC0086000100A0000100BA000000D1000000EB00030105049400860003
159	 101	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10504AC0086000100A0000100BA000000D1000000EB00030105049400860003
- stack 0: 0xF0
160	 103	SHR		 	 
- stack 1: 0x424
- stack 0: 0x105
161	 104	JUMP		 	 
- stack 0: 0x424
162	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x424
163	 106	PUSH2	0060	 	 
- stack 1: 0x424
- stack 0: 0x60
164	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x424
- stack 0: 0x0
165	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
166	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x0
167	 110	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x3A0
168	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
169	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x424
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
170	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x0
171	 11A	SUB		 	 
- stack 1: 0x424
- stack 0: 0x0
172	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x424
- stack 1: 0x0
- stack 0: 0x123
173	 11E	JUMPI		 	 
- stack 0: 0x424
174	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x424
- stack 0: 0x13D
175	 122	JUMP		 	 
- stack 0: 0x424
176	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x424
177	 13E	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
178	 140	ADD		 	 
- stack 0: 0x428
179	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
180	 142	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D1000000EB0003010504940086000300A00007
181	 143	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D1000000EB0003010504940086000300A00007
- stack 0: 0xF0
182	 145	SHR		 	 
- stack 1: 0x428
- stack 0: 0x86
183	 146	JUMP		 	 
- stack 0: 0x428
184	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x428
185	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
186	 88	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x86000100A0000100BA000000D1000000EB0003010504940086000300A00007
187	 89	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x86000100A0000100BA000000D1000000EB0003010504940086000300A00007
- stack 0: 0xE0
188	 8B	SHR		 	 
- stack 1: 0x428
- stack 0: 0x860001
189	 8C	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x860001
- stack 0: 0xFFFF
190	 8F	AND		 	 
- stack 1: 0x428
- stack 0: 0x1
191	 90	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x1
192	 92	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0x1
193	 93	PUSH2	0020	 	 
- stack 2: 0x428
- stack 1: 0x1
- stack 0: 0x20
194	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x428
195	 97	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
196	 99	ADD		 	 
- stack 0: 0x42C
197	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
198	 9B	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D1000000EB0003010504940086000300A0000700BA0000
199	 9C	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D1000000EB0003010504940086000300A0000700BA0000
- stack 0: 0xF0
200	 9E	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA0
201	 9F	JUMP		 	 
- stack 0: 0x42C
202	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x42C
203	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
204	 A2	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0xA0000100BA000000D1000000EB0003010504940086000300A0000700BA0000
205	 A3	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0xA0000100BA000000D1000000EB0003010504940086000300A0000700BA0000
- stack 0: 0xE0
206	 A5	SHR		 	 
- stack 1: 0x42C
- stack 0: 0xA00001
207	 A6	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0xA00001
- stack 0: 0xFFFF
208	 A9	AND		 	 
- stack 1: 0x42C
- stack 0: 0x1
209	 AA	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x1
210	 AC	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x1
211	 AD	PUSH2	0040	 	 
- stack 2: 0x42C
- stack 1: 0x1
- stack 0: 0x40
212	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x42C
213	 B1	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
214	 B3	ADD		 	 
- stack 0: 0x430
215	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
216	 B5	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0xBA000000D1000000EB0003010504940086000300A0000700BA000000D1FFFC
217	 B6	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0xBA000000D1000000EB0003010504940086000300A0000700BA000000D1FFFC
- stack 0: 0xF0
218	 B8	SHR		 	 
- stack 1: 0x430
- stack 0: 0xBA
219	 B9	JUMP		 	 
- stack 0: 0x430
220	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x430
221	 BB	PUSH2	0040	 	 
- stack 1: 0x430
- stack 0: 0x40
222	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x430
- stack 0: 0x1
223	 BF	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x20
224	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0x1
- stack 0: 0x1
225	 C3	SUB		 	  ;; # SUB
- stack 1: 0x430
- stack 0: 0x0
226	 C4	PUSH2	0060	 	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x60
227	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x430
228	 C8	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
229	 CA	ADD		 	 
- stack 0: 0x434
230	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
231	 CC	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD1000000EB0003010504940086000300A0000700BA000000D1FFFC00EB0004
232	 CD	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xD1000000EB0003010504940086000300A0000700BA000000D1FFFC00EB0004
- stack 0: 0xF0
233	 CF	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD1
234	 D0	JUMP		 	 
- stack 0: 0x434
235	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x434
236	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
237	 D3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xD1000000EB0003010504940086000300A0000700BA000000D1FFFC00EB0004
238	 D4	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xD1000000EB0003010504940086000300A0000700BA000000D1FFFC00EB0004
- stack 0: 0xE0
239	 D6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xD10000
240	 D7	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xD10000
- stack 0: 0xFFFF
241	 DA	AND		 	 
- stack 1: 0x434
- stack 0: 0x0
242	 DB	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1
243	 DD	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0x0
244	 DE	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x3A0
245	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x434
246	 E2	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 E4	ADD		 	 
- stack 0: 0x438
248	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 E6	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xEB0003010504940086000300A0000700BA000000D1FFFC00EB00040105047C
250	 E7	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0xEB0003010504940086000300A0000700BA000000D1FFFC00EB00040105047C
- stack 0: 0xF0
251	 E9	SHR		 	 
- stack 1: 0x438
- stack 0: 0xEB
252	 EA	JUMP		 	 
- stack 0: 0x438
253	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x438
254	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
255	 ED	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0xEB0003010504940086000300A0000700BA000000D1FFFC00EB00040105047C
256	 EE	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0xEB0003010504940086000300A0000700BA000000D1FFFC00EB00040105047C
- stack 0: 0xE0
257	 F0	SHR		 	 
- stack 1: 0x438
- stack 0: 0xEB0003
258	 F1	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0xEB0003
- stack 0: 0xFFFF
259	 F4	AND		 	 
- stack 1: 0x438
- stack 0: 0x3
260	 F5	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x1
261	 F7	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0x3
262	 F8	PUSH2	0380	 	 
- stack 2: 0x438
- stack 1: 0x3
- stack 0: 0x380
263	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x438
264	 FC	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
265	 FE	ADD		 	 
- stack 0: 0x43C
266	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
267	 100	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x10504940086000300A0000700BA000000D1FFFC00EB00040105047C00860000
268	 101	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x10504940086000300A0000700BA000000D1FFFC00EB00040105047C00860000
- stack 0: 0xF0
269	 103	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x105
270	 104	JUMP		 	 
- stack 0: 0x43C
271	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x43C
272	 106	PUSH2	0060	 	 
- stack 1: 0x43C
- stack 0: 0x60
273	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x43C
- stack 0: 0x0
274	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
275	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x43C
- stack 0: 0x0
276	 110	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x3A0
277	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
278	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x43C
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
279	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x0
280	 11A	SUB		 	 
- stack 1: 0x43C
- stack 0: 0x0
281	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x43C
- stack 1: 0x0
- stack 0: 0x123
282	 11E	JUMPI		 	 
- stack 0: 0x43C
283	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x43C
- stack 0: 0x13D
284	 122	JUMP		 	 
- stack 0: 0x43C
285	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x43C
286	 13E	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
287	 140	ADD		 	 
- stack 0: 0x440
288	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
289	 142	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D1FFFC00EB00040105047C008600000147FFF8
290	 143	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D1FFFC00EB00040105047C008600000147FFF8
- stack 0: 0xF0
291	 145	SHR		 	 
- stack 1: 0x440
- stack 0: 0x86
292	 146	JUMP		 	 
- stack 0: 0x440
293	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x440
294	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
295	 88	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x86000300A0000700BA000000D1FFFC00EB00040105047C008600000147FFF8
296	 89	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x86000300A0000700BA000000D1FFFC00EB00040105047C008600000147FFF8
- stack 0: 0xE0
297	 8B	SHR		 	 
- stack 1: 0x440
- stack 0: 0x860003
298	 8C	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x860003
- stack 0: 0xFFFF
299	 8F	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
300	 90	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
301	 92	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
302	 93	PUSH2	0020	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x20
303	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x440
304	 97	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
305	 99	ADD		 	 
- stack 0: 0x444
306	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
307	 9B	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D1FFFC00EB00040105047C008600000147FFF800BA0000
308	 9C	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D1FFFC00EB00040105047C008600000147FFF800BA0000
- stack 0: 0xF0
309	 9E	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA0
310	 9F	JUMP		 	 
- stack 0: 0x444
311	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x444
312	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
313	 A2	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xA0000700BA000000D1FFFC00EB00040105047C008600000147FFF800BA0000
314	 A3	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xA0000700BA000000D1FFFC00EB00040105047C008600000147FFF800BA0000
- stack 0: 0xE0
315	 A5	SHR		 	 
- stack 1: 0x444
- stack 0: 0xA00007
316	 A6	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xA00007
- stack 0: 0xFFFF
317	 A9	AND		 	 
- stack 1: 0x444
- stack 0: 0x7
318	 AA	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x1
319	 AC	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0x7
320	 AD	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0x7
- stack 0: 0x40
321	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
322	 B1	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
323	 B3	ADD		 	 
- stack 0: 0x448
324	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
325	 B5	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xBA000000D1FFFC00EB00040105047C008600000147FFF800BA0000015A0008
326	 B6	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xBA000000D1FFFC00EB00040105047C008600000147FFF800BA0000015A0008
- stack 0: 0xF0
327	 B8	SHR		 	 
- stack 1: 0x448
- stack 0: 0xBA
328	 B9	JUMP		 	 
- stack 0: 0x448
329	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x448
330	 BB	PUSH2	0040	 	 
- stack 1: 0x448
- stack 0: 0x40
331	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x448
- stack 0: 0x7
332	 BF	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x20
333	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x448
- stack 1: 0x7
- stack 0: 0x3
334	 C3	SUB		 	  ;; # SUB
- stack 1: 0x448
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
335	 C4	PUSH2	0060	 	 
- stack 2: 0x448
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0x60
336	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x448
337	 C8	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
338	 CA	ADD		 	 
- stack 0: 0x44C
339	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
340	 CC	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD1FFFC00EB00040105047C008600000147FFF800BA0000015A000800EB0005
341	 CD	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0xD1FFFC00EB00040105047C008600000147FFF800BA0000015A000800EB0005
- stack 0: 0xF0
342	 CF	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD1
343	 D0	JUMP		 	 
- stack 0: 0x44C
344	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x44C
345	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
346	 D3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xD1FFFC00EB00040105047C008600000147FFF800BA0000015A000800EB0005
347	 D4	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xD1FFFC00EB00040105047C008600000147FFF800BA0000015A000800EB0005
- stack 0: 0xE0
348	 D6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xD1FFFC
349	 D7	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0xD1FFFC
- stack 0: 0xFFFF
350	 DA	AND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFC
351	 DB	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xFFFC
- stack 0: 0x1
352	 DD	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
353	 DE	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0x3A0
354	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
355	 E2	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
356	 E4	ADD		 	 
- stack 0: 0x450
357	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
358	 E6	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xEB00040105047C008600000147FFF800BA0000015A000800EB000501050464
359	 E7	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xEB00040105047C008600000147FFF800BA0000015A000800EB000501050464
- stack 0: 0xF0
360	 E9	SHR		 	 
- stack 1: 0x450
- stack 0: 0xEB
361	 EA	JUMP		 	 
- stack 0: 0x450
362	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
363	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
364	 ED	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xEB00040105047C008600000147FFF800BA0000015A000800EB000501050464
365	 EE	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xEB00040105047C008600000147FFF800BA0000015A000800EB000501050464
- stack 0: 0xE0
366	 F0	SHR		 	 
- stack 1: 0x450
- stack 0: 0xEB0004
367	 F1	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xEB0004
- stack 0: 0xFFFF
368	 F4	AND		 	 
- stack 1: 0x450
- stack 0: 0x4
369	 F5	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x1
370	 F7	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x4
371	 F8	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x4
- stack 0: 0x380
372	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
373	 FC	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
374	 FE	ADD		 	 
- stack 0: 0x454
375	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
376	 100	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x105047C008600000147FFF800BA0000015A000800EB000501050464016D0000
377	 101	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x105047C008600000147FFF800BA0000015A000800EB000501050464016D0000
- stack 0: 0xF0
378	 103	SHR		 	 
- stack 1: 0x454
- stack 0: 0x105
379	 104	JUMP		 	 
- stack 0: 0x454
380	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x454
381	 106	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
382	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
383	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0xFFFFFFFF
384	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFFFFFFFC
385	 110	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFC
- stack 0: 0x3A0
386	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFFFFFFC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
387	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFFFFFFFC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
- stack 0: 0xFFFFFFFF
388	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFFFFFFFC
- stack 0: 0xFFFFFFFC
389	 11A	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
390	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x123
391	 11E	JUMPI		 	 
- stack 0: 0x454
392	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x454
- stack 0: 0x13D
393	 122	JUMP		 	 
- stack 0: 0x454
394	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x454
395	 13E	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
396	 140	ADD		 	 
- stack 0: 0x458
397	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
398	 142	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000147FFF800BA0000015A000800EB000501050464016D000000A00000
399	 143	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x8600000147FFF800BA0000015A000800EB000501050464016D000000A00000
- stack 0: 0xF0
400	 145	SHR		 	 
- stack 1: 0x458
- stack 0: 0x86
401	 146	JUMP		 	 
- stack 0: 0x458
402	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x458
403	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
404	 88	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x8600000147FFF800BA0000015A000800EB000501050464016D000000A00000
405	 89	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x8600000147FFF800BA0000015A000800EB000501050464016D000000A00000
- stack 0: 0xE0
406	 8B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x860000
407	 8C	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x860000
- stack 0: 0xFFFF
408	 8F	AND		 	 
- stack 1: 0x458
- stack 0: 0x0
409	 90	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x1
410	 92	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x0
411	 93	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0x0
- stack 0: 0x20
412	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
413	 97	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
414	 99	ADD		 	 
- stack 0: 0x45C
415	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
416	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x147FFF800BA0000015A000800EB000501050464016D000000A0000000BA0000
417	 9C	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x147FFF800BA0000015A000800EB000501050464016D000000A0000000BA0000
- stack 0: 0xF0
418	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x147
419	 9F	JUMP		 	 
- stack 0: 0x45C
420	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x45C
421	 148	PUSH4	ffff8000	 	 
- stack 1: 0x45C
- stack 0: 0xFFFF8000
422	 14D	PUSH2	0040	 	 
- stack 2: 0x45C
- stack 1: 0xFFFF8000
- stack 0: 0x40
423	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x45C
424	 151	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
425	 153	ADD		 	 
- stack 0: 0x460
426	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
427	 155	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xBA0000015A000800EB000501050464016D000000A0000000BA000001800000
428	 156	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xBA0000015A000800EB000501050464016D000000A0000000BA000001800000
- stack 0: 0xF0
429	 158	SHR		 	 
- stack 1: 0x460
- stack 0: 0xBA
430	 159	JUMP		 	 
- stack 0: 0x460
431	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x460
432	 BB	PUSH2	0040	 	 
- stack 1: 0x460
- stack 0: 0x40
433	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x460
- stack 0: 0xFFFF8000
434	 BF	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0xFFFF8000
- stack 0: 0x20
435	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x460
- stack 1: 0xFFFF8000
- stack 0: 0x0
436	 C3	SUB		 	  ;; # SUB
- stack 1: 0x460
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00008000
437	 C4	PUSH2	0060	 	 
- stack 2: 0x460
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00008000
- stack 0: 0x60
438	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x460
439	 C8	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
440	 CA	ADD		 	 
- stack 0: 0x464
441	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
442	 CC	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x15A000800EB000501050464016D000000A0000000BA00000180000000EB0006
443	 CD	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x15A000800EB000501050464016D000000A0000000BA00000180000000EB0006
- stack 0: 0xF0
444	 CF	SHR		 	 
- stack 1: 0x464
- stack 0: 0x15A
445	 D0	JUMP		 	 
- stack 0: 0x464
446	 15A	JUMPDEST		 ;; __riscvimpl_LUI_8eb7	  ;; # instr: lui t4,0x8(ignore imm)
- stack 0: 0x464
447	 15B	PUSH4	00008000	 	 
- stack 1: 0x464
- stack 0: 0x8000
448	 160	PUSH2	03A0	 	 
- stack 2: 0x464
- stack 1: 0x8000
- stack 0: 0x3A0
449	 163	MSTORE		 	  ;; # store to x29
- stack 0: 0x464
450	 164	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
451	 166	ADD		 	 
- stack 0: 0x468
452	 167	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
453	 168	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEB000501050464016D000000A0000000BA00000180000000EB00060105044C
454	 169	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xEB000501050464016D000000A0000000BA00000180000000EB00060105044C
- stack 0: 0xF0
455	 16B	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEB
456	 16C	JUMP		 	 
- stack 0: 0x468
457	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x468
458	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
459	 ED	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEB000501050464016D000000A0000000BA00000180000000EB00060105044C
460	 EE	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0xEB000501050464016D000000A0000000BA00000180000000EB00060105044C
- stack 0: 0xE0
461	 F0	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEB0005
462	 F1	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0xEB0005
- stack 0: 0xFFFF
463	 F4	AND		 	 
- stack 1: 0x468
- stack 0: 0x5
464	 F5	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x1
465	 F7	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0x5
466	 F8	PUSH2	0380	 	 
- stack 2: 0x468
- stack 1: 0x5
- stack 0: 0x380
467	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x468
468	 FC	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
469	 FE	ADD		 	 
- stack 0: 0x46C
470	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
471	 100	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1050464016D000000A0000000BA00000180000000EB00060105044C016D0000
472	 101	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1050464016D000000A0000000BA00000180000000EB00060105044C016D0000
- stack 0: 0xF0
473	 103	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x105
474	 104	JUMP		 	 
- stack 0: 0x46C
475	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x46C
476	 106	PUSH2	0060	 	 
- stack 1: 0x46C
- stack 0: 0x60
477	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00008000
478	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00008000
- stack 0: 0xFFFFFFFF
479	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x46C
- stack 0: 0x8000
480	 110	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0x8000
- stack 0: 0x3A0
481	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x46C
- stack 1: 0x8000
- stack 0: 0x8000
482	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x46C
- stack 2: 0x8000
- stack 1: 0x8000
- stack 0: 0xFFFFFFFF
483	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x46C
- stack 1: 0x8000
- stack 0: 0x8000
484	 11A	SUB		 	 
- stack 1: 0x46C
- stack 0: 0x0
485	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x46C
- stack 1: 0x0
- stack 0: 0x123
486	 11E	JUMPI		 	 
- stack 0: 0x46C
487	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x46C
- stack 0: 0x13D
488	 122	JUMP		 	 
- stack 0: 0x46C
489	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x46C
490	 13E	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
491	 140	ADD		 	 
- stack 0: 0x470
492	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
493	 142	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x16D000000A0000000BA00000180000000EB00060105044C016D00000147FFF8
494	 143	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x16D000000A0000000BA00000180000000EB00060105044C016D00000147FFF8
- stack 0: 0xF0
495	 145	SHR		 	 
- stack 1: 0x470
- stack 0: 0x16D
496	 146	JUMP		 	 
- stack 0: 0x470
497	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x470
498	 16E	PUSH4	80000000	 	 
- stack 1: 0x470
- stack 0: 0x80000000
499	 173	PUSH2	0020	 	 
- stack 2: 0x470
- stack 1: 0x80000000
- stack 0: 0x20
500	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x470
501	 177	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
502	 179	ADD		 	 
- stack 0: 0x474
503	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
504	 17B	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA00000180000000EB00060105044C016D00000147FFF800BA0000
505	 17C	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA00000180000000EB00060105044C016D00000147FFF800BA0000
- stack 0: 0xF0
506	 17E	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA0
507	 17F	JUMP		 	 
- stack 0: 0x474
508	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x474
509	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
510	 A2	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xA0000000BA00000180000000EB00060105044C016D00000147FFF800BA0000
511	 A3	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xA0000000BA00000180000000EB00060105044C016D00000147FFF800BA0000
- stack 0: 0xE0
512	 A5	SHR		 	 
- stack 1: 0x474
- stack 0: 0xA00000
513	 A6	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xA00000
- stack 0: 0xFFFF
514	 A9	AND		 	 
- stack 1: 0x474
- stack 0: 0x0
515	 AA	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x1
516	 AC	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x0
517	 AD	PUSH2	0040	 	 
- stack 2: 0x474
- stack 1: 0x0
- stack 0: 0x40
518	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x474
519	 B1	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
520	 B3	ADD		 	 
- stack 0: 0x478
521	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
522	 B5	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0xBA00000180000000EB00060105044C016D00000147FFF800BA000001930008
523	 B6	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0xBA00000180000000EB00060105044C016D00000147FFF800BA000001930008
- stack 0: 0xF0
524	 B8	SHR		 	 
- stack 1: 0x478
- stack 0: 0xBA
525	 B9	JUMP		 	 
- stack 0: 0x478
526	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x478
527	 BB	PUSH2	0040	 	 
- stack 1: 0x478
- stack 0: 0x40
528	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x478
- stack 0: 0x0
529	 BF	PUSH2	0020	 	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x20
530	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x80000000
531	 C3	SUB		 	  ;; # SUB
- stack 1: 0x478
- stack 0: 0x80000000
532	 C4	PUSH2	0060	 	 
- stack 2: 0x478
- stack 1: 0x80000000
- stack 0: 0x60
533	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x478
534	 C8	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
535	 CA	ADD		 	 
- stack 0: 0x47C
536	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
537	 CC	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x180000000EB00060105044C016D00000147FFF800BA00000193000800EB0007
538	 CD	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x180000000EB00060105044C016D00000147FFF800BA00000193000800EB0007
- stack 0: 0xF0
539	 CF	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x180
540	 D0	JUMP		 	 
- stack 0: 0x47C
541	 180	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x47C
542	 181	PUSH4	80000000	 	 
- stack 1: 0x47C
- stack 0: 0x80000000
543	 186	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0x80000000
- stack 0: 0x3A0
544	 189	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
545	 18A	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
546	 18C	ADD		 	 
- stack 0: 0x480
547	 18D	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
548	 18E	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xEB00060105044C016D00000147FFF800BA00000193000800EB000701050434
549	 18F	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0xEB00060105044C016D00000147FFF800BA00000193000800EB000701050434
- stack 0: 0xF0
550	 191	SHR		 	 
- stack 1: 0x480
- stack 0: 0xEB
551	 192	JUMP		 	 
- stack 0: 0x480
552	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
553	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
554	 ED	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0xEB00060105044C016D00000147FFF800BA00000193000800EB000701050434
555	 EE	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0xEB00060105044C016D00000147FFF800BA00000193000800EB000701050434
- stack 0: 0xE0
556	 F0	SHR		 	 
- stack 1: 0x480
- stack 0: 0xEB0006
557	 F1	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0xEB0006
- stack 0: 0xFFFF
558	 F4	AND		 	 
- stack 1: 0x480
- stack 0: 0x6
559	 F5	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x1
560	 F7	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x6
561	 F8	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x6
- stack 0: 0x380
562	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
563	 FC	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
564	 FE	ADD		 	 
- stack 0: 0x484
565	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
566	 100	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x105044C016D00000147FFF800BA00000193000800EB00070105043400860000
567	 101	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x105044C016D00000147FFF800BA00000193000800EB00070105043400860000
- stack 0: 0xF0
568	 103	SHR		 	 
- stack 1: 0x484
- stack 0: 0x105
569	 104	JUMP		 	 
- stack 0: 0x484
570	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x484
571	 106	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
572	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0x80000000
573	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
574	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0x80000000
575	 110	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x3A0
576	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
577	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0x80000000
- stack 1: 0x80000000
- stack 0: 0xFFFFFFFF
578	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0x80000000
- stack 0: 0x80000000
579	 11A	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
580	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x123
581	 11E	JUMPI		 	 
- stack 0: 0x484
582	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x484
- stack 0: 0x13D
583	 122	JUMP		 	 
- stack 0: 0x484
584	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x484
585	 13E	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
586	 140	ADD		 	 
- stack 0: 0x488
587	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
588	 142	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x16D00000147FFF800BA00000193000800EB0007010504340086000001A60008
589	 143	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x16D00000147FFF800BA00000193000800EB0007010504340086000001A60008
- stack 0: 0xF0
590	 145	SHR		 	 
- stack 1: 0x488
- stack 0: 0x16D
591	 146	JUMP		 	 
- stack 0: 0x488
592	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x488
593	 16E	PUSH4	80000000	 	 
- stack 1: 0x488
- stack 0: 0x80000000
594	 173	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x80000000
- stack 0: 0x20
595	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
596	 177	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
597	 179	ADD		 	 
- stack 0: 0x48C
598	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
599	 17B	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x147FFF800BA00000193000800EB0007010504340086000001A6000801B9FFFF
600	 17C	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x147FFF800BA00000193000800EB0007010504340086000001A6000801B9FFFF
- stack 0: 0xF0
601	 17E	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x147
602	 17F	JUMP		 	 
- stack 0: 0x48C
603	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x48C
604	 148	PUSH4	ffff8000	 	 
- stack 1: 0x48C
- stack 0: 0xFFFF8000
605	 14D	PUSH2	0040	 	 
- stack 2: 0x48C
- stack 1: 0xFFFF8000
- stack 0: 0x40
606	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x48C
607	 151	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
608	 153	ADD		 	 
- stack 0: 0x490
609	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
610	 155	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xBA00000193000800EB0007010504340086000001A6000801B9FFFF00BA0000
611	 156	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xBA00000193000800EB0007010504340086000001A6000801B9FFFF00BA0000
- stack 0: 0xF0
612	 158	SHR		 	 
- stack 1: 0x490
- stack 0: 0xBA
613	 159	JUMP		 	 
- stack 0: 0x490
614	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x490
615	 BB	PUSH2	0040	 	 
- stack 1: 0x490
- stack 0: 0x40
616	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x490
- stack 0: 0xFFFF8000
617	 BF	PUSH2	0020	 	 
- stack 2: 0x490
- stack 1: 0xFFFF8000
- stack 0: 0x20
618	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x490
- stack 1: 0xFFFF8000
- stack 0: 0x80000000
619	 C3	SUB		 	  ;; # SUB
- stack 1: 0x490
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80008000
620	 C4	PUSH2	0060	 	 
- stack 2: 0x490
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80008000
- stack 0: 0x60
621	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x490
622	 C8	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
623	 CA	ADD		 	 
- stack 0: 0x494
624	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
625	 CC	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x193000800EB0007010504340086000001A6000801B9FFFF00BA000001D8FFF8
626	 CD	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x193000800EB0007010504340086000001A6000801B9FFFF00BA000001D8FFF8
- stack 0: 0xF0
627	 CF	SHR		 	 
- stack 1: 0x494
- stack 0: 0x193
628	 D0	JUMP		 	 
- stack 0: 0x494
629	 193	JUMPDEST		 ;; __riscvimpl_LUI_80008eb7	  ;; # instr: lui t4,0x80008(ignore imm)
- stack 0: 0x494
630	 194	PUSH4	80008000	 	 
- stack 1: 0x494
- stack 0: 0x80008000
631	 199	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0x80008000
- stack 0: 0x3A0
632	 19C	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
633	 19D	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
634	 19F	ADD		 	 
- stack 0: 0x498
635	 1A0	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
636	 1A1	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xEB0007010504340086000001A6000801B9FFFF00BA000001D8FFF801EB0001
637	 1A2	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xEB0007010504340086000001A6000801B9FFFF00BA000001D8FFF801EB0001
- stack 0: 0xF0
638	 1A4	SHR		 	 
- stack 1: 0x498
- stack 0: 0xEB
639	 1A5	JUMP		 	 
- stack 0: 0x498
640	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
641	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
642	 ED	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xEB0007010504340086000001A6000801B9FFFF00BA000001D8FFF801EB0001
643	 EE	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0xEB0007010504340086000001A6000801B9FFFF00BA000001D8FFF801EB0001
- stack 0: 0xE0
644	 F0	SHR		 	 
- stack 1: 0x498
- stack 0: 0xEB0007
645	 F1	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0xEB0007
- stack 0: 0xFFFF
646	 F4	AND		 	 
- stack 1: 0x498
- stack 0: 0x7
647	 F5	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x1
648	 F7	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x7
649	 F8	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x7
- stack 0: 0x380
650	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
651	 FC	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
652	 FE	ADD		 	 
- stack 0: 0x49C
653	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
654	 100	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x10504340086000001A6000801B9FFFF00BA000001D8FFF801EB000100EB0008
655	 101	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x10504340086000001A6000801B9FFFF00BA000001D8FFF801EB000100EB0008
- stack 0: 0xF0
656	 103	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x105
657	 104	JUMP		 	 
- stack 0: 0x49C
658	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x49C
659	 106	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
660	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80008000
661	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80008000
- stack 0: 0xFFFFFFFF
662	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x80008000
663	 110	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0x80008000
- stack 0: 0x3A0
664	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0x80008000
- stack 0: 0x80008000
665	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0x80008000
- stack 1: 0x80008000
- stack 0: 0xFFFFFFFF
666	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0x80008000
- stack 0: 0x80008000
667	 11A	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
668	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x123
669	 11E	JUMPI		 	 
- stack 0: 0x49C
670	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x49C
- stack 0: 0x13D
671	 122	JUMP		 	 
- stack 0: 0x49C
672	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x49C
673	 13E	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
674	 140	ADD		 	 
- stack 0: 0x4A0
675	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
676	 142	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86000001A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414
677	 143	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x86000001A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414
- stack 0: 0xF0
678	 145	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
679	 146	JUMP		 	 
- stack 0: 0x4A0
680	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x4A0
681	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A0
- stack 0: 0x4A0
682	 88	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86000001A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414
683	 89	PUSH1	E0	 	 
- stack 2: 0x4A0
- stack 1: 0x86000001A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414
- stack 0: 0xE0
684	 8B	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x860000
685	 8C	PUSH2	FFFF	 	 
- stack 2: 0x4A0
- stack 1: 0x860000
- stack 0: 0xFFFF
686	 8F	AND		 	 
- stack 1: 0x4A0
- stack 0: 0x0
687	 90	PUSH1	01	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x1
688	 92	SIGNEXTEND		 	 
- stack 1: 0x4A0
- stack 0: 0x0
689	 93	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0x0
- stack 0: 0x20
690	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
691	 97	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
692	 99	ADD		 	 
- stack 0: 0x4A4
693	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
694	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x1A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000
695	 9C	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x1A6000801B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000
- stack 0: 0xF0
696	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x1A6
697	 9F	JUMP		 	 
- stack 0: 0x4A4
698	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4A4
699	 1A7	PUSH4	00008000	 	 
- stack 1: 0x4A4
- stack 0: 0x8000
700	 1AC	PUSH2	0040	 	 
- stack 2: 0x4A4
- stack 1: 0x8000
- stack 0: 0x40
701	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A4
702	 1B0	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
703	 1B2	ADD		 	 
- stack 0: 0x4A8
704	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
705	 1B4	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000020AFFFF
706	 1B5	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000020AFFFF
- stack 0: 0xF0
707	 1B7	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9
708	 1B8	JUMP		 	 
- stack 0: 0x4A8
709	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4A8
710	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
711	 1BB	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000020AFFFF
712	 1BC	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF00BA000001D8FFF801EB000100EB000801050414016D0000020AFFFF
- stack 0: 0xE0
713	 1BE	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1B9FFFF
714	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
715	 1C2	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFF
716	 1C3	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFF
- stack 0: 0x1
717	 1C5	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
718	 1C6	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
719	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x4A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
720	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x4A8
- stack 0: 0x7FFF
721	 1CB	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0x7FFF
- stack 0: 0x40
722	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A8
723	 1CF	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
724	 1D1	ADD		 	 
- stack 0: 0x4AC
725	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
726	 1D3	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xBA000001D8FFF801EB000100EB000801050414016D0000020AFFFF00A00000
727	 1D4	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xBA000001D8FFF801EB000100EB000801050414016D0000020AFFFF00A00000
- stack 0: 0xF0
728	 1D6	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xBA
729	 1D7	JUMP		 	 
- stack 0: 0x4AC
730	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x4AC
731	 BB	PUSH2	0040	 	 
- stack 1: 0x4AC
- stack 0: 0x40
732	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4AC
- stack 0: 0x7FFF
733	 BF	PUSH2	0020	 	 
- stack 2: 0x4AC
- stack 1: 0x7FFF
- stack 0: 0x20
734	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4AC
- stack 1: 0x7FFF
- stack 0: 0x0
735	 C3	SUB		 	  ;; # SUB
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8001
736	 C4	PUSH2	0060	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8001
- stack 0: 0x60
737	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4AC
738	 C8	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
739	 CA	ADD		 	 
- stack 0: 0x4B0
740	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
741	 CC	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x1D8FFF801EB000100EB000801050414016D0000020AFFFF00A0000000BA0000
742	 CD	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x1D8FFF801EB000100EB000801050414016D0000020AFFFF00A0000000BA0000
- stack 0: 0xF0
743	 CF	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x1D8
744	 D0	JUMP		 	 
- stack 0: 0x4B0
745	 1D8	JUMPDEST		 ;; __riscvimpl_LUI_ffff8eb7	  ;; # instr: lui t4,0xffff8(ignore imm)
- stack 0: 0x4B0
746	 1D9	PUSH4	ffff8000	 	 
- stack 1: 0x4B0
- stack 0: 0xFFFF8000
747	 1DE	PUSH2	03A0	 	 
- stack 2: 0x4B0
- stack 1: 0xFFFF8000
- stack 0: 0x3A0
748	 1E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B0
749	 1E2	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
750	 1E4	ADD		 	 
- stack 0: 0x4B4
751	 1E5	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
752	 1E6	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x1EB000100EB000801050414016D0000020AFFFF00A0000000BA000001800000
753	 1E7	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x1EB000100EB000801050414016D0000020AFFFF00A0000000BA000001800000
- stack 0: 0xF0
754	 1E9	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x1EB
755	 1EA	JUMP		 	 
- stack 0: 0x4B4
756	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1(ignore imm)
- stack 0: 0x4B4
757	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
758	 1ED	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x1EB000100EB000801050414016D0000020AFFFF00A0000000BA000001800000
759	 1EE	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x1EB000100EB000801050414016D0000020AFFFF00A0000000BA000001800000
- stack 0: 0xE0
760	 1F0	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x1EB0001
761	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x1EB0001
- stack 0: 0xFFFF
762	 1F4	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
763	 1F5	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x1
764	 1F7	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x1
765	 1F8	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0x3A0
766	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B4
- stack 1: 0x1
- stack 0: 0xFFFF8000
767	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B4
- stack 0: 0xFFFF8001
768	 1FD	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xFFFF8001
- stack 0: 0x3A0
769	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
770	 201	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
771	 203	ADD		 	 
- stack 0: 0x4B8
772	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
773	 205	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xEB000801050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF
774	 206	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xEB000801050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF
- stack 0: 0xF0
775	 208	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xEB
776	 209	JUMP		 	 
- stack 0: 0x4B8
777	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4B8
778	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
779	 ED	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xEB000801050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF
780	 EE	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0xEB000801050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF
- stack 0: 0xE0
781	 F0	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xEB0008
782	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0xEB0008
- stack 0: 0xFFFF
783	 F4	AND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
784	 F5	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x1
785	 F7	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0x8
786	 F8	PUSH2	0380	 	 
- stack 2: 0x4B8
- stack 1: 0x8
- stack 0: 0x380
787	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4B8
788	 FC	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
789	 FE	ADD		 	 
- stack 0: 0x4BC
790	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
791	 100	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009
792	 101	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1050414016D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009
- stack 0: 0xF0
793	 103	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x105
794	 104	JUMP		 	 
- stack 0: 0x4BC
795	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x4BC
796	 106	PUSH2	0060	 	 
- stack 1: 0x4BC
- stack 0: 0x60
797	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x4BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8001
798	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8001
- stack 0: 0xFFFFFFFF
799	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4BC
- stack 0: 0xFFFF8001
800	 110	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xFFFF8001
- stack 0: 0x3A0
801	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x4BC
- stack 1: 0xFFFF8001
- stack 0: 0xFFFF8001
802	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4BC
- stack 2: 0xFFFF8001
- stack 1: 0xFFFF8001
- stack 0: 0xFFFFFFFF
803	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4BC
- stack 1: 0xFFFF8001
- stack 0: 0xFFFF8001
804	 11A	SUB		 	 
- stack 1: 0x4BC
- stack 0: 0x0
805	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x4BC
- stack 1: 0x0
- stack 0: 0x123
806	 11E	JUMPI		 	 
- stack 0: 0x4BC
807	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x4BC
- stack 0: 0x13D
808	 122	JUMP		 	 
- stack 0: 0x4BC
809	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x4BC
810	 13E	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
811	 140	ADD		 	 
- stack 0: 0x4C0
812	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
813	 142	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x16D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4
814	 143	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x16D0000020AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4
- stack 0: 0xF0
815	 145	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x16D
816	 146	JUMP		 	 
- stack 0: 0x4C0
817	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4C0
818	 16E	PUSH4	80000000	 	 
- stack 1: 0x4C0
- stack 0: 0x80000000
819	 173	PUSH2	0020	 	 
- stack 2: 0x4C0
- stack 1: 0x80000000
- stack 0: 0x20
820	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C0
821	 177	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
822	 179	ADD		 	 
- stack 0: 0x4C4
823	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
824	 17B	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4016D0000
825	 17C	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4016D0000
- stack 0: 0xF0
826	 17E	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x20A
827	 17F	JUMP		 	 
- stack 0: 0x4C4
828	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4C4
829	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
830	 20C	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4016D0000
831	 20D	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF00A0000000BA00000180000001EBFFFF00EB0009010503F4016D0000
- stack 0: 0xE0
832	 20F	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x20AFFFF
833	 210	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
834	 213	AND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFF
835	 214	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFF
- stack 0: 0x1
836	 216	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
837	 217	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
838	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
839	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C4
- stack 0: 0x7FFFFFFF
840	 21C	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
841	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
842	 220	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
843	 222	ADD		 	 
- stack 0: 0x4C8
844	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
845	 224	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000000BA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF
846	 225	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000000BA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF
- stack 0: 0xF0
847	 227	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA0
848	 228	JUMP		 	 
- stack 0: 0x4C8
849	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x4C8
850	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
851	 A2	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0xA0000000BA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF
852	 A3	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0xA0000000BA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF
- stack 0: 0xE0
853	 A5	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0xA00000
854	 A6	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xA00000
- stack 0: 0xFFFF
855	 A9	AND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
856	 AA	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x1
857	 AC	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0x0
858	 AD	PUSH2	0040	 	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x40
859	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4C8
860	 B1	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
861	 B3	ADD		 	 
- stack 0: 0x4CC
862	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
863	 B5	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xBA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF01A60008
864	 B6	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xBA00000180000001EBFFFF00EB0009010503F4016D0000020AFFFF01A60008
- stack 0: 0xF0
865	 B8	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xBA
866	 B9	JUMP		 	 
- stack 0: 0x4CC
867	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x4CC
868	 BB	PUSH2	0040	 	 
- stack 1: 0x4CC
- stack 0: 0x40
869	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4CC
- stack 0: 0x0
870	 BF	PUSH2	0020	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x20
871	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x7FFFFFFF
872	 C3	SUB		 	  ;; # SUB
- stack 1: 0x4CC
- stack 0: 0x7FFFFFFF
873	 C4	PUSH2	0060	 	 
- stack 2: 0x4CC
- stack 1: 0x7FFFFFFF
- stack 0: 0x60
874	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4CC
875	 C8	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
876	 CA	ADD		 	 
- stack 0: 0x4D0
877	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
878	 CC	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x180000001EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF
879	 CD	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x180000001EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF
- stack 0: 0xF0
880	 CF	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x180
881	 D0	JUMP		 	 
- stack 0: 0x4D0
882	 180	JUMPDEST		 ;; __riscvimpl_LUI_80000eb7	  ;; # instr: lui t4,0x80000(ignore imm)
- stack 0: 0x4D0
883	 181	PUSH4	80000000	 	 
- stack 1: 0x4D0
- stack 0: 0x80000000
884	 186	PUSH2	03A0	 	 
- stack 2: 0x4D0
- stack 1: 0x80000000
- stack 0: 0x3A0
885	 189	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D0
886	 18A	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
887	 18C	ADD		 	 
- stack 0: 0x4D4
888	 18D	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
889	 18E	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA0000
890	 18F	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA0000
- stack 0: 0xF0
891	 191	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1EB
892	 192	JUMP		 	 
- stack 0: 0x4D4
893	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1(ignore imm)
- stack 0: 0x4D4
894	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
895	 1ED	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA0000
896	 1EE	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF00EB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA0000
- stack 0: 0xE0
897	 1F0	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1EBFFFF
898	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
899	 1F4	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFF
900	 1F5	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFF
- stack 0: 0x1
901	 1F7	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
902	 1F8	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
903	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
904	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x4D4
- stack 0: 0x7FFFFFFF
905	 1FD	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
906	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D4
907	 201	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
908	 203	ADD		 	 
- stack 0: 0x4D8
909	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
910	 205	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xEB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF8
911	 206	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xEB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF8
- stack 0: 0xF0
912	 208	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xEB
913	 209	JUMP		 	 
- stack 0: 0x4D8
914	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D8
915	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
916	 ED	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xEB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF8
917	 EE	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xEB0009010503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF8
- stack 0: 0xE0
918	 F0	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xEB0009
919	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xEB0009
- stack 0: 0xFFFF
920	 F4	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
921	 F5	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x1
922	 F7	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x9
923	 F8	PUSH2	0380	 	 
- stack 2: 0x4D8
- stack 1: 0x9
- stack 0: 0x380
924	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D8
925	 FC	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
926	 FE	ADD		 	 
- stack 0: 0x4DC
927	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
928	 100	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x10503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A
929	 101	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x10503F4016D0000020AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A
- stack 0: 0xF0
930	 103	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x105
931	 104	JUMP		 	 
- stack 0: 0x4DC
932	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x4DC
933	 106	PUSH2	0060	 	 
- stack 1: 0x4DC
- stack 0: 0x60
934	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x4DC
- stack 0: 0x7FFFFFFF
935	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
936	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4DC
- stack 0: 0x7FFFFFFF
937	 110	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x3A0
938	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
939	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4DC
- stack 2: 0x7FFFFFFF
- stack 1: 0x7FFFFFFF
- stack 0: 0xFFFFFFFF
940	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4DC
- stack 1: 0x7FFFFFFF
- stack 0: 0x7FFFFFFF
941	 11A	SUB		 	 
- stack 1: 0x4DC
- stack 0: 0x0
942	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x123
943	 11E	JUMPI		 	 
- stack 0: 0x4DC
944	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x4DC
- stack 0: 0x13D
945	 122	JUMP		 	 
- stack 0: 0x4DC
946	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x4DC
947	 13E	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
948	 140	ADD		 	 
- stack 0: 0x4E0
949	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
950	 142	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x16D0000020AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4
951	 143	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x16D0000020AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4
- stack 0: 0xF0
952	 145	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x16D
953	 146	JUMP		 	 
- stack 0: 0x4E0
954	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x4E0
955	 16E	PUSH4	80000000	 	 
- stack 1: 0x4E0
- stack 0: 0x80000000
956	 173	PUSH2	0020	 	 
- stack 2: 0x4E0
- stack 1: 0x80000000
- stack 0: 0x20
957	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E0
958	 177	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
959	 179	ADD		 	 
- stack 0: 0x4E4
960	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
961	 17B	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D0000
962	 17C	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D0000
- stack 0: 0xF0
963	 17E	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x20A
964	 17F	JUMP		 	 
- stack 0: 0x4E4
965	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x4E4
966	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
967	 20C	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D0000
968	 20D	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF01A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D0000
- stack 0: 0xE0
969	 20F	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x20AFFFF
970	 210	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
971	 213	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFF
972	 214	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFF
- stack 0: 0x1
973	 216	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
974	 217	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
975	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
976	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x4E4
- stack 0: 0x7FFFFFFF
977	 21C	PUSH2	0020	 	 
- stack 2: 0x4E4
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
978	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E4
979	 220	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
980	 222	ADD		 	 
- stack 0: 0x4E8
981	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
982	 224	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x1A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D000001A60008
983	 225	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x1A6000801B9FFFF00BA00000229FFF800EB000A010503D4016D000001A60008
- stack 0: 0xF0
984	 227	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x1A6
985	 228	JUMP		 	 
- stack 0: 0x4E8
986	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x4E8
987	 1A7	PUSH4	00008000	 	 
- stack 1: 0x4E8
- stack 0: 0x8000
988	 1AC	PUSH2	0040	 	 
- stack 2: 0x4E8
- stack 1: 0x8000
- stack 0: 0x40
989	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E8
990	 1B0	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
991	 1B2	ADD		 	 
- stack 0: 0x4EC
992	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
993	 1B4	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF00BA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF
994	 1B5	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF00BA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF
- stack 0: 0xF0
995	 1B7	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9
996	 1B8	JUMP		 	 
- stack 0: 0x4EC
997	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x4EC
998	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
999	 1BB	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF00BA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF
1000	 1BC	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF00BA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF
- stack 0: 0xE0
1001	 1BE	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x1B9FFFF
1002	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
1003	 1C2	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFF
1004	 1C3	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFF
- stack 0: 0x1
1005	 1C5	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1006	 1C6	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1007	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1008	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x4EC
- stack 0: 0x7FFF
1009	 1CB	PUSH2	0040	 	 
- stack 2: 0x4EC
- stack 1: 0x7FFF
- stack 0: 0x40
1010	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x4EC
1011	 1CF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1012	 1D1	ADD		 	 
- stack 0: 0x4F0
1013	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1014	 1D3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0xBA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF00BA0000
1015	 1D4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0xBA00000229FFF800EB000A010503D4016D000001A6000801B9FFFF00BA0000
- stack 0: 0xF0
1016	 1D6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0xBA
1017	 1D7	JUMP		 	 
- stack 0: 0x4F0
1018	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x4F0
1019	 BB	PUSH2	0040	 	 
- stack 1: 0x4F0
- stack 0: 0x40
1020	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x4F0
- stack 0: 0x7FFF
1021	 BF	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFF
- stack 0: 0x20
1022	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0x7FFF
- stack 0: 0x7FFFFFFF
1023	 C3	SUB		 	  ;; # SUB
- stack 1: 0x4F0
- stack 0: 0x7FFF8000
1024	 C4	PUSH2	0060	 	 
- stack 2: 0x4F0
- stack 1: 0x7FFF8000
- stack 0: 0x60
1025	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x4F0
1026	 C8	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1027	 CA	ADD		 	 
- stack 0: 0x4F4
1028	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1029	 CC	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x229FFF800EB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF8
1030	 CD	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x229FFF800EB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF8
- stack 0: 0xF0
1031	 CF	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x229
1032	 D0	JUMP		 	 
- stack 0: 0x4F4
1033	 229	JUMPDEST		 ;; __riscvimpl_LUI_7fff8eb7	  ;; # instr: lui t4,0x7fff8(ignore imm)
- stack 0: 0x4F4
1034	 22A	PUSH4	7fff8000	 	 
- stack 1: 0x4F4
- stack 0: 0x7FFF8000
1035	 22F	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
1036	 232	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1037	 233	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1038	 235	ADD		 	 
- stack 0: 0x4F8
1039	 236	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1040	 237	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xEB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF801EB0001
1041	 238	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0xEB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF801EB0001
- stack 0: 0xF0
1042	 23A	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xEB
1043	 23B	JUMP		 	 
- stack 0: 0x4F8
1044	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1045	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1046	 ED	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0xEB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF801EB0001
1047	 EE	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0xEB000A010503D4016D000001A6000801B9FFFF00BA00000229FFF801EB0001
- stack 0: 0xE0
1048	 F0	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0xEB000A
1049	 F1	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0xEB000A
- stack 0: 0xFFFF
1050	 F4	AND		 	 
- stack 1: 0x4F8
- stack 0: 0xA
1051	 F5	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0xA
- stack 0: 0x1
1052	 F7	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0xA
1053	 F8	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0xA
- stack 0: 0x380
1054	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1055	 FC	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1056	 FE	ADD		 	 
- stack 0: 0x4FC
1057	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1058	 100	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x10503D4016D000001A6000801B9FFFF00BA00000229FFF801EB000100EB000B
1059	 101	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x10503D4016D000001A6000801B9FFFF00BA00000229FFF801EB000100EB000B
- stack 0: 0xF0
1060	 103	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x105
1061	 104	JUMP		 	 
- stack 0: 0x4FC
1062	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x4FC
1063	 106	PUSH2	0060	 	 
- stack 1: 0x4FC
- stack 0: 0x60
1064	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x4FC
- stack 0: 0x7FFF8000
1065	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x7FFF8000
- stack 0: 0xFFFFFFFF
1066	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x7FFF8000
1067	 110	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
1068	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0x7FFF8000
- stack 0: 0x7FFF8000
1069	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x7FFF8000
- stack 1: 0x7FFF8000
- stack 0: 0xFFFFFFFF
1070	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x7FFF8000
- stack 0: 0x7FFF8000
1071	 11A	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1072	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x123
1073	 11E	JUMPI		 	 
- stack 0: 0x4FC
1074	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x4FC
- stack 0: 0x13D
1075	 122	JUMP		 	 
- stack 0: 0x4FC
1076	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x4FC
1077	 13E	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1078	 140	ADD		 	 
- stack 0: 0x500
1079	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1080	 142	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x16D000001A6000801B9FFFF00BA00000229FFF801EB000100EB000B010503B4
1081	 143	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x16D000001A6000801B9FFFF00BA00000229FFF801EB000100EB000B010503B4
- stack 0: 0xF0
1082	 145	SHR		 	 
- stack 1: 0x500
- stack 0: 0x16D
1083	 146	JUMP		 	 
- stack 0: 0x500
1084	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x500
1085	 16E	PUSH4	80000000	 	 
- stack 1: 0x500
- stack 0: 0x80000000
1086	 173	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x80000000
- stack 0: 0x20
1087	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1088	 177	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1089	 179	ADD		 	 
- stack 0: 0x504
1090	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1091	 17B	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x1A6000801B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000
1092	 17C	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x1A6000801B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000
- stack 0: 0xF0
1093	 17E	SHR		 	 
- stack 1: 0x504
- stack 0: 0x1A6
1094	 17F	JUMP		 	 
- stack 0: 0x504
1095	 1A6	JUMPDEST		 ;; __riscvimpl_LUI_8137	  ;; # instr: lui sp,0x8(ignore imm)
- stack 0: 0x504
1096	 1A7	PUSH4	00008000	 	 
- stack 1: 0x504
- stack 0: 0x8000
1097	 1AC	PUSH2	0040	 	 
- stack 2: 0x504
- stack 1: 0x8000
- stack 0: 0x40
1098	 1AF	MSTORE		 	  ;; # store to x2
- stack 0: 0x504
1099	 1B0	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1100	 1B2	ADD		 	 
- stack 0: 0x508
1101	 1B3	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1102	 1B4	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x1B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF
1103	 1B5	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x1B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF
- stack 0: 0xF0
1104	 1B7	SHR		 	 
- stack 1: 0x508
- stack 0: 0x1B9
1105	 1B8	JUMP		 	 
- stack 0: 0x508
1106	 1B9	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-1(ignore imm)
- stack 0: 0x508
1107	 1BA	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1108	 1BB	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x1B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF
1109	 1BC	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x1B9FFFF00BA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF
- stack 0: 0xE0
1110	 1BE	SHR		 	 
- stack 1: 0x508
- stack 0: 0x1B9FFFF
1111	 1BF	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x1B9FFFF
- stack 0: 0xFFFF
1112	 1C2	AND		 	 
- stack 1: 0x508
- stack 0: 0xFFFF
1113	 1C3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFFFF
- stack 0: 0x1
1114	 1C5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1115	 1C6	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1116	 1C9	MLOAD		 	  ;; # read from x2
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x8000
1117	 1CA	ADD		 	  ;; # ADDI 2
- stack 1: 0x508
- stack 0: 0x7FFF
1118	 1CB	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0x7FFF
- stack 0: 0x40
1119	 1CE	MSTORE		 	  ;; # store to x2
- stack 0: 0x508
1120	 1CF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1121	 1D1	ADD		 	 
- stack 0: 0x50C
1122	 1D2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1123	 1D3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xBA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF0147FFF8
1124	 1D4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xBA00000229FFF801EB000100EB000B010503B4016D0000020AFFFF0147FFF8
- stack 0: 0xF0
1125	 1D6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xBA
1126	 1D7	JUMP		 	 
- stack 0: 0x50C
1127	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x50C
1128	 BB	PUSH2	0040	 	 
- stack 1: 0x50C
- stack 0: 0x40
1129	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x50C
- stack 0: 0x7FFF
1130	 BF	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0x7FFF
- stack 0: 0x20
1131	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0x7FFF
- stack 0: 0x80000000
1132	 C3	SUB		 	  ;; # SUB
- stack 1: 0x50C
- stack 0: 0x7FFF8001
1133	 C4	PUSH2	0060	 	 
- stack 2: 0x50C
- stack 1: 0x7FFF8001
- stack 0: 0x60
1134	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x50C
1135	 C8	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1136	 CA	ADD		 	 
- stack 0: 0x510
1137	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1138	 CC	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x229FFF801EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA0000
1139	 CD	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x229FFF801EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA0000
- stack 0: 0xF0
1140	 CF	SHR		 	 
- stack 1: 0x510
- stack 0: 0x229
1141	 D0	JUMP		 	 
- stack 0: 0x510
1142	 229	JUMPDEST		 ;; __riscvimpl_LUI_7fff8eb7	  ;; # instr: lui t4,0x7fff8(ignore imm)
- stack 0: 0x510
1143	 22A	PUSH4	7fff8000	 	 
- stack 1: 0x510
- stack 0: 0x7FFF8000
1144	 22F	PUSH2	03A0	 	 
- stack 2: 0x510
- stack 1: 0x7FFF8000
- stack 0: 0x3A0
1145	 232	MSTORE		 	  ;; # store to x29
- stack 0: 0x510
1146	 233	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1147	 235	ADD		 	 
- stack 0: 0x514
1148	 236	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1149	 237	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA000001930008
1150	 238	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA000001930008
- stack 0: 0xF0
1151	 23A	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB
1152	 23B	JUMP		 	 
- stack 0: 0x514
1153	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1(ignore imm)
- stack 0: 0x514
1154	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1155	 1ED	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x1EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA000001930008
1156	 1EE	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x1EB000100EB000B010503B4016D0000020AFFFF0147FFF800BA000001930008
- stack 0: 0xE0
1157	 1F0	SHR		 	 
- stack 1: 0x514
- stack 0: 0x1EB0001
1158	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x1EB0001
- stack 0: 0xFFFF
1159	 1F4	AND		 	 
- stack 1: 0x514
- stack 0: 0x1
1160	 1F5	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x1
- stack 0: 0x1
1161	 1F7	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x1
1162	 1F8	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x1
- stack 0: 0x3A0
1163	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x514
- stack 1: 0x1
- stack 0: 0x7FFF8000
1164	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x514
- stack 0: 0x7FFF8001
1165	 1FD	PUSH2	03A0	 	 
- stack 2: 0x514
- stack 1: 0x7FFF8001
- stack 0: 0x3A0
1166	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x514
1167	 201	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1168	 203	ADD		 	 
- stack 0: 0x518
1169	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1170	 205	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xEB000B010503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF
1171	 206	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0xEB000B010503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF
- stack 0: 0xF0
1172	 208	SHR		 	 
- stack 1: 0x518
- stack 0: 0xEB
1173	 209	JUMP		 	 
- stack 0: 0x518
1174	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x518
1175	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1176	 ED	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0xEB000B010503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF
1177	 EE	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0xEB000B010503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF
- stack 0: 0xE0
1178	 F0	SHR		 	 
- stack 1: 0x518
- stack 0: 0xEB000B
1179	 F1	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0xEB000B
- stack 0: 0xFFFF
1180	 F4	AND		 	 
- stack 1: 0x518
- stack 0: 0xB
1181	 F5	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0xB
- stack 0: 0x1
1182	 F7	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0xB
1183	 F8	PUSH2	0380	 	 
- stack 2: 0x518
- stack 1: 0xB
- stack 0: 0x380
1184	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x518
1185	 FC	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1186	 FE	ADD		 	 
- stack 0: 0x51C
1187	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1188	 100	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x10503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF00EB000C
1189	 101	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x10503B4016D0000020AFFFF0147FFF800BA00000193000801EBFFFF00EB000C
- stack 0: 0xF0
1190	 103	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x105
1191	 104	JUMP		 	 
- stack 0: 0x51C
1192	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x51C
1193	 106	PUSH2	0060	 	 
- stack 1: 0x51C
- stack 0: 0x60
1194	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x51C
- stack 0: 0x7FFF8001
1195	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x51C
- stack 1: 0x7FFF8001
- stack 0: 0xFFFFFFFF
1196	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x51C
- stack 0: 0x7FFF8001
1197	 110	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0x7FFF8001
- stack 0: 0x3A0
1198	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0x7FFF8001
- stack 0: 0x7FFF8001
1199	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x51C
- stack 2: 0x7FFF8001
- stack 1: 0x7FFF8001
- stack 0: 0xFFFFFFFF
1200	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x51C
- stack 1: 0x7FFF8001
- stack 0: 0x7FFF8001
1201	 11A	SUB		 	 
- stack 1: 0x51C
- stack 0: 0x0
1202	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x51C
- stack 1: 0x0
- stack 0: 0x123
1203	 11E	JUMPI		 	 
- stack 0: 0x51C
1204	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x51C
- stack 0: 0x13D
1205	 122	JUMP		 	 
- stack 0: 0x51C
1206	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x51C
1207	 13E	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1208	 140	ADD		 	 
- stack 0: 0x520
1209	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1210	 142	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x16D0000020AFFFF0147FFF800BA00000193000801EBFFFF00EB000C01050394
1211	 143	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x16D0000020AFFFF0147FFF800BA00000193000801EBFFFF00EB000C01050394
- stack 0: 0xF0
1212	 145	SHR		 	 
- stack 1: 0x520
- stack 0: 0x16D
1213	 146	JUMP		 	 
- stack 0: 0x520
1214	 16D	JUMPDEST		 ;; __riscvimpl_LUI_800000b7	  ;; # instr: lui ra,0x80000(ignore imm)
- stack 0: 0x520
1215	 16E	PUSH4	80000000	 	 
- stack 1: 0x520
- stack 0: 0x80000000
1216	 173	PUSH2	0020	 	 
- stack 2: 0x520
- stack 1: 0x80000000
- stack 0: 0x20
1217	 176	MSTORE		 	  ;; # store to x1
- stack 0: 0x520
1218	 177	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1219	 179	ADD		 	 
- stack 0: 0x524
1220	 17A	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1221	 17B	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x20AFFFF0147FFF800BA00000193000801EBFFFF00EB000C0105039400860000
1222	 17C	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x20AFFFF0147FFF800BA00000193000801EBFFFF00EB000C0105039400860000
- stack 0: 0xF0
1223	 17E	SHR		 	 
- stack 1: 0x524
- stack 0: 0x20A
1224	 17F	JUMP		 	 
- stack 0: 0x524
1225	 20A	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-1(ignore imm)
- stack 0: 0x524
1226	 20B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1227	 20C	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x20AFFFF0147FFF800BA00000193000801EBFFFF00EB000C0105039400860000
1228	 20D	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x20AFFFF0147FFF800BA00000193000801EBFFFF00EB000C0105039400860000
- stack 0: 0xE0
1229	 20F	SHR		 	 
- stack 1: 0x524
- stack 0: 0x20AFFFF
1230	 210	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x20AFFFF
- stack 0: 0xFFFF
1231	 213	AND		 	 
- stack 1: 0x524
- stack 0: 0xFFFF
1232	 214	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFFFF
- stack 0: 0x1
1233	 216	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1234	 217	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1235	 21A	MLOAD		 	  ;; # read from x1
- stack 2: 0x524
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80000000
1236	 21B	ADD		 	  ;; # ADDI 1
- stack 1: 0x524
- stack 0: 0x7FFFFFFF
1237	 21C	PUSH2	0020	 	 
- stack 2: 0x524
- stack 1: 0x7FFFFFFF
- stack 0: 0x20
1238	 21F	MSTORE		 	  ;; # store to x1
- stack 0: 0x524
1239	 220	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1240	 222	ADD		 	 
- stack 0: 0x528
1241	 223	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1242	 224	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x147FFF800BA00000193000801EBFFFF00EB000C010503940086000000A0FFFF
1243	 225	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x147FFF800BA00000193000801EBFFFF00EB000C010503940086000000A0FFFF
- stack 0: 0xF0
1244	 227	SHR		 	 
- stack 1: 0x528
- stack 0: 0x147
1245	 228	JUMP		 	 
- stack 0: 0x528
1246	 147	JUMPDEST		 ;; __riscvimpl_LUI_ffff8137	  ;; # instr: lui sp,0xffff8(ignore imm)
- stack 0: 0x528
1247	 148	PUSH4	ffff8000	 	 
- stack 1: 0x528
- stack 0: 0xFFFF8000
1248	 14D	PUSH2	0040	 	 
- stack 2: 0x528
- stack 1: 0xFFFF8000
- stack 0: 0x40
1249	 150	MSTORE		 	  ;; # store to x2
- stack 0: 0x528
1250	 151	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1251	 153	ADD		 	 
- stack 0: 0x52C
1252	 154	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1253	 155	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xBA00000193000801EBFFFF00EB000C010503940086000000A0FFFF00BA0000
1254	 156	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xBA00000193000801EBFFFF00EB000C010503940086000000A0FFFF00BA0000
- stack 0: 0xF0
1255	 158	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xBA
1256	 159	JUMP		 	 
- stack 0: 0x52C
1257	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x52C
1258	 BB	PUSH2	0040	 	 
- stack 1: 0x52C
- stack 0: 0x40
1259	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x52C
- stack 0: 0xFFFF8000
1260	 BF	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0xFFFF8000
- stack 0: 0x20
1261	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0xFFFF8000
- stack 0: 0x7FFFFFFF
1262	 C3	SUB		 	  ;; # SUB
- stack 1: 0x52C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFF
1263	 C4	PUSH2	0060	 	 
- stack 2: 0x52C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFF
- stack 0: 0x60
1264	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x52C
1265	 C8	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1266	 CA	ADD		 	 
- stack 0: 0x530
1267	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1268	 CC	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x193000801EBFFFF00EB000C010503940086000000A0FFFF00BA000000D10001
1269	 CD	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x193000801EBFFFF00EB000C010503940086000000A0FFFF00BA000000D10001
- stack 0: 0xF0
1270	 CF	SHR		 	 
- stack 1: 0x530
- stack 0: 0x193
1271	 D0	JUMP		 	 
- stack 0: 0x530
1272	 193	JUMPDEST		 ;; __riscvimpl_LUI_80008eb7	  ;; # instr: lui t4,0x80008(ignore imm)
- stack 0: 0x530
1273	 194	PUSH4	80008000	 	 
- stack 1: 0x530
- stack 0: 0x80008000
1274	 199	PUSH2	03A0	 	 
- stack 2: 0x530
- stack 1: 0x80008000
- stack 0: 0x3A0
1275	 19C	MSTORE		 	  ;; # store to x29
- stack 0: 0x530
1276	 19D	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1277	 19F	ADD		 	 
- stack 0: 0x534
1278	 1A0	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1279	 1A1	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EBFFFF00EB000C010503940086000000A0FFFF00BA000000D1000100EB000D
1280	 1A2	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x1EBFFFF00EB000C010503940086000000A0FFFF00BA000000D1000100EB000D
- stack 0: 0xF0
1281	 1A4	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EB
1282	 1A5	JUMP		 	 
- stack 0: 0x534
1283	 1EB	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,1(ignore imm)
- stack 0: 0x534
1284	 1EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1285	 1ED	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x1EBFFFF00EB000C010503940086000000A0FFFF00BA000000D1000100EB000D
1286	 1EE	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0x1EBFFFF00EB000C010503940086000000A0FFFF00BA000000D1000100EB000D
- stack 0: 0xE0
1287	 1F0	SHR		 	 
- stack 1: 0x534
- stack 0: 0x1EBFFFF
1288	 1F1	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0x1EBFFFF
- stack 0: 0xFFFF
1289	 1F4	AND		 	 
- stack 1: 0x534
- stack 0: 0xFFFF
1290	 1F5	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xFFFF
- stack 0: 0x1
1291	 1F7	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1292	 1F8	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x3A0
1293	 1FB	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x80008000
1294	 1FC	ADD		 	  ;; # ADDI 29
- stack 1: 0x534
- stack 0: 0x80007FFF
1295	 1FD	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0x80007FFF
- stack 0: 0x3A0
1296	 200	MSTORE		 	  ;; # store to x29
- stack 0: 0x534
1297	 201	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1298	 203	ADD		 	 
- stack 0: 0x538
1299	 204	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1300	 205	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xEB000C010503940086000000A0FFFF00BA000000D1000100EB000D0105037C
1301	 206	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xEB000C010503940086000000A0FFFF00BA000000D1000100EB000D0105037C
- stack 0: 0xF0
1302	 208	SHR		 	 
- stack 1: 0x538
- stack 0: 0xEB
1303	 209	JUMP		 	 
- stack 0: 0x538
1304	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x538
1305	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1306	 ED	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xEB000C010503940086000000A0FFFF00BA000000D1000100EB000D0105037C
1307	 EE	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0xEB000C010503940086000000A0FFFF00BA000000D1000100EB000D0105037C
- stack 0: 0xE0
1308	 F0	SHR		 	 
- stack 1: 0x538
- stack 0: 0xEB000C
1309	 F1	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0xEB000C
- stack 0: 0xFFFF
1310	 F4	AND		 	 
- stack 1: 0x538
- stack 0: 0xC
1311	 F5	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0xC
- stack 0: 0x1
1312	 F7	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0xC
1313	 F8	PUSH2	0380	 	 
- stack 2: 0x538
- stack 1: 0xC
- stack 0: 0x380
1314	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x538
1315	 FC	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1316	 FE	ADD		 	 
- stack 0: 0x53C
1317	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1318	 100	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x10503940086000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF
1319	 101	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x10503940086000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF
- stack 0: 0xF0
1320	 103	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x105
1321	 104	JUMP		 	 
- stack 0: 0x53C
1322	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x53C
1323	 106	PUSH2	0060	 	 
- stack 1: 0x53C
- stack 0: 0x60
1324	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x53C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFF
1325	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFF
- stack 0: 0xFFFFFFFF
1326	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x80007FFF
1327	 110	PUSH2	03A0	 	 
- stack 2: 0x53C
- stack 1: 0x80007FFF
- stack 0: 0x3A0
1328	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x53C
- stack 1: 0x80007FFF
- stack 0: 0x80007FFF
1329	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x53C
- stack 2: 0x80007FFF
- stack 1: 0x80007FFF
- stack 0: 0xFFFFFFFF
1330	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x53C
- stack 1: 0x80007FFF
- stack 0: 0x80007FFF
1331	 11A	SUB		 	 
- stack 1: 0x53C
- stack 0: 0x0
1332	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x53C
- stack 1: 0x0
- stack 0: 0x123
1333	 11E	JUMPI		 	 
- stack 0: 0x53C
1334	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x53C
- stack 0: 0x13D
1335	 122	JUMP		 	 
- stack 0: 0x53C
1336	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x53C
1337	 13E	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1338	 140	ADD		 	 
- stack 0: 0x540
1339	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1340	 142	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x86000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A00001
1341	 143	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x86000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A00001
- stack 0: 0xF0
1342	 145	SHR		 	 
- stack 1: 0x540
- stack 0: 0x86
1343	 146	JUMP		 	 
- stack 0: 0x540
1344	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x540
1345	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1346	 88	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x86000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A00001
1347	 89	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x86000000A0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A00001
- stack 0: 0xE0
1348	 8B	SHR		 	 
- stack 1: 0x540
- stack 0: 0x860000
1349	 8C	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x860000
- stack 0: 0xFFFF
1350	 8F	AND		 	 
- stack 1: 0x540
- stack 0: 0x0
1351	 90	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x1
1352	 92	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0x0
1353	 93	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0x0
- stack 0: 0x20
1354	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1355	 97	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1356	 99	ADD		 	 
- stack 0: 0x544
1357	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1358	 9B	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xA0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A0000100BA0000
1359	 9C	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xA0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A0000100BA0000
- stack 0: 0xF0
1360	 9E	SHR		 	 
- stack 1: 0x544
- stack 0: 0xA0
1361	 9F	JUMP		 	 
- stack 0: 0x544
1362	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x544
1363	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1364	 A2	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xA0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A0000100BA0000
1365	 A3	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0xA0FFFF00BA000000D1000100EB000D0105037C0086FFFF00A0000100BA0000
- stack 0: 0xE0
1366	 A5	SHR		 	 
- stack 1: 0x544
- stack 0: 0xA0FFFF
1367	 A6	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1368	 A9	AND		 	 
- stack 1: 0x544
- stack 0: 0xFFFF
1369	 AA	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xFFFF
- stack 0: 0x1
1370	 AC	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1371	 AD	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1372	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1373	 B1	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1374	 B3	ADD		 	 
- stack 0: 0x548
1375	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1376	 B5	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xBA000000D1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE
1377	 B6	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xBA000000D1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE
- stack 0: 0xF0
1378	 B8	SHR		 	 
- stack 1: 0x548
- stack 0: 0xBA
1379	 B9	JUMP		 	 
- stack 0: 0x548
1380	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x548
1381	 BB	PUSH2	0040	 	 
- stack 1: 0x548
- stack 0: 0x40
1382	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x548
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1383	 BF	PUSH2	0020	 	 
- stack 2: 0x548
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1384	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x548
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x0
1385	 C3	SUB		 	  ;; # SUB
- stack 1: 0x548
- stack 0: 0x1
1386	 C4	PUSH2	0060	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x60
1387	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x548
1388	 C8	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1389	 CA	ADD		 	 
- stack 0: 0x54C
1390	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1391	 CC	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E
1392	 CD	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xD1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E
- stack 0: 0xF0
1393	 CF	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD1
1394	 D0	JUMP		 	 
- stack 0: 0x54C
1395	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x54C
1396	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1397	 D3	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xD1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E
1398	 D4	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0xD1000100EB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E
- stack 0: 0xE0
1399	 D6	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xD10001
1400	 D7	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0xD10001
- stack 0: 0xFFFF
1401	 DA	AND		 	 
- stack 1: 0x54C
- stack 0: 0x1
1402	 DB	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x1
1403	 DD	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x1
1404	 DE	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0x1
- stack 0: 0x3A0
1405	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x54C
1406	 E2	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1407	 E4	ADD		 	 
- stack 0: 0x550
1408	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1409	 E6	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xEB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E01050364
1410	 E7	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0xEB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E01050364
- stack 0: 0xF0
1411	 E9	SHR		 	 
- stack 1: 0x550
- stack 0: 0xEB
1412	 EA	JUMP		 	 
- stack 0: 0x550
1413	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x550
1414	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1415	 ED	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0xEB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E01050364
1416	 EE	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0xEB000D0105037C0086FFFF00A0000100BA000000D1FFFE00EB000E01050364
- stack 0: 0xE0
1417	 F0	SHR		 	 
- stack 1: 0x550
- stack 0: 0xEB000D
1418	 F1	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0xEB000D
- stack 0: 0xFFFF
1419	 F4	AND		 	 
- stack 1: 0x550
- stack 0: 0xD
1420	 F5	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xD
- stack 0: 0x1
1421	 F7	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xD
1422	 F8	PUSH2	0380	 	 
- stack 2: 0x550
- stack 1: 0xD
- stack 0: 0x380
1423	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x550
1424	 FC	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1425	 FE	ADD		 	 
- stack 0: 0x554
1426	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1427	 100	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x105037C0086FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF
1428	 101	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x105037C0086FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF
- stack 0: 0xF0
1429	 103	SHR		 	 
- stack 1: 0x554
- stack 0: 0x105
1430	 104	JUMP		 	 
- stack 0: 0x554
1431	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x554
1432	 106	PUSH2	0060	 	 
- stack 1: 0x554
- stack 0: 0x60
1433	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x554
- stack 0: 0x1
1434	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1435	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x554
- stack 0: 0x1
1436	 110	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x3A0
1437	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1438	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x554
- stack 2: 0x1
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1439	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x554
- stack 1: 0x1
- stack 0: 0x1
1440	 11A	SUB		 	 
- stack 1: 0x554
- stack 0: 0x0
1441	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x123
1442	 11E	JUMPI		 	 
- stack 0: 0x554
1443	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x554
- stack 0: 0x13D
1444	 122	JUMP		 	 
- stack 0: 0x554
1445	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x554
1446	 13E	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1447	 140	ADD		 	 
- stack 0: 0x558
1448	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1449	 142	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x86FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF
1450	 143	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x86FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF
- stack 0: 0xF0
1451	 145	SHR		 	 
- stack 1: 0x558
- stack 0: 0x86
1452	 146	JUMP		 	 
- stack 0: 0x558
1453	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x558
1454	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1455	 88	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x86FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF
1456	 89	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x86FFFF00A0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF
- stack 0: 0xE0
1457	 8B	SHR		 	 
- stack 1: 0x558
- stack 0: 0x86FFFF
1458	 8C	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1459	 8F	AND		 	 
- stack 1: 0x558
- stack 0: 0xFFFF
1460	 90	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xFFFF
- stack 0: 0x1
1461	 92	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1462	 93	PUSH2	0020	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1463	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x558
1464	 97	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1465	 99	ADD		 	 
- stack 0: 0x55C
1466	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1467	 9B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xA0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA0000
1468	 9C	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xA0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA0000
- stack 0: 0xF0
1469	 9E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xA0
1470	 9F	JUMP		 	 
- stack 0: 0x55C
1471	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x55C
1472	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1473	 A2	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xA0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA0000
1474	 A3	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xA0000100BA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA0000
- stack 0: 0xE0
1475	 A5	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xA00001
1476	 A6	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xA00001
- stack 0: 0xFFFF
1477	 A9	AND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1478	 AA	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x1
1479	 AC	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x1
1480	 AD	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0x1
- stack 0: 0x40
1481	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
1482	 B1	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1483	 B3	ADD		 	 
- stack 0: 0x560
1484	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1485	 B5	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0xBA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D10000
1486	 B6	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0xBA000000D1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D10000
- stack 0: 0xF0
1487	 B8	SHR		 	 
- stack 1: 0x560
- stack 0: 0xBA
1488	 B9	JUMP		 	 
- stack 0: 0x560
1489	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x560
1490	 BB	PUSH2	0040	 	 
- stack 1: 0x560
- stack 0: 0x40
1491	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x560
- stack 0: 0x1
1492	 BF	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x20
1493	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1494	 C3	SUB		 	  ;; # SUB
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1495	 C4	PUSH2	0060	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x60
1496	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x560
1497	 C8	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1498	 CA	ADD		 	 
- stack 0: 0x564
1499	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1500	 CC	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xD1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F
1501	 CD	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0xD1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F
- stack 0: 0xF0
1502	 CF	SHR		 	 
- stack 1: 0x564
- stack 0: 0xD1
1503	 D0	JUMP		 	 
- stack 0: 0x564
1504	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x564
1505	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
1506	 D3	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0xD1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F
1507	 D4	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0xD1FFFE00EB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F
- stack 0: 0xE0
1508	 D6	SHR		 	 
- stack 1: 0x564
- stack 0: 0xD1FFFE
1509	 D7	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0xD1FFFE
- stack 0: 0xFFFF
1510	 DA	AND		 	 
- stack 1: 0x564
- stack 0: 0xFFFE
1511	 DB	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0xFFFE
- stack 0: 0x1
1512	 DD	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1513	 DE	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0x3A0
1514	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1515	 E2	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1516	 E4	ADD		 	 
- stack 0: 0x568
1517	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1518	 E6	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xEB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C
1519	 E7	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0xEB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C
- stack 0: 0xF0
1520	 E9	SHR		 	 
- stack 1: 0x568
- stack 0: 0xEB
1521	 EA	JUMP		 	 
- stack 0: 0x568
1522	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x568
1523	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1524	 ED	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0xEB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C
1525	 EE	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0xEB000E010503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C
- stack 0: 0xE0
1526	 F0	SHR		 	 
- stack 1: 0x568
- stack 0: 0xEB000E
1527	 F1	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0xEB000E
- stack 0: 0xFFFF
1528	 F4	AND		 	 
- stack 1: 0x568
- stack 0: 0xE
1529	 F5	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xE
- stack 0: 0x1
1530	 F7	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xE
1531	 F8	PUSH2	0380	 	 
- stack 2: 0x568
- stack 1: 0xE
- stack 0: 0x380
1532	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x568
1533	 FC	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1534	 FE	ADD		 	 
- stack 0: 0x56C
1535	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1536	 100	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x10503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D
1537	 101	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x10503640086FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D
- stack 0: 0xF0
1538	 103	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x105
1539	 104	JUMP		 	 
- stack 0: 0x56C
1540	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x56C
1541	 106	PUSH2	0060	 	 
- stack 1: 0x56C
- stack 0: 0x60
1542	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1543	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1544	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x56C
- stack 0: 0xFFFFFFFE
1545	 110	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFE
- stack 0: 0x3A0
1546	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x56C
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
1547	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x56C
- stack 2: 0xFFFFFFFE
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE
- stack 0: 0xFFFFFFFF
1548	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x56C
- stack 1: 0xFFFFFFFE
- stack 0: 0xFFFFFFFE
1549	 11A	SUB		 	 
- stack 1: 0x56C
- stack 0: 0x0
1550	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x56C
- stack 1: 0x0
- stack 0: 0x123
1551	 11E	JUMPI		 	 
- stack 0: 0x56C
1552	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x56C
- stack 0: 0x13D
1553	 122	JUMP		 	 
- stack 0: 0x56C
1554	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x56C
1555	 13E	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1556	 140	ADD		 	 
- stack 0: 0x570
1557	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1558	 142	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B
1559	 143	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x86FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B
- stack 0: 0xF0
1560	 145	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86
1561	 146	JUMP		 	 
- stack 0: 0x570
1562	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x570
1563	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1564	 88	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x86FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B
1565	 89	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x86FFFF00A0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B
- stack 0: 0xE0
1566	 8B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x86FFFF
1567	 8C	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x86FFFF
- stack 0: 0xFFFF
1568	 8F	AND		 	 
- stack 1: 0x570
- stack 0: 0xFFFF
1569	 90	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0xFFFF
- stack 0: 0x1
1570	 92	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1571	 93	PUSH2	0020	 	 
- stack 2: 0x570
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1572	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x570
1573	 97	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1574	 99	ADD		 	 
- stack 0: 0x574
1575	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1576	 9B	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xA0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B023C0000
1577	 9C	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xA0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B023C0000
- stack 0: 0xF0
1578	 9E	SHR		 	 
- stack 1: 0x574
- stack 0: 0xA0
1579	 9F	JUMP		 	 
- stack 0: 0x574
1580	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x574
1581	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1582	 A2	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xA0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B023C0000
1583	 A3	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xA0FFFF00BA000000D1000000EB000F0105034C0086000D00A0000B023C0000
- stack 0: 0xE0
1584	 A5	SHR		 	 
- stack 1: 0x574
- stack 0: 0xA0FFFF
1585	 A6	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xA0FFFF
- stack 0: 0xFFFF
1586	 A9	AND		 	 
- stack 1: 0x574
- stack 0: 0xFFFF
1587	 AA	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xFFFF
- stack 0: 0x1
1588	 AC	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1589	 AD	PUSH2	0040	 	 
- stack 2: 0x574
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x40
1590	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x574
1591	 B1	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1592	 B3	ADD		 	 
- stack 0: 0x578
1593	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1594	 B5	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0xBA000000D1000000EB000F0105034C0086000D00A0000B023C000000D10002
1595	 B6	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0xBA000000D1000000EB000F0105034C0086000D00A0000B023C000000D10002
- stack 0: 0xF0
1596	 B8	SHR		 	 
- stack 1: 0x578
- stack 0: 0xBA
1597	 B9	JUMP		 	 
- stack 0: 0x578
1598	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x578
1599	 BB	PUSH2	0040	 	 
- stack 1: 0x578
- stack 0: 0x40
1600	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x578
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1601	 BF	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
1602	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x578
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1603	 C3	SUB		 	  ;; # SUB
- stack 1: 0x578
- stack 0: 0x0
1604	 C4	PUSH2	0060	 	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x60
1605	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x578
1606	 C8	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1607	 CA	ADD		 	 
- stack 0: 0x57C
1608	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1609	 CC	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xD1000000EB000F0105034C0086000D00A0000B023C000000D1000200EB0010
1610	 CD	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0xD1000000EB000F0105034C0086000D00A0000B023C000000D1000200EB0010
- stack 0: 0xF0
1611	 CF	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xD1
1612	 D0	JUMP		 	 
- stack 0: 0x57C
1613	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x57C
1614	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1615	 D3	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0xD1000000EB000F0105034C0086000D00A0000B023C000000D1000200EB0010
1616	 D4	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0xD1000000EB000F0105034C0086000D00A0000B023C000000D1000200EB0010
- stack 0: 0xE0
1617	 D6	SHR		 	 
- stack 1: 0x57C
- stack 0: 0xD10000
1618	 D7	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0xD10000
- stack 0: 0xFFFF
1619	 DA	AND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1620	 DB	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x1
1621	 DD	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x0
1622	 DE	PUSH2	03A0	 	 
- stack 2: 0x57C
- stack 1: 0x0
- stack 0: 0x3A0
1623	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x57C
1624	 E2	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1625	 E4	ADD		 	 
- stack 0: 0x580
1626	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1627	 E6	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xEB000F0105034C0086000D00A0000B023C000000D1000200EB001002530334
1628	 E7	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xEB000F0105034C0086000D00A0000B023C000000D1000200EB001002530334
- stack 0: 0xF0
1629	 E9	SHR		 	 
- stack 1: 0x580
- stack 0: 0xEB
1630	 EA	JUMP		 	 
- stack 0: 0x580
1631	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x580
1632	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1633	 ED	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xEB000F0105034C0086000D00A0000B023C000000D1000200EB001002530334
1634	 EE	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0xEB000F0105034C0086000D00A0000B023C000000D1000200EB001002530334
- stack 0: 0xE0
1635	 F0	SHR		 	 
- stack 1: 0x580
- stack 0: 0xEB000F
1636	 F1	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0xEB000F
- stack 0: 0xFFFF
1637	 F4	AND		 	 
- stack 1: 0x580
- stack 0: 0xF
1638	 F5	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x1
1639	 F7	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xF
1640	 F8	PUSH2	0380	 	 
- stack 2: 0x580
- stack 1: 0xF
- stack 0: 0x380
1641	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x580
1642	 FC	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1643	 FE	ADD		 	 
- stack 0: 0x584
1644	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1645	 100	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x105034C0086000D00A0000B023C000000D1000200EB0010025303340086000E
1646	 101	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x105034C0086000D00A0000B023C000000D1000200EB0010025303340086000E
- stack 0: 0xF0
1647	 103	SHR		 	 
- stack 1: 0x584
- stack 0: 0x105
1648	 104	JUMP		 	 
- stack 0: 0x584
1649	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x584
1650	 106	PUSH2	0060	 	 
- stack 1: 0x584
- stack 0: 0x60
1651	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x584
- stack 0: 0x0
1652	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1653	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x584
- stack 0: 0x0
1654	 110	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x3A0
1655	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x0
1656	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x584
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1657	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x0
1658	 11A	SUB		 	 
- stack 1: 0x584
- stack 0: 0x0
1659	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x584
- stack 1: 0x0
- stack 0: 0x123
1660	 11E	JUMPI		 	 
- stack 0: 0x584
1661	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x584
- stack 0: 0x13D
1662	 122	JUMP		 	 
- stack 0: 0x584
1663	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x584
1664	 13E	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1665	 140	ADD		 	 
- stack 0: 0x588
1666	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1667	 142	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000D00A0000B023C000000D1000200EB0010025303340086000E00A0000B
1668	 143	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0x86000D00A0000B023C000000D1000200EB0010025303340086000E00A0000B
- stack 0: 0xF0
1669	 145	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86
1670	 146	JUMP		 	 
- stack 0: 0x588
1671	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x588
1672	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1673	 88	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0x86000D00A0000B023C000000D1000200EB0010025303340086000E00A0000B
1674	 89	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0x86000D00A0000B023C000000D1000200EB0010025303340086000E00A0000B
- stack 0: 0xE0
1675	 8B	SHR		 	 
- stack 1: 0x588
- stack 0: 0x86000D
1676	 8C	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0x86000D
- stack 0: 0xFFFF
1677	 8F	AND		 	 
- stack 1: 0x588
- stack 0: 0xD
1678	 90	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xD
- stack 0: 0x1
1679	 92	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xD
1680	 93	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xD
- stack 0: 0x20
1681	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x588
1682	 97	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1683	 99	ADD		 	 
- stack 0: 0x58C
1684	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1685	 9B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0000B023C000000D1000200EB0010025303340086000E00A0000B02950000
1686	 9C	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0xA0000B023C000000D1000200EB0010025303340086000E00A0000B02950000
- stack 0: 0xF0
1687	 9E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0
1688	 9F	JUMP		 	 
- stack 0: 0x58C
1689	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x58C
1690	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1691	 A2	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0xA0000B023C000000D1000200EB0010025303340086000E00A0000B02950000
1692	 A3	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0xA0000B023C000000D1000200EB0010025303340086000E00A0000B02950000
- stack 0: 0xE0
1693	 A5	SHR		 	 
- stack 1: 0x58C
- stack 0: 0xA0000B
1694	 A6	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1695	 A9	AND		 	 
- stack 1: 0x58C
- stack 0: 0xB
1696	 AA	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xB
- stack 0: 0x1
1697	 AC	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xB
1698	 AD	PUSH2	0040	 	 
- stack 2: 0x58C
- stack 1: 0xB
- stack 0: 0x40
1699	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x58C
1700	 B1	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1701	 B3	ADD		 	 
- stack 0: 0x590
1702	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1703	 B5	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x23C000000D1000200EB0010025303340086000E00A0000B0295000000D10003
1704	 B6	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x23C000000D1000200EB0010025303340086000E00A0000B0295000000D10003
- stack 0: 0xF0
1705	 B8	SHR		 	 
- stack 1: 0x590
- stack 0: 0x23C
1706	 B9	JUMP		 	 
- stack 0: 0x590
1707	 23C	JUMPDEST		 ;; __riscvimpl_SUB_1_1_2	  ;; # instr: sub ra,ra,sp(ignore imm)
- stack 0: 0x590
1708	 23D	PUSH2	0040	 	 
- stack 1: 0x590
- stack 0: 0x40
1709	 240	MLOAD		 	  ;; # read from x2
- stack 1: 0x590
- stack 0: 0xB
1710	 241	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0xB
- stack 0: 0x20
1711	 244	MLOAD		 	  ;; # read from x1
- stack 2: 0x590
- stack 1: 0xB
- stack 0: 0xD
1712	 245	SUB		 	  ;; # SUB
- stack 1: 0x590
- stack 0: 0x2
1713	 246	PUSH2	0020	 	 
- stack 2: 0x590
- stack 1: 0x2
- stack 0: 0x20
1714	 249	MSTORE		 	  ;; # store to x1
- stack 0: 0x590
1715	 24A	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1716	 24C	ADD		 	 
- stack 0: 0x594
1717	 24D	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1718	 24E	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD1000200EB0010025303340086000E00A0000B0295000000D1000300EB0011
1719	 24F	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0xD1000200EB0010025303340086000E00A0000B0295000000D1000300EB0011
- stack 0: 0xF0
1720	 251	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD1
1721	 252	JUMP		 	 
- stack 0: 0x594
1722	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x594
1723	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
1724	 D3	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0xD1000200EB0010025303340086000E00A0000B0295000000D1000300EB0011
1725	 D4	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0xD1000200EB0010025303340086000E00A0000B0295000000D1000300EB0011
- stack 0: 0xE0
1726	 D6	SHR		 	 
- stack 1: 0x594
- stack 0: 0xD10002
1727	 D7	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0xD10002
- stack 0: 0xFFFF
1728	 DA	AND		 	 
- stack 1: 0x594
- stack 0: 0x2
1729	 DB	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x1
1730	 DD	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x2
1731	 DE	PUSH2	03A0	 	 
- stack 2: 0x594
- stack 1: 0x2
- stack 0: 0x3A0
1732	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x594
1733	 E2	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1734	 E4	ADD		 	 
- stack 0: 0x598
1735	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1736	 E6	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xEB0010025303340086000E00A0000B0295000000D1000300EB001102AC031C
1737	 E7	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0xEB0010025303340086000E00A0000B0295000000D1000300EB001102AC031C
- stack 0: 0xF0
1738	 E9	SHR		 	 
- stack 1: 0x598
- stack 0: 0xEB
1739	 EA	JUMP		 	 
- stack 0: 0x598
1740	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x598
1741	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
1742	 ED	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0xEB0010025303340086000E00A0000B0295000000D1000300EB001102AC031C
1743	 EE	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0xEB0010025303340086000E00A0000B0295000000D1000300EB001102AC031C
- stack 0: 0xE0
1744	 F0	SHR		 	 
- stack 1: 0x598
- stack 0: 0xEB0010
1745	 F1	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0xEB0010
- stack 0: 0xFFFF
1746	 F4	AND		 	 
- stack 1: 0x598
- stack 0: 0x10
1747	 F5	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x10
- stack 0: 0x1
1748	 F7	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x10
1749	 F8	PUSH2	0380	 	 
- stack 2: 0x598
- stack 1: 0x10
- stack 0: 0x380
1750	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x598
1751	 FC	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
1752	 FE	ADD		 	 
- stack 0: 0x59C
1753	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
1754	 100	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x25303340086000E00A0000B0295000000D1000300EB001102AC031C0086000D
1755	 101	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x25303340086000E00A0000B0295000000D1000300EB001102AC031C0086000D
- stack 0: 0xF0
1756	 103	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x253
1757	 104	JUMP		 	 
- stack 0: 0x59C
1758	 253	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x59C
1759	 254	PUSH2	0020	 	 
- stack 1: 0x59C
- stack 0: 0x20
1760	 257	MLOAD		 	  ;; # read from x1
- stack 1: 0x59C
- stack 0: 0x2
1761	 258	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1762	 25D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x2
1763	 25E	PUSH2	03A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x3A0
1764	 261	MLOAD		 	  ;; # read from x29
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x2
1765	 262	PUSH4	FFFFFFFF	 	 
- stack 3: 0x59C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1766	 267	AND		 	  ;; # mask to 32 bits
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x2
1767	 268	SUB		 	 
- stack 1: 0x59C
- stack 0: 0x0
1768	 269	PUSH2	0271	 ;; _neq_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 2: 0x59C
- stack 1: 0x0
- stack 0: 0x271
1769	 26C	JUMPI		 	 
- stack 0: 0x59C
1770	 26D	PUSH2	028B	 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 1: 0x59C
- stack 0: 0x28B
1771	 270	JUMP		 	 
- stack 0: 0x59C
1772	 28B	JUMPDEST		 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 0: 0x59C
1773	 28C	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
1774	 28E	ADD		 	 
- stack 0: 0x5A0
1775	 28F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
1776	 290	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000E00A0000B0295000000D1000300EB001102AC031C0086000D02EE0000
1777	 291	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000E00A0000B0295000000D1000300EB001102AC031C0086000D02EE0000
- stack 0: 0xF0
1778	 293	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86
1779	 294	JUMP		 	 
- stack 0: 0x5A0
1780	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5A0
1781	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
1782	 88	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x86000E00A0000B0295000000D1000300EB001102AC031C0086000D02EE0000
1783	 89	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x86000E00A0000B0295000000D1000300EB001102AC031C0086000D02EE0000
- stack 0: 0xE0
1784	 8B	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x86000E
1785	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x86000E
- stack 0: 0xFFFF
1786	 8F	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xE
1787	 90	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xE
- stack 0: 0x1
1788	 92	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xE
1789	 93	PUSH2	0020	 	 
- stack 2: 0x5A0
- stack 1: 0xE
- stack 0: 0x20
1790	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5A0
1791	 97	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
1792	 99	ADD		 	 
- stack 0: 0x5A4
1793	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
1794	 9B	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000B0295000000D1000300EB001102AC031C0086000D02EE000000D10000
1795	 9C	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000B0295000000D1000300EB001102AC031C0086000D02EE000000D10000
- stack 0: 0xF0
1796	 9E	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0
1797	 9F	JUMP		 	 
- stack 0: 0x5A4
1798	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5A4
1799	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
1800	 A2	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000B0295000000D1000300EB001102AC031C0086000D02EE000000D10000
1801	 A3	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000B0295000000D1000300EB001102AC031C0086000D02EE000000D10000
- stack 0: 0xE0
1802	 A5	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0xA0000B
1803	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
1804	 A9	AND		 	 
- stack 1: 0x5A4
- stack 0: 0xB
1805	 AA	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0xB
- stack 0: 0x1
1806	 AC	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0xB
1807	 AD	PUSH2	0040	 	 
- stack 2: 0x5A4
- stack 1: 0xB
- stack 0: 0x40
1808	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A4
1809	 B1	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
1810	 B3	ADD		 	 
- stack 0: 0x5A8
1811	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
1812	 B5	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x295000000D1000300EB001102AC031C0086000D02EE000000D1000000EB0012
1813	 B6	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x295000000D1000300EB001102AC031C0086000D02EE000000D1000000EB0012
- stack 0: 0xF0
1814	 B8	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x295
1815	 B9	JUMP		 	 
- stack 0: 0x5A8
1816	 295	JUMPDEST		 ;; __riscvimpl_SUB_2_1_2	  ;; # instr: sub sp,ra,sp(ignore imm)
- stack 0: 0x5A8
1817	 296	PUSH2	0040	 	 
- stack 1: 0x5A8
- stack 0: 0x40
1818	 299	MLOAD		 	  ;; # read from x2
- stack 1: 0x5A8
- stack 0: 0xB
1819	 29A	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0x20
1820	 29D	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0xE
1821	 29E	SUB		 	  ;; # SUB
- stack 1: 0x5A8
- stack 0: 0x3
1822	 29F	PUSH2	0040	 	 
- stack 2: 0x5A8
- stack 1: 0x3
- stack 0: 0x40
1823	 2A2	MSTORE		 	  ;; # store to x2
- stack 0: 0x5A8
1824	 2A3	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
1825	 2A5	ADD		 	 
- stack 0: 0x5AC
1826	 2A6	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
1827	 2A7	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xD1000300EB001102AC031C0086000D02EE000000D1000000EB001202530308
1828	 2A8	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0xD1000300EB001102AC031C0086000D02EE000000D1000000EB001202530308
- stack 0: 0xF0
1829	 2AA	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xD1
1830	 2AB	JUMP		 	 
- stack 0: 0x5AC
1831	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5AC
1832	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
1833	 D3	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0xD1000300EB001102AC031C0086000D02EE000000D1000000EB001202530308
1834	 D4	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0xD1000300EB001102AC031C0086000D02EE000000D1000000EB001202530308
- stack 0: 0xE0
1835	 D6	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0xD10003
1836	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0xD10003
- stack 0: 0xFFFF
1837	 DA	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x3
1838	 DB	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x3
- stack 0: 0x1
1839	 DD	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x3
1840	 DE	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x3
- stack 0: 0x3A0
1841	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5AC
1842	 E2	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
1843	 E4	ADD		 	 
- stack 0: 0x5B0
1844	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
1845	 E6	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xEB001102AC031C0086000D02EE000000D1000000EB00120253030803050000
1846	 E7	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0xEB001102AC031C0086000D02EE000000D1000000EB00120253030803050000
- stack 0: 0xF0
1847	 E9	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xEB
1848	 EA	JUMP		 	 
- stack 0: 0x5B0
1849	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
1850	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
1851	 ED	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0xEB001102AC031C0086000D02EE000000D1000000EB00120253030803050000
1852	 EE	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0xEB001102AC031C0086000D02EE000000D1000000EB00120253030803050000
- stack 0: 0xE0
1853	 F0	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0xEB0011
1854	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xEB0011
- stack 0: 0xFFFF
1855	 F4	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x11
1856	 F5	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x11
- stack 0: 0x1
1857	 F7	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x11
1858	 F8	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0x11
- stack 0: 0x380
1859	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
1860	 FC	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
1861	 FE	ADD		 	 
- stack 0: 0x5B4
1862	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
1863	 100	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2AC031C0086000D02EE000000D1000000EB001202530308030500000086000D
1864	 101	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2AC031C0086000D02EE000000D1000000EB001202530308030500000086000D
- stack 0: 0xF0
1865	 103	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2AC
1866	 104	JUMP		 	 
- stack 0: 0x5B4
1867	 2AC	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x5B4
1868	 2AD	PUSH2	0040	 	 
- stack 1: 0x5B4
- stack 0: 0x40
1869	 2B0	MLOAD		 	  ;; # read from x2
- stack 1: 0x5B4
- stack 0: 0x3
1870	 2B1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
1871	 2B6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x3
1872	 2B7	PUSH2	03A0	 	 
- stack 2: 0x5B4
- stack 1: 0x3
- stack 0: 0x3A0
1873	 2BA	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B4
- stack 1: 0x3
- stack 0: 0x3
1874	 2BB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
1875	 2C0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x3
- stack 0: 0x3
1876	 2C1	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
1877	 2C2	PUSH2	02CA	 ;; _neq_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x2CA
1878	 2C5	JUMPI		 	 
- stack 0: 0x5B4
1879	 2C6	PUSH2	02E4	 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 1: 0x5B4
- stack 0: 0x2E4
1880	 2C9	JUMP		 	 
- stack 0: 0x5B4
1881	 2E4	JUMPDEST		 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 0: 0x5B4
1882	 2E5	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
1883	 2E7	ADD		 	 
- stack 0: 0x5B8
1884	 2E8	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
1885	 2E9	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86000D02EE000000D1000000EB001202530308030500000086000D00A0000B
1886	 2EA	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x86000D02EE000000D1000000EB001202530308030500000086000D00A0000B
- stack 0: 0xF0
1887	 2EC	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
1888	 2ED	JUMP		 	 
- stack 0: 0x5B8
1889	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5B8
1890	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B8
- stack 0: 0x5B8
1891	 88	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86000D02EE000000D1000000EB001202530308030500000086000D00A0000B
1892	 89	PUSH1	E0	 	 
- stack 2: 0x5B8
- stack 1: 0x86000D02EE000000D1000000EB001202530308030500000086000D00A0000B
- stack 0: 0xE0
1893	 8B	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86000D
1894	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5B8
- stack 1: 0x86000D
- stack 0: 0xFFFF
1895	 8F	AND		 	 
- stack 1: 0x5B8
- stack 0: 0xD
1896	 90	PUSH1	01	 	 
- stack 2: 0x5B8
- stack 1: 0xD
- stack 0: 0x1
1897	 92	SIGNEXTEND		 	 
- stack 1: 0x5B8
- stack 0: 0xD
1898	 93	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xD
- stack 0: 0x20
1899	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
1900	 97	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
1901	 99	ADD		 	 
- stack 0: 0x5BC
1902	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
1903	 9B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x2EE000000D1000000EB001202530308030500000086000D00A0000B00BA0000
1904	 9C	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x2EE000000D1000000EB001202530308030500000086000D00A0000B00BA0000
- stack 0: 0xF0
1905	 9E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x2EE
1906	 9F	JUMP		 	 
- stack 0: 0x5BC
1907	 2EE	JUMPDEST		 ;; __riscvimpl_SUB_1_1_1	  ;; # instr: sub ra,ra,ra(ignore imm)
- stack 0: 0x5BC
1908	 2EF	PUSH2	0020	 	 
- stack 1: 0x5BC
- stack 0: 0x20
1909	 2F2	MLOAD		 	  ;; # read from x1
- stack 1: 0x5BC
- stack 0: 0xD
1910	 2F3	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xD
- stack 0: 0x20
1911	 2F6	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xD
- stack 0: 0xD
1912	 2F7	SUB		 	  ;; # SUB
- stack 1: 0x5BC
- stack 0: 0x0
1913	 2F8	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0x0
- stack 0: 0x20
1914	 2FB	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
1915	 2FC	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
1916	 2FE	ADD		 	 
- stack 0: 0x5C0
1917	 2FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
1918	 300	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD1000000EB001202530308030500000086000D00A0000B00BA0000031F0000
1919	 301	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xD1000000EB001202530308030500000086000D00A0000B00BA0000031F0000
- stack 0: 0xF0
1920	 303	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD1
1921	 304	JUMP		 	 
- stack 0: 0x5C0
1922	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5C0
1923	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
1924	 D3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xD1000000EB001202530308030500000086000D00A0000B00BA0000031F0000
1925	 D4	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0xD1000000EB001202530308030500000086000D00A0000B00BA0000031F0000
- stack 0: 0xE0
1926	 D6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xD10000
1927	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0xD10000
- stack 0: 0xFFFF
1928	 DA	AND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
1929	 DB	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x1
1930	 DD	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0x0
1931	 DE	PUSH2	03A0	 	 
- stack 2: 0x5C0
- stack 1: 0x0
- stack 0: 0x3A0
1932	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5C0
1933	 E2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
1934	 E4	ADD		 	 
- stack 0: 0x5C4
1935	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
1936	 E6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xEB001202530308030500000086000D00A0000B00BA0000031F0000033E0001
1937	 E7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xEB001202530308030500000086000D00A0000B00BA0000031F0000033E0001
- stack 0: 0xF0
1938	 E9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xEB
1939	 EA	JUMP		 	 
- stack 0: 0x5C4
1940	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C4
1941	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
1942	 ED	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xEB001202530308030500000086000D00A0000B00BA0000031F0000033E0001
1943	 EE	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xEB001202530308030500000086000D00A0000B00BA0000031F0000033E0001
- stack 0: 0xE0
1944	 F0	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xEB0012
1945	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xEB0012
- stack 0: 0xFFFF
1946	 F4	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x12
1947	 F5	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x12
- stack 0: 0x1
1948	 F7	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x12
1949	 F8	PUSH2	0380	 	 
- stack 2: 0x5C4
- stack 1: 0x12
- stack 0: 0x380
1950	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C4
1951	 FC	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
1952	 FE	ADD		 	 
- stack 0: 0x5C8
1953	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
1954	 100	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x2530308030500000086000D00A0000B00BA0000031F0000033E0001035D0002
1955	 101	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x2530308030500000086000D00A0000B00BA0000031F0000033E0001035D0002
- stack 0: 0xF0
1956	 103	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x253
1957	 104	JUMP		 	 
- stack 0: 0x5C8
1958	 253	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x5C8
1959	 254	PUSH2	0020	 	 
- stack 1: 0x5C8
- stack 0: 0x20
1960	 257	MLOAD		 	  ;; # read from x1
- stack 1: 0x5C8
- stack 0: 0x0
1961	 258	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1962	 25D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x0
1963	 25E	PUSH2	03A0	 	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x3A0
1964	 261	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x0
1965	 262	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1966	 267	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x0
1967	 268	SUB		 	 
- stack 1: 0x5C8
- stack 0: 0x0
1968	 269	PUSH2	0271	 ;; _neq_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 2: 0x5C8
- stack 1: 0x0
- stack 0: 0x271
1969	 26C	JUMPI		 	 
- stack 0: 0x5C8
1970	 26D	PUSH2	028B	 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 1: 0x5C8
- stack 0: 0x28B
1971	 270	JUMP		 	 
- stack 0: 0x5C8
1972	 28B	JUMPDEST		 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 0: 0x5C8
1973	 28C	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
1974	 28E	ADD		 	 
- stack 0: 0x5CC
1975	 28F	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
1976	 290	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x30500000086000D00A0000B00BA0000031F0000033E0001035D00020377FFE8
1977	 291	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x30500000086000D00A0000B00BA0000031F0000033E0001035D00020377FFE8
- stack 0: 0xF0
1978	 293	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x305
1979	 294	JUMP		 	 
- stack 0: 0x5CC
1980	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5CC
1981	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
1982	 307	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x30500000086000D00A0000B00BA0000031F0000033E0001035D00020377FFE8
1983	 308	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x30500000086000D00A0000B00BA0000031F0000033E0001035D00020377FFE8
- stack 0: 0xE0
1984	 30A	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3050000
1985	 30B	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3050000
- stack 0: 0xFFFF
1986	 30E	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
1987	 30F	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x1
1988	 311	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x0
1989	 312	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x0
- stack 0: 0x80
1990	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
1991	 316	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
1992	 318	ADD		 	 
- stack 0: 0x5D0
1993	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
1994	 31A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
1995	 31B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
1996	 31D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x86
1997	 31E	JUMP		 	 
- stack 0: 0x5D0
1998	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D0
1999	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2000	 88	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
2001	 89	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
2002	 8B	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D
2003	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2004	 8F	AND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
2005	 90	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x1
2006	 92	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
2007	 93	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x20
2008	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D0
2009	 97	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2010	 99	ADD		 	 
- stack 0: 0x5D4
2011	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2012	 9B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
2013	 9C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
- stack 0: 0xF0
2014	 9E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xA0
2015	 9F	JUMP		 	 
- stack 0: 0x5D4
2016	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5D4
2017	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2018	 A2	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
2019	 A3	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
- stack 0: 0xE0
2020	 A5	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B
2021	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2022	 A9	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xB
2023	 AA	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xB
- stack 0: 0x1
2024	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xB
2025	 AD	PUSH2	0040	 	 
- stack 2: 0x5D4
- stack 1: 0xB
- stack 0: 0x40
2026	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D4
2027	 B1	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2028	 B3	ADD		 	 
- stack 0: 0x5D8
2029	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2030	 B5	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xBA0000031F0000033E0001035D00020377FFE800D1000200EB001303B902DC
2031	 B6	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xBA0000031F0000033E0001035D00020377FFE800D1000200EB001303B902DC
- stack 0: 0xF0
2032	 B8	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xBA
2033	 B9	JUMP		 	 
- stack 0: 0x5D8
2034	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x5D8
2035	 BB	PUSH2	0040	 	 
- stack 1: 0x5D8
- stack 0: 0x40
2036	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D8
- stack 0: 0xB
2037	 BF	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x20
2038	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0xD
2039	 C3	SUB		 	  ;; # SUB
- stack 1: 0x5D8
- stack 0: 0x2
2040	 C4	PUSH2	0060	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x60
2041	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D8
2042	 C8	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2043	 CA	ADD		 	 
- stack 0: 0x5DC
2044	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2045	 CC	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
2046	 CD	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
- stack 0: 0xF0
2047	 CF	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31F
2048	 D0	JUMP		 	 
- stack 0: 0x5DC
2049	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5DC
2050	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2051	 321	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
2052	 322	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
- stack 0: 0xE0
2053	 324	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000
2054	 325	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2055	 328	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2056	 329	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2057	 32B	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2058	 32C	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x60
2059	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x2
2060	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x5DC
- stack 0: 0x2
2061	 331	PUSH2	00C0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xC0
2062	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x5DC
2063	 335	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2064	 337	ADD		 	 
- stack 0: 0x5E0
2065	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2066	 339	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
2067	 33A	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
- stack 0: 0xF0
2068	 33C	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x33E
2069	 33D	JUMP		 	 
- stack 0: 0x5E0
2070	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
2071	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2072	 340	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
2073	 341	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
- stack 0: 0xE0
2074	 343	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001
2075	 344	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001
- stack 0: 0xFFFF
2076	 347	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2077	 348	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2078	 34A	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2079	 34B	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2080	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x0
2081	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x1
2082	 350	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2083	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
2084	 354	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2085	 356	ADD		 	 
- stack 0: 0x5E4
2086	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2087	 358	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
2088	 359	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
- stack 0: 0xF0
2089	 35B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x35D
2090	 35C	JUMP		 	 
- stack 0: 0x5E4
2091	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
2092	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2093	 35F	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
2094	 360	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
- stack 0: 0xE0
2095	 362	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x35D0002
2096	 363	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x35D0002
- stack 0: 0xFFFF
2097	 366	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2098	 367	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
2099	 369	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2100	 36A	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2101	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
2102	 36E	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2103	 370	ADD		 	 
- stack 0: 0x5E8
2104	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2105	 372	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
2106	 373	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
- stack 0: 0xF0
2107	 375	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x377
2108	 376	JUMP		 	 
- stack 0: 0x5E8
2109	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5E8
2110	 378	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
2111	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x1
2112	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2113	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x1
2114	 382	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0xA0
2115	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
2116	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2117	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x2
2118	 38C	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x1
2119	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x5E8
- stack 1: 0x1
- stack 0: 0x395
2120	 390	JUMPI		 	 
- stack 0: 0x5E8
2121	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x5E8
2122	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2123	 397	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
2124	 398	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
- stack 0: 0xE0
2125	 39A	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x377FFE8
2126	 39B	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x377FFE8
- stack 0: 0xFFFF
2127	 39E	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFE8
2128	 39F	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xFFE8
- stack 0: 0x1
2129	 3A1	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2130	 3A2	ADD		 	 
- stack 0: 0x5D0
2131	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5D0
- stack 0: 0xFFFFFFFF
2132	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5D0
2133	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2134	 3AA	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
2135	 3AB	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
2136	 3AD	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x86
2137	 3AE	JUMP		 	 
- stack 0: 0x5D0
2138	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5D0
2139	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2140	 88	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
2141	 89	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D00A0000B00BA0000031F0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
2142	 8B	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x86000D
2143	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x86000D
- stack 0: 0xFFFF
2144	 8F	AND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
2145	 90	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x1
2146	 92	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
2147	 93	PUSH2	0020	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x20
2148	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D0
2149	 97	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2150	 99	ADD		 	 
- stack 0: 0x5D4
2151	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2152	 9B	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
2153	 9C	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
- stack 0: 0xF0
2154	 9E	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xA0
2155	 9F	JUMP		 	 
- stack 0: 0x5D4
2156	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x5D4
2157	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2158	 A2	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
2159	 A3	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B00BA0000031F0000033E0001035D00020377FFE800D1000200EB0013
- stack 0: 0xE0
2160	 A5	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0xA0000B
2161	 A6	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2162	 A9	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xB
2163	 AA	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xB
- stack 0: 0x1
2164	 AC	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xB
2165	 AD	PUSH2	0040	 	 
- stack 2: 0x5D4
- stack 1: 0xB
- stack 0: 0x40
2166	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5D4
2167	 B1	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2168	 B3	ADD		 	 
- stack 0: 0x5D8
2169	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2170	 B5	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0xBA0000031F0000033E0001035D00020377FFE800D1000200EB001303B902DC
2171	 B6	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0xBA0000031F0000033E0001035D00020377FFE800D1000200EB001303B902DC
- stack 0: 0xF0
2172	 B8	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0xBA
2173	 B9	JUMP		 	 
- stack 0: 0x5D8
2174	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x5D8
2175	 BB	PUSH2	0040	 	 
- stack 1: 0x5D8
- stack 0: 0x40
2176	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5D8
- stack 0: 0xB
2177	 BF	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0x20
2178	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5D8
- stack 1: 0xB
- stack 0: 0xD
2179	 C3	SUB		 	  ;; # SUB
- stack 1: 0x5D8
- stack 0: 0x2
2180	 C4	PUSH2	0060	 	 
- stack 2: 0x5D8
- stack 1: 0x2
- stack 0: 0x60
2181	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5D8
2182	 C8	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2183	 CA	ADD		 	 
- stack 0: 0x5DC
2184	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2185	 CC	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
2186	 CD	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
- stack 0: 0xF0
2187	 CF	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31F
2188	 D0	JUMP		 	 
- stack 0: 0x5DC
2189	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x5DC
2190	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2191	 321	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
2192	 322	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000033E0001035D00020377FFE800D1000200EB001303B902DC03050000
- stack 0: 0xE0
2193	 324	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31F0000
2194	 325	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2195	 328	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2196	 329	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x1
2197	 32B	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x0
2198	 32C	PUSH2	0060	 	 
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x60
2199	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x5DC
- stack 1: 0x0
- stack 0: 0x2
2200	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x5DC
- stack 0: 0x2
2201	 331	PUSH2	00C0	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0xC0
2202	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x5DC
2203	 335	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2204	 337	ADD		 	 
- stack 0: 0x5E0
2205	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2206	 339	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
2207	 33A	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
- stack 0: 0xF0
2208	 33C	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x33E
2209	 33D	JUMP		 	 
- stack 0: 0x5E0
2210	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5E0
2211	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2212	 340	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
2213	 341	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001303B902DC030500000086000E
- stack 0: 0xE0
2214	 343	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x33E0001
2215	 344	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x33E0001
- stack 0: 0xFFFF
2216	 347	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2217	 348	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2218	 34A	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x1
2219	 34B	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x80
2220	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x5E0
- stack 1: 0x1
- stack 0: 0x1
2221	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x5E0
- stack 0: 0x2
2222	 350	PUSH2	0080	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x80
2223	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E0
2224	 354	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2225	 356	ADD		 	 
- stack 0: 0x5E4
2226	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2227	 358	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
2228	 359	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
- stack 0: 0xF0
2229	 35B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x35D
2230	 35C	JUMP		 	 
- stack 0: 0x5E4
2231	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E4
2232	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2233	 35F	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
2234	 360	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x35D00020377FFE800D1000200EB001303B902DC030500000086000E00A0000B
- stack 0: 0xE0
2235	 362	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x35D0002
2236	 363	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x35D0002
- stack 0: 0xFFFF
2237	 366	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2238	 367	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x1
2239	 369	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x2
2240	 36A	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2241	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E4
2242	 36E	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2243	 370	ADD		 	 
- stack 0: 0x5E8
2244	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2245	 372	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
2246	 373	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x377FFE800D1000200EB001303B902DC030500000086000E00A0000B00BA0000
- stack 0: 0xF0
2247	 375	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x377
2248	 376	JUMP		 	 
- stack 0: 0x5E8
2249	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5E8
2250	 378	PUSH2	0080	 	 
- stack 1: 0x5E8
- stack 0: 0x80
2251	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E8
- stack 0: 0x2
2252	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2253	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E8
- stack 0: 0x2
2254	 382	PUSH2	00A0	 	 
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0xA0
2255	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
2256	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2257	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E8
- stack 1: 0x2
- stack 0: 0x2
2258	 38C	SUB		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2259	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x395
2260	 390	JUMPI		 	 
- stack 0: 0x5E8
2261	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x5E8
- stack 0: 0x3AF
2262	 394	JUMP		 	 
- stack 0: 0x5E8
2263	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x5E8
2264	 3B0	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2265	 3B2	ADD		 	 
- stack 0: 0x5EC
2266	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2267	 3B4	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xD1000200EB001303B902DC030500000086000E00A0000B00BA000003FB0000
2268	 3B5	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0xD1000200EB001303B902DC030500000086000E00A0000B00BA000003FB0000
- stack 0: 0xF0
2269	 3B7	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xD1
2270	 3B8	JUMP		 	 
- stack 0: 0x5EC
2271	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x5EC
2272	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2273	 D3	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0xD1000200EB001303B902DC030500000086000E00A0000B00BA000003FB0000
2274	 D4	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0xD1000200EB001303B902DC030500000086000E00A0000B00BA000003FB0000
- stack 0: 0xE0
2275	 D6	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0xD10002
2276	 D7	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0xD10002
- stack 0: 0xFFFF
2277	 DA	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2278	 DB	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x1
2279	 DD	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x2
2280	 DE	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x2
- stack 0: 0x3A0
2281	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x5EC
2282	 E2	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2283	 E4	ADD		 	 
- stack 0: 0x5F0
2284	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2285	 E6	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xEB001303B902DC030500000086000E00A0000B00BA000003FB0000031F0000
2286	 E7	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0xEB001303B902DC030500000086000E00A0000B00BA000003FB0000031F0000
- stack 0: 0xF0
2287	 E9	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xEB
2288	 EA	JUMP		 	 
- stack 0: 0x5F0
2289	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5F0
2290	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2291	 ED	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0xEB001303B902DC030500000086000E00A0000B00BA000003FB0000031F0000
2292	 EE	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0xEB001303B902DC030500000086000E00A0000B00BA000003FB0000031F0000
- stack 0: 0xE0
2293	 F0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0xEB0013
2294	 F1	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0xEB0013
- stack 0: 0xFFFF
2295	 F4	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x13
2296	 F5	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x13
- stack 0: 0x1
2297	 F7	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x13
2298	 F8	PUSH2	0380	 	 
- stack 2: 0x5F0
- stack 1: 0x13
- stack 0: 0x380
2299	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x5F0
2300	 FC	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2301	 FE	ADD		 	 
- stack 0: 0x5F4
2302	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2303	 100	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x3B902DC030500000086000E00A0000B00BA000003FB0000031F0000033E0001
2304	 101	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x3B902DC030500000086000E00A0000B00BA000003FB0000031F0000033E0001
- stack 0: 0xF0
2305	 103	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x3B9
2306	 104	JUMP		 	 
- stack 0: 0x5F4
2307	 3B9	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x5F4
2308	 3BA	PUSH2	00C0	 	 
- stack 1: 0x5F4
- stack 0: 0xC0
2309	 3BD	MLOAD		 	  ;; # read from x6
- stack 1: 0x5F4
- stack 0: 0x2
2310	 3BE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2311	 3C3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F4
- stack 0: 0x2
2312	 3C4	PUSH2	03A0	 	 
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x3A0
2313	 3C7	MLOAD		 	  ;; # read from x29
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
2314	 3C8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2315	 3CD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F4
- stack 1: 0x2
- stack 0: 0x2
2316	 3CE	SUB		 	 
- stack 1: 0x5F4
- stack 0: 0x0
2317	 3CF	PUSH2	03D7	 ;; _neq_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 2: 0x5F4
- stack 1: 0x0
- stack 0: 0x3D7
2318	 3D2	JUMPI		 	 
- stack 0: 0x5F4
2319	 3D3	PUSH2	03F1	 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 1: 0x5F4
- stack 0: 0x3F1
2320	 3D6	JUMP		 	 
- stack 0: 0x5F4
2321	 3F1	JUMPDEST		 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 0: 0x5F4
2322	 3F2	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2323	 3F4	ADD		 	 
- stack 0: 0x5F8
2324	 3F5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2325	 3F6	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x30500000086000E00A0000B00BA000003FB0000031F0000033E0001035D0002
2326	 3F7	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x30500000086000E00A0000B00BA000003FB0000031F0000033E0001035D0002
- stack 0: 0xF0
2327	 3F9	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x305
2328	 3FA	JUMP		 	 
- stack 0: 0x5F8
2329	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5F8
2330	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2331	 307	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x30500000086000E00A0000B00BA000003FB0000031F0000033E0001035D0002
2332	 308	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0x30500000086000E00A0000B00BA000003FB0000031F0000033E0001035D0002
- stack 0: 0xE0
2333	 30A	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3050000
2334	 30B	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0x3050000
- stack 0: 0xFFFF
2335	 30E	AND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2336	 30F	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x1
2337	 311	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0x0
2338	 312	PUSH2	0080	 	 
- stack 2: 0x5F8
- stack 1: 0x0
- stack 0: 0x80
2339	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x5F8
2340	 316	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2341	 318	ADD		 	 
- stack 0: 0x5FC
2342	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2343	 31A	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
2344	 31B	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
- stack 0: 0xF0
2345	 31D	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86
2346	 31E	JUMP		 	 
- stack 0: 0x5FC
2347	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5FC
2348	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2349	 88	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
2350	 89	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
- stack 0: 0xE0
2351	 8B	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E
2352	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E
- stack 0: 0xFFFF
2353	 8F	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xE
2354	 90	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xE
- stack 0: 0x1
2355	 92	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xE
2356	 93	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0xE
- stack 0: 0x20
2357	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2358	 97	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2359	 99	ADD		 	 
- stack 0: 0x600
2360	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2361	 9B	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
2362	 9C	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
2363	 9E	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
2364	 9F	JUMP		 	 
- stack 0: 0x600
2365	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x600
2366	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2367	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
2368	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
2369	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0000B
2370	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2371	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xB
2372	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x1
2373	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xB
2374	 AD	PUSH2	0040	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x40
2375	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x600
2376	 B1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2377	 B3	ADD		 	 
- stack 0: 0x604
2378	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2379	 B5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xBA000003FB0000031F0000033E0001035D00020377FFE400D1000300EB0014
2380	 B6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xBA000003FB0000031F0000033E0001035D00020377FFE400D1000300EB0014
- stack 0: 0xF0
2381	 B8	SHR		 	 
- stack 1: 0x604
- stack 0: 0xBA
2382	 B9	JUMP		 	 
- stack 0: 0x604
2383	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x604
2384	 BB	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
2385	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0xB
2386	 BF	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xB
- stack 0: 0x20
2387	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xB
- stack 0: 0xE
2388	 C3	SUB		 	  ;; # SUB
- stack 1: 0x604
- stack 0: 0x3
2389	 C4	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x3
- stack 0: 0x60
2390	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
2391	 C8	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2392	 CA	ADD		 	 
- stack 0: 0x608
2393	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2394	 CC	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
2395	 CD	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
- stack 0: 0xF0
2396	 CF	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3FB
2397	 D0	JUMP		 	 
- stack 0: 0x608
2398	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
2399	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2400	 3FD	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
2401	 3FE	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
- stack 0: 0xE0
2402	 400	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000
2403	 401	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2404	 404	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
2405	 405	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
2406	 407	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
2407	 408	POP		 	 
- stack 0: 0x608
2408	 409	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2409	 40B	ADD		 	 
- stack 0: 0x60C
2410	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2411	 40D	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
2412	 40E	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
- stack 0: 0xF0
2413	 410	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x31F
2414	 411	JUMP		 	 
- stack 0: 0x60C
2415	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x60C
2416	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2417	 321	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
2418	 322	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
- stack 0: 0xE0
2419	 324	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000
2420	 325	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2421	 328	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
2422	 329	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
2423	 32B	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
2424	 32C	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x60
2425	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3
2426	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x60C
- stack 0: 0x3
2427	 331	PUSH2	00C0	 	 
- stack 2: 0x60C
- stack 1: 0x3
- stack 0: 0xC0
2428	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x60C
2429	 335	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2430	 337	ADD		 	 
- stack 0: 0x610
2431	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2432	 339	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
2433	 33A	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
- stack 0: 0xF0
2434	 33C	SHR		 	 
- stack 1: 0x610
- stack 0: 0x33E
2435	 33D	JUMP		 	 
- stack 0: 0x610
2436	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
2437	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2438	 340	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
2439	 341	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
- stack 0: 0xE0
2440	 343	SHR		 	 
- stack 1: 0x610
- stack 0: 0x33E0001
2441	 344	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x33E0001
- stack 0: 0xFFFF
2442	 347	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
2443	 348	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
2444	 34A	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
2445	 34B	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
2446	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x0
2447	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x1
2448	 350	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
2449	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
2450	 354	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2451	 356	ADD		 	 
- stack 0: 0x614
2452	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2453	 358	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
2454	 359	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
- stack 0: 0xF0
2455	 35B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x35D
2456	 35C	JUMP		 	 
- stack 0: 0x614
2457	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
2458	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2459	 35F	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
2460	 360	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
- stack 0: 0xE0
2461	 362	SHR		 	 
- stack 1: 0x614
- stack 0: 0x35D0002
2462	 363	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x35D0002
- stack 0: 0xFFFF
2463	 366	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
2464	 367	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
2465	 369	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
2466	 36A	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
2467	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
2468	 36E	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2469	 370	ADD		 	 
- stack 0: 0x618
2470	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2471	 372	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
2472	 373	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
- stack 0: 0xF0
2473	 375	SHR		 	 
- stack 1: 0x618
- stack 0: 0x377
2474	 376	JUMP		 	 
- stack 0: 0x618
2475	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x618
2476	 378	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
2477	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x1
2478	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2479	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x1
2480	 382	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0xA0
2481	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
2482	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2483	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x2
2484	 38C	SUB		 	 
- stack 1: 0x618
- stack 0: 0x1
2485	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x395
2486	 390	JUMPI		 	 
- stack 0: 0x618
2487	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x618
2488	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2489	 397	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
2490	 398	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
- stack 0: 0xE0
2491	 39A	SHR		 	 
- stack 1: 0x618
- stack 0: 0x377FFE4
2492	 39B	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
2493	 39E	AND		 	 
- stack 1: 0x618
- stack 0: 0xFFE4
2494	 39F	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xFFE4
- stack 0: 0x1
2495	 3A1	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2496	 3A2	ADD		 	 
- stack 0: 0x5FC
2497	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5FC
- stack 0: 0xFFFFFFFF
2498	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5FC
2499	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2500	 3AA	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
2501	 3AB	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
- stack 0: 0xF0
2502	 3AD	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86
2503	 3AE	JUMP		 	 
- stack 0: 0x5FC
2504	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x5FC
2505	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2506	 88	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
2507	 89	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E00A0000B00BA000003FB0000031F0000033E0001035D00020377FFE4
- stack 0: 0xE0
2508	 8B	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x86000E
2509	 8C	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x86000E
- stack 0: 0xFFFF
2510	 8F	AND		 	 
- stack 1: 0x5FC
- stack 0: 0xE
2511	 90	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0xE
- stack 0: 0x1
2512	 92	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0xE
2513	 93	PUSH2	0020	 	 
- stack 2: 0x5FC
- stack 1: 0xE
- stack 0: 0x20
2514	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x5FC
2515	 97	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2516	 99	ADD		 	 
- stack 0: 0x600
2517	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2518	 9B	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
2519	 9C	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
2520	 9E	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0
2521	 9F	JUMP		 	 
- stack 0: 0x600
2522	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x600
2523	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2524	 A2	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
2525	 A3	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0xA0000B00BA000003FB0000031F0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
2526	 A5	SHR		 	 
- stack 1: 0x600
- stack 0: 0xA0000B
2527	 A6	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2528	 A9	AND		 	 
- stack 1: 0x600
- stack 0: 0xB
2529	 AA	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x1
2530	 AC	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0xB
2531	 AD	PUSH2	0040	 	 
- stack 2: 0x600
- stack 1: 0xB
- stack 0: 0x40
2532	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x600
2533	 B1	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2534	 B3	ADD		 	 
- stack 0: 0x604
2535	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2536	 B5	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0xBA000003FB0000031F0000033E0001035D00020377FFE400D1000300EB0014
2537	 B6	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0xBA000003FB0000031F0000033E0001035D00020377FFE400D1000300EB0014
- stack 0: 0xF0
2538	 B8	SHR		 	 
- stack 1: 0x604
- stack 0: 0xBA
2539	 B9	JUMP		 	 
- stack 0: 0x604
2540	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x604
2541	 BB	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
2542	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0xB
2543	 BF	PUSH2	0020	 	 
- stack 2: 0x604
- stack 1: 0xB
- stack 0: 0x20
2544	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x604
- stack 1: 0xB
- stack 0: 0xE
2545	 C3	SUB		 	  ;; # SUB
- stack 1: 0x604
- stack 0: 0x3
2546	 C4	PUSH2	0060	 	 
- stack 2: 0x604
- stack 1: 0x3
- stack 0: 0x60
2547	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x604
2548	 C8	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2549	 CA	ADD		 	 
- stack 0: 0x608
2550	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2551	 CC	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
2552	 CD	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
- stack 0: 0xF0
2553	 CF	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3FB
2554	 D0	JUMP		 	 
- stack 0: 0x608
2555	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x608
2556	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2557	 3FD	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
2558	 3FE	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE400D1000300EB001403B902AC
- stack 0: 0xE0
2559	 400	SHR		 	 
- stack 1: 0x608
- stack 0: 0x3FB0000
2560	 401	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2561	 404	AND		 	 
- stack 1: 0x608
- stack 0: 0x0
2562	 405	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x1
2563	 407	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x0
2564	 408	POP		 	 
- stack 0: 0x608
2565	 409	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2566	 40B	ADD		 	 
- stack 0: 0x60C
2567	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2568	 40D	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
2569	 40E	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
- stack 0: 0xF0
2570	 410	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x31F
2571	 411	JUMP		 	 
- stack 0: 0x60C
2572	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x60C
2573	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2574	 321	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
2575	 322	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000033E0001035D00020377FFE400D1000300EB001403B902AC03050000
- stack 0: 0xE0
2576	 324	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x31F0000
2577	 325	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2578	 328	AND		 	 
- stack 1: 0x60C
- stack 0: 0x0
2579	 329	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x1
2580	 32B	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x0
2581	 32C	PUSH2	0060	 	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x60
2582	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x3
2583	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x60C
- stack 0: 0x3
2584	 331	PUSH2	00C0	 	 
- stack 2: 0x60C
- stack 1: 0x3
- stack 0: 0xC0
2585	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x60C
2586	 335	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2587	 337	ADD		 	 
- stack 0: 0x610
2588	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2589	 339	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
2590	 33A	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
- stack 0: 0xF0
2591	 33C	SHR		 	 
- stack 1: 0x610
- stack 0: 0x33E
2592	 33D	JUMP		 	 
- stack 0: 0x610
2593	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x610
2594	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2595	 340	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
2596	 341	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001403B902AC030500000086000F
- stack 0: 0xE0
2597	 343	SHR		 	 
- stack 1: 0x610
- stack 0: 0x33E0001
2598	 344	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x33E0001
- stack 0: 0xFFFF
2599	 347	AND		 	 
- stack 1: 0x610
- stack 0: 0x1
2600	 348	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
2601	 34A	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0x1
2602	 34B	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x80
2603	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x610
- stack 1: 0x1
- stack 0: 0x1
2604	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x610
- stack 0: 0x2
2605	 350	PUSH2	0080	 	 
- stack 2: 0x610
- stack 1: 0x2
- stack 0: 0x80
2606	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x610
2607	 354	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2608	 356	ADD		 	 
- stack 0: 0x614
2609	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2610	 358	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
2611	 359	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
- stack 0: 0xF0
2612	 35B	SHR		 	 
- stack 1: 0x614
- stack 0: 0x35D
2613	 35C	JUMP		 	 
- stack 0: 0x614
2614	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x614
2615	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
2616	 35F	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
2617	 360	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x35D00020377FFE400D1000300EB001403B902AC030500000086000F00A0000B
- stack 0: 0xE0
2618	 362	SHR		 	 
- stack 1: 0x614
- stack 0: 0x35D0002
2619	 363	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x35D0002
- stack 0: 0xFFFF
2620	 366	AND		 	 
- stack 1: 0x614
- stack 0: 0x2
2621	 367	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0x1
2622	 369	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0x2
2623	 36A	PUSH2	00A0	 	 
- stack 2: 0x614
- stack 1: 0x2
- stack 0: 0xA0
2624	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x614
2625	 36E	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2626	 370	ADD		 	 
- stack 0: 0x618
2627	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2628	 372	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
2629	 373	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x377FFE400D1000300EB001403B902AC030500000086000F00A0000B00BA0000
- stack 0: 0xF0
2630	 375	SHR		 	 
- stack 1: 0x618
- stack 0: 0x377
2631	 376	JUMP		 	 
- stack 0: 0x618
2632	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x618
2633	 378	PUSH2	0080	 	 
- stack 1: 0x618
- stack 0: 0x80
2634	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x618
- stack 0: 0x2
2635	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2636	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x618
- stack 0: 0x2
2637	 382	PUSH2	00A0	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0xA0
2638	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
2639	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x618
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2640	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x2
2641	 38C	SUB		 	 
- stack 1: 0x618
- stack 0: 0x0
2642	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x395
2643	 390	JUMPI		 	 
- stack 0: 0x618
2644	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x618
- stack 0: 0x3AF
2645	 394	JUMP		 	 
- stack 0: 0x618
2646	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x618
2647	 3B0	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2648	 3B2	ADD		 	 
- stack 0: 0x61C
2649	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2650	 3B4	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD1000300EB001403B902AC030500000086000F00A0000B00BA000003FB0000
2651	 3B5	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0xD1000300EB001403B902AC030500000086000F00A0000B00BA000003FB0000
- stack 0: 0xF0
2652	 3B7	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD1
2653	 3B8	JUMP		 	 
- stack 0: 0x61C
2654	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x61C
2655	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2656	 D3	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0xD1000300EB001403B902AC030500000086000F00A0000B00BA000003FB0000
2657	 D4	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0xD1000300EB001403B902AC030500000086000F00A0000B00BA000003FB0000
- stack 0: 0xE0
2658	 D6	SHR		 	 
- stack 1: 0x61C
- stack 0: 0xD10003
2659	 D7	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0xD10003
- stack 0: 0xFFFF
2660	 DA	AND		 	 
- stack 1: 0x61C
- stack 0: 0x3
2661	 DB	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x3
- stack 0: 0x1
2662	 DD	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x3
2663	 DE	PUSH2	03A0	 	 
- stack 2: 0x61C
- stack 1: 0x3
- stack 0: 0x3A0
2664	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x61C
2665	 E2	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2666	 E4	ADD		 	 
- stack 0: 0x620
2667	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2668	 E6	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xEB001403B902AC030500000086000F00A0000B00BA000003FB000003FB0000
2669	 E7	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0xEB001403B902AC030500000086000F00A0000B00BA000003FB000003FB0000
- stack 0: 0xF0
2670	 E9	SHR		 	 
- stack 1: 0x620
- stack 0: 0xEB
2671	 EA	JUMP		 	 
- stack 0: 0x620
2672	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x620
2673	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2674	 ED	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0xEB001403B902AC030500000086000F00A0000B00BA000003FB000003FB0000
2675	 EE	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0xEB001403B902AC030500000086000F00A0000B00BA000003FB000003FB0000
- stack 0: 0xE0
2676	 F0	SHR		 	 
- stack 1: 0x620
- stack 0: 0xEB0014
2677	 F1	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0xEB0014
- stack 0: 0xFFFF
2678	 F4	AND		 	 
- stack 1: 0x620
- stack 0: 0x14
2679	 F5	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x14
- stack 0: 0x1
2680	 F7	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x14
2681	 F8	PUSH2	0380	 	 
- stack 2: 0x620
- stack 1: 0x14
- stack 0: 0x380
2682	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x620
2683	 FC	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
2684	 FE	ADD		 	 
- stack 0: 0x624
2685	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
2686	 100	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x3B902AC030500000086000F00A0000B00BA000003FB000003FB0000031F0000
2687	 101	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x3B902AC030500000086000F00A0000B00BA000003FB000003FB0000031F0000
- stack 0: 0xF0
2688	 103	SHR		 	 
- stack 1: 0x624
- stack 0: 0x3B9
2689	 104	JUMP		 	 
- stack 0: 0x624
2690	 3B9	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x624
2691	 3BA	PUSH2	00C0	 	 
- stack 1: 0x624
- stack 0: 0xC0
2692	 3BD	MLOAD		 	  ;; # read from x6
- stack 1: 0x624
- stack 0: 0x3
2693	 3BE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x624
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
2694	 3C3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x624
- stack 0: 0x3
2695	 3C4	PUSH2	03A0	 	 
- stack 2: 0x624
- stack 1: 0x3
- stack 0: 0x3A0
2696	 3C7	MLOAD		 	  ;; # read from x29
- stack 2: 0x624
- stack 1: 0x3
- stack 0: 0x3
2697	 3C8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x624
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
2698	 3CD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x624
- stack 1: 0x3
- stack 0: 0x3
2699	 3CE	SUB		 	 
- stack 1: 0x624
- stack 0: 0x0
2700	 3CF	PUSH2	03D7	 ;; _neq_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 2: 0x624
- stack 1: 0x0
- stack 0: 0x3D7
2701	 3D2	JUMPI		 	 
- stack 0: 0x624
2702	 3D3	PUSH2	03F1	 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 1: 0x624
- stack 0: 0x3F1
2703	 3D6	JUMP		 	 
- stack 0: 0x624
2704	 3F1	JUMPDEST		 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 0: 0x624
2705	 3F2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
2706	 3F4	ADD		 	 
- stack 0: 0x628
2707	 3F5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
2708	 3F6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x30500000086000F00A0000B00BA000003FB000003FB0000031F0000033E0001
2709	 3F7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x30500000086000F00A0000B00BA000003FB000003FB0000031F0000033E0001
- stack 0: 0xF0
2710	 3F9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x305
2711	 3FA	JUMP		 	 
- stack 0: 0x628
2712	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x628
2713	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
2714	 307	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x30500000086000F00A0000B00BA000003FB000003FB0000031F0000033E0001
2715	 308	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x30500000086000F00A0000B00BA000003FB000003FB0000031F0000033E0001
- stack 0: 0xE0
2716	 30A	SHR		 	 
- stack 1: 0x628
- stack 0: 0x3050000
2717	 30B	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x3050000
- stack 0: 0xFFFF
2718	 30E	AND		 	 
- stack 1: 0x628
- stack 0: 0x0
2719	 30F	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1
2720	 311	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x0
2721	 312	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x80
2722	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
2723	 316	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
2724	 318	ADD		 	 
- stack 0: 0x62C
2725	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2726	 31A	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
2727	 31B	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
- stack 0: 0xF0
2728	 31D	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86
2729	 31E	JUMP		 	 
- stack 0: 0x62C
2730	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x62C
2731	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2732	 88	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
2733	 89	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
- stack 0: 0xE0
2734	 8B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86000F
2735	 8C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x86000F
- stack 0: 0xFFFF
2736	 8F	AND		 	 
- stack 1: 0x62C
- stack 0: 0xF
2737	 90	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xF
- stack 0: 0x1
2738	 92	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xF
2739	 93	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xF
- stack 0: 0x20
2740	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
2741	 97	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2742	 99	ADD		 	 
- stack 0: 0x630
2743	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2744	 9B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
2745	 9C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
- stack 0: 0xF0
2746	 9E	SHR		 	 
- stack 1: 0x630
- stack 0: 0xA0
2747	 9F	JUMP		 	 
- stack 0: 0x630
2748	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x630
2749	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2750	 A2	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
2751	 A3	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
- stack 0: 0xE0
2752	 A5	SHR		 	 
- stack 1: 0x630
- stack 0: 0xA0000B
2753	 A6	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2754	 A9	AND		 	 
- stack 1: 0x630
- stack 0: 0xB
2755	 AA	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xB
- stack 0: 0x1
2756	 AC	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xB
2757	 AD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xB
- stack 0: 0x40
2758	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
2759	 B1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2760	 B3	ADD		 	 
- stack 0: 0x634
2761	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2762	 B5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xBA000003FB000003FB0000031F0000033E0001035D00020377FFE000D10004
2763	 B6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xBA000003FB000003FB0000031F0000033E0001035D00020377FFE000D10004
- stack 0: 0xF0
2764	 B8	SHR		 	 
- stack 1: 0x634
- stack 0: 0xBA
2765	 B9	JUMP		 	 
- stack 0: 0x634
2766	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x634
2767	 BB	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
2768	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0xB
2769	 BF	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xB
- stack 0: 0x20
2770	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x634
- stack 1: 0xB
- stack 0: 0xF
2771	 C3	SUB		 	  ;; # SUB
- stack 1: 0x634
- stack 0: 0x4
2772	 C4	PUSH2	0060	 	 
- stack 2: 0x634
- stack 1: 0x4
- stack 0: 0x60
2773	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x634
2774	 C8	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2775	 CA	ADD		 	 
- stack 0: 0x638
2776	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2777	 CC	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
2778	 CD	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
- stack 0: 0xF0
2779	 CF	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3FB
2780	 D0	JUMP		 	 
- stack 0: 0x638
2781	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
2782	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
2783	 3FD	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
2784	 3FE	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
- stack 0: 0xE0
2785	 400	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3FB0000
2786	 401	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2787	 404	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
2788	 405	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
2789	 407	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
2790	 408	POP		 	 
- stack 0: 0x638
2791	 409	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2792	 40B	ADD		 	 
- stack 0: 0x63C
2793	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2794	 40D	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
2795	 40E	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
- stack 0: 0xF0
2796	 410	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3FB
2797	 411	JUMP		 	 
- stack 0: 0x63C
2798	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
2799	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2800	 3FD	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
2801	 3FE	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
- stack 0: 0xE0
2802	 400	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000
2803	 401	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2804	 404	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
2805	 405	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
2806	 407	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
2807	 408	POP		 	 
- stack 0: 0x63C
2808	 409	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2809	 40B	ADD		 	 
- stack 0: 0x640
2810	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2811	 40D	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
2812	 40E	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
- stack 0: 0xF0
2813	 410	SHR		 	 
- stack 1: 0x640
- stack 0: 0x31F
2814	 411	JUMP		 	 
- stack 0: 0x640
2815	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x640
2816	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2817	 321	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
2818	 322	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
- stack 0: 0xE0
2819	 324	SHR		 	 
- stack 1: 0x640
- stack 0: 0x31F0000
2820	 325	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2821	 328	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
2822	 329	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
2823	 32B	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
2824	 32C	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x60
2825	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x4
2826	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x640
- stack 0: 0x4
2827	 331	PUSH2	00C0	 	 
- stack 2: 0x640
- stack 1: 0x4
- stack 0: 0xC0
2828	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x640
2829	 335	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
2830	 337	ADD		 	 
- stack 0: 0x644
2831	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
2832	 339	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
2833	 33A	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
- stack 0: 0xF0
2834	 33C	SHR		 	 
- stack 1: 0x644
- stack 0: 0x33E
2835	 33D	JUMP		 	 
- stack 0: 0x644
2836	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
2837	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
2838	 340	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
2839	 341	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
- stack 0: 0xE0
2840	 343	SHR		 	 
- stack 1: 0x644
- stack 0: 0x33E0001
2841	 344	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x33E0001
- stack 0: 0xFFFF
2842	 347	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
2843	 348	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
2844	 34A	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
2845	 34B	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
2846	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x0
2847	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x1
2848	 350	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
2849	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
2850	 354	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
2851	 356	ADD		 	 
- stack 0: 0x648
2852	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
2853	 358	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
2854	 359	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
- stack 0: 0xF0
2855	 35B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x35D
2856	 35C	JUMP		 	 
- stack 0: 0x648
2857	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
2858	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
2859	 35F	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
2860	 360	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
- stack 0: 0xE0
2861	 362	SHR		 	 
- stack 1: 0x648
- stack 0: 0x35D0002
2862	 363	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x35D0002
- stack 0: 0xFFFF
2863	 366	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
2864	 367	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
2865	 369	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
2866	 36A	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
2867	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
2868	 36E	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
2869	 370	ADD		 	 
- stack 0: 0x64C
2870	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
2871	 372	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
2872	 373	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
- stack 0: 0xF0
2873	 375	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x377
2874	 376	JUMP		 	 
- stack 0: 0x64C
2875	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x64C
2876	 378	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
2877	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x1
2878	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2879	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x1
2880	 382	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0xA0
2881	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
2882	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2883	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x2
2884	 38C	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x1
2885	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x64C
- stack 1: 0x1
- stack 0: 0x395
2886	 390	JUMPI		 	 
- stack 0: 0x64C
2887	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x64C
2888	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x64C
- stack 0: 0x64C
2889	 397	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
2890	 398	PUSH1	E0	 	 
- stack 2: 0x64C
- stack 1: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
- stack 0: 0xE0
2891	 39A	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x377FFE0
2892	 39B	PUSH2	FFFF	 	 
- stack 2: 0x64C
- stack 1: 0x377FFE0
- stack 0: 0xFFFF
2893	 39E	AND		 	 
- stack 1: 0x64C
- stack 0: 0xFFE0
2894	 39F	PUSH1	01	 	 
- stack 2: 0x64C
- stack 1: 0xFFE0
- stack 0: 0x1
2895	 3A1	SIGNEXTEND		 	 
- stack 1: 0x64C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2896	 3A2	ADD		 	 
- stack 0: 0x62C
2897	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFF
2898	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x62C
2899	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
2900	 3AA	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
2901	 3AB	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
- stack 0: 0xF0
2902	 3AD	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86
2903	 3AE	JUMP		 	 
- stack 0: 0x62C
2904	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x62C
2905	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x62C
- stack 0: 0x62C
2906	 88	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
2907	 89	PUSH1	E0	 	 
- stack 2: 0x62C
- stack 1: 0x86000F00A0000B00BA000003FB000003FB0000031F0000033E0001035D0002
- stack 0: 0xE0
2908	 8B	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x86000F
2909	 8C	PUSH2	FFFF	 	 
- stack 2: 0x62C
- stack 1: 0x86000F
- stack 0: 0xFFFF
2910	 8F	AND		 	 
- stack 1: 0x62C
- stack 0: 0xF
2911	 90	PUSH1	01	 	 
- stack 2: 0x62C
- stack 1: 0xF
- stack 0: 0x1
2912	 92	SIGNEXTEND		 	 
- stack 1: 0x62C
- stack 0: 0xF
2913	 93	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xF
- stack 0: 0x20
2914	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
2915	 97	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
2916	 99	ADD		 	 
- stack 0: 0x630
2917	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
2918	 9B	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
2919	 9C	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
- stack 0: 0xF0
2920	 9E	SHR		 	 
- stack 1: 0x630
- stack 0: 0xA0
2921	 9F	JUMP		 	 
- stack 0: 0x630
2922	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x630
2923	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
2924	 A2	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
2925	 A3	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xA0000B00BA000003FB000003FB0000031F0000033E0001035D00020377FFE0
- stack 0: 0xE0
2926	 A5	SHR		 	 
- stack 1: 0x630
- stack 0: 0xA0000B
2927	 A6	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xA0000B
- stack 0: 0xFFFF
2928	 A9	AND		 	 
- stack 1: 0x630
- stack 0: 0xB
2929	 AA	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xB
- stack 0: 0x1
2930	 AC	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xB
2931	 AD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xB
- stack 0: 0x40
2932	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
2933	 B1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
2934	 B3	ADD		 	 
- stack 0: 0x634
2935	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
2936	 B5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0xBA000003FB000003FB0000031F0000033E0001035D00020377FFE000D10004
2937	 B6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0xBA000003FB000003FB0000031F0000033E0001035D00020377FFE000D10004
- stack 0: 0xF0
2938	 B8	SHR		 	 
- stack 1: 0x634
- stack 0: 0xBA
2939	 B9	JUMP		 	 
- stack 0: 0x634
2940	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x634
2941	 BB	PUSH2	0040	 	 
- stack 1: 0x634
- stack 0: 0x40
2942	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x634
- stack 0: 0xB
2943	 BF	PUSH2	0020	 	 
- stack 2: 0x634
- stack 1: 0xB
- stack 0: 0x20
2944	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x634
- stack 1: 0xB
- stack 0: 0xF
2945	 C3	SUB		 	  ;; # SUB
- stack 1: 0x634
- stack 0: 0x4
2946	 C4	PUSH2	0060	 	 
- stack 2: 0x634
- stack 1: 0x4
- stack 0: 0x60
2947	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x634
2948	 C8	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
2949	 CA	ADD		 	 
- stack 0: 0x638
2950	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
2951	 CC	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
2952	 CD	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
- stack 0: 0xF0
2953	 CF	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3FB
2954	 D0	JUMP		 	 
- stack 0: 0x638
2955	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
2956	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
2957	 3FD	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
2958	 3FE	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3FB000003FB0000031F0000033E0001035D00020377FFE000D1000400EB0015
- stack 0: 0xE0
2959	 400	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3FB0000
2960	 401	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2961	 404	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
2962	 405	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
2963	 407	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
2964	 408	POP		 	 
- stack 0: 0x638
2965	 409	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
2966	 40B	ADD		 	 
- stack 0: 0x63C
2967	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
2968	 40D	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
2969	 40E	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
- stack 0: 0xF0
2970	 410	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3FB
2971	 411	JUMP		 	 
- stack 0: 0x63C
2972	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
2973	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
2974	 3FD	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
2975	 3FE	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000031F0000033E0001035D00020377FFE000D1000400EB001503B90278
- stack 0: 0xE0
2976	 400	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x3FB0000
2977	 401	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
2978	 404	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
2979	 405	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
2980	 407	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
2981	 408	POP		 	 
- stack 0: 0x63C
2982	 409	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
2983	 40B	ADD		 	 
- stack 0: 0x640
2984	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
2985	 40D	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
2986	 40E	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
- stack 0: 0xF0
2987	 410	SHR		 	 
- stack 1: 0x640
- stack 0: 0x31F
2988	 411	JUMP		 	 
- stack 0: 0x640
2989	 31F	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x640
2990	 320	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
2991	 321	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
2992	 322	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x31F0000033E0001035D00020377FFE000D1000400EB001503B9027803050000
- stack 0: 0xE0
2993	 324	SHR		 	 
- stack 1: 0x640
- stack 0: 0x31F0000
2994	 325	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x31F0000
- stack 0: 0xFFFF
2995	 328	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
2996	 329	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
2997	 32B	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
2998	 32C	PUSH2	0060	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x60
2999	 32F	MLOAD		 	  ;; # read from x3
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x4
3000	 330	ADD		 	  ;; # ADDI 3
- stack 1: 0x640
- stack 0: 0x4
3001	 331	PUSH2	00C0	 	 
- stack 2: 0x640
- stack 1: 0x4
- stack 0: 0xC0
3002	 334	MSTORE		 	  ;; # store to x6
- stack 0: 0x640
3003	 335	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3004	 337	ADD		 	 
- stack 0: 0x644
3005	 338	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3006	 339	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
3007	 33A	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
- stack 0: 0xF0
3008	 33C	SHR		 	 
- stack 1: 0x644
- stack 0: 0x33E
3009	 33D	JUMP		 	 
- stack 0: 0x644
3010	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x644
3011	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3012	 340	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
3013	 341	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x33E0001035D00020377FFE000D1000400EB001503B90278030500000086000D
- stack 0: 0xE0
3014	 343	SHR		 	 
- stack 1: 0x644
- stack 0: 0x33E0001
3015	 344	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3016	 347	AND		 	 
- stack 1: 0x644
- stack 0: 0x1
3017	 348	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3018	 34A	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x1
3019	 34B	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x80
3020	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x644
- stack 1: 0x1
- stack 0: 0x1
3021	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x644
- stack 0: 0x2
3022	 350	PUSH2	0080	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x80
3023	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x644
3024	 354	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3025	 356	ADD		 	 
- stack 0: 0x648
3026	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3027	 358	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
3028	 359	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
- stack 0: 0xF0
3029	 35B	SHR		 	 
- stack 1: 0x648
- stack 0: 0x35D
3030	 35C	JUMP		 	 
- stack 0: 0x648
3031	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x648
3032	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3033	 35F	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
3034	 360	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x35D00020377FFE000D1000400EB001503B90278030500000086000D00A0000B
- stack 0: 0xE0
3035	 362	SHR		 	 
- stack 1: 0x648
- stack 0: 0x35D0002
3036	 363	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3037	 366	AND		 	 
- stack 1: 0x648
- stack 0: 0x2
3038	 367	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x1
3039	 369	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0x2
3040	 36A	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3041	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x648
3042	 36E	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3043	 370	ADD		 	 
- stack 0: 0x64C
3044	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3045	 372	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
3046	 373	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x377FFE000D1000400EB001503B90278030500000086000D00A0000B00BA0000
- stack 0: 0xF0
3047	 375	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x377
3048	 376	JUMP		 	 
- stack 0: 0x64C
3049	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x64C
3050	 378	PUSH2	0080	 	 
- stack 1: 0x64C
- stack 0: 0x80
3051	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x64C
- stack 0: 0x2
3052	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3053	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x64C
- stack 0: 0x2
3054	 382	PUSH2	00A0	 	 
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0xA0
3055	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
3056	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x64C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3057	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x64C
- stack 1: 0x2
- stack 0: 0x2
3058	 38C	SUB		 	 
- stack 1: 0x64C
- stack 0: 0x0
3059	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x64C
- stack 1: 0x0
- stack 0: 0x395
3060	 390	JUMPI		 	 
- stack 0: 0x64C
3061	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x64C
- stack 0: 0x3AF
3062	 394	JUMP		 	 
- stack 0: 0x64C
3063	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x64C
3064	 3B0	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3065	 3B2	ADD		 	 
- stack 0: 0x650
3066	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3067	 3B4	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xD1000400EB001503B90278030500000086000D00A0000B00BA0000033E0001
3068	 3B5	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0xD1000400EB001503B90278030500000086000D00A0000B00BA0000033E0001
- stack 0: 0xF0
3069	 3B7	SHR		 	 
- stack 1: 0x650
- stack 0: 0xD1
3070	 3B8	JUMP		 	 
- stack 0: 0x650
3071	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x650
3072	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3073	 D3	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0xD1000400EB001503B90278030500000086000D00A0000B00BA0000033E0001
3074	 D4	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0xD1000400EB001503B90278030500000086000D00A0000B00BA0000033E0001
- stack 0: 0xE0
3075	 D6	SHR		 	 
- stack 1: 0x650
- stack 0: 0xD10004
3076	 D7	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0xD10004
- stack 0: 0xFFFF
3077	 DA	AND		 	 
- stack 1: 0x650
- stack 0: 0x4
3078	 DB	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0x4
- stack 0: 0x1
3079	 DD	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0x4
3080	 DE	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0x4
- stack 0: 0x3A0
3081	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3082	 E2	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3083	 E4	ADD		 	 
- stack 0: 0x654
3084	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3085	 E6	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xEB001503B90278030500000086000D00A0000B00BA0000033E0001035D0002
3086	 E7	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0xEB001503B90278030500000086000D00A0000B00BA0000033E0001035D0002
- stack 0: 0xF0
3087	 E9	SHR		 	 
- stack 1: 0x654
- stack 0: 0xEB
3088	 EA	JUMP		 	 
- stack 0: 0x654
3089	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
3090	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3091	 ED	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0xEB001503B90278030500000086000D00A0000B00BA0000033E0001035D0002
3092	 EE	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0xEB001503B90278030500000086000D00A0000B00BA0000033E0001035D0002
- stack 0: 0xE0
3093	 F0	SHR		 	 
- stack 1: 0x654
- stack 0: 0xEB0015
3094	 F1	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0xEB0015
- stack 0: 0xFFFF
3095	 F4	AND		 	 
- stack 1: 0x654
- stack 0: 0x15
3096	 F5	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0x15
- stack 0: 0x1
3097	 F7	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0x15
3098	 F8	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0x15
- stack 0: 0x380
3099	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
3100	 FC	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3101	 FE	ADD		 	 
- stack 0: 0x658
3102	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3103	 100	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x3B90278030500000086000D00A0000B00BA0000033E0001035D00020377FFEC
3104	 101	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x3B90278030500000086000D00A0000B00BA0000033E0001035D00020377FFEC
- stack 0: 0xF0
3105	 103	SHR		 	 
- stack 1: 0x658
- stack 0: 0x3B9
3106	 104	JUMP		 	 
- stack 0: 0x658
3107	 3B9	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,2dc(ignore imm)
- stack 0: 0x658
3108	 3BA	PUSH2	00C0	 	 
- stack 1: 0x658
- stack 0: 0xC0
3109	 3BD	MLOAD		 	  ;; # read from x6
- stack 1: 0x658
- stack 0: 0x4
3110	 3BE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
3111	 3C3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0x4
3112	 3C4	PUSH2	03A0	 	 
- stack 2: 0x658
- stack 1: 0x4
- stack 0: 0x3A0
3113	 3C7	MLOAD		 	  ;; # read from x29
- stack 2: 0x658
- stack 1: 0x4
- stack 0: 0x4
3114	 3C8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
3115	 3CD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0x4
- stack 0: 0x4
3116	 3CE	SUB		 	 
- stack 1: 0x658
- stack 0: 0x0
3117	 3CF	PUSH2	03D7	 ;; _neq_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x3D7
3118	 3D2	JUMPI		 	 
- stack 0: 0x658
3119	 3D3	PUSH2	03F1	 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 1: 0x658
- stack 0: 0x3F1
3120	 3D6	JUMP		 	 
- stack 0: 0x658
3121	 3F1	JUMPDEST		 ;; _neq_after_9fc0954c41ea14346b2cef92a8c3e05d7f8e7369204963b97e1dd67a5d73a1cf	 
- stack 0: 0x658
3122	 3F2	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3123	 3F4	ADD		 	 
- stack 0: 0x65C
3124	 3F5	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3125	 3F6	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x30500000086000D00A0000B00BA0000033E0001035D00020377FFEC00D10002
3126	 3F7	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x30500000086000D00A0000B00BA0000033E0001035D00020377FFEC00D10002
- stack 0: 0xF0
3127	 3F9	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x305
3128	 3FA	JUMP		 	 
- stack 0: 0x65C
3129	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x65C
3130	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3131	 307	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x30500000086000D00A0000B00BA0000033E0001035D00020377FFEC00D10002
3132	 308	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x30500000086000D00A0000B00BA0000033E0001035D00020377FFEC00D10002
- stack 0: 0xE0
3133	 30A	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x3050000
3134	 30B	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x3050000
- stack 0: 0xFFFF
3135	 30E	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3136	 30F	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
3137	 311	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3138	 312	PUSH2	0080	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x80
3139	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x65C
3140	 316	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3141	 318	ADD		 	 
- stack 0: 0x660
3142	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3143	 31A	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
3144	 31B	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
- stack 0: 0xF0
3145	 31D	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3146	 31E	JUMP		 	 
- stack 0: 0x660
3147	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x660
3148	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3149	 88	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
3150	 89	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
- stack 0: 0xE0
3151	 8B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86000D
3152	 8C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x86000D
- stack 0: 0xFFFF
3153	 8F	AND		 	 
- stack 1: 0x660
- stack 0: 0xD
3154	 90	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xD
- stack 0: 0x1
3155	 92	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xD
3156	 93	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xD
- stack 0: 0x20
3157	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3158	 97	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3159	 99	ADD		 	 
- stack 0: 0x664
3160	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3161	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
3162	 9C	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
- stack 0: 0xF0
3163	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0xA0
3164	 9F	JUMP		 	 
- stack 0: 0x664
3165	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x664
3166	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3167	 A2	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
3168	 A3	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
- stack 0: 0xE0
3169	 A5	SHR		 	 
- stack 1: 0x664
- stack 0: 0xA0000B
3170	 A6	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3171	 A9	AND		 	 
- stack 1: 0x664
- stack 0: 0xB
3172	 AA	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xB
- stack 0: 0x1
3173	 AC	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xB
3174	 AD	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0xB
- stack 0: 0x40
3175	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
3176	 B1	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3177	 B3	ADD		 	 
- stack 0: 0x668
3178	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3179	 B5	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xBA0000033E0001035D00020377FFEC00D1000200EB00160105025003050000
3180	 B6	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xBA0000033E0001035D00020377FFEC00D1000200EB00160105025003050000
- stack 0: 0xF0
3181	 B8	SHR		 	 
- stack 1: 0x668
- stack 0: 0xBA
3182	 B9	JUMP		 	 
- stack 0: 0x668
3183	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x668
3184	 BB	PUSH2	0040	 	 
- stack 1: 0x668
- stack 0: 0x40
3185	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x668
- stack 0: 0xB
3186	 BF	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xB
- stack 0: 0x20
3187	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xB
- stack 0: 0xD
3188	 C3	SUB		 	  ;; # SUB
- stack 1: 0x668
- stack 0: 0x2
3189	 C4	PUSH2	0060	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x60
3190	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x668
3191	 C8	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3192	 CA	ADD		 	 
- stack 0: 0x66C
3193	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3194	 CC	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
3195	 CD	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
- stack 0: 0xF0
3196	 CF	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x33E
3197	 D0	JUMP		 	 
- stack 0: 0x66C
3198	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
3199	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3200	 340	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
3201	 341	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
- stack 0: 0xE0
3202	 343	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001
3203	 344	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3204	 347	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
3205	 348	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
3206	 34A	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
3207	 34B	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
3208	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x0
3209	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x1
3210	 350	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
3211	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
3212	 354	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3213	 356	ADD		 	 
- stack 0: 0x670
3214	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3215	 358	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
3216	 359	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
- stack 0: 0xF0
3217	 35B	SHR		 	 
- stack 1: 0x670
- stack 0: 0x35D
3218	 35C	JUMP		 	 
- stack 0: 0x670
3219	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
3220	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3221	 35F	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
3222	 360	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
- stack 0: 0xE0
3223	 362	SHR		 	 
- stack 1: 0x670
- stack 0: 0x35D0002
3224	 363	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3225	 366	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
3226	 367	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
3227	 369	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
3228	 36A	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
3229	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
3230	 36E	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3231	 370	ADD		 	 
- stack 0: 0x674
3232	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3233	 372	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
3234	 373	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
- stack 0: 0xF0
3235	 375	SHR		 	 
- stack 1: 0x674
- stack 0: 0x377
3236	 376	JUMP		 	 
- stack 0: 0x674
3237	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x674
3238	 378	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
3239	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x1
3240	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3241	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x1
3242	 382	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0xA0
3243	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
3244	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3245	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x2
3246	 38C	SUB		 	 
- stack 1: 0x674
- stack 0: 0x1
3247	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x674
- stack 1: 0x1
- stack 0: 0x395
3248	 390	JUMPI		 	 
- stack 0: 0x674
3249	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x674
3250	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3251	 397	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
3252	 398	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
- stack 0: 0xE0
3253	 39A	SHR		 	 
- stack 1: 0x674
- stack 0: 0x377FFEC
3254	 39B	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x377FFEC
- stack 0: 0xFFFF
3255	 39E	AND		 	 
- stack 1: 0x674
- stack 0: 0xFFEC
3256	 39F	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0xFFEC
- stack 0: 0x1
3257	 3A1	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
3258	 3A2	ADD		 	 
- stack 0: 0x660
3259	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFF
3260	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x660
3261	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3262	 3AA	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
3263	 3AB	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
- stack 0: 0xF0
3264	 3AD	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3265	 3AE	JUMP		 	 
- stack 0: 0x660
3266	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x660
3267	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3268	 88	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
3269	 89	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x86000D00A0000B00BA0000033E0001035D00020377FFEC00D1000200EB0016
- stack 0: 0xE0
3270	 8B	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86000D
3271	 8C	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x86000D
- stack 0: 0xFFFF
3272	 8F	AND		 	 
- stack 1: 0x660
- stack 0: 0xD
3273	 90	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xD
- stack 0: 0x1
3274	 92	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xD
3275	 93	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xD
- stack 0: 0x20
3276	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3277	 97	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3278	 99	ADD		 	 
- stack 0: 0x664
3279	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3280	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
3281	 9C	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
- stack 0: 0xF0
3282	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0xA0
3283	 9F	JUMP		 	 
- stack 0: 0x664
3284	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x664
3285	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3286	 A2	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
3287	 A3	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFEC00D1000200EB001601050250
- stack 0: 0xE0
3288	 A5	SHR		 	 
- stack 1: 0x664
- stack 0: 0xA0000B
3289	 A6	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3290	 A9	AND		 	 
- stack 1: 0x664
- stack 0: 0xB
3291	 AA	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xB
- stack 0: 0x1
3292	 AC	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xB
3293	 AD	PUSH2	0040	 	 
- stack 2: 0x664
- stack 1: 0xB
- stack 0: 0x40
3294	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x664
3295	 B1	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3296	 B3	ADD		 	 
- stack 0: 0x668
3297	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3298	 B5	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0xBA0000033E0001035D00020377FFEC00D1000200EB00160105025003050000
3299	 B6	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0xBA0000033E0001035D00020377FFEC00D1000200EB00160105025003050000
- stack 0: 0xF0
3300	 B8	SHR		 	 
- stack 1: 0x668
- stack 0: 0xBA
3301	 B9	JUMP		 	 
- stack 0: 0x668
3302	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x668
3303	 BB	PUSH2	0040	 	 
- stack 1: 0x668
- stack 0: 0x40
3304	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x668
- stack 0: 0xB
3305	 BF	PUSH2	0020	 	 
- stack 2: 0x668
- stack 1: 0xB
- stack 0: 0x20
3306	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x668
- stack 1: 0xB
- stack 0: 0xD
3307	 C3	SUB		 	  ;; # SUB
- stack 1: 0x668
- stack 0: 0x2
3308	 C4	PUSH2	0060	 	 
- stack 2: 0x668
- stack 1: 0x2
- stack 0: 0x60
3309	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x668
3310	 C8	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3311	 CA	ADD		 	 
- stack 0: 0x66C
3312	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3313	 CC	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
3314	 CD	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
- stack 0: 0xF0
3315	 CF	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x33E
3316	 D0	JUMP		 	 
- stack 0: 0x66C
3317	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x66C
3318	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x66C
- stack 0: 0x66C
3319	 340	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
3320	 341	PUSH1	E0	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001601050250030500000086000E
- stack 0: 0xE0
3321	 343	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x33E0001
3322	 344	PUSH2	FFFF	 	 
- stack 2: 0x66C
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3323	 347	AND		 	 
- stack 1: 0x66C
- stack 0: 0x1
3324	 348	PUSH1	01	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
3325	 34A	SIGNEXTEND		 	 
- stack 1: 0x66C
- stack 0: 0x1
3326	 34B	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x80
3327	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x66C
- stack 1: 0x1
- stack 0: 0x1
3328	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x66C
- stack 0: 0x2
3329	 350	PUSH2	0080	 	 
- stack 2: 0x66C
- stack 1: 0x2
- stack 0: 0x80
3330	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x66C
3331	 354	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3332	 356	ADD		 	 
- stack 0: 0x670
3333	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3334	 358	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
3335	 359	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
- stack 0: 0xF0
3336	 35B	SHR		 	 
- stack 1: 0x670
- stack 0: 0x35D
3337	 35C	JUMP		 	 
- stack 0: 0x670
3338	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x670
3339	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3340	 35F	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
3341	 360	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x35D00020377FFEC00D1000200EB001601050250030500000086000E00A0000B
- stack 0: 0xE0
3342	 362	SHR		 	 
- stack 1: 0x670
- stack 0: 0x35D0002
3343	 363	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3344	 366	AND		 	 
- stack 1: 0x670
- stack 0: 0x2
3345	 367	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0x1
3346	 369	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0x2
3347	 36A	PUSH2	00A0	 	 
- stack 2: 0x670
- stack 1: 0x2
- stack 0: 0xA0
3348	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x670
3349	 36E	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3350	 370	ADD		 	 
- stack 0: 0x674
3351	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3352	 372	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
3353	 373	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x377FFEC00D1000200EB001601050250030500000086000E00A0000B03FB0000
- stack 0: 0xF0
3354	 375	SHR		 	 
- stack 1: 0x674
- stack 0: 0x377
3355	 376	JUMP		 	 
- stack 0: 0x674
3356	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x674
3357	 378	PUSH2	0080	 	 
- stack 1: 0x674
- stack 0: 0x80
3358	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x674
- stack 0: 0x2
3359	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3360	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x674
- stack 0: 0x2
3361	 382	PUSH2	00A0	 	 
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0xA0
3362	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
3363	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x674
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3364	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x674
- stack 1: 0x2
- stack 0: 0x2
3365	 38C	SUB		 	 
- stack 1: 0x674
- stack 0: 0x0
3366	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x395
3367	 390	JUMPI		 	 
- stack 0: 0x674
3368	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x674
- stack 0: 0x3AF
3369	 394	JUMP		 	 
- stack 0: 0x674
3370	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x674
3371	 3B0	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3372	 3B2	ADD		 	 
- stack 0: 0x678
3373	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3374	 3B4	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD1000200EB001601050250030500000086000E00A0000B03FB000000BA0000
3375	 3B5	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0xD1000200EB001601050250030500000086000E00A0000B03FB000000BA0000
- stack 0: 0xF0
3376	 3B7	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD1
3377	 3B8	JUMP		 	 
- stack 0: 0x678
3378	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x678
3379	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3380	 D3	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0xD1000200EB001601050250030500000086000E00A0000B03FB000000BA0000
3381	 D4	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0xD1000200EB001601050250030500000086000E00A0000B03FB000000BA0000
- stack 0: 0xE0
3382	 D6	SHR		 	 
- stack 1: 0x678
- stack 0: 0xD10002
3383	 D7	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0xD10002
- stack 0: 0xFFFF
3384	 DA	AND		 	 
- stack 1: 0x678
- stack 0: 0x2
3385	 DB	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x1
3386	 DD	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x2
3387	 DE	PUSH2	03A0	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x3A0
3388	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x678
3389	 E2	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3390	 E4	ADD		 	 
- stack 0: 0x67C
3391	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3392	 E6	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xEB001601050250030500000086000E00A0000B03FB000000BA0000033E0001
3393	 E7	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xEB001601050250030500000086000E00A0000B03FB000000BA0000033E0001
- stack 0: 0xF0
3394	 E9	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xEB
3395	 EA	JUMP		 	 
- stack 0: 0x67C
3396	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x67C
3397	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3398	 ED	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xEB001601050250030500000086000E00A0000B03FB000000BA0000033E0001
3399	 EE	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0xEB001601050250030500000086000E00A0000B03FB000000BA0000033E0001
- stack 0: 0xE0
3400	 F0	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xEB0016
3401	 F1	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0xEB0016
- stack 0: 0xFFFF
3402	 F4	AND		 	 
- stack 1: 0x67C
- stack 0: 0x16
3403	 F5	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x16
- stack 0: 0x1
3404	 F7	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x16
3405	 F8	PUSH2	0380	 	 
- stack 2: 0x67C
- stack 1: 0x16
- stack 0: 0x380
3406	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x67C
3407	 FC	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3408	 FE	ADD		 	 
- stack 0: 0x680
3409	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3410	 100	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x1050250030500000086000E00A0000B03FB000000BA0000033E0001035D0002
3411	 101	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x1050250030500000086000E00A0000B03FB000000BA0000033E0001035D0002
- stack 0: 0xF0
3412	 103	SHR		 	 
- stack 1: 0x680
- stack 0: 0x105
3413	 104	JUMP		 	 
- stack 0: 0x680
3414	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x680
3415	 106	PUSH2	0060	 	 
- stack 1: 0x680
- stack 0: 0x60
3416	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x680
- stack 0: 0x2
3417	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3418	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x2
3419	 110	PUSH2	03A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x3A0
3420	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
3421	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3422	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
3423	 11A	SUB		 	 
- stack 1: 0x680
- stack 0: 0x0
3424	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x123
3425	 11E	JUMPI		 	 
- stack 0: 0x680
3426	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x680
- stack 0: 0x13D
3427	 122	JUMP		 	 
- stack 0: 0x680
3428	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x680
3429	 13E	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3430	 140	ADD		 	 
- stack 0: 0x684
3431	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3432	 142	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x30500000086000E00A0000B03FB000000BA0000033E0001035D00020377FFE8
3433	 143	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x30500000086000E00A0000B03FB000000BA0000033E0001035D00020377FFE8
- stack 0: 0xF0
3434	 145	SHR		 	 
- stack 1: 0x684
- stack 0: 0x305
3435	 146	JUMP		 	 
- stack 0: 0x684
3436	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x684
3437	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x684
- stack 0: 0x684
3438	 307	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x30500000086000E00A0000B03FB000000BA0000033E0001035D00020377FFE8
3439	 308	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0x30500000086000E00A0000B03FB000000BA0000033E0001035D00020377FFE8
- stack 0: 0xE0
3440	 30A	SHR		 	 
- stack 1: 0x684
- stack 0: 0x3050000
3441	 30B	PUSH2	FFFF	 	 
- stack 2: 0x684
- stack 1: 0x3050000
- stack 0: 0xFFFF
3442	 30E	AND		 	 
- stack 1: 0x684
- stack 0: 0x0
3443	 30F	PUSH1	01	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x1
3444	 311	SIGNEXTEND		 	 
- stack 1: 0x684
- stack 0: 0x0
3445	 312	PUSH2	0080	 	 
- stack 2: 0x684
- stack 1: 0x0
- stack 0: 0x80
3446	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x684
3447	 316	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3448	 318	ADD		 	 
- stack 0: 0x688
3449	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3450	 31A	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
3451	 31B	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xF0
3452	 31D	SHR		 	 
- stack 1: 0x688
- stack 0: 0x86
3453	 31E	JUMP		 	 
- stack 0: 0x688
3454	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x688
3455	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3456	 88	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
3457	 89	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xE0
3458	 8B	SHR		 	 
- stack 1: 0x688
- stack 0: 0x86000E
3459	 8C	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x86000E
- stack 0: 0xFFFF
3460	 8F	AND		 	 
- stack 1: 0x688
- stack 0: 0xE
3461	 90	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xE
- stack 0: 0x1
3462	 92	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xE
3463	 93	PUSH2	0020	 	 
- stack 2: 0x688
- stack 1: 0xE
- stack 0: 0x20
3464	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x688
3465	 97	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3466	 99	ADD		 	 
- stack 0: 0x68C
3467	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3468	 9B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
3469	 9C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
- stack 0: 0xF0
3470	 9E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xA0
3471	 9F	JUMP		 	 
- stack 0: 0x68C
3472	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x68C
3473	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3474	 A2	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
3475	 A3	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
- stack 0: 0xE0
3476	 A5	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B
3477	 A6	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3478	 A9	AND		 	 
- stack 1: 0x68C
- stack 0: 0xB
3479	 AA	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xB
- stack 0: 0x1
3480	 AC	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xB
3481	 AD	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xB
- stack 0: 0x40
3482	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
3483	 B1	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3484	 B3	ADD		 	 
- stack 0: 0x690
3485	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3486	 B5	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
3487	 B6	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
- stack 0: 0xF0
3488	 B8	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3FB
3489	 B9	JUMP		 	 
- stack 0: 0x690
3490	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x690
3491	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3492	 3FD	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
3493	 3FE	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
- stack 0: 0xE0
3494	 400	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3FB0000
3495	 401	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
3496	 404	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
3497	 405	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
3498	 407	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
3499	 408	POP		 	 
- stack 0: 0x690
3500	 409	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3501	 40B	ADD		 	 
- stack 0: 0x694
3502	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3503	 40D	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000300EB00170105022403050000
3504	 40E	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000300EB00170105022403050000
- stack 0: 0xF0
3505	 410	SHR		 	 
- stack 1: 0x694
- stack 0: 0xBA
3506	 411	JUMP		 	 
- stack 0: 0x694
3507	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x694
3508	 BB	PUSH2	0040	 	 
- stack 1: 0x694
- stack 0: 0x40
3509	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x694
- stack 0: 0xB
3510	 BF	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xB
- stack 0: 0x20
3511	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x694
- stack 1: 0xB
- stack 0: 0xE
3512	 C3	SUB		 	  ;; # SUB
- stack 1: 0x694
- stack 0: 0x3
3513	 C4	PUSH2	0060	 	 
- stack 2: 0x694
- stack 1: 0x3
- stack 0: 0x60
3514	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x694
3515	 C8	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3516	 CA	ADD		 	 
- stack 0: 0x698
3517	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3518	 CC	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
3519	 CD	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
- stack 0: 0xF0
3520	 CF	SHR		 	 
- stack 1: 0x698
- stack 0: 0x33E
3521	 D0	JUMP		 	 
- stack 0: 0x698
3522	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x698
3523	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3524	 340	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
3525	 341	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
- stack 0: 0xE0
3526	 343	SHR		 	 
- stack 1: 0x698
- stack 0: 0x33E0001
3527	 344	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3528	 347	AND		 	 
- stack 1: 0x698
- stack 0: 0x1
3529	 348	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
3530	 34A	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x1
3531	 34B	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
3532	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x0
3533	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x698
- stack 0: 0x1
3534	 350	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
3535	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x698
3536	 354	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3537	 356	ADD		 	 
- stack 0: 0x69C
3538	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3539	 358	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
3540	 359	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
- stack 0: 0xF0
3541	 35B	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x35D
3542	 35C	JUMP		 	 
- stack 0: 0x69C
3543	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x69C
3544	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
3545	 35F	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
3546	 360	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
- stack 0: 0xE0
3547	 362	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x35D0002
3548	 363	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3549	 366	AND		 	 
- stack 1: 0x69C
- stack 0: 0x2
3550	 367	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x1
3551	 369	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x2
3552	 36A	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
3553	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x69C
3554	 36E	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3555	 370	ADD		 	 
- stack 0: 0x6A0
3556	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3557	 372	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
3558	 373	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
- stack 0: 0xF0
3559	 375	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x377
3560	 376	JUMP		 	 
- stack 0: 0x6A0
3561	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A0
3562	 378	PUSH2	0080	 	 
- stack 1: 0x6A0
- stack 0: 0x80
3563	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A0
- stack 0: 0x1
3564	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3565	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x1
3566	 382	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0xA0
3567	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x2
3568	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3569	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x2
3570	 38C	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x1
3571	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6A0
- stack 1: 0x1
- stack 0: 0x395
3572	 390	JUMPI		 	 
- stack 0: 0x6A0
3573	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6A0
3574	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
3575	 397	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
3576	 398	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
- stack 0: 0xE0
3577	 39A	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x377FFE8
3578	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x377FFE8
- stack 0: 0xFFFF
3579	 39E	AND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFE8
3580	 39F	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0xFFE8
- stack 0: 0x1
3581	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
3582	 3A2	ADD		 	 
- stack 0: 0x688
3583	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x688
- stack 0: 0xFFFFFFFF
3584	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x688
3585	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3586	 3AA	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
3587	 3AB	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xF0
3588	 3AD	SHR		 	 
- stack 1: 0x688
- stack 0: 0x86
3589	 3AE	JUMP		 	 
- stack 0: 0x688
3590	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x688
3591	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
3592	 88	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
3593	 89	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x86000E00A0000B03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xE0
3594	 8B	SHR		 	 
- stack 1: 0x688
- stack 0: 0x86000E
3595	 8C	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x86000E
- stack 0: 0xFFFF
3596	 8F	AND		 	 
- stack 1: 0x688
- stack 0: 0xE
3597	 90	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xE
- stack 0: 0x1
3598	 92	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xE
3599	 93	PUSH2	0020	 	 
- stack 2: 0x688
- stack 1: 0xE
- stack 0: 0x20
3600	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x688
3601	 97	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3602	 99	ADD		 	 
- stack 0: 0x68C
3603	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3604	 9B	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
3605	 9C	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
- stack 0: 0xF0
3606	 9E	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xA0
3607	 9F	JUMP		 	 
- stack 0: 0x68C
3608	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x68C
3609	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3610	 A2	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
3611	 A3	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE800D1000300EB0017
- stack 0: 0xE0
3612	 A5	SHR		 	 
- stack 1: 0x68C
- stack 0: 0xA0000B
3613	 A6	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3614	 A9	AND		 	 
- stack 1: 0x68C
- stack 0: 0xB
3615	 AA	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xB
- stack 0: 0x1
3616	 AC	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xB
3617	 AD	PUSH2	0040	 	 
- stack 2: 0x68C
- stack 1: 0xB
- stack 0: 0x40
3618	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x68C
3619	 B1	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3620	 B3	ADD		 	 
- stack 0: 0x690
3621	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3622	 B5	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
3623	 B6	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
- stack 0: 0xF0
3624	 B8	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3FB
3625	 B9	JUMP		 	 
- stack 0: 0x690
3626	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x690
3627	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x690
- stack 0: 0x690
3628	 3FD	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
3629	 3FE	PUSH1	E0	 	 
- stack 2: 0x690
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001701050224
- stack 0: 0xE0
3630	 400	SHR		 	 
- stack 1: 0x690
- stack 0: 0x3FB0000
3631	 401	PUSH2	FFFF	 	 
- stack 2: 0x690
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
3632	 404	AND		 	 
- stack 1: 0x690
- stack 0: 0x0
3633	 405	PUSH1	01	 	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1
3634	 407	SIGNEXTEND		 	 
- stack 1: 0x690
- stack 0: 0x0
3635	 408	POP		 	 
- stack 0: 0x690
3636	 409	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3637	 40B	ADD		 	 
- stack 0: 0x694
3638	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
3639	 40D	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000300EB00170105022403050000
3640	 40E	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000300EB00170105022403050000
- stack 0: 0xF0
3641	 410	SHR		 	 
- stack 1: 0x694
- stack 0: 0xBA
3642	 411	JUMP		 	 
- stack 0: 0x694
3643	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x694
3644	 BB	PUSH2	0040	 	 
- stack 1: 0x694
- stack 0: 0x40
3645	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x694
- stack 0: 0xB
3646	 BF	PUSH2	0020	 	 
- stack 2: 0x694
- stack 1: 0xB
- stack 0: 0x20
3647	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x694
- stack 1: 0xB
- stack 0: 0xE
3648	 C3	SUB		 	  ;; # SUB
- stack 1: 0x694
- stack 0: 0x3
3649	 C4	PUSH2	0060	 	 
- stack 2: 0x694
- stack 1: 0x3
- stack 0: 0x60
3650	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x694
3651	 C8	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
3652	 CA	ADD		 	 
- stack 0: 0x698
3653	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
3654	 CC	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
3655	 CD	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
- stack 0: 0xF0
3656	 CF	SHR		 	 
- stack 1: 0x698
- stack 0: 0x33E
3657	 D0	JUMP		 	 
- stack 0: 0x698
3658	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x698
3659	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
3660	 340	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
3661	 341	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001701050224030500000086000F
- stack 0: 0xE0
3662	 343	SHR		 	 
- stack 1: 0x698
- stack 0: 0x33E0001
3663	 344	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3664	 347	AND		 	 
- stack 1: 0x698
- stack 0: 0x1
3665	 348	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
3666	 34A	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x1
3667	 34B	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x80
3668	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x698
- stack 1: 0x1
- stack 0: 0x1
3669	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x698
- stack 0: 0x2
3670	 350	PUSH2	0080	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x80
3671	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x698
3672	 354	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
3673	 356	ADD		 	 
- stack 0: 0x69C
3674	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
3675	 358	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
3676	 359	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
- stack 0: 0xF0
3677	 35B	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x35D
3678	 35C	JUMP		 	 
- stack 0: 0x69C
3679	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x69C
3680	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
3681	 35F	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
3682	 360	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x35D00020377FFE800D1000300EB001701050224030500000086000F00A0000B
- stack 0: 0xE0
3683	 362	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x35D0002
3684	 363	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3685	 366	AND		 	 
- stack 1: 0x69C
- stack 0: 0x2
3686	 367	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x1
3687	 369	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0x2
3688	 36A	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
3689	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x69C
3690	 36E	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
3691	 370	ADD		 	 
- stack 0: 0x6A0
3692	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
3693	 372	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
3694	 373	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x377FFE800D1000300EB001701050224030500000086000F00A0000B03FB0000
- stack 0: 0xF0
3695	 375	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x377
3696	 376	JUMP		 	 
- stack 0: 0x6A0
3697	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6A0
3698	 378	PUSH2	0080	 	 
- stack 1: 0x6A0
- stack 0: 0x80
3699	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6A0
- stack 0: 0x2
3700	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3701	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6A0
- stack 0: 0x2
3702	 382	PUSH2	00A0	 	 
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0xA0
3703	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x2
3704	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3705	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6A0
- stack 1: 0x2
- stack 0: 0x2
3706	 38C	SUB		 	 
- stack 1: 0x6A0
- stack 0: 0x0
3707	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x395
3708	 390	JUMPI		 	 
- stack 0: 0x6A0
3709	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x6A0
- stack 0: 0x3AF
3710	 394	JUMP		 	 
- stack 0: 0x6A0
3711	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6A0
3712	 3B0	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
3713	 3B2	ADD		 	 
- stack 0: 0x6A4
3714	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
3715	 3B4	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xD1000300EB001701050224030500000086000F00A0000B03FB000003FB0000
3716	 3B5	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0xD1000300EB001701050224030500000086000F00A0000B03FB000003FB0000
- stack 0: 0xF0
3717	 3B7	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xD1
3718	 3B8	JUMP		 	 
- stack 0: 0x6A4
3719	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6A4
3720	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
3721	 D3	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0xD1000300EB001701050224030500000086000F00A0000B03FB000003FB0000
3722	 D4	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0xD1000300EB001701050224030500000086000F00A0000B03FB000003FB0000
- stack 0: 0xE0
3723	 D6	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0xD10003
3724	 D7	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0xD10003
- stack 0: 0xFFFF
3725	 DA	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x3
3726	 DB	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x3
- stack 0: 0x1
3727	 DD	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x3
3728	 DE	PUSH2	03A0	 	 
- stack 2: 0x6A4
- stack 1: 0x3
- stack 0: 0x3A0
3729	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x6A4
3730	 E2	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
3731	 E4	ADD		 	 
- stack 0: 0x6A8
3732	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
3733	 E6	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xEB001701050224030500000086000F00A0000B03FB000003FB000000BA0000
3734	 E7	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xEB001701050224030500000086000F00A0000B03FB000003FB000000BA0000
- stack 0: 0xF0
3735	 E9	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xEB
3736	 EA	JUMP		 	 
- stack 0: 0x6A8
3737	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6A8
3738	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
3739	 ED	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xEB001701050224030500000086000F00A0000B03FB000003FB000000BA0000
3740	 EE	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xEB001701050224030500000086000F00A0000B03FB000003FB000000BA0000
- stack 0: 0xE0
3741	 F0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xEB0017
3742	 F1	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xEB0017
- stack 0: 0xFFFF
3743	 F4	AND		 	 
- stack 1: 0x6A8
- stack 0: 0x17
3744	 F5	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0x17
- stack 0: 0x1
3745	 F7	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0x17
3746	 F8	PUSH2	0380	 	 
- stack 2: 0x6A8
- stack 1: 0x17
- stack 0: 0x380
3747	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x6A8
3748	 FC	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
3749	 FE	ADD		 	 
- stack 0: 0x6AC
3750	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
3751	 100	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x1050224030500000086000F00A0000B03FB000003FB000000BA0000033E0001
3752	 101	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x1050224030500000086000F00A0000B03FB000003FB000000BA0000033E0001
- stack 0: 0xF0
3753	 103	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x105
3754	 104	JUMP		 	 
- stack 0: 0x6AC
3755	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x6AC
3756	 106	PUSH2	0060	 	 
- stack 1: 0x6AC
- stack 0: 0x60
3757	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x6AC
- stack 0: 0x3
3758	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
3759	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6AC
- stack 0: 0x3
3760	 110	PUSH2	03A0	 	 
- stack 2: 0x6AC
- stack 1: 0x3
- stack 0: 0x3A0
3761	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x6AC
- stack 1: 0x3
- stack 0: 0x3
3762	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6AC
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
3763	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6AC
- stack 1: 0x3
- stack 0: 0x3
3764	 11A	SUB		 	 
- stack 1: 0x6AC
- stack 0: 0x0
3765	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x123
3766	 11E	JUMPI		 	 
- stack 0: 0x6AC
3767	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x6AC
- stack 0: 0x13D
3768	 122	JUMP		 	 
- stack 0: 0x6AC
3769	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x6AC
3770	 13E	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
3771	 140	ADD		 	 
- stack 0: 0x6B0
3772	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
3773	 142	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x30500000086000F00A0000B03FB000003FB000000BA0000033E0001035D0002
3774	 143	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x30500000086000F00A0000B03FB000003FB000000BA0000033E0001035D0002
- stack 0: 0xF0
3775	 145	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x305
3776	 146	JUMP		 	 
- stack 0: 0x6B0
3777	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6B0
3778	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
3779	 307	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x30500000086000F00A0000B03FB000003FB000000BA0000033E0001035D0002
3780	 308	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x30500000086000F00A0000B03FB000003FB000000BA0000033E0001035D0002
- stack 0: 0xE0
3781	 30A	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x3050000
3782	 30B	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x3050000
- stack 0: 0xFFFF
3783	 30E	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3784	 30F	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
3785	 311	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
3786	 312	PUSH2	0080	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x80
3787	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B0
3788	 316	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
3789	 318	ADD		 	 
- stack 0: 0x6B4
3790	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3791	 31A	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
3792	 31B	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
3793	 31D	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x86
3794	 31E	JUMP		 	 
- stack 0: 0x6B4
3795	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6B4
3796	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3797	 88	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
3798	 89	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
3799	 8B	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F
3800	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F
- stack 0: 0xFFFF
3801	 8F	AND		 	 
- stack 1: 0x6B4
- stack 0: 0xF
3802	 90	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0xF
- stack 0: 0x1
3803	 92	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0xF
3804	 93	PUSH2	0020	 	 
- stack 2: 0x6B4
- stack 1: 0xF
- stack 0: 0x20
3805	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B4
3806	 97	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3807	 99	ADD		 	 
- stack 0: 0x6B8
3808	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3809	 9B	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
3810	 9C	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
3811	 9E	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0
3812	 9F	JUMP		 	 
- stack 0: 0x6B8
3813	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6B8
3814	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3815	 A2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
3816	 A3	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
3817	 A5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B
3818	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3819	 A9	AND		 	 
- stack 1: 0x6B8
- stack 0: 0xB
3820	 AA	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0xB
- stack 0: 0x1
3821	 AC	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0xB
3822	 AD	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0xB
- stack 0: 0x40
3823	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
3824	 B1	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3825	 B3	ADD		 	 
- stack 0: 0x6BC
3826	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3827	 B5	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
3828	 B6	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
- stack 0: 0xF0
3829	 B8	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB
3830	 B9	JUMP		 	 
- stack 0: 0x6BC
3831	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
3832	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3833	 3FD	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
3834	 3FE	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
- stack 0: 0xE0
3835	 400	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB0000
3836	 401	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
3837	 404	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
3838	 405	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
3839	 407	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
3840	 408	POP		 	 
- stack 0: 0x6BC
3841	 409	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3842	 40B	ADD		 	 
- stack 0: 0x6C0
3843	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3844	 40D	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
3845	 40E	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
- stack 0: 0xF0
3846	 410	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB
3847	 411	JUMP		 	 
- stack 0: 0x6C0
3848	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C0
3849	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
3850	 3FD	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
3851	 3FE	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
- stack 0: 0xE0
3852	 400	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB0000
3853	 401	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
3854	 404	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3855	 405	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
3856	 407	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
3857	 408	POP		 	 
- stack 0: 0x6C0
3858	 409	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
3859	 40B	ADD		 	 
- stack 0: 0x6C4
3860	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
3861	 40D	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB0018010501F403050000
3862	 40E	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB0018010501F403050000
- stack 0: 0xF0
3863	 410	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xBA
3864	 411	JUMP		 	 
- stack 0: 0x6C4
3865	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x6C4
3866	 BB	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
3867	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0xB
3868	 BF	PUSH2	0020	 	 
- stack 2: 0x6C4
- stack 1: 0xB
- stack 0: 0x20
3869	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C4
- stack 1: 0xB
- stack 0: 0xF
3870	 C3	SUB		 	  ;; # SUB
- stack 1: 0x6C4
- stack 0: 0x4
3871	 C4	PUSH2	0060	 	 
- stack 2: 0x6C4
- stack 1: 0x4
- stack 0: 0x60
3872	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C4
3873	 C8	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
3874	 CA	ADD		 	 
- stack 0: 0x6C8
3875	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
3876	 CC	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
3877	 CD	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
- stack 0: 0xF0
3878	 CF	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33E
3879	 D0	JUMP		 	 
- stack 0: 0x6C8
3880	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6C8
3881	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
3882	 340	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
3883	 341	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
- stack 0: 0xE0
3884	 343	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001
3885	 344	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
3886	 347	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
3887	 348	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
3888	 34A	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
3889	 34B	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
3890	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x0
3891	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C8
- stack 0: 0x1
3892	 350	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
3893	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C8
3894	 354	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
3895	 356	ADD		 	 
- stack 0: 0x6CC
3896	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
3897	 358	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
3898	 359	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
- stack 0: 0xF0
3899	 35B	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x35D
3900	 35C	JUMP		 	 
- stack 0: 0x6CC
3901	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6CC
3902	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
3903	 35F	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
3904	 360	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
- stack 0: 0xE0
3905	 362	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x35D0002
3906	 363	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
3907	 366	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
3908	 367	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x1
3909	 369	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
3910	 36A	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xA0
3911	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x6CC
3912	 36E	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
3913	 370	ADD		 	 
- stack 0: 0x6D0
3914	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
3915	 372	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
3916	 373	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
- stack 0: 0xF0
3917	 375	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x377
3918	 376	JUMP		 	 
- stack 0: 0x6D0
3919	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D0
3920	 378	PUSH2	0080	 	 
- stack 1: 0x6D0
- stack 0: 0x80
3921	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D0
- stack 0: 0x1
3922	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3923	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x1
3924	 382	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0xA0
3925	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x2
3926	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3927	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x2
3928	 38C	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x1
3929	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6D0
- stack 1: 0x1
- stack 0: 0x395
3930	 390	JUMPI		 	 
- stack 0: 0x6D0
3931	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6D0
3932	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
3933	 397	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
3934	 398	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
- stack 0: 0xE0
3935	 39A	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x377FFE4
3936	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
3937	 39E	AND		 	 
- stack 1: 0x6D0
- stack 0: 0xFFE4
3938	 39F	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0xFFE4
- stack 0: 0x1
3939	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
3940	 3A2	ADD		 	 
- stack 0: 0x6B4
3941	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6B4
- stack 0: 0xFFFFFFFF
3942	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6B4
3943	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
3944	 3AA	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
3945	 3AB	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
3946	 3AD	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x86
3947	 3AE	JUMP		 	 
- stack 0: 0x6B4
3948	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6B4
3949	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
3950	 88	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
3951	 89	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F00A0000B03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
3952	 8B	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x86000F
3953	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x86000F
- stack 0: 0xFFFF
3954	 8F	AND		 	 
- stack 1: 0x6B4
- stack 0: 0xF
3955	 90	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0xF
- stack 0: 0x1
3956	 92	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0xF
3957	 93	PUSH2	0020	 	 
- stack 2: 0x6B4
- stack 1: 0xF
- stack 0: 0x20
3958	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6B4
3959	 97	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
3960	 99	ADD		 	 
- stack 0: 0x6B8
3961	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
3962	 9B	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
3963	 9C	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
3964	 9E	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0
3965	 9F	JUMP		 	 
- stack 0: 0x6B8
3966	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6B8
3967	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
3968	 A2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
3969	 A3	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
3970	 A5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xA0000B
3971	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xA0000B
- stack 0: 0xFFFF
3972	 A9	AND		 	 
- stack 1: 0x6B8
- stack 0: 0xB
3973	 AA	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0xB
- stack 0: 0x1
3974	 AC	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0xB
3975	 AD	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0xB
- stack 0: 0x40
3976	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
3977	 B1	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
3978	 B3	ADD		 	 
- stack 0: 0x6BC
3979	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
3980	 B5	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
3981	 B6	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
- stack 0: 0xF0
3982	 B8	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB
3983	 B9	JUMP		 	 
- stack 0: 0x6BC
3984	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
3985	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
3986	 3FD	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
3987	 3FE	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB0018
- stack 0: 0xE0
3988	 400	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x3FB0000
3989	 401	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
3990	 404	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
3991	 405	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
3992	 407	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
3993	 408	POP		 	 
- stack 0: 0x6BC
3994	 409	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
3995	 40B	ADD		 	 
- stack 0: 0x6C0
3996	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
3997	 40D	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
3998	 40E	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
- stack 0: 0xF0
3999	 410	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB
4000	 411	JUMP		 	 
- stack 0: 0x6C0
4001	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6C0
4002	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C0
- stack 0: 0x6C0
4003	 3FD	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
4004	 3FE	PUSH1	E0	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB0018010501F4
- stack 0: 0xE0
4005	 400	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3FB0000
4006	 401	PUSH2	FFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4007	 404	AND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4008	 405	PUSH1	01	 	 
- stack 2: 0x6C0
- stack 1: 0x0
- stack 0: 0x1
4009	 407	SIGNEXTEND		 	 
- stack 1: 0x6C0
- stack 0: 0x0
4010	 408	POP		 	 
- stack 0: 0x6C0
4011	 409	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4012	 40B	ADD		 	 
- stack 0: 0x6C4
4013	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4014	 40D	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB0018010501F403050000
4015	 40E	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB0018010501F403050000
- stack 0: 0xF0
4016	 410	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xBA
4017	 411	JUMP		 	 
- stack 0: 0x6C4
4018	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x6C4
4019	 BB	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
4020	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0xB
4021	 BF	PUSH2	0020	 	 
- stack 2: 0x6C4
- stack 1: 0xB
- stack 0: 0x20
4022	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6C4
- stack 1: 0xB
- stack 0: 0xF
4023	 C3	SUB		 	  ;; # SUB
- stack 1: 0x6C4
- stack 0: 0x4
4024	 C4	PUSH2	0060	 	 
- stack 2: 0x6C4
- stack 1: 0x4
- stack 0: 0x60
4025	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C4
4026	 C8	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4027	 CA	ADD		 	 
- stack 0: 0x6C8
4028	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4029	 CC	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
4030	 CD	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
- stack 0: 0xF0
4031	 CF	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33E
4032	 D0	JUMP		 	 
- stack 0: 0x6C8
4033	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6C8
4034	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4035	 340	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
4036	 341	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0018010501F4030500000086000D
- stack 0: 0xE0
4037	 343	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x33E0001
4038	 344	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4039	 347	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
4040	 348	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
4041	 34A	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x1
4042	 34B	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x80
4043	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x6C8
- stack 1: 0x1
- stack 0: 0x1
4044	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x6C8
- stack 0: 0x2
4045	 350	PUSH2	0080	 	 
- stack 2: 0x6C8
- stack 1: 0x2
- stack 0: 0x80
4046	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x6C8
4047	 354	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4048	 356	ADD		 	 
- stack 0: 0x6CC
4049	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4050	 358	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
4051	 359	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
- stack 0: 0xF0
4052	 35B	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x35D
4053	 35C	JUMP		 	 
- stack 0: 0x6CC
4054	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6CC
4055	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4056	 35F	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
4057	 360	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x35D00020377FFE400D1000400EB0018010501F4030500000086000D03FB0000
- stack 0: 0xE0
4058	 362	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x35D0002
4059	 363	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4060	 366	AND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
4061	 367	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0x1
4062	 369	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0x2
4063	 36A	PUSH2	00A0	 	 
- stack 2: 0x6CC
- stack 1: 0x2
- stack 0: 0xA0
4064	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x6CC
4065	 36E	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4066	 370	ADD		 	 
- stack 0: 0x6D0
4067	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4068	 372	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
4069	 373	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x377FFE400D1000400EB0018010501F4030500000086000D03FB000000A0000B
- stack 0: 0xF0
4070	 375	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x377
4071	 376	JUMP		 	 
- stack 0: 0x6D0
4072	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6D0
4073	 378	PUSH2	0080	 	 
- stack 1: 0x6D0
- stack 0: 0x80
4074	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6D0
- stack 0: 0x2
4075	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4076	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0x2
4077	 382	PUSH2	00A0	 	 
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0xA0
4078	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x2
4079	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4080	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0x2
- stack 0: 0x2
4081	 38C	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4082	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x395
4083	 390	JUMPI		 	 
- stack 0: 0x6D0
4084	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x6D0
- stack 0: 0x3AF
4085	 394	JUMP		 	 
- stack 0: 0x6D0
4086	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6D0
4087	 3B0	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4088	 3B2	ADD		 	 
- stack 0: 0x6D4
4089	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4090	 3B4	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xD1000400EB0018010501F4030500000086000D03FB000000A0000B00BA0000
4091	 3B5	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0xD1000400EB0018010501F4030500000086000D03FB000000A0000B00BA0000
- stack 0: 0xF0
4092	 3B7	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xD1
4093	 3B8	JUMP		 	 
- stack 0: 0x6D4
4094	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x6D4
4095	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4096	 D3	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0xD1000400EB0018010501F4030500000086000D03FB000000A0000B00BA0000
4097	 D4	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0xD1000400EB0018010501F4030500000086000D03FB000000A0000B00BA0000
- stack 0: 0xE0
4098	 D6	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0xD10004
4099	 D7	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0xD10004
- stack 0: 0xFFFF
4100	 DA	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x4
4101	 DB	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x4
- stack 0: 0x1
4102	 DD	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x4
4103	 DE	PUSH2	03A0	 	 
- stack 2: 0x6D4
- stack 1: 0x4
- stack 0: 0x3A0
4104	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x6D4
4105	 E2	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4106	 E4	ADD		 	 
- stack 0: 0x6D8
4107	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4108	 E6	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xEB0018010501F4030500000086000D03FB000000A0000B00BA0000033E0001
4109	 E7	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0xEB0018010501F4030500000086000D03FB000000A0000B00BA0000033E0001
- stack 0: 0xF0
4110	 E9	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xEB
4111	 EA	JUMP		 	 
- stack 0: 0x6D8
4112	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6D8
4113	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4114	 ED	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0xEB0018010501F4030500000086000D03FB000000A0000B00BA0000033E0001
4115	 EE	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0xEB0018010501F4030500000086000D03FB000000A0000B00BA0000033E0001
- stack 0: 0xE0
4116	 F0	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0xEB0018
4117	 F1	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0xEB0018
- stack 0: 0xFFFF
4118	 F4	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x18
4119	 F5	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x18
- stack 0: 0x1
4120	 F7	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x18
4121	 F8	PUSH2	0380	 	 
- stack 2: 0x6D8
- stack 1: 0x18
- stack 0: 0x380
4122	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x6D8
4123	 FC	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4124	 FE	ADD		 	 
- stack 0: 0x6DC
4125	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4126	 100	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x10501F4030500000086000D03FB000000A0000B00BA0000033E0001035D0002
4127	 101	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x10501F4030500000086000D03FB000000A0000B00BA0000033E0001035D0002
- stack 0: 0xF0
4128	 103	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x105
4129	 104	JUMP		 	 
- stack 0: 0x6DC
4130	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x6DC
4131	 106	PUSH2	0060	 	 
- stack 1: 0x6DC
- stack 0: 0x60
4132	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x6DC
- stack 0: 0x4
4133	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
4134	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x4
4135	 110	PUSH2	03A0	 	 
- stack 2: 0x6DC
- stack 1: 0x4
- stack 0: 0x3A0
4136	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x6DC
- stack 1: 0x4
- stack 0: 0x4
4137	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6DC
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
4138	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6DC
- stack 1: 0x4
- stack 0: 0x4
4139	 11A	SUB		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4140	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x123
4141	 11E	JUMPI		 	 
- stack 0: 0x6DC
4142	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x6DC
- stack 0: 0x13D
4143	 122	JUMP		 	 
- stack 0: 0x6DC
4144	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x6DC
4145	 13E	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4146	 140	ADD		 	 
- stack 0: 0x6E0
4147	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4148	 142	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x30500000086000D03FB000000A0000B00BA0000033E0001035D00020377FFE8
4149	 143	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x30500000086000D03FB000000A0000B00BA0000033E0001035D00020377FFE8
- stack 0: 0xF0
4150	 145	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x305
4151	 146	JUMP		 	 
- stack 0: 0x6E0
4152	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6E0
4153	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4154	 307	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x30500000086000D03FB000000A0000B00BA0000033E0001035D00020377FFE8
4155	 308	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x30500000086000D03FB000000A0000B00BA0000033E0001035D00020377FFE8
- stack 0: 0xE0
4156	 30A	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3050000
4157	 30B	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3050000
- stack 0: 0xFFFF
4158	 30E	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4159	 30F	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4160	 311	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4161	 312	PUSH2	0080	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x80
4162	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E0
4163	 316	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4164	 318	ADD		 	 
- stack 0: 0x6E4
4165	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4166	 31A	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
4167	 31B	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
4168	 31D	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x86
4169	 31E	JUMP		 	 
- stack 0: 0x6E4
4170	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6E4
4171	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
4172	 88	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
4173	 89	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
4174	 8B	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D
4175	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D
- stack 0: 0xFFFF
4176	 8F	AND		 	 
- stack 1: 0x6E4
- stack 0: 0xD
4177	 90	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0xD
- stack 0: 0x1
4178	 92	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0xD
4179	 93	PUSH2	0020	 	 
- stack 2: 0x6E4
- stack 1: 0xD
- stack 0: 0x20
4180	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E4
4181	 97	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4182	 99	ADD		 	 
- stack 0: 0x6E8
4183	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4184	 9B	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
4185	 9C	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
- stack 0: 0xF0
4186	 9E	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB
4187	 9F	JUMP		 	 
- stack 0: 0x6E8
4188	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E8
4189	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4190	 3FD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
4191	 3FE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
- stack 0: 0xE0
4192	 400	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB0000
4193	 401	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4194	 404	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4195	 405	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
4196	 407	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4197	 408	POP		 	 
- stack 0: 0x6E8
4198	 409	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4199	 40B	ADD		 	 
- stack 0: 0x6EC
4200	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4201	 40D	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
4202	 40E	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
- stack 0: 0xF0
4203	 410	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xA0
4204	 411	JUMP		 	 
- stack 0: 0x6EC
4205	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6EC
4206	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4207	 A2	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
4208	 A3	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
- stack 0: 0xE0
4209	 A5	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B
4210	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4211	 A9	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xB
4212	 AA	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xB
- stack 0: 0x1
4213	 AC	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xB
4214	 AD	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xB
- stack 0: 0x40
4215	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
4216	 B1	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4217	 B3	ADD		 	 
- stack 0: 0x6F0
4218	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4219	 B5	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000200EB0019010501C803050000
4220	 B6	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000200EB0019010501C803050000
- stack 0: 0xF0
4221	 B8	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xBA
4222	 B9	JUMP		 	 
- stack 0: 0x6F0
4223	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x6F0
4224	 BB	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
4225	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0xB
4226	 BF	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0xB
- stack 0: 0x20
4227	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0xB
- stack 0: 0xD
4228	 C3	SUB		 	  ;; # SUB
- stack 1: 0x6F0
- stack 0: 0x2
4229	 C4	PUSH2	0060	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x60
4230	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F0
4231	 C8	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4232	 CA	ADD		 	 
- stack 0: 0x6F4
4233	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4234	 CC	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
4235	 CD	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
- stack 0: 0xF0
4236	 CF	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x33E
4237	 D0	JUMP		 	 
- stack 0: 0x6F4
4238	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
4239	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4240	 340	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
4241	 341	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
- stack 0: 0xE0
4242	 343	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001
4243	 344	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4244	 347	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4245	 348	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4246	 34A	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4247	 34B	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4248	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x0
4249	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x1
4250	 350	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4251	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
4252	 354	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4253	 356	ADD		 	 
- stack 0: 0x6F8
4254	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4255	 358	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
4256	 359	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
- stack 0: 0xF0
4257	 35B	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x35D
4258	 35C	JUMP		 	 
- stack 0: 0x6F8
4259	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
4260	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4261	 35F	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
4262	 360	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
- stack 0: 0xE0
4263	 362	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x35D0002
4264	 363	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4265	 366	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4266	 367	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
4267	 369	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4268	 36A	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4269	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
4270	 36E	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4271	 370	ADD		 	 
- stack 0: 0x6FC
4272	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4273	 372	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
4274	 373	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
- stack 0: 0xF0
4275	 375	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x377
4276	 376	JUMP		 	 
- stack 0: 0x6FC
4277	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6FC
4278	 378	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
4279	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x1
4280	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4281	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x1
4282	 382	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0xA0
4283	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
4284	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4285	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x2
4286	 38C	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x1
4287	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6FC
- stack 1: 0x1
- stack 0: 0x395
4288	 390	JUMPI		 	 
- stack 0: 0x6FC
4289	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6FC
4290	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
4291	 397	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
4292	 398	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
- stack 0: 0xE0
4293	 39A	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x377FFE8
4294	 39B	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x377FFE8
- stack 0: 0xFFFF
4295	 39E	AND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFE8
4296	 39F	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0xFFE8
- stack 0: 0x1
4297	 3A1	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
4298	 3A2	ADD		 	 
- stack 0: 0x6E4
4299	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E4
- stack 0: 0xFFFFFFFF
4300	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E4
4301	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4302	 3AA	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
4303	 3AB	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
4304	 3AD	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x86
4305	 3AE	JUMP		 	 
- stack 0: 0x6E4
4306	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x6E4
4307	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
4308	 88	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
4309	 89	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D03FB000000A0000B00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
4310	 8B	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x86000D
4311	 8C	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x86000D
- stack 0: 0xFFFF
4312	 8F	AND		 	 
- stack 1: 0x6E4
- stack 0: 0xD
4313	 90	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0xD
- stack 0: 0x1
4314	 92	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0xD
4315	 93	PUSH2	0020	 	 
- stack 2: 0x6E4
- stack 1: 0xD
- stack 0: 0x20
4316	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E4
4317	 97	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4318	 99	ADD		 	 
- stack 0: 0x6E8
4319	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4320	 9B	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
4321	 9C	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
- stack 0: 0xF0
4322	 9E	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB
4323	 9F	JUMP		 	 
- stack 0: 0x6E8
4324	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E8
4325	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4326	 3FD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
4327	 3FE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE800D1000200EB0019
- stack 0: 0xE0
4328	 400	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x3FB0000
4329	 401	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4330	 404	AND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4331	 405	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0x0
- stack 0: 0x1
4332	 407	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0x0
4333	 408	POP		 	 
- stack 0: 0x6E8
4334	 409	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4335	 40B	ADD		 	 
- stack 0: 0x6EC
4336	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4337	 40D	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
4338	 40E	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
- stack 0: 0xF0
4339	 410	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xA0
4340	 411	JUMP		 	 
- stack 0: 0x6EC
4341	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x6EC
4342	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4343	 A2	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
4344	 A3	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE800D1000200EB0019010501C8
- stack 0: 0xE0
4345	 A5	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xA0000B
4346	 A6	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4347	 A9	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xB
4348	 AA	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xB
- stack 0: 0x1
4349	 AC	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xB
4350	 AD	PUSH2	0040	 	 
- stack 2: 0x6EC
- stack 1: 0xB
- stack 0: 0x40
4351	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6EC
4352	 B1	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4353	 B3	ADD		 	 
- stack 0: 0x6F0
4354	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4355	 B5	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000200EB0019010501C803050000
4356	 B6	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000200EB0019010501C803050000
- stack 0: 0xF0
4357	 B8	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0xBA
4358	 B9	JUMP		 	 
- stack 0: 0x6F0
4359	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x6F0
4360	 BB	PUSH2	0040	 	 
- stack 1: 0x6F0
- stack 0: 0x40
4361	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6F0
- stack 0: 0xB
4362	 BF	PUSH2	0020	 	 
- stack 2: 0x6F0
- stack 1: 0xB
- stack 0: 0x20
4363	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6F0
- stack 1: 0xB
- stack 0: 0xD
4364	 C3	SUB		 	  ;; # SUB
- stack 1: 0x6F0
- stack 0: 0x2
4365	 C4	PUSH2	0060	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x60
4366	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6F0
4367	 C8	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4368	 CA	ADD		 	 
- stack 0: 0x6F4
4369	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4370	 CC	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
4371	 CD	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
- stack 0: 0xF0
4372	 CF	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x33E
4373	 D0	JUMP		 	 
- stack 0: 0x6F4
4374	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F4
4375	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4376	 340	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
4377	 341	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001035D00020377FFE800D1000200EB0019010501C8030500000086000E
- stack 0: 0xE0
4378	 343	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x33E0001
4379	 344	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4380	 347	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4381	 348	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4382	 34A	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x1
4383	 34B	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x80
4384	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F4
- stack 1: 0x1
- stack 0: 0x1
4385	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F4
- stack 0: 0x2
4386	 350	PUSH2	0080	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x80
4387	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F4
4388	 354	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4389	 356	ADD		 	 
- stack 0: 0x6F8
4390	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4391	 358	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
4392	 359	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
- stack 0: 0xF0
4393	 35B	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x35D
4394	 35C	JUMP		 	 
- stack 0: 0x6F8
4395	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F8
4396	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4397	 35F	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
4398	 360	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x35D00020377FFE800D1000200EB0019010501C8030500000086000E03FB0000
- stack 0: 0xE0
4399	 362	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x35D0002
4400	 363	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4401	 366	AND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4402	 367	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x1
4403	 369	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0x2
4404	 36A	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4405	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F8
4406	 36E	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4407	 370	ADD		 	 
- stack 0: 0x6FC
4408	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4409	 372	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
4410	 373	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x377FFE800D1000200EB0019010501C8030500000086000E03FB000000A0000B
- stack 0: 0xF0
4411	 375	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x377
4412	 376	JUMP		 	 
- stack 0: 0x6FC
4413	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x6FC
4414	 378	PUSH2	0080	 	 
- stack 1: 0x6FC
- stack 0: 0x80
4415	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x6FC
- stack 0: 0x2
4416	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4417	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6FC
- stack 0: 0x2
4418	 382	PUSH2	00A0	 	 
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0xA0
4419	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
4420	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6FC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4421	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6FC
- stack 1: 0x2
- stack 0: 0x2
4422	 38C	SUB		 	 
- stack 1: 0x6FC
- stack 0: 0x0
4423	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x6FC
- stack 1: 0x0
- stack 0: 0x395
4424	 390	JUMPI		 	 
- stack 0: 0x6FC
4425	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x6FC
- stack 0: 0x3AF
4426	 394	JUMP		 	 
- stack 0: 0x6FC
4427	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x6FC
4428	 3B0	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4429	 3B2	ADD		 	 
- stack 0: 0x700
4430	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4431	 3B4	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0xD1000200EB0019010501C8030500000086000E03FB000000A0000B03FB0000
4432	 3B5	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0xD1000200EB0019010501C8030500000086000E03FB000000A0000B03FB0000
- stack 0: 0xF0
4433	 3B7	SHR		 	 
- stack 1: 0x700
- stack 0: 0xD1
4434	 3B8	JUMP		 	 
- stack 0: 0x700
4435	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x700
4436	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4437	 D3	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0xD1000200EB0019010501C8030500000086000E03FB000000A0000B03FB0000
4438	 D4	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0xD1000200EB0019010501C8030500000086000E03FB000000A0000B03FB0000
- stack 0: 0xE0
4439	 D6	SHR		 	 
- stack 1: 0x700
- stack 0: 0xD10002
4440	 D7	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0xD10002
- stack 0: 0xFFFF
4441	 DA	AND		 	 
- stack 1: 0x700
- stack 0: 0x2
4442	 DB	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x1
4443	 DD	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0x2
4444	 DE	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0x2
- stack 0: 0x3A0
4445	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
4446	 E2	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4447	 E4	ADD		 	 
- stack 0: 0x704
4448	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4449	 E6	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0xEB0019010501C8030500000086000E03FB000000A0000B03FB000000BA0000
4450	 E7	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0xEB0019010501C8030500000086000E03FB000000A0000B03FB000000BA0000
- stack 0: 0xF0
4451	 E9	SHR		 	 
- stack 1: 0x704
- stack 0: 0xEB
4452	 EA	JUMP		 	 
- stack 0: 0x704
4453	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x704
4454	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4455	 ED	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0xEB0019010501C8030500000086000E03FB000000A0000B03FB000000BA0000
4456	 EE	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0xEB0019010501C8030500000086000E03FB000000A0000B03FB000000BA0000
- stack 0: 0xE0
4457	 F0	SHR		 	 
- stack 1: 0x704
- stack 0: 0xEB0019
4458	 F1	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0xEB0019
- stack 0: 0xFFFF
4459	 F4	AND		 	 
- stack 1: 0x704
- stack 0: 0x19
4460	 F5	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x19
- stack 0: 0x1
4461	 F7	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x19
4462	 F8	PUSH2	0380	 	 
- stack 2: 0x704
- stack 1: 0x19
- stack 0: 0x380
4463	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x704
4464	 FC	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4465	 FE	ADD		 	 
- stack 0: 0x708
4466	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4467	 100	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x10501C8030500000086000E03FB000000A0000B03FB000000BA0000033E0001
4468	 101	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x10501C8030500000086000E03FB000000A0000B03FB000000BA0000033E0001
- stack 0: 0xF0
4469	 103	SHR		 	 
- stack 1: 0x708
- stack 0: 0x105
4470	 104	JUMP		 	 
- stack 0: 0x708
4471	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x708
4472	 106	PUSH2	0060	 	 
- stack 1: 0x708
- stack 0: 0x60
4473	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x708
- stack 0: 0x2
4474	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4475	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x708
- stack 0: 0x2
4476	 110	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x3A0
4477	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x2
4478	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x708
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4479	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x708
- stack 1: 0x2
- stack 0: 0x2
4480	 11A	SUB		 	 
- stack 1: 0x708
- stack 0: 0x0
4481	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x708
- stack 1: 0x0
- stack 0: 0x123
4482	 11E	JUMPI		 	 
- stack 0: 0x708
4483	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x708
- stack 0: 0x13D
4484	 122	JUMP		 	 
- stack 0: 0x708
4485	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x708
4486	 13E	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4487	 140	ADD		 	 
- stack 0: 0x70C
4488	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4489	 142	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x30500000086000E03FB000000A0000B03FB000000BA0000033E0001035D0002
4490	 143	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x30500000086000E03FB000000A0000B03FB000000BA0000033E0001035D0002
- stack 0: 0xF0
4491	 145	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x305
4492	 146	JUMP		 	 
- stack 0: 0x70C
4493	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x70C
4494	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4495	 307	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x30500000086000E03FB000000A0000B03FB000000BA0000033E0001035D0002
4496	 308	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x30500000086000E03FB000000A0000B03FB000000BA0000033E0001035D0002
- stack 0: 0xE0
4497	 30A	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x3050000
4498	 30B	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x3050000
- stack 0: 0xFFFF
4499	 30E	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4500	 30F	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
4501	 311	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4502	 312	PUSH2	0080	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x80
4503	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x70C
4504	 316	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4505	 318	ADD		 	 
- stack 0: 0x710
4506	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4507	 31A	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
4508	 31B	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
4509	 31D	SHR		 	 
- stack 1: 0x710
- stack 0: 0x86
4510	 31E	JUMP		 	 
- stack 0: 0x710
4511	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x710
4512	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
4513	 88	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
4514	 89	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
4515	 8B	SHR		 	 
- stack 1: 0x710
- stack 0: 0x86000E
4516	 8C	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x86000E
- stack 0: 0xFFFF
4517	 8F	AND		 	 
- stack 1: 0x710
- stack 0: 0xE
4518	 90	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0xE
- stack 0: 0x1
4519	 92	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0xE
4520	 93	PUSH2	0020	 	 
- stack 2: 0x710
- stack 1: 0xE
- stack 0: 0x20
4521	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x710
4522	 97	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4523	 99	ADD		 	 
- stack 0: 0x714
4524	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4525	 9B	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
4526	 9C	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
4527	 9E	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3FB
4528	 9F	JUMP		 	 
- stack 0: 0x714
4529	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x714
4530	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4531	 3FD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
4532	 3FE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
4533	 400	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3FB0000
4534	 401	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4535	 404	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
4536	 405	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
4537	 407	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
4538	 408	POP		 	 
- stack 0: 0x714
4539	 409	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4540	 40B	ADD		 	 
- stack 0: 0x718
4541	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4542	 40D	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
4543	 40E	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
- stack 0: 0xF0
4544	 410	SHR		 	 
- stack 1: 0x718
- stack 0: 0xA0
4545	 411	JUMP		 	 
- stack 0: 0x718
4546	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x718
4547	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4548	 A2	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
4549	 A3	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
- stack 0: 0xE0
4550	 A5	SHR		 	 
- stack 1: 0x718
- stack 0: 0xA0000B
4551	 A6	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4552	 A9	AND		 	 
- stack 1: 0x718
- stack 0: 0xB
4553	 AA	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0xB
- stack 0: 0x1
4554	 AC	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0xB
4555	 AD	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xB
- stack 0: 0x40
4556	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
4557	 B1	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4558	 B3	ADD		 	 
- stack 0: 0x71C
4559	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4560	 B5	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
4561	 B6	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
- stack 0: 0xF0
4562	 B8	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3FB
4563	 B9	JUMP		 	 
- stack 0: 0x71C
4564	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
4565	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4566	 3FD	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
4567	 3FE	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
- stack 0: 0xE0
4568	 400	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3FB0000
4569	 401	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4570	 404	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4571	 405	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
4572	 407	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4573	 408	POP		 	 
- stack 0: 0x71C
4574	 409	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4575	 40B	ADD		 	 
- stack 0: 0x720
4576	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4577	 40D	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000300EB001A0105019803050000
4578	 40E	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000300EB001A0105019803050000
- stack 0: 0xF0
4579	 410	SHR		 	 
- stack 1: 0x720
- stack 0: 0xBA
4580	 411	JUMP		 	 
- stack 0: 0x720
4581	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x720
4582	 BB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
4583	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xB
4584	 BF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xB
- stack 0: 0x20
4585	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xB
- stack 0: 0xE
4586	 C3	SUB		 	  ;; # SUB
- stack 1: 0x720
- stack 0: 0x3
4587	 C4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0x3
- stack 0: 0x60
4588	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
4589	 C8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4590	 CA	ADD		 	 
- stack 0: 0x724
4591	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4592	 CC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
4593	 CD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
- stack 0: 0xF0
4594	 CF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x33E
4595	 D0	JUMP		 	 
- stack 0: 0x724
4596	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
4597	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4598	 340	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
4599	 341	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
- stack 0: 0xE0
4600	 343	SHR		 	 
- stack 1: 0x724
- stack 0: 0x33E0001
4601	 344	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4602	 347	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
4603	 348	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
4604	 34A	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
4605	 34B	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
4606	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x0
4607	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x1
4608	 350	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
4609	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
4610	 354	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4611	 356	ADD		 	 
- stack 0: 0x728
4612	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4613	 358	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
4614	 359	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
- stack 0: 0xF0
4615	 35B	SHR		 	 
- stack 1: 0x728
- stack 0: 0x35D
4616	 35C	JUMP		 	 
- stack 0: 0x728
4617	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
4618	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
4619	 35F	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
4620	 360	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
- stack 0: 0xE0
4621	 362	SHR		 	 
- stack 1: 0x728
- stack 0: 0x35D0002
4622	 363	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4623	 366	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
4624	 367	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
4625	 369	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
4626	 36A	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
4627	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
4628	 36E	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4629	 370	ADD		 	 
- stack 0: 0x72C
4630	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4631	 372	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
4632	 373	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
- stack 0: 0xF0
4633	 375	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x377
4634	 376	JUMP		 	 
- stack 0: 0x72C
4635	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x72C
4636	 378	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
4637	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x1
4638	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4639	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x1
4640	 382	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xA0
4641	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
4642	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4643	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
4644	 38C	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x1
4645	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x395
4646	 390	JUMPI		 	 
- stack 0: 0x72C
4647	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x72C
4648	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
4649	 397	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
4650	 398	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
- stack 0: 0xE0
4651	 39A	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x377FFE4
4652	 39B	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
4653	 39E	AND		 	 
- stack 1: 0x72C
- stack 0: 0xFFE4
4654	 39F	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0xFFE4
- stack 0: 0x1
4655	 3A1	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
4656	 3A2	ADD		 	 
- stack 0: 0x710
4657	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x710
- stack 0: 0xFFFFFFFF
4658	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x710
4659	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4660	 3AA	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
4661	 3AB	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
4662	 3AD	SHR		 	 
- stack 1: 0x710
- stack 0: 0x86
4663	 3AE	JUMP		 	 
- stack 0: 0x710
4664	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x710
4665	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x710
- stack 0: 0x710
4666	 88	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
4667	 89	PUSH1	E0	 	 
- stack 2: 0x710
- stack 1: 0x86000E03FB000000A0000B03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
4668	 8B	SHR		 	 
- stack 1: 0x710
- stack 0: 0x86000E
4669	 8C	PUSH2	FFFF	 	 
- stack 2: 0x710
- stack 1: 0x86000E
- stack 0: 0xFFFF
4670	 8F	AND		 	 
- stack 1: 0x710
- stack 0: 0xE
4671	 90	PUSH1	01	 	 
- stack 2: 0x710
- stack 1: 0xE
- stack 0: 0x1
4672	 92	SIGNEXTEND		 	 
- stack 1: 0x710
- stack 0: 0xE
4673	 93	PUSH2	0020	 	 
- stack 2: 0x710
- stack 1: 0xE
- stack 0: 0x20
4674	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x710
4675	 97	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
4676	 99	ADD		 	 
- stack 0: 0x714
4677	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
4678	 9B	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
4679	 9C	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
4680	 9E	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3FB
4681	 9F	JUMP		 	 
- stack 0: 0x714
4682	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x714
4683	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
4684	 3FD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
4685	 3FE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x3FB000000A0000B03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
4686	 400	SHR		 	 
- stack 1: 0x714
- stack 0: 0x3FB0000
4687	 401	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4688	 404	AND		 	 
- stack 1: 0x714
- stack 0: 0x0
4689	 405	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x0
- stack 0: 0x1
4690	 407	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x0
4691	 408	POP		 	 
- stack 0: 0x714
4692	 409	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
4693	 40B	ADD		 	 
- stack 0: 0x718
4694	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
4695	 40D	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
4696	 40E	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
- stack 0: 0xF0
4697	 410	SHR		 	 
- stack 1: 0x718
- stack 0: 0xA0
4698	 411	JUMP		 	 
- stack 0: 0x718
4699	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x718
4700	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
4701	 A2	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
4702	 A3	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0xA0000B03FB000000BA0000033E0001035D00020377FFE400D1000300EB001A
- stack 0: 0xE0
4703	 A5	SHR		 	 
- stack 1: 0x718
- stack 0: 0xA0000B
4704	 A6	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4705	 A9	AND		 	 
- stack 1: 0x718
- stack 0: 0xB
4706	 AA	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0xB
- stack 0: 0x1
4707	 AC	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0xB
4708	 AD	PUSH2	0040	 	 
- stack 2: 0x718
- stack 1: 0xB
- stack 0: 0x40
4709	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x718
4710	 B1	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
4711	 B3	ADD		 	 
- stack 0: 0x71C
4712	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
4713	 B5	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
4714	 B6	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
- stack 0: 0xF0
4715	 B8	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3FB
4716	 B9	JUMP		 	 
- stack 0: 0x71C
4717	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x71C
4718	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
4719	 3FD	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
4720	 3FE	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB001A01050198
- stack 0: 0xE0
4721	 400	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x3FB0000
4722	 401	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4723	 404	AND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4724	 405	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x1
4725	 407	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0x0
4726	 408	POP		 	 
- stack 0: 0x71C
4727	 409	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
4728	 40B	ADD		 	 
- stack 0: 0x720
4729	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
4730	 40D	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000300EB001A0105019803050000
4731	 40E	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000300EB001A0105019803050000
- stack 0: 0xF0
4732	 410	SHR		 	 
- stack 1: 0x720
- stack 0: 0xBA
4733	 411	JUMP		 	 
- stack 0: 0x720
4734	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x720
4735	 BB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
4736	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xB
4737	 BF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xB
- stack 0: 0x20
4738	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xB
- stack 0: 0xE
4739	 C3	SUB		 	  ;; # SUB
- stack 1: 0x720
- stack 0: 0x3
4740	 C4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0x3
- stack 0: 0x60
4741	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
4742	 C8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
4743	 CA	ADD		 	 
- stack 0: 0x724
4744	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
4745	 CC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
4746	 CD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
- stack 0: 0xF0
4747	 CF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x33E
4748	 D0	JUMP		 	 
- stack 0: 0x724
4749	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
4750	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
4751	 340	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
4752	 341	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x33E0001035D00020377FFE400D1000300EB001A01050198030500000086000F
- stack 0: 0xE0
4753	 343	SHR		 	 
- stack 1: 0x724
- stack 0: 0x33E0001
4754	 344	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4755	 347	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
4756	 348	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
4757	 34A	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
4758	 34B	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
4759	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
4760	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x2
4761	 350	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0x80
4762	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
4763	 354	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
4764	 356	ADD		 	 
- stack 0: 0x728
4765	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
4766	 358	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
4767	 359	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
- stack 0: 0xF0
4768	 35B	SHR		 	 
- stack 1: 0x728
- stack 0: 0x35D
4769	 35C	JUMP		 	 
- stack 0: 0x728
4770	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
4771	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
4772	 35F	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
4773	 360	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x35D00020377FFE400D1000300EB001A01050198030500000086000F03FB0000
- stack 0: 0xE0
4774	 362	SHR		 	 
- stack 1: 0x728
- stack 0: 0x35D0002
4775	 363	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4776	 366	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
4777	 367	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
4778	 369	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
4779	 36A	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
4780	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
4781	 36E	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
4782	 370	ADD		 	 
- stack 0: 0x72C
4783	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
4784	 372	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
4785	 373	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x377FFE400D1000300EB001A01050198030500000086000F03FB000003FB0000
- stack 0: 0xF0
4786	 375	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x377
4787	 376	JUMP		 	 
- stack 0: 0x72C
4788	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x72C
4789	 378	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
4790	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x2
4791	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4792	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x2
4793	 382	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
4794	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
4795	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4796	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
4797	 38C	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x0
4798	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x395
4799	 390	JUMPI		 	 
- stack 0: 0x72C
4800	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x72C
- stack 0: 0x3AF
4801	 394	JUMP		 	 
- stack 0: 0x72C
4802	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x72C
4803	 3B0	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
4804	 3B2	ADD		 	 
- stack 0: 0x730
4805	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
4806	 3B4	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0xD1000300EB001A01050198030500000086000F03FB000003FB000000A0000B
4807	 3B5	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0xD1000300EB001A01050198030500000086000F03FB000003FB000000A0000B
- stack 0: 0xF0
4808	 3B7	SHR		 	 
- stack 1: 0x730
- stack 0: 0xD1
4809	 3B8	JUMP		 	 
- stack 0: 0x730
4810	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x730
4811	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x730
- stack 0: 0x730
4812	 D3	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0xD1000300EB001A01050198030500000086000F03FB000003FB000000A0000B
4813	 D4	PUSH1	E0	 	 
- stack 2: 0x730
- stack 1: 0xD1000300EB001A01050198030500000086000F03FB000003FB000000A0000B
- stack 0: 0xE0
4814	 D6	SHR		 	 
- stack 1: 0x730
- stack 0: 0xD10003
4815	 D7	PUSH2	FFFF	 	 
- stack 2: 0x730
- stack 1: 0xD10003
- stack 0: 0xFFFF
4816	 DA	AND		 	 
- stack 1: 0x730
- stack 0: 0x3
4817	 DB	PUSH1	01	 	 
- stack 2: 0x730
- stack 1: 0x3
- stack 0: 0x1
4818	 DD	SIGNEXTEND		 	 
- stack 1: 0x730
- stack 0: 0x3
4819	 DE	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0x3
- stack 0: 0x3A0
4820	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x730
4821	 E2	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
4822	 E4	ADD		 	 
- stack 0: 0x734
4823	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
4824	 E6	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xEB001A01050198030500000086000F03FB000003FB000000A0000B00BA0000
4825	 E7	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0xEB001A01050198030500000086000F03FB000003FB000000A0000B00BA0000
- stack 0: 0xF0
4826	 E9	SHR		 	 
- stack 1: 0x734
- stack 0: 0xEB
4827	 EA	JUMP		 	 
- stack 0: 0x734
4828	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x734
4829	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
4830	 ED	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0xEB001A01050198030500000086000F03FB000003FB000000A0000B00BA0000
4831	 EE	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0xEB001A01050198030500000086000F03FB000003FB000000A0000B00BA0000
- stack 0: 0xE0
4832	 F0	SHR		 	 
- stack 1: 0x734
- stack 0: 0xEB001A
4833	 F1	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0xEB001A
- stack 0: 0xFFFF
4834	 F4	AND		 	 
- stack 1: 0x734
- stack 0: 0x1A
4835	 F5	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x1A
- stack 0: 0x1
4836	 F7	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x1A
4837	 F8	PUSH2	0380	 	 
- stack 2: 0x734
- stack 1: 0x1A
- stack 0: 0x380
4838	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x734
4839	 FC	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
4840	 FE	ADD		 	 
- stack 0: 0x738
4841	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
4842	 100	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x1050198030500000086000F03FB000003FB000000A0000B00BA0000033E0001
4843	 101	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x1050198030500000086000F03FB000003FB000000A0000B00BA0000033E0001
- stack 0: 0xF0
4844	 103	SHR		 	 
- stack 1: 0x738
- stack 0: 0x105
4845	 104	JUMP		 	 
- stack 0: 0x738
4846	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x738
4847	 106	PUSH2	0060	 	 
- stack 1: 0x738
- stack 0: 0x60
4848	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x738
- stack 0: 0x3
4849	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
4850	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x3
4851	 110	PUSH2	03A0	 	 
- stack 2: 0x738
- stack 1: 0x3
- stack 0: 0x3A0
4852	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x738
- stack 1: 0x3
- stack 0: 0x3
4853	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
4854	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x738
- stack 1: 0x3
- stack 0: 0x3
4855	 11A	SUB		 	 
- stack 1: 0x738
- stack 0: 0x0
4856	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x738
- stack 1: 0x0
- stack 0: 0x123
4857	 11E	JUMPI		 	 
- stack 0: 0x738
4858	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x738
- stack 0: 0x13D
4859	 122	JUMP		 	 
- stack 0: 0x738
4860	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x738
4861	 13E	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
4862	 140	ADD		 	 
- stack 0: 0x73C
4863	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
4864	 142	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x30500000086000F03FB000003FB000000A0000B00BA0000033E0001035D0002
4865	 143	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x30500000086000F03FB000003FB000000A0000B00BA0000033E0001035D0002
- stack 0: 0xF0
4866	 145	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x305
4867	 146	JUMP		 	 
- stack 0: 0x73C
4868	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x73C
4869	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x73C
- stack 0: 0x73C
4870	 307	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x30500000086000F03FB000003FB000000A0000B00BA0000033E0001035D0002
4871	 308	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x30500000086000F03FB000003FB000000A0000B00BA0000033E0001035D0002
- stack 0: 0xE0
4872	 30A	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x3050000
4873	 30B	PUSH2	FFFF	 	 
- stack 2: 0x73C
- stack 1: 0x3050000
- stack 0: 0xFFFF
4874	 30E	AND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4875	 30F	PUSH1	01	 	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x1
4876	 311	SIGNEXTEND		 	 
- stack 1: 0x73C
- stack 0: 0x0
4877	 312	PUSH2	0080	 	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x80
4878	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x73C
4879	 316	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
4880	 318	ADD		 	 
- stack 0: 0x740
4881	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
4882	 31A	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
4883	 31B	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
4884	 31D	SHR		 	 
- stack 1: 0x740
- stack 0: 0x86
4885	 31E	JUMP		 	 
- stack 0: 0x740
4886	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x740
4887	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
4888	 88	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
4889	 89	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
4890	 8B	SHR		 	 
- stack 1: 0x740
- stack 0: 0x86000F
4891	 8C	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x86000F
- stack 0: 0xFFFF
4892	 8F	AND		 	 
- stack 1: 0x740
- stack 0: 0xF
4893	 90	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0xF
- stack 0: 0x1
4894	 92	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0xF
4895	 93	PUSH2	0020	 	 
- stack 2: 0x740
- stack 1: 0xF
- stack 0: 0x20
4896	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x740
4897	 97	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
4898	 99	ADD		 	 
- stack 0: 0x744
4899	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
4900	 9B	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
4901	 9C	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
4902	 9E	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3FB
4903	 9F	JUMP		 	 
- stack 0: 0x744
4904	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x744
4905	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
4906	 3FD	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
4907	 3FE	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
4908	 400	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3FB0000
4909	 401	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4910	 404	AND		 	 
- stack 1: 0x744
- stack 0: 0x0
4911	 405	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x1
4912	 407	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x0
4913	 408	POP		 	 
- stack 0: 0x744
4914	 409	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
4915	 40B	ADD		 	 
- stack 0: 0x748
4916	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
4917	 40D	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
4918	 40E	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
- stack 0: 0xF0
4919	 410	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3FB
4920	 411	JUMP		 	 
- stack 0: 0x748
4921	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x748
4922	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
4923	 3FD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
4924	 3FE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
- stack 0: 0xE0
4925	 400	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3FB0000
4926	 401	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
4927	 404	AND		 	 
- stack 1: 0x748
- stack 0: 0x0
4928	 405	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x1
4929	 407	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x0
4930	 408	POP		 	 
- stack 0: 0x748
4931	 409	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
4932	 40B	ADD		 	 
- stack 0: 0x74C
4933	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
4934	 40D	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
4935	 40E	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
- stack 0: 0xF0
4936	 410	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xA0
4937	 411	JUMP		 	 
- stack 0: 0x74C
4938	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x74C
4939	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
4940	 A2	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
4941	 A3	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
- stack 0: 0xE0
4942	 A5	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B
4943	 A6	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
4944	 A9	AND		 	 
- stack 1: 0x74C
- stack 0: 0xB
4945	 AA	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xB
- stack 0: 0x1
4946	 AC	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xB
4947	 AD	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xB
- stack 0: 0x40
4948	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x74C
4949	 B1	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
4950	 B3	ADD		 	 
- stack 0: 0x750
4951	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
4952	 B5	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB001B0105016803050000
4953	 B6	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB001B0105016803050000
- stack 0: 0xF0
4954	 B8	SHR		 	 
- stack 1: 0x750
- stack 0: 0xBA
4955	 B9	JUMP		 	 
- stack 0: 0x750
4956	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x750
4957	 BB	PUSH2	0040	 	 
- stack 1: 0x750
- stack 0: 0x40
4958	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x750
- stack 0: 0xB
4959	 BF	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xB
- stack 0: 0x20
4960	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xB
- stack 0: 0xF
4961	 C3	SUB		 	  ;; # SUB
- stack 1: 0x750
- stack 0: 0x4
4962	 C4	PUSH2	0060	 	 
- stack 2: 0x750
- stack 1: 0x4
- stack 0: 0x60
4963	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x750
4964	 C8	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
4965	 CA	ADD		 	 
- stack 0: 0x754
4966	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
4967	 CC	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
4968	 CD	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
- stack 0: 0xF0
4969	 CF	SHR		 	 
- stack 1: 0x754
- stack 0: 0x33E
4970	 D0	JUMP		 	 
- stack 0: 0x754
4971	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x754
4972	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
4973	 340	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
4974	 341	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
- stack 0: 0xE0
4975	 343	SHR		 	 
- stack 1: 0x754
- stack 0: 0x33E0001
4976	 344	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x33E0001
- stack 0: 0xFFFF
4977	 347	AND		 	 
- stack 1: 0x754
- stack 0: 0x1
4978	 348	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x1
4979	 34A	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x1
4980	 34B	PUSH2	0080	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x80
4981	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x0
4982	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x754
- stack 0: 0x1
4983	 350	PUSH2	0080	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x80
4984	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x754
4985	 354	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
4986	 356	ADD		 	 
- stack 0: 0x758
4987	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
4988	 358	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
4989	 359	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
- stack 0: 0xF0
4990	 35B	SHR		 	 
- stack 1: 0x758
- stack 0: 0x35D
4991	 35C	JUMP		 	 
- stack 0: 0x758
4992	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x758
4993	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
4994	 35F	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
4995	 360	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
- stack 0: 0xE0
4996	 362	SHR		 	 
- stack 1: 0x758
- stack 0: 0x35D0002
4997	 363	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x35D0002
- stack 0: 0xFFFF
4998	 366	AND		 	 
- stack 1: 0x758
- stack 0: 0x2
4999	 367	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x2
- stack 0: 0x1
5000	 369	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x2
5001	 36A	PUSH2	00A0	 	 
- stack 2: 0x758
- stack 1: 0x2
- stack 0: 0xA0
5002	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x758
5003	 36E	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5004	 370	ADD		 	 
- stack 0: 0x75C
5005	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5006	 372	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
5007	 373	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
- stack 0: 0xF0
5008	 375	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x377
5009	 376	JUMP		 	 
- stack 0: 0x75C
5010	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x75C
5011	 378	PUSH2	0080	 	 
- stack 1: 0x75C
- stack 0: 0x80
5012	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x75C
- stack 0: 0x1
5013	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5014	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x75C
- stack 0: 0x1
5015	 382	PUSH2	00A0	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0xA0
5016	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x2
5017	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x75C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5018	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x2
5019	 38C	SUB		 	 
- stack 1: 0x75C
- stack 0: 0x1
5020	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x395
5021	 390	JUMPI		 	 
- stack 0: 0x75C
5022	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x75C
5023	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5024	 397	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
5025	 398	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
- stack 0: 0xE0
5026	 39A	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x377FFE4
5027	 39B	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
5028	 39E	AND		 	 
- stack 1: 0x75C
- stack 0: 0xFFE4
5029	 39F	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0xFFE4
- stack 0: 0x1
5030	 3A1	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5031	 3A2	ADD		 	 
- stack 0: 0x740
5032	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x740
- stack 0: 0xFFFFFFFF
5033	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x740
5034	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5035	 3AA	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
5036	 3AB	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
5037	 3AD	SHR		 	 
- stack 1: 0x740
- stack 0: 0x86
5038	 3AE	JUMP		 	 
- stack 0: 0x740
5039	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x740
5040	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
5041	 88	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
5042	 89	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x86000F03FB000003FB000000A0000B00BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
5043	 8B	SHR		 	 
- stack 1: 0x740
- stack 0: 0x86000F
5044	 8C	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x86000F
- stack 0: 0xFFFF
5045	 8F	AND		 	 
- stack 1: 0x740
- stack 0: 0xF
5046	 90	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0xF
- stack 0: 0x1
5047	 92	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0xF
5048	 93	PUSH2	0020	 	 
- stack 2: 0x740
- stack 1: 0xF
- stack 0: 0x20
5049	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x740
5050	 97	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5051	 99	ADD		 	 
- stack 0: 0x744
5052	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5053	 9B	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
5054	 9C	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
5055	 9E	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3FB
5056	 9F	JUMP		 	 
- stack 0: 0x744
5057	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x744
5058	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5059	 3FD	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
5060	 3FE	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x3FB000003FB000000A0000B00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
5061	 400	SHR		 	 
- stack 1: 0x744
- stack 0: 0x3FB0000
5062	 401	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5063	 404	AND		 	 
- stack 1: 0x744
- stack 0: 0x0
5064	 405	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x0
- stack 0: 0x1
5065	 407	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x0
5066	 408	POP		 	 
- stack 0: 0x744
5067	 409	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5068	 40B	ADD		 	 
- stack 0: 0x748
5069	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5070	 40D	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
5071	 40E	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
- stack 0: 0xF0
5072	 410	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3FB
5073	 411	JUMP		 	 
- stack 0: 0x748
5074	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x748
5075	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5076	 3FD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
5077	 3FE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0x3FB000000A0000B00BA0000033E0001035D00020377FFE400D1000400EB001B
- stack 0: 0xE0
5078	 400	SHR		 	 
- stack 1: 0x748
- stack 0: 0x3FB0000
5079	 401	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5080	 404	AND		 	 
- stack 1: 0x748
- stack 0: 0x0
5081	 405	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x1
5082	 407	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0x0
5083	 408	POP		 	 
- stack 0: 0x748
5084	 409	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5085	 40B	ADD		 	 
- stack 0: 0x74C
5086	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5087	 40D	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
5088	 40E	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
- stack 0: 0xF0
5089	 410	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xA0
5090	 411	JUMP		 	 
- stack 0: 0x74C
5091	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x74C
5092	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5093	 A2	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
5094	 A3	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B00BA0000033E0001035D00020377FFE400D1000400EB001B01050168
- stack 0: 0xE0
5095	 A5	SHR		 	 
- stack 1: 0x74C
- stack 0: 0xA0000B
5096	 A6	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5097	 A9	AND		 	 
- stack 1: 0x74C
- stack 0: 0xB
5098	 AA	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0xB
- stack 0: 0x1
5099	 AC	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0xB
5100	 AD	PUSH2	0040	 	 
- stack 2: 0x74C
- stack 1: 0xB
- stack 0: 0x40
5101	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x74C
5102	 B1	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5103	 B3	ADD		 	 
- stack 0: 0x750
5104	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5105	 B5	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB001B0105016803050000
5106	 B6	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB001B0105016803050000
- stack 0: 0xF0
5107	 B8	SHR		 	 
- stack 1: 0x750
- stack 0: 0xBA
5108	 B9	JUMP		 	 
- stack 0: 0x750
5109	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x750
5110	 BB	PUSH2	0040	 	 
- stack 1: 0x750
- stack 0: 0x40
5111	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x750
- stack 0: 0xB
5112	 BF	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xB
- stack 0: 0x20
5113	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xB
- stack 0: 0xF
5114	 C3	SUB		 	  ;; # SUB
- stack 1: 0x750
- stack 0: 0x4
5115	 C4	PUSH2	0060	 	 
- stack 2: 0x750
- stack 1: 0x4
- stack 0: 0x60
5116	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x750
5117	 C8	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5118	 CA	ADD		 	 
- stack 0: 0x754
5119	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5120	 CC	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
5121	 CD	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
- stack 0: 0xF0
5122	 CF	SHR		 	 
- stack 1: 0x754
- stack 0: 0x33E
5123	 D0	JUMP		 	 
- stack 0: 0x754
5124	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x754
5125	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5126	 340	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
5127	 341	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001B010501680305000000A0000B
- stack 0: 0xE0
5128	 343	SHR		 	 
- stack 1: 0x754
- stack 0: 0x33E0001
5129	 344	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x33E0001
- stack 0: 0xFFFF
5130	 347	AND		 	 
- stack 1: 0x754
- stack 0: 0x1
5131	 348	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x1
5132	 34A	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x1
5133	 34B	PUSH2	0080	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x80
5134	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x1
5135	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x754
- stack 0: 0x2
5136	 350	PUSH2	0080	 	 
- stack 2: 0x754
- stack 1: 0x2
- stack 0: 0x80
5137	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x754
5138	 354	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5139	 356	ADD		 	 
- stack 0: 0x758
5140	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5141	 358	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
5142	 359	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
- stack 0: 0xF0
5143	 35B	SHR		 	 
- stack 1: 0x758
- stack 0: 0x35D
5144	 35C	JUMP		 	 
- stack 0: 0x758
5145	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x758
5146	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
5147	 35F	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
5148	 360	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x35D00020377FFE400D1000400EB001B010501680305000000A0000B0086000D
- stack 0: 0xE0
5149	 362	SHR		 	 
- stack 1: 0x758
- stack 0: 0x35D0002
5150	 363	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x35D0002
- stack 0: 0xFFFF
5151	 366	AND		 	 
- stack 1: 0x758
- stack 0: 0x2
5152	 367	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x2
- stack 0: 0x1
5153	 369	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x2
5154	 36A	PUSH2	00A0	 	 
- stack 2: 0x758
- stack 1: 0x2
- stack 0: 0xA0
5155	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x758
5156	 36E	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5157	 370	ADD		 	 
- stack 0: 0x75C
5158	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5159	 372	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
5160	 373	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x377FFE400D1000400EB001B010501680305000000A0000B0086000D00BA0000
- stack 0: 0xF0
5161	 375	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x377
5162	 376	JUMP		 	 
- stack 0: 0x75C
5163	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x75C
5164	 378	PUSH2	0080	 	 
- stack 1: 0x75C
- stack 0: 0x80
5165	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x75C
- stack 0: 0x2
5166	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5167	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x75C
- stack 0: 0x2
5168	 382	PUSH2	00A0	 	 
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0xA0
5169	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0x2
5170	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x75C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5171	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0x2
5172	 38C	SUB		 	 
- stack 1: 0x75C
- stack 0: 0x0
5173	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x395
5174	 390	JUMPI		 	 
- stack 0: 0x75C
5175	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x75C
- stack 0: 0x3AF
5176	 394	JUMP		 	 
- stack 0: 0x75C
5177	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x75C
5178	 3B0	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5179	 3B2	ADD		 	 
- stack 0: 0x760
5180	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5181	 3B4	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xD1000400EB001B010501680305000000A0000B0086000D00BA0000033E0001
5182	 3B5	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0xD1000400EB001B010501680305000000A0000B0086000D00BA0000033E0001
- stack 0: 0xF0
5183	 3B7	SHR		 	 
- stack 1: 0x760
- stack 0: 0xD1
5184	 3B8	JUMP		 	 
- stack 0: 0x760
5185	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x760
5186	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5187	 D3	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0xD1000400EB001B010501680305000000A0000B0086000D00BA0000033E0001
5188	 D4	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0xD1000400EB001B010501680305000000A0000B0086000D00BA0000033E0001
- stack 0: 0xE0
5189	 D6	SHR		 	 
- stack 1: 0x760
- stack 0: 0xD10004
5190	 D7	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0xD10004
- stack 0: 0xFFFF
5191	 DA	AND		 	 
- stack 1: 0x760
- stack 0: 0x4
5192	 DB	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x4
- stack 0: 0x1
5193	 DD	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x4
5194	 DE	PUSH2	03A0	 	 
- stack 2: 0x760
- stack 1: 0x4
- stack 0: 0x3A0
5195	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x760
5196	 E2	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5197	 E4	ADD		 	 
- stack 0: 0x764
5198	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5199	 E6	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xEB001B010501680305000000A0000B0086000D00BA0000033E0001035D0002
5200	 E7	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0xEB001B010501680305000000A0000B0086000D00BA0000033E0001035D0002
- stack 0: 0xF0
5201	 E9	SHR		 	 
- stack 1: 0x764
- stack 0: 0xEB
5202	 EA	JUMP		 	 
- stack 0: 0x764
5203	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x764
5204	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5205	 ED	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xEB001B010501680305000000A0000B0086000D00BA0000033E0001035D0002
5206	 EE	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0xEB001B010501680305000000A0000B0086000D00BA0000033E0001035D0002
- stack 0: 0xE0
5207	 F0	SHR		 	 
- stack 1: 0x764
- stack 0: 0xEB001B
5208	 F1	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0xEB001B
- stack 0: 0xFFFF
5209	 F4	AND		 	 
- stack 1: 0x764
- stack 0: 0x1B
5210	 F5	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x1B
- stack 0: 0x1
5211	 F7	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x1B
5212	 F8	PUSH2	0380	 	 
- stack 2: 0x764
- stack 1: 0x1B
- stack 0: 0x380
5213	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x764
5214	 FC	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5215	 FE	ADD		 	 
- stack 0: 0x768
5216	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5217	 100	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x10501680305000000A0000B0086000D00BA0000033E0001035D00020377FFEC
5218	 101	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x10501680305000000A0000B0086000D00BA0000033E0001035D00020377FFEC
- stack 0: 0xF0
5219	 103	SHR		 	 
- stack 1: 0x768
- stack 0: 0x105
5220	 104	JUMP		 	 
- stack 0: 0x768
5221	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x768
5222	 106	PUSH2	0060	 	 
- stack 1: 0x768
- stack 0: 0x60
5223	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x768
- stack 0: 0x4
5224	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x768
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
5225	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x768
- stack 0: 0x4
5226	 110	PUSH2	03A0	 	 
- stack 2: 0x768
- stack 1: 0x4
- stack 0: 0x3A0
5227	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x768
- stack 1: 0x4
- stack 0: 0x4
5228	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x768
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
5229	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x768
- stack 1: 0x4
- stack 0: 0x4
5230	 11A	SUB		 	 
- stack 1: 0x768
- stack 0: 0x0
5231	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x768
- stack 1: 0x0
- stack 0: 0x123
5232	 11E	JUMPI		 	 
- stack 0: 0x768
5233	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x768
- stack 0: 0x13D
5234	 122	JUMP		 	 
- stack 0: 0x768
5235	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x768
5236	 13E	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5237	 140	ADD		 	 
- stack 0: 0x76C
5238	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5239	 142	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x305000000A0000B0086000D00BA0000033E0001035D00020377FFEC00D10002
5240	 143	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x305000000A0000B0086000D00BA0000033E0001035D00020377FFEC00D10002
- stack 0: 0xF0
5241	 145	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x305
5242	 146	JUMP		 	 
- stack 0: 0x76C
5243	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x76C
5244	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5245	 307	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x305000000A0000B0086000D00BA0000033E0001035D00020377FFEC00D10002
5246	 308	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x305000000A0000B0086000D00BA0000033E0001035D00020377FFEC00D10002
- stack 0: 0xE0
5247	 30A	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x3050000
5248	 30B	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x3050000
- stack 0: 0xFFFF
5249	 30E	AND		 	 
- stack 1: 0x76C
- stack 0: 0x0
5250	 30F	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x0
- stack 0: 0x1
5251	 311	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x0
5252	 312	PUSH2	0080	 	 
- stack 2: 0x76C
- stack 1: 0x0
- stack 0: 0x80
5253	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x76C
5254	 316	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5255	 318	ADD		 	 
- stack 0: 0x770
5256	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5257	 31A	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
5258	 31B	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
- stack 0: 0xF0
5259	 31D	SHR		 	 
- stack 1: 0x770
- stack 0: 0xA0
5260	 31E	JUMP		 	 
- stack 0: 0x770
5261	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x770
5262	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
5263	 A2	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
5264	 A3	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
- stack 0: 0xE0
5265	 A5	SHR		 	 
- stack 1: 0x770
- stack 0: 0xA0000B
5266	 A6	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5267	 A9	AND		 	 
- stack 1: 0x770
- stack 0: 0xB
5268	 AA	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0xB
- stack 0: 0x1
5269	 AC	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0xB
5270	 AD	PUSH2	0040	 	 
- stack 2: 0x770
- stack 1: 0xB
- stack 0: 0x40
5271	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x770
5272	 B1	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5273	 B3	ADD		 	 
- stack 0: 0x774
5274	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5275	 B5	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
5276	 B6	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
- stack 0: 0xF0
5277	 B8	SHR		 	 
- stack 1: 0x774
- stack 0: 0x86
5278	 B9	JUMP		 	 
- stack 0: 0x774
5279	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x774
5280	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5281	 88	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
5282	 89	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
- stack 0: 0xE0
5283	 8B	SHR		 	 
- stack 1: 0x774
- stack 0: 0x86000D
5284	 8C	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x86000D
- stack 0: 0xFFFF
5285	 8F	AND		 	 
- stack 1: 0x774
- stack 0: 0xD
5286	 90	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0xD
- stack 0: 0x1
5287	 92	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0xD
5288	 93	PUSH2	0020	 	 
- stack 2: 0x774
- stack 1: 0xD
- stack 0: 0x20
5289	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x774
5290	 97	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5291	 99	ADD		 	 
- stack 0: 0x778
5292	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5293	 9B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xBA0000033E0001035D00020377FFEC00D1000200EB001C0105014003050000
5294	 9C	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0xBA0000033E0001035D00020377FFEC00D1000200EB001C0105014003050000
- stack 0: 0xF0
5295	 9E	SHR		 	 
- stack 1: 0x778
- stack 0: 0xBA
5296	 9F	JUMP		 	 
- stack 0: 0x778
5297	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x778
5298	 BB	PUSH2	0040	 	 
- stack 1: 0x778
- stack 0: 0x40
5299	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x778
- stack 0: 0xB
5300	 BF	PUSH2	0020	 	 
- stack 2: 0x778
- stack 1: 0xB
- stack 0: 0x20
5301	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x778
- stack 1: 0xB
- stack 0: 0xD
5302	 C3	SUB		 	  ;; # SUB
- stack 1: 0x778
- stack 0: 0x2
5303	 C4	PUSH2	0060	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x60
5304	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x778
5305	 C8	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5306	 CA	ADD		 	 
- stack 0: 0x77C
5307	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5308	 CC	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
5309	 CD	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
- stack 0: 0xF0
5310	 CF	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x33E
5311	 D0	JUMP		 	 
- stack 0: 0x77C
5312	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x77C
5313	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5314	 340	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
5315	 341	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
- stack 0: 0xE0
5316	 343	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001
5317	 344	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001
- stack 0: 0xFFFF
5318	 347	AND		 	 
- stack 1: 0x77C
- stack 0: 0x1
5319	 348	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x1
5320	 34A	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x1
5321	 34B	PUSH2	0080	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x80
5322	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x0
5323	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x77C
- stack 0: 0x1
5324	 350	PUSH2	0080	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x80
5325	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x77C
5326	 354	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5327	 356	ADD		 	 
- stack 0: 0x780
5328	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5329	 358	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
5330	 359	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
- stack 0: 0xF0
5331	 35B	SHR		 	 
- stack 1: 0x780
- stack 0: 0x35D
5332	 35C	JUMP		 	 
- stack 0: 0x780
5333	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x780
5334	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5335	 35F	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
5336	 360	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
- stack 0: 0xE0
5337	 362	SHR		 	 
- stack 1: 0x780
- stack 0: 0x35D0002
5338	 363	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x35D0002
- stack 0: 0xFFFF
5339	 366	AND		 	 
- stack 1: 0x780
- stack 0: 0x2
5340	 367	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0x1
5341	 369	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x2
5342	 36A	PUSH2	00A0	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0xA0
5343	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x780
5344	 36E	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5345	 370	ADD		 	 
- stack 0: 0x784
5346	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5347	 372	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
5348	 373	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
- stack 0: 0xF0
5349	 375	SHR		 	 
- stack 1: 0x784
- stack 0: 0x377
5350	 376	JUMP		 	 
- stack 0: 0x784
5351	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x784
5352	 378	PUSH2	0080	 	 
- stack 1: 0x784
- stack 0: 0x80
5353	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x784
- stack 0: 0x1
5354	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5355	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0x1
5356	 382	PUSH2	00A0	 	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0xA0
5357	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x2
5358	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5359	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x2
5360	 38C	SUB		 	 
- stack 1: 0x784
- stack 0: 0x1
5361	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x784
- stack 1: 0x1
- stack 0: 0x395
5362	 390	JUMPI		 	 
- stack 0: 0x784
5363	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x784
5364	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x784
- stack 0: 0x784
5365	 397	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
5366	 398	PUSH1	E0	 	 
- stack 2: 0x784
- stack 1: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
- stack 0: 0xE0
5367	 39A	SHR		 	 
- stack 1: 0x784
- stack 0: 0x377FFEC
5368	 39B	PUSH2	FFFF	 	 
- stack 2: 0x784
- stack 1: 0x377FFEC
- stack 0: 0xFFFF
5369	 39E	AND		 	 
- stack 1: 0x784
- stack 0: 0xFFEC
5370	 39F	PUSH1	01	 	 
- stack 2: 0x784
- stack 1: 0xFFEC
- stack 0: 0x1
5371	 3A1	SIGNEXTEND		 	 
- stack 1: 0x784
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
5372	 3A2	ADD		 	 
- stack 0: 0x770
5373	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x770
- stack 0: 0xFFFFFFFF
5374	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x770
5375	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5376	 3AA	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
5377	 3AB	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
- stack 0: 0xF0
5378	 3AD	SHR		 	 
- stack 1: 0x770
- stack 0: 0xA0
5379	 3AE	JUMP		 	 
- stack 0: 0x770
5380	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x770
5381	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
5382	 A2	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
5383	 A3	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0xA0000B0086000D00BA0000033E0001035D00020377FFEC00D1000200EB001C
- stack 0: 0xE0
5384	 A5	SHR		 	 
- stack 1: 0x770
- stack 0: 0xA0000B
5385	 A6	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5386	 A9	AND		 	 
- stack 1: 0x770
- stack 0: 0xB
5387	 AA	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0xB
- stack 0: 0x1
5388	 AC	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0xB
5389	 AD	PUSH2	0040	 	 
- stack 2: 0x770
- stack 1: 0xB
- stack 0: 0x40
5390	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x770
5391	 B1	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5392	 B3	ADD		 	 
- stack 0: 0x774
5393	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5394	 B5	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
5395	 B6	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
- stack 0: 0xF0
5396	 B8	SHR		 	 
- stack 1: 0x774
- stack 0: 0x86
5397	 B9	JUMP		 	 
- stack 0: 0x774
5398	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x774
5399	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x774
- stack 0: 0x774
5400	 88	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
5401	 89	PUSH1	E0	 	 
- stack 2: 0x774
- stack 1: 0x86000D00BA0000033E0001035D00020377FFEC00D1000200EB001C01050140
- stack 0: 0xE0
5402	 8B	SHR		 	 
- stack 1: 0x774
- stack 0: 0x86000D
5403	 8C	PUSH2	FFFF	 	 
- stack 2: 0x774
- stack 1: 0x86000D
- stack 0: 0xFFFF
5404	 8F	AND		 	 
- stack 1: 0x774
- stack 0: 0xD
5405	 90	PUSH1	01	 	 
- stack 2: 0x774
- stack 1: 0xD
- stack 0: 0x1
5406	 92	SIGNEXTEND		 	 
- stack 1: 0x774
- stack 0: 0xD
5407	 93	PUSH2	0020	 	 
- stack 2: 0x774
- stack 1: 0xD
- stack 0: 0x20
5408	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x774
5409	 97	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5410	 99	ADD		 	 
- stack 0: 0x778
5411	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5412	 9B	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0xBA0000033E0001035D00020377FFEC00D1000200EB001C0105014003050000
5413	 9C	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0xBA0000033E0001035D00020377FFEC00D1000200EB001C0105014003050000
- stack 0: 0xF0
5414	 9E	SHR		 	 
- stack 1: 0x778
- stack 0: 0xBA
5415	 9F	JUMP		 	 
- stack 0: 0x778
5416	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x778
5417	 BB	PUSH2	0040	 	 
- stack 1: 0x778
- stack 0: 0x40
5418	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x778
- stack 0: 0xB
5419	 BF	PUSH2	0020	 	 
- stack 2: 0x778
- stack 1: 0xB
- stack 0: 0x20
5420	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x778
- stack 1: 0xB
- stack 0: 0xD
5421	 C3	SUB		 	  ;; # SUB
- stack 1: 0x778
- stack 0: 0x2
5422	 C4	PUSH2	0060	 	 
- stack 2: 0x778
- stack 1: 0x2
- stack 0: 0x60
5423	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x778
5424	 C8	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5425	 CA	ADD		 	 
- stack 0: 0x77C
5426	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5427	 CC	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
5428	 CD	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
- stack 0: 0xF0
5429	 CF	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x33E
5430	 D0	JUMP		 	 
- stack 0: 0x77C
5431	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x77C
5432	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x77C
- stack 0: 0x77C
5433	 340	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
5434	 341	PUSH1	E0	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001035D00020377FFEC00D1000200EB001C010501400305000000A0000B
- stack 0: 0xE0
5435	 343	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x33E0001
5436	 344	PUSH2	FFFF	 	 
- stack 2: 0x77C
- stack 1: 0x33E0001
- stack 0: 0xFFFF
5437	 347	AND		 	 
- stack 1: 0x77C
- stack 0: 0x1
5438	 348	PUSH1	01	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x1
5439	 34A	SIGNEXTEND		 	 
- stack 1: 0x77C
- stack 0: 0x1
5440	 34B	PUSH2	0080	 	 
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x80
5441	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x77C
- stack 1: 0x1
- stack 0: 0x1
5442	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x77C
- stack 0: 0x2
5443	 350	PUSH2	0080	 	 
- stack 2: 0x77C
- stack 1: 0x2
- stack 0: 0x80
5444	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x77C
5445	 354	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5446	 356	ADD		 	 
- stack 0: 0x780
5447	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5448	 358	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
5449	 359	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
- stack 0: 0xF0
5450	 35B	SHR		 	 
- stack 1: 0x780
- stack 0: 0x35D
5451	 35C	JUMP		 	 
- stack 0: 0x780
5452	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x780
5453	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5454	 35F	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
5455	 360	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x35D00020377FFEC00D1000200EB001C010501400305000000A0000B0086000E
- stack 0: 0xE0
5456	 362	SHR		 	 
- stack 1: 0x780
- stack 0: 0x35D0002
5457	 363	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x35D0002
- stack 0: 0xFFFF
5458	 366	AND		 	 
- stack 1: 0x780
- stack 0: 0x2
5459	 367	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0x1
5460	 369	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x2
5461	 36A	PUSH2	00A0	 	 
- stack 2: 0x780
- stack 1: 0x2
- stack 0: 0xA0
5462	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x780
5463	 36E	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5464	 370	ADD		 	 
- stack 0: 0x784
5465	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5466	 372	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
5467	 373	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x377FFEC00D1000200EB001C010501400305000000A0000B0086000E03FB0000
- stack 0: 0xF0
5468	 375	SHR		 	 
- stack 1: 0x784
- stack 0: 0x377
5469	 376	JUMP		 	 
- stack 0: 0x784
5470	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x784
5471	 378	PUSH2	0080	 	 
- stack 1: 0x784
- stack 0: 0x80
5472	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x784
- stack 0: 0x2
5473	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5474	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0x2
5475	 382	PUSH2	00A0	 	 
- stack 2: 0x784
- stack 1: 0x2
- stack 0: 0xA0
5476	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x784
- stack 1: 0x2
- stack 0: 0x2
5477	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5478	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0x2
- stack 0: 0x2
5479	 38C	SUB		 	 
- stack 1: 0x784
- stack 0: 0x0
5480	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x395
5481	 390	JUMPI		 	 
- stack 0: 0x784
5482	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x784
- stack 0: 0x3AF
5483	 394	JUMP		 	 
- stack 0: 0x784
5484	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x784
5485	 3B0	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5486	 3B2	ADD		 	 
- stack 0: 0x788
5487	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5488	 3B4	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0xD1000200EB001C010501400305000000A0000B0086000E03FB000000BA0000
5489	 3B5	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0xD1000200EB001C010501400305000000A0000B0086000E03FB000000BA0000
- stack 0: 0xF0
5490	 3B7	SHR		 	 
- stack 1: 0x788
- stack 0: 0xD1
5491	 3B8	JUMP		 	 
- stack 0: 0x788
5492	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x788
5493	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5494	 D3	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0xD1000200EB001C010501400305000000A0000B0086000E03FB000000BA0000
5495	 D4	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0xD1000200EB001C010501400305000000A0000B0086000E03FB000000BA0000
- stack 0: 0xE0
5496	 D6	SHR		 	 
- stack 1: 0x788
- stack 0: 0xD10002
5497	 D7	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0xD10002
- stack 0: 0xFFFF
5498	 DA	AND		 	 
- stack 1: 0x788
- stack 0: 0x2
5499	 DB	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0x1
5500	 DD	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x2
5501	 DE	PUSH2	03A0	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0x3A0
5502	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x788
5503	 E2	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5504	 E4	ADD		 	 
- stack 0: 0x78C
5505	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5506	 E6	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0xEB001C010501400305000000A0000B0086000E03FB000000BA0000033E0001
5507	 E7	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0xEB001C010501400305000000A0000B0086000E03FB000000BA0000033E0001
- stack 0: 0xF0
5508	 E9	SHR		 	 
- stack 1: 0x78C
- stack 0: 0xEB
5509	 EA	JUMP		 	 
- stack 0: 0x78C
5510	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x78C
5511	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5512	 ED	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0xEB001C010501400305000000A0000B0086000E03FB000000BA0000033E0001
5513	 EE	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0xEB001C010501400305000000A0000B0086000E03FB000000BA0000033E0001
- stack 0: 0xE0
5514	 F0	SHR		 	 
- stack 1: 0x78C
- stack 0: 0xEB001C
5515	 F1	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0xEB001C
- stack 0: 0xFFFF
5516	 F4	AND		 	 
- stack 1: 0x78C
- stack 0: 0x1C
5517	 F5	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x1C
- stack 0: 0x1
5518	 F7	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x1C
5519	 F8	PUSH2	0380	 	 
- stack 2: 0x78C
- stack 1: 0x1C
- stack 0: 0x380
5520	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x78C
5521	 FC	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5522	 FE	ADD		 	 
- stack 0: 0x790
5523	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5524	 100	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x10501400305000000A0000B0086000E03FB000000BA0000033E0001035D0002
5525	 101	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x10501400305000000A0000B0086000E03FB000000BA0000033E0001035D0002
- stack 0: 0xF0
5526	 103	SHR		 	 
- stack 1: 0x790
- stack 0: 0x105
5527	 104	JUMP		 	 
- stack 0: 0x790
5528	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x790
5529	 106	PUSH2	0060	 	 
- stack 1: 0x790
- stack 0: 0x60
5530	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x790
- stack 0: 0x2
5531	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5532	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x790
- stack 0: 0x2
5533	 110	PUSH2	03A0	 	 
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0x3A0
5534	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0x2
5535	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x790
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5536	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0x2
5537	 11A	SUB		 	 
- stack 1: 0x790
- stack 0: 0x0
5538	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x123
5539	 11E	JUMPI		 	 
- stack 0: 0x790
5540	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x790
- stack 0: 0x13D
5541	 122	JUMP		 	 
- stack 0: 0x790
5542	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x790
5543	 13E	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5544	 140	ADD		 	 
- stack 0: 0x794
5545	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5546	 142	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x305000000A0000B0086000E03FB000000BA0000033E0001035D00020377FFE8
5547	 143	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x305000000A0000B0086000E03FB000000BA0000033E0001035D00020377FFE8
- stack 0: 0xF0
5548	 145	SHR		 	 
- stack 1: 0x794
- stack 0: 0x305
5549	 146	JUMP		 	 
- stack 0: 0x794
5550	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x794
5551	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
5552	 307	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x305000000A0000B0086000E03FB000000BA0000033E0001035D00020377FFE8
5553	 308	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x305000000A0000B0086000E03FB000000BA0000033E0001035D00020377FFE8
- stack 0: 0xE0
5554	 30A	SHR		 	 
- stack 1: 0x794
- stack 0: 0x3050000
5555	 30B	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x3050000
- stack 0: 0xFFFF
5556	 30E	AND		 	 
- stack 1: 0x794
- stack 0: 0x0
5557	 30F	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x1
5558	 311	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x0
5559	 312	PUSH2	0080	 	 
- stack 2: 0x794
- stack 1: 0x0
- stack 0: 0x80
5560	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x794
5561	 316	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5562	 318	ADD		 	 
- stack 0: 0x798
5563	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5564	 31A	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
5565	 31B	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xF0
5566	 31D	SHR		 	 
- stack 1: 0x798
- stack 0: 0xA0
5567	 31E	JUMP		 	 
- stack 0: 0x798
5568	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x798
5569	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
5570	 A2	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
5571	 A3	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xE0
5572	 A5	SHR		 	 
- stack 1: 0x798
- stack 0: 0xA0000B
5573	 A6	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5574	 A9	AND		 	 
- stack 1: 0x798
- stack 0: 0xB
5575	 AA	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0xB
- stack 0: 0x1
5576	 AC	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0xB
5577	 AD	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0xB
- stack 0: 0x40
5578	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x798
5579	 B1	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5580	 B3	ADD		 	 
- stack 0: 0x79C
5581	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5582	 B5	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
5583	 B6	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
- stack 0: 0xF0
5584	 B8	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x86
5585	 B9	JUMP		 	 
- stack 0: 0x79C
5586	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x79C
5587	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5588	 88	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
5589	 89	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
- stack 0: 0xE0
5590	 8B	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x86000E
5591	 8C	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x86000E
- stack 0: 0xFFFF
5592	 8F	AND		 	 
- stack 1: 0x79C
- stack 0: 0xE
5593	 90	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0xE
- stack 0: 0x1
5594	 92	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0xE
5595	 93	PUSH2	0020	 	 
- stack 2: 0x79C
- stack 1: 0xE
- stack 0: 0x20
5596	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x79C
5597	 97	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5598	 99	ADD		 	 
- stack 0: 0x7A0
5599	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5600	 9B	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
5601	 9C	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
- stack 0: 0xF0
5602	 9E	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB
5603	 9F	JUMP		 	 
- stack 0: 0x7A0
5604	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A0
5605	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5606	 3FD	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
5607	 3FE	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
- stack 0: 0xE0
5608	 400	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB0000
5609	 401	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5610	 404	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
5611	 405	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x1
5612	 407	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
5613	 408	POP		 	 
- stack 0: 0x7A0
5614	 409	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5615	 40B	ADD		 	 
- stack 0: 0x7A4
5616	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5617	 40D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000300EB001D0105011403050000
5618	 40E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000300EB001D0105011403050000
- stack 0: 0xF0
5619	 410	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0xBA
5620	 411	JUMP		 	 
- stack 0: 0x7A4
5621	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x7A4
5622	 BB	PUSH2	0040	 	 
- stack 1: 0x7A4
- stack 0: 0x40
5623	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A4
- stack 0: 0xB
5624	 BF	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0xB
- stack 0: 0x20
5625	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7A4
- stack 1: 0xB
- stack 0: 0xE
5626	 C3	SUB		 	  ;; # SUB
- stack 1: 0x7A4
- stack 0: 0x3
5627	 C4	PUSH2	0060	 	 
- stack 2: 0x7A4
- stack 1: 0x3
- stack 0: 0x60
5628	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A4
5629	 C8	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5630	 CA	ADD		 	 
- stack 0: 0x7A8
5631	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5632	 CC	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
5633	 CD	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
- stack 0: 0xF0
5634	 CF	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x33E
5635	 D0	JUMP		 	 
- stack 0: 0x7A8
5636	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A8
5637	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5638	 340	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
5639	 341	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
- stack 0: 0xE0
5640	 343	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001
5641	 344	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
5642	 347	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x1
5643	 348	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x1
5644	 34A	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x1
5645	 34B	PUSH2	0080	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x80
5646	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x0
5647	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A8
- stack 0: 0x1
5648	 350	PUSH2	0080	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x80
5649	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A8
5650	 354	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5651	 356	ADD		 	 
- stack 0: 0x7AC
5652	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5653	 358	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
5654	 359	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
- stack 0: 0xF0
5655	 35B	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x35D
5656	 35C	JUMP		 	 
- stack 0: 0x7AC
5657	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7AC
5658	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
5659	 35F	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
5660	 360	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
- stack 0: 0xE0
5661	 362	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x35D0002
5662	 363	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
5663	 366	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x2
5664	 367	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0x1
5665	 369	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x2
5666	 36A	PUSH2	00A0	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0xA0
5667	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x7AC
5668	 36E	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5669	 370	ADD		 	 
- stack 0: 0x7B0
5670	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5671	 372	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
5672	 373	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
- stack 0: 0xF0
5673	 375	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x377
5674	 376	JUMP		 	 
- stack 0: 0x7B0
5675	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7B0
5676	 378	PUSH2	0080	 	 
- stack 1: 0x7B0
- stack 0: 0x80
5677	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B0
- stack 0: 0x1
5678	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5679	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0x1
5680	 382	PUSH2	00A0	 	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0xA0
5681	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x2
5682	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5683	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x2
5684	 38C	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x1
5685	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x7B0
- stack 1: 0x1
- stack 0: 0x395
5686	 390	JUMPI		 	 
- stack 0: 0x7B0
5687	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x7B0
5688	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
5689	 397	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
5690	 398	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
- stack 0: 0xE0
5691	 39A	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x377FFE8
5692	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x377FFE8
- stack 0: 0xFFFF
5693	 39E	AND		 	 
- stack 1: 0x7B0
- stack 0: 0xFFE8
5694	 39F	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0xFFE8
- stack 0: 0x1
5695	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
5696	 3A2	ADD		 	 
- stack 0: 0x798
5697	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x798
- stack 0: 0xFFFFFFFF
5698	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x798
5699	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5700	 3AA	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
5701	 3AB	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xF0
5702	 3AD	SHR		 	 
- stack 1: 0x798
- stack 0: 0xA0
5703	 3AE	JUMP		 	 
- stack 0: 0x798
5704	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x798
5705	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
5706	 A2	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
5707	 A3	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0xA0000B0086000E03FB000000BA0000033E0001035D00020377FFE800D10003
- stack 0: 0xE0
5708	 A5	SHR		 	 
- stack 1: 0x798
- stack 0: 0xA0000B
5709	 A6	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5710	 A9	AND		 	 
- stack 1: 0x798
- stack 0: 0xB
5711	 AA	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0xB
- stack 0: 0x1
5712	 AC	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0xB
5713	 AD	PUSH2	0040	 	 
- stack 2: 0x798
- stack 1: 0xB
- stack 0: 0x40
5714	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x798
5715	 B1	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5716	 B3	ADD		 	 
- stack 0: 0x79C
5717	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5718	 B5	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
5719	 B6	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
- stack 0: 0xF0
5720	 B8	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x86
5721	 B9	JUMP		 	 
- stack 0: 0x79C
5722	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x79C
5723	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5724	 88	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
5725	 89	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE800D1000300EB001D
- stack 0: 0xE0
5726	 8B	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x86000E
5727	 8C	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x86000E
- stack 0: 0xFFFF
5728	 8F	AND		 	 
- stack 1: 0x79C
- stack 0: 0xE
5729	 90	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0xE
- stack 0: 0x1
5730	 92	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0xE
5731	 93	PUSH2	0020	 	 
- stack 2: 0x79C
- stack 1: 0xE
- stack 0: 0x20
5732	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x79C
5733	 97	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5734	 99	ADD		 	 
- stack 0: 0x7A0
5735	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5736	 9B	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
5737	 9C	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
- stack 0: 0xF0
5738	 9E	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB
5739	 9F	JUMP		 	 
- stack 0: 0x7A0
5740	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7A0
5741	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5742	 3FD	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
5743	 3FE	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE800D1000300EB001D01050114
- stack 0: 0xE0
5744	 400	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x3FB0000
5745	 401	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5746	 404	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
5747	 405	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x1
5748	 407	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x0
5749	 408	POP		 	 
- stack 0: 0x7A0
5750	 409	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
5751	 40B	ADD		 	 
- stack 0: 0x7A4
5752	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
5753	 40D	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000300EB001D0105011403050000
5754	 40E	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000300EB001D0105011403050000
- stack 0: 0xF0
5755	 410	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0xBA
5756	 411	JUMP		 	 
- stack 0: 0x7A4
5757	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x7A4
5758	 BB	PUSH2	0040	 	 
- stack 1: 0x7A4
- stack 0: 0x40
5759	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7A4
- stack 0: 0xB
5760	 BF	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0xB
- stack 0: 0x20
5761	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7A4
- stack 1: 0xB
- stack 0: 0xE
5762	 C3	SUB		 	  ;; # SUB
- stack 1: 0x7A4
- stack 0: 0x3
5763	 C4	PUSH2	0060	 	 
- stack 2: 0x7A4
- stack 1: 0x3
- stack 0: 0x60
5764	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7A4
5765	 C8	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
5766	 CA	ADD		 	 
- stack 0: 0x7A8
5767	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
5768	 CC	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
5769	 CD	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
- stack 0: 0xF0
5770	 CF	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x33E
5771	 D0	JUMP		 	 
- stack 0: 0x7A8
5772	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7A8
5773	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
5774	 340	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
5775	 341	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001035D00020377FFE800D1000300EB001D010501140305000000A0000B
- stack 0: 0xE0
5776	 343	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x33E0001
5777	 344	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
5778	 347	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x1
5779	 348	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x1
5780	 34A	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x1
5781	 34B	PUSH2	0080	 	 
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x80
5782	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x7A8
- stack 1: 0x1
- stack 0: 0x1
5783	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x7A8
- stack 0: 0x2
5784	 350	PUSH2	0080	 	 
- stack 2: 0x7A8
- stack 1: 0x2
- stack 0: 0x80
5785	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x7A8
5786	 354	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
5787	 356	ADD		 	 
- stack 0: 0x7AC
5788	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
5789	 358	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
5790	 359	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
- stack 0: 0xF0
5791	 35B	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x35D
5792	 35C	JUMP		 	 
- stack 0: 0x7AC
5793	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7AC
5794	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
5795	 35F	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
5796	 360	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x35D00020377FFE800D1000300EB001D010501140305000000A0000B0086000F
- stack 0: 0xE0
5797	 362	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x35D0002
5798	 363	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
5799	 366	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x2
5800	 367	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0x1
5801	 369	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x2
5802	 36A	PUSH2	00A0	 	 
- stack 2: 0x7AC
- stack 1: 0x2
- stack 0: 0xA0
5803	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x7AC
5804	 36E	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
5805	 370	ADD		 	 
- stack 0: 0x7B0
5806	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
5807	 372	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
5808	 373	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x377FFE800D1000300EB001D010501140305000000A0000B0086000F03FB0000
- stack 0: 0xF0
5809	 375	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x377
5810	 376	JUMP		 	 
- stack 0: 0x7B0
5811	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7B0
5812	 378	PUSH2	0080	 	 
- stack 1: 0x7B0
- stack 0: 0x80
5813	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x7B0
- stack 0: 0x2
5814	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5815	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0x2
5816	 382	PUSH2	00A0	 	 
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0xA0
5817	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0x2
5818	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5819	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0x2
- stack 0: 0x2
5820	 38C	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x0
5821	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x395
5822	 390	JUMPI		 	 
- stack 0: 0x7B0
5823	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x7B0
- stack 0: 0x3AF
5824	 394	JUMP		 	 
- stack 0: 0x7B0
5825	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x7B0
5826	 3B0	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
5827	 3B2	ADD		 	 
- stack 0: 0x7B4
5828	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
5829	 3B4	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0xD1000300EB001D010501140305000000A0000B0086000F03FB000003FB0000
5830	 3B5	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0xD1000300EB001D010501140305000000A0000B0086000F03FB000003FB0000
- stack 0: 0xF0
5831	 3B7	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0xD1
5832	 3B8	JUMP		 	 
- stack 0: 0x7B4
5833	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7B4
5834	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
5835	 D3	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0xD1000300EB001D010501140305000000A0000B0086000F03FB000003FB0000
5836	 D4	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0xD1000300EB001D010501140305000000A0000B0086000F03FB000003FB0000
- stack 0: 0xE0
5837	 D6	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0xD10003
5838	 D7	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0xD10003
- stack 0: 0xFFFF
5839	 DA	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x3
5840	 DB	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x3
- stack 0: 0x1
5841	 DD	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x3
5842	 DE	PUSH2	03A0	 	 
- stack 2: 0x7B4
- stack 1: 0x3
- stack 0: 0x3A0
5843	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7B4
5844	 E2	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
5845	 E4	ADD		 	 
- stack 0: 0x7B8
5846	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
5847	 E6	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xEB001D010501140305000000A0000B0086000F03FB000003FB000000BA0000
5848	 E7	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xEB001D010501140305000000A0000B0086000F03FB000003FB000000BA0000
- stack 0: 0xF0
5849	 E9	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xEB
5850	 EA	JUMP		 	 
- stack 0: 0x7B8
5851	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7B8
5852	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B8
- stack 0: 0x7B8
5853	 ED	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xEB001D010501140305000000A0000B0086000F03FB000003FB000000BA0000
5854	 EE	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0xEB001D010501140305000000A0000B0086000F03FB000003FB000000BA0000
- stack 0: 0xE0
5855	 F0	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xEB001D
5856	 F1	PUSH2	FFFF	 	 
- stack 2: 0x7B8
- stack 1: 0xEB001D
- stack 0: 0xFFFF
5857	 F4	AND		 	 
- stack 1: 0x7B8
- stack 0: 0x1D
5858	 F5	PUSH1	01	 	 
- stack 2: 0x7B8
- stack 1: 0x1D
- stack 0: 0x1
5859	 F7	SIGNEXTEND		 	 
- stack 1: 0x7B8
- stack 0: 0x1D
5860	 F8	PUSH2	0380	 	 
- stack 2: 0x7B8
- stack 1: 0x1D
- stack 0: 0x380
5861	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x7B8
5862	 FC	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
5863	 FE	ADD		 	 
- stack 0: 0x7BC
5864	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
5865	 100	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x10501140305000000A0000B0086000F03FB000003FB000000BA0000033E0001
5866	 101	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x10501140305000000A0000B0086000F03FB000003FB000000BA0000033E0001
- stack 0: 0xF0
5867	 103	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x105
5868	 104	JUMP		 	 
- stack 0: 0x7BC
5869	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x7BC
5870	 106	PUSH2	0060	 	 
- stack 1: 0x7BC
- stack 0: 0x60
5871	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x7BC
- stack 0: 0x3
5872	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7BC
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5873	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7BC
- stack 0: 0x3
5874	 110	PUSH2	03A0	 	 
- stack 2: 0x7BC
- stack 1: 0x3
- stack 0: 0x3A0
5875	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x7BC
- stack 1: 0x3
- stack 0: 0x3
5876	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7BC
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
5877	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7BC
- stack 1: 0x3
- stack 0: 0x3
5878	 11A	SUB		 	 
- stack 1: 0x7BC
- stack 0: 0x0
5879	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x7BC
- stack 1: 0x0
- stack 0: 0x123
5880	 11E	JUMPI		 	 
- stack 0: 0x7BC
5881	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x7BC
- stack 0: 0x13D
5882	 122	JUMP		 	 
- stack 0: 0x7BC
5883	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x7BC
5884	 13E	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
5885	 140	ADD		 	 
- stack 0: 0x7C0
5886	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
5887	 142	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x305000000A0000B0086000F03FB000003FB000000BA0000033E0001035D0002
5888	 143	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x305000000A0000B0086000F03FB000003FB000000BA0000033E0001035D0002
- stack 0: 0xF0
5889	 145	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x305
5890	 146	JUMP		 	 
- stack 0: 0x7C0
5891	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7C0
5892	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
5893	 307	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x305000000A0000B0086000F03FB000003FB000000BA0000033E0001035D0002
5894	 308	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x305000000A0000B0086000F03FB000003FB000000BA0000033E0001035D0002
- stack 0: 0xE0
5895	 30A	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3050000
5896	 30B	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3050000
- stack 0: 0xFFFF
5897	 30E	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5898	 30F	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
5899	 311	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
5900	 312	PUSH2	0080	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x80
5901	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C0
5902	 316	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
5903	 318	ADD		 	 
- stack 0: 0x7C4
5904	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
5905	 31A	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
5906	 31B	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
5907	 31D	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xA0
5908	 31E	JUMP		 	 
- stack 0: 0x7C4
5909	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C4
5910	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
5911	 A2	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
5912	 A3	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
5913	 A5	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B
5914	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
5915	 A9	AND		 	 
- stack 1: 0x7C4
- stack 0: 0xB
5916	 AA	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0xB
- stack 0: 0x1
5917	 AC	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0xB
5918	 AD	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0xB
- stack 0: 0x40
5919	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
5920	 B1	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
5921	 B3	ADD		 	 
- stack 0: 0x7C8
5922	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
5923	 B5	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
5924	 B6	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
5925	 B8	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86
5926	 B9	JUMP		 	 
- stack 0: 0x7C8
5927	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7C8
5928	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
5929	 88	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
5930	 89	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
5931	 8B	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F
5932	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F
- stack 0: 0xFFFF
5933	 8F	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xF
5934	 90	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xF
- stack 0: 0x1
5935	 92	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xF
5936	 93	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xF
- stack 0: 0x20
5937	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
5938	 97	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
5939	 99	ADD		 	 
- stack 0: 0x7CC
5940	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
5941	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
5942	 9C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
- stack 0: 0xF0
5943	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB
5944	 9F	JUMP		 	 
- stack 0: 0x7CC
5945	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7CC
5946	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
5947	 3FD	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
5948	 3FE	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
- stack 0: 0xE0
5949	 400	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB0000
5950	 401	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5951	 404	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
5952	 405	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x0
- stack 0: 0x1
5953	 407	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
5954	 408	POP		 	 
- stack 0: 0x7CC
5955	 409	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
5956	 40B	ADD		 	 
- stack 0: 0x7D0
5957	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
5958	 40D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
5959	 40E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
- stack 0: 0xF0
5960	 410	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB
5961	 411	JUMP		 	 
- stack 0: 0x7D0
5962	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D0
5963	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
5964	 3FD	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
5965	 3FE	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
- stack 0: 0xE0
5966	 400	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB0000
5967	 401	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
5968	 404	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x0
5969	 405	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x0
- stack 0: 0x1
5970	 407	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x0
5971	 408	POP		 	 
- stack 0: 0x7D0
5972	 409	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
5973	 40B	ADD		 	 
- stack 0: 0x7D4
5974	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
5975	 40D	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB001E010500E403050000
5976	 40E	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB001E010500E403050000
- stack 0: 0xF0
5977	 410	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0xBA
5978	 411	JUMP		 	 
- stack 0: 0x7D4
5979	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x7D4
5980	 BB	PUSH2	0040	 	 
- stack 1: 0x7D4
- stack 0: 0x40
5981	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D4
- stack 0: 0xB
5982	 BF	PUSH2	0020	 	 
- stack 2: 0x7D4
- stack 1: 0xB
- stack 0: 0x20
5983	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7D4
- stack 1: 0xB
- stack 0: 0xF
5984	 C3	SUB		 	  ;; # SUB
- stack 1: 0x7D4
- stack 0: 0x4
5985	 C4	PUSH2	0060	 	 
- stack 2: 0x7D4
- stack 1: 0x4
- stack 0: 0x60
5986	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D4
5987	 C8	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
5988	 CA	ADD		 	 
- stack 0: 0x7D8
5989	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
5990	 CC	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
5991	 CD	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
- stack 0: 0xF0
5992	 CF	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x33E
5993	 D0	JUMP		 	 
- stack 0: 0x7D8
5994	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D8
5995	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
5996	 340	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
5997	 341	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
- stack 0: 0xE0
5998	 343	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001
5999	 344	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6000	 347	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6001	 348	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x1
6002	 34A	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6003	 34B	PUSH2	0080	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x80
6004	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x0
6005	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D8
- stack 0: 0x1
6006	 350	PUSH2	0080	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x80
6007	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D8
6008	 354	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6009	 356	ADD		 	 
- stack 0: 0x7DC
6010	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6011	 358	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
6012	 359	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
- stack 0: 0xF0
6013	 35B	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x35D
6014	 35C	JUMP		 	 
- stack 0: 0x7DC
6015	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7DC
6016	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
6017	 35F	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
6018	 360	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
- stack 0: 0xE0
6019	 362	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x35D0002
6020	 363	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6021	 366	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x2
6022	 367	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x1
6023	 369	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x2
6024	 36A	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xA0
6025	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x7DC
6026	 36E	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6027	 370	ADD		 	 
- stack 0: 0x7E0
6028	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6029	 372	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
6030	 373	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
- stack 0: 0xF0
6031	 375	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x377
6032	 376	JUMP		 	 
- stack 0: 0x7E0
6033	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7E0
6034	 378	PUSH2	0080	 	 
- stack 1: 0x7E0
- stack 0: 0x80
6035	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x7E0
- stack 0: 0x1
6036	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6037	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x1
6038	 382	PUSH2	00A0	 	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0xA0
6039	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x2
6040	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6041	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x2
6042	 38C	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x1
6043	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x7E0
- stack 1: 0x1
- stack 0: 0x395
6044	 390	JUMPI		 	 
- stack 0: 0x7E0
6045	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x7E0
6046	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6047	 397	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
6048	 398	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
- stack 0: 0xE0
6049	 39A	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x377FFE4
6050	 39B	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
6051	 39E	AND		 	 
- stack 1: 0x7E0
- stack 0: 0xFFE4
6052	 39F	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0xFFE4
- stack 0: 0x1
6053	 3A1	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6054	 3A2	ADD		 	 
- stack 0: 0x7C4
6055	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7C4
- stack 0: 0xFFFFFFFF
6056	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7C4
6057	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6058	 3AA	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
6059	 3AB	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
6060	 3AD	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xA0
6061	 3AE	JUMP		 	 
- stack 0: 0x7C4
6062	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7C4
6063	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C4
- stack 0: 0x7C4
6064	 A2	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
6065	 A3	PUSH1	E0	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B0086000F03FB000003FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
6066	 A5	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0xA0000B
6067	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7C4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6068	 A9	AND		 	 
- stack 1: 0x7C4
- stack 0: 0xB
6069	 AA	PUSH1	01	 	 
- stack 2: 0x7C4
- stack 1: 0xB
- stack 0: 0x1
6070	 AC	SIGNEXTEND		 	 
- stack 1: 0x7C4
- stack 0: 0xB
6071	 AD	PUSH2	0040	 	 
- stack 2: 0x7C4
- stack 1: 0xB
- stack 0: 0x40
6072	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7C4
6073	 B1	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6074	 B3	ADD		 	 
- stack 0: 0x7C8
6075	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6076	 B5	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
6077	 B6	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
6078	 B8	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86
6079	 B9	JUMP		 	 
- stack 0: 0x7C8
6080	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7C8
6081	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6082	 88	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
6083	 89	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F03FB000003FB000000BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
6084	 8B	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x86000F
6085	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x86000F
- stack 0: 0xFFFF
6086	 8F	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xF
6087	 90	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xF
- stack 0: 0x1
6088	 92	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xF
6089	 93	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xF
- stack 0: 0x20
6090	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6091	 97	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6092	 99	ADD		 	 
- stack 0: 0x7CC
6093	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6094	 9B	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
6095	 9C	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
- stack 0: 0xF0
6096	 9E	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB
6097	 9F	JUMP		 	 
- stack 0: 0x7CC
6098	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7CC
6099	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6100	 3FD	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
6101	 3FE	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB000003FB000000BA0000033E0001035D00020377FFE400D1000400EB001E
- stack 0: 0xE0
6102	 400	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x3FB0000
6103	 401	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6104	 404	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
6105	 405	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x0
- stack 0: 0x1
6106	 407	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x0
6107	 408	POP		 	 
- stack 0: 0x7CC
6108	 409	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6109	 40B	ADD		 	 
- stack 0: 0x7D0
6110	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6111	 40D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
6112	 40E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
- stack 0: 0xF0
6113	 410	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB
6114	 411	JUMP		 	 
- stack 0: 0x7D0
6115	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7D0
6116	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6117	 3FD	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
6118	 3FE	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000400EB001E010500E4
- stack 0: 0xE0
6119	 400	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3FB0000
6120	 401	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6121	 404	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x0
6122	 405	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x0
- stack 0: 0x1
6123	 407	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x0
6124	 408	POP		 	 
- stack 0: 0x7D0
6125	 409	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6126	 40B	ADD		 	 
- stack 0: 0x7D4
6127	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6128	 40D	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB001E010500E403050000
6129	 40E	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB001E010500E403050000
- stack 0: 0xF0
6130	 410	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0xBA
6131	 411	JUMP		 	 
- stack 0: 0x7D4
6132	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x7D4
6133	 BB	PUSH2	0040	 	 
- stack 1: 0x7D4
- stack 0: 0x40
6134	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7D4
- stack 0: 0xB
6135	 BF	PUSH2	0020	 	 
- stack 2: 0x7D4
- stack 1: 0xB
- stack 0: 0x20
6136	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7D4
- stack 1: 0xB
- stack 0: 0xF
6137	 C3	SUB		 	  ;; # SUB
- stack 1: 0x7D4
- stack 0: 0x4
6138	 C4	PUSH2	0060	 	 
- stack 2: 0x7D4
- stack 1: 0x4
- stack 0: 0x60
6139	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7D4
6140	 C8	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6141	 CA	ADD		 	 
- stack 0: 0x7D8
6142	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6143	 CC	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
6144	 CD	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
- stack 0: 0xF0
6145	 CF	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x33E
6146	 D0	JUMP		 	 
- stack 0: 0x7D8
6147	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D8
6148	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6149	 340	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
6150	 341	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001035D00020377FFE400D1000400EB001E010500E40305000000A0000B
- stack 0: 0xE0
6151	 343	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x33E0001
6152	 344	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6153	 347	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6154	 348	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x1
6155	 34A	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6156	 34B	PUSH2	0080	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x80
6157	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x1
6158	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D8
- stack 0: 0x2
6159	 350	PUSH2	0080	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x80
6160	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D8
6161	 354	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6162	 356	ADD		 	 
- stack 0: 0x7DC
6163	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6164	 358	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
6165	 359	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
- stack 0: 0xF0
6166	 35B	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x35D
6167	 35C	JUMP		 	 
- stack 0: 0x7DC
6168	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7DC
6169	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7DC
- stack 0: 0x7DC
6170	 35F	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
6171	 360	PUSH1	E0	 	 
- stack 2: 0x7DC
- stack 1: 0x35D00020377FFE400D1000400EB001E010500E40305000000A0000B03FB0000
- stack 0: 0xE0
6172	 362	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x35D0002
6173	 363	PUSH2	FFFF	 	 
- stack 2: 0x7DC
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6174	 366	AND		 	 
- stack 1: 0x7DC
- stack 0: 0x2
6175	 367	PUSH1	01	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0x1
6176	 369	SIGNEXTEND		 	 
- stack 1: 0x7DC
- stack 0: 0x2
6177	 36A	PUSH2	00A0	 	 
- stack 2: 0x7DC
- stack 1: 0x2
- stack 0: 0xA0
6178	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x7DC
6179	 36E	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6180	 370	ADD		 	 
- stack 0: 0x7E0
6181	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6182	 372	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
6183	 373	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x377FFE400D1000400EB001E010500E40305000000A0000B03FB00000086000D
- stack 0: 0xF0
6184	 375	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x377
6185	 376	JUMP		 	 
- stack 0: 0x7E0
6186	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x7E0
6187	 378	PUSH2	0080	 	 
- stack 1: 0x7E0
- stack 0: 0x80
6188	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x7E0
- stack 0: 0x2
6189	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6190	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E0
- stack 0: 0x2
6191	 382	PUSH2	00A0	 	 
- stack 2: 0x7E0
- stack 1: 0x2
- stack 0: 0xA0
6192	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x7E0
- stack 1: 0x2
- stack 0: 0x2
6193	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6194	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E0
- stack 1: 0x2
- stack 0: 0x2
6195	 38C	SUB		 	 
- stack 1: 0x7E0
- stack 0: 0x0
6196	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x7E0
- stack 1: 0x0
- stack 0: 0x395
6197	 390	JUMPI		 	 
- stack 0: 0x7E0
6198	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x7E0
- stack 0: 0x3AF
6199	 394	JUMP		 	 
- stack 0: 0x7E0
6200	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x7E0
6201	 3B0	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6202	 3B2	ADD		 	 
- stack 0: 0x7E4
6203	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6204	 3B4	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xD1000400EB001E010500E40305000000A0000B03FB00000086000D00BA0000
6205	 3B5	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0xD1000400EB001E010500E40305000000A0000B03FB00000086000D00BA0000
- stack 0: 0xF0
6206	 3B7	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xD1
6207	 3B8	JUMP		 	 
- stack 0: 0x7E4
6208	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x7E4
6209	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6210	 D3	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0xD1000400EB001E010500E40305000000A0000B03FB00000086000D00BA0000
6211	 D4	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0xD1000400EB001E010500E40305000000A0000B03FB00000086000D00BA0000
- stack 0: 0xE0
6212	 D6	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0xD10004
6213	 D7	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0xD10004
- stack 0: 0xFFFF
6214	 DA	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x4
6215	 DB	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x4
- stack 0: 0x1
6216	 DD	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x4
6217	 DE	PUSH2	03A0	 	 
- stack 2: 0x7E4
- stack 1: 0x4
- stack 0: 0x3A0
6218	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E4
6219	 E2	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6220	 E4	ADD		 	 
- stack 0: 0x7E8
6221	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6222	 E6	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0xEB001E010500E40305000000A0000B03FB00000086000D00BA0000033E0001
6223	 E7	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0xEB001E010500E40305000000A0000B03FB00000086000D00BA0000033E0001
- stack 0: 0xF0
6224	 E9	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0xEB
6225	 EA	JUMP		 	 
- stack 0: 0x7E8
6226	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7E8
6227	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E8
- stack 0: 0x7E8
6228	 ED	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0xEB001E010500E40305000000A0000B03FB00000086000D00BA0000033E0001
6229	 EE	PUSH1	E0	 	 
- stack 2: 0x7E8
- stack 1: 0xEB001E010500E40305000000A0000B03FB00000086000D00BA0000033E0001
- stack 0: 0xE0
6230	 F0	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0xEB001E
6231	 F1	PUSH2	FFFF	 	 
- stack 2: 0x7E8
- stack 1: 0xEB001E
- stack 0: 0xFFFF
6232	 F4	AND		 	 
- stack 1: 0x7E8
- stack 0: 0x1E
6233	 F5	PUSH1	01	 	 
- stack 2: 0x7E8
- stack 1: 0x1E
- stack 0: 0x1
6234	 F7	SIGNEXTEND		 	 
- stack 1: 0x7E8
- stack 0: 0x1E
6235	 F8	PUSH2	0380	 	 
- stack 2: 0x7E8
- stack 1: 0x1E
- stack 0: 0x380
6236	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x7E8
6237	 FC	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6238	 FE	ADD		 	 
- stack 0: 0x7EC
6239	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6240	 100	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x10500E40305000000A0000B03FB00000086000D00BA0000033E0001035D0002
6241	 101	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x10500E40305000000A0000B03FB00000086000D00BA0000033E0001035D0002
- stack 0: 0xF0
6242	 103	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x105
6243	 104	JUMP		 	 
- stack 0: 0x7EC
6244	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x7EC
6245	 106	PUSH2	0060	 	 
- stack 1: 0x7EC
- stack 0: 0x60
6246	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x7EC
- stack 0: 0x4
6247	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
6248	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7EC
- stack 0: 0x4
6249	 110	PUSH2	03A0	 	 
- stack 2: 0x7EC
- stack 1: 0x4
- stack 0: 0x3A0
6250	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x7EC
- stack 1: 0x4
- stack 0: 0x4
6251	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7EC
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
6252	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7EC
- stack 1: 0x4
- stack 0: 0x4
6253	 11A	SUB		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6254	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x123
6255	 11E	JUMPI		 	 
- stack 0: 0x7EC
6256	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x7EC
- stack 0: 0x13D
6257	 122	JUMP		 	 
- stack 0: 0x7EC
6258	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x7EC
6259	 13E	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6260	 140	ADD		 	 
- stack 0: 0x7F0
6261	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6262	 142	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x305000000A0000B03FB00000086000D00BA0000033E0001035D00020377FFE8
6263	 143	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x305000000A0000B03FB00000086000D00BA0000033E0001035D00020377FFE8
- stack 0: 0xF0
6264	 145	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x305
6265	 146	JUMP		 	 
- stack 0: 0x7F0
6266	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7F0
6267	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F0
- stack 0: 0x7F0
6268	 307	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x305000000A0000B03FB00000086000D00BA0000033E0001035D00020377FFE8
6269	 308	PUSH1	E0	 	 
- stack 2: 0x7F0
- stack 1: 0x305000000A0000B03FB00000086000D00BA0000033E0001035D00020377FFE8
- stack 0: 0xE0
6270	 30A	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x3050000
6271	 30B	PUSH2	FFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x3050000
- stack 0: 0xFFFF
6272	 30E	AND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6273	 30F	PUSH1	01	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x1
6274	 311	SIGNEXTEND		 	 
- stack 1: 0x7F0
- stack 0: 0x0
6275	 312	PUSH2	0080	 	 
- stack 2: 0x7F0
- stack 1: 0x0
- stack 0: 0x80
6276	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x7F0
6277	 316	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6278	 318	ADD		 	 
- stack 0: 0x7F4
6279	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6280	 31A	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
6281	 31B	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
6282	 31D	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0
6283	 31E	JUMP		 	 
- stack 0: 0x7F4
6284	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F4
6285	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6286	 A2	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
6287	 A3	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
6288	 A5	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B
6289	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6290	 A9	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xB
6291	 AA	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xB
- stack 0: 0x1
6292	 AC	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xB
6293	 AD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xB
- stack 0: 0x40
6294	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6295	 B1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6296	 B3	ADD		 	 
- stack 0: 0x7F8
6297	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6298	 B5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
6299	 B6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
- stack 0: 0xF0
6300	 B8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB
6301	 B9	JUMP		 	 
- stack 0: 0x7F8
6302	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6303	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6304	 3FD	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
6305	 3FE	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
- stack 0: 0xE0
6306	 400	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB0000
6307	 401	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6308	 404	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6309	 405	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6310	 407	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6311	 408	POP		 	 
- stack 0: 0x7F8
6312	 409	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6313	 40B	ADD		 	 
- stack 0: 0x7FC
6314	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6315	 40D	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
6316	 40E	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
- stack 0: 0xF0
6317	 410	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x86
6318	 411	JUMP		 	 
- stack 0: 0x7FC
6319	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7FC
6320	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6321	 88	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
6322	 89	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
- stack 0: 0xE0
6323	 8B	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D
6324	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D
- stack 0: 0xFFFF
6325	 8F	AND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6326	 90	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x1
6327	 92	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6328	 93	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x20
6329	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6330	 97	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6331	 99	ADD		 	 
- stack 0: 0x800
6332	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6333	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000200EB001F010500B803050000
6334	 9C	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000200EB001F010500B803050000
- stack 0: 0xF0
6335	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0xBA
6336	 9F	JUMP		 	 
- stack 0: 0x800
6337	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x800
6338	 BB	PUSH2	0040	 	 
- stack 1: 0x800
- stack 0: 0x40
6339	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x800
- stack 0: 0xB
6340	 BF	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xB
- stack 0: 0x20
6341	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xB
- stack 0: 0xD
6342	 C3	SUB		 	  ;; # SUB
- stack 1: 0x800
- stack 0: 0x2
6343	 C4	PUSH2	0060	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x60
6344	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x800
6345	 C8	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6346	 CA	ADD		 	 
- stack 0: 0x804
6347	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6348	 CC	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
6349	 CD	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
- stack 0: 0xF0
6350	 CF	SHR		 	 
- stack 1: 0x804
- stack 0: 0x33E
6351	 D0	JUMP		 	 
- stack 0: 0x804
6352	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x804
6353	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6354	 340	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
6355	 341	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
- stack 0: 0xE0
6356	 343	SHR		 	 
- stack 1: 0x804
- stack 0: 0x33E0001
6357	 344	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6358	 347	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
6359	 348	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
6360	 34A	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
6361	 34B	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
6362	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x0
6363	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x1
6364	 350	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
6365	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
6366	 354	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6367	 356	ADD		 	 
- stack 0: 0x808
6368	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6369	 358	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
6370	 359	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
- stack 0: 0xF0
6371	 35B	SHR		 	 
- stack 1: 0x808
- stack 0: 0x35D
6372	 35C	JUMP		 	 
- stack 0: 0x808
6373	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
6374	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
6375	 35F	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
6376	 360	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
- stack 0: 0xE0
6377	 362	SHR		 	 
- stack 1: 0x808
- stack 0: 0x35D0002
6378	 363	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6379	 366	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
6380	 367	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
6381	 369	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
6382	 36A	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
6383	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
6384	 36E	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6385	 370	ADD		 	 
- stack 0: 0x80C
6386	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6387	 372	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
6388	 373	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
- stack 0: 0xF0
6389	 375	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x377
6390	 376	JUMP		 	 
- stack 0: 0x80C
6391	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x80C
6392	 378	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
6393	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x1
6394	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6395	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x1
6396	 382	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xA0
6397	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
6398	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6399	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
6400	 38C	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x1
6401	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x395
6402	 390	JUMPI		 	 
- stack 0: 0x80C
6403	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x80C
6404	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6405	 397	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
6406	 398	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
- stack 0: 0xE0
6407	 39A	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x377FFE8
6408	 39B	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x377FFE8
- stack 0: 0xFFFF
6409	 39E	AND		 	 
- stack 1: 0x80C
- stack 0: 0xFFE8
6410	 39F	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0xFFE8
- stack 0: 0x1
6411	 3A1	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
6412	 3A2	ADD		 	 
- stack 0: 0x7F4
6413	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7F4
- stack 0: 0xFFFFFFFF
6414	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7F4
6415	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6416	 3AA	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
6417	 3AB	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xF0
6418	 3AD	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0
6419	 3AE	JUMP		 	 
- stack 0: 0x7F4
6420	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x7F4
6421	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6422	 A2	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
6423	 A3	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B03FB00000086000D00BA0000033E0001035D00020377FFE800D10002
- stack 0: 0xE0
6424	 A5	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xA0000B
6425	 A6	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6426	 A9	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xB
6427	 AA	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xB
- stack 0: 0x1
6428	 AC	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xB
6429	 AD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xB
- stack 0: 0x40
6430	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6431	 B1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6432	 B3	ADD		 	 
- stack 0: 0x7F8
6433	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6434	 B5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
6435	 B6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
- stack 0: 0xF0
6436	 B8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB
6437	 B9	JUMP		 	 
- stack 0: 0x7F8
6438	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6439	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6440	 3FD	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
6441	 3FE	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB00000086000D00BA0000033E0001035D00020377FFE800D1000200EB001F
- stack 0: 0xE0
6442	 400	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3FB0000
6443	 401	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6444	 404	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6445	 405	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6446	 407	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6447	 408	POP		 	 
- stack 0: 0x7F8
6448	 409	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6449	 40B	ADD		 	 
- stack 0: 0x7FC
6450	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6451	 40D	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
6452	 40E	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
- stack 0: 0xF0
6453	 410	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x86
6454	 411	JUMP		 	 
- stack 0: 0x7FC
6455	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x7FC
6456	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
6457	 88	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
6458	 89	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D00BA0000033E0001035D00020377FFE800D1000200EB001F010500B8
- stack 0: 0xE0
6459	 8B	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x86000D
6460	 8C	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x86000D
- stack 0: 0xFFFF
6461	 8F	AND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6462	 90	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x1
6463	 92	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0xD
6464	 93	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xD
- stack 0: 0x20
6465	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6466	 97	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6467	 99	ADD		 	 
- stack 0: 0x800
6468	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6469	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0xBA0000033E0001035D00020377FFE800D1000200EB001F010500B803050000
6470	 9C	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0xBA0000033E0001035D00020377FFE800D1000200EB001F010500B803050000
- stack 0: 0xF0
6471	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0xBA
6472	 9F	JUMP		 	 
- stack 0: 0x800
6473	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x800
6474	 BB	PUSH2	0040	 	 
- stack 1: 0x800
- stack 0: 0x40
6475	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x800
- stack 0: 0xB
6476	 BF	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xB
- stack 0: 0x20
6477	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xB
- stack 0: 0xD
6478	 C3	SUB		 	  ;; # SUB
- stack 1: 0x800
- stack 0: 0x2
6479	 C4	PUSH2	0060	 	 
- stack 2: 0x800
- stack 1: 0x2
- stack 0: 0x60
6480	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x800
6481	 C8	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6482	 CA	ADD		 	 
- stack 0: 0x804
6483	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6484	 CC	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
6485	 CD	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
- stack 0: 0xF0
6486	 CF	SHR		 	 
- stack 1: 0x804
- stack 0: 0x33E
6487	 D0	JUMP		 	 
- stack 0: 0x804
6488	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x804
6489	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6490	 340	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
6491	 341	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x33E0001035D00020377FFE800D1000200EB001F010500B80305000000A0000B
- stack 0: 0xE0
6492	 343	SHR		 	 
- stack 1: 0x804
- stack 0: 0x33E0001
6493	 344	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6494	 347	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
6495	 348	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
6496	 34A	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
6497	 34B	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
6498	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
6499	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x2
6500	 350	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x80
6501	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
6502	 354	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6503	 356	ADD		 	 
- stack 0: 0x808
6504	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6505	 358	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
6506	 359	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
- stack 0: 0xF0
6507	 35B	SHR		 	 
- stack 1: 0x808
- stack 0: 0x35D
6508	 35C	JUMP		 	 
- stack 0: 0x808
6509	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
6510	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
6511	 35F	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
6512	 360	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x35D00020377FFE800D1000200EB001F010500B80305000000A0000B03FB0000
- stack 0: 0xE0
6513	 362	SHR		 	 
- stack 1: 0x808
- stack 0: 0x35D0002
6514	 363	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6515	 366	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
6516	 367	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
6517	 369	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
6518	 36A	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
6519	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
6520	 36E	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6521	 370	ADD		 	 
- stack 0: 0x80C
6522	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6523	 372	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
6524	 373	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x377FFE800D1000200EB001F010500B80305000000A0000B03FB00000086000E
- stack 0: 0xF0
6525	 375	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x377
6526	 376	JUMP		 	 
- stack 0: 0x80C
6527	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x80C
6528	 378	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
6529	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x2
6530	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6531	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x2
6532	 382	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xA0
6533	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
6534	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6535	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
6536	 38C	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x0
6537	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x80C
- stack 1: 0x0
- stack 0: 0x395
6538	 390	JUMPI		 	 
- stack 0: 0x80C
6539	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x80C
- stack 0: 0x3AF
6540	 394	JUMP		 	 
- stack 0: 0x80C
6541	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x80C
6542	 3B0	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6543	 3B2	ADD		 	 
- stack 0: 0x810
6544	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6545	 3B4	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0xD1000200EB001F010500B80305000000A0000B03FB00000086000E03FB0000
6546	 3B5	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0xD1000200EB001F010500B80305000000A0000B03FB00000086000E03FB0000
- stack 0: 0xF0
6547	 3B7	SHR		 	 
- stack 1: 0x810
- stack 0: 0xD1
6548	 3B8	JUMP		 	 
- stack 0: 0x810
6549	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x810
6550	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6551	 D3	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0xD1000200EB001F010500B80305000000A0000B03FB00000086000E03FB0000
6552	 D4	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0xD1000200EB001F010500B80305000000A0000B03FB00000086000E03FB0000
- stack 0: 0xE0
6553	 D6	SHR		 	 
- stack 1: 0x810
- stack 0: 0xD10002
6554	 D7	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0xD10002
- stack 0: 0xFFFF
6555	 DA	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6556	 DB	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6557	 DD	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6558	 DE	PUSH2	03A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x3A0
6559	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x810
6560	 E2	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6561	 E4	ADD		 	 
- stack 0: 0x814
6562	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6563	 E6	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xEB001F010500B80305000000A0000B03FB00000086000E03FB000000BA0000
6564	 E7	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0xEB001F010500B80305000000A0000B03FB00000086000E03FB000000BA0000
- stack 0: 0xF0
6565	 E9	SHR		 	 
- stack 1: 0x814
- stack 0: 0xEB
6566	 EA	JUMP		 	 
- stack 0: 0x814
6567	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x814
6568	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6569	 ED	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0xEB001F010500B80305000000A0000B03FB00000086000E03FB000000BA0000
6570	 EE	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0xEB001F010500B80305000000A0000B03FB00000086000E03FB000000BA0000
- stack 0: 0xE0
6571	 F0	SHR		 	 
- stack 1: 0x814
- stack 0: 0xEB001F
6572	 F1	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0xEB001F
- stack 0: 0xFFFF
6573	 F4	AND		 	 
- stack 1: 0x814
- stack 0: 0x1F
6574	 F5	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x1F
- stack 0: 0x1
6575	 F7	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x1F
6576	 F8	PUSH2	0380	 	 
- stack 2: 0x814
- stack 1: 0x1F
- stack 0: 0x380
6577	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x814
6578	 FC	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6579	 FE	ADD		 	 
- stack 0: 0x818
6580	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6581	 100	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x10500B80305000000A0000B03FB00000086000E03FB000000BA0000033E0001
6582	 101	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x10500B80305000000A0000B03FB00000086000E03FB000000BA0000033E0001
- stack 0: 0xF0
6583	 103	SHR		 	 
- stack 1: 0x818
- stack 0: 0x105
6584	 104	JUMP		 	 
- stack 0: 0x818
6585	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x818
6586	 106	PUSH2	0060	 	 
- stack 1: 0x818
- stack 0: 0x60
6587	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x818
- stack 0: 0x2
6588	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6589	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x818
- stack 0: 0x2
6590	 110	PUSH2	03A0	 	 
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0x3A0
6591	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0x2
6592	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x818
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6593	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x818
- stack 1: 0x2
- stack 0: 0x2
6594	 11A	SUB		 	 
- stack 1: 0x818
- stack 0: 0x0
6595	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x818
- stack 1: 0x0
- stack 0: 0x123
6596	 11E	JUMPI		 	 
- stack 0: 0x818
6597	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x818
- stack 0: 0x13D
6598	 122	JUMP		 	 
- stack 0: 0x818
6599	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x818
6600	 13E	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
6601	 140	ADD		 	 
- stack 0: 0x81C
6602	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
6603	 142	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x305000000A0000B03FB00000086000E03FB000000BA0000033E0001035D0002
6604	 143	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x305000000A0000B03FB00000086000E03FB000000BA0000033E0001035D0002
- stack 0: 0xF0
6605	 145	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x305
6606	 146	JUMP		 	 
- stack 0: 0x81C
6607	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x81C
6608	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
6609	 307	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x305000000A0000B03FB00000086000E03FB000000BA0000033E0001035D0002
6610	 308	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x305000000A0000B03FB00000086000E03FB000000BA0000033E0001035D0002
- stack 0: 0xE0
6611	 30A	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x3050000
6612	 30B	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x3050000
- stack 0: 0xFFFF
6613	 30E	AND		 	 
- stack 1: 0x81C
- stack 0: 0x0
6614	 30F	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0x0
- stack 0: 0x1
6615	 311	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0x0
6616	 312	PUSH2	0080	 	 
- stack 2: 0x81C
- stack 1: 0x0
- stack 0: 0x80
6617	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x81C
6618	 316	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
6619	 318	ADD		 	 
- stack 0: 0x820
6620	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6621	 31A	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
6622	 31B	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
6623	 31D	SHR		 	 
- stack 1: 0x820
- stack 0: 0xA0
6624	 31E	JUMP		 	 
- stack 0: 0x820
6625	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x820
6626	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
6627	 A2	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
6628	 A3	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
6629	 A5	SHR		 	 
- stack 1: 0x820
- stack 0: 0xA0000B
6630	 A6	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6631	 A9	AND		 	 
- stack 1: 0x820
- stack 0: 0xB
6632	 AA	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0xB
- stack 0: 0x1
6633	 AC	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0xB
6634	 AD	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0xB
- stack 0: 0x40
6635	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x820
6636	 B1	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6637	 B3	ADD		 	 
- stack 0: 0x824
6638	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6639	 B5	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
6640	 B6	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
6641	 B8	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3FB
6642	 B9	JUMP		 	 
- stack 0: 0x824
6643	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x824
6644	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6645	 3FD	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
6646	 3FE	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
6647	 400	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3FB0000
6648	 401	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6649	 404	AND		 	 
- stack 1: 0x824
- stack 0: 0x0
6650	 405	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x1
6651	 407	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x0
6652	 408	POP		 	 
- stack 0: 0x824
6653	 409	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6654	 40B	ADD		 	 
- stack 0: 0x828
6655	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6656	 40D	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
6657	 40E	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
- stack 0: 0xF0
6658	 410	SHR		 	 
- stack 1: 0x828
- stack 0: 0x86
6659	 411	JUMP		 	 
- stack 0: 0x828
6660	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x828
6661	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6662	 88	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
6663	 89	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
- stack 0: 0xE0
6664	 8B	SHR		 	 
- stack 1: 0x828
- stack 0: 0x86000E
6665	 8C	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x86000E
- stack 0: 0xFFFF
6666	 8F	AND		 	 
- stack 1: 0x828
- stack 0: 0xE
6667	 90	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0xE
- stack 0: 0x1
6668	 92	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xE
6669	 93	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0xE
- stack 0: 0x20
6670	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x828
6671	 97	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6672	 99	ADD		 	 
- stack 0: 0x82C
6673	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6674	 9B	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
6675	 9C	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
- stack 0: 0xF0
6676	 9E	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3FB
6677	 9F	JUMP		 	 
- stack 0: 0x82C
6678	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
6679	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6680	 3FD	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
6681	 3FE	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
- stack 0: 0xE0
6682	 400	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3FB0000
6683	 401	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6684	 404	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6685	 405	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
6686	 407	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6687	 408	POP		 	 
- stack 0: 0x82C
6688	 409	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6689	 40B	ADD		 	 
- stack 0: 0x830
6690	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6691	 40D	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000300EB00200105008803050000
6692	 40E	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000300EB00200105008803050000
- stack 0: 0xF0
6693	 410	SHR		 	 
- stack 1: 0x830
- stack 0: 0xBA
6694	 411	JUMP		 	 
- stack 0: 0x830
6695	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x830
6696	 BB	PUSH2	0040	 	 
- stack 1: 0x830
- stack 0: 0x40
6697	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x830
- stack 0: 0xB
6698	 BF	PUSH2	0020	 	 
- stack 2: 0x830
- stack 1: 0xB
- stack 0: 0x20
6699	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x830
- stack 1: 0xB
- stack 0: 0xE
6700	 C3	SUB		 	  ;; # SUB
- stack 1: 0x830
- stack 0: 0x3
6701	 C4	PUSH2	0060	 	 
- stack 2: 0x830
- stack 1: 0x3
- stack 0: 0x60
6702	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x830
6703	 C8	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6704	 CA	ADD		 	 
- stack 0: 0x834
6705	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6706	 CC	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
6707	 CD	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
- stack 0: 0xF0
6708	 CF	SHR		 	 
- stack 1: 0x834
- stack 0: 0x33E
6709	 D0	JUMP		 	 
- stack 0: 0x834
6710	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x834
6711	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
6712	 340	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
6713	 341	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
- stack 0: 0xE0
6714	 343	SHR		 	 
- stack 1: 0x834
- stack 0: 0x33E0001
6715	 344	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6716	 347	AND		 	 
- stack 1: 0x834
- stack 0: 0x1
6717	 348	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x1
6718	 34A	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x1
6719	 34B	PUSH2	0080	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x80
6720	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x0
6721	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x834
- stack 0: 0x1
6722	 350	PUSH2	0080	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x80
6723	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x834
6724	 354	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6725	 356	ADD		 	 
- stack 0: 0x838
6726	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6727	 358	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
6728	 359	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
- stack 0: 0xF0
6729	 35B	SHR		 	 
- stack 1: 0x838
- stack 0: 0x35D
6730	 35C	JUMP		 	 
- stack 0: 0x838
6731	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x838
6732	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
6733	 35F	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
6734	 360	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
- stack 0: 0xE0
6735	 362	SHR		 	 
- stack 1: 0x838
- stack 0: 0x35D0002
6736	 363	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6737	 366	AND		 	 
- stack 1: 0x838
- stack 0: 0x2
6738	 367	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x2
- stack 0: 0x1
6739	 369	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x2
6740	 36A	PUSH2	00A0	 	 
- stack 2: 0x838
- stack 1: 0x2
- stack 0: 0xA0
6741	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x838
6742	 36E	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6743	 370	ADD		 	 
- stack 0: 0x83C
6744	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6745	 372	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
6746	 373	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
- stack 0: 0xF0
6747	 375	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x377
6748	 376	JUMP		 	 
- stack 0: 0x83C
6749	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x83C
6750	 378	PUSH2	0080	 	 
- stack 1: 0x83C
- stack 0: 0x80
6751	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x83C
- stack 0: 0x1
6752	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6753	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x83C
- stack 0: 0x1
6754	 382	PUSH2	00A0	 	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0xA0
6755	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x2
6756	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x83C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6757	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x2
6758	 38C	SUB		 	 
- stack 1: 0x83C
- stack 0: 0x1
6759	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x83C
- stack 1: 0x1
- stack 0: 0x395
6760	 390	JUMPI		 	 
- stack 0: 0x83C
6761	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x83C
6762	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
6763	 397	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
6764	 398	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
- stack 0: 0xE0
6765	 39A	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x377FFE4
6766	 39B	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
6767	 39E	AND		 	 
- stack 1: 0x83C
- stack 0: 0xFFE4
6768	 39F	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0xFFE4
- stack 0: 0x1
6769	 3A1	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
6770	 3A2	ADD		 	 
- stack 0: 0x820
6771	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x820
- stack 0: 0xFFFFFFFF
6772	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x820
6773	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
6774	 3AA	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
6775	 3AB	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
6776	 3AD	SHR		 	 
- stack 1: 0x820
- stack 0: 0xA0
6777	 3AE	JUMP		 	 
- stack 0: 0x820
6778	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x820
6779	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
6780	 A2	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
6781	 A3	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0xA0000B03FB00000086000E03FB000000BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
6782	 A5	SHR		 	 
- stack 1: 0x820
- stack 0: 0xA0000B
6783	 A6	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0xA0000B
- stack 0: 0xFFFF
6784	 A9	AND		 	 
- stack 1: 0x820
- stack 0: 0xB
6785	 AA	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0xB
- stack 0: 0x1
6786	 AC	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0xB
6787	 AD	PUSH2	0040	 	 
- stack 2: 0x820
- stack 1: 0xB
- stack 0: 0x40
6788	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x820
6789	 B1	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
6790	 B3	ADD		 	 
- stack 0: 0x824
6791	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
6792	 B5	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
6793	 B6	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xF0
6794	 B8	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3FB
6795	 B9	JUMP		 	 
- stack 0: 0x824
6796	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x824
6797	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x824
- stack 0: 0x824
6798	 3FD	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
6799	 3FE	PUSH1	E0	 	 
- stack 2: 0x824
- stack 1: 0x3FB00000086000E03FB000000BA0000033E0001035D00020377FFE400D10003
- stack 0: 0xE0
6800	 400	SHR		 	 
- stack 1: 0x824
- stack 0: 0x3FB0000
6801	 401	PUSH2	FFFF	 	 
- stack 2: 0x824
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6802	 404	AND		 	 
- stack 1: 0x824
- stack 0: 0x0
6803	 405	PUSH1	01	 	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x1
6804	 407	SIGNEXTEND		 	 
- stack 1: 0x824
- stack 0: 0x0
6805	 408	POP		 	 
- stack 0: 0x824
6806	 409	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
6807	 40B	ADD		 	 
- stack 0: 0x828
6808	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
6809	 40D	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
6810	 40E	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
- stack 0: 0xF0
6811	 410	SHR		 	 
- stack 1: 0x828
- stack 0: 0x86
6812	 411	JUMP		 	 
- stack 0: 0x828
6813	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x828
6814	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
6815	 88	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
6816	 89	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x86000E03FB000000BA0000033E0001035D00020377FFE400D1000300EB0020
- stack 0: 0xE0
6817	 8B	SHR		 	 
- stack 1: 0x828
- stack 0: 0x86000E
6818	 8C	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x86000E
- stack 0: 0xFFFF
6819	 8F	AND		 	 
- stack 1: 0x828
- stack 0: 0xE
6820	 90	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0xE
- stack 0: 0x1
6821	 92	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0xE
6822	 93	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0xE
- stack 0: 0x20
6823	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x828
6824	 97	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
6825	 99	ADD		 	 
- stack 0: 0x82C
6826	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
6827	 9B	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
6828	 9C	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
- stack 0: 0xF0
6829	 9E	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3FB
6830	 9F	JUMP		 	 
- stack 0: 0x82C
6831	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
6832	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
6833	 3FD	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
6834	 3FE	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x3FB000000BA0000033E0001035D00020377FFE400D1000300EB002001050088
- stack 0: 0xE0
6835	 400	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x3FB0000
6836	 401	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
6837	 404	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6838	 405	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
6839	 407	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
6840	 408	POP		 	 
- stack 0: 0x82C
6841	 409	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
6842	 40B	ADD		 	 
- stack 0: 0x830
6843	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
6844	 40D	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000300EB00200105008803050000
6845	 40E	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000300EB00200105008803050000
- stack 0: 0xF0
6846	 410	SHR		 	 
- stack 1: 0x830
- stack 0: 0xBA
6847	 411	JUMP		 	 
- stack 0: 0x830
6848	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x830
6849	 BB	PUSH2	0040	 	 
- stack 1: 0x830
- stack 0: 0x40
6850	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x830
- stack 0: 0xB
6851	 BF	PUSH2	0020	 	 
- stack 2: 0x830
- stack 1: 0xB
- stack 0: 0x20
6852	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x830
- stack 1: 0xB
- stack 0: 0xE
6853	 C3	SUB		 	  ;; # SUB
- stack 1: 0x830
- stack 0: 0x3
6854	 C4	PUSH2	0060	 	 
- stack 2: 0x830
- stack 1: 0x3
- stack 0: 0x60
6855	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x830
6856	 C8	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
6857	 CA	ADD		 	 
- stack 0: 0x834
6858	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
6859	 CC	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
6860	 CD	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
- stack 0: 0xF0
6861	 CF	SHR		 	 
- stack 1: 0x834
- stack 0: 0x33E
6862	 D0	JUMP		 	 
- stack 0: 0x834
6863	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x834
6864	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
6865	 340	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
6866	 341	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x33E0001035D00020377FFE400D1000300EB0020010500880305000000A0000B
- stack 0: 0xE0
6867	 343	SHR		 	 
- stack 1: 0x834
- stack 0: 0x33E0001
6868	 344	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x33E0001
- stack 0: 0xFFFF
6869	 347	AND		 	 
- stack 1: 0x834
- stack 0: 0x1
6870	 348	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x1
6871	 34A	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x1
6872	 34B	PUSH2	0080	 	 
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x80
6873	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x834
- stack 1: 0x1
- stack 0: 0x1
6874	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x834
- stack 0: 0x2
6875	 350	PUSH2	0080	 	 
- stack 2: 0x834
- stack 1: 0x2
- stack 0: 0x80
6876	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x834
6877	 354	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
6878	 356	ADD		 	 
- stack 0: 0x838
6879	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
6880	 358	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
6881	 359	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
- stack 0: 0xF0
6882	 35B	SHR		 	 
- stack 1: 0x838
- stack 0: 0x35D
6883	 35C	JUMP		 	 
- stack 0: 0x838
6884	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x838
6885	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
6886	 35F	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
6887	 360	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x35D00020377FFE400D1000300EB0020010500880305000000A0000B03FB0000
- stack 0: 0xE0
6888	 362	SHR		 	 
- stack 1: 0x838
- stack 0: 0x35D0002
6889	 363	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x35D0002
- stack 0: 0xFFFF
6890	 366	AND		 	 
- stack 1: 0x838
- stack 0: 0x2
6891	 367	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x2
- stack 0: 0x1
6892	 369	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x2
6893	 36A	PUSH2	00A0	 	 
- stack 2: 0x838
- stack 1: 0x2
- stack 0: 0xA0
6894	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x838
6895	 36E	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
6896	 370	ADD		 	 
- stack 0: 0x83C
6897	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
6898	 372	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
6899	 373	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x377FFE400D1000300EB0020010500880305000000A0000B03FB000003FB0000
- stack 0: 0xF0
6900	 375	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x377
6901	 376	JUMP		 	 
- stack 0: 0x83C
6902	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x83C
6903	 378	PUSH2	0080	 	 
- stack 1: 0x83C
- stack 0: 0x80
6904	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x83C
- stack 0: 0x2
6905	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6906	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x83C
- stack 0: 0x2
6907	 382	PUSH2	00A0	 	 
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0xA0
6908	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0x2
6909	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x83C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6910	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x83C
- stack 1: 0x2
- stack 0: 0x2
6911	 38C	SUB		 	 
- stack 1: 0x83C
- stack 0: 0x0
6912	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x83C
- stack 1: 0x0
- stack 0: 0x395
6913	 390	JUMPI		 	 
- stack 0: 0x83C
6914	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x83C
- stack 0: 0x3AF
6915	 394	JUMP		 	 
- stack 0: 0x83C
6916	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x83C
6917	 3B0	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
6918	 3B2	ADD		 	 
- stack 0: 0x840
6919	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
6920	 3B4	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xD1000300EB0020010500880305000000A0000B03FB000003FB00000086000F
6921	 3B5	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0xD1000300EB0020010500880305000000A0000B03FB000003FB00000086000F
- stack 0: 0xF0
6922	 3B7	SHR		 	 
- stack 1: 0x840
- stack 0: 0xD1
6923	 3B8	JUMP		 	 
- stack 0: 0x840
6924	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x840
6925	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
6926	 D3	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0xD1000300EB0020010500880305000000A0000B03FB000003FB00000086000F
6927	 D4	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0xD1000300EB0020010500880305000000A0000B03FB000003FB00000086000F
- stack 0: 0xE0
6928	 D6	SHR		 	 
- stack 1: 0x840
- stack 0: 0xD10003
6929	 D7	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0xD10003
- stack 0: 0xFFFF
6930	 DA	AND		 	 
- stack 1: 0x840
- stack 0: 0x3
6931	 DB	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x1
6932	 DD	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0x3
6933	 DE	PUSH2	03A0	 	 
- stack 2: 0x840
- stack 1: 0x3
- stack 0: 0x3A0
6934	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x840
6935	 E2	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
6936	 E4	ADD		 	 
- stack 0: 0x844
6937	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
6938	 E6	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEB0020010500880305000000A0000B03FB000003FB00000086000F00BA0000
6939	 E7	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0xEB0020010500880305000000A0000B03FB000003FB00000086000F00BA0000
- stack 0: 0xF0
6940	 E9	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEB
6941	 EA	JUMP		 	 
- stack 0: 0x844
6942	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x844
6943	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
6944	 ED	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEB0020010500880305000000A0000B03FB000003FB00000086000F00BA0000
6945	 EE	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0xEB0020010500880305000000A0000B03FB000003FB00000086000F00BA0000
- stack 0: 0xE0
6946	 F0	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEB0020
6947	 F1	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0xEB0020
- stack 0: 0xFFFF
6948	 F4	AND		 	 
- stack 1: 0x844
- stack 0: 0x20
6949	 F5	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x20
- stack 0: 0x1
6950	 F7	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x20
6951	 F8	PUSH2	0380	 	 
- stack 2: 0x844
- stack 1: 0x20
- stack 0: 0x380
6952	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x844
6953	 FC	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
6954	 FE	ADD		 	 
- stack 0: 0x848
6955	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
6956	 100	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x10500880305000000A0000B03FB000003FB00000086000F00BA0000033E0001
6957	 101	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x10500880305000000A0000B03FB000003FB00000086000F00BA0000033E0001
- stack 0: 0xF0
6958	 103	SHR		 	 
- stack 1: 0x848
- stack 0: 0x105
6959	 104	JUMP		 	 
- stack 0: 0x848
6960	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x848
6961	 106	PUSH2	0060	 	 
- stack 1: 0x848
- stack 0: 0x60
6962	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x848
- stack 0: 0x3
6963	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x848
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
6964	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x848
- stack 0: 0x3
6965	 110	PUSH2	03A0	 	 
- stack 2: 0x848
- stack 1: 0x3
- stack 0: 0x3A0
6966	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x848
- stack 1: 0x3
- stack 0: 0x3
6967	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x848
- stack 2: 0x3
- stack 1: 0x3
- stack 0: 0xFFFFFFFF
6968	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x848
- stack 1: 0x3
- stack 0: 0x3
6969	 11A	SUB		 	 
- stack 1: 0x848
- stack 0: 0x0
6970	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x848
- stack 1: 0x0
- stack 0: 0x123
6971	 11E	JUMPI		 	 
- stack 0: 0x848
6972	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x848
- stack 0: 0x13D
6973	 122	JUMP		 	 
- stack 0: 0x848
6974	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x848
6975	 13E	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
6976	 140	ADD		 	 
- stack 0: 0x84C
6977	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
6978	 142	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x305000000A0000B03FB000003FB00000086000F00BA0000033E0001035D0002
6979	 143	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x305000000A0000B03FB000003FB00000086000F00BA0000033E0001035D0002
- stack 0: 0xF0
6980	 145	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x305
6981	 146	JUMP		 	 
- stack 0: 0x84C
6982	 305	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x84C
6983	 306	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
6984	 307	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x305000000A0000B03FB000003FB00000086000F00BA0000033E0001035D0002
6985	 308	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x305000000A0000B03FB000003FB00000086000F00BA0000033E0001035D0002
- stack 0: 0xE0
6986	 30A	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x3050000
6987	 30B	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x3050000
- stack 0: 0xFFFF
6988	 30E	AND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6989	 30F	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x0
- stack 0: 0x1
6990	 311	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x0
6991	 312	PUSH2	0080	 	 
- stack 2: 0x84C
- stack 1: 0x0
- stack 0: 0x80
6992	 315	MSTORE		 	  ;; # store to x4
- stack 0: 0x84C
6993	 316	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
6994	 318	ADD		 	 
- stack 0: 0x850
6995	 319	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
6996	 31A	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
6997	 31B	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
6998	 31D	SHR		 	 
- stack 1: 0x850
- stack 0: 0xA0
6999	 31E	JUMP		 	 
- stack 0: 0x850
7000	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x850
7001	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7002	 A2	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
7003	 A3	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
7004	 A5	SHR		 	 
- stack 1: 0x850
- stack 0: 0xA0000B
7005	 A6	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0xA0000B
- stack 0: 0xFFFF
7006	 A9	AND		 	 
- stack 1: 0x850
- stack 0: 0xB
7007	 AA	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0xB
- stack 0: 0x1
7008	 AC	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xB
7009	 AD	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xB
- stack 0: 0x40
7010	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x850
7011	 B1	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7012	 B3	ADD		 	 
- stack 0: 0x854
7013	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7014	 B5	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
7015	 B6	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
7016	 B8	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3FB
7017	 B9	JUMP		 	 
- stack 0: 0x854
7018	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x854
7019	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
7020	 3FD	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
7021	 3FE	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
7022	 400	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3FB0000
7023	 401	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
7024	 404	AND		 	 
- stack 1: 0x854
- stack 0: 0x0
7025	 405	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x1
7026	 407	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x0
7027	 408	POP		 	 
- stack 0: 0x854
7028	 409	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7029	 40B	ADD		 	 
- stack 0: 0x858
7030	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7031	 40D	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
7032	 40E	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
- stack 0: 0xF0
7033	 410	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3FB
7034	 411	JUMP		 	 
- stack 0: 0x858
7035	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x858
7036	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7037	 3FD	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
7038	 3FE	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
- stack 0: 0xE0
7039	 400	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3FB0000
7040	 401	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
7041	 404	AND		 	 
- stack 1: 0x858
- stack 0: 0x0
7042	 405	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x0
- stack 0: 0x1
7043	 407	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x0
7044	 408	POP		 	 
- stack 0: 0x858
7045	 409	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7046	 40B	ADD		 	 
- stack 0: 0x85C
7047	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7048	 40D	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
7049	 40E	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
- stack 0: 0xF0
7050	 410	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86
7051	 411	JUMP		 	 
- stack 0: 0x85C
7052	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x85C
7053	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7054	 88	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
7055	 89	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
- stack 0: 0xE0
7056	 8B	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86000F
7057	 8C	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x86000F
- stack 0: 0xFFFF
7058	 8F	AND		 	 
- stack 1: 0x85C
- stack 0: 0xF
7059	 90	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0xF
- stack 0: 0x1
7060	 92	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0xF
7061	 93	PUSH2	0020	 	 
- stack 2: 0x85C
- stack 1: 0xF
- stack 0: 0x20
7062	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x85C
7063	 97	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7064	 99	ADD		 	 
- stack 0: 0x860
7065	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7066	 9B	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB0021010500580086FFF1
7067	 9C	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB0021010500580086FFF1
- stack 0: 0xF0
7068	 9E	SHR		 	 
- stack 1: 0x860
- stack 0: 0xBA
7069	 9F	JUMP		 	 
- stack 0: 0x860
7070	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x860
7071	 BB	PUSH2	0040	 	 
- stack 1: 0x860
- stack 0: 0x40
7072	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x860
- stack 0: 0xB
7073	 BF	PUSH2	0020	 	 
- stack 2: 0x860
- stack 1: 0xB
- stack 0: 0x20
7074	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x860
- stack 1: 0xB
- stack 0: 0xF
7075	 C3	SUB		 	  ;; # SUB
- stack 1: 0x860
- stack 0: 0x4
7076	 C4	PUSH2	0060	 	 
- stack 2: 0x860
- stack 1: 0x4
- stack 0: 0x60
7077	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x860
7078	 C8	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7079	 CA	ADD		 	 
- stack 0: 0x864
7080	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7081	 CC	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
7082	 CD	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
- stack 0: 0xF0
7083	 CF	SHR		 	 
- stack 1: 0x864
- stack 0: 0x33E
7084	 D0	JUMP		 	 
- stack 0: 0x864
7085	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x864
7086	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
7087	 340	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
7088	 341	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
- stack 0: 0xE0
7089	 343	SHR		 	 
- stack 1: 0x864
- stack 0: 0x33E0001
7090	 344	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x33E0001
- stack 0: 0xFFFF
7091	 347	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
7092	 348	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
7093	 34A	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
7094	 34B	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
7095	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x0
7096	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x1
7097	 350	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
7098	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
7099	 354	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7100	 356	ADD		 	 
- stack 0: 0x868
7101	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7102	 358	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
7103	 359	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
- stack 0: 0xF0
7104	 35B	SHR		 	 
- stack 1: 0x868
- stack 0: 0x35D
7105	 35C	JUMP		 	 
- stack 0: 0x868
7106	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
7107	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
7108	 35F	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
7109	 360	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
- stack 0: 0xE0
7110	 362	SHR		 	 
- stack 1: 0x868
- stack 0: 0x35D0002
7111	 363	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x35D0002
- stack 0: 0xFFFF
7112	 366	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
7113	 367	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
7114	 369	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
7115	 36A	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
7116	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
7117	 36E	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7118	 370	ADD		 	 
- stack 0: 0x86C
7119	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7120	 372	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
7121	 373	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
- stack 0: 0xF0
7122	 375	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x377
7123	 376	JUMP		 	 
- stack 0: 0x86C
7124	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x86C
7125	 378	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
7126	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x1
7127	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7128	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x1
7129	 382	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0xA0
7130	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
7131	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7132	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x2
7133	 38C	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x1
7134	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x395
7135	 390	JUMPI		 	 
- stack 0: 0x86C
7136	 395	JUMPDEST		 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x86C
7137	 396	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
7138	 397	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
7139	 398	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
- stack 0: 0xE0
7140	 39A	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x377FFE4
7141	 39B	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x377FFE4
- stack 0: 0xFFFF
7142	 39E	AND		 	 
- stack 1: 0x86C
- stack 0: 0xFFE4
7143	 39F	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0xFFE4
- stack 0: 0x1
7144	 3A1	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
7145	 3A2	ADD		 	 
- stack 0: 0x850
7146	 3A3	PUSH4	FFFFFFFF	 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFF
7147	 3A8	AND		 	  ;; # mask to 32 bits
- stack 0: 0x850
7148	 3A9	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7149	 3AA	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
7150	 3AB	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
- stack 0: 0xF0
7151	 3AD	SHR		 	 
- stack 1: 0x850
- stack 0: 0xA0
7152	 3AE	JUMP		 	 
- stack 0: 0x850
7153	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x850
7154	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7155	 A2	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
7156	 A3	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0xA0000B03FB000003FB00000086000F00BA0000033E0001035D00020377FFE4
- stack 0: 0xE0
7157	 A5	SHR		 	 
- stack 1: 0x850
- stack 0: 0xA0000B
7158	 A6	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0xA0000B
- stack 0: 0xFFFF
7159	 A9	AND		 	 
- stack 1: 0x850
- stack 0: 0xB
7160	 AA	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0xB
- stack 0: 0x1
7161	 AC	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xB
7162	 AD	PUSH2	0040	 	 
- stack 2: 0x850
- stack 1: 0xB
- stack 0: 0x40
7163	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x850
7164	 B1	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7165	 B3	ADD		 	 
- stack 0: 0x854
7166	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7167	 B5	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
7168	 B6	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xF0
7169	 B8	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3FB
7170	 B9	JUMP		 	 
- stack 0: 0x854
7171	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x854
7172	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
7173	 3FD	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
7174	 3FE	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x3FB000003FB00000086000F00BA0000033E0001035D00020377FFE400D10004
- stack 0: 0xE0
7175	 400	SHR		 	 
- stack 1: 0x854
- stack 0: 0x3FB0000
7176	 401	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
7177	 404	AND		 	 
- stack 1: 0x854
- stack 0: 0x0
7178	 405	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x1
7179	 407	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x0
7180	 408	POP		 	 
- stack 0: 0x854
7181	 409	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7182	 40B	ADD		 	 
- stack 0: 0x858
7183	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7184	 40D	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
7185	 40E	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
- stack 0: 0xF0
7186	 410	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3FB
7187	 411	JUMP		 	 
- stack 0: 0x858
7188	 3FB	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x858
7189	 3FC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7190	 3FD	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
7191	 3FE	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x3FB00000086000F00BA0000033E0001035D00020377FFE400D1000400EB0021
- stack 0: 0xE0
7192	 400	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3FB0000
7193	 401	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x3FB0000
- stack 0: 0xFFFF
7194	 404	AND		 	 
- stack 1: 0x858
- stack 0: 0x0
7195	 405	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0x0
- stack 0: 0x1
7196	 407	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0x0
7197	 408	POP		 	 
- stack 0: 0x858
7198	 409	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7199	 40B	ADD		 	 
- stack 0: 0x85C
7200	 40C	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7201	 40D	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
7202	 40E	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
- stack 0: 0xF0
7203	 410	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86
7204	 411	JUMP		 	 
- stack 0: 0x85C
7205	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x85C
7206	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7207	 88	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
7208	 89	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x86000F00BA0000033E0001035D00020377FFE400D1000400EB002101050058
- stack 0: 0xE0
7209	 8B	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x86000F
7210	 8C	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x86000F
- stack 0: 0xFFFF
7211	 8F	AND		 	 
- stack 1: 0x85C
- stack 0: 0xF
7212	 90	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0xF
- stack 0: 0x1
7213	 92	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0xF
7214	 93	PUSH2	0020	 	 
- stack 2: 0x85C
- stack 1: 0xF
- stack 0: 0x20
7215	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x85C
7216	 97	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7217	 99	ADD		 	 
- stack 0: 0x860
7218	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7219	 9B	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0xBA0000033E0001035D00020377FFE400D1000400EB0021010500580086FFF1
7220	 9C	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0xBA0000033E0001035D00020377FFE400D1000400EB0021010500580086FFF1
- stack 0: 0xF0
7221	 9E	SHR		 	 
- stack 1: 0x860
- stack 0: 0xBA
7222	 9F	JUMP		 	 
- stack 0: 0x860
7223	 BA	JUMPDEST		 ;; __riscvimpl_SUB_3_1_2	  ;; # instr: sub gp,ra,sp(ignore imm)
- stack 0: 0x860
7224	 BB	PUSH2	0040	 	 
- stack 1: 0x860
- stack 0: 0x40
7225	 BE	MLOAD		 	  ;; # read from x2
- stack 1: 0x860
- stack 0: 0xB
7226	 BF	PUSH2	0020	 	 
- stack 2: 0x860
- stack 1: 0xB
- stack 0: 0x20
7227	 C2	MLOAD		 	  ;; # read from x1
- stack 2: 0x860
- stack 1: 0xB
- stack 0: 0xF
7228	 C3	SUB		 	  ;; # SUB
- stack 1: 0x860
- stack 0: 0x4
7229	 C4	PUSH2	0060	 	 
- stack 2: 0x860
- stack 1: 0x4
- stack 0: 0x60
7230	 C7	MSTORE		 	  ;; # store to x3
- stack 0: 0x860
7231	 C8	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7232	 CA	ADD		 	 
- stack 0: 0x864
7233	 CB	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7234	 CC	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
7235	 CD	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
- stack 0: 0xF0
7236	 CF	SHR		 	 
- stack 1: 0x864
- stack 0: 0x33E
7237	 D0	JUMP		 	 
- stack 0: 0x864
7238	 33E	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x864
7239	 33F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
7240	 340	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
7241	 341	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x33E0001035D00020377FFE400D1000400EB0021010500580086FFF104120000
- stack 0: 0xE0
7242	 343	SHR		 	 
- stack 1: 0x864
- stack 0: 0x33E0001
7243	 344	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x33E0001
- stack 0: 0xFFFF
7244	 347	AND		 	 
- stack 1: 0x864
- stack 0: 0x1
7245	 348	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
7246	 34A	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x1
7247	 34B	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x80
7248	 34E	MLOAD		 	  ;; # read from x4
- stack 2: 0x864
- stack 1: 0x1
- stack 0: 0x1
7249	 34F	ADD		 	  ;; # ADDI 4
- stack 1: 0x864
- stack 0: 0x2
7250	 350	PUSH2	0080	 	 
- stack 2: 0x864
- stack 1: 0x2
- stack 0: 0x80
7251	 353	MSTORE		 	  ;; # store to x4
- stack 0: 0x864
7252	 354	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7253	 356	ADD		 	 
- stack 0: 0x868
7254	 357	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7255	 358	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
7256	 359	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
- stack 0: 0xF0
7257	 35B	SHR		 	 
- stack 1: 0x868
- stack 0: 0x35D
7258	 35C	JUMP		 	 
- stack 0: 0x868
7259	 35D	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x868
7260	 35E	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
7261	 35F	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
7262	 360	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x35D00020377FFE400D1000400EB0021010500580086FFF10412000000D1000F
- stack 0: 0xE0
7263	 362	SHR		 	 
- stack 1: 0x868
- stack 0: 0x35D0002
7264	 363	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x35D0002
- stack 0: 0xFFFF
7265	 366	AND		 	 
- stack 1: 0x868
- stack 0: 0x2
7266	 367	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0x1
7267	 369	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0x2
7268	 36A	PUSH2	00A0	 	 
- stack 2: 0x868
- stack 1: 0x2
- stack 0: 0xA0
7269	 36D	MSTORE		 	  ;; # store to x5
- stack 0: 0x868
7270	 36E	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7271	 370	ADD		 	 
- stack 0: 0x86C
7272	 371	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7273	 372	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
7274	 373	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x377FFE400D1000400EB0021010500580086FFF10412000000D1000F00EB0022
- stack 0: 0xF0
7275	 375	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x377
7276	 376	JUMP		 	 
- stack 0: 0x86C
7277	 377	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x86C
7278	 378	PUSH2	0080	 	 
- stack 1: 0x86C
- stack 0: 0x80
7279	 37B	MLOAD		 	  ;; # read from x4
- stack 1: 0x86C
- stack 0: 0x2
7280	 37C	PUSH4	FFFFFFFF	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7281	 381	AND		 	  ;; # mask to 32 bits
- stack 1: 0x86C
- stack 0: 0x2
7282	 382	PUSH2	00A0	 	 
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0xA0
7283	 385	MLOAD		 	  ;; # read from x5
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
7284	 386	PUSH4	FFFFFFFF	 	 
- stack 3: 0x86C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7285	 38B	AND		 	  ;; # mask to 32 bits
- stack 2: 0x86C
- stack 1: 0x2
- stack 0: 0x2
7286	 38C	SUB		 	 
- stack 1: 0x86C
- stack 0: 0x0
7287	 38D	PUSH2	0395	 ;; _neq_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 2: 0x86C
- stack 1: 0x0
- stack 0: 0x395
7288	 390	JUMPI		 	 
- stack 0: 0x86C
7289	 391	PUSH2	03AF	 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 1: 0x86C
- stack 0: 0x3AF
7290	 394	JUMP		 	 
- stack 0: 0x86C
7291	 3AF	JUMPDEST		 ;; _neq_after_db378aa2edbb302094a9c1d4f096bce33ff1b4bacc6fc5cd2fc0916025d0db35	 
- stack 0: 0x86C
7292	 3B0	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7293	 3B2	ADD		 	 
- stack 0: 0x870
7294	 3B3	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7295	 3B4	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xD1000400EB0021010500580086FFF10412000000D1000F00EB002202AC0044
7296	 3B5	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0xD1000400EB0021010500580086FFF10412000000D1000F00EB002202AC0044
- stack 0: 0xF0
7297	 3B7	SHR		 	 
- stack 1: 0x870
- stack 0: 0xD1
7298	 3B8	JUMP		 	 
- stack 0: 0x870
7299	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x870
7300	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x870
- stack 0: 0x870
7301	 D3	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0xD1000400EB0021010500580086FFF10412000000D1000F00EB002202AC0044
7302	 D4	PUSH1	E0	 	 
- stack 2: 0x870
- stack 1: 0xD1000400EB0021010500580086FFF10412000000D1000F00EB002202AC0044
- stack 0: 0xE0
7303	 D6	SHR		 	 
- stack 1: 0x870
- stack 0: 0xD10004
7304	 D7	PUSH2	FFFF	 	 
- stack 2: 0x870
- stack 1: 0xD10004
- stack 0: 0xFFFF
7305	 DA	AND		 	 
- stack 1: 0x870
- stack 0: 0x4
7306	 DB	PUSH1	01	 	 
- stack 2: 0x870
- stack 1: 0x4
- stack 0: 0x1
7307	 DD	SIGNEXTEND		 	 
- stack 1: 0x870
- stack 0: 0x4
7308	 DE	PUSH2	03A0	 	 
- stack 2: 0x870
- stack 1: 0x4
- stack 0: 0x3A0
7309	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x870
7310	 E2	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7311	 E4	ADD		 	 
- stack 0: 0x874
7312	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7313	 E6	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0xEB0021010500580086FFF10412000000D1000F00EB002202AC004400860020
7314	 E7	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0xEB0021010500580086FFF10412000000D1000F00EB002202AC004400860020
- stack 0: 0xF0
7315	 E9	SHR		 	 
- stack 1: 0x874
- stack 0: 0xEB
7316	 EA	JUMP		 	 
- stack 0: 0x874
7317	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x874
7318	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7319	 ED	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0xEB0021010500580086FFF10412000000D1000F00EB002202AC004400860020
7320	 EE	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0xEB0021010500580086FFF10412000000D1000F00EB002202AC004400860020
- stack 0: 0xE0
7321	 F0	SHR		 	 
- stack 1: 0x874
- stack 0: 0xEB0021
7322	 F1	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0xEB0021
- stack 0: 0xFFFF
7323	 F4	AND		 	 
- stack 1: 0x874
- stack 0: 0x21
7324	 F5	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0x21
- stack 0: 0x1
7325	 F7	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0x21
7326	 F8	PUSH2	0380	 	 
- stack 2: 0x874
- stack 1: 0x21
- stack 0: 0x380
7327	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x874
7328	 FC	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7329	 FE	ADD		 	 
- stack 0: 0x878
7330	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7331	 100	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x10500580086FFF10412000000D1000F00EB002202AC00440086002004270000
7332	 101	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x10500580086FFF10412000000D1000F00EB002202AC00440086002004270000
- stack 0: 0xF0
7333	 103	SHR		 	 
- stack 1: 0x878
- stack 0: 0x105
7334	 104	JUMP		 	 
- stack 0: 0x878
7335	 105	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4ac(ignore imm)
- stack 0: 0x878
7336	 106	PUSH2	0060	 	 
- stack 1: 0x878
- stack 0: 0x60
7337	 109	MLOAD		 	  ;; # read from x3
- stack 1: 0x878
- stack 0: 0x4
7338	 10A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x878
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
7339	 10F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x878
- stack 0: 0x4
7340	 110	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x4
- stack 0: 0x3A0
7341	 113	MLOAD		 	  ;; # read from x29
- stack 2: 0x878
- stack 1: 0x4
- stack 0: 0x4
7342	 114	PUSH4	FFFFFFFF	 	 
- stack 3: 0x878
- stack 2: 0x4
- stack 1: 0x4
- stack 0: 0xFFFFFFFF
7343	 119	AND		 	  ;; # mask to 32 bits
- stack 2: 0x878
- stack 1: 0x4
- stack 0: 0x4
7344	 11A	SUB		 	 
- stack 1: 0x878
- stack 0: 0x0
7345	 11B	PUSH2	0123	 ;; _neq_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 2: 0x878
- stack 1: 0x0
- stack 0: 0x123
7346	 11E	JUMPI		 	 
- stack 0: 0x878
7347	 11F	PUSH2	013D	 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 1: 0x878
- stack 0: 0x13D
7348	 122	JUMP		 	 
- stack 0: 0x878
7349	 13D	JUMPDEST		 ;; _neq_after_c1ec0617e0186d4252532732d387af3cc731683c9235a4325e3c9a621b1170ba	 
- stack 0: 0x878
7350	 13E	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7351	 140	ADD		 	 
- stack 0: 0x87C
7352	 141	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7353	 142	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86FFF10412000000D1000F00EB002202AC0044008600200427000000D10020
7354	 143	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x86FFF10412000000D1000F00EB002202AC0044008600200427000000D10020
- stack 0: 0xF0
7355	 145	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86
7356	 146	JUMP		 	 
- stack 0: 0x87C
7357	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x87C
7358	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
7359	 88	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x86FFF10412000000D1000F00EB002202AC0044008600200427000000D10020
7360	 89	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x86FFF10412000000D1000F00EB002202AC0044008600200427000000D10020
- stack 0: 0xE0
7361	 8B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x86FFF1
7362	 8C	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x86FFF1
- stack 0: 0xFFFF
7363	 8F	AND		 	 
- stack 1: 0x87C
- stack 0: 0xFFF1
7364	 90	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0xFFF1
- stack 0: 0x1
7365	 92	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
7366	 93	PUSH2	0020	 	 
- stack 2: 0x87C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
- stack 0: 0x20
7367	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x87C
7368	 97	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7369	 99	ADD		 	 
- stack 0: 0x880
7370	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7371	 9B	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x412000000D1000F00EB002202AC0044008600200427000000D1002000EB0023
7372	 9C	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x412000000D1000F00EB002202AC0044008600200427000000D1002000EB0023
- stack 0: 0xF0
7373	 9E	SHR		 	 
- stack 1: 0x880
- stack 0: 0x412
7374	 9F	JUMP		 	 
- stack 0: 0x880
7375	 412	JUMPDEST		 ;; __riscvimpl_SUB_2_0_1	  ;; # instr: sub sp,zero,ra(ignore imm)
- stack 0: 0x880
7376	 413	PUSH2	0020	 	 
- stack 1: 0x880
- stack 0: 0x20
7377	 416	MLOAD		 	  ;; # read from x1
- stack 1: 0x880
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
7378	 417	PUSH1	00	 	 
- stack 2: 0x880
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1
- stack 0: 0x0
7379	 419	SUB		 	  ;; # SUB
- stack 1: 0x880
- stack 0: 0xF
7380	 41A	PUSH2	0040	 	 
- stack 2: 0x880
- stack 1: 0xF
- stack 0: 0x40
7381	 41D	MSTORE		 	  ;; # store to x2
- stack 0: 0x880
7382	 41E	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7383	 420	ADD		 	 
- stack 0: 0x884
7384	 421	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7385	 422	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0xD1000F00EB002202AC0044008600200427000000D1002000EB002302AC0030
7386	 423	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0xD1000F00EB002202AC0044008600200427000000D1002000EB002302AC0030
- stack 0: 0xF0
7387	 425	SHR		 	 
- stack 1: 0x884
- stack 0: 0xD1
7388	 426	JUMP		 	 
- stack 0: 0x884
7389	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x884
7390	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7391	 D3	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0xD1000F00EB002202AC0044008600200427000000D1002000EB002302AC0030
7392	 D4	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0xD1000F00EB002202AC0044008600200427000000D1002000EB002302AC0030
- stack 0: 0xE0
7393	 D6	SHR		 	 
- stack 1: 0x884
- stack 0: 0xD1000F
7394	 D7	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0xD1000F
- stack 0: 0xFFFF
7395	 DA	AND		 	 
- stack 1: 0x884
- stack 0: 0xF
7396	 DB	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0xF
- stack 0: 0x1
7397	 DD	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0xF
7398	 DE	PUSH2	03A0	 	 
- stack 2: 0x884
- stack 1: 0xF
- stack 0: 0x3A0
7399	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x884
7400	 E2	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7401	 E4	ADD		 	 
- stack 0: 0x888
7402	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7403	 E6	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0xEB002202AC0044008600200427000000D1002000EB002302AC0030043C0000
7404	 E7	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0xEB002202AC0044008600200427000000D1002000EB002302AC0030043C0000
- stack 0: 0xF0
7405	 E9	SHR		 	 
- stack 1: 0x888
- stack 0: 0xEB
7406	 EA	JUMP		 	 
- stack 0: 0x888
7407	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x888
7408	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
7409	 ED	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0xEB002202AC0044008600200427000000D1002000EB002302AC0030043C0000
7410	 EE	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0xEB002202AC0044008600200427000000D1002000EB002302AC0030043C0000
- stack 0: 0xE0
7411	 F0	SHR		 	 
- stack 1: 0x888
- stack 0: 0xEB0022
7412	 F1	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0xEB0022
- stack 0: 0xFFFF
7413	 F4	AND		 	 
- stack 1: 0x888
- stack 0: 0x22
7414	 F5	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x22
- stack 0: 0x1
7415	 F7	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x22
7416	 F8	PUSH2	0380	 	 
- stack 2: 0x888
- stack 1: 0x22
- stack 0: 0x380
7417	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x888
7418	 FC	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7419	 FE	ADD		 	 
- stack 0: 0x88C
7420	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7421	 100	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x2AC0044008600200427000000D1002000EB002302AC0030043C000000D10000
7422	 101	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x2AC0044008600200427000000D1002000EB002302AC0030043C000000D10000
- stack 0: 0xF0
7423	 103	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x2AC
7424	 104	JUMP		 	 
- stack 0: 0x88C
7425	 2AC	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x88C
7426	 2AD	PUSH2	0040	 	 
- stack 1: 0x88C
- stack 0: 0x40
7427	 2B0	MLOAD		 	  ;; # read from x2
- stack 1: 0x88C
- stack 0: 0xF
7428	 2B1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
7429	 2B6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0xF
7430	 2B7	PUSH2	03A0	 	 
- stack 2: 0x88C
- stack 1: 0xF
- stack 0: 0x3A0
7431	 2BA	MLOAD		 	  ;; # read from x29
- stack 2: 0x88C
- stack 1: 0xF
- stack 0: 0xF
7432	 2BB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x88C
- stack 2: 0xF
- stack 1: 0xF
- stack 0: 0xFFFFFFFF
7433	 2C0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x88C
- stack 1: 0xF
- stack 0: 0xF
7434	 2C1	SUB		 	 
- stack 1: 0x88C
- stack 0: 0x0
7435	 2C2	PUSH2	02CA	 ;; _neq_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x2CA
7436	 2C5	JUMPI		 	 
- stack 0: 0x88C
7437	 2C6	PUSH2	02E4	 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 1: 0x88C
- stack 0: 0x2E4
7438	 2C9	JUMP		 	 
- stack 0: 0x88C
7439	 2E4	JUMPDEST		 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 0: 0x88C
7440	 2E5	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7441	 2E7	ADD		 	 
- stack 0: 0x890
7442	 2E8	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7443	 2E9	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x8600200427000000D1002000EB002302AC0030043C000000D1000000EB0024
7444	 2EA	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x8600200427000000D1002000EB002302AC0030043C000000D1000000EB0024
- stack 0: 0xF0
7445	 2EC	SHR		 	 
- stack 1: 0x890
- stack 0: 0x86
7446	 2ED	JUMP		 	 
- stack 0: 0x890
7447	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x890
7448	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
7449	 88	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x8600200427000000D1002000EB002302AC0030043C000000D1000000EB0024
7450	 89	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0x8600200427000000D1002000EB002302AC0030043C000000D1000000EB0024
- stack 0: 0xE0
7451	 8B	SHR		 	 
- stack 1: 0x890
- stack 0: 0x860020
7452	 8C	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0x860020
- stack 0: 0xFFFF
7453	 8F	AND		 	 
- stack 1: 0x890
- stack 0: 0x20
7454	 90	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x20
- stack 0: 0x1
7455	 92	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x20
7456	 93	PUSH2	0020	 	 
- stack 2: 0x890
- stack 1: 0x20
- stack 0: 0x20
7457	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x890
7458	 97	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7459	 99	ADD		 	 
- stack 0: 0x894
7460	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7461	 9B	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x427000000D1002000EB002302AC0030043C000000D1000000EB002402530020
7462	 9C	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x427000000D1002000EB002302AC0030043C000000D1000000EB002402530020
- stack 0: 0xF0
7463	 9E	SHR		 	 
- stack 1: 0x894
- stack 0: 0x427
7464	 9F	JUMP		 	 
- stack 0: 0x894
7465	 427	JUMPDEST		 ;; __riscvimpl_SUB_2_1_0	  ;; # instr: sub sp,ra,zero(ignore imm)
- stack 0: 0x894
7466	 428	PUSH1	00	 	 
- stack 1: 0x894
- stack 0: 0x0
7467	 42A	PUSH2	0020	 	 
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x20
7468	 42D	MLOAD		 	  ;; # read from x1
- stack 2: 0x894
- stack 1: 0x0
- stack 0: 0x20
7469	 42E	SUB		 	  ;; # SUB
- stack 1: 0x894
- stack 0: 0x20
7470	 42F	PUSH2	0040	 	 
- stack 2: 0x894
- stack 1: 0x20
- stack 0: 0x40
7471	 432	MSTORE		 	  ;; # store to x2
- stack 0: 0x894
7472	 433	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7473	 435	ADD		 	 
- stack 0: 0x898
7474	 436	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7475	 437	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0xD1002000EB002302AC0030043C000000D1000000EB00240253002000860010
7476	 438	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0xD1002000EB002302AC0030043C000000D1000000EB00240253002000860010
- stack 0: 0xF0
7477	 43A	SHR		 	 
- stack 1: 0x898
- stack 0: 0xD1
7478	 43B	JUMP		 	 
- stack 0: 0x898
7479	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x898
7480	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x898
- stack 0: 0x898
7481	 D3	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0xD1002000EB002302AC0030043C000000D1000000EB00240253002000860010
7482	 D4	PUSH1	E0	 	 
- stack 2: 0x898
- stack 1: 0xD1002000EB002302AC0030043C000000D1000000EB00240253002000860010
- stack 0: 0xE0
7483	 D6	SHR		 	 
- stack 1: 0x898
- stack 0: 0xD10020
7484	 D7	PUSH2	FFFF	 	 
- stack 2: 0x898
- stack 1: 0xD10020
- stack 0: 0xFFFF
7485	 DA	AND		 	 
- stack 1: 0x898
- stack 0: 0x20
7486	 DB	PUSH1	01	 	 
- stack 2: 0x898
- stack 1: 0x20
- stack 0: 0x1
7487	 DD	SIGNEXTEND		 	 
- stack 1: 0x898
- stack 0: 0x20
7488	 DE	PUSH2	03A0	 	 
- stack 2: 0x898
- stack 1: 0x20
- stack 0: 0x3A0
7489	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x898
7490	 E2	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7491	 E4	ADD		 	 
- stack 0: 0x89C
7492	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7493	 E6	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xEB002302AC0030043C000000D1000000EB0024025300200086001000A0001E
7494	 E7	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0xEB002302AC0030043C000000D1000000EB0024025300200086001000A0001E
- stack 0: 0xF0
7495	 E9	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xEB
7496	 EA	JUMP		 	 
- stack 0: 0x89C
7497	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x89C
7498	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x89C
- stack 0: 0x89C
7499	 ED	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0xEB002302AC0030043C000000D1000000EB0024025300200086001000A0001E
7500	 EE	PUSH1	E0	 	 
- stack 2: 0x89C
- stack 1: 0xEB002302AC0030043C000000D1000000EB0024025300200086001000A0001E
- stack 0: 0xE0
7501	 F0	SHR		 	 
- stack 1: 0x89C
- stack 0: 0xEB0023
7502	 F1	PUSH2	FFFF	 	 
- stack 2: 0x89C
- stack 1: 0xEB0023
- stack 0: 0xFFFF
7503	 F4	AND		 	 
- stack 1: 0x89C
- stack 0: 0x23
7504	 F5	PUSH1	01	 	 
- stack 2: 0x89C
- stack 1: 0x23
- stack 0: 0x1
7505	 F7	SIGNEXTEND		 	 
- stack 1: 0x89C
- stack 0: 0x23
7506	 F8	PUSH2	0380	 	 
- stack 2: 0x89C
- stack 1: 0x23
- stack 0: 0x380
7507	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x89C
7508	 FC	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7509	 FE	ADD		 	 
- stack 0: 0x8A0
7510	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7511	 100	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x2AC0030043C000000D1000000EB0024025300200086001000A0001E044F0000
7512	 101	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x2AC0030043C000000D1000000EB0024025300200086001000A0001E044F0000
- stack 0: 0xF0
7513	 103	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x2AC
7514	 104	JUMP		 	 
- stack 0: 0x8A0
7515	 2AC	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,31c(ignore imm)
- stack 0: 0x8A0
7516	 2AD	PUSH2	0040	 	 
- stack 1: 0x8A0
- stack 0: 0x40
7517	 2B0	MLOAD		 	  ;; # read from x2
- stack 1: 0x8A0
- stack 0: 0x20
7518	 2B1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
7519	 2B6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A0
- stack 0: 0x20
7520	 2B7	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0x20
- stack 0: 0x3A0
7521	 2BA	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A0
- stack 1: 0x20
- stack 0: 0x20
7522	 2BB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8A0
- stack 2: 0x20
- stack 1: 0x20
- stack 0: 0xFFFFFFFF
7523	 2C0	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8A0
- stack 1: 0x20
- stack 0: 0x20
7524	 2C1	SUB		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7525	 2C2	PUSH2	02CA	 ;; _neq_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x2CA
7526	 2C5	JUMPI		 	 
- stack 0: 0x8A0
7527	 2C6	PUSH2	02E4	 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 1: 0x8A0
- stack 0: 0x2E4
7528	 2C9	JUMP		 	 
- stack 0: 0x8A0
7529	 2E4	JUMPDEST		 ;; _neq_after_0904192a21671e97e758060d41e108fa24f97e1691fa4212f88f3d600f443359	 
- stack 0: 0x8A0
7530	 2E5	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7531	 2E7	ADD		 	 
- stack 0: 0x8A4
7532	 2E8	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7533	 2E9	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x43C000000D1000000EB0024025300200086001000A0001E044F000000D10000
7534	 2EA	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x43C000000D1000000EB0024025300200086001000A0001E044F000000D10000
- stack 0: 0xF0
7535	 2EC	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x43C
7536	 2ED	JUMP		 	 
- stack 0: 0x8A4
7537	 43C	JUMPDEST		 ;; __riscvimpl_SUB_1_0_0	  ;; # instr: sub ra,zero,zero(ignore imm)
- stack 0: 0x8A4
7538	 43D	PUSH1	00	 	 
- stack 1: 0x8A4
- stack 0: 0x0
7539	 43F	PUSH1	00	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x0
7540	 441	SUB		 	  ;; # SUB
- stack 1: 0x8A4
- stack 0: 0x0
7541	 442	PUSH2	0020	 	 
- stack 2: 0x8A4
- stack 1: 0x0
- stack 0: 0x20
7542	 445	MSTORE		 	  ;; # store to x1
- stack 0: 0x8A4
7543	 446	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7544	 448	ADD		 	 
- stack 0: 0x8A8
7545	 449	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7546	 44A	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xD1000000EB0024025300200086001000A0001E044F000000D1000000EB0025
7547	 44B	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0xD1000000EB0024025300200086001000A0001E044F000000D1000000EB0025
- stack 0: 0xF0
7548	 44D	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xD1
7549	 44E	JUMP		 	 
- stack 0: 0x8A8
7550	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8A8
7551	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A8
- stack 0: 0x8A8
7552	 D3	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0xD1000000EB0024025300200086001000A0001E044F000000D1000000EB0025
7553	 D4	PUSH1	E0	 	 
- stack 2: 0x8A8
- stack 1: 0xD1000000EB0024025300200086001000A0001E044F000000D1000000EB0025
- stack 0: 0xE0
7554	 D6	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0xD10000
7555	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8A8
- stack 1: 0xD10000
- stack 0: 0xFFFF
7556	 DA	AND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
7557	 DB	PUSH1	01	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x1
7558	 DD	SIGNEXTEND		 	 
- stack 1: 0x8A8
- stack 0: 0x0
7559	 DE	PUSH2	03A0	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x3A0
7560	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A8
7561	 E2	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7562	 E4	ADD		 	 
- stack 0: 0x8AC
7563	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7564	 E6	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0xEB0024025300200086001000A0001E044F000000D1000000EB002504630008
7565	 E7	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0xEB0024025300200086001000A0001E044F000000D1000000EB002504630008
- stack 0: 0xF0
7566	 E9	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0xEB
7567	 EA	JUMP		 	 
- stack 0: 0x8AC
7568	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8AC
7569	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8AC
- stack 0: 0x8AC
7570	 ED	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0xEB0024025300200086001000A0001E044F000000D1000000EB002504630008
7571	 EE	PUSH1	E0	 	 
- stack 2: 0x8AC
- stack 1: 0xEB0024025300200086001000A0001E044F000000D1000000EB002504630008
- stack 0: 0xE0
7572	 F0	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0xEB0024
7573	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8AC
- stack 1: 0xEB0024
- stack 0: 0xFFFF
7574	 F4	AND		 	 
- stack 1: 0x8AC
- stack 0: 0x24
7575	 F5	PUSH1	01	 	 
- stack 2: 0x8AC
- stack 1: 0x24
- stack 0: 0x1
7576	 F7	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0x24
7577	 F8	PUSH2	0380	 	 
- stack 2: 0x8AC
- stack 1: 0x24
- stack 0: 0x380
7578	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8AC
7579	 FC	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7580	 FE	ADD		 	 
- stack 0: 0x8B0
7581	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7582	 100	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x25300200086001000A0001E044F000000D1000000EB00250463000804A30018
7583	 101	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x25300200086001000A0001E044F000000D1000000EB00250463000804A30018
- stack 0: 0xF0
7584	 103	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x253
7585	 104	JUMP		 	 
- stack 0: 0x8B0
7586	 253	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,334(ignore imm)
- stack 0: 0x8B0
7587	 254	PUSH2	0020	 	 
- stack 1: 0x8B0
- stack 0: 0x20
7588	 257	MLOAD		 	  ;; # read from x1
- stack 1: 0x8B0
- stack 0: 0x0
7589	 258	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7590	 25D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8B0
- stack 0: 0x0
7591	 25E	PUSH2	03A0	 	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x3A0
7592	 261	MLOAD		 	  ;; # read from x29
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x0
7593	 262	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8B0
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7594	 267	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x0
7595	 268	SUB		 	 
- stack 1: 0x8B0
- stack 0: 0x0
7596	 269	PUSH2	0271	 ;; _neq_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 2: 0x8B0
- stack 1: 0x0
- stack 0: 0x271
7597	 26C	JUMPI		 	 
- stack 0: 0x8B0
7598	 26D	PUSH2	028B	 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 1: 0x8B0
- stack 0: 0x28B
7599	 270	JUMP		 	 
- stack 0: 0x8B0
7600	 28B	JUMPDEST		 ;; _neq_after_cfc6f593aab13fec891a6bb40da397ffa48de26806d8dd98b41d185517bb4683	 
- stack 0: 0x8B0
7601	 28C	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7602	 28E	ADD		 	 
- stack 0: 0x8B4
7603	 28F	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7604	 290	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x86001000A0001E044F000000D1000000EB00250463000804A3001800210001
7605	 291	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x86001000A0001E044F000000D1000000EB00250463000804A3001800210001
- stack 0: 0xF0
7606	 293	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x86
7607	 294	JUMP		 	 
- stack 0: 0x8B4
7608	 86	JUMPDEST		 ;; __riscvimpl_ADDI_1_0_0	  ;; # instr: addi ra,zero,0(ignore imm)
- stack 0: 0x8B4
7609	 87	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B4
- stack 0: 0x8B4
7610	 88	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x86001000A0001E044F000000D1000000EB00250463000804A3001800210001
7611	 89	PUSH1	E0	 	 
- stack 2: 0x8B4
- stack 1: 0x86001000A0001E044F000000D1000000EB00250463000804A3001800210001
- stack 0: 0xE0
7612	 8B	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x860010
7613	 8C	PUSH2	FFFF	 	 
- stack 2: 0x8B4
- stack 1: 0x860010
- stack 0: 0xFFFF
7614	 8F	AND		 	 
- stack 1: 0x8B4
- stack 0: 0x10
7615	 90	PUSH1	01	 	 
- stack 2: 0x8B4
- stack 1: 0x10
- stack 0: 0x1
7616	 92	SIGNEXTEND		 	 
- stack 1: 0x8B4
- stack 0: 0x10
7617	 93	PUSH2	0020	 	 
- stack 2: 0x8B4
- stack 1: 0x10
- stack 0: 0x20
7618	 96	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B4
7619	 97	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7620	 99	ADD		 	 
- stack 0: 0x8B8
7621	 9A	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7622	 9B	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xA0001E044F000000D1000000EB00250463000804A30018002100010034F908
7623	 9C	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0xA0001E044F000000D1000000EB00250463000804A30018002100010034F908
- stack 0: 0xF0
7624	 9E	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xA0
7625	 9F	JUMP		 	 
- stack 0: 0x8B8
7626	 A0	JUMPDEST		 ;; __riscvimpl_ADDI_2_0_0	  ;; # instr: addi sp,zero,0(ignore imm)
- stack 0: 0x8B8
7627	 A1	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7628	 A2	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xA0001E044F000000D1000000EB00250463000804A30018002100010034F908
7629	 A3	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0xA0001E044F000000D1000000EB00250463000804A30018002100010034F908
- stack 0: 0xE0
7630	 A5	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xA0001E
7631	 A6	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0xA0001E
- stack 0: 0xFFFF
7632	 A9	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x1E
7633	 AA	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x1E
- stack 0: 0x1
7634	 AC	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x1E
7635	 AD	PUSH2	0040	 	 
- stack 2: 0x8B8
- stack 1: 0x1E
- stack 0: 0x40
7636	 B0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B8
7637	 B1	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7638	 B3	ADD		 	 
- stack 0: 0x8BC
7639	 B4	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7640	 B5	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x44F000000D1000000EB00250463000804A30018002100010034F90800530042
7641	 B6	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x44F000000D1000000EB00250463000804A30018002100010034F90800530042
- stack 0: 0xF0
7642	 B8	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x44F
7643	 B9	JUMP		 	 
- stack 0: 0x8BC
7644	 44F	JUMPDEST		 ;; __riscvimpl_SUB_0_1_2	  ;; # instr: sub zero,ra,sp(ignore imm)
- stack 0: 0x8BC
7645	 450	PUSH2	0040	 	 
- stack 1: 0x8BC
- stack 0: 0x40
7646	 453	MLOAD		 	  ;; # read from x2
- stack 1: 0x8BC
- stack 0: 0x1E
7647	 454	PUSH2	0020	 	 
- stack 2: 0x8BC
- stack 1: 0x1E
- stack 0: 0x20
7648	 457	MLOAD		 	  ;; # read from x1
- stack 2: 0x8BC
- stack 1: 0x1E
- stack 0: 0x10
7649	 458	SUB		 	  ;; # SUB
- stack 1: 0x8BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2
7650	 459	POP		 	 
- stack 0: 0x8BC
7651	 45A	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7652	 45C	ADD		 	 
- stack 0: 0x8C0
7653	 45D	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7654	 45E	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xD1000000EB00250463000804A30018002100010034F9080053004200660000
7655	 45F	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0xD1000000EB00250463000804A30018002100010034F9080053004200660000
- stack 0: 0xF0
7656	 461	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xD1
7657	 462	JUMP		 	 
- stack 0: 0x8C0
7658	 D1	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8C0
7659	 D2	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C0
- stack 0: 0x8C0
7660	 D3	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0xD1000000EB00250463000804A30018002100010034F9080053004200660000
7661	 D4	PUSH1	E0	 	 
- stack 2: 0x8C0
- stack 1: 0xD1000000EB00250463000804A30018002100010034F9080053004200660000
- stack 0: 0xE0
7662	 D6	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0xD10000
7663	 D7	PUSH2	FFFF	 	 
- stack 2: 0x8C0
- stack 1: 0xD10000
- stack 0: 0xFFFF
7664	 DA	AND		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7665	 DB	PUSH1	01	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x1
7666	 DD	SIGNEXTEND		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7667	 DE	PUSH2	03A0	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x3A0
7668	 E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x8C0
7669	 E2	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7670	 E4	ADD		 	 
- stack 0: 0x8C4
7671	 E5	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7672	 E6	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0xEB00250463000804A30018002100010034F908005300420066000004E30001
7673	 E7	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0xEB00250463000804A30018002100010034F908005300420066000004E30001
- stack 0: 0xF0
7674	 E9	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0xEB
7675	 EA	JUMP		 	 
- stack 0: 0x8C4
7676	 EB	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8C4
7677	 EC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7678	 ED	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0xEB00250463000804A30018002100010034F908005300420066000004E30001
7679	 EE	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0xEB00250463000804A30018002100010034F908005300420066000004E30001
- stack 0: 0xE0
7680	 F0	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0xEB0025
7681	 F1	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0xEB0025
- stack 0: 0xFFFF
7682	 F4	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x25
7683	 F5	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x25
- stack 0: 0x1
7684	 F7	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x25
7685	 F8	PUSH2	0380	 	 
- stack 2: 0x8C4
- stack 1: 0x25
- stack 0: 0x380
7686	 FB	MSTORE		 	  ;; # store to x28
- stack 0: 0x8C4
7687	 FC	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7688	 FE	ADD		 	 
- stack 0: 0x8C8
7689	 FF	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7690	 100	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x463000804A30018002100010034F908005300420066000004E3000100210001
7691	 101	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x463000804A30018002100010034F908005300420066000004E3000100210001
- stack 0: 0xF0
7692	 103	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x463
7693	 104	JUMP		 	 
- stack 0: 0x8C8
7694	 463	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8C8
7695	 464	PUSH1	00	 	 
- stack 1: 0x8C8
- stack 0: 0x0
7696	 466	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7697	 46B	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C8
- stack 0: 0x0
7698	 46C	PUSH2	03A0	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x3A0
7699	 46F	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x0
7700	 470	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7701	 475	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x0
7702	 476	SUB		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7703	 477	PUSH2	047F	 ;; _neq_a8cfbbe647022e90ca3c902f36fd969df9a6d4499565b8b7e266dec49b40a6a9	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x47F
7704	 47A	JUMPI		 	 
- stack 0: 0x8C8
7705	 47B	PUSH2	0499	 ;; _neq_after_a8cfbbe647022e90ca3c902f36fd969df9a6d4499565b8b7e266dec49b40a6a9	 
- stack 1: 0x8C8
- stack 0: 0x499
7706	 47E	JUMP		 	 
- stack 0: 0x8C8
7707	 499	JUMPDEST		 ;; _neq_after_a8cfbbe647022e90ca3c902f36fd969df9a6d4499565b8b7e266dec49b40a6a9	 
- stack 0: 0x8C8
7708	 49A	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7709	 49C	ADD		 	 
- stack 0: 0x8CC
7710	 49D	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7711	 49E	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4A30018002100010034F908005300420066000004E30001002100010034F90C
7712	 49F	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x4A30018002100010034F908005300420066000004E30001002100010034F90C
- stack 0: 0xF0
7713	 4A1	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4A3
7714	 4A2	JUMP		 	 
- stack 0: 0x8CC
7715	 4A3	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8CC
7716	 4A4	PUSH1	00	 	 
- stack 1: 0x8CC
- stack 0: 0x0
7717	 4A6	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7718	 4AB	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8CC
- stack 0: 0x0
7719	 4AC	PUSH2	0380	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x380
7720	 4AF	MLOAD		 	  ;; # read from x28
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x25
7721	 4B0	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8CC
- stack 2: 0x0
- stack 1: 0x25
- stack 0: 0xFFFFFFFF
7722	 4B5	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x25
7723	 4B6	SUB		 	 
- stack 1: 0x8CC
- stack 0: 0x25
7724	 4B7	PUSH2	04BF	 ;; _neq_3f3d4dd7680777a9e32f0c580319678dd0a18334596e8043b5262793f2e79095	 
- stack 2: 0x8CC
- stack 1: 0x25
- stack 0: 0x4BF
7725	 4BA	JUMPI		 	 
- stack 0: 0x8CC
7726	 4BF	JUMPDEST		 ;; _neq_3f3d4dd7680777a9e32f0c580319678dd0a18334596e8043b5262793f2e79095	 
- stack 0: 0x8CC
7727	 4C0	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7728	 4C1	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4A30018002100010034F908005300420066000004E30001002100010034F90C
7729	 4C2	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x4A30018002100010034F908005300420066000004E30001002100010034F90C
- stack 0: 0xE0
7730	 4C4	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4A30018
7731	 4C5	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x4A30018
- stack 0: 0xFFFF
7732	 4C8	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x18
7733	 4C9	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x18
- stack 0: 0x1
7734	 4CB	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x18
7735	 4CC	ADD		 	 
- stack 0: 0x8E4
7736	 4CD	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
7737	 4D2	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8E4
7738	 4D3	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7739	 4D4	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x2100010034F90C005300420066000004EE000000660000000000006574796D
7740	 4D5	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x2100010034F90C005300420066000004EE000000660000000000006574796D
- stack 0: 0xF0
7741	 4D7	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x21
7742	 4D8	JUMP		 	 
- stack 0: 0x8E4
7743	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8E4
7744	 22	PUSH4	00001000	 	 
- stack 1: 0x8E4
- stack 0: 0x1000
7745	 27	PUSH2	0160	 	 
- stack 2: 0x8E4
- stack 1: 0x1000
- stack 0: 0x160
7746	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E4
7747	 2B	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7748	 2D	ADD		 	 
- stack 0: 0x8E8
7749	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7750	 2F	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C005300420066000004EE000000660000000000006574796D00007473
7751	 30	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C005300420066000004EE000000660000000000006574796D00007473
- stack 0: 0xF0
7752	 32	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x34
7753	 33	JUMP		 	 
- stack 0: 0x8E8
7754	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x8E8
7755	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E8
- stack 0: 0x8E8
7756	 36	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C005300420066000004EE000000660000000000006574796D00007473
7757	 37	PUSH1	E0	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C005300420066000004EE000000660000000000006574796D00007473
- stack 0: 0xE0
7758	 39	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C
7759	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C
- stack 0: 0xFFFF
7760	 3D	AND		 	 
- stack 1: 0x8E8
- stack 0: 0xF90C
7761	 3E	PUSH1	01	 	 
- stack 2: 0x8E8
- stack 1: 0xF90C
- stack 0: 0x1
7762	 40	SIGNEXTEND		 	 
- stack 1: 0x8E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
7763	 41	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x160
7764	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x1000
7765	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8E8
- stack 0: 0x90C
7766	 46	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0x90C
- stack 0: 0x160
7767	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E8
7768	 4A	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
7769	 4C	ADD		 	 
- stack 0: 0x8EC
7770	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
7771	 4E	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x5300420066000004EE000000660000000000006574796D0000747300525245
7772	 4F	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x5300420066000004EE000000660000000000006574796D0000747300525245
- stack 0: 0xF0
7773	 51	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x53
7774	 52	JUMP		 	 
- stack 0: 0x8EC
7775	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8EC
7776	 54	PUSH4	00042000	 	 
- stack 1: 0x8EC
- stack 0: 0x42000
7777	 59	PUSH2	0140	 	 
- stack 2: 0x8EC
- stack 1: 0x42000
- stack 0: 0x140
7778	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8EC
7779	 5D	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
7780	 5F	ADD		 	 
- stack 0: 0x8F0
7781	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
7782	 61	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x66000004EE000000660000000000006574796D000074730052524500004B4F
7783	 62	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x66000004EE000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
7784	 64	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x66
7785	 65	JUMP		 	 
- stack 0: 0x8F0
7786	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F0
7787	 67	PUSH2	0140	 	 
- stack 1: 0x8F0
- stack 0: 0x140
7788	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F0
- stack 0: 0x42000
7789	 6B	PUSH2	0075	 ;; _ecall_357371cfc9c4318bb5498aa0e8f01fa7b2d57998f35078eeb79b24bb6e1e913c	 
- stack 2: 0x8F0
- stack 1: 0x42000
- stack 0: 0x75
7790	 6E	JUMPI		 	 
- stack 0: 0x8F0
7791	 75	JUMPDEST		 ;; _ecall_357371cfc9c4318bb5498aa0e8f01fa7b2d57998f35078eeb79b24bb6e1e913c	 
- stack 0: 0x8F0
7792	 76	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7793	 78	PUSH2	0160	 	 
- stack 2: 0x8F0
- stack 1: 0x4
- stack 0: 0x160
7794	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8F0
- stack 1: 0x4
- stack 0: 0x90C
7795	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8F0
7796	 7D	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
7797	 7F	ADD		 	 
- stack 0: 0x8F4
7798	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
7799	 81	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x4EE000000660000000000006574796D000074730052524500004B4F00000000
7800	 82	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x4EE000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
7801	 84	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x4EE
7802	 85	JUMP		 	 
- stack 0: 0x8F4
7803	 4EE	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8F4
7804	 4EF	PUSH4	00000000	 	 
- stack 1: 0x8F4
- stack 0: 0x0
7805	 4F4	PUSH2	0140	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x140
7806	 4F7	MSTORE		 	  ;; # store to x10
- stack 0: 0x8F4
7807	 4F8	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
7808	 4FA	ADD		 	 
- stack 0: 0x8F8
7809	 4FB	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
7810	 4FC	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
7811	 4FD	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
7812	 4FF	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x66
7813	 500	JUMP		 	 
- stack 0: 0x8F8
7814	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F8
7815	 67	PUSH2	0140	 	 
- stack 1: 0x8F8
- stack 0: 0x140
7816	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F8
- stack 0: 0x0
7817	 6B	PUSH2	0075	 ;; _ecall_357371cfc9c4318bb5498aa0e8f01fa7b2d57998f35078eeb79b24bb6e1e913c	 
- stack 2: 0x8F8
- stack 1: 0x0
- stack 0: 0x75
7818	 6E	JUMPI		 	 
- stack 0: 0x8F8
7819	 6F	PUSH1	20	 	 
- stack 1: 0x8F8
- stack 0: 0x20
7820	 71	PUSH2	0160	 	 
- stack 2: 0x8F8
- stack 1: 0x20
- stack 0: 0x160
7821	 74	RETURN		 	 
Final bytecode length; 2578
Returned: 000000000000000000000000000000000000000000000000000000000000090c
gasUsed : 27064
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424
** HOT: 428 - range: 428,42c,430,434,438,43c
** HOT: 440 - range: 440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c
** HOT: 470 - range: 470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8,4bc
** HOT: 4c0 - range: 4c0,4c4,4c8,4cc,4d0,4d4,4d8,4dc
** HOT: 4e0 - range: 4e0,4e4,4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c
** HOT: 520 - range: 520,524,528,52c,530,534,538,53c
** HOT: 540 - range: 540,544,548,54c,550,554
** HOT: 558 - range: 558,55c,560,564,568,56c
** HOT: 570 - range: 570,574,578,57c,580,584
** HOT: 588 - range: 588,58c,590,594,598,59c
** HOT: 5a0 - range: 5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8
** HOT: 5cc - range: 5cc,5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5d0 - range: 5d0,5d4,5d8,5dc,5e0,5e4,5e8
** HOT: 5ec - range: 5ec,5f0,5f4
** HOT: 5f8 - range: 5f8,5fc,600,604,608,60c,610,614,618
** HOT: 5fc - range: 5fc,600,604,608,60c,610,614,618
** HOT: 61c - range: 61c,620,624
** HOT: 628 - range: 628,62c,630,634,638,63c,640,644,648,64c
** HOT: 62c - range: 62c,630,634,638,63c,640,644,648,64c
** HOT: 650 - range: 650,654,658
** HOT: 65c - range: 65c,660,664,668,66c,670,674
** HOT: 660 - range: 660,664,668,66c,670,674
** HOT: 678 - range: 678,67c,680
** HOT: 684 - range: 684,688,68c,690,694,698,69c,6a0
** HOT: 688 - range: 688,68c,690,694,698,69c,6a0
** HOT: 6a4 - range: 6a4,6a8,6ac
** HOT: 6b0 - range: 6b0,6b4,6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6b4 - range: 6b4,6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6d4 - range: 6d4,6d8,6dc
** HOT: 6e0 - range: 6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc
** HOT: 6e4 - range: 6e4,6e8,6ec,6f0,6f4,6f8,6fc
** HOT: 700 - range: 700,704,708
** HOT: 70c - range: 70c,710,714,718,71c,720,724,728,72c
** HOT: 710 - range: 710,714,718,71c,720,724,728,72c
** HOT: 730 - range: 730,734,738
** HOT: 73c - range: 73c,740,744,748,74c,750,754,758,75c
** HOT: 740 - range: 740,744,748,74c,750,754,758,75c
** HOT: 760 - range: 760,764,768
** HOT: 76c - range: 76c,770,774,778,77c,780,784
** HOT: 770 - range: 770,774,778,77c,780,784
** HOT: 788 - range: 788,78c,790
** HOT: 794 - range: 794,798,79c,7a0,7a4,7a8,7ac,7b0
** HOT: 798 - range: 798,79c,7a0,7a4,7a8,7ac,7b0
** HOT: 7b4 - range: 7b4,7b8,7bc
** HOT: 7c0 - range: 7c0,7c4,7c8,7cc,7d0,7d4,7d8,7dc,7e0
** HOT: 7c4 - range: 7c4,7c8,7cc,7d0,7d4,7d8,7dc,7e0
** HOT: 7e4 - range: 7e4,7e8,7ec
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800,804,808,80c
** HOT: 7f4 - range: 7f4,7f8,7fc,800,804,808,80c
** HOT: 810 - range: 810,814,818
** HOT: 81c - range: 81c,820,824,828,82c,830,834,838,83c
** HOT: 820 - range: 820,824,828,82c,830,834,838,83c
** HOT: 840 - range: 840,844,848
** HOT: 84c - range: 84c,850,854,858,85c,860,864,868,86c
** HOT: 850 - range: 850,854,858,85c,860,864,868,86c
** HOT: 870 - range: 870,874,878
** HOT: 87c - range: 87c,880,884,888,88c
** HOT: 890 - range: 890,894,898,89c,8a0
** HOT: 8a4 - range: 8a4,8a8,8ac,8b0
** HOT: 8b4 - range: 8b4,8b8,8bc,8c0,8c4,8c8
