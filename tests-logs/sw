Running in EVM:
0	 0	PUSH4	04F8	 	 
- stack 0: 0x4F8
1	 5	PUSH2	06BB	 ;; _rambegin	 
- stack 1: 0x4F8
- stack 0: 0x6BB
2	 8	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x6BB
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x4F8
- stack 0: 0x6BC
4	 B	PUSH2	0400	 	 
- stack 2: 0x4F8
- stack 1: 0x6BC
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F8C0005300420066000000860000009504C000B40AA000C700AA
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F8C0005300420066000000860000009504C000B40AA000C700AA
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0005300420066000000860000009504C000B40AA000C700AA00E60000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0005300420066000000860000009504C000B40AA000C700AA00E60000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1856(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0005300420066000000860000009504C000B40AA000C700AA00E60000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0005300420066000000860000009504C000B40AA000C700AA00E60000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F8C0
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F8C0
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF8C0
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF8C0
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8C0
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x8C0
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x8C0
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860000009504C000B40AA000C700AA00E6000001350000
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860000009504C000B40AA000C700AA00E6000001350000
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860000009504C000B40AA000C700AA00E600000135000001640AA0
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860000009504C000B40AA000C700AA00E600000135000001640AA0
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_59f52a3ac6ee69558bad7a9c3c675c76a6d3539cf7b115e00697f23b3445ecc3	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_59f52a3ac6ee69558bad7a9c3c675c76a6d3539cf7b115e00697f23b3445ecc3	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x8C0
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860000009504C000B40AA000C700AA00E600000135000001640AA0017700AA
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860000009504C000B40AA000C700AA00E600000135000001640AA0017700AA
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x410
76	 87	DUP1		 	 
- stack 1: 0x410
- stack 0: 0x410
77	 88	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0x410
- stack 0: 0x20
78	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 8C	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 8E	ADD		 	 
- stack 0: 0x414
81	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 90	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9504C000B40AA000C700AA00E600000135000001640AA0017700AA01960002
83	 91	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x9504C000B40AA000C700AA00E600000135000001640AA0017700AA01960002
- stack 0: 0xF0
84	 93	SHR		 	 
- stack 1: 0x414
- stack 0: 0x95
85	 94	JUMP		 	 
- stack 0: 0x414
86	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x414
87	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 97	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x9504C000B40AA000C700AA00E600000135000001640AA0017700AA01960002
89	 98	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x9504C000B40AA000C700AA00E600000135000001640AA0017700AA01960002
- stack 0: 0xE0
90	 9A	SHR		 	 
- stack 1: 0x414
- stack 0: 0x9504C0
91	 9B	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x9504C0
- stack 0: 0xFFFF
92	 9E	AND		 	 
- stack 1: 0x414
- stack 0: 0x4C0
93	 9F	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x1
94	 A1	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0x4C0
95	 A2	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x20
96	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0x4C0
- stack 0: 0x410
97	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0x8D0
98	 A7	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0x8D0
- stack 0: 0x20
99	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AB	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 AD	ADD		 	 
- stack 0: 0x418
102	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 AF	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB40AA000C700AA00E600000135000001640AA0017700AA0196000201B00460
104	 B0	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB40AA000C700AA00E600000135000001640AA0017700AA0196000201B00460
- stack 0: 0xF0
105	 B2	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB4
106	 B3	JUMP		 	 
- stack 0: 0x418
107	 B4	JUMPDEST		 ;; __riscvimpl_LUI_aa0137	  ;; # instr: lui sp,0xaa0(ignore imm)
- stack 0: 0x418
108	 B5	PUSH4	00aa0000	 	 
- stack 1: 0x418
- stack 0: 0xAA0000
109	 BA	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xAA0000
- stack 0: 0x40
110	 BD	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
111	 BE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
112	 C0	ADD		 	 
- stack 0: 0x41C
113	 C1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
114	 C2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC700AA00E600000135000001640AA0017700AA0196000201B0046000860000
115	 C3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xC700AA00E600000135000001640AA0017700AA0196000201B0046000860000
- stack 0: 0xF0
116	 C5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC7
117	 C6	JUMP		 	 
- stack 0: 0x41C
118	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x41C
119	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
120	 C9	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xC700AA00E600000135000001640AA0017700AA0196000201B0046000860000
121	 CA	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xC700AA00E600000135000001640AA0017700AA0196000201B0046000860000
- stack 0: 0xE0
122	 CC	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xC700AA
123	 CD	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xC700AA
- stack 0: 0xFFFF
124	 D0	AND		 	 
- stack 1: 0x41C
- stack 0: 0xAA
125	 D1	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xAA
- stack 0: 0x1
126	 D3	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xAA
127	 D4	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xAA
- stack 0: 0x40
128	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0xAA
- stack 0: 0xAA0000
129	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x41C
- stack 0: 0xAA00AA
130	 D9	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xAA00AA
- stack 0: 0x40
131	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x41C
132	 DD	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 DF	ADD		 	 
- stack 0: 0x420
134	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E1	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xE600000135000001640AA0017700AA0196000201B004600086000000950498
136	 E2	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xE600000135000001640AA0017700AA0196000201B004600086000000950498
- stack 0: 0xF0
137	 E4	SHR		 	 
- stack 1: 0x420
- stack 0: 0xE6
138	 E5	JUMP		 	 
- stack 0: 0x420
139	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x420
140	 E7	PUSH2	0020	 	 
- stack 1: 0x420
- stack 0: 0x20
141	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x420
- stack 0: 0x8D0
142	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x420
143	 EC	MLOAD		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xE600000135000001640AA0017700AA0196000201B004600086000000950498
144	 ED	PUSH1	E0	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xE600000135000001640AA0017700AA0196000201B004600086000000950498
- stack 0: 0xE0
145	 EF	SHR		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xE60000
146	 F0	PUSH2	FFFF	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xE60000
- stack 0: 0xFFFF
147	 F3	AND		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x0
148	 F4	PUSH1	01	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
149	 F6	SIGNEXTEND		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x0
150	 F7	ADD		 	 
- stack 1: 0x420
- stack 0: 0x8D0
151	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
152	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x420
- stack 0: 0x8D0
153	 FE	DUP1		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0x8D0
154	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
155	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
156	 121	AND		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
157	 122	PUSH2	0040	 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x40
158	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA
159	 126	PUSH1	E0	 	 
- stack 4: 0x420
- stack 3: 0x8D0
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 1: 0xAA00AA
- stack 0: 0xE0
160	 128	SHL		 	 
- stack 3: 0x420
- stack 2: 0x8D0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA00000000000000000000000000000000000000000000000000000000
161	 129	ADD		 	 
- stack 2: 0x420
- stack 1: 0x8D0
- stack 0: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
162	 12A	SWAP1		 	 
- stack 2: 0x420
- stack 1: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x8D0
163	 12B	MSTORE		 	 
- stack 0: 0x420
164	 12C	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
165	 12E	ADD		 	 
- stack 0: 0x424
166	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
167	 130	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x135000001640AA0017700AA0196000201B00460008600000095049801F2A00B
168	 131	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x135000001640AA0017700AA0196000201B00460008600000095049801F2A00B
- stack 0: 0xF0
169	 133	SHR		 	 
- stack 1: 0x424
- stack 0: 0x135
170	 134	JUMP		 	 
- stack 0: 0x424
171	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x424
172	 136	PUSH2	0020	 	 
- stack 1: 0x424
- stack 0: 0x20
173	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x424
- stack 0: 0x8D0
174	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
175	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x8D0
176	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0x424
177	 141	MLOAD		 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0x135000001640AA0017700AA0196000201B00460008600000095049801F2A00B
178	 142	PUSH1	E0	 	 
- stack 3: 0x424
- stack 2: 0x8D0
- stack 1: 0x135000001640AA0017700AA0196000201B00460008600000095049801F2A00B
- stack 0: 0xE0
179	 144	SHR		 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0x1350000
180	 145	PUSH2	FFFF	 	 
- stack 3: 0x424
- stack 2: 0x8D0
- stack 1: 0x1350000
- stack 0: 0xFFFF
181	 148	AND		 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0x0
182	 149	PUSH1	01	 	 
- stack 3: 0x424
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
183	 14B	SIGNEXTEND		 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0x0
184	 14C	ADD		 	 
- stack 1: 0x424
- stack 0: 0x8D0
185	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x424
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
186	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x424
- stack 0: 0x8D0
187	 153	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
188	 154	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xE0
189	 156	SHR		 	 
- stack 1: 0x424
- stack 0: 0xAA00AA
190	 157	PUSH2	0060	 	 
- stack 2: 0x424
- stack 1: 0xAA00AA
- stack 0: 0x60
191	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x424
192	 15B	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
193	 15D	ADD		 	 
- stack 0: 0x428
194	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
195	 15F	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x1640AA0017700AA0196000201B00460008600000095049801F2A00B00C7FA00
196	 160	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x1640AA0017700AA0196000201B00460008600000095049801F2A00B00C7FA00
- stack 0: 0xF0
197	 162	SHR		 	 
- stack 1: 0x428
- stack 0: 0x164
198	 163	JUMP		 	 
- stack 0: 0x428
199	 164	JUMPDEST		 ;; __riscvimpl_LUI_aa0eb7	  ;; # instr: lui t4,0xaa0(ignore imm)
- stack 0: 0x428
200	 165	PUSH4	00aa0000	 	 
- stack 1: 0x428
- stack 0: 0xAA0000
201	 16A	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xAA0000
- stack 0: 0x3A0
202	 16D	MSTORE		 	  ;; # store to x29
- stack 0: 0x428
203	 16E	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
204	 170	ADD		 	 
- stack 0: 0x42C
205	 171	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
206	 172	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x17700AA0196000201B00460008600000095049801F2A00B00C7FA0000E60004
207	 173	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x17700AA0196000201B00460008600000095049801F2A00B00C7FA0000E60004
- stack 0: 0xF0
208	 175	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x177
209	 176	JUMP		 	 
- stack 0: 0x42C
210	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x42C
211	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
212	 179	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x17700AA0196000201B00460008600000095049801F2A00B00C7FA0000E60004
213	 17A	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x17700AA0196000201B00460008600000095049801F2A00B00C7FA0000E60004
- stack 0: 0xE0
214	 17C	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x17700AA
215	 17D	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x17700AA
- stack 0: 0xFFFF
216	 180	AND		 	 
- stack 1: 0x42C
- stack 0: 0xAA
217	 181	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0x1
218	 183	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0xAA
219	 184	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0x3A0
220	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x42C
- stack 1: 0xAA
- stack 0: 0xAA0000
221	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x42C
- stack 0: 0xAA00AA
222	 189	PUSH2	03A0	 	 
- stack 2: 0x42C
- stack 1: 0xAA00AA
- stack 0: 0x3A0
223	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x42C
224	 18D	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
225	 18F	ADD		 	 
- stack 0: 0x430
226	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
227	 191	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x196000201B00460008600000095049801F2A00B00C7FA0000E6000401350004
228	 192	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x196000201B00460008600000095049801F2A00B00C7FA0000E6000401350004
- stack 0: 0xF0
229	 194	SHR		 	 
- stack 1: 0x430
- stack 0: 0x196
230	 195	JUMP		 	 
- stack 0: 0x430
231	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x430
232	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
233	 198	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x196000201B00460008600000095049801F2A00B00C7FA0000E6000401350004
234	 199	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x196000201B00460008600000095049801F2A00B00C7FA0000E6000401350004
- stack 0: 0xE0
235	 19B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x1960002
236	 19C	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x1960002
- stack 0: 0xFFFF
237	 19F	AND		 	 
- stack 1: 0x430
- stack 0: 0x2
238	 1A0	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0x2
- stack 0: 0x1
239	 1A2	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0x2
240	 1A3	PUSH2	0380	 	 
- stack 2: 0x430
- stack 1: 0x2
- stack 0: 0x380
241	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x430
242	 1A7	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
243	 1A9	ADD		 	 
- stack 0: 0x434
244	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
245	 1AB	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x1B00460008600000095049801F2A00B00C7FA0000E60004013500040205A00B
246	 1AC	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x1B00460008600000095049801F2A00B00C7FA0000E60004013500040205A00B
- stack 0: 0xF0
247	 1AE	SHR		 	 
- stack 1: 0x434
- stack 0: 0x1B0
248	 1AF	JUMP		 	 
- stack 0: 0x434
249	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x434
250	 1B1	PUSH2	0060	 	 
- stack 1: 0x434
- stack 0: 0x60
251	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x434
- stack 0: 0xAA00AA
252	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x434
- stack 1: 0xAA00AA
- stack 0: 0xFFFFFFFF
253	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x434
- stack 0: 0xAA00AA
254	 1BB	PUSH2	03A0	 	 
- stack 2: 0x434
- stack 1: 0xAA00AA
- stack 0: 0x3A0
255	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x434
- stack 1: 0xAA00AA
- stack 0: 0xAA00AA
256	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x434
- stack 2: 0xAA00AA
- stack 1: 0xAA00AA
- stack 0: 0xFFFFFFFF
257	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x434
- stack 1: 0xAA00AA
- stack 0: 0xAA00AA
258	 1C5	SUB		 	 
- stack 1: 0x434
- stack 0: 0x0
259	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x434
- stack 1: 0x0
- stack 0: 0x1CE
260	 1C9	JUMPI		 	 
- stack 0: 0x434
261	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x434
- stack 0: 0x1E8
262	 1CD	JUMP		 	 
- stack 0: 0x434
263	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x434
264	 1E9	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
265	 1EB	ADD		 	 
- stack 0: 0x438
266	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
267	 1ED	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x8600000095049801F2A00B00C7FA0000E60004013500040205A00B0177FA00
268	 1EE	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x8600000095049801F2A00B00C7FA0000E60004013500040205A00B0177FA00
- stack 0: 0xF0
269	 1F0	SHR		 	 
- stack 1: 0x438
- stack 0: 0x86
270	 1F1	JUMP		 	 
- stack 0: 0x438
271	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x438
272	 87	DUP1		 	 
- stack 1: 0x438
- stack 0: 0x438
273	 88	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0x438
- stack 0: 0x20
274	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
275	 8C	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
276	 8E	ADD		 	 
- stack 0: 0x43C
277	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
278	 90	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x95049801F2A00B00C7FA0000E60004013500040205A00B0177FA0001960003
279	 91	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x95049801F2A00B00C7FA0000E60004013500040205A00B0177FA0001960003
- stack 0: 0xF0
280	 93	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x95
281	 94	JUMP		 	 
- stack 0: 0x43C
282	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x43C
283	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
284	 97	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x95049801F2A00B00C7FA0000E60004013500040205A00B0177FA0001960003
285	 98	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0x95049801F2A00B00C7FA0000E60004013500040205A00B0177FA0001960003
- stack 0: 0xE0
286	 9A	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x950498
287	 9B	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0x950498
- stack 0: 0xFFFF
288	 9E	AND		 	 
- stack 1: 0x43C
- stack 0: 0x498
289	 9F	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0x498
- stack 0: 0x1
290	 A1	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0x498
291	 A2	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x498
- stack 0: 0x20
292	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x43C
- stack 1: 0x498
- stack 0: 0x438
293	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x43C
- stack 0: 0x8D0
294	 A7	PUSH2	0020	 	 
- stack 2: 0x43C
- stack 1: 0x8D0
- stack 0: 0x20
295	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x43C
296	 AB	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
297	 AD	ADD		 	 
- stack 0: 0x440
298	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
299	 AF	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1F2A00B00C7FA0000E60004013500040205A00B0177FA000196000301B00438
300	 B0	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x1F2A00B00C7FA0000E60004013500040205A00B0177FA000196000301B00438
- stack 0: 0xF0
301	 B2	SHR		 	 
- stack 1: 0x440
- stack 0: 0x1F2
302	 B3	JUMP		 	 
- stack 0: 0x440
303	 1F2	JUMPDEST		 ;; __riscvimpl_LUI_aa00b137	  ;; # instr: lui sp,0xaa00b(ignore imm)
- stack 0: 0x440
304	 1F3	PUSH4	aa00b000	 	 
- stack 1: 0x440
- stack 0: 0xAA00B000
305	 1F8	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xAA00B000
- stack 0: 0x40
306	 1FB	MSTORE		 	  ;; # store to x2
- stack 0: 0x440
307	 1FC	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
308	 1FE	ADD		 	 
- stack 0: 0x444
309	 1FF	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
310	 200	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xC7FA0000E60004013500040205A00B0177FA000196000301B0043800860000
311	 201	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xC7FA0000E60004013500040205A00B0177FA000196000301B0043800860000
- stack 0: 0xF0
312	 203	SHR		 	 
- stack 1: 0x444
- stack 0: 0xC7
313	 204	JUMP		 	 
- stack 0: 0x444
314	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x444
315	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x444
- stack 0: 0x444
316	 C9	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xC7FA0000E60004013500040205A00B0177FA000196000301B0043800860000
317	 CA	PUSH1	E0	 	 
- stack 2: 0x444
- stack 1: 0xC7FA0000E60004013500040205A00B0177FA000196000301B0043800860000
- stack 0: 0xE0
318	 CC	SHR		 	 
- stack 1: 0x444
- stack 0: 0xC7FA00
319	 CD	PUSH2	FFFF	 	 
- stack 2: 0x444
- stack 1: 0xC7FA00
- stack 0: 0xFFFF
320	 D0	AND		 	 
- stack 1: 0x444
- stack 0: 0xFA00
321	 D1	PUSH1	01	 	 
- stack 2: 0x444
- stack 1: 0xFA00
- stack 0: 0x1
322	 D3	SIGNEXTEND		 	 
- stack 1: 0x444
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
323	 D4	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x40
324	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x444
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xAA00B000
325	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x444
- stack 0: 0xAA00AA00
326	 D9	PUSH2	0040	 	 
- stack 2: 0x444
- stack 1: 0xAA00AA00
- stack 0: 0x40
327	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x444
328	 DD	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
329	 DF	ADD		 	 
- stack 0: 0x448
330	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
331	 E1	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0xE60004013500040205A00B0177FA000196000301B004380086000000950470
332	 E2	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0xE60004013500040205A00B0177FA000196000301B004380086000000950470
- stack 0: 0xF0
333	 E4	SHR		 	 
- stack 1: 0x448
- stack 0: 0xE6
334	 E5	JUMP		 	 
- stack 0: 0x448
335	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x448
336	 E7	PUSH2	0020	 	 
- stack 1: 0x448
- stack 0: 0x20
337	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x448
- stack 0: 0x8D0
338	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x448
- stack 1: 0x8D0
- stack 0: 0x448
339	 EC	MLOAD		 	 
- stack 2: 0x448
- stack 1: 0x8D0
- stack 0: 0xE60004013500040205A00B0177FA000196000301B004380086000000950470
340	 ED	PUSH1	E0	 	 
- stack 3: 0x448
- stack 2: 0x8D0
- stack 1: 0xE60004013500040205A00B0177FA000196000301B004380086000000950470
- stack 0: 0xE0
341	 EF	SHR		 	 
- stack 2: 0x448
- stack 1: 0x8D0
- stack 0: 0xE60004
342	 F0	PUSH2	FFFF	 	 
- stack 3: 0x448
- stack 2: 0x8D0
- stack 1: 0xE60004
- stack 0: 0xFFFF
343	 F3	AND		 	 
- stack 2: 0x448
- stack 1: 0x8D0
- stack 0: 0x4
344	 F4	PUSH1	01	 	 
- stack 3: 0x448
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
345	 F6	SIGNEXTEND		 	 
- stack 2: 0x448
- stack 1: 0x8D0
- stack 0: 0x4
346	 F7	ADD		 	 
- stack 1: 0x448
- stack 0: 0x8D4
347	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x448
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
348	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x448
- stack 0: 0x8D4
349	 FE	DUP1		 	 
- stack 2: 0x448
- stack 1: 0x8D4
- stack 0: 0x8D4
350	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x448
- stack 1: 0x8D4
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
351	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x448
- stack 2: 0x8D4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
352	 121	AND		 	 
- stack 2: 0x448
- stack 1: 0x8D4
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
353	 122	PUSH2	0040	 	 
- stack 3: 0x448
- stack 2: 0x8D4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x40
354	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x448
- stack 2: 0x8D4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA00
355	 126	PUSH1	E0	 	 
- stack 4: 0x448
- stack 3: 0x8D4
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 1: 0xAA00AA00
- stack 0: 0xE0
356	 128	SHL		 	 
- stack 3: 0x448
- stack 2: 0x8D4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA0000000000000000000000000000000000000000000000000000000000
357	 129	ADD		 	 
- stack 2: 0x448
- stack 1: 0x8D4
- stack 0: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
358	 12A	SWAP1		 	 
- stack 2: 0x448
- stack 1: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x8D4
359	 12B	MSTORE		 	 
- stack 0: 0x448
360	 12C	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
361	 12E	ADD		 	 
- stack 0: 0x44C
362	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
363	 130	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x13500040205A00B0177FA000196000301B0043800860000009504700218AA01
364	 131	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x13500040205A00B0177FA000196000301B0043800860000009504700218AA01
- stack 0: 0xF0
365	 133	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x135
366	 134	JUMP		 	 
- stack 0: 0x44C
367	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x44C
368	 136	PUSH2	0020	 	 
- stack 1: 0x44C
- stack 0: 0x20
369	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x44C
- stack 0: 0x8D0
370	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
371	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x8D0
372	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0x44C
373	 141	MLOAD		 	 
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0x13500040205A00B0177FA000196000301B0043800860000009504700218AA01
374	 142	PUSH1	E0	 	 
- stack 3: 0x44C
- stack 2: 0x8D0
- stack 1: 0x13500040205A00B0177FA000196000301B0043800860000009504700218AA01
- stack 0: 0xE0
375	 144	SHR		 	 
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0x1350004
376	 145	PUSH2	FFFF	 	 
- stack 3: 0x44C
- stack 2: 0x8D0
- stack 1: 0x1350004
- stack 0: 0xFFFF
377	 148	AND		 	 
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0x4
378	 149	PUSH1	01	 	 
- stack 3: 0x44C
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
379	 14B	SIGNEXTEND		 	 
- stack 2: 0x44C
- stack 1: 0x8D0
- stack 0: 0x4
380	 14C	ADD		 	 
- stack 1: 0x44C
- stack 0: 0x8D4
381	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x44C
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
382	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x44C
- stack 0: 0x8D4
383	 153	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
384	 154	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xE0
385	 156	SHR		 	 
- stack 1: 0x44C
- stack 0: 0xAA00AA00
386	 157	PUSH2	0060	 	 
- stack 2: 0x44C
- stack 1: 0xAA00AA00
- stack 0: 0x60
387	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x44C
388	 15B	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
389	 15D	ADD		 	 
- stack 0: 0x450
390	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
391	 15F	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x205A00B0177FA000196000301B0043800860000009504700218AA0100C7FAA0
392	 160	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x205A00B0177FA000196000301B0043800860000009504700218AA0100C7FAA0
- stack 0: 0xF0
393	 162	SHR		 	 
- stack 1: 0x450
- stack 0: 0x205
394	 163	JUMP		 	 
- stack 0: 0x450
395	 205	JUMPDEST		 ;; __riscvimpl_LUI_aa00beb7	  ;; # instr: lui t4,0xaa00b(ignore imm)
- stack 0: 0x450
396	 206	PUSH4	aa00b000	 	 
- stack 1: 0x450
- stack 0: 0xAA00B000
397	 20B	PUSH2	03A0	 	 
- stack 2: 0x450
- stack 1: 0xAA00B000
- stack 0: 0x3A0
398	 20E	MSTORE		 	  ;; # store to x29
- stack 0: 0x450
399	 20F	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
400	 211	ADD		 	 
- stack 0: 0x454
401	 212	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
402	 213	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x177FA000196000301B0043800860000009504700218AA0100C7FAA000E60008
403	 214	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x177FA000196000301B0043800860000009504700218AA0100C7FAA000E60008
- stack 0: 0xF0
404	 216	SHR		 	 
- stack 1: 0x454
- stack 0: 0x177
405	 217	JUMP		 	 
- stack 0: 0x454
406	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x454
407	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x454
- stack 0: 0x454
408	 179	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x177FA000196000301B0043800860000009504700218AA0100C7FAA000E60008
409	 17A	PUSH1	E0	 	 
- stack 2: 0x454
- stack 1: 0x177FA000196000301B0043800860000009504700218AA0100C7FAA000E60008
- stack 0: 0xE0
410	 17C	SHR		 	 
- stack 1: 0x454
- stack 0: 0x177FA00
411	 17D	PUSH2	FFFF	 	 
- stack 2: 0x454
- stack 1: 0x177FA00
- stack 0: 0xFFFF
412	 180	AND		 	 
- stack 1: 0x454
- stack 0: 0xFA00
413	 181	PUSH1	01	 	 
- stack 2: 0x454
- stack 1: 0xFA00
- stack 0: 0x1
414	 183	SIGNEXTEND		 	 
- stack 1: 0x454
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
415	 184	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x3A0
416	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xAA00B000
417	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x454
- stack 0: 0xAA00AA00
418	 189	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xAA00AA00
- stack 0: 0x3A0
419	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
420	 18D	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
421	 18F	ADD		 	 
- stack 0: 0x458
422	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
423	 191	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x196000301B0043800860000009504700218AA0100C7FAA000E6000801350008
424	 192	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x196000301B0043800860000009504700218AA0100C7FAA000E6000801350008
- stack 0: 0xF0
425	 194	SHR		 	 
- stack 1: 0x458
- stack 0: 0x196
426	 195	JUMP		 	 
- stack 0: 0x458
427	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x458
428	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
429	 198	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x196000301B0043800860000009504700218AA0100C7FAA000E6000801350008
430	 199	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0x196000301B0043800860000009504700218AA0100C7FAA000E6000801350008
- stack 0: 0xE0
431	 19B	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1960003
432	 19C	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0x1960003
- stack 0: 0xFFFF
433	 19F	AND		 	 
- stack 1: 0x458
- stack 0: 0x3
434	 1A0	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0x3
- stack 0: 0x1
435	 1A2	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0x3
436	 1A3	PUSH2	0380	 	 
- stack 2: 0x458
- stack 1: 0x3
- stack 0: 0x380
437	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x458
438	 1A7	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
439	 1A9	ADD		 	 
- stack 0: 0x45C
440	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
441	 1AB	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x1B0043800860000009504700218AA0100C7FAA000E6000801350008022BAA01
442	 1AC	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x1B0043800860000009504700218AA0100C7FAA000E6000801350008022BAA01
- stack 0: 0xF0
443	 1AE	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1B0
444	 1AF	JUMP		 	 
- stack 0: 0x45C
445	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x45C
446	 1B1	PUSH2	0060	 	 
- stack 1: 0x45C
- stack 0: 0x60
447	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x45C
- stack 0: 0xAA00AA00
448	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x45C
- stack 1: 0xAA00AA00
- stack 0: 0xFFFFFFFF
449	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x45C
- stack 0: 0xAA00AA00
450	 1BB	PUSH2	03A0	 	 
- stack 2: 0x45C
- stack 1: 0xAA00AA00
- stack 0: 0x3A0
451	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x45C
- stack 1: 0xAA00AA00
- stack 0: 0xAA00AA00
452	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x45C
- stack 2: 0xAA00AA00
- stack 1: 0xAA00AA00
- stack 0: 0xFFFFFFFF
453	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x45C
- stack 1: 0xAA00AA00
- stack 0: 0xAA00AA00
454	 1C5	SUB		 	 
- stack 1: 0x45C
- stack 0: 0x0
455	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x45C
- stack 1: 0x0
- stack 0: 0x1CE
456	 1C9	JUMPI		 	 
- stack 0: 0x45C
457	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x45C
- stack 0: 0x1E8
458	 1CD	JUMP		 	 
- stack 0: 0x45C
459	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x45C
460	 1E9	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
461	 1EB	ADD		 	 
- stack 0: 0x460
462	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
463	 1ED	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x860000009504700218AA0100C7FAA000E6000801350008022BAA010177FAA0
464	 1EE	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x860000009504700218AA0100C7FAA000E6000801350008022BAA010177FAA0
- stack 0: 0xF0
465	 1F0	SHR		 	 
- stack 1: 0x460
- stack 0: 0x86
466	 1F1	JUMP		 	 
- stack 0: 0x460
467	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x460
468	 87	DUP1		 	 
- stack 1: 0x460
- stack 0: 0x460
469	 88	PUSH2	0020	 	 
- stack 2: 0x460
- stack 1: 0x460
- stack 0: 0x20
470	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x460
471	 8C	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
472	 8E	ADD		 	 
- stack 0: 0x464
473	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
474	 90	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x9504700218AA0100C7FAA000E6000801350008022BAA010177FAA001960004
475	 91	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x9504700218AA0100C7FAA000E6000801350008022BAA010177FAA001960004
- stack 0: 0xF0
476	 93	SHR		 	 
- stack 1: 0x464
- stack 0: 0x95
477	 94	JUMP		 	 
- stack 0: 0x464
478	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x464
479	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
480	 97	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x9504700218AA0100C7FAA000E6000801350008022BAA010177FAA001960004
481	 98	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0x9504700218AA0100C7FAA000E6000801350008022BAA010177FAA001960004
- stack 0: 0xE0
482	 9A	SHR		 	 
- stack 1: 0x464
- stack 0: 0x950470
483	 9B	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0x950470
- stack 0: 0xFFFF
484	 9E	AND		 	 
- stack 1: 0x464
- stack 0: 0x470
485	 9F	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0x470
- stack 0: 0x1
486	 A1	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0x470
487	 A2	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x470
- stack 0: 0x20
488	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x464
- stack 1: 0x470
- stack 0: 0x460
489	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x464
- stack 0: 0x8D0
490	 A7	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0x8D0
- stack 0: 0x20
491	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
492	 AB	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
493	 AD	ADD		 	 
- stack 0: 0x468
494	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
495	 AF	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x218AA0100C7FAA000E6000801350008022BAA010177FAA00196000401B00410
496	 B0	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x218AA0100C7FAA000E6000801350008022BAA010177FAA00196000401B00410
- stack 0: 0xF0
497	 B2	SHR		 	 
- stack 1: 0x468
- stack 0: 0x218
498	 B3	JUMP		 	 
- stack 0: 0x468
499	 218	JUMPDEST		 ;; __riscvimpl_LUI_aa01137	  ;; # instr: lui sp,0xaa01(ignore imm)
- stack 0: 0x468
500	 219	PUSH4	0aa01000	 	 
- stack 1: 0x468
- stack 0: 0xAA01000
501	 21E	PUSH2	0040	 	 
- stack 2: 0x468
- stack 1: 0xAA01000
- stack 0: 0x40
502	 221	MSTORE		 	  ;; # store to x2
- stack 0: 0x468
503	 222	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
504	 224	ADD		 	 
- stack 0: 0x46C
505	 225	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
506	 226	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xC7FAA000E6000801350008022BAA010177FAA00196000401B0041000860000
507	 227	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xC7FAA000E6000801350008022BAA010177FAA00196000401B0041000860000
- stack 0: 0xF0
508	 229	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xC7
509	 22A	JUMP		 	 
- stack 0: 0x46C
510	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x46C
511	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
512	 C9	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xC7FAA000E6000801350008022BAA010177FAA00196000401B0041000860000
513	 CA	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xC7FAA000E6000801350008022BAA010177FAA00196000401B0041000860000
- stack 0: 0xE0
514	 CC	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xC7FAA0
515	 CD	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xC7FAA0
- stack 0: 0xFFFF
516	 D0	AND		 	 
- stack 1: 0x46C
- stack 0: 0xFAA0
517	 D1	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xFAA0
- stack 0: 0x1
518	 D3	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
519	 D4	PUSH2	0040	 	 
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x40
520	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x46C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xAA01000
521	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x46C
- stack 0: 0xAA00AA0
522	 D9	PUSH2	0040	 	 
- stack 2: 0x46C
- stack 1: 0xAA00AA0
- stack 0: 0x40
523	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x46C
524	 DD	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
525	 DF	ADD		 	 
- stack 0: 0x470
526	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
527	 E1	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0xE6000801350008022BAA010177FAA00196000401B004100086000000950448
528	 E2	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0xE6000801350008022BAA010177FAA00196000401B004100086000000950448
- stack 0: 0xF0
529	 E4	SHR		 	 
- stack 1: 0x470
- stack 0: 0xE6
530	 E5	JUMP		 	 
- stack 0: 0x470
531	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x470
532	 E7	PUSH2	0020	 	 
- stack 1: 0x470
- stack 0: 0x20
533	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x470
- stack 0: 0x8D0
534	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x470
- stack 1: 0x8D0
- stack 0: 0x470
535	 EC	MLOAD		 	 
- stack 2: 0x470
- stack 1: 0x8D0
- stack 0: 0xE6000801350008022BAA010177FAA00196000401B004100086000000950448
536	 ED	PUSH1	E0	 	 
- stack 3: 0x470
- stack 2: 0x8D0
- stack 1: 0xE6000801350008022BAA010177FAA00196000401B004100086000000950448
- stack 0: 0xE0
537	 EF	SHR		 	 
- stack 2: 0x470
- stack 1: 0x8D0
- stack 0: 0xE60008
538	 F0	PUSH2	FFFF	 	 
- stack 3: 0x470
- stack 2: 0x8D0
- stack 1: 0xE60008
- stack 0: 0xFFFF
539	 F3	AND		 	 
- stack 2: 0x470
- stack 1: 0x8D0
- stack 0: 0x8
540	 F4	PUSH1	01	 	 
- stack 3: 0x470
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
541	 F6	SIGNEXTEND		 	 
- stack 2: 0x470
- stack 1: 0x8D0
- stack 0: 0x8
542	 F7	ADD		 	 
- stack 1: 0x470
- stack 0: 0x8D8
543	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x470
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
544	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x470
- stack 0: 0x8D8
545	 FE	DUP1		 	 
- stack 2: 0x470
- stack 1: 0x8D8
- stack 0: 0x8D8
546	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x470
- stack 1: 0x8D8
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
547	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x470
- stack 2: 0x8D8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
548	 121	AND		 	 
- stack 2: 0x470
- stack 1: 0x8D8
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
549	 122	PUSH2	0040	 	 
- stack 3: 0x470
- stack 2: 0x8D8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x40
550	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x470
- stack 2: 0x8D8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA0
551	 126	PUSH1	E0	 	 
- stack 4: 0x470
- stack 3: 0x8D8
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 1: 0xAA00AA0
- stack 0: 0xE0
552	 128	SHL		 	 
- stack 3: 0x470
- stack 2: 0x8D8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xAA00AA000000000000000000000000000000000000000000000000000000000
553	 129	ADD		 	 
- stack 2: 0x470
- stack 1: 0x8D8
- stack 0: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
554	 12A	SWAP1		 	 
- stack 2: 0x470
- stack 1: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0x8D8
555	 12B	MSTORE		 	 
- stack 0: 0x470
556	 12C	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
557	 12E	ADD		 	 
- stack 0: 0x474
558	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
559	 130	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1350008022BAA010177FAA00196000401B004100086000000950448023E00AA
560	 131	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1350008022BAA010177FAA00196000401B004100086000000950448023E00AA
- stack 0: 0xF0
561	 133	SHR		 	 
- stack 1: 0x474
- stack 0: 0x135
562	 134	JUMP		 	 
- stack 0: 0x474
563	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x474
564	 136	PUSH2	0020	 	 
- stack 1: 0x474
- stack 0: 0x20
565	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x474
- stack 0: 0x8D0
566	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
567	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0x8D0
568	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0x474
569	 141	MLOAD		 	 
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0x1350008022BAA010177FAA00196000401B004100086000000950448023E00AA
570	 142	PUSH1	E0	 	 
- stack 3: 0x474
- stack 2: 0x8D0
- stack 1: 0x1350008022BAA010177FAA00196000401B004100086000000950448023E00AA
- stack 0: 0xE0
571	 144	SHR		 	 
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0x1350008
572	 145	PUSH2	FFFF	 	 
- stack 3: 0x474
- stack 2: 0x8D0
- stack 1: 0x1350008
- stack 0: 0xFFFF
573	 148	AND		 	 
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0x8
574	 149	PUSH1	01	 	 
- stack 3: 0x474
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
575	 14B	SIGNEXTEND		 	 
- stack 2: 0x474
- stack 1: 0x8D0
- stack 0: 0x8
576	 14C	ADD		 	 
- stack 1: 0x474
- stack 0: 0x8D8
577	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x474
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
578	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x474
- stack 0: 0x8D8
579	 153	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
580	 154	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF
- stack 0: 0xE0
581	 156	SHR		 	 
- stack 1: 0x474
- stack 0: 0xAA00AA0
582	 157	PUSH2	0060	 	 
- stack 2: 0x474
- stack 1: 0xAA00AA0
- stack 0: 0x60
583	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x474
584	 15B	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
585	 15D	ADD		 	 
- stack 0: 0x478
586	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
587	 15F	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x22BAA010177FAA00196000401B004100086000000950448023E00AA00C7000A
588	 160	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x22BAA010177FAA00196000401B004100086000000950448023E00AA00C7000A
- stack 0: 0xF0
589	 162	SHR		 	 
- stack 1: 0x478
- stack 0: 0x22B
590	 163	JUMP		 	 
- stack 0: 0x478
591	 22B	JUMPDEST		 ;; __riscvimpl_LUI_aa01eb7	  ;; # instr: lui t4,0xaa01(ignore imm)
- stack 0: 0x478
592	 22C	PUSH4	0aa01000	 	 
- stack 1: 0x478
- stack 0: 0xAA01000
593	 231	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xAA01000
- stack 0: 0x3A0
594	 234	MSTORE		 	  ;; # store to x29
- stack 0: 0x478
595	 235	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
596	 237	ADD		 	 
- stack 0: 0x47C
597	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
598	 239	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x177FAA00196000401B004100086000000950448023E00AA00C7000A00E6000C
599	 23A	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x177FAA00196000401B004100086000000950448023E00AA00C7000A00E6000C
- stack 0: 0xF0
600	 23C	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x177
601	 23D	JUMP		 	 
- stack 0: 0x47C
602	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x47C
603	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x47C
- stack 0: 0x47C
604	 179	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x177FAA00196000401B004100086000000950448023E00AA00C7000A00E6000C
605	 17A	PUSH1	E0	 	 
- stack 2: 0x47C
- stack 1: 0x177FAA00196000401B004100086000000950448023E00AA00C7000A00E6000C
- stack 0: 0xE0
606	 17C	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x177FAA0
607	 17D	PUSH2	FFFF	 	 
- stack 2: 0x47C
- stack 1: 0x177FAA0
- stack 0: 0xFFFF
608	 180	AND		 	 
- stack 1: 0x47C
- stack 0: 0xFAA0
609	 181	PUSH1	01	 	 
- stack 2: 0x47C
- stack 1: 0xFAA0
- stack 0: 0x1
610	 183	SIGNEXTEND		 	 
- stack 1: 0x47C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
611	 184	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x3A0
612	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x47C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xAA01000
613	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x47C
- stack 0: 0xAA00AA0
614	 189	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xAA00AA0
- stack 0: 0x3A0
615	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x47C
616	 18D	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
617	 18F	ADD		 	 
- stack 0: 0x480
618	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
619	 191	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x196000401B004100086000000950448023E00AA00C7000A00E6000C0135000C
620	 192	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x196000401B004100086000000950448023E00AA00C7000A00E6000C0135000C
- stack 0: 0xF0
621	 194	SHR		 	 
- stack 1: 0x480
- stack 0: 0x196
622	 195	JUMP		 	 
- stack 0: 0x480
623	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x480
624	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
625	 198	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x196000401B004100086000000950448023E00AA00C7000A00E6000C0135000C
626	 199	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x196000401B004100086000000950448023E00AA00C7000A00E6000C0135000C
- stack 0: 0xE0
627	 19B	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1960004
628	 19C	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x1960004
- stack 0: 0xFFFF
629	 19F	AND		 	 
- stack 1: 0x480
- stack 0: 0x4
630	 1A0	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0x4
- stack 0: 0x1
631	 1A2	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0x4
632	 1A3	PUSH2	0380	 	 
- stack 2: 0x480
- stack 1: 0x4
- stack 0: 0x380
633	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x480
634	 1A7	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
635	 1A9	ADD		 	 
- stack 0: 0x484
636	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
637	 1AB	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1B004100086000000950448023E00AA00C7000A00E6000C0135000C025100AA
638	 1AC	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1B004100086000000950448023E00AA00C7000A00E6000C0135000C025100AA
- stack 0: 0xF0
639	 1AE	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1B0
640	 1AF	JUMP		 	 
- stack 0: 0x484
641	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x484
642	 1B1	PUSH2	0060	 	 
- stack 1: 0x484
- stack 0: 0x60
643	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x484
- stack 0: 0xAA00AA0
644	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x484
- stack 1: 0xAA00AA0
- stack 0: 0xFFFFFFFF
645	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x484
- stack 0: 0xAA00AA0
646	 1BB	PUSH2	03A0	 	 
- stack 2: 0x484
- stack 1: 0xAA00AA0
- stack 0: 0x3A0
647	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x484
- stack 1: 0xAA00AA0
- stack 0: 0xAA00AA0
648	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x484
- stack 2: 0xAA00AA0
- stack 1: 0xAA00AA0
- stack 0: 0xFFFFFFFF
649	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x484
- stack 1: 0xAA00AA0
- stack 0: 0xAA00AA0
650	 1C5	SUB		 	 
- stack 1: 0x484
- stack 0: 0x0
651	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x484
- stack 1: 0x0
- stack 0: 0x1CE
652	 1C9	JUMPI		 	 
- stack 0: 0x484
653	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x484
- stack 0: 0x1E8
654	 1CD	JUMP		 	 
- stack 0: 0x484
655	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x484
656	 1E9	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
657	 1EB	ADD		 	 
- stack 0: 0x488
658	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
659	 1ED	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x86000000950448023E00AA00C7000A00E6000C0135000C025100AA0177000A
660	 1EE	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x86000000950448023E00AA00C7000A00E6000C0135000C025100AA0177000A
- stack 0: 0xF0
661	 1F0	SHR		 	 
- stack 1: 0x488
- stack 0: 0x86
662	 1F1	JUMP		 	 
- stack 0: 0x488
663	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x488
664	 87	DUP1		 	 
- stack 1: 0x488
- stack 0: 0x488
665	 88	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x488
- stack 0: 0x20
666	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
667	 8C	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
668	 8E	ADD		 	 
- stack 0: 0x48C
669	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
670	 90	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x950448023E00AA00C7000A00E6000C0135000C025100AA0177000A01960005
671	 91	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0x950448023E00AA00C7000A00E6000C0135000C025100AA0177000A01960005
- stack 0: 0xF0
672	 93	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x95
673	 94	JUMP		 	 
- stack 0: 0x48C
674	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x48C
675	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x48C
- stack 0: 0x48C
676	 97	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0x950448023E00AA00C7000A00E6000C0135000C025100AA0177000A01960005
677	 98	PUSH1	E0	 	 
- stack 2: 0x48C
- stack 1: 0x950448023E00AA00C7000A00E6000C0135000C025100AA0177000A01960005
- stack 0: 0xE0
678	 9A	SHR		 	 
- stack 1: 0x48C
- stack 0: 0x950448
679	 9B	PUSH2	FFFF	 	 
- stack 2: 0x48C
- stack 1: 0x950448
- stack 0: 0xFFFF
680	 9E	AND		 	 
- stack 1: 0x48C
- stack 0: 0x448
681	 9F	PUSH1	01	 	 
- stack 2: 0x48C
- stack 1: 0x448
- stack 0: 0x1
682	 A1	SIGNEXTEND		 	 
- stack 1: 0x48C
- stack 0: 0x448
683	 A2	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x448
- stack 0: 0x20
684	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0x448
- stack 0: 0x488
685	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x48C
- stack 0: 0x8D0
686	 A7	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0x8D0
- stack 0: 0x20
687	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x48C
688	 AB	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
689	 AD	ADD		 	 
- stack 0: 0x490
690	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
691	 AF	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x23E00AA00C7000A00E6000C0135000C025100AA0177000A0196000501B003E8
692	 B0	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x23E00AA00C7000A00E6000C0135000C025100AA0177000A0196000501B003E8
- stack 0: 0xF0
693	 B2	SHR		 	 
- stack 1: 0x490
- stack 0: 0x23E
694	 B3	JUMP		 	 
- stack 0: 0x490
695	 23E	JUMPDEST		 ;; __riscvimpl_LUI_a00aa137	  ;; # instr: lui sp,0xa00aa(ignore imm)
- stack 0: 0x490
696	 23F	PUSH4	a00aa000	 	 
- stack 1: 0x490
- stack 0: 0xA00AA000
697	 244	PUSH2	0040	 	 
- stack 2: 0x490
- stack 1: 0xA00AA000
- stack 0: 0x40
698	 247	MSTORE		 	  ;; # store to x2
- stack 0: 0x490
699	 248	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
700	 24A	ADD		 	 
- stack 0: 0x494
701	 24B	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
702	 24C	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xC7000A00E6000C0135000C025100AA0177000A0196000501B003E800860000
703	 24D	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0xC7000A00E6000C0135000C025100AA0177000A0196000501B003E800860000
- stack 0: 0xF0
704	 24F	SHR		 	 
- stack 1: 0x494
- stack 0: 0xC7
705	 250	JUMP		 	 
- stack 0: 0x494
706	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x494
707	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
708	 C9	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0xC7000A00E6000C0135000C025100AA0177000A0196000501B003E800860000
709	 CA	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0xC7000A00E6000C0135000C025100AA0177000A0196000501B003E800860000
- stack 0: 0xE0
710	 CC	SHR		 	 
- stack 1: 0x494
- stack 0: 0xC7000A
711	 CD	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0xC7000A
- stack 0: 0xFFFF
712	 D0	AND		 	 
- stack 1: 0x494
- stack 0: 0xA
713	 D1	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0x1
714	 D3	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xA
715	 D4	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0x40
716	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x494
- stack 1: 0xA
- stack 0: 0xA00AA000
717	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x494
- stack 0: 0xA00AA00A
718	 D9	PUSH2	0040	 	 
- stack 2: 0x494
- stack 1: 0xA00AA00A
- stack 0: 0x40
719	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x494
720	 DD	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
721	 DF	ADD		 	 
- stack 0: 0x498
722	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
723	 E1	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0xE6000C0135000C025100AA0177000A0196000501B003E8008600000095043C
724	 E2	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0xE6000C0135000C025100AA0177000A0196000501B003E8008600000095043C
- stack 0: 0xF0
725	 E4	SHR		 	 
- stack 1: 0x498
- stack 0: 0xE6
726	 E5	JUMP		 	 
- stack 0: 0x498
727	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x498
728	 E7	PUSH2	0020	 	 
- stack 1: 0x498
- stack 0: 0x20
729	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x498
- stack 0: 0x8D0
730	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x498
- stack 1: 0x8D0
- stack 0: 0x498
731	 EC	MLOAD		 	 
- stack 2: 0x498
- stack 1: 0x8D0
- stack 0: 0xE6000C0135000C025100AA0177000A0196000501B003E8008600000095043C
732	 ED	PUSH1	E0	 	 
- stack 3: 0x498
- stack 2: 0x8D0
- stack 1: 0xE6000C0135000C025100AA0177000A0196000501B003E8008600000095043C
- stack 0: 0xE0
733	 EF	SHR		 	 
- stack 2: 0x498
- stack 1: 0x8D0
- stack 0: 0xE6000C
734	 F0	PUSH2	FFFF	 	 
- stack 3: 0x498
- stack 2: 0x8D0
- stack 1: 0xE6000C
- stack 0: 0xFFFF
735	 F3	AND		 	 
- stack 2: 0x498
- stack 1: 0x8D0
- stack 0: 0xC
736	 F4	PUSH1	01	 	 
- stack 3: 0x498
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
737	 F6	SIGNEXTEND		 	 
- stack 2: 0x498
- stack 1: 0x8D0
- stack 0: 0xC
738	 F7	ADD		 	 
- stack 1: 0x498
- stack 0: 0x8DC
739	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
740	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0x8DC
741	 FE	DUP1		 	 
- stack 2: 0x498
- stack 1: 0x8DC
- stack 0: 0x8DC
742	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x498
- stack 1: 0x8DC
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
743	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0x8DC
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
744	 121	AND		 	 
- stack 2: 0x498
- stack 1: 0x8DC
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
745	 122	PUSH2	0040	 	 
- stack 3: 0x498
- stack 2: 0x8DC
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0x40
746	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x498
- stack 2: 0x8DC
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0xA00AA00A
747	 126	PUSH1	E0	 	 
- stack 4: 0x498
- stack 3: 0x8DC
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 1: 0xA00AA00A
- stack 0: 0xE0
748	 128	SHL		 	 
- stack 3: 0x498
- stack 2: 0x8DC
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0xA00AA00A00000000000000000000000000000000000000000000000000000000
749	 129	ADD		 	 
- stack 2: 0x498
- stack 1: 0x8DC
- stack 0: 0xA00AA00ADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
750	 12A	SWAP1		 	 
- stack 2: 0x498
- stack 1: 0xA00AA00ADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0x8DC
751	 12B	MSTORE		 	 
- stack 0: 0x498
752	 12C	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
753	 12E	ADD		 	 
- stack 0: 0x49C
754	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
755	 130	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x135000C025100AA0177000A0196000501B003E8008600000095043C00B40AA0
756	 131	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x135000C025100AA0177000A0196000501B003E8008600000095043C00B40AA0
- stack 0: 0xF0
757	 133	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x135
758	 134	JUMP		 	 
- stack 0: 0x49C
759	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x49C
760	 136	PUSH2	0020	 	 
- stack 1: 0x49C
- stack 0: 0x20
761	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x49C
- stack 0: 0x8D0
762	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
763	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x8D0
764	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0x49C
765	 141	MLOAD		 	 
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0x135000C025100AA0177000A0196000501B003E8008600000095043C00B40AA0
766	 142	PUSH1	E0	 	 
- stack 3: 0x49C
- stack 2: 0x8D0
- stack 1: 0x135000C025100AA0177000A0196000501B003E8008600000095043C00B40AA0
- stack 0: 0xE0
767	 144	SHR		 	 
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0x135000C
768	 145	PUSH2	FFFF	 	 
- stack 3: 0x49C
- stack 2: 0x8D0
- stack 1: 0x135000C
- stack 0: 0xFFFF
769	 148	AND		 	 
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0xC
770	 149	PUSH1	01	 	 
- stack 3: 0x49C
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
771	 14B	SIGNEXTEND		 	 
- stack 2: 0x49C
- stack 1: 0x8D0
- stack 0: 0xC
772	 14C	ADD		 	 
- stack 1: 0x49C
- stack 0: 0x8DC
773	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
774	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0x8DC
775	 153	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0xA00AA00ADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
776	 154	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0xA00AA00ADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000
- stack 0: 0xE0
777	 156	SHR		 	 
- stack 1: 0x49C
- stack 0: 0xA00AA00A
778	 157	PUSH2	0060	 	 
- stack 2: 0x49C
- stack 1: 0xA00AA00A
- stack 0: 0x60
779	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x49C
780	 15B	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
781	 15D	ADD		 	 
- stack 0: 0x4A0
782	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
783	 15F	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x25100AA0177000A0196000501B003E8008600000095043C00B40AA000C700AA
784	 160	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x25100AA0177000A0196000501B003E8008600000095043C00B40AA000C700AA
- stack 0: 0xF0
785	 162	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x251
786	 163	JUMP		 	 
- stack 0: 0x4A0
787	 251	JUMPDEST		 ;; __riscvimpl_LUI_a00aaeb7	  ;; # instr: lui t4,0xa00aa(ignore imm)
- stack 0: 0x4A0
788	 252	PUSH4	a00aa000	 	 
- stack 1: 0x4A0
- stack 0: 0xA00AA000
789	 257	PUSH2	03A0	 	 
- stack 2: 0x4A0
- stack 1: 0xA00AA000
- stack 0: 0x3A0
790	 25A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A0
791	 25B	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
792	 25D	ADD		 	 
- stack 0: 0x4A4
793	 25E	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
794	 25F	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x177000A0196000501B003E8008600000095043C00B40AA000C700AA00E6FFF4
795	 260	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x177000A0196000501B003E8008600000095043C00B40AA000C700AA00E6FFF4
- stack 0: 0xF0
796	 262	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x177
797	 263	JUMP		 	 
- stack 0: 0x4A4
798	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x4A4
799	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
800	 179	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x177000A0196000501B003E8008600000095043C00B40AA000C700AA00E6FFF4
801	 17A	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x177000A0196000501B003E8008600000095043C00B40AA000C700AA00E6FFF4
- stack 0: 0xE0
802	 17C	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x177000A
803	 17D	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x177000A
- stack 0: 0xFFFF
804	 180	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xA
805	 181	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xA
- stack 0: 0x1
806	 183	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xA
807	 184	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xA
- stack 0: 0x3A0
808	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x4A4
- stack 1: 0xA
- stack 0: 0xA00AA000
809	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x4A4
- stack 0: 0xA00AA00A
810	 189	PUSH2	03A0	 	 
- stack 2: 0x4A4
- stack 1: 0xA00AA00A
- stack 0: 0x3A0
811	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4A4
812	 18D	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
813	 18F	ADD		 	 
- stack 0: 0x4A8
814	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
815	 191	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x196000501B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF4
816	 192	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0x196000501B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF4
- stack 0: 0xF0
817	 194	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x196
818	 195	JUMP		 	 
- stack 0: 0x4A8
819	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4A8
820	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
821	 198	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0x196000501B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF4
822	 199	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0x196000501B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF4
- stack 0: 0xE0
823	 19B	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0x1960005
824	 19C	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0x1960005
- stack 0: 0xFFFF
825	 19F	AND		 	 
- stack 1: 0x4A8
- stack 0: 0x5
826	 1A0	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0x5
- stack 0: 0x1
827	 1A2	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0x5
828	 1A3	PUSH2	0380	 	 
- stack 2: 0x4A8
- stack 1: 0x5
- stack 0: 0x380
829	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4A8
830	 1A7	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
831	 1A9	ADD		 	 
- stack 0: 0x4AC
832	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
833	 1AB	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x1B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF401640AA0
834	 1AC	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x1B003E8008600000095043C00B40AA000C700AA00E6FFF40135FFF401640AA0
- stack 0: 0xF0
835	 1AE	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x1B0
836	 1AF	JUMP		 	 
- stack 0: 0x4AC
837	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x4AC
838	 1B1	PUSH2	0060	 	 
- stack 1: 0x4AC
- stack 0: 0x60
839	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x4AC
- stack 0: 0xA00AA00A
840	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xA00AA00A
- stack 0: 0xFFFFFFFF
841	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4AC
- stack 0: 0xA00AA00A
842	 1BB	PUSH2	03A0	 	 
- stack 2: 0x4AC
- stack 1: 0xA00AA00A
- stack 0: 0x3A0
843	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x4AC
- stack 1: 0xA00AA00A
- stack 0: 0xA00AA00A
844	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4AC
- stack 2: 0xA00AA00A
- stack 1: 0xA00AA00A
- stack 0: 0xFFFFFFFF
845	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4AC
- stack 1: 0xA00AA00A
- stack 0: 0xA00AA00A
846	 1C5	SUB		 	 
- stack 1: 0x4AC
- stack 0: 0x0
847	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x1CE
848	 1C9	JUMPI		 	 
- stack 0: 0x4AC
849	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x4AC
- stack 0: 0x1E8
850	 1CD	JUMP		 	 
- stack 0: 0x4AC
851	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x4AC
852	 1E9	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
853	 1EB	ADD		 	 
- stack 0: 0x4B0
854	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
855	 1ED	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x8600000095043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA
856	 1EE	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x8600000095043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA
- stack 0: 0xF0
857	 1F0	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x86
858	 1F1	JUMP		 	 
- stack 0: 0x4B0
859	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4B0
860	 87	DUP1		 	 
- stack 1: 0x4B0
- stack 0: 0x4B0
861	 88	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0x4B0
- stack 0: 0x20
862	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
863	 8C	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
864	 8E	ADD		 	 
- stack 0: 0x4B4
865	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
866	 90	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x95043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA01960006
867	 91	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x95043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA01960006
- stack 0: 0xF0
868	 93	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x95
869	 94	JUMP		 	 
- stack 0: 0x4B4
870	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x4B4
871	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
872	 97	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x95043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA01960006
873	 98	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x95043C00B40AA000C700AA00E6FFF40135FFF401640AA0017700AA01960006
- stack 0: 0xE0
874	 9A	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x95043C
875	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x95043C
- stack 0: 0xFFFF
876	 9E	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x43C
877	 9F	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x43C
- stack 0: 0x1
878	 A1	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x43C
879	 A2	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x43C
- stack 0: 0x20
880	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B4
- stack 1: 0x43C
- stack 0: 0x4B0
881	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4B4
- stack 0: 0x8EC
882	 A7	PUSH2	0020	 	 
- stack 2: 0x4B4
- stack 1: 0x8EC
- stack 0: 0x20
883	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B4
884	 AB	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
885	 AD	ADD		 	 
- stack 0: 0x4B8
886	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
887	 AF	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0xB40AA000C700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C0
888	 B0	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0xB40AA000C700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C0
- stack 0: 0xF0
889	 B2	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0xB4
890	 B3	JUMP		 	 
- stack 0: 0x4B8
891	 B4	JUMPDEST		 ;; __riscvimpl_LUI_aa0137	  ;; # instr: lui sp,0xaa0(ignore imm)
- stack 0: 0x4B8
892	 B5	PUSH4	00aa0000	 	 
- stack 1: 0x4B8
- stack 0: 0xAA0000
893	 BA	PUSH2	0040	 	 
- stack 2: 0x4B8
- stack 1: 0xAA0000
- stack 0: 0x40
894	 BD	MSTORE		 	  ;; # store to x2
- stack 0: 0x4B8
895	 BE	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
896	 C0	ADD		 	 
- stack 0: 0x4BC
897	 C1	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
898	 C2	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xC700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C000860000
899	 C3	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0xC700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C000860000
- stack 0: 0xF0
900	 C5	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xC7
901	 C6	JUMP		 	 
- stack 0: 0x4BC
902	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x4BC
903	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
904	 C9	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0xC700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C000860000
905	 CA	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0xC700AA00E6FFF40135FFF401640AA0017700AA0196000601B003C000860000
- stack 0: 0xE0
906	 CC	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0xC700AA
907	 CD	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0xC700AA
- stack 0: 0xFFFF
908	 D0	AND		 	 
- stack 1: 0x4BC
- stack 0: 0xAA
909	 D1	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0xAA
- stack 0: 0x1
910	 D3	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0xAA
911	 D4	PUSH2	0040	 	 
- stack 2: 0x4BC
- stack 1: 0xAA
- stack 0: 0x40
912	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x4BC
- stack 1: 0xAA
- stack 0: 0xAA0000
913	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x4BC
- stack 0: 0xAA00AA
914	 D9	PUSH2	0040	 	 
- stack 2: 0x4BC
- stack 1: 0xAA00AA
- stack 0: 0x40
915	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x4BC
916	 DD	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
917	 DF	ADD		 	 
- stack 0: 0x4C0
918	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
919	 E1	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xE6FFF40135FFF401640AA0017700AA0196000601B003C00086000000950414
920	 E2	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xE6FFF40135FFF401640AA0017700AA0196000601B003C00086000000950414
- stack 0: 0xF0
921	 E4	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xE6
922	 E5	JUMP		 	 
- stack 0: 0x4C0
923	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x4C0
924	 E7	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
925	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0x8EC
926	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C0
- stack 1: 0x8EC
- stack 0: 0x4C0
927	 EC	MLOAD		 	 
- stack 2: 0x4C0
- stack 1: 0x8EC
- stack 0: 0xE6FFF40135FFF401640AA0017700AA0196000601B003C00086000000950414
928	 ED	PUSH1	E0	 	 
- stack 3: 0x4C0
- stack 2: 0x8EC
- stack 1: 0xE6FFF40135FFF401640AA0017700AA0196000601B003C00086000000950414
- stack 0: 0xE0
929	 EF	SHR		 	 
- stack 2: 0x4C0
- stack 1: 0x8EC
- stack 0: 0xE6FFF4
930	 F0	PUSH2	FFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x8EC
- stack 1: 0xE6FFF4
- stack 0: 0xFFFF
931	 F3	AND		 	 
- stack 2: 0x4C0
- stack 1: 0x8EC
- stack 0: 0xFFF4
932	 F4	PUSH1	01	 	 
- stack 3: 0x4C0
- stack 2: 0x8EC
- stack 1: 0xFFF4
- stack 0: 0x1
933	 F6	SIGNEXTEND		 	 
- stack 2: 0x4C0
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4
934	 F7	ADD		 	 
- stack 1: 0x4C0
- stack 0: 0x8E0
935	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
936	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0x8E0
937	 FE	DUP1		 	 
- stack 2: 0x4C0
- stack 1: 0x8E0
- stack 0: 0x8E0
938	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x4C0
- stack 1: 0x8E0
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
939	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0x8E0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
940	 121	AND		 	 
- stack 2: 0x4C0
- stack 1: 0x8E0
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
941	 122	PUSH2	0040	 	 
- stack 3: 0x4C0
- stack 2: 0x8E0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0x40
942	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x4C0
- stack 2: 0x8E0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0xAA00AA
943	 126	PUSH1	E0	 	 
- stack 4: 0x4C0
- stack 3: 0x8E0
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 1: 0xAA00AA
- stack 0: 0xE0
944	 128	SHL		 	 
- stack 3: 0x4C0
- stack 2: 0x8E0
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0xAA00AA00000000000000000000000000000000000000000000000000000000
945	 129	ADD		 	 
- stack 2: 0x4C0
- stack 1: 0x8E0
- stack 0: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
946	 12A	SWAP1		 	 
- stack 2: 0x4C0
- stack 1: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0x8E0
947	 12B	MSTORE		 	 
- stack 0: 0x4C0
948	 12C	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
949	 12E	ADD		 	 
- stack 0: 0x4C4
950	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
951	 130	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x135FFF401640AA0017700AA0196000601B003C0008600000095041401F2A00B
952	 131	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x135FFF401640AA0017700AA0196000601B003C0008600000095041401F2A00B
- stack 0: 0xF0
953	 133	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x135
954	 134	JUMP		 	 
- stack 0: 0x4C4
955	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4C4
956	 136	PUSH2	0020	 	 
- stack 1: 0x4C4
- stack 0: 0x20
957	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C4
- stack 0: 0x8EC
958	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
959	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x8EC
960	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0x4C4
961	 141	MLOAD		 	 
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0x135FFF401640AA0017700AA0196000601B003C0008600000095041401F2A00B
962	 142	PUSH1	E0	 	 
- stack 3: 0x4C4
- stack 2: 0x8EC
- stack 1: 0x135FFF401640AA0017700AA0196000601B003C0008600000095041401F2A00B
- stack 0: 0xE0
963	 144	SHR		 	 
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0x135FFF4
964	 145	PUSH2	FFFF	 	 
- stack 3: 0x4C4
- stack 2: 0x8EC
- stack 1: 0x135FFF4
- stack 0: 0xFFFF
965	 148	AND		 	 
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0xFFF4
966	 149	PUSH1	01	 	 
- stack 3: 0x4C4
- stack 2: 0x8EC
- stack 1: 0xFFF4
- stack 0: 0x1
967	 14B	SIGNEXTEND		 	 
- stack 2: 0x4C4
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4
968	 14C	ADD		 	 
- stack 1: 0x4C4
- stack 0: 0x8E0
969	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
970	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C4
- stack 0: 0x8E0
971	 153	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
972	 154	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0xAA00AADEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF0000000000000000
- stack 0: 0xE0
973	 156	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0xAA00AA
974	 157	PUSH2	0060	 	 
- stack 2: 0x4C4
- stack 1: 0xAA00AA
- stack 0: 0x60
975	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x4C4
976	 15B	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
977	 15D	ADD		 	 
- stack 0: 0x4C8
978	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
979	 15F	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x1640AA0017700AA0196000601B003C0008600000095041401F2A00B00C7FA00
980	 160	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x1640AA0017700AA0196000601B003C0008600000095041401F2A00B00C7FA00
- stack 0: 0xF0
981	 162	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x164
982	 163	JUMP		 	 
- stack 0: 0x4C8
983	 164	JUMPDEST		 ;; __riscvimpl_LUI_aa0eb7	  ;; # instr: lui t4,0xaa0(ignore imm)
- stack 0: 0x4C8
984	 165	PUSH4	00aa0000	 	 
- stack 1: 0x4C8
- stack 0: 0xAA0000
985	 16A	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xAA0000
- stack 0: 0x3A0
986	 16D	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C8
987	 16E	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
988	 170	ADD		 	 
- stack 0: 0x4CC
989	 171	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
990	 172	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x17700AA0196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF8
991	 173	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x17700AA0196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF8
- stack 0: 0xF0
992	 175	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x177
993	 176	JUMP		 	 
- stack 0: 0x4CC
994	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x4CC
995	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
996	 179	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x17700AA0196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF8
997	 17A	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x17700AA0196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF8
- stack 0: 0xE0
998	 17C	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x17700AA
999	 17D	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x17700AA
- stack 0: 0xFFFF
1000	 180	AND		 	 
- stack 1: 0x4CC
- stack 0: 0xAA
1001	 181	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0xAA
- stack 0: 0x1
1002	 183	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0xAA
1003	 184	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0xAA
- stack 0: 0x3A0
1004	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x4CC
- stack 1: 0xAA
- stack 0: 0xAA0000
1005	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x4CC
- stack 0: 0xAA00AA
1006	 189	PUSH2	03A0	 	 
- stack 2: 0x4CC
- stack 1: 0xAA00AA
- stack 0: 0x3A0
1007	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4CC
1008	 18D	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1009	 18F	ADD		 	 
- stack 0: 0x4D0
1010	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1011	 191	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF8
1012	 192	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF8
- stack 0: 0xF0
1013	 194	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x196
1014	 195	JUMP		 	 
- stack 0: 0x4D0
1015	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4D0
1016	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
1017	 198	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF8
1018	 199	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0x196000601B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF8
- stack 0: 0xE0
1019	 19B	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x1960006
1020	 19C	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0x1960006
- stack 0: 0xFFFF
1021	 19F	AND		 	 
- stack 1: 0x4D0
- stack 0: 0x6
1022	 1A0	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0x6
- stack 0: 0x1
1023	 1A2	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0x6
1024	 1A3	PUSH2	0380	 	 
- stack 2: 0x4D0
- stack 1: 0x6
- stack 0: 0x380
1025	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4D0
1026	 1A7	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1027	 1A9	ADD		 	 
- stack 0: 0x4D4
1028	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1029	 1AB	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x1B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF80205A00B
1030	 1AC	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x1B003C0008600000095041401F2A00B00C7FA0000E6FFF80135FFF80205A00B
- stack 0: 0xF0
1031	 1AE	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x1B0
1032	 1AF	JUMP		 	 
- stack 0: 0x4D4
1033	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x4D4
1034	 1B1	PUSH2	0060	 	 
- stack 1: 0x4D4
- stack 0: 0x60
1035	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x4D4
- stack 0: 0xAA00AA
1036	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4D4
- stack 1: 0xAA00AA
- stack 0: 0xFFFFFFFF
1037	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4D4
- stack 0: 0xAA00AA
1038	 1BB	PUSH2	03A0	 	 
- stack 2: 0x4D4
- stack 1: 0xAA00AA
- stack 0: 0x3A0
1039	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x4D4
- stack 1: 0xAA00AA
- stack 0: 0xAA00AA
1040	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4D4
- stack 2: 0xAA00AA
- stack 1: 0xAA00AA
- stack 0: 0xFFFFFFFF
1041	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4D4
- stack 1: 0xAA00AA
- stack 0: 0xAA00AA
1042	 1C5	SUB		 	 
- stack 1: 0x4D4
- stack 0: 0x0
1043	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x4D4
- stack 1: 0x0
- stack 0: 0x1CE
1044	 1C9	JUMPI		 	 
- stack 0: 0x4D4
1045	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x4D4
- stack 0: 0x1E8
1046	 1CD	JUMP		 	 
- stack 0: 0x4D4
1047	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x4D4
1048	 1E9	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1049	 1EB	ADD		 	 
- stack 0: 0x4D8
1050	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1051	 1ED	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x8600000095041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA00
1052	 1EE	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x8600000095041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA00
- stack 0: 0xF0
1053	 1F0	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x86
1054	 1F1	JUMP		 	 
- stack 0: 0x4D8
1055	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x4D8
1056	 87	DUP1		 	 
- stack 1: 0x4D8
- stack 0: 0x4D8
1057	 88	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x4D8
- stack 0: 0x20
1058	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D8
1059	 8C	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1060	 8E	ADD		 	 
- stack 0: 0x4DC
1061	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1062	 90	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x95041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA0001960007
1063	 91	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x95041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA0001960007
- stack 0: 0xF0
1064	 93	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x95
1065	 94	JUMP		 	 
- stack 0: 0x4DC
1066	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x4DC
1067	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1068	 97	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x95041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA0001960007
1069	 98	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x95041401F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA0001960007
- stack 0: 0xE0
1070	 9A	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x950414
1071	 9B	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x950414
- stack 0: 0xFFFF
1072	 9E	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x414
1073	 9F	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x414
- stack 0: 0x1
1074	 A1	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x414
1075	 A2	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x414
- stack 0: 0x20
1076	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x4DC
- stack 1: 0x414
- stack 0: 0x4D8
1077	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x4DC
- stack 0: 0x8EC
1078	 A7	PUSH2	0020	 	 
- stack 2: 0x4DC
- stack 1: 0x8EC
- stack 0: 0x20
1079	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x4DC
1080	 AB	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1081	 AD	ADD		 	 
- stack 0: 0x4E0
1082	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1083	 AF	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA000196000701B00398
1084	 B0	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1F2A00B00C7FA0000E6FFF80135FFF80205A00B0177FA000196000701B00398
- stack 0: 0xF0
1085	 B2	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1F2
1086	 B3	JUMP		 	 
- stack 0: 0x4E0
1087	 1F2	JUMPDEST		 ;; __riscvimpl_LUI_aa00b137	  ;; # instr: lui sp,0xaa00b(ignore imm)
- stack 0: 0x4E0
1088	 1F3	PUSH4	aa00b000	 	 
- stack 1: 0x4E0
- stack 0: 0xAA00B000
1089	 1F8	PUSH2	0040	 	 
- stack 2: 0x4E0
- stack 1: 0xAA00B000
- stack 0: 0x40
1090	 1FB	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E0
1091	 1FC	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1092	 1FE	ADD		 	 
- stack 0: 0x4E4
1093	 1FF	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1094	 200	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xC7FA0000E6FFF80135FFF80205A00B0177FA000196000701B0039800860000
1095	 201	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0xC7FA0000E6FFF80135FFF80205A00B0177FA000196000701B0039800860000
- stack 0: 0xF0
1096	 203	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xC7
1097	 204	JUMP		 	 
- stack 0: 0x4E4
1098	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x4E4
1099	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1100	 C9	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0xC7FA0000E6FFF80135FFF80205A00B0177FA000196000701B0039800860000
1101	 CA	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0xC7FA0000E6FFF80135FFF80205A00B0177FA000196000701B0039800860000
- stack 0: 0xE0
1102	 CC	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0xC7FA00
1103	 CD	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xC7FA00
- stack 0: 0xFFFF
1104	 D0	AND		 	 
- stack 1: 0x4E4
- stack 0: 0xFA00
1105	 D1	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0xFA00
- stack 0: 0x1
1106	 D3	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
1107	 D4	PUSH2	0040	 	 
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x40
1108	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x4E4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xAA00B000
1109	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x4E4
- stack 0: 0xAA00AA00
1110	 D9	PUSH2	0040	 	 
- stack 2: 0x4E4
- stack 1: 0xAA00AA00
- stack 0: 0x40
1111	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x4E4
1112	 DD	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1113	 DF	ADD		 	 
- stack 0: 0x4E8
1114	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1115	 E1	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0xE6FFF80135FFF80205A00B0177FA000196000701B0039800860000009503EC
1116	 E2	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0xE6FFF80135FFF80205A00B0177FA000196000701B0039800860000009503EC
- stack 0: 0xF0
1117	 E4	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0xE6
1118	 E5	JUMP		 	 
- stack 0: 0x4E8
1119	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x4E8
1120	 E7	PUSH2	0020	 	 
- stack 1: 0x4E8
- stack 0: 0x20
1121	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x4E8
- stack 0: 0x8EC
1122	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4E8
- stack 1: 0x8EC
- stack 0: 0x4E8
1123	 EC	MLOAD		 	 
- stack 2: 0x4E8
- stack 1: 0x8EC
- stack 0: 0xE6FFF80135FFF80205A00B0177FA000196000701B0039800860000009503EC
1124	 ED	PUSH1	E0	 	 
- stack 3: 0x4E8
- stack 2: 0x8EC
- stack 1: 0xE6FFF80135FFF80205A00B0177FA000196000701B0039800860000009503EC
- stack 0: 0xE0
1125	 EF	SHR		 	 
- stack 2: 0x4E8
- stack 1: 0x8EC
- stack 0: 0xE6FFF8
1126	 F0	PUSH2	FFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x8EC
- stack 1: 0xE6FFF8
- stack 0: 0xFFFF
1127	 F3	AND		 	 
- stack 2: 0x4E8
- stack 1: 0x8EC
- stack 0: 0xFFF8
1128	 F4	PUSH1	01	 	 
- stack 3: 0x4E8
- stack 2: 0x8EC
- stack 1: 0xFFF8
- stack 0: 0x1
1129	 F6	SIGNEXTEND		 	 
- stack 2: 0x4E8
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
1130	 F7	ADD		 	 
- stack 1: 0x4E8
- stack 0: 0x8E4
1131	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
1132	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E8
- stack 0: 0x8E4
1133	 FE	DUP1		 	 
- stack 2: 0x4E8
- stack 1: 0x8E4
- stack 0: 0x8E4
1134	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x4E8
- stack 1: 0x8E4
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
1135	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x4E8
- stack 2: 0x8E4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1136	 121	AND		 	 
- stack 2: 0x4E8
- stack 1: 0x8E4
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
1137	 122	PUSH2	0040	 	 
- stack 3: 0x4E8
- stack 2: 0x8E4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0x40
1138	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x4E8
- stack 2: 0x8E4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0xAA00AA00
1139	 126	PUSH1	E0	 	 
- stack 4: 0x4E8
- stack 3: 0x8E4
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 1: 0xAA00AA00
- stack 0: 0xE0
1140	 128	SHL		 	 
- stack 3: 0x4E8
- stack 2: 0x8E4
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0xAA00AA0000000000000000000000000000000000000000000000000000000000
1141	 129	ADD		 	 
- stack 2: 0x4E8
- stack 1: 0x8E4
- stack 0: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
1142	 12A	SWAP1		 	 
- stack 2: 0x4E8
- stack 1: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0x8E4
1143	 12B	MSTORE		 	 
- stack 0: 0x4E8
1144	 12C	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1145	 12E	ADD		 	 
- stack 0: 0x4EC
1146	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1147	 130	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x135FFF80205A00B0177FA000196000701B0039800860000009503EC0218AA01
1148	 131	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x135FFF80205A00B0177FA000196000701B0039800860000009503EC0218AA01
- stack 0: 0xF0
1149	 133	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x135
1150	 134	JUMP		 	 
- stack 0: 0x4EC
1151	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x4EC
1152	 136	PUSH2	0020	 	 
- stack 1: 0x4EC
- stack 0: 0x20
1153	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x4EC
- stack 0: 0x8EC
1154	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
1155	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x8EC
1156	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0x4EC
1157	 141	MLOAD		 	 
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0x135FFF80205A00B0177FA000196000701B0039800860000009503EC0218AA01
1158	 142	PUSH1	E0	 	 
- stack 3: 0x4EC
- stack 2: 0x8EC
- stack 1: 0x135FFF80205A00B0177FA000196000701B0039800860000009503EC0218AA01
- stack 0: 0xE0
1159	 144	SHR		 	 
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0x135FFF8
1160	 145	PUSH2	FFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x8EC
- stack 1: 0x135FFF8
- stack 0: 0xFFFF
1161	 148	AND		 	 
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0xFFF8
1162	 149	PUSH1	01	 	 
- stack 3: 0x4EC
- stack 2: 0x8EC
- stack 1: 0xFFF8
- stack 0: 0x1
1163	 14B	SIGNEXTEND		 	 
- stack 2: 0x4EC
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8
1164	 14C	ADD		 	 
- stack 1: 0x4EC
- stack 0: 0x8E4
1165	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
1166	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x8E4
1167	 153	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
1168	 154	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0xAA00AA00DEADBEEFDEADBEEFDEADBEEFDEADBEEF000000000000000000000000
- stack 0: 0xE0
1169	 156	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0xAA00AA00
1170	 157	PUSH2	0060	 	 
- stack 2: 0x4EC
- stack 1: 0xAA00AA00
- stack 0: 0x60
1171	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x4EC
1172	 15B	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1173	 15D	ADD		 	 
- stack 0: 0x4F0
1174	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1175	 15F	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x205A00B0177FA000196000701B0039800860000009503EC0218AA0100C7FAA0
1176	 160	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x205A00B0177FA000196000701B0039800860000009503EC0218AA0100C7FAA0
- stack 0: 0xF0
1177	 162	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x205
1178	 163	JUMP		 	 
- stack 0: 0x4F0
1179	 205	JUMPDEST		 ;; __riscvimpl_LUI_aa00beb7	  ;; # instr: lui t4,0xaa00b(ignore imm)
- stack 0: 0x4F0
1180	 206	PUSH4	aa00b000	 	 
- stack 1: 0x4F0
- stack 0: 0xAA00B000
1181	 20B	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0xAA00B000
- stack 0: 0x3A0
1182	 20E	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F0
1183	 20F	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1184	 211	ADD		 	 
- stack 0: 0x4F4
1185	 212	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1186	 213	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x177FA000196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC
1187	 214	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x177FA000196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC
- stack 0: 0xF0
1188	 216	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x177
1189	 217	JUMP		 	 
- stack 0: 0x4F4
1190	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x4F4
1191	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1192	 179	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x177FA000196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC
1193	 17A	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x177FA000196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC
- stack 0: 0xE0
1194	 17C	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x177FA00
1195	 17D	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x177FA00
- stack 0: 0xFFFF
1196	 180	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFA00
1197	 181	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFA00
- stack 0: 0x1
1198	 183	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
1199	 184	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0x3A0
1200	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA00
- stack 0: 0xAA00B000
1201	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F4
- stack 0: 0xAA00AA00
1202	 189	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xAA00AA00
- stack 0: 0x3A0
1203	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1204	 18D	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1205	 18F	ADD		 	 
- stack 0: 0x4F8
1206	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1207	 191	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC
1208	 192	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC
- stack 0: 0xF0
1209	 194	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x196
1210	 195	JUMP		 	 
- stack 0: 0x4F8
1211	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1212	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1213	 198	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC
1214	 199	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x196000701B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC
- stack 0: 0xE0
1215	 19B	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1960007
1216	 19C	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1960007
- stack 0: 0xFFFF
1217	 19F	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x7
1218	 1A0	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x7
- stack 0: 0x1
1219	 1A2	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x7
1220	 1A3	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0x7
- stack 0: 0x380
1221	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1222	 1A7	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1223	 1A9	ADD		 	 
- stack 0: 0x4FC
1224	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1225	 1AB	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x1B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA01
1226	 1AC	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x1B0039800860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA01
- stack 0: 0xF0
1227	 1AE	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x1B0
1228	 1AF	JUMP		 	 
- stack 0: 0x4FC
1229	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x4FC
1230	 1B1	PUSH2	0060	 	 
- stack 1: 0x4FC
- stack 0: 0x60
1231	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x4FC
- stack 0: 0xAA00AA00
1232	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xAA00AA00
- stack 0: 0xFFFFFFFF
1233	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0xAA00AA00
1234	 1BB	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0xAA00AA00
- stack 0: 0x3A0
1235	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0xAA00AA00
- stack 0: 0xAA00AA00
1236	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0xAA00AA00
- stack 1: 0xAA00AA00
- stack 0: 0xFFFFFFFF
1237	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0xAA00AA00
- stack 0: 0xAA00AA00
1238	 1C5	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1239	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x1CE
1240	 1C9	JUMPI		 	 
- stack 0: 0x4FC
1241	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x4FC
- stack 0: 0x1E8
1242	 1CD	JUMP		 	 
- stack 0: 0x4FC
1243	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x4FC
1244	 1E9	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1245	 1EB	ADD		 	 
- stack 0: 0x500
1246	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1247	 1ED	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA0
1248	 1EE	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x860000009503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA0
- stack 0: 0xF0
1249	 1F0	SHR		 	 
- stack 1: 0x500
- stack 0: 0x86
1250	 1F1	JUMP		 	 
- stack 0: 0x500
1251	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x500
1252	 87	DUP1		 	 
- stack 1: 0x500
- stack 0: 0x500
1253	 88	PUSH2	0020	 	 
- stack 2: 0x500
- stack 1: 0x500
- stack 0: 0x20
1254	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x500
1255	 8C	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1256	 8E	ADD		 	 
- stack 0: 0x504
1257	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1258	 90	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x9503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA001960008
1259	 91	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x9503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA001960008
- stack 0: 0xF0
1260	 93	SHR		 	 
- stack 1: 0x504
- stack 0: 0x95
1261	 94	JUMP		 	 
- stack 0: 0x504
1262	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x504
1263	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x504
- stack 0: 0x504
1264	 97	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x9503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA001960008
1265	 98	PUSH1	E0	 	 
- stack 2: 0x504
- stack 1: 0x9503EC0218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA001960008
- stack 0: 0xE0
1266	 9A	SHR		 	 
- stack 1: 0x504
- stack 0: 0x9503EC
1267	 9B	PUSH2	FFFF	 	 
- stack 2: 0x504
- stack 1: 0x9503EC
- stack 0: 0xFFFF
1268	 9E	AND		 	 
- stack 1: 0x504
- stack 0: 0x3EC
1269	 9F	PUSH1	01	 	 
- stack 2: 0x504
- stack 1: 0x3EC
- stack 0: 0x1
1270	 A1	SIGNEXTEND		 	 
- stack 1: 0x504
- stack 0: 0x3EC
1271	 A2	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x3EC
- stack 0: 0x20
1272	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x504
- stack 1: 0x3EC
- stack 0: 0x500
1273	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x504
- stack 0: 0x8EC
1274	 A7	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0x8EC
- stack 0: 0x20
1275	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1276	 AB	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1277	 AD	ADD		 	 
- stack 0: 0x508
1278	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1279	 AF	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B00370
1280	 B0	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x218AA0100C7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B00370
- stack 0: 0xF0
1281	 B2	SHR		 	 
- stack 1: 0x508
- stack 0: 0x218
1282	 B3	JUMP		 	 
- stack 0: 0x508
1283	 218	JUMPDEST		 ;; __riscvimpl_LUI_aa01137	  ;; # instr: lui sp,0xaa01(ignore imm)
- stack 0: 0x508
1284	 219	PUSH4	0aa01000	 	 
- stack 1: 0x508
- stack 0: 0xAA01000
1285	 21E	PUSH2	0040	 	 
- stack 2: 0x508
- stack 1: 0xAA01000
- stack 0: 0x40
1286	 221	MSTORE		 	  ;; # store to x2
- stack 0: 0x508
1287	 222	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1288	 224	ADD		 	 
- stack 0: 0x50C
1289	 225	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1290	 226	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xC7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000
1291	 227	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xC7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000
- stack 0: 0xF0
1292	 229	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xC7
1293	 22A	JUMP		 	 
- stack 0: 0x50C
1294	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x50C
1295	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1296	 C9	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xC7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000
1297	 CA	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xC7FAA000E6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000
- stack 0: 0xE0
1298	 CC	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xC7FAA0
1299	 CD	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xC7FAA0
- stack 0: 0xFFFF
1300	 D0	AND		 	 
- stack 1: 0x50C
- stack 0: 0xFAA0
1301	 D1	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xFAA0
- stack 0: 0x1
1302	 D3	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
1303	 D4	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x40
1304	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x50C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xAA01000
1305	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x50C
- stack 0: 0xAA00AA0
1306	 D9	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xAA00AA0
- stack 0: 0x40
1307	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1308	 DD	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1309	 DF	ADD		 	 
- stack 0: 0x510
1310	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1311	 E1	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xE6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000009503C4
1312	 E2	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xE6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000009503C4
- stack 0: 0xF0
1313	 E4	SHR		 	 
- stack 1: 0x510
- stack 0: 0xE6
1314	 E5	JUMP		 	 
- stack 0: 0x510
1315	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x510
1316	 E7	PUSH2	0020	 	 
- stack 1: 0x510
- stack 0: 0x20
1317	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x510
- stack 0: 0x8EC
1318	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x510
- stack 1: 0x8EC
- stack 0: 0x510
1319	 EC	MLOAD		 	 
- stack 2: 0x510
- stack 1: 0x8EC
- stack 0: 0xE6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000009503C4
1320	 ED	PUSH1	E0	 	 
- stack 3: 0x510
- stack 2: 0x8EC
- stack 1: 0xE6FFFC0135FFFC022BAA010177FAA00196000801B0037000860000009503C4
- stack 0: 0xE0
1321	 EF	SHR		 	 
- stack 2: 0x510
- stack 1: 0x8EC
- stack 0: 0xE6FFFC
1322	 F0	PUSH2	FFFF	 	 
- stack 3: 0x510
- stack 2: 0x8EC
- stack 1: 0xE6FFFC
- stack 0: 0xFFFF
1323	 F3	AND		 	 
- stack 2: 0x510
- stack 1: 0x8EC
- stack 0: 0xFFFC
1324	 F4	PUSH1	01	 	 
- stack 3: 0x510
- stack 2: 0x8EC
- stack 1: 0xFFFC
- stack 0: 0x1
1325	 F6	SIGNEXTEND		 	 
- stack 2: 0x510
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
1326	 F7	ADD		 	 
- stack 1: 0x510
- stack 0: 0x8E8
1327	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x510
- stack 1: 0x8E8
- stack 0: 0xFFFFFFFF
1328	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x510
- stack 0: 0x8E8
1329	 FE	DUP1		 	 
- stack 2: 0x510
- stack 1: 0x8E8
- stack 0: 0x8E8
1330	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x510
- stack 1: 0x8E8
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
1331	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x510
- stack 2: 0x8E8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1332	 121	AND		 	 
- stack 2: 0x510
- stack 1: 0x8E8
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
1333	 122	PUSH2	0040	 	 
- stack 3: 0x510
- stack 2: 0x8E8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0x40
1334	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x510
- stack 2: 0x8E8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0xAA00AA0
1335	 126	PUSH1	E0	 	 
- stack 4: 0x510
- stack 3: 0x8E8
- stack 2: 0xDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 1: 0xAA00AA0
- stack 0: 0xE0
1336	 128	SHL		 	 
- stack 3: 0x510
- stack 2: 0x8E8
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0xAA00AA000000000000000000000000000000000000000000000000000000000
1337	 129	ADD		 	 
- stack 2: 0x510
- stack 1: 0x8E8
- stack 0: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
1338	 12A	SWAP1		 	 
- stack 2: 0x510
- stack 1: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0x8E8
1339	 12B	MSTORE		 	 
- stack 0: 0x510
1340	 12C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1341	 12E	ADD		 	 
- stack 0: 0x514
1342	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1343	 130	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x135FFFC022BAA010177FAA00196000801B0037000860000009503C4023E00AA
1344	 131	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x135FFFC022BAA010177FAA00196000801B0037000860000009503C4023E00AA
- stack 0: 0xF0
1345	 133	SHR		 	 
- stack 1: 0x514
- stack 0: 0x135
1346	 134	JUMP		 	 
- stack 0: 0x514
1347	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x514
1348	 136	PUSH2	0020	 	 
- stack 1: 0x514
- stack 0: 0x20
1349	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x514
- stack 0: 0x8EC
1350	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
1351	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0x8EC
1352	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0x514
1353	 141	MLOAD		 	 
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0x135FFFC022BAA010177FAA00196000801B0037000860000009503C4023E00AA
1354	 142	PUSH1	E0	 	 
- stack 3: 0x514
- stack 2: 0x8EC
- stack 1: 0x135FFFC022BAA010177FAA00196000801B0037000860000009503C4023E00AA
- stack 0: 0xE0
1355	 144	SHR		 	 
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0x135FFFC
1356	 145	PUSH2	FFFF	 	 
- stack 3: 0x514
- stack 2: 0x8EC
- stack 1: 0x135FFFC
- stack 0: 0xFFFF
1357	 148	AND		 	 
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0xFFFC
1358	 149	PUSH1	01	 	 
- stack 3: 0x514
- stack 2: 0x8EC
- stack 1: 0xFFFC
- stack 0: 0x1
1359	 14B	SIGNEXTEND		 	 
- stack 2: 0x514
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
1360	 14C	ADD		 	 
- stack 1: 0x514
- stack 0: 0x8E8
1361	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x514
- stack 1: 0x8E8
- stack 0: 0xFFFFFFFF
1362	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x514
- stack 0: 0x8E8
1363	 153	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
1364	 154	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0xAA00AA0DEADBEEFDEADBEEFDEADBEEF00000000000000000000000000000000
- stack 0: 0xE0
1365	 156	SHR		 	 
- stack 1: 0x514
- stack 0: 0xAA00AA0
1366	 157	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0xAA00AA0
- stack 0: 0x60
1367	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x514
1368	 15B	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1369	 15D	ADD		 	 
- stack 0: 0x518
1370	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1371	 15F	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x22BAA010177FAA00196000801B0037000860000009503C4023E00AA00C7000A
1372	 160	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x22BAA010177FAA00196000801B0037000860000009503C4023E00AA00C7000A
- stack 0: 0xF0
1373	 162	SHR		 	 
- stack 1: 0x518
- stack 0: 0x22B
1374	 163	JUMP		 	 
- stack 0: 0x518
1375	 22B	JUMPDEST		 ;; __riscvimpl_LUI_aa01eb7	  ;; # instr: lui t4,0xaa01(ignore imm)
- stack 0: 0x518
1376	 22C	PUSH4	0aa01000	 	 
- stack 1: 0x518
- stack 0: 0xAA01000
1377	 231	PUSH2	03A0	 	 
- stack 2: 0x518
- stack 1: 0xAA01000
- stack 0: 0x3A0
1378	 234	MSTORE		 	  ;; # store to x29
- stack 0: 0x518
1379	 235	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1380	 237	ADD		 	 
- stack 0: 0x51C
1381	 238	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1382	 239	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x177FAA00196000801B0037000860000009503C4023E00AA00C7000A00E60000
1383	 23A	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x177FAA00196000801B0037000860000009503C4023E00AA00C7000A00E60000
- stack 0: 0xF0
1384	 23C	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x177
1385	 23D	JUMP		 	 
- stack 0: 0x51C
1386	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x51C
1387	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1388	 179	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x177FAA00196000801B0037000860000009503C4023E00AA00C7000A00E60000
1389	 17A	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x177FAA00196000801B0037000860000009503C4023E00AA00C7000A00E60000
- stack 0: 0xE0
1390	 17C	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x177FAA0
1391	 17D	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x177FAA0
- stack 0: 0xFFFF
1392	 180	AND		 	 
- stack 1: 0x51C
- stack 0: 0xFAA0
1393	 181	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0xFAA0
- stack 0: 0x1
1394	 183	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
1395	 184	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0x3A0
1396	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x51C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAA0
- stack 0: 0xAA01000
1397	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x51C
- stack 0: 0xAA00AA0
1398	 189	PUSH2	03A0	 	 
- stack 2: 0x51C
- stack 1: 0xAA00AA0
- stack 0: 0x3A0
1399	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x51C
1400	 18D	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1401	 18F	ADD		 	 
- stack 0: 0x520
1402	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1403	 191	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x196000801B0037000860000009503C4023E00AA00C7000A00E6000001350000
1404	 192	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x196000801B0037000860000009503C4023E00AA00C7000A00E6000001350000
- stack 0: 0xF0
1405	 194	SHR		 	 
- stack 1: 0x520
- stack 0: 0x196
1406	 195	JUMP		 	 
- stack 0: 0x520
1407	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x520
1408	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1409	 198	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x196000801B0037000860000009503C4023E00AA00C7000A00E6000001350000
1410	 199	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x196000801B0037000860000009503C4023E00AA00C7000A00E6000001350000
- stack 0: 0xE0
1411	 19B	SHR		 	 
- stack 1: 0x520
- stack 0: 0x1960008
1412	 19C	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x1960008
- stack 0: 0xFFFF
1413	 19F	AND		 	 
- stack 1: 0x520
- stack 0: 0x8
1414	 1A0	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x8
- stack 0: 0x1
1415	 1A2	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x8
1416	 1A3	PUSH2	0380	 	 
- stack 2: 0x520
- stack 1: 0x8
- stack 0: 0x380
1417	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x520
1418	 1A7	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1419	 1A9	ADD		 	 
- stack 0: 0x524
1420	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1421	 1AB	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x1B0037000860000009503C4023E00AA00C7000A00E6000001350000025100AA
1422	 1AC	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x1B0037000860000009503C4023E00AA00C7000A00E6000001350000025100AA
- stack 0: 0xF0
1423	 1AE	SHR		 	 
- stack 1: 0x524
- stack 0: 0x1B0
1424	 1AF	JUMP		 	 
- stack 0: 0x524
1425	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x524
1426	 1B1	PUSH2	0060	 	 
- stack 1: 0x524
- stack 0: 0x60
1427	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x524
- stack 0: 0xAA00AA0
1428	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0xAA00AA0
- stack 0: 0xFFFFFFFF
1429	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0xAA00AA0
1430	 1BB	PUSH2	03A0	 	 
- stack 2: 0x524
- stack 1: 0xAA00AA0
- stack 0: 0x3A0
1431	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x524
- stack 1: 0xAA00AA0
- stack 0: 0xAA00AA0
1432	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0xAA00AA0
- stack 1: 0xAA00AA0
- stack 0: 0xFFFFFFFF
1433	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0xAA00AA0
- stack 0: 0xAA00AA0
1434	 1C5	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1435	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x1CE
1436	 1C9	JUMPI		 	 
- stack 0: 0x524
1437	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x524
- stack 0: 0x1E8
1438	 1CD	JUMP		 	 
- stack 0: 0x524
1439	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x524
1440	 1E9	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1441	 1EB	ADD		 	 
- stack 0: 0x528
1442	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1443	 1ED	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x860000009503C4023E00AA00C7000A00E6000001350000025100AA0177000A
1444	 1EE	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x860000009503C4023E00AA00C7000A00E6000001350000025100AA0177000A
- stack 0: 0xF0
1445	 1F0	SHR		 	 
- stack 1: 0x528
- stack 0: 0x86
1446	 1F1	JUMP		 	 
- stack 0: 0x528
1447	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x528
1448	 87	DUP1		 	 
- stack 1: 0x528
- stack 0: 0x528
1449	 88	PUSH2	0020	 	 
- stack 2: 0x528
- stack 1: 0x528
- stack 0: 0x20
1450	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x528
1451	 8C	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1452	 8E	ADD		 	 
- stack 0: 0x52C
1453	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1454	 90	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x9503C4023E00AA00C7000A00E6000001350000025100AA0177000A01960009
1455	 91	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x9503C4023E00AA00C7000A00E6000001350000025100AA0177000A01960009
- stack 0: 0xF0
1456	 93	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x95
1457	 94	JUMP		 	 
- stack 0: 0x52C
1458	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x52C
1459	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1460	 97	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x9503C4023E00AA00C7000A00E6000001350000025100AA0177000A01960009
1461	 98	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x9503C4023E00AA00C7000A00E6000001350000025100AA0177000A01960009
- stack 0: 0xE0
1462	 9A	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x9503C4
1463	 9B	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x9503C4
- stack 0: 0xFFFF
1464	 9E	AND		 	 
- stack 1: 0x52C
- stack 0: 0x3C4
1465	 9F	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0x3C4
- stack 0: 0x1
1466	 A1	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0x3C4
1467	 A2	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x3C4
- stack 0: 0x20
1468	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x52C
- stack 1: 0x3C4
- stack 0: 0x528
1469	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x52C
- stack 0: 0x8EC
1470	 A7	PUSH2	0020	 	 
- stack 2: 0x52C
- stack 1: 0x8EC
- stack 0: 0x20
1471	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x52C
1472	 AB	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1473	 AD	ADD		 	 
- stack 0: 0x530
1474	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1475	 AF	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x23E00AA00C7000A00E6000001350000025100AA0177000A0196000901B00348
1476	 B0	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x23E00AA00C7000A00E6000001350000025100AA0177000A0196000901B00348
- stack 0: 0xF0
1477	 B2	SHR		 	 
- stack 1: 0x530
- stack 0: 0x23E
1478	 B3	JUMP		 	 
- stack 0: 0x530
1479	 23E	JUMPDEST		 ;; __riscvimpl_LUI_a00aa137	  ;; # instr: lui sp,0xa00aa(ignore imm)
- stack 0: 0x530
1480	 23F	PUSH4	a00aa000	 	 
- stack 1: 0x530
- stack 0: 0xA00AA000
1481	 244	PUSH2	0040	 	 
- stack 2: 0x530
- stack 1: 0xA00AA000
- stack 0: 0x40
1482	 247	MSTORE		 	  ;; # store to x2
- stack 0: 0x530
1483	 248	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1484	 24A	ADD		 	 
- stack 0: 0x534
1485	 24B	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1486	 24C	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xC7000A00E6000001350000025100AA0177000A0196000901B0034800860000
1487	 24D	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0xC7000A00E6000001350000025100AA0177000A0196000901B0034800860000
- stack 0: 0xF0
1488	 24F	SHR		 	 
- stack 1: 0x534
- stack 0: 0xC7
1489	 250	JUMP		 	 
- stack 0: 0x534
1490	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x534
1491	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x534
- stack 0: 0x534
1492	 C9	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0xC7000A00E6000001350000025100AA0177000A0196000901B0034800860000
1493	 CA	PUSH1	E0	 	 
- stack 2: 0x534
- stack 1: 0xC7000A00E6000001350000025100AA0177000A0196000901B0034800860000
- stack 0: 0xE0
1494	 CC	SHR		 	 
- stack 1: 0x534
- stack 0: 0xC7000A
1495	 CD	PUSH2	FFFF	 	 
- stack 2: 0x534
- stack 1: 0xC7000A
- stack 0: 0xFFFF
1496	 D0	AND		 	 
- stack 1: 0x534
- stack 0: 0xA
1497	 D1	PUSH1	01	 	 
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0x1
1498	 D3	SIGNEXTEND		 	 
- stack 1: 0x534
- stack 0: 0xA
1499	 D4	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0x40
1500	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x534
- stack 1: 0xA
- stack 0: 0xA00AA000
1501	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x534
- stack 0: 0xA00AA00A
1502	 D9	PUSH2	0040	 	 
- stack 2: 0x534
- stack 1: 0xA00AA00A
- stack 0: 0x40
1503	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x534
1504	 DD	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1505	 DF	ADD		 	 
- stack 0: 0x538
1506	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1507	 E1	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0xE6000001350000025100AA0177000A0196000901B0034800860000009503A0
1508	 E2	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0xE6000001350000025100AA0177000A0196000901B0034800860000009503A0
- stack 0: 0xF0
1509	 E4	SHR		 	 
- stack 1: 0x538
- stack 0: 0xE6
1510	 E5	JUMP		 	 
- stack 0: 0x538
1511	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x538
1512	 E7	PUSH2	0020	 	 
- stack 1: 0x538
- stack 0: 0x20
1513	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x538
- stack 0: 0x8EC
1514	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0x538
1515	 EC	MLOAD		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xE6000001350000025100AA0177000A0196000901B0034800860000009503A0
1516	 ED	PUSH1	E0	 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xE6000001350000025100AA0177000A0196000901B0034800860000009503A0
- stack 0: 0xE0
1517	 EF	SHR		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xE60000
1518	 F0	PUSH2	FFFF	 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xE60000
- stack 0: 0xFFFF
1519	 F3	AND		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0x0
1520	 F4	PUSH1	01	 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x1
1521	 F6	SIGNEXTEND		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0x0
1522	 F7	ADD		 	 
- stack 1: 0x538
- stack 0: 0x8EC
1523	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
1524	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x538
- stack 0: 0x8EC
1525	 FE	DUP1		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0x8EC
1526	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xDEADBEEFDEADBEEFDEADBEEF0000000000000000000000000000000000000000
1527	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xDEADBEEFDEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1528	 121	AND		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xDEADBEEFDEADBEEF0000000000000000000000000000000000000000
1529	 122	PUSH2	0040	 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xDEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0x40
1530	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xDEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0xA00AA00A
1531	 126	PUSH1	E0	 	 
- stack 4: 0x538
- stack 3: 0x8EC
- stack 2: 0xDEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 1: 0xA00AA00A
- stack 0: 0xE0
1532	 128	SHL		 	 
- stack 3: 0x538
- stack 2: 0x8EC
- stack 1: 0xDEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0xA00AA00A00000000000000000000000000000000000000000000000000000000
1533	 129	ADD		 	 
- stack 2: 0x538
- stack 1: 0x8EC
- stack 0: 0xA00AA00ADEADBEEFDEADBEEF0000000000000000000000000000000000000000
1534	 12A	SWAP1		 	 
- stack 2: 0x538
- stack 1: 0xA00AA00ADEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0x8EC
1535	 12B	MSTORE		 	 
- stack 0: 0x538
1536	 12C	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1537	 12E	ADD		 	 
- stack 0: 0x53C
1538	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1539	 130	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x1350000025100AA0177000A0196000901B0034800860000009503A002642345
1540	 131	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x1350000025100AA0177000A0196000901B0034800860000009503A002642345
- stack 0: 0xF0
1541	 133	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x135
1542	 134	JUMP		 	 
- stack 0: 0x53C
1543	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x53C
1544	 136	PUSH2	0020	 	 
- stack 1: 0x53C
- stack 0: 0x20
1545	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x53C
- stack 0: 0x8EC
1546	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
1547	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x8EC
1548	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0x53C
1549	 141	MLOAD		 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0x1350000025100AA0177000A0196000901B0034800860000009503A002642345
1550	 142	PUSH1	E0	 	 
- stack 3: 0x53C
- stack 2: 0x8EC
- stack 1: 0x1350000025100AA0177000A0196000901B0034800860000009503A002642345
- stack 0: 0xE0
1551	 144	SHR		 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0x1350000
1552	 145	PUSH2	FFFF	 	 
- stack 3: 0x53C
- stack 2: 0x8EC
- stack 1: 0x1350000
- stack 0: 0xFFFF
1553	 148	AND		 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0x0
1554	 149	PUSH1	01	 	 
- stack 3: 0x53C
- stack 2: 0x8EC
- stack 1: 0x0
- stack 0: 0x1
1555	 14B	SIGNEXTEND		 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0x0
1556	 14C	ADD		 	 
- stack 1: 0x53C
- stack 0: 0x8EC
1557	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x53C
- stack 1: 0x8EC
- stack 0: 0xFFFFFFFF
1558	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x53C
- stack 0: 0x8EC
1559	 153	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0xA00AA00ADEADBEEFDEADBEEF0000000000000000000000000000000000000000
1560	 154	PUSH1	E0	 	 
- stack 2: 0x53C
- stack 1: 0xA00AA00ADEADBEEFDEADBEEF0000000000000000000000000000000000000000
- stack 0: 0xE0
1561	 156	SHR		 	 
- stack 1: 0x53C
- stack 0: 0xA00AA00A
1562	 157	PUSH2	0060	 	 
- stack 2: 0x53C
- stack 1: 0xA00AA00A
- stack 0: 0x60
1563	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x53C
1564	 15B	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1565	 15D	ADD		 	 
- stack 0: 0x540
1566	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1567	 15F	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x25100AA0177000A0196000901B0034800860000009503A00264234500C70678
1568	 160	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x25100AA0177000A0196000901B0034800860000009503A00264234500C70678
- stack 0: 0xF0
1569	 162	SHR		 	 
- stack 1: 0x540
- stack 0: 0x251
1570	 163	JUMP		 	 
- stack 0: 0x540
1571	 251	JUMPDEST		 ;; __riscvimpl_LUI_a00aaeb7	  ;; # instr: lui t4,0xa00aa(ignore imm)
- stack 0: 0x540
1572	 252	PUSH4	a00aa000	 	 
- stack 1: 0x540
- stack 0: 0xA00AA000
1573	 257	PUSH2	03A0	 	 
- stack 2: 0x540
- stack 1: 0xA00AA000
- stack 0: 0x3A0
1574	 25A	MSTORE		 	  ;; # store to x29
- stack 0: 0x540
1575	 25B	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1576	 25D	ADD		 	 
- stack 0: 0x544
1577	 25E	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1578	 25F	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x177000A0196000901B0034800860000009503A00264234500C706780277FFE0
1579	 260	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x177000A0196000901B0034800860000009503A00264234500C706780277FFE0
- stack 0: 0xF0
1580	 262	SHR		 	 
- stack 1: 0x544
- stack 0: 0x177
1581	 263	JUMP		 	 
- stack 0: 0x544
1582	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x544
1583	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1584	 179	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x177000A0196000901B0034800860000009503A00264234500C706780277FFE0
1585	 17A	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0x177000A0196000901B0034800860000009503A00264234500C706780277FFE0
- stack 0: 0xE0
1586	 17C	SHR		 	 
- stack 1: 0x544
- stack 0: 0x177000A
1587	 17D	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0x177000A
- stack 0: 0xFFFF
1588	 180	AND		 	 
- stack 1: 0x544
- stack 0: 0xA
1589	 181	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xA
- stack 0: 0x1
1590	 183	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xA
1591	 184	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xA
- stack 0: 0x3A0
1592	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x544
- stack 1: 0xA
- stack 0: 0xA00AA000
1593	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x544
- stack 0: 0xA00AA00A
1594	 189	PUSH2	03A0	 	 
- stack 2: 0x544
- stack 1: 0xA00AA00A
- stack 0: 0x3A0
1595	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x544
1596	 18D	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1597	 18F	ADD		 	 
- stack 0: 0x548
1598	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1599	 191	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x196000901B0034800860000009503A00264234500C706780277FFE002960020
1600	 192	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x196000901B0034800860000009503A00264234500C706780277FFE002960020
- stack 0: 0xF0
1601	 194	SHR		 	 
- stack 1: 0x548
- stack 0: 0x196
1602	 195	JUMP		 	 
- stack 0: 0x548
1603	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x548
1604	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1605	 198	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x196000901B0034800860000009503A00264234500C706780277FFE002960020
1606	 199	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x196000901B0034800860000009503A00264234500C706780277FFE002960020
- stack 0: 0xE0
1607	 19B	SHR		 	 
- stack 1: 0x548
- stack 0: 0x1960009
1608	 19C	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x1960009
- stack 0: 0xFFFF
1609	 19F	AND		 	 
- stack 1: 0x548
- stack 0: 0x9
1610	 1A0	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x9
- stack 0: 0x1
1611	 1A2	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x9
1612	 1A3	PUSH2	0380	 	 
- stack 2: 0x548
- stack 1: 0x9
- stack 0: 0x380
1613	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x548
1614	 1A7	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1615	 1A9	ADD		 	 
- stack 0: 0x54C
1616	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1617	 1AB	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x1B0034800860000009503A00264234500C706780277FFE00296002001350000
1618	 1AC	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x1B0034800860000009503A00264234500C706780277FFE00296002001350000
- stack 0: 0xF0
1619	 1AE	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x1B0
1620	 1AF	JUMP		 	 
- stack 0: 0x54C
1621	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x54C
1622	 1B1	PUSH2	0060	 	 
- stack 1: 0x54C
- stack 0: 0x60
1623	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x54C
- stack 0: 0xA00AA00A
1624	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x54C
- stack 1: 0xA00AA00A
- stack 0: 0xFFFFFFFF
1625	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x54C
- stack 0: 0xA00AA00A
1626	 1BB	PUSH2	03A0	 	 
- stack 2: 0x54C
- stack 1: 0xA00AA00A
- stack 0: 0x3A0
1627	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x54C
- stack 1: 0xA00AA00A
- stack 0: 0xA00AA00A
1628	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x54C
- stack 2: 0xA00AA00A
- stack 1: 0xA00AA00A
- stack 0: 0xFFFFFFFF
1629	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x54C
- stack 1: 0xA00AA00A
- stack 0: 0xA00AA00A
1630	 1C5	SUB		 	 
- stack 1: 0x54C
- stack 0: 0x0
1631	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x54C
- stack 1: 0x0
- stack 0: 0x1CE
1632	 1C9	JUMPI		 	 
- stack 0: 0x54C
1633	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x54C
- stack 0: 0x1E8
1634	 1CD	JUMP		 	 
- stack 0: 0x54C
1635	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x54C
1636	 1E9	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1637	 1EB	ADD		 	 
- stack 0: 0x550
1638	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1639	 1ED	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x860000009503A00264234500C706780277FFE0029600200135000002E52345
1640	 1EE	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x860000009503A00264234500C706780277FFE0029600200135000002E52345
- stack 0: 0xF0
1641	 1F0	SHR		 	 
- stack 1: 0x550
- stack 0: 0x86
1642	 1F1	JUMP		 	 
- stack 0: 0x550
1643	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x550
1644	 87	DUP1		 	 
- stack 1: 0x550
- stack 0: 0x550
1645	 88	PUSH2	0020	 	 
- stack 2: 0x550
- stack 1: 0x550
- stack 0: 0x20
1646	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x550
1647	 8C	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1648	 8E	ADD		 	 
- stack 0: 0x554
1649	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1650	 90	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x9503A00264234500C706780277FFE0029600200135000002E5234501770678
1651	 91	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x9503A00264234500C706780277FFE0029600200135000002E5234501770678
- stack 0: 0xF0
1652	 93	SHR		 	 
- stack 1: 0x554
- stack 0: 0x95
1653	 94	JUMP		 	 
- stack 0: 0x554
1654	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x554
1655	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1656	 97	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x9503A00264234500C706780277FFE0029600200135000002E5234501770678
1657	 98	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x9503A00264234500C706780277FFE0029600200135000002E5234501770678
- stack 0: 0xE0
1658	 9A	SHR		 	 
- stack 1: 0x554
- stack 0: 0x9503A0
1659	 9B	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x9503A0
- stack 0: 0xFFFF
1660	 9E	AND		 	 
- stack 1: 0x554
- stack 0: 0x3A0
1661	 9F	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x3A0
- stack 0: 0x1
1662	 A1	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x3A0
1663	 A2	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x3A0
- stack 0: 0x20
1664	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x554
- stack 1: 0x3A0
- stack 0: 0x550
1665	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x554
- stack 0: 0x8F0
1666	 A7	PUSH2	0020	 	 
- stack 2: 0x554
- stack 1: 0x8F0
- stack 0: 0x20
1667	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x554
1668	 AB	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1669	 AD	ADD		 	 
- stack 0: 0x558
1670	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1671	 AF	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x264234500C706780277FFE0029600200135000002E52345017706780196000A
1672	 B0	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x264234500C706780277FFE0029600200135000002E52345017706780196000A
- stack 0: 0xF0
1673	 B2	SHR		 	 
- stack 1: 0x558
- stack 0: 0x264
1674	 B3	JUMP		 	 
- stack 0: 0x558
1675	 264	JUMPDEST		 ;; __riscvimpl_LUI_12345137	  ;; # instr: lui sp,0x12345(ignore imm)
- stack 0: 0x558
1676	 265	PUSH4	12345000	 	 
- stack 1: 0x558
- stack 0: 0x12345000
1677	 26A	PUSH2	0040	 	 
- stack 2: 0x558
- stack 1: 0x12345000
- stack 0: 0x40
1678	 26D	MSTORE		 	  ;; # store to x2
- stack 0: 0x558
1679	 26E	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1680	 270	ADD		 	 
- stack 0: 0x55C
1681	 271	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1682	 272	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xC706780277FFE0029600200135000002E52345017706780196000A01B0031C
1683	 273	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0xC706780277FFE0029600200135000002E52345017706780196000A01B0031C
- stack 0: 0xF0
1684	 275	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xC7
1685	 276	JUMP		 	 
- stack 0: 0x55C
1686	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x55C
1687	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1688	 C9	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0xC706780277FFE0029600200135000002E52345017706780196000A01B0031C
1689	 CA	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0xC706780277FFE0029600200135000002E52345017706780196000A01B0031C
- stack 0: 0xE0
1690	 CC	SHR		 	 
- stack 1: 0x55C
- stack 0: 0xC70678
1691	 CD	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0xC70678
- stack 0: 0xFFFF
1692	 D0	AND		 	 
- stack 1: 0x55C
- stack 0: 0x678
1693	 D1	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x678
- stack 0: 0x1
1694	 D3	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x678
1695	 D4	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0x678
- stack 0: 0x40
1696	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x55C
- stack 1: 0x678
- stack 0: 0x12345000
1697	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x55C
- stack 0: 0x12345678
1698	 D9	PUSH2	0040	 	 
- stack 2: 0x55C
- stack 1: 0x12345678
- stack 0: 0x40
1699	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x55C
1700	 DD	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1701	 DF	ADD		 	 
- stack 0: 0x560
1702	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1703	 E1	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x277FFE0029600200135000002E52345017706780196000A01B0031C00860000
1704	 E2	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x277FFE0029600200135000002E52345017706780196000A01B0031C00860000
- stack 0: 0xF0
1705	 E4	SHR		 	 
- stack 1: 0x560
- stack 0: 0x277
1706	 E5	JUMP		 	 
- stack 0: 0x560
1707	 277	JUMPDEST		 ;; __riscvimpl_ADDI_4_1_0	  ;; # instr: addi tp,ra,-32(ignore imm)
- stack 0: 0x560
1708	 278	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1709	 279	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x277FFE0029600200135000002E52345017706780196000A01B0031C00860000
1710	 27A	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x277FFE0029600200135000002E52345017706780196000A01B0031C00860000
- stack 0: 0xE0
1711	 27C	SHR		 	 
- stack 1: 0x560
- stack 0: 0x277FFE0
1712	 27D	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x277FFE0
- stack 0: 0xFFFF
1713	 280	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFE0
1714	 281	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFE0
- stack 0: 0x1
1715	 283	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1716	 284	PUSH2	0020	 	 
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x20
1717	 287	MLOAD		 	  ;; # read from x1
- stack 2: 0x560
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
- stack 0: 0x8F0
1718	 288	ADD		 	  ;; # ADDI 1
- stack 1: 0x560
- stack 0: 0x8D0
1719	 289	PUSH2	0080	 	 
- stack 2: 0x560
- stack 1: 0x8D0
- stack 0: 0x80
1720	 28C	MSTORE		 	  ;; # store to x4
- stack 0: 0x560
1721	 28D	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1722	 28F	ADD		 	 
- stack 0: 0x564
1723	 290	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1724	 291	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x29600200135000002E52345017706780196000A01B0031C0086000000950374
1725	 292	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x29600200135000002E52345017706780196000A01B0031C0086000000950374
- stack 0: 0xF0
1726	 294	SHR		 	 
- stack 1: 0x564
- stack 0: 0x296
1727	 295	JUMP		 	 
- stack 0: 0x564
1728	 296	JUMPDEST		 ;; __riscvimpl_SW_0_4_2	  ;; # instr: sw sp,32(tp)(ignore imm)
- stack 0: 0x564
1729	 297	PUSH2	0080	 	 
- stack 1: 0x564
- stack 0: 0x80
1730	 29A	MLOAD		 	  ;; # read from x4
- stack 1: 0x564
- stack 0: 0x8D0
1731	 29B	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x564
- stack 1: 0x8D0
- stack 0: 0x564
1732	 29C	MLOAD		 	 
- stack 2: 0x564
- stack 1: 0x8D0
- stack 0: 0x29600200135000002E52345017706780196000A01B0031C0086000000950374
1733	 29D	PUSH1	E0	 	 
- stack 3: 0x564
- stack 2: 0x8D0
- stack 1: 0x29600200135000002E52345017706780196000A01B0031C0086000000950374
- stack 0: 0xE0
1734	 29F	SHR		 	 
- stack 2: 0x564
- stack 1: 0x8D0
- stack 0: 0x2960020
1735	 2A0	PUSH2	FFFF	 	 
- stack 3: 0x564
- stack 2: 0x8D0
- stack 1: 0x2960020
- stack 0: 0xFFFF
1736	 2A3	AND		 	 
- stack 2: 0x564
- stack 1: 0x8D0
- stack 0: 0x20
1737	 2A4	PUSH1	01	 	 
- stack 3: 0x564
- stack 2: 0x8D0
- stack 1: 0x20
- stack 0: 0x1
1738	 2A6	SIGNEXTEND		 	 
- stack 2: 0x564
- stack 1: 0x8D0
- stack 0: 0x20
1739	 2A7	ADD		 	 
- stack 1: 0x564
- stack 0: 0x8F0
1740	 2A8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x564
- stack 1: 0x8F0
- stack 0: 0xFFFFFFFF
1741	 2AD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x564
- stack 0: 0x8F0
1742	 2AE	DUP1		 	 
- stack 2: 0x564
- stack 1: 0x8F0
- stack 0: 0x8F0
1743	 2AF	MLOAD		 	  ;; # fetch
- stack 2: 0x564
- stack 1: 0x8F0
- stack 0: 0xDEADBEEFDEADBEEF000000000000000000000000000000000000000000000000
1744	 2B0	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x564
- stack 2: 0x8F0
- stack 1: 0xDEADBEEFDEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1745	 2D1	AND		 	 
- stack 2: 0x564
- stack 1: 0x8F0
- stack 0: 0xDEADBEEF000000000000000000000000000000000000000000000000
1746	 2D2	PUSH2	0040	 	 
- stack 3: 0x564
- stack 2: 0x8F0
- stack 1: 0xDEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x40
1747	 2D5	MLOAD		 	  ;; # read from x2
- stack 3: 0x564
- stack 2: 0x8F0
- stack 1: 0xDEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x12345678
1748	 2D6	PUSH1	E0	 	 
- stack 4: 0x564
- stack 3: 0x8F0
- stack 2: 0xDEADBEEF000000000000000000000000000000000000000000000000
- stack 1: 0x12345678
- stack 0: 0xE0
1749	 2D8	SHL		 	 
- stack 3: 0x564
- stack 2: 0x8F0
- stack 1: 0xDEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x1234567800000000000000000000000000000000000000000000000000000000
1750	 2D9	ADD		 	 
- stack 2: 0x564
- stack 1: 0x8F0
- stack 0: 0x12345678DEADBEEF000000000000000000000000000000000000000000000000
1751	 2DA	SWAP1		 	 
- stack 2: 0x564
- stack 1: 0x12345678DEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0x8F0
1752	 2DB	MSTORE		 	 
- stack 0: 0x564
1753	 2DC	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1754	 2DE	ADD		 	 
- stack 0: 0x568
1755	 2DF	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1756	 2E0	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x135000002E52345017706780196000A01B0031C008600000095037402F88213
1757	 2E1	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x135000002E52345017706780196000A01B0031C008600000095037402F88213
- stack 0: 0xF0
1758	 2E3	SHR		 	 
- stack 1: 0x568
- stack 0: 0x135
1759	 2E4	JUMP		 	 
- stack 0: 0x568
1760	 135	JUMPDEST		 ;; __riscvimpl_LW_3_1_0	  ;; # instr: lw gp,0(ra)(ignore imm)
- stack 0: 0x568
1761	 136	PUSH2	0020	 	 
- stack 1: 0x568
- stack 0: 0x20
1762	 139	MLOAD		 	  ;; # read from x1
- stack 1: 0x568
- stack 0: 0x8F0
1763	 13A	PUSH4	FFFFFFFF	 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0xFFFFFFFF
1764	 13F	AND		 	  ;; # mask to 32 bits
- stack 1: 0x568
- stack 0: 0x8F0
1765	 140	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0x568
1766	 141	MLOAD		 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0x135000002E52345017706780196000A01B0031C008600000095037402F88213
1767	 142	PUSH1	E0	 	 
- stack 3: 0x568
- stack 2: 0x8F0
- stack 1: 0x135000002E52345017706780196000A01B0031C008600000095037402F88213
- stack 0: 0xE0
1768	 144	SHR		 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0x1350000
1769	 145	PUSH2	FFFF	 	 
- stack 3: 0x568
- stack 2: 0x8F0
- stack 1: 0x1350000
- stack 0: 0xFFFF
1770	 148	AND		 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0x0
1771	 149	PUSH1	01	 	 
- stack 3: 0x568
- stack 2: 0x8F0
- stack 1: 0x0
- stack 0: 0x1
1772	 14B	SIGNEXTEND		 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0x0
1773	 14C	ADD		 	 
- stack 1: 0x568
- stack 0: 0x8F0
1774	 14D	PUSH4	FFFFFFFF	 	 
- stack 2: 0x568
- stack 1: 0x8F0
- stack 0: 0xFFFFFFFF
1775	 152	AND		 	  ;; # mask to 32 bits
- stack 1: 0x568
- stack 0: 0x8F0
1776	 153	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x12345678DEADBEEF000000000000000000000000000000000000000000000000
1777	 154	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x12345678DEADBEEF000000000000000000000000000000000000000000000000
- stack 0: 0xE0
1778	 156	SHR		 	 
- stack 1: 0x568
- stack 0: 0x12345678
1779	 157	PUSH2	0060	 	 
- stack 2: 0x568
- stack 1: 0x12345678
- stack 0: 0x60
1780	 15A	MSTORE		 	  ;; # store to x3
- stack 0: 0x568
1781	 15B	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1782	 15D	ADD		 	 
- stack 0: 0x56C
1783	 15E	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1784	 15F	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x2E52345017706780196000A01B0031C008600000095037402F8821300C70098
1785	 160	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x2E52345017706780196000A01B0031C008600000095037402F8821300C70098
- stack 0: 0xF0
1786	 162	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x2E5
1787	 163	JUMP		 	 
- stack 0: 0x56C
1788	 2E5	JUMPDEST		 ;; __riscvimpl_LUI_12345eb7	  ;; # instr: lui t4,0x12345(ignore imm)
- stack 0: 0x56C
1789	 2E6	PUSH4	12345000	 	 
- stack 1: 0x56C
- stack 0: 0x12345000
1790	 2EB	PUSH2	03A0	 	 
- stack 2: 0x56C
- stack 1: 0x12345000
- stack 0: 0x3A0
1791	 2EE	MSTORE		 	  ;; # store to x29
- stack 0: 0x56C
1792	 2EF	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1793	 2F1	ADD		 	 
- stack 0: 0x570
1794	 2F2	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1795	 2F3	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17706780196000A01B0031C008600000095037402F8821300C700980095FFFD
1796	 2F4	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x17706780196000A01B0031C008600000095037402F8821300C700980095FFFD
- stack 0: 0xF0
1797	 2F6	SHR		 	 
- stack 1: 0x570
- stack 0: 0x177
1798	 2F7	JUMP		 	 
- stack 0: 0x570
1799	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x570
1800	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
1801	 179	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x17706780196000A01B0031C008600000095037402F8821300C700980095FFFD
1802	 17A	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x17706780196000A01B0031C008600000095037402F8821300C700980095FFFD
- stack 0: 0xE0
1803	 17C	SHR		 	 
- stack 1: 0x570
- stack 0: 0x1770678
1804	 17D	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x1770678
- stack 0: 0xFFFF
1805	 180	AND		 	 
- stack 1: 0x570
- stack 0: 0x678
1806	 181	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x678
- stack 0: 0x1
1807	 183	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x678
1808	 184	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x678
- stack 0: 0x3A0
1809	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0x678
- stack 0: 0x12345000
1810	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x570
- stack 0: 0x12345678
1811	 189	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0x12345678
- stack 0: 0x3A0
1812	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x570
1813	 18D	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1814	 18F	ADD		 	 
- stack 0: 0x574
1815	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1816	 191	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x196000A01B0031C008600000095037402F8821300C700980095FFFD00E60007
1817	 192	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x196000A01B0031C008600000095037402F8821300C700980095FFFD00E60007
- stack 0: 0xF0
1818	 194	SHR		 	 
- stack 1: 0x574
- stack 0: 0x196
1819	 195	JUMP		 	 
- stack 0: 0x574
1820	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x574
1821	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1822	 198	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x196000A01B0031C008600000095037402F8821300C700980095FFFD00E60007
1823	 199	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x196000A01B0031C008600000095037402F8821300C700980095FFFD00E60007
- stack 0: 0xE0
1824	 19B	SHR		 	 
- stack 1: 0x574
- stack 0: 0x196000A
1825	 19C	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x196000A
- stack 0: 0xFFFF
1826	 19F	AND		 	 
- stack 1: 0x574
- stack 0: 0xA
1827	 1A0	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xA
- stack 0: 0x1
1828	 1A2	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xA
1829	 1A3	PUSH2	0380	 	 
- stack 2: 0x574
- stack 1: 0xA
- stack 0: 0x380
1830	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x574
1831	 1A7	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1832	 1A9	ADD		 	 
- stack 0: 0x578
1833	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1834	 1AB	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1B0031C008600000095037402F8821300C700980095FFFD00E60007030B0000
1835	 1AC	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1B0031C008600000095037402F8821300C700980095FFFD00E60007030B0000
- stack 0: 0xF0
1836	 1AE	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1B0
1837	 1AF	JUMP		 	 
- stack 0: 0x578
1838	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x578
1839	 1B1	PUSH2	0060	 	 
- stack 1: 0x578
- stack 0: 0x60
1840	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x578
- stack 0: 0x12345678
1841	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x578
- stack 1: 0x12345678
- stack 0: 0xFFFFFFFF
1842	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x578
- stack 0: 0x12345678
1843	 1BB	PUSH2	03A0	 	 
- stack 2: 0x578
- stack 1: 0x12345678
- stack 0: 0x3A0
1844	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x578
- stack 1: 0x12345678
- stack 0: 0x12345678
1845	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x578
- stack 2: 0x12345678
- stack 1: 0x12345678
- stack 0: 0xFFFFFFFF
1846	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x578
- stack 1: 0x12345678
- stack 0: 0x12345678
1847	 1C5	SUB		 	 
- stack 1: 0x578
- stack 0: 0x0
1848	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x578
- stack 1: 0x0
- stack 0: 0x1CE
1849	 1C9	JUMPI		 	 
- stack 0: 0x578
1850	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x578
- stack 0: 0x1E8
1851	 1CD	JUMP		 	 
- stack 0: 0x578
1852	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x578
1853	 1E9	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1854	 1EB	ADD		 	 
- stack 0: 0x57C
1855	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1856	 1ED	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x8600000095037402F8821300C700980095FFFD00E60007030B0000031A0360
1857	 1EE	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x8600000095037402F8821300C700980095FFFD00E60007030B0000031A0360
- stack 0: 0xF0
1858	 1F0	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x86
1859	 1F1	JUMP		 	 
- stack 0: 0x57C
1860	 86	JUMPDEST		 ;; __riscvimpl_AUIPC_97000000	  ;; # instr: auipc ra,0x0(ignore imm)
- stack 0: 0x57C
1861	 87	DUP1		 	 
- stack 1: 0x57C
- stack 0: 0x57C
1862	 88	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0x57C
- stack 0: 0x20
1863	 8B	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
1864	 8C	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
1865	 8E	ADD		 	 
- stack 0: 0x580
1866	 8F	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
1867	 90	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x95037402F8821300C700980095FFFD00E60007030B0000031A036003390000
1868	 91	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x95037402F8821300C700980095FFFD00E60007030B0000031A036003390000
- stack 0: 0xF0
1869	 93	SHR		 	 
- stack 1: 0x580
- stack 0: 0x95
1870	 94	JUMP		 	 
- stack 0: 0x580
1871	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x580
1872	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
1873	 97	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x95037402F8821300C700980095FFFD00E60007030B0000031A036003390000
1874	 98	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x95037402F8821300C700980095FFFD00E60007030B0000031A036003390000
- stack 0: 0xE0
1875	 9A	SHR		 	 
- stack 1: 0x580
- stack 0: 0x950374
1876	 9B	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x950374
- stack 0: 0xFFFF
1877	 9E	AND		 	 
- stack 1: 0x580
- stack 0: 0x374
1878	 9F	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0x374
- stack 0: 0x1
1879	 A1	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0x374
1880	 A2	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x374
- stack 0: 0x20
1881	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x580
- stack 1: 0x374
- stack 0: 0x57C
1882	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x580
- stack 0: 0x8F0
1883	 A7	PUSH2	0020	 	 
- stack 2: 0x580
- stack 1: 0x8F0
- stack 0: 0x20
1884	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x580
1885	 AB	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
1886	 AD	ADD		 	 
- stack 0: 0x584
1887	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
1888	 AF	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x2F8821300C700980095FFFD00E60007030B0000031A03600339000003688213
1889	 B0	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x2F8821300C700980095FFFD00E60007030B0000031A03600339000003688213
- stack 0: 0xF0
1890	 B2	SHR		 	 
- stack 1: 0x584
- stack 0: 0x2F8
1891	 B3	JUMP		 	 
- stack 0: 0x584
1892	 2F8	JUMPDEST		 ;; __riscvimpl_LUI_58213137	  ;; # instr: lui sp,0x58213(ignore imm)
- stack 0: 0x584
1893	 2F9	PUSH4	58213000	 	 
- stack 1: 0x584
- stack 0: 0x58213000
1894	 2FE	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0x58213000
- stack 0: 0x40
1895	 301	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
1896	 302	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
1897	 304	ADD		 	 
- stack 0: 0x588
1898	 305	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
1899	 306	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xC700980095FFFD00E60007030B0000031A0360033900000368821301770098
1900	 307	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xC700980095FFFD00E60007030B0000031A0360033900000368821301770098
- stack 0: 0xF0
1901	 309	SHR		 	 
- stack 1: 0x588
- stack 0: 0xC7
1902	 30A	JUMP		 	 
- stack 0: 0x588
1903	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x588
1904	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
1905	 C9	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xC700980095FFFD00E60007030B0000031A0360033900000368821301770098
1906	 CA	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xC700980095FFFD00E60007030B0000031A0360033900000368821301770098
- stack 0: 0xE0
1907	 CC	SHR		 	 
- stack 1: 0x588
- stack 0: 0xC70098
1908	 CD	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xC70098
- stack 0: 0xFFFF
1909	 D0	AND		 	 
- stack 1: 0x588
- stack 0: 0x98
1910	 D1	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0x98
- stack 0: 0x1
1911	 D3	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0x98
1912	 D4	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x98
- stack 0: 0x40
1913	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x588
- stack 1: 0x98
- stack 0: 0x58213000
1914	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x588
- stack 0: 0x58213098
1915	 D9	PUSH2	0040	 	 
- stack 2: 0x588
- stack 1: 0x58213098
- stack 0: 0x40
1916	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x588
1917	 DD	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
1918	 DF	ADD		 	 
- stack 0: 0x58C
1919	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
1920	 E1	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x95FFFD00E60007030B0000031A03600339000003688213017700980196000B
1921	 E2	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x95FFFD00E60007030B0000031A03600339000003688213017700980196000B
- stack 0: 0xF0
1922	 E4	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x95
1923	 E5	JUMP		 	 
- stack 0: 0x58C
1924	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x58C
1925	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
1926	 97	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x95FFFD00E60007030B0000031A03600339000003688213017700980196000B
1927	 98	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x95FFFD00E60007030B0000031A03600339000003688213017700980196000B
- stack 0: 0xE0
1928	 9A	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x95FFFD
1929	 9B	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x95FFFD
- stack 0: 0xFFFF
1930	 9E	AND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFD
1931	 9F	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xFFFD
- stack 0: 0x1
1932	 A1	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
1933	 A2	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
- stack 0: 0x20
1934	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x58C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD
- stack 0: 0x8F0
1935	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x58C
- stack 0: 0x8ED
1936	 A7	PUSH2	0020	 	 
- stack 2: 0x58C
- stack 1: 0x8ED
- stack 0: 0x20
1937	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x58C
1938	 AB	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
1939	 AD	ADD		 	 
- stack 0: 0x590
1940	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
1941	 AF	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0xE60007030B0000031A03600339000003688213017700980196000B01B002E8
1942	 B0	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0xE60007030B0000031A03600339000003688213017700980196000B01B002E8
- stack 0: 0xF0
1943	 B2	SHR		 	 
- stack 1: 0x590
- stack 0: 0xE6
1944	 B3	JUMP		 	 
- stack 0: 0x590
1945	 E6	JUMPDEST		 ;; __riscvimpl_SW_0_1_2	  ;; # instr: sw sp,0(ra)(ignore imm)
- stack 0: 0x590
1946	 E7	PUSH2	0020	 	 
- stack 1: 0x590
- stack 0: 0x20
1947	 EA	MLOAD		 	  ;; # read from x1
- stack 1: 0x590
- stack 0: 0x8ED
1948	 EB	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x590
- stack 1: 0x8ED
- stack 0: 0x590
1949	 EC	MLOAD		 	 
- stack 2: 0x590
- stack 1: 0x8ED
- stack 0: 0xE60007030B0000031A03600339000003688213017700980196000B01B002E8
1950	 ED	PUSH1	E0	 	 
- stack 3: 0x590
- stack 2: 0x8ED
- stack 1: 0xE60007030B0000031A03600339000003688213017700980196000B01B002E8
- stack 0: 0xE0
1951	 EF	SHR		 	 
- stack 2: 0x590
- stack 1: 0x8ED
- stack 0: 0xE60007
1952	 F0	PUSH2	FFFF	 	 
- stack 3: 0x590
- stack 2: 0x8ED
- stack 1: 0xE60007
- stack 0: 0xFFFF
1953	 F3	AND		 	 
- stack 2: 0x590
- stack 1: 0x8ED
- stack 0: 0x7
1954	 F4	PUSH1	01	 	 
- stack 3: 0x590
- stack 2: 0x8ED
- stack 1: 0x7
- stack 0: 0x1
1955	 F6	SIGNEXTEND		 	 
- stack 2: 0x590
- stack 1: 0x8ED
- stack 0: 0x7
1956	 F7	ADD		 	 
- stack 1: 0x590
- stack 0: 0x8F4
1957	 F8	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0x8F4
- stack 0: 0xFFFFFFFF
1958	 FD	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0x8F4
1959	 FE	DUP1		 	 
- stack 2: 0x590
- stack 1: 0x8F4
- stack 0: 0x8F4
1960	 FF	MLOAD		 	  ;; # fetch
- stack 2: 0x590
- stack 1: 0x8F4
- stack 0: 0xDEADBEEF00000000000000000000000000000000000000000000000000000000
1961	 100	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0x8F4
- stack 1: 0xDEADBEEF00000000000000000000000000000000000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
1962	 121	AND		 	 
- stack 2: 0x590
- stack 1: 0x8F4
- stack 0: 0x0
1963	 122	PUSH2	0040	 	 
- stack 3: 0x590
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x40
1964	 125	MLOAD		 	  ;; # read from x2
- stack 3: 0x590
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x58213098
1965	 126	PUSH1	E0	 	 
- stack 4: 0x590
- stack 3: 0x8F4
- stack 2: 0x0
- stack 1: 0x58213098
- stack 0: 0xE0
1966	 128	SHL		 	 
- stack 3: 0x590
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x5821309800000000000000000000000000000000000000000000000000000000
1967	 129	ADD		 	 
- stack 2: 0x590
- stack 1: 0x8F4
- stack 0: 0x5821309800000000000000000000000000000000000000000000000000000000
1968	 12A	SWAP1		 	 
- stack 2: 0x590
- stack 1: 0x5821309800000000000000000000000000000000000000000000000000000000
- stack 0: 0x8F4
1969	 12B	MSTORE		 	 
- stack 0: 0x590
1970	 12C	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
1971	 12E	ADD		 	 
- stack 0: 0x594
1972	 12F	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
1973	 130	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x30B0000031A03600339000003688213017700980196000B01B002E80196000C
1974	 131	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x30B0000031A03600339000003688213017700980196000B01B002E80196000C
- stack 0: 0xF0
1975	 133	SHR		 	 
- stack 1: 0x594
- stack 0: 0x30B
1976	 134	JUMP		 	 
- stack 0: 0x594
1977	 30B	JUMPDEST		 ;; __riscvimpl_AUIPC_17020000	  ;; # instr: auipc tp,0x0(ignore imm)
- stack 0: 0x594
1978	 30C	DUP1		 	 
- stack 1: 0x594
- stack 0: 0x594
1979	 30D	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x594
- stack 0: 0x80
1980	 310	MSTORE		 	  ;; # store to x4
- stack 0: 0x594
1981	 311	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
1982	 313	ADD		 	 
- stack 0: 0x598
1983	 314	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
1984	 315	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x31A03600339000003688213017700980196000B01B002E80196000C037B0000
1985	 316	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x31A03600339000003688213017700980196000B01B002E80196000C037B0000
- stack 0: 0xF0
1986	 318	SHR		 	 
- stack 1: 0x598
- stack 0: 0x31A
1987	 319	JUMP		 	 
- stack 0: 0x598
1988	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x598
1989	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
1990	 31C	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x31A03600339000003688213017700980196000B01B002E80196000C037B0000
1991	 31D	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x31A03600339000003688213017700980196000B01B002E80196000C037B0000
- stack 0: 0xE0
1992	 31F	SHR		 	 
- stack 1: 0x598
- stack 0: 0x31A0360
1993	 320	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x31A0360
- stack 0: 0xFFFF
1994	 323	AND		 	 
- stack 1: 0x598
- stack 0: 0x360
1995	 324	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x360
- stack 0: 0x1
1996	 326	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x360
1997	 327	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x360
- stack 0: 0x80
1998	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x360
- stack 0: 0x594
1999	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x8F4
2000	 32C	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x8F4
- stack 0: 0x80
2001	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2002	 330	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2003	 332	ADD		 	 
- stack 0: 0x59C
2004	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2005	 334	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x339000003688213017700980196000B01B002E80196000C037B00000395ABBD
2006	 335	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x339000003688213017700980196000B01B002E80196000C037B00000395ABBD
- stack 0: 0xF0
2007	 337	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x339
2008	 338	JUMP		 	 
- stack 0: 0x59C
2009	 339	JUMPDEST		 ;; __riscvimpl_LW_3_4_0	  ;; # instr: lw gp,0(tp)(ignore imm)
- stack 0: 0x59C
2010	 33A	PUSH2	0080	 	 
- stack 1: 0x59C
- stack 0: 0x80
2011	 33D	MLOAD		 	  ;; # read from x4
- stack 1: 0x59C
- stack 0: 0x8F4
2012	 33E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0xFFFFFFFF
2013	 343	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x8F4
2014	 344	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0x59C
2015	 345	MLOAD		 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0x339000003688213017700980196000B01B002E80196000C037B00000395ABBD
2016	 346	PUSH1	E0	 	 
- stack 3: 0x59C
- stack 2: 0x8F4
- stack 1: 0x339000003688213017700980196000B01B002E80196000C037B00000395ABBD
- stack 0: 0xE0
2017	 348	SHR		 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0x3390000
2018	 349	PUSH2	FFFF	 	 
- stack 3: 0x59C
- stack 2: 0x8F4
- stack 1: 0x3390000
- stack 0: 0xFFFF
2019	 34C	AND		 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0x0
2020	 34D	PUSH1	01	 	 
- stack 3: 0x59C
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x1
2021	 34F	SIGNEXTEND		 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0x0
2022	 350	ADD		 	 
- stack 1: 0x59C
- stack 0: 0x8F4
2023	 351	PUSH4	FFFFFFFF	 	 
- stack 2: 0x59C
- stack 1: 0x8F4
- stack 0: 0xFFFFFFFF
2024	 356	AND		 	  ;; # mask to 32 bits
- stack 1: 0x59C
- stack 0: 0x8F4
2025	 357	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x5821309800000000000000000000000000000000000000000000000000000000
2026	 358	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x5821309800000000000000000000000000000000000000000000000000000000
- stack 0: 0xE0
2027	 35A	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x58213098
2028	 35B	PUSH2	0060	 	 
- stack 2: 0x59C
- stack 1: 0x58213098
- stack 0: 0x60
2029	 35E	MSTORE		 	  ;; # store to x3
- stack 0: 0x59C
2030	 35F	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2031	 361	ADD		 	 
- stack 0: 0x5A0
2032	 362	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2033	 363	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x3688213017700980196000B01B002E80196000C037B00000395ABBD0095FCDD
2034	 364	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x3688213017700980196000B01B002E80196000C037B00000395ABBD0095FCDD
- stack 0: 0xF0
2035	 366	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x368
2036	 367	JUMP		 	 
- stack 0: 0x5A0
2037	 368	JUMPDEST		 ;; __riscvimpl_LUI_58213eb7	  ;; # instr: lui t4,0x58213(ignore imm)
- stack 0: 0x5A0
2038	 369	PUSH4	58213000	 	 
- stack 1: 0x5A0
- stack 0: 0x58213000
2039	 36E	PUSH2	03A0	 	 
- stack 2: 0x5A0
- stack 1: 0x58213000
- stack 0: 0x3A0
2040	 371	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A0
2041	 372	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2042	 374	ADD		 	 
- stack 0: 0x5A4
2043	 375	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2044	 376	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x17700980196000B01B002E80196000C037B00000395ABBD0095FCDD03A80000
2045	 377	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x17700980196000B01B002E80196000C037B00000395ABBD0095FCDD03A80000
- stack 0: 0xF0
2046	 379	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x177
2047	 37A	JUMP		 	 
- stack 0: 0x5A4
2048	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x5A4
2049	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2050	 179	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x17700980196000B01B002E80196000C037B00000395ABBD0095FCDD03A80000
2051	 17A	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x17700980196000B01B002E80196000C037B00000395ABBD0095FCDD03A80000
- stack 0: 0xE0
2052	 17C	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1770098
2053	 17D	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x1770098
- stack 0: 0xFFFF
2054	 180	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x98
2055	 181	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x98
- stack 0: 0x1
2056	 183	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x98
2057	 184	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0x98
- stack 0: 0x3A0
2058	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A4
- stack 1: 0x98
- stack 0: 0x58213000
2059	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x5A4
- stack 0: 0x58213098
2060	 189	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0x58213098
- stack 0: 0x3A0
2061	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A4
2062	 18D	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2063	 18F	ADD		 	 
- stack 0: 0x5A8
2064	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2065	 191	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x196000B01B002E80196000C037B00000395ABBD0095FCDD03A8000000C70310
2066	 192	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x196000B01B002E80196000C037B00000395ABBD0095FCDD03A8000000C70310
- stack 0: 0xF0
2067	 194	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x196
2068	 195	JUMP		 	 
- stack 0: 0x5A8
2069	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5A8
2070	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2071	 198	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x196000B01B002E80196000C037B00000395ABBD0095FCDD03A8000000C70310
2072	 199	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x196000B01B002E80196000C037B00000395ABBD0095FCDD03A8000000C70310
- stack 0: 0xE0
2073	 19B	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x196000B
2074	 19C	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x196000B
- stack 0: 0xFFFF
2075	 19F	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xB
2076	 1A0	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0x1
2077	 1A2	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xB
2078	 1A3	PUSH2	0380	 	 
- stack 2: 0x5A8
- stack 1: 0xB
- stack 0: 0x380
2079	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5A8
2080	 1A7	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2081	 1A9	ADD		 	 
- stack 0: 0x5AC
2082	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2083	 1AB	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x1B002E80196000C037B00000395ABBD0095FCDD03A8000000C7031003B70000
2084	 1AC	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x1B002E80196000C037B00000395ABBD0095FCDD03A8000000C7031003B70000
- stack 0: 0xF0
2085	 1AE	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x1B0
2086	 1AF	JUMP		 	 
- stack 0: 0x5AC
2087	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x5AC
2088	 1B1	PUSH2	0060	 	 
- stack 1: 0x5AC
- stack 0: 0x60
2089	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x5AC
- stack 0: 0x58213098
2090	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x58213098
- stack 0: 0xFFFFFFFF
2091	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5AC
- stack 0: 0x58213098
2092	 1BB	PUSH2	03A0	 	 
- stack 2: 0x5AC
- stack 1: 0x58213098
- stack 0: 0x3A0
2093	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5AC
- stack 1: 0x58213098
- stack 0: 0x58213098
2094	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5AC
- stack 2: 0x58213098
- stack 1: 0x58213098
- stack 0: 0xFFFFFFFF
2095	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5AC
- stack 1: 0x58213098
- stack 0: 0x58213098
2096	 1C5	SUB		 	 
- stack 1: 0x5AC
- stack 0: 0x0
2097	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x5AC
- stack 1: 0x0
- stack 0: 0x1CE
2098	 1C9	JUMPI		 	 
- stack 0: 0x5AC
2099	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x5AC
- stack 0: 0x1E8
2100	 1CD	JUMP		 	 
- stack 0: 0x5AC
2101	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x5AC
2102	 1E9	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2103	 1EB	ADD		 	 
- stack 0: 0x5B0
2104	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2105	 1ED	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x196000C037B00000395ABBD0095FCDD03A8000000C7031003B7000004060000
2106	 1EE	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x196000C037B00000395ABBD0095FCDD03A8000000C7031003B7000004060000
- stack 0: 0xF0
2107	 1F0	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x196
2108	 1F1	JUMP		 	 
- stack 0: 0x5B0
2109	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5B0
2110	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2111	 198	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x196000C037B00000395ABBD0095FCDD03A8000000C7031003B7000004060000
2112	 199	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x196000C037B00000395ABBD0095FCDD03A8000000C7031003B7000004060000
- stack 0: 0xE0
2113	 19B	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x196000C
2114	 19C	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x196000C
- stack 0: 0xFFFF
2115	 19F	AND		 	 
- stack 1: 0x5B0
- stack 0: 0xC
2116	 1A0	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0xC
- stack 0: 0x1
2117	 1A2	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0xC
2118	 1A3	PUSH2	0380	 	 
- stack 2: 0x5B0
- stack 1: 0xC
- stack 0: 0x380
2119	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5B0
2120	 1A7	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2121	 1A9	ADD		 	 
- stack 0: 0x5B4
2122	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2123	 1AB	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x37B00000395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD
2124	 1AC	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x37B00000395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD
- stack 0: 0xF0
2125	 1AE	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x37B
2126	 1AF	JUMP		 	 
- stack 0: 0x5B4
2127	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B4
2128	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2129	 37D	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x37B00000395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD
2130	 37E	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x37B00000395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD
- stack 0: 0xE0
2131	 380	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x37B0000
2132	 381	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x37B0000
- stack 0: 0xFFFF
2133	 384	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2134	 385	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2135	 387	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2136	 388	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x80
2137	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2138	 38C	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2139	 38E	ADD		 	 
- stack 0: 0x5B8
2140	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2141	 390	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD
2142	 391	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD
- stack 0: 0xF0
2143	 393	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x395
2144	 394	JUMP		 	 
- stack 0: 0x5B8
2145	 395	JUMPDEST		 ;; __riscvimpl_LUI_aabbd0b7	  ;; # instr: lui ra,0xaabbd(ignore imm)
- stack 0: 0x5B8
2146	 396	PUSH4	aabbd000	 	 
- stack 1: 0x5B8
- stack 0: 0xAABBD000
2147	 39B	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xAABBD000
- stack 0: 0x20
2148	 39E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2149	 39F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2150	 3A1	ADD		 	 
- stack 0: 0x5BC
2151	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2152	 3A3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
2153	 3A4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
- stack 0: 0xF0
2154	 3A6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95
2155	 3A7	JUMP		 	 
- stack 0: 0x5BC
2156	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5BC
2157	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2158	 97	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
2159	 98	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
- stack 0: 0xE0
2160	 9A	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD
2161	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD
- stack 0: 0xFFFF
2162	 9E	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFCDD
2163	 9F	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFCDD
- stack 0: 0x1
2164	 A1	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2165	 A2	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x20
2166	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xAABBD000
2167	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xAABBCCDD
2168	 A7	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xAABBCCDD
- stack 0: 0x20
2169	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2170	 AB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2171	 AD	ADD		 	 
- stack 0: 0x5C0
2172	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2173	 AF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x3A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC031A0001
2174	 B0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x3A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC031A0001
- stack 0: 0xF0
2175	 B2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x3A8
2176	 B3	JUMP		 	 
- stack 0: 0x5C0
2177	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5C0
2178	 3A9	DUP1		 	 
- stack 1: 0x5C0
- stack 0: 0x5C0
2179	 3AA	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0x5C0
- stack 0: 0x40
2180	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2181	 3AE	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2182	 3B0	ADD		 	 
- stack 0: 0x5C4
2183	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2184	 3B2	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
2185	 3B3	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
- stack 0: 0xF0
2186	 3B5	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xC7
2187	 3B6	JUMP		 	 
- stack 0: 0x5C4
2188	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x5C4
2189	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2190	 C9	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
2191	 CA	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
- stack 0: 0xE0
2192	 CC	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xC70310
2193	 CD	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xC70310
- stack 0: 0xFFFF
2194	 D0	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x310
2195	 D1	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x1
2196	 D3	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x310
2197	 D4	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x40
2198	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x5C0
2199	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0x8D0
2200	 D9	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x8D0
- stack 0: 0x40
2201	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2202	 DD	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2203	 DF	ADD		 	 
- stack 0: 0x5C8
2204	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2205	 E1	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
2206	 E2	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
- stack 0: 0xF0
2207	 E4	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x3B7
2208	 E5	JUMP		 	 
- stack 0: 0x5C8
2209	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x5C8
2210	 3B8	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2211	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0x8D0
2212	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x5C8
2213	 3BD	MLOAD		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
2214	 3BE	PUSH1	E0	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
- stack 0: 0xE0
2215	 3C0	SHR		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x3B70000
2216	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x3B70000
- stack 0: 0xFFFF
2217	 3C4	AND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x0
2218	 3C5	PUSH1	01	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2219	 3C7	SIGNEXTEND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x0
2220	 3C8	ADD		 	 
- stack 1: 0x5C8
- stack 0: 0x8D0
2221	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2222	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x8D0
2223	 3CF	DUP1		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x8D0
2224	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAA00AAAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2225	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2226	 3F2	AND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2227	 3F3	PUSH2	0020	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0x20
2228	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xAABBCCDD
2229	 3F7	PUSH1	E0	 	 
- stack 4: 0x5C8
- stack 3: 0x8D0
- stack 2: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 1: 0xAABBCCDD
- stack 0: 0xE0
2230	 3F9	SHL		 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xAABBCCDD00000000000000000000000000000000000000000000000000000000
2231	 3FA	ADD		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2232	 3FB	SWAP1		 	 
- stack 2: 0x5C8
- stack 1: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0x8D0
2233	 3FC	MSTORE		 	 
- stack 0: 0x5C8
2234	 3FD	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2235	 3FF	ADD		 	 
- stack 0: 0x5CC
2236	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2237	 401	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
2238	 402	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
- stack 0: 0xF0
2239	 404	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x406
2240	 405	JUMP		 	 
- stack 0: 0x5CC
2241	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x5CC
2242	 407	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2243	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0x8D0
2244	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2245	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x8D0
2246	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x5CC
2247	 412	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
2248	 413	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
- stack 0: 0xE0
2249	 415	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x4060000
2250	 416	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x4060000
- stack 0: 0xFFFF
2251	 419	AND		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x0
2252	 41A	PUSH1	01	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2253	 41C	SIGNEXTEND		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x0
2254	 41D	ADD		 	 
- stack 1: 0x5CC
- stack 0: 0x8D0
2255	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2256	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x8D0
2257	 424	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2258	 425	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xE0
2259	 427	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xAABBCCDD
2260	 428	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xAABBCCDD
- stack 0: 0x60
2261	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2262	 42C	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2263	 42E	ADD		 	 
- stack 0: 0x5D0
2264	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2265	 430	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D037B0000
2266	 431	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D037B0000
- stack 0: 0xF0
2267	 433	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x435
2268	 434	JUMP		 	 
- stack 0: 0x5D0
2269	 435	JUMPDEST		 ;; __riscvimpl_LUI_aabbdeb7	  ;; # instr: lui t4,0xaabbd(ignore imm)
- stack 0: 0x5D0
2270	 436	PUSH4	aabbd000	 	 
- stack 1: 0x5D0
- stack 0: 0xAABBD000
2271	 43B	PUSH2	03A0	 	 
- stack 2: 0x5D0
- stack 1: 0xAABBD000
- stack 0: 0x3A0
2272	 43E	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D0
2273	 43F	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2274	 441	ADD		 	 
- stack 0: 0x5D4
2275	 442	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2276	 443	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
2277	 444	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
- stack 0: 0xF0
2278	 446	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x177
2279	 447	JUMP		 	 
- stack 0: 0x5D4
2280	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x5D4
2281	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2282	 179	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
2283	 17A	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
- stack 0: 0xE0
2284	 17C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD
2285	 17D	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD
- stack 0: 0xFFFF
2286	 180	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFCDD
2287	 181	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFCDD
- stack 0: 0x1
2288	 183	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2289	 184	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x3A0
2290	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xAABBD000
2291	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x5D4
- stack 0: 0xAABBCCDD
2292	 189	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0xAABBCCDD
- stack 0: 0x3A0
2293	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
2294	 18D	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2295	 18F	ADD		 	 
- stack 0: 0x5D8
2296	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2297	 191	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1B002BC031A0001044800020462FFD40196000D037B000004A4AABC0095FCCD
2298	 192	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1B002BC031A0001044800020462FFD40196000D037B000004A4AABC0095FCCD
- stack 0: 0xF0
2299	 194	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1B0
2300	 195	JUMP		 	 
- stack 0: 0x5D8
2301	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x5D8
2302	 1B1	PUSH2	0060	 	 
- stack 1: 0x5D8
- stack 0: 0x60
2303	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x5D8
- stack 0: 0xAABBCCDD
2304	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xFFFFFFFF
2305	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0xAABBCCDD
2306	 1BB	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0x3A0
2307	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xAABBCCDD
2308	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0xAABBCCDD
- stack 1: 0xAABBCCDD
- stack 0: 0xFFFFFFFF
2309	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xAABBCCDD
2310	 1C5	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2311	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1CE
2312	 1C9	JUMPI		 	 
- stack 0: 0x5D8
2313	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x5D8
- stack 0: 0x1E8
2314	 1CD	JUMP		 	 
- stack 0: 0x5D8
2315	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x5D8
2316	 1E9	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2317	 1EB	ADD		 	 
- stack 0: 0x5DC
2318	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2319	 1ED	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
2320	 1EE	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
- stack 0: 0xF0
2321	 1F0	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31A
2322	 1F1	JUMP		 	 
- stack 0: 0x5DC
2323	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x5DC
2324	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2325	 31C	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
2326	 31D	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
- stack 0: 0xE0
2327	 31F	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001
2328	 320	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001
- stack 0: 0xFFFF
2329	 323	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2330	 324	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2331	 326	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2332	 327	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2333	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x0
2334	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5DC
- stack 0: 0x1
2335	 32C	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2336	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5DC
2337	 330	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2338	 332	ADD		 	 
- stack 0: 0x5E0
2339	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2340	 334	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
2341	 335	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
- stack 0: 0xF0
2342	 337	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x448
2343	 338	JUMP		 	 
- stack 0: 0x5E0
2344	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E0
2345	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2346	 44A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
2347	 44B	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
- stack 0: 0xE0
2348	 44D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x4480002
2349	 44E	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x4480002
- stack 0: 0xFFFF
2350	 451	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2351	 452	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x1
2352	 454	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2353	 455	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2354	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E0
2355	 459	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2356	 45B	ADD		 	 
- stack 0: 0x5E4
2357	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2358	 45D	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
2359	 45E	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
- stack 0: 0xF0
2360	 460	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x462
2361	 461	JUMP		 	 
- stack 0: 0x5E4
2362	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x5E4
2363	 463	PUSH2	0080	 	 
- stack 1: 0x5E4
- stack 0: 0x80
2364	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E4
- stack 0: 0x1
2365	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2366	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x1
2367	 46D	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0xA0
2368	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x2
2369	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2370	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x2
2371	 477	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x1
2372	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x5E4
- stack 1: 0x1
- stack 0: 0x480
2373	 47B	JUMPI		 	 
- stack 0: 0x5E4
2374	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x5E4
2375	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
2376	 482	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
2377	 483	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
- stack 0: 0xE0
2378	 485	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x462FFD4
2379	 486	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x462FFD4
- stack 0: 0xFFFF
2380	 489	AND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFD4
2381	 48A	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0xFFD4
- stack 0: 0x1
2382	 48C	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
2383	 48D	ADD		 	 
- stack 0: 0x5B8
2384	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFF
2385	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B8
2386	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2387	 495	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD
2388	 496	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x395ABBD0095FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD
- stack 0: 0xF0
2389	 498	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x395
2390	 499	JUMP		 	 
- stack 0: 0x5B8
2391	 395	JUMPDEST		 ;; __riscvimpl_LUI_aabbd0b7	  ;; # instr: lui ra,0xaabbd(ignore imm)
- stack 0: 0x5B8
2392	 396	PUSH4	aabbd000	 	 
- stack 1: 0x5B8
- stack 0: 0xAABBD000
2393	 39B	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xAABBD000
- stack 0: 0x20
2394	 39E	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2395	 39F	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2396	 3A1	ADD		 	 
- stack 0: 0x5BC
2397	 3A2	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2398	 3A3	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
2399	 3A4	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
- stack 0: 0xF0
2400	 3A6	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95
2401	 3A7	JUMP		 	 
- stack 0: 0x5BC
2402	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5BC
2403	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2404	 97	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
2405	 98	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD03A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC
- stack 0: 0xE0
2406	 9A	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x95FCDD
2407	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x95FCDD
- stack 0: 0xFFFF
2408	 9E	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFCDD
2409	 9F	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFCDD
- stack 0: 0x1
2410	 A1	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2411	 A2	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x20
2412	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xAABBD000
2413	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xAABBCCDD
2414	 A7	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xAABBCCDD
- stack 0: 0x20
2415	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2416	 AB	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2417	 AD	ADD		 	 
- stack 0: 0x5C0
2418	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2419	 AF	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x3A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC031A0001
2420	 B0	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x3A8000000C7031003B70000040600000435ABBD0177FCDD01B002BC031A0001
- stack 0: 0xF0
2421	 B2	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x3A8
2422	 B3	JUMP		 	 
- stack 0: 0x5C0
2423	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5C0
2424	 3A9	DUP1		 	 
- stack 1: 0x5C0
- stack 0: 0x5C0
2425	 3AA	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0x5C0
- stack 0: 0x40
2426	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2427	 3AE	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2428	 3B0	ADD		 	 
- stack 0: 0x5C4
2429	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2430	 3B2	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
2431	 3B3	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
- stack 0: 0xF0
2432	 3B5	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xC7
2433	 3B6	JUMP		 	 
- stack 0: 0x5C4
2434	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x5C4
2435	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2436	 C9	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
2437	 CA	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xC7031003B70000040600000435ABBD0177FCDD01B002BC031A000104480002
- stack 0: 0xE0
2438	 CC	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xC70310
2439	 CD	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xC70310
- stack 0: 0xFFFF
2440	 D0	AND		 	 
- stack 1: 0x5C4
- stack 0: 0x310
2441	 D1	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x1
2442	 D3	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0x310
2443	 D4	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x40
2444	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0x310
- stack 0: 0x5C0
2445	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0x8D0
2446	 D9	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0x8D0
- stack 0: 0x40
2447	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2448	 DD	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2449	 DF	ADD		 	 
- stack 0: 0x5C8
2450	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2451	 E1	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
2452	 E2	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
- stack 0: 0xF0
2453	 E4	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x3B7
2454	 E5	JUMP		 	 
- stack 0: 0x5C8
2455	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x5C8
2456	 3B8	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2457	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0x8D0
2458	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x5C8
2459	 3BD	MLOAD		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
2460	 3BE	PUSH1	E0	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x3B70000040600000435ABBD0177FCDD01B002BC031A0001044800020462FFD4
- stack 0: 0xE0
2461	 3C0	SHR		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x3B70000
2462	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x3B70000
- stack 0: 0xFFFF
2463	 3C4	AND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x0
2464	 3C5	PUSH1	01	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2465	 3C7	SIGNEXTEND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x0
2466	 3C8	ADD		 	 
- stack 1: 0x5C8
- stack 0: 0x8D0
2467	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2468	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C8
- stack 0: 0x8D0
2469	 3CF	DUP1		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0x8D0
2470	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2471	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2472	 3F2	AND		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2473	 3F3	PUSH2	0020	 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0x20
2474	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xAABBCCDD
2475	 3F7	PUSH1	E0	 	 
- stack 4: 0x5C8
- stack 3: 0x8D0
- stack 2: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 1: 0xAABBCCDD
- stack 0: 0xE0
2476	 3F9	SHL		 	 
- stack 3: 0x5C8
- stack 2: 0x8D0
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xAABBCCDD00000000000000000000000000000000000000000000000000000000
2477	 3FA	ADD		 	 
- stack 2: 0x5C8
- stack 1: 0x8D0
- stack 0: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2478	 3FB	SWAP1		 	 
- stack 2: 0x5C8
- stack 1: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0x8D0
2479	 3FC	MSTORE		 	 
- stack 0: 0x5C8
2480	 3FD	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2481	 3FF	ADD		 	 
- stack 0: 0x5CC
2482	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2483	 401	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
2484	 402	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
- stack 0: 0xF0
2485	 404	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x406
2486	 405	JUMP		 	 
- stack 0: 0x5CC
2487	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x5CC
2488	 407	PUSH2	0040	 	 
- stack 1: 0x5CC
- stack 0: 0x40
2489	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x5CC
- stack 0: 0x8D0
2490	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2491	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x8D0
2492	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x5CC
2493	 412	MLOAD		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
2494	 413	PUSH1	E0	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x40600000435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D
- stack 0: 0xE0
2495	 415	SHR		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x4060000
2496	 416	PUSH2	FFFF	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x4060000
- stack 0: 0xFFFF
2497	 419	AND		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x0
2498	 41A	PUSH1	01	 	 
- stack 3: 0x5CC
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
2499	 41C	SIGNEXTEND		 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0x0
2500	 41D	ADD		 	 
- stack 1: 0x5CC
- stack 0: 0x8D0
2501	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2502	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5CC
- stack 0: 0x8D0
2503	 424	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
2504	 425	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0xAABBCCDDAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A
- stack 0: 0xE0
2505	 427	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0xAABBCCDD
2506	 428	PUSH2	0060	 	 
- stack 2: 0x5CC
- stack 1: 0xAABBCCDD
- stack 0: 0x60
2507	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x5CC
2508	 42C	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2509	 42E	ADD		 	 
- stack 0: 0x5D0
2510	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2511	 430	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D037B0000
2512	 431	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x435ABBD0177FCDD01B002BC031A0001044800020462FFD40196000D037B0000
- stack 0: 0xF0
2513	 433	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x435
2514	 434	JUMP		 	 
- stack 0: 0x5D0
2515	 435	JUMPDEST		 ;; __riscvimpl_LUI_aabbdeb7	  ;; # instr: lui t4,0xaabbd(ignore imm)
- stack 0: 0x5D0
2516	 436	PUSH4	aabbd000	 	 
- stack 1: 0x5D0
- stack 0: 0xAABBD000
2517	 43B	PUSH2	03A0	 	 
- stack 2: 0x5D0
- stack 1: 0xAABBD000
- stack 0: 0x3A0
2518	 43E	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D0
2519	 43F	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2520	 441	ADD		 	 
- stack 0: 0x5D4
2521	 442	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2522	 443	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
2523	 444	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
- stack 0: 0xF0
2524	 446	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x177
2525	 447	JUMP		 	 
- stack 0: 0x5D4
2526	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x5D4
2527	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2528	 179	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
2529	 17A	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD01B002BC031A0001044800020462FFD40196000D037B000004A4AABC
- stack 0: 0xE0
2530	 17C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x177FCDD
2531	 17D	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x177FCDD
- stack 0: 0xFFFF
2532	 180	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFCDD
2533	 181	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFCDD
- stack 0: 0x1
2534	 183	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
2535	 184	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0x3A0
2536	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCDD
- stack 0: 0xAABBD000
2537	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x5D4
- stack 0: 0xAABBCCDD
2538	 189	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0xAABBCCDD
- stack 0: 0x3A0
2539	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D4
2540	 18D	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2541	 18F	ADD		 	 
- stack 0: 0x5D8
2542	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2543	 191	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x1B002BC031A0001044800020462FFD40196000D037B000004A4AABC0095FCCD
2544	 192	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x1B002BC031A0001044800020462FFD40196000D037B000004A4AABC0095FCCD
- stack 0: 0xF0
2545	 194	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x1B0
2546	 195	JUMP		 	 
- stack 0: 0x5D8
2547	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x5D8
2548	 1B1	PUSH2	0060	 	 
- stack 1: 0x5D8
- stack 0: 0x60
2549	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x5D8
- stack 0: 0xAABBCCDD
2550	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xFFFFFFFF
2551	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D8
- stack 0: 0xAABBCCDD
2552	 1BB	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0x3A0
2553	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xAABBCCDD
2554	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D8
- stack 2: 0xAABBCCDD
- stack 1: 0xAABBCCDD
- stack 0: 0xFFFFFFFF
2555	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D8
- stack 1: 0xAABBCCDD
- stack 0: 0xAABBCCDD
2556	 1C5	SUB		 	 
- stack 1: 0x5D8
- stack 0: 0x0
2557	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x5D8
- stack 1: 0x0
- stack 0: 0x1CE
2558	 1C9	JUMPI		 	 
- stack 0: 0x5D8
2559	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x5D8
- stack 0: 0x1E8
2560	 1CD	JUMP		 	 
- stack 0: 0x5D8
2561	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x5D8
2562	 1E9	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2563	 1EB	ADD		 	 
- stack 0: 0x5DC
2564	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2565	 1ED	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
2566	 1EE	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
- stack 0: 0xF0
2567	 1F0	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31A
2568	 1F1	JUMP		 	 
- stack 0: 0x5DC
2569	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x5DC
2570	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2571	 31C	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
2572	 31D	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001044800020462FFD40196000D037B000004A4AABC0095FCCD03A80000
- stack 0: 0xE0
2573	 31F	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x31A0001
2574	 320	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x31A0001
- stack 0: 0xFFFF
2575	 323	AND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2576	 324	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2577	 326	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0x1
2578	 327	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x80
2579	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x5DC
- stack 1: 0x1
- stack 0: 0x1
2580	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x5DC
- stack 0: 0x2
2581	 32C	PUSH2	0080	 	 
- stack 2: 0x5DC
- stack 1: 0x2
- stack 0: 0x80
2582	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x5DC
2583	 330	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2584	 332	ADD		 	 
- stack 0: 0x5E0
2585	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2586	 334	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
2587	 335	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
- stack 0: 0xF0
2588	 337	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x448
2589	 338	JUMP		 	 
- stack 0: 0x5E0
2590	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5E0
2591	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2592	 44A	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
2593	 44B	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x44800020462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D8
- stack 0: 0xE0
2594	 44D	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x4480002
2595	 44E	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x4480002
- stack 0: 0xFFFF
2596	 451	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2597	 452	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0x1
2598	 454	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x2
2599	 455	PUSH2	00A0	 	 
- stack 2: 0x5E0
- stack 1: 0x2
- stack 0: 0xA0
2600	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x5E0
2601	 459	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2602	 45B	ADD		 	 
- stack 0: 0x5E4
2603	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2604	 45D	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
2605	 45E	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x462FFD40196000D037B000004A4AABC0095FCCD03A8000000C702D804B70000
- stack 0: 0xF0
2606	 460	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x462
2607	 461	JUMP		 	 
- stack 0: 0x5E4
2608	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x5E4
2609	 463	PUSH2	0080	 	 
- stack 1: 0x5E4
- stack 0: 0x80
2610	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x5E4
- stack 0: 0x2
2611	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2612	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0x2
2613	 46D	PUSH2	00A0	 	 
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0xA0
2614	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x2
2615	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2616	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0x2
- stack 0: 0x2
2617	 477	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2618	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x480
2619	 47B	JUMPI		 	 
- stack 0: 0x5E4
2620	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x5E4
- stack 0: 0x49A
2621	 47F	JUMP		 	 
- stack 0: 0x5E4
2622	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x5E4
2623	 49B	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2624	 49D	ADD		 	 
- stack 0: 0x5E8
2625	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2626	 49F	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x196000D037B000004A4AABC0095FCCD03A8000000C702D804B7000003B70004
2627	 4A0	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x196000D037B000004A4AABC0095FCCD03A8000000C702D804B7000003B70004
- stack 0: 0xF0
2628	 4A2	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x196
2629	 4A3	JUMP		 	 
- stack 0: 0x5E8
2630	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E8
2631	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2632	 198	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x196000D037B000004A4AABC0095FCCD03A8000000C702D804B7000003B70004
2633	 199	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x196000D037B000004A4AABC0095FCCD03A8000000C702D804B7000003B70004
- stack 0: 0xE0
2634	 19B	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x196000D
2635	 19C	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x196000D
- stack 0: 0xFFFF
2636	 19F	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xD
2637	 1A0	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xD
- stack 0: 0x1
2638	 1A2	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xD
2639	 1A3	PUSH2	0380	 	 
- stack 2: 0x5E8
- stack 1: 0xD
- stack 0: 0x380
2640	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E8
2641	 1A7	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2642	 1A9	ADD		 	 
- stack 0: 0x5EC
2643	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2644	 1AB	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x37B000004A4AABC0095FCCD03A8000000C702D804B7000003B7000404060004
2645	 1AC	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x37B000004A4AABC0095FCCD03A8000000C702D804B7000003B7000404060004
- stack 0: 0xF0
2646	 1AE	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x37B
2647	 1AF	JUMP		 	 
- stack 0: 0x5EC
2648	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5EC
2649	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5EC
- stack 0: 0x5EC
2650	 37D	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x37B000004A4AABC0095FCCD03A8000000C702D804B7000003B7000404060004
2651	 37E	PUSH1	E0	 	 
- stack 2: 0x5EC
- stack 1: 0x37B000004A4AABC0095FCCD03A8000000C702D804B7000003B7000404060004
- stack 0: 0xE0
2652	 380	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x37B0000
2653	 381	PUSH2	FFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x37B0000
- stack 0: 0xFFFF
2654	 384	AND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2655	 385	PUSH1	01	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x1
2656	 387	SIGNEXTEND		 	 
- stack 1: 0x5EC
- stack 0: 0x0
2657	 388	PUSH2	0080	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x80
2658	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x5EC
2659	 38C	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2660	 38E	ADD		 	 
- stack 0: 0x5F0
2661	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2662	 390	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x4A4AABC0095FCCD03A8000000C702D804B7000003B700040406000404CEAABC
2663	 391	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x4A4AABC0095FCCD03A8000000C702D804B7000003B700040406000404CEAABC
- stack 0: 0xF0
2664	 393	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x4A4
2665	 394	JUMP		 	 
- stack 0: 0x5F0
2666	 4A4	JUMPDEST		 ;; __riscvimpl_LUI_daabc0b7	  ;; # instr: lui ra,0xdaabc(ignore imm)
- stack 0: 0x5F0
2667	 4A5	PUSH4	daabc000	 	 
- stack 1: 0x5F0
- stack 0: 0xDAABC000
2668	 4AA	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xDAABC000
- stack 0: 0x20
2669	 4AD	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2670	 4AE	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2671	 4B0	ADD		 	 
- stack 0: 0x5F4
2672	 4B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2673	 4B2	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
2674	 4B3	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
- stack 0: 0xF0
2675	 4B5	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x95
2676	 4B6	JUMP		 	 
- stack 0: 0x5F4
2677	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5F4
2678	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2679	 97	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
2680	 98	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
- stack 0: 0xE0
2681	 9A	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD
2682	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD
- stack 0: 0xFFFF
2683	 9E	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFCCD
2684	 9F	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFCCD
- stack 0: 0x1
2685	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2686	 A2	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x20
2687	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xDAABC000
2688	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F4
- stack 0: 0xDAABBCCD
2689	 A7	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xDAABBCCD
- stack 0: 0x20
2690	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
2691	 AB	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2692	 AD	ADD		 	 
- stack 0: 0x5F8
2693	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2694	 AF	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3A8000000C702D804B7000003B700040406000404CEAABC0177FCCD01B00280
2695	 B0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x3A8000000C702D804B7000003B700040406000404CEAABC0177FCCD01B00280
- stack 0: 0xF0
2696	 B2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3A8
2697	 B3	JUMP		 	 
- stack 0: 0x5F8
2698	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5F8
2699	 3A9	DUP1		 	 
- stack 1: 0x5F8
- stack 0: 0x5F8
2700	 3AA	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0x5F8
- stack 0: 0x40
2701	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2702	 3AE	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2703	 3B0	ADD		 	 
- stack 0: 0x5FC
2704	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2705	 3B2	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
2706	 3B3	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
- stack 0: 0xF0
2707	 3B5	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xC7
2708	 3B6	JUMP		 	 
- stack 0: 0x5FC
2709	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x5FC
2710	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2711	 C9	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
2712	 CA	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
- stack 0: 0xE0
2713	 CC	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D8
2714	 CD	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D8
- stack 0: 0xFFFF
2715	 D0	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2716	 D1	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x1
2717	 D3	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2718	 D4	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x40
2719	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x5F8
2720	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x5FC
- stack 0: 0x8D0
2721	 D9	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0x8D0
- stack 0: 0x40
2722	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x5FC
2723	 DD	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2724	 DF	ADD		 	 
- stack 0: 0x600
2725	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2726	 E1	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
2727	 E2	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
- stack 0: 0xF0
2728	 E4	SHR		 	 
- stack 1: 0x600
- stack 0: 0x4B7
2729	 E5	JUMP		 	 
- stack 0: 0x600
2730	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
2731	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2732	 4B9	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
2733	 4BA	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
- stack 0: 0xE0
2734	 4BC	SHR		 	 
- stack 1: 0x600
- stack 0: 0x4B70000
2735	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x4B70000
- stack 0: 0xFFFF
2736	 4C0	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
2737	 4C1	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
2738	 4C3	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
2739	 4C4	POP		 	 
- stack 0: 0x600
2740	 4C5	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2741	 4C7	ADD		 	 
- stack 0: 0x604
2742	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2743	 4C9	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
2744	 4CA	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
- stack 0: 0xF0
2745	 4CC	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3B7
2746	 4CD	JUMP		 	 
- stack 0: 0x604
2747	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x604
2748	 3B8	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
2749	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0x8D0
2750	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x604
2751	 3BD	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
2752	 3BE	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
- stack 0: 0xE0
2753	 3C0	SHR		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x3B70004
2754	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x3B70004
- stack 0: 0xFFFF
2755	 3C4	AND		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x4
2756	 3C5	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
2757	 3C7	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x4
2758	 3C8	ADD		 	 
- stack 1: 0x604
- stack 0: 0x8D4
2759	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
2760	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x8D4
2761	 3CF	DUP1		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0x8D4
2762	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
2763	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA000AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2764	 3F2	AND		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
2765	 3F3	PUSH2	0020	 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0x20
2766	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xDAABBCCD
2767	 3F7	PUSH1	E0	 	 
- stack 4: 0x604
- stack 3: 0x8D4
- stack 2: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 1: 0xDAABBCCD
- stack 0: 0xE0
2768	 3F9	SHL		 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xDAABBCCD00000000000000000000000000000000000000000000000000000000
2769	 3FA	ADD		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
2770	 3FB	SWAP1		 	 
- stack 2: 0x604
- stack 1: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0x8D4
2771	 3FC	MSTORE		 	 
- stack 0: 0x604
2772	 3FD	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2773	 3FF	ADD		 	 
- stack 0: 0x608
2774	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2775	 401	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
2776	 402	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
- stack 0: 0xF0
2777	 404	SHR		 	 
- stack 1: 0x608
- stack 0: 0x406
2778	 405	JUMP		 	 
- stack 0: 0x608
2779	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x608
2780	 407	PUSH2	0040	 	 
- stack 1: 0x608
- stack 0: 0x40
2781	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x608
- stack 0: 0x8D0
2782	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
2783	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x8D0
2784	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x608
2785	 412	MLOAD		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
2786	 413	PUSH1	E0	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
- stack 0: 0xE0
2787	 415	SHR		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4060004
2788	 416	PUSH2	FFFF	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x4060004
- stack 0: 0xFFFF
2789	 419	AND		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4
2790	 41A	PUSH1	01	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
2791	 41C	SIGNEXTEND		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4
2792	 41D	ADD		 	 
- stack 1: 0x608
- stack 0: 0x8D4
2793	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
2794	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x8D4
2795	 424	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
2796	 425	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xE0
2797	 427	SHR		 	 
- stack 1: 0x608
- stack 0: 0xDAABBCCD
2798	 428	PUSH2	0060	 	 
- stack 2: 0x608
- stack 1: 0xDAABBCCD
- stack 0: 0x60
2799	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x608
2800	 42C	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2801	 42E	ADD		 	 
- stack 0: 0x60C
2802	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2803	 430	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E037B0000
2804	 431	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x4CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E037B0000
- stack 0: 0xF0
2805	 433	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4CE
2806	 434	JUMP		 	 
- stack 0: 0x60C
2807	 4CE	JUMPDEST		 ;; __riscvimpl_LUI_daabceb7	  ;; # instr: lui t4,0xdaabc(ignore imm)
- stack 0: 0x60C
2808	 4CF	PUSH4	daabc000	 	 
- stack 1: 0x60C
- stack 0: 0xDAABC000
2809	 4D4	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0xDAABC000
- stack 0: 0x3A0
2810	 4D7	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
2811	 4D8	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
2812	 4DA	ADD		 	 
- stack 0: 0x610
2813	 4DB	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
2814	 4DC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
2815	 4DD	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
- stack 0: 0xF0
2816	 4DF	SHR		 	 
- stack 1: 0x610
- stack 0: 0x177
2817	 4E0	JUMP		 	 
- stack 0: 0x610
2818	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x610
2819	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
2820	 179	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
2821	 17A	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
- stack 0: 0xE0
2822	 17C	SHR		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD
2823	 17D	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD
- stack 0: 0xFFFF
2824	 180	AND		 	 
- stack 1: 0x610
- stack 0: 0xFCCD
2825	 181	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFCCD
- stack 0: 0x1
2826	 183	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2827	 184	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x3A0
2828	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xDAABC000
2829	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x610
- stack 0: 0xDAABBCCD
2830	 189	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xDAABBCCD
- stack 0: 0x3A0
2831	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
2832	 18D	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
2833	 18F	ADD		 	 
- stack 0: 0x614
2834	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
2835	 191	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1B00280031A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC
2836	 192	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1B00280031A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC
- stack 0: 0xF0
2837	 194	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1B0
2838	 195	JUMP		 	 
- stack 0: 0x614
2839	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x614
2840	 1B1	PUSH2	0060	 	 
- stack 1: 0x614
- stack 0: 0x60
2841	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x614
- stack 0: 0xDAABBCCD
2842	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xFFFFFFFF
2843	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0xDAABBCCD
2844	 1BB	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0x3A0
2845	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xDAABBCCD
2846	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0xDAABBCCD
- stack 1: 0xDAABBCCD
- stack 0: 0xFFFFFFFF
2847	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xDAABBCCD
2848	 1C5	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
2849	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1CE
2850	 1C9	JUMPI		 	 
- stack 0: 0x614
2851	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x614
- stack 0: 0x1E8
2852	 1CD	JUMP		 	 
- stack 0: 0x614
2853	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x614
2854	 1E9	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
2855	 1EB	ADD		 	 
- stack 0: 0x618
2856	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
2857	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
2858	 1EE	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
- stack 0: 0xF0
2859	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x31A
2860	 1F1	JUMP		 	 
- stack 0: 0x618
2861	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x618
2862	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
2863	 31C	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
2864	 31D	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
- stack 0: 0xE0
2865	 31F	SHR		 	 
- stack 1: 0x618
- stack 0: 0x31A0001
2866	 320	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x31A0001
- stack 0: 0xFFFF
2867	 323	AND		 	 
- stack 1: 0x618
- stack 0: 0x1
2868	 324	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
2869	 326	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x1
2870	 327	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
2871	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x0
2872	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x618
- stack 0: 0x1
2873	 32C	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
2874	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
2875	 330	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
2876	 332	ADD		 	 
- stack 0: 0x61C
2877	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
2878	 334	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
2879	 335	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
- stack 0: 0xF0
2880	 337	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x448
2881	 338	JUMP		 	 
- stack 0: 0x61C
2882	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x61C
2883	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
2884	 44A	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
2885	 44B	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
- stack 0: 0xE0
2886	 44D	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x4480002
2887	 44E	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x4480002
- stack 0: 0xFFFF
2888	 451	AND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2889	 452	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x1
2890	 454	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x2
2891	 455	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
2892	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x61C
2893	 459	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
2894	 45B	ADD		 	 
- stack 0: 0x620
2895	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
2896	 45D	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
2897	 45E	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
- stack 0: 0xF0
2898	 460	SHR		 	 
- stack 1: 0x620
- stack 0: 0x462
2899	 461	JUMP		 	 
- stack 0: 0x620
2900	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x620
2901	 463	PUSH2	0080	 	 
- stack 1: 0x620
- stack 0: 0x80
2902	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x620
- stack 0: 0x1
2903	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2904	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x1
2905	 46D	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0xA0
2906	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x2
2907	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2908	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x2
2909	 477	SUB		 	 
- stack 1: 0x620
- stack 0: 0x1
2910	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x620
- stack 1: 0x1
- stack 0: 0x480
2911	 47B	JUMPI		 	 
- stack 0: 0x620
2912	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x620
2913	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
2914	 482	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
2915	 483	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
- stack 0: 0xE0
2916	 485	SHR		 	 
- stack 1: 0x620
- stack 0: 0x462FFD0
2917	 486	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x462FFD0
- stack 0: 0xFFFF
2918	 489	AND		 	 
- stack 1: 0x620
- stack 0: 0xFFD0
2919	 48A	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0xFFD0
- stack 0: 0x1
2920	 48C	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
2921	 48D	ADD		 	 
- stack 0: 0x5F0
2922	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFF
2923	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5F0
2924	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2925	 495	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x4A4AABC0095FCCD03A8000000C702D804B7000003B700040406000404CEAABC
2926	 496	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x4A4AABC0095FCCD03A8000000C702D804B7000003B700040406000404CEAABC
- stack 0: 0xF0
2927	 498	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x4A4
2928	 499	JUMP		 	 
- stack 0: 0x5F0
2929	 4A4	JUMPDEST		 ;; __riscvimpl_LUI_daabc0b7	  ;; # instr: lui ra,0xdaabc(ignore imm)
- stack 0: 0x5F0
2930	 4A5	PUSH4	daabc000	 	 
- stack 1: 0x5F0
- stack 0: 0xDAABC000
2931	 4AA	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xDAABC000
- stack 0: 0x20
2932	 4AD	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2933	 4AE	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2934	 4B0	ADD		 	 
- stack 0: 0x5F4
2935	 4B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2936	 4B2	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
2937	 4B3	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
- stack 0: 0xF0
2938	 4B5	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x95
2939	 4B6	JUMP		 	 
- stack 0: 0x5F4
2940	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x5F4
2941	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F4
- stack 0: 0x5F4
2942	 97	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
2943	 98	PUSH1	E0	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD03A8000000C702D804B7000003B700040406000404CEAABC0177FCCD
- stack 0: 0xE0
2944	 9A	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x95FCCD
2945	 9B	PUSH2	FFFF	 	 
- stack 2: 0x5F4
- stack 1: 0x95FCCD
- stack 0: 0xFFFF
2946	 9E	AND		 	 
- stack 1: 0x5F4
- stack 0: 0xFCCD
2947	 9F	PUSH1	01	 	 
- stack 2: 0x5F4
- stack 1: 0xFCCD
- stack 0: 0x1
2948	 A1	SIGNEXTEND		 	 
- stack 1: 0x5F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
2949	 A2	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x20
2950	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xDAABC000
2951	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F4
- stack 0: 0xDAABBCCD
2952	 A7	PUSH2	0020	 	 
- stack 2: 0x5F4
- stack 1: 0xDAABBCCD
- stack 0: 0x20
2953	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F4
2954	 AB	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2955	 AD	ADD		 	 
- stack 0: 0x5F8
2956	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2957	 AF	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0x3A8000000C702D804B7000003B700040406000404CEAABC0177FCCD01B00280
2958	 B0	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0x3A8000000C702D804B7000003B700040406000404CEAABC0177FCCD01B00280
- stack 0: 0xF0
2959	 B2	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0x3A8
2960	 B3	JUMP		 	 
- stack 0: 0x5F8
2961	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x5F8
2962	 3A9	DUP1		 	 
- stack 1: 0x5F8
- stack 0: 0x5F8
2963	 3AA	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0x5F8
- stack 0: 0x40
2964	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2965	 3AE	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2966	 3B0	ADD		 	 
- stack 0: 0x5FC
2967	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2968	 3B2	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
2969	 3B3	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
- stack 0: 0xF0
2970	 3B5	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xC7
2971	 3B6	JUMP		 	 
- stack 0: 0x5FC
2972	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x5FC
2973	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2974	 C9	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
2975	 CA	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D804B7000003B700040406000404CEAABC0177FCCD01B00280031A0001
- stack 0: 0xE0
2976	 CC	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0xC702D8
2977	 CD	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0xC702D8
- stack 0: 0xFFFF
2978	 D0	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2979	 D1	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x1
2980	 D3	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x2D8
2981	 D4	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x40
2982	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x5FC
- stack 1: 0x2D8
- stack 0: 0x5F8
2983	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x5FC
- stack 0: 0x8D0
2984	 D9	PUSH2	0040	 	 
- stack 2: 0x5FC
- stack 1: 0x8D0
- stack 0: 0x40
2985	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x5FC
2986	 DD	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2987	 DF	ADD		 	 
- stack 0: 0x600
2988	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2989	 E1	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
2990	 E2	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
- stack 0: 0xF0
2991	 E4	SHR		 	 
- stack 1: 0x600
- stack 0: 0x4B7
2992	 E5	JUMP		 	 
- stack 0: 0x600
2993	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x600
2994	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x600
- stack 0: 0x600
2995	 4B9	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
2996	 4BA	PUSH1	E0	 	 
- stack 2: 0x600
- stack 1: 0x4B7000003B700040406000404CEAABC0177FCCD01B00280031A000104480002
- stack 0: 0xE0
2997	 4BC	SHR		 	 
- stack 1: 0x600
- stack 0: 0x4B70000
2998	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x600
- stack 1: 0x4B70000
- stack 0: 0xFFFF
2999	 4C0	AND		 	 
- stack 1: 0x600
- stack 0: 0x0
3000	 4C1	PUSH1	01	 	 
- stack 2: 0x600
- stack 1: 0x0
- stack 0: 0x1
3001	 4C3	SIGNEXTEND		 	 
- stack 1: 0x600
- stack 0: 0x0
3002	 4C4	POP		 	 
- stack 0: 0x600
3003	 4C5	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3004	 4C7	ADD		 	 
- stack 0: 0x604
3005	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3006	 4C9	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
3007	 4CA	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
- stack 0: 0xF0
3008	 4CC	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3B7
3009	 4CD	JUMP		 	 
- stack 0: 0x604
3010	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x604
3011	 3B8	PUSH2	0040	 	 
- stack 1: 0x604
- stack 0: 0x40
3012	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x604
- stack 0: 0x8D0
3013	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x604
3014	 3BD	MLOAD		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
3015	 3BE	PUSH1	E0	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x3B700040406000404CEAABC0177FCCD01B00280031A0001044800020462FFD0
- stack 0: 0xE0
3016	 3C0	SHR		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x3B70004
3017	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x3B70004
- stack 0: 0xFFFF
3018	 3C4	AND		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x4
3019	 3C5	PUSH1	01	 	 
- stack 3: 0x604
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3020	 3C7	SIGNEXTEND		 	 
- stack 2: 0x604
- stack 1: 0x8D0
- stack 0: 0x4
3021	 3C8	ADD		 	 
- stack 1: 0x604
- stack 0: 0x8D4
3022	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3023	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x604
- stack 0: 0x8D4
3024	 3CF	DUP1		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0x8D4
3025	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
3026	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3027	 3F2	AND		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
3028	 3F3	PUSH2	0020	 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0x20
3029	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xDAABBCCD
3030	 3F7	PUSH1	E0	 	 
- stack 4: 0x604
- stack 3: 0x8D4
- stack 2: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 1: 0xDAABBCCD
- stack 0: 0xE0
3031	 3F9	SHL		 	 
- stack 3: 0x604
- stack 2: 0x8D4
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xDAABBCCD00000000000000000000000000000000000000000000000000000000
3032	 3FA	ADD		 	 
- stack 2: 0x604
- stack 1: 0x8D4
- stack 0: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
3033	 3FB	SWAP1		 	 
- stack 2: 0x604
- stack 1: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0x8D4
3034	 3FC	MSTORE		 	 
- stack 0: 0x604
3035	 3FD	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3036	 3FF	ADD		 	 
- stack 0: 0x608
3037	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3038	 401	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
3039	 402	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
- stack 0: 0xF0
3040	 404	SHR		 	 
- stack 1: 0x608
- stack 0: 0x406
3041	 405	JUMP		 	 
- stack 0: 0x608
3042	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x608
3043	 407	PUSH2	0040	 	 
- stack 1: 0x608
- stack 0: 0x40
3044	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x608
- stack 0: 0x8D0
3045	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3046	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x8D0
3047	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x608
3048	 412	MLOAD		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
3049	 413	PUSH1	E0	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x406000404CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E
- stack 0: 0xE0
3050	 415	SHR		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4060004
3051	 416	PUSH2	FFFF	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x4060004
- stack 0: 0xFFFF
3052	 419	AND		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4
3053	 41A	PUSH1	01	 	 
- stack 3: 0x608
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
3054	 41C	SIGNEXTEND		 	 
- stack 2: 0x608
- stack 1: 0x8D0
- stack 0: 0x4
3055	 41D	ADD		 	 
- stack 1: 0x608
- stack 0: 0x8D4
3056	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x608
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
3057	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x608
- stack 0: 0x8D4
3058	 424	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
3059	 425	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0xDAABBCCD0AA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A12345678
- stack 0: 0xE0
3060	 427	SHR		 	 
- stack 1: 0x608
- stack 0: 0xDAABBCCD
3061	 428	PUSH2	0060	 	 
- stack 2: 0x608
- stack 1: 0xDAABBCCD
- stack 0: 0x60
3062	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x608
3063	 42C	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3064	 42E	ADD		 	 
- stack 0: 0x60C
3065	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3066	 430	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x4CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E037B0000
3067	 431	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x4CEAABC0177FCCD01B00280031A0001044800020462FFD00196000E037B0000
- stack 0: 0xF0
3068	 433	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x4CE
3069	 434	JUMP		 	 
- stack 0: 0x60C
3070	 4CE	JUMPDEST		 ;; __riscvimpl_LUI_daabceb7	  ;; # instr: lui t4,0xdaabc(ignore imm)
- stack 0: 0x60C
3071	 4CF	PUSH4	daabc000	 	 
- stack 1: 0x60C
- stack 0: 0xDAABC000
3072	 4D4	PUSH2	03A0	 	 
- stack 2: 0x60C
- stack 1: 0xDAABC000
- stack 0: 0x3A0
3073	 4D7	MSTORE		 	  ;; # store to x29
- stack 0: 0x60C
3074	 4D8	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3075	 4DA	ADD		 	 
- stack 0: 0x610
3076	 4DB	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3077	 4DC	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
3078	 4DD	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
- stack 0: 0xF0
3079	 4DF	SHR		 	 
- stack 1: 0x610
- stack 0: 0x177
3080	 4E0	JUMP		 	 
- stack 0: 0x610
3081	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x610
3082	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x610
- stack 0: 0x610
3083	 179	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
3084	 17A	PUSH1	E0	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD01B00280031A0001044800020462FFD00196000E037B000004E1DAAC
- stack 0: 0xE0
3085	 17C	SHR		 	 
- stack 1: 0x610
- stack 0: 0x177FCCD
3086	 17D	PUSH2	FFFF	 	 
- stack 2: 0x610
- stack 1: 0x177FCCD
- stack 0: 0xFFFF
3087	 180	AND		 	 
- stack 1: 0x610
- stack 0: 0xFCCD
3088	 181	PUSH1	01	 	 
- stack 2: 0x610
- stack 1: 0xFCCD
- stack 0: 0x1
3089	 183	SIGNEXTEND		 	 
- stack 1: 0x610
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
3090	 184	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0x3A0
3091	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x610
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCCD
- stack 0: 0xDAABC000
3092	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x610
- stack 0: 0xDAABBCCD
3093	 189	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xDAABBCCD
- stack 0: 0x3A0
3094	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3095	 18D	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3096	 18F	ADD		 	 
- stack 0: 0x614
3097	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3098	 191	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x1B00280031A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC
3099	 192	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x1B00280031A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC
- stack 0: 0xF0
3100	 194	SHR		 	 
- stack 1: 0x614
- stack 0: 0x1B0
3101	 195	JUMP		 	 
- stack 0: 0x614
3102	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x614
3103	 1B1	PUSH2	0060	 	 
- stack 1: 0x614
- stack 0: 0x60
3104	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x614
- stack 0: 0xDAABBCCD
3105	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xFFFFFFFF
3106	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x614
- stack 0: 0xDAABBCCD
3107	 1BB	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0x3A0
3108	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xDAABBCCD
3109	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x614
- stack 2: 0xDAABBCCD
- stack 1: 0xDAABBCCD
- stack 0: 0xFFFFFFFF
3110	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x614
- stack 1: 0xDAABBCCD
- stack 0: 0xDAABBCCD
3111	 1C5	SUB		 	 
- stack 1: 0x614
- stack 0: 0x0
3112	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x614
- stack 1: 0x0
- stack 0: 0x1CE
3113	 1C9	JUMPI		 	 
- stack 0: 0x614
3114	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x614
- stack 0: 0x1E8
3115	 1CD	JUMP		 	 
- stack 0: 0x614
3116	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x614
3117	 1E9	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3118	 1EB	ADD		 	 
- stack 0: 0x618
3119	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3120	 1ED	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
3121	 1EE	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
- stack 0: 0xF0
3122	 1F0	SHR		 	 
- stack 1: 0x618
- stack 0: 0x31A
3123	 1F1	JUMP		 	 
- stack 0: 0x618
3124	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x618
3125	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3126	 31C	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
3127	 31D	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x31A0001044800020462FFD00196000E037B000004E1DAAC0095FBCC03A80000
- stack 0: 0xE0
3128	 31F	SHR		 	 
- stack 1: 0x618
- stack 0: 0x31A0001
3129	 320	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x31A0001
- stack 0: 0xFFFF
3130	 323	AND		 	 
- stack 1: 0x618
- stack 0: 0x1
3131	 324	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
3132	 326	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0x1
3133	 327	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x80
3134	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x618
- stack 1: 0x1
- stack 0: 0x1
3135	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x618
- stack 0: 0x2
3136	 32C	PUSH2	0080	 	 
- stack 2: 0x618
- stack 1: 0x2
- stack 0: 0x80
3137	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x618
3138	 330	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3139	 332	ADD		 	 
- stack 0: 0x61C
3140	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3141	 334	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
3142	 335	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
- stack 0: 0xF0
3143	 337	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x448
3144	 338	JUMP		 	 
- stack 0: 0x61C
3145	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x61C
3146	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x61C
- stack 0: 0x61C
3147	 44A	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
3148	 44B	PUSH1	E0	 	 
- stack 2: 0x61C
- stack 1: 0x44800020462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C
- stack 0: 0xE0
3149	 44D	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x4480002
3150	 44E	PUSH2	FFFF	 	 
- stack 2: 0x61C
- stack 1: 0x4480002
- stack 0: 0xFFFF
3151	 451	AND		 	 
- stack 1: 0x61C
- stack 0: 0x2
3152	 452	PUSH1	01	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0x1
3153	 454	SIGNEXTEND		 	 
- stack 1: 0x61C
- stack 0: 0x2
3154	 455	PUSH2	00A0	 	 
- stack 2: 0x61C
- stack 1: 0x2
- stack 0: 0xA0
3155	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x61C
3156	 459	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3157	 45B	ADD		 	 
- stack 0: 0x620
3158	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3159	 45D	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
3160	 45E	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x462FFD00196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B70000
- stack 0: 0xF0
3161	 460	SHR		 	 
- stack 1: 0x620
- stack 0: 0x462
3162	 461	JUMP		 	 
- stack 0: 0x620
3163	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x620
3164	 463	PUSH2	0080	 	 
- stack 1: 0x620
- stack 0: 0x80
3165	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x620
- stack 0: 0x2
3166	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3167	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x620
- stack 0: 0x2
3168	 46D	PUSH2	00A0	 	 
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0xA0
3169	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x2
3170	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x620
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3171	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x620
- stack 1: 0x2
- stack 0: 0x2
3172	 477	SUB		 	 
- stack 1: 0x620
- stack 0: 0x0
3173	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x480
3174	 47B	JUMPI		 	 
- stack 0: 0x620
3175	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x620
- stack 0: 0x49A
3176	 47F	JUMP		 	 
- stack 0: 0x620
3177	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x620
3178	 49B	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3179	 49D	ADD		 	 
- stack 0: 0x624
3180	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3181	 49F	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B70000
3182	 4A0	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B70000
- stack 0: 0xF0
3183	 4A2	SHR		 	 
- stack 1: 0x624
- stack 0: 0x196
3184	 4A3	JUMP		 	 
- stack 0: 0x624
3185	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x624
3186	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x624
- stack 0: 0x624
3187	 198	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B70000
3188	 199	PUSH1	E0	 	 
- stack 2: 0x624
- stack 1: 0x196000E037B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B70000
- stack 0: 0xE0
3189	 19B	SHR		 	 
- stack 1: 0x624
- stack 0: 0x196000E
3190	 19C	PUSH2	FFFF	 	 
- stack 2: 0x624
- stack 1: 0x196000E
- stack 0: 0xFFFF
3191	 19F	AND		 	 
- stack 1: 0x624
- stack 0: 0xE
3192	 1A0	PUSH1	01	 	 
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0x1
3193	 1A2	SIGNEXTEND		 	 
- stack 1: 0x624
- stack 0: 0xE
3194	 1A3	PUSH2	0380	 	 
- stack 2: 0x624
- stack 1: 0xE
- stack 0: 0x380
3195	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x624
3196	 1A7	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3197	 1A9	ADD		 	 
- stack 0: 0x628
3198	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3199	 1AB	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x37B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B70008
3200	 1AC	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x37B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B70008
- stack 0: 0xF0
3201	 1AE	SHR		 	 
- stack 1: 0x628
- stack 0: 0x37B
3202	 1AF	JUMP		 	 
- stack 0: 0x628
3203	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x628
3204	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3205	 37D	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x37B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B70008
3206	 37E	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x37B000004E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B70008
- stack 0: 0xE0
3207	 380	SHR		 	 
- stack 1: 0x628
- stack 0: 0x37B0000
3208	 381	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x37B0000
- stack 0: 0xFFFF
3209	 384	AND		 	 
- stack 1: 0x628
- stack 0: 0x0
3210	 385	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x1
3211	 387	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0x0
3212	 388	PUSH2	0080	 	 
- stack 2: 0x628
- stack 1: 0x0
- stack 0: 0x80
3213	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x628
3214	 38C	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3215	 38E	ADD		 	 
- stack 0: 0x62C
3216	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3217	 390	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x4E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B7000804060008
3218	 391	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x4E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B7000804060008
- stack 0: 0xF0
3219	 393	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x4E1
3220	 394	JUMP		 	 
- stack 0: 0x62C
3221	 4E1	JUMPDEST		 ;; __riscvimpl_LUI_ddaac0b7	  ;; # instr: lui ra,0xddaac(ignore imm)
- stack 0: 0x62C
3222	 4E2	PUSH4	ddaac000	 	 
- stack 1: 0x62C
- stack 0: 0xDDAAC000
3223	 4E7	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xDDAAC000
- stack 0: 0x20
3224	 4EA	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
3225	 4EB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3226	 4ED	ADD		 	 
- stack 0: 0x630
3227	 4EE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3228	 4EF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
3229	 4F0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
- stack 0: 0xF0
3230	 4F2	SHR		 	 
- stack 1: 0x630
- stack 0: 0x95
3231	 4F3	JUMP		 	 
- stack 0: 0x630
3232	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x630
3233	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3234	 97	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
3235	 98	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
- stack 0: 0xE0
3236	 9A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC
3237	 9B	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC
- stack 0: 0xFFFF
3238	 9E	AND		 	 
- stack 1: 0x630
- stack 0: 0xFBCC
3239	 9F	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFBCC
- stack 0: 0x1
3240	 A1	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3241	 A2	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x20
3242	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xDDAAC000
3243	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x630
- stack 0: 0xDDAABBCC
3244	 A7	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xDDAABBCC
- stack 0: 0x20
3245	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3246	 AB	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3247	 AD	ADD		 	 
- stack 0: 0x634
3248	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3249	 AF	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3A8000000C7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC
3250	 B0	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3A8000000C7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC
- stack 0: 0xF0
3251	 B2	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3A8
3252	 B3	JUMP		 	 
- stack 0: 0x634
3253	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x634
3254	 3A9	DUP1		 	 
- stack 1: 0x634
- stack 0: 0x634
3255	 3AA	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0x634
- stack 0: 0x40
3256	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3257	 3AE	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3258	 3B0	ADD		 	 
- stack 0: 0x638
3259	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3260	 3B2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
3261	 3B3	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
- stack 0: 0xF0
3262	 3B5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xC7
3263	 3B6	JUMP		 	 
- stack 0: 0x638
3264	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x638
3265	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3266	 C9	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
3267	 CA	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
- stack 0: 0xE0
3268	 CC	SHR		 	 
- stack 1: 0x638
- stack 0: 0xC7029C
3269	 CD	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xC7029C
- stack 0: 0xFFFF
3270	 D0	AND		 	 
- stack 1: 0x638
- stack 0: 0x29C
3271	 D1	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x1
3272	 D3	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x29C
3273	 D4	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x40
3274	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x634
3275	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x638
- stack 0: 0x8D0
3276	 D9	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x40
3277	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
3278	 DD	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3279	 DF	ADD		 	 
- stack 0: 0x63C
3280	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3281	 E1	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
3282	 E2	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
- stack 0: 0xF0
3283	 E4	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x4B7
3284	 E5	JUMP		 	 
- stack 0: 0x63C
3285	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3286	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3287	 4B9	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
3288	 4BA	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
- stack 0: 0xE0
3289	 4BC	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x4B70000
3290	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x4B70000
- stack 0: 0xFFFF
3291	 4C0	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3292	 4C1	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3293	 4C3	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3294	 4C4	POP		 	 
- stack 0: 0x63C
3295	 4C5	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3296	 4C7	ADD		 	 
- stack 0: 0x640
3297	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3298	 4C9	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
3299	 4CA	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
- stack 0: 0xF0
3300	 4CC	SHR		 	 
- stack 1: 0x640
- stack 0: 0x4B7
3301	 4CD	JUMP		 	 
- stack 0: 0x640
3302	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
3303	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3304	 4B9	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
3305	 4BA	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
- stack 0: 0xE0
3306	 4BC	SHR		 	 
- stack 1: 0x640
- stack 0: 0x4B70000
3307	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x4B70000
- stack 0: 0xFFFF
3308	 4C0	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3309	 4C1	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3310	 4C3	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3311	 4C4	POP		 	 
- stack 0: 0x640
3312	 4C5	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3313	 4C7	ADD		 	 
- stack 0: 0x644
3314	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3315	 4C9	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
3316	 4CA	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
- stack 0: 0xF0
3317	 4CC	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3B7
3318	 4CD	JUMP		 	 
- stack 0: 0x644
3319	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x644
3320	 3B8	PUSH2	0040	 	 
- stack 1: 0x644
- stack 0: 0x40
3321	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x644
- stack 0: 0x8D0
3322	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x644
3323	 3BD	MLOAD		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
3324	 3BE	PUSH1	E0	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
- stack 0: 0xE0
3325	 3C0	SHR		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x3B70008
3326	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x3B70008
- stack 0: 0xFFFF
3327	 3C4	AND		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x8
3328	 3C5	PUSH1	01	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
3329	 3C7	SIGNEXTEND		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x8
3330	 3C8	ADD		 	 
- stack 1: 0x644
- stack 0: 0x8D8
3331	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
3332	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x8D8
3333	 3CF	DUP1		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0x8D8
3334	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3335	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xAA00AA0A00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3336	 3F2	AND		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3337	 3F3	PUSH2	0020	 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0x20
3338	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xDDAABBCC
3339	 3F7	PUSH1	E0	 	 
- stack 4: 0x644
- stack 3: 0x8D8
- stack 2: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 1: 0xDDAABBCC
- stack 0: 0xE0
3340	 3F9	SHL		 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xDDAABBCC00000000000000000000000000000000000000000000000000000000
3341	 3FA	ADD		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3342	 3FB	SWAP1		 	 
- stack 2: 0x644
- stack 1: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0x8D8
3343	 3FC	MSTORE		 	 
- stack 0: 0x644
3344	 3FD	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3345	 3FF	ADD		 	 
- stack 0: 0x648
3346	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3347	 401	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
3348	 402	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
- stack 0: 0xF0
3349	 404	SHR		 	 
- stack 1: 0x648
- stack 0: 0x406
3350	 405	JUMP		 	 
- stack 0: 0x648
3351	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x648
3352	 407	PUSH2	0040	 	 
- stack 1: 0x648
- stack 0: 0x40
3353	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x648
- stack 0: 0x8D0
3354	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3355	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x8D0
3356	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x648
3357	 412	MLOAD		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
3358	 413	PUSH1	E0	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
- stack 0: 0xE0
3359	 415	SHR		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x4060008
3360	 416	PUSH2	FFFF	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x4060008
- stack 0: 0xFFFF
3361	 419	AND		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x8
3362	 41A	PUSH1	01	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
3363	 41C	SIGNEXTEND		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x8
3364	 41D	ADD		 	 
- stack 1: 0x648
- stack 0: 0x8D8
3365	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
3366	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x8D8
3367	 424	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3368	 425	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xE0
3369	 427	SHR		 	 
- stack 1: 0x648
- stack 0: 0xDDAABBCC
3370	 428	PUSH2	0060	 	 
- stack 2: 0x648
- stack 1: 0xDDAABBCC
- stack 0: 0x60
3371	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x648
3372	 42C	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3373	 42E	ADD		 	 
- stack 0: 0x64C
3374	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3375	 430	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F037B0000
3376	 431	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x4F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F037B0000
- stack 0: 0xF0
3377	 433	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4F4
3378	 434	JUMP		 	 
- stack 0: 0x64C
3379	 4F4	JUMPDEST		 ;; __riscvimpl_LUI_ddaaceb7	  ;; # instr: lui t4,0xddaac(ignore imm)
- stack 0: 0x64C
3380	 4F5	PUSH4	ddaac000	 	 
- stack 1: 0x64C
- stack 0: 0xDDAAC000
3381	 4FA	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xDDAAC000
- stack 0: 0x3A0
3382	 4FD	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
3383	 4FE	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3384	 500	ADD		 	 
- stack 0: 0x650
3385	 501	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3386	 502	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
3387	 503	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
- stack 0: 0xF0
3388	 505	SHR		 	 
- stack 1: 0x650
- stack 0: 0x177
3389	 506	JUMP		 	 
- stack 0: 0x650
3390	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x650
3391	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3392	 179	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
3393	 17A	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
- stack 0: 0xE0
3394	 17C	SHR		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC
3395	 17D	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC
- stack 0: 0xFFFF
3396	 180	AND		 	 
- stack 1: 0x650
- stack 0: 0xFBCC
3397	 181	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFBCC
- stack 0: 0x1
3398	 183	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3399	 184	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x3A0
3400	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xDDAAC000
3401	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x650
- stack 0: 0xDDAABBCC
3402	 189	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xDDAABBCC
- stack 0: 0x3A0
3403	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3404	 18D	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3405	 18F	ADD		 	 
- stack 0: 0x654
3406	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3407	 191	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B00240031A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC
3408	 192	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1B00240031A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC
- stack 0: 0xF0
3409	 194	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B0
3410	 195	JUMP		 	 
- stack 0: 0x654
3411	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x654
3412	 1B1	PUSH2	0060	 	 
- stack 1: 0x654
- stack 0: 0x60
3413	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x654
- stack 0: 0xDDAABBCC
3414	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xFFFFFFFF
3415	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0xDDAABBCC
3416	 1BB	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0x3A0
3417	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xDDAABBCC
3418	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0xDDAABBCC
- stack 1: 0xDDAABBCC
- stack 0: 0xFFFFFFFF
3419	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xDDAABBCC
3420	 1C5	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
3421	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x1CE
3422	 1C9	JUMPI		 	 
- stack 0: 0x654
3423	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x654
- stack 0: 0x1E8
3424	 1CD	JUMP		 	 
- stack 0: 0x654
3425	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x654
3426	 1E9	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3427	 1EB	ADD		 	 
- stack 0: 0x658
3428	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3429	 1ED	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
3430	 1EE	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
- stack 0: 0xF0
3431	 1F0	SHR		 	 
- stack 1: 0x658
- stack 0: 0x31A
3432	 1F1	JUMP		 	 
- stack 0: 0x658
3433	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x658
3434	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3435	 31C	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
3436	 31D	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
- stack 0: 0xE0
3437	 31F	SHR		 	 
- stack 1: 0x658
- stack 0: 0x31A0001
3438	 320	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x31A0001
- stack 0: 0xFFFF
3439	 323	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3440	 324	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3441	 326	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3442	 327	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3443	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x0
3444	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x1
3445	 32C	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3446	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3447	 330	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3448	 332	ADD		 	 
- stack 0: 0x65C
3449	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3450	 334	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
3451	 335	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
- stack 0: 0xF0
3452	 337	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x448
3453	 338	JUMP		 	 
- stack 0: 0x65C
3454	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3455	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3456	 44A	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
3457	 44B	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
- stack 0: 0xE0
3458	 44D	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x4480002
3459	 44E	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x4480002
- stack 0: 0xFFFF
3460	 451	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3461	 452	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3462	 454	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3463	 455	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3464	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3465	 459	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3466	 45B	ADD		 	 
- stack 0: 0x660
3467	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3468	 45D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
3469	 45E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
- stack 0: 0xF0
3470	 460	SHR		 	 
- stack 1: 0x660
- stack 0: 0x462
3471	 461	JUMP		 	 
- stack 0: 0x660
3472	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x660
3473	 463	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3474	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x1
3475	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3476	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x1
3477	 46D	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0xA0
3478	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3479	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3480	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x2
3481	 477	SUB		 	 
- stack 1: 0x660
- stack 0: 0x1
3482	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x660
- stack 1: 0x1
- stack 0: 0x480
3483	 47B	JUMPI		 	 
- stack 0: 0x660
3484	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x660
3485	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x660
- stack 0: 0x660
3486	 482	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
3487	 483	PUSH1	E0	 	 
- stack 2: 0x660
- stack 1: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
- stack 0: 0xE0
3488	 485	SHR		 	 
- stack 1: 0x660
- stack 0: 0x462FFCC
3489	 486	PUSH2	FFFF	 	 
- stack 2: 0x660
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
3490	 489	AND		 	 
- stack 1: 0x660
- stack 0: 0xFFCC
3491	 48A	PUSH1	01	 	 
- stack 2: 0x660
- stack 1: 0xFFCC
- stack 0: 0x1
3492	 48C	SIGNEXTEND		 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
3493	 48D	ADD		 	 
- stack 0: 0x62C
3494	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x62C
- stack 0: 0xFFFFFFFF
3495	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x62C
3496	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3497	 495	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0x4E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B7000804060008
3498	 496	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0x4E1DAAC0095FBCC03A8000000C7029C04B7000004B7000003B7000804060008
- stack 0: 0xF0
3499	 498	SHR		 	 
- stack 1: 0x62C
- stack 0: 0x4E1
3500	 499	JUMP		 	 
- stack 0: 0x62C
3501	 4E1	JUMPDEST		 ;; __riscvimpl_LUI_ddaac0b7	  ;; # instr: lui ra,0xddaac(ignore imm)
- stack 0: 0x62C
3502	 4E2	PUSH4	ddaac000	 	 
- stack 1: 0x62C
- stack 0: 0xDDAAC000
3503	 4E7	PUSH2	0020	 	 
- stack 2: 0x62C
- stack 1: 0xDDAAC000
- stack 0: 0x20
3504	 4EA	MSTORE		 	  ;; # store to x1
- stack 0: 0x62C
3505	 4EB	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3506	 4ED	ADD		 	 
- stack 0: 0x630
3507	 4EE	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3508	 4EF	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
3509	 4F0	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
- stack 0: 0xF0
3510	 4F2	SHR		 	 
- stack 1: 0x630
- stack 0: 0x95
3511	 4F3	JUMP		 	 
- stack 0: 0x630
3512	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x630
3513	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3514	 97	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
3515	 98	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC03A8000000C7029C04B7000004B7000003B700080406000804F4DAAC
- stack 0: 0xE0
3516	 9A	SHR		 	 
- stack 1: 0x630
- stack 0: 0x95FBCC
3517	 9B	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0x95FBCC
- stack 0: 0xFFFF
3518	 9E	AND		 	 
- stack 1: 0x630
- stack 0: 0xFBCC
3519	 9F	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFBCC
- stack 0: 0x1
3520	 A1	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3521	 A2	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x20
3522	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xDDAAC000
3523	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x630
- stack 0: 0xDDAABBCC
3524	 A7	PUSH2	0020	 	 
- stack 2: 0x630
- stack 1: 0xDDAABBCC
- stack 0: 0x20
3525	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x630
3526	 AB	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3527	 AD	ADD		 	 
- stack 0: 0x634
3528	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3529	 AF	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3A8000000C7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC
3530	 B0	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3A8000000C7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC
- stack 0: 0xF0
3531	 B2	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3A8
3532	 B3	JUMP		 	 
- stack 0: 0x634
3533	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x634
3534	 3A9	DUP1		 	 
- stack 1: 0x634
- stack 0: 0x634
3535	 3AA	PUSH2	0040	 	 
- stack 2: 0x634
- stack 1: 0x634
- stack 0: 0x40
3536	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x634
3537	 3AE	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3538	 3B0	ADD		 	 
- stack 0: 0x638
3539	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3540	 3B2	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
3541	 3B3	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
- stack 0: 0xF0
3542	 3B5	SHR		 	 
- stack 1: 0x638
- stack 0: 0xC7
3543	 3B6	JUMP		 	 
- stack 0: 0x638
3544	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x638
3545	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3546	 C9	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
3547	 CA	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0xC7029C04B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240
- stack 0: 0xE0
3548	 CC	SHR		 	 
- stack 1: 0x638
- stack 0: 0xC7029C
3549	 CD	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0xC7029C
- stack 0: 0xFFFF
3550	 D0	AND		 	 
- stack 1: 0x638
- stack 0: 0x29C
3551	 D1	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x1
3552	 D3	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x29C
3553	 D4	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x40
3554	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x638
- stack 1: 0x29C
- stack 0: 0x634
3555	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x638
- stack 0: 0x8D0
3556	 D9	PUSH2	0040	 	 
- stack 2: 0x638
- stack 1: 0x8D0
- stack 0: 0x40
3557	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x638
3558	 DD	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3559	 DF	ADD		 	 
- stack 0: 0x63C
3560	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3561	 E1	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
3562	 E2	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
- stack 0: 0xF0
3563	 E4	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x4B7
3564	 E5	JUMP		 	 
- stack 0: 0x63C
3565	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x63C
3566	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x63C
- stack 0: 0x63C
3567	 4B9	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
3568	 4BA	PUSH1	E0	 	 
- stack 2: 0x63C
- stack 1: 0x4B7000004B7000003B700080406000804F4DAAC0177FBCC01B00240031A0001
- stack 0: 0xE0
3569	 4BC	SHR		 	 
- stack 1: 0x63C
- stack 0: 0x4B70000
3570	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x63C
- stack 1: 0x4B70000
- stack 0: 0xFFFF
3571	 4C0	AND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3572	 4C1	PUSH1	01	 	 
- stack 2: 0x63C
- stack 1: 0x0
- stack 0: 0x1
3573	 4C3	SIGNEXTEND		 	 
- stack 1: 0x63C
- stack 0: 0x0
3574	 4C4	POP		 	 
- stack 0: 0x63C
3575	 4C5	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3576	 4C7	ADD		 	 
- stack 0: 0x640
3577	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3578	 4C9	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
3579	 4CA	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
- stack 0: 0xF0
3580	 4CC	SHR		 	 
- stack 1: 0x640
- stack 0: 0x4B7
3581	 4CD	JUMP		 	 
- stack 0: 0x640
3582	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x640
3583	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3584	 4B9	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
3585	 4BA	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x4B7000003B700080406000804F4DAAC0177FBCC01B00240031A000104480002
- stack 0: 0xE0
3586	 4BC	SHR		 	 
- stack 1: 0x640
- stack 0: 0x4B70000
3587	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x4B70000
- stack 0: 0xFFFF
3588	 4C0	AND		 	 
- stack 1: 0x640
- stack 0: 0x0
3589	 4C1	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x0
- stack 0: 0x1
3590	 4C3	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x0
3591	 4C4	POP		 	 
- stack 0: 0x640
3592	 4C5	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3593	 4C7	ADD		 	 
- stack 0: 0x644
3594	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3595	 4C9	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
3596	 4CA	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
- stack 0: 0xF0
3597	 4CC	SHR		 	 
- stack 1: 0x644
- stack 0: 0x3B7
3598	 4CD	JUMP		 	 
- stack 0: 0x644
3599	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x644
3600	 3B8	PUSH2	0040	 	 
- stack 1: 0x644
- stack 0: 0x40
3601	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x644
- stack 0: 0x8D0
3602	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x644
3603	 3BD	MLOAD		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
3604	 3BE	PUSH1	E0	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x3B700080406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC
- stack 0: 0xE0
3605	 3C0	SHR		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x3B70008
3606	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x3B70008
- stack 0: 0xFFFF
3607	 3C4	AND		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x8
3608	 3C5	PUSH1	01	 	 
- stack 3: 0x644
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
3609	 3C7	SIGNEXTEND		 	 
- stack 2: 0x644
- stack 1: 0x8D0
- stack 0: 0x8
3610	 3C8	ADD		 	 
- stack 1: 0x644
- stack 0: 0x8D8
3611	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
3612	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x644
- stack 0: 0x8D8
3613	 3CF	DUP1		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0x8D8
3614	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3615	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3616	 3F2	AND		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3617	 3F3	PUSH2	0020	 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0x20
3618	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xDDAABBCC
3619	 3F7	PUSH1	E0	 	 
- stack 4: 0x644
- stack 3: 0x8D8
- stack 2: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 1: 0xDDAABBCC
- stack 0: 0xE0
3620	 3F9	SHL		 	 
- stack 3: 0x644
- stack 2: 0x8D8
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xDDAABBCC00000000000000000000000000000000000000000000000000000000
3621	 3FA	ADD		 	 
- stack 2: 0x644
- stack 1: 0x8D8
- stack 0: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3622	 3FB	SWAP1		 	 
- stack 2: 0x644
- stack 1: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0x8D8
3623	 3FC	MSTORE		 	 
- stack 0: 0x644
3624	 3FD	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3625	 3FF	ADD		 	 
- stack 0: 0x648
3626	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3627	 401	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
3628	 402	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
- stack 0: 0xF0
3629	 404	SHR		 	 
- stack 1: 0x648
- stack 0: 0x406
3630	 405	JUMP		 	 
- stack 0: 0x648
3631	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x648
3632	 407	PUSH2	0040	 	 
- stack 1: 0x648
- stack 0: 0x40
3633	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x648
- stack 0: 0x8D0
3634	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3635	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x8D0
3636	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x648
3637	 412	MLOAD		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
3638	 413	PUSH1	E0	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x406000804F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F
- stack 0: 0xE0
3639	 415	SHR		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x4060008
3640	 416	PUSH2	FFFF	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x4060008
- stack 0: 0xFFFF
3641	 419	AND		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x8
3642	 41A	PUSH1	01	 	 
- stack 3: 0x648
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
3643	 41C	SIGNEXTEND		 	 
- stack 2: 0x648
- stack 1: 0x8D0
- stack 0: 0x8
3644	 41D	ADD		 	 
- stack 1: 0x648
- stack 0: 0x8D8
3645	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
3646	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x8D8
3647	 424	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
3648	 425	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0xDDAABBCCA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A1234567858213098
- stack 0: 0xE0
3649	 427	SHR		 	 
- stack 1: 0x648
- stack 0: 0xDDAABBCC
3650	 428	PUSH2	0060	 	 
- stack 2: 0x648
- stack 1: 0xDDAABBCC
- stack 0: 0x60
3651	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x648
3652	 42C	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3653	 42E	ADD		 	 
- stack 0: 0x64C
3654	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3655	 430	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x4F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F037B0000
3656	 431	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x4F4DAAC0177FBCC01B00240031A0001044800020462FFCC0196000F037B0000
- stack 0: 0xF0
3657	 433	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x4F4
3658	 434	JUMP		 	 
- stack 0: 0x64C
3659	 4F4	JUMPDEST		 ;; __riscvimpl_LUI_ddaaceb7	  ;; # instr: lui t4,0xddaac(ignore imm)
- stack 0: 0x64C
3660	 4F5	PUSH4	ddaac000	 	 
- stack 1: 0x64C
- stack 0: 0xDDAAC000
3661	 4FA	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xDDAAC000
- stack 0: 0x3A0
3662	 4FD	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
3663	 4FE	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3664	 500	ADD		 	 
- stack 0: 0x650
3665	 501	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3666	 502	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
3667	 503	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
- stack 0: 0xF0
3668	 505	SHR		 	 
- stack 1: 0x650
- stack 0: 0x177
3669	 506	JUMP		 	 
- stack 0: 0x650
3670	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x650
3671	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3672	 179	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
3673	 17A	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC01B00240031A0001044800020462FFCC0196000F037B00000507DDAB
- stack 0: 0xE0
3674	 17C	SHR		 	 
- stack 1: 0x650
- stack 0: 0x177FBCC
3675	 17D	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x177FBCC
- stack 0: 0xFFFF
3676	 180	AND		 	 
- stack 1: 0x650
- stack 0: 0xFBCC
3677	 181	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFBCC
- stack 0: 0x1
3678	 183	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
3679	 184	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0x3A0
3680	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBCC
- stack 0: 0xDDAAC000
3681	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x650
- stack 0: 0xDDAABBCC
3682	 189	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xDDAABBCC
- stack 0: 0x3A0
3683	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3684	 18D	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3685	 18F	ADD		 	 
- stack 0: 0x654
3686	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3687	 191	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x1B00240031A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC
3688	 192	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x1B00240031A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC
- stack 0: 0xF0
3689	 194	SHR		 	 
- stack 1: 0x654
- stack 0: 0x1B0
3690	 195	JUMP		 	 
- stack 0: 0x654
3691	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x654
3692	 1B1	PUSH2	0060	 	 
- stack 1: 0x654
- stack 0: 0x60
3693	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x654
- stack 0: 0xDDAABBCC
3694	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xFFFFFFFF
3695	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x654
- stack 0: 0xDDAABBCC
3696	 1BB	PUSH2	03A0	 	 
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0x3A0
3697	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xDDAABBCC
3698	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x654
- stack 2: 0xDDAABBCC
- stack 1: 0xDDAABBCC
- stack 0: 0xFFFFFFFF
3699	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x654
- stack 1: 0xDDAABBCC
- stack 0: 0xDDAABBCC
3700	 1C5	SUB		 	 
- stack 1: 0x654
- stack 0: 0x0
3701	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x654
- stack 1: 0x0
- stack 0: 0x1CE
3702	 1C9	JUMPI		 	 
- stack 0: 0x654
3703	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x654
- stack 0: 0x1E8
3704	 1CD	JUMP		 	 
- stack 0: 0x654
3705	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x654
3706	 1E9	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3707	 1EB	ADD		 	 
- stack 0: 0x658
3708	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3709	 1ED	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
3710	 1EE	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
- stack 0: 0xF0
3711	 1F0	SHR		 	 
- stack 1: 0x658
- stack 0: 0x31A
3712	 1F1	JUMP		 	 
- stack 0: 0x658
3713	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x658
3714	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x658
- stack 0: 0x658
3715	 31C	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
3716	 31D	PUSH1	E0	 	 
- stack 2: 0x658
- stack 1: 0x31A0001044800020462FFCC0196000F037B00000507DDAB0095FBBC04B70000
- stack 0: 0xE0
3717	 31F	SHR		 	 
- stack 1: 0x658
- stack 0: 0x31A0001
3718	 320	PUSH2	FFFF	 	 
- stack 2: 0x658
- stack 1: 0x31A0001
- stack 0: 0xFFFF
3719	 323	AND		 	 
- stack 1: 0x658
- stack 0: 0x1
3720	 324	PUSH1	01	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3721	 326	SIGNEXTEND		 	 
- stack 1: 0x658
- stack 0: 0x1
3722	 327	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x80
3723	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x658
- stack 1: 0x1
- stack 0: 0x1
3724	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x658
- stack 0: 0x2
3725	 32C	PUSH2	0080	 	 
- stack 2: 0x658
- stack 1: 0x2
- stack 0: 0x80
3726	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x658
3727	 330	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3728	 332	ADD		 	 
- stack 0: 0x65C
3729	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3730	 334	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
3731	 335	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
- stack 0: 0xF0
3732	 337	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x448
3733	 338	JUMP		 	 
- stack 0: 0x65C
3734	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x65C
3735	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3736	 44A	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
3737	 44B	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x44800020462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A80000
- stack 0: 0xE0
3738	 44D	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x4480002
3739	 44E	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x4480002
- stack 0: 0xFFFF
3740	 451	AND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3741	 452	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0x1
3742	 454	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x2
3743	 455	PUSH2	00A0	 	 
- stack 2: 0x65C
- stack 1: 0x2
- stack 0: 0xA0
3744	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x65C
3745	 459	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3746	 45B	ADD		 	 
- stack 0: 0x660
3747	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3748	 45D	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
3749	 45E	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x462FFCC0196000F037B00000507DDAB0095FBBC04B7000003A8000000C70258
- stack 0: 0xF0
3750	 460	SHR		 	 
- stack 1: 0x660
- stack 0: 0x462
3751	 461	JUMP		 	 
- stack 0: 0x660
3752	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x660
3753	 463	PUSH2	0080	 	 
- stack 1: 0x660
- stack 0: 0x80
3754	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x660
- stack 0: 0x2
3755	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3756	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x660
- stack 0: 0x2
3757	 46D	PUSH2	00A0	 	 
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0xA0
3758	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3759	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x660
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3760	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x660
- stack 1: 0x2
- stack 0: 0x2
3761	 477	SUB		 	 
- stack 1: 0x660
- stack 0: 0x0
3762	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x660
- stack 1: 0x0
- stack 0: 0x480
3763	 47B	JUMPI		 	 
- stack 0: 0x660
3764	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x660
- stack 0: 0x49A
3765	 47F	JUMP		 	 
- stack 0: 0x660
3766	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x660
3767	 49B	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3768	 49D	ADD		 	 
- stack 0: 0x664
3769	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3770	 49F	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x196000F037B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C
3771	 4A0	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x196000F037B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C
- stack 0: 0xF0
3772	 4A2	SHR		 	 
- stack 1: 0x664
- stack 0: 0x196
3773	 4A3	JUMP		 	 
- stack 0: 0x664
3774	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x664
3775	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3776	 198	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x196000F037B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C
3777	 199	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x196000F037B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C
- stack 0: 0xE0
3778	 19B	SHR		 	 
- stack 1: 0x664
- stack 0: 0x196000F
3779	 19C	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x196000F
- stack 0: 0xFFFF
3780	 19F	AND		 	 
- stack 1: 0x664
- stack 0: 0xF
3781	 1A0	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xF
- stack 0: 0x1
3782	 1A2	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xF
3783	 1A3	PUSH2	0380	 	 
- stack 2: 0x664
- stack 1: 0xF
- stack 0: 0x380
3784	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x664
3785	 1A7	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3786	 1A9	ADD		 	 
- stack 0: 0x668
3787	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3788	 1AB	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x37B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C
3789	 1AC	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x37B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C
- stack 0: 0xF0
3790	 1AE	SHR		 	 
- stack 1: 0x668
- stack 0: 0x37B
3791	 1AF	JUMP		 	 
- stack 0: 0x668
3792	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x668
3793	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3794	 37D	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x37B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C
3795	 37E	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x37B00000507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C
- stack 0: 0xE0
3796	 380	SHR		 	 
- stack 1: 0x668
- stack 0: 0x37B0000
3797	 381	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x37B0000
- stack 0: 0xFFFF
3798	 384	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
3799	 385	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
3800	 387	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
3801	 388	PUSH2	0080	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x80
3802	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x668
3803	 38C	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3804	 38E	ADD		 	 
- stack 0: 0x66C
3805	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3806	 390	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB
3807	 391	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB
- stack 0: 0xF0
3808	 393	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x507
3809	 394	JUMP		 	 
- stack 0: 0x66C
3810	 507	JUMPDEST		 ;; __riscvimpl_LUI_cddab0b7	  ;; # instr: lui ra,0xcddab(ignore imm)
- stack 0: 0x66C
3811	 508	PUSH4	cddab000	 	 
- stack 1: 0x66C
- stack 0: 0xCDDAB000
3812	 50D	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xCDDAB000
- stack 0: 0x20
3813	 510	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
3814	 511	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3815	 513	ADD		 	 
- stack 0: 0x670
3816	 514	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3817	 515	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
3818	 516	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
- stack 0: 0xF0
3819	 518	SHR		 	 
- stack 1: 0x670
- stack 0: 0x95
3820	 519	JUMP		 	 
- stack 0: 0x670
3821	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x670
3822	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3823	 97	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
3824	 98	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
- stack 0: 0xE0
3825	 9A	SHR		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC
3826	 9B	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC
- stack 0: 0xFFFF
3827	 9E	AND		 	 
- stack 1: 0x670
- stack 0: 0xFBBC
3828	 9F	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFBBC
- stack 0: 0x1
3829	 A1	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
3830	 A2	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x20
3831	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xCDDAB000
3832	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x670
- stack 0: 0xCDDAABBC
3833	 A7	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xCDDAABBC
- stack 0: 0x20
3834	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x670
3835	 AB	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3836	 AD	ADD		 	 
- stack 0: 0x674
3837	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3838	 AF	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
3839	 B0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
- stack 0: 0xF0
3840	 B2	SHR		 	 
- stack 1: 0x674
- stack 0: 0x4B7
3841	 B3	JUMP		 	 
- stack 0: 0x674
3842	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
3843	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
3844	 4B9	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
3845	 4BA	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
- stack 0: 0xE0
3846	 4BC	SHR		 	 
- stack 1: 0x674
- stack 0: 0x4B70000
3847	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x4B70000
- stack 0: 0xFFFF
3848	 4C0	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
3849	 4C1	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
3850	 4C3	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
3851	 4C4	POP		 	 
- stack 0: 0x674
3852	 4C5	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3853	 4C7	ADD		 	 
- stack 0: 0x678
3854	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3855	 4C9	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204031A0001
3856	 4CA	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204031A0001
- stack 0: 0xF0
3857	 4CC	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3A8
3858	 4CD	JUMP		 	 
- stack 0: 0x678
3859	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x678
3860	 3A9	DUP1		 	 
- stack 1: 0x678
- stack 0: 0x678
3861	 3AA	PUSH2	0040	 	 
- stack 2: 0x678
- stack 1: 0x678
- stack 0: 0x40
3862	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x678
3863	 3AE	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3864	 3B0	ADD		 	 
- stack 0: 0x67C
3865	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3866	 3B2	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
3867	 3B3	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
- stack 0: 0xF0
3868	 3B5	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xC7
3869	 3B6	JUMP		 	 
- stack 0: 0x67C
3870	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x67C
3871	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3872	 C9	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
3873	 CA	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
- stack 0: 0xE0
3874	 CC	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xC70258
3875	 CD	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0xC70258
- stack 0: 0xFFFF
3876	 D0	AND		 	 
- stack 1: 0x67C
- stack 0: 0x258
3877	 D1	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x1
3878	 D3	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x258
3879	 D4	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x40
3880	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x678
3881	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x67C
- stack 0: 0x8D0
3882	 D9	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x8D0
- stack 0: 0x40
3883	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
3884	 DD	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3885	 DF	ADD		 	 
- stack 0: 0x680
3886	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3887	 E1	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
3888	 E2	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
- stack 0: 0xF0
3889	 E4	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3B7
3890	 E5	JUMP		 	 
- stack 0: 0x680
3891	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x680
3892	 3B8	PUSH2	0040	 	 
- stack 1: 0x680
- stack 0: 0x40
3893	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x680
- stack 0: 0x8D0
3894	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x680
3895	 3BD	MLOAD		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
3896	 3BE	PUSH1	E0	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
- stack 0: 0xE0
3897	 3C0	SHR		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x3B7000C
3898	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0x3B7000C
- stack 0: 0xFFFF
3899	 3C4	AND		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0xC
3900	 3C5	PUSH1	01	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
3901	 3C7	SIGNEXTEND		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0xC
3902	 3C8	ADD		 	 
- stack 1: 0x680
- stack 0: 0x8DC
3903	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
3904	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x8DC
3905	 3CF	DUP1		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0x8DC
3906	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
3907	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xA00AA00A00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3908	 3F2	AND		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
3909	 3F3	PUSH2	0020	 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x20
3910	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xCDDAABBC
3911	 3F7	PUSH1	E0	 	 
- stack 4: 0x680
- stack 3: 0x8DC
- stack 2: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 1: 0xCDDAABBC
- stack 0: 0xE0
3912	 3F9	SHL		 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xCDDAABBC00000000000000000000000000000000000000000000000000000000
3913	 3FA	ADD		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
3914	 3FB	SWAP1		 	 
- stack 2: 0x680
- stack 1: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x8DC
3915	 3FC	MSTORE		 	 
- stack 0: 0x680
3916	 3FD	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
3917	 3FF	ADD		 	 
- stack 0: 0x684
3918	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
3919	 401	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
3920	 402	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
- stack 0: 0xF0
3921	 404	SHR		 	 
- stack 1: 0x684
- stack 0: 0x406
3922	 405	JUMP		 	 
- stack 0: 0x684
3923	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x684
3924	 407	PUSH2	0040	 	 
- stack 1: 0x684
- stack 0: 0x40
3925	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x684
- stack 0: 0x8D0
3926	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
3927	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x8D0
3928	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x684
3929	 412	MLOAD		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
3930	 413	PUSH1	E0	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
- stack 0: 0xE0
3931	 415	SHR		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x406000C
3932	 416	PUSH2	FFFF	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0x406000C
- stack 0: 0xFFFF
3933	 419	AND		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xC
3934	 41A	PUSH1	01	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
3935	 41C	SIGNEXTEND		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xC
3936	 41D	ADD		 	 
- stack 1: 0x684
- stack 0: 0x8DC
3937	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
3938	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x8DC
3939	 424	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
3940	 425	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xE0
3941	 427	SHR		 	 
- stack 1: 0x684
- stack 0: 0xCDDAABBC
3942	 428	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0xCDDAABBC
- stack 0: 0x60
3943	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x684
3944	 42C	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
3945	 42E	ADD		 	 
- stack 0: 0x688
3946	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
3947	 430	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x51ADDAB0177FBBC01B00204031A0001044800020462FFD001960010037B0000
3948	 431	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x51ADDAB0177FBBC01B00204031A0001044800020462FFD001960010037B0000
- stack 0: 0xF0
3949	 433	SHR		 	 
- stack 1: 0x688
- stack 0: 0x51A
3950	 434	JUMP		 	 
- stack 0: 0x688
3951	 51A	JUMPDEST		 ;; __riscvimpl_LUI_cddabeb7	  ;; # instr: lui t4,0xcddab(ignore imm)
- stack 0: 0x688
3952	 51B	PUSH4	cddab000	 	 
- stack 1: 0x688
- stack 0: 0xCDDAB000
3953	 520	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xCDDAB000
- stack 0: 0x3A0
3954	 523	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
3955	 524	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
3956	 526	ADD		 	 
- stack 0: 0x68C
3957	 527	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
3958	 528	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
3959	 529	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
- stack 0: 0xF0
3960	 52B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x177
3961	 52C	JUMP		 	 
- stack 0: 0x68C
3962	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x68C
3963	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
3964	 179	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
3965	 17A	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
- stack 0: 0xE0
3966	 17C	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC
3967	 17D	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC
- stack 0: 0xFFFF
3968	 180	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFBBC
3969	 181	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFBBC
- stack 0: 0x1
3970	 183	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
3971	 184	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x3A0
3972	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xCDDAB000
3973	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x68C
- stack 0: 0xCDDAABBC
3974	 189	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xCDDAABBC
- stack 0: 0x3A0
3975	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x68C
3976	 18D	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
3977	 18F	ADD		 	 
- stack 0: 0x690
3978	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
3979	 191	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B00204031A0001044800020462FFD001960010037B0000052DCDDB0095FABB
3980	 192	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B00204031A0001044800020462FFD001960010037B0000052DCDDB0095FABB
- stack 0: 0xF0
3981	 194	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B0
3982	 195	JUMP		 	 
- stack 0: 0x690
3983	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x690
3984	 1B1	PUSH2	0060	 	 
- stack 1: 0x690
- stack 0: 0x60
3985	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x690
- stack 0: 0xCDDAABBC
3986	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xFFFFFFFF
3987	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0xCDDAABBC
3988	 1BB	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0x3A0
3989	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xCDDAABBC
3990	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0xCDDAABBC
- stack 1: 0xCDDAABBC
- stack 0: 0xFFFFFFFF
3991	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xCDDAABBC
3992	 1C5	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
3993	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1CE
3994	 1C9	JUMPI		 	 
- stack 0: 0x690
3995	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x690
- stack 0: 0x1E8
3996	 1CD	JUMP		 	 
- stack 0: 0x690
3997	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x690
3998	 1E9	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
3999	 1EB	ADD		 	 
- stack 0: 0x694
4000	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4001	 1ED	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
4002	 1EE	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
- stack 0: 0xF0
4003	 1F0	SHR		 	 
- stack 1: 0x694
- stack 0: 0x31A
4004	 1F1	JUMP		 	 
- stack 0: 0x694
4005	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x694
4006	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4007	 31C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
4008	 31D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
- stack 0: 0xE0
4009	 31F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x31A0001
4010	 320	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x31A0001
- stack 0: 0xFFFF
4011	 323	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4012	 324	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4013	 326	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4014	 327	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4015	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x0
4016	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x1
4017	 32C	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4018	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4019	 330	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4020	 332	ADD		 	 
- stack 0: 0x698
4021	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4022	 334	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
4023	 335	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
- stack 0: 0xF0
4024	 337	SHR		 	 
- stack 1: 0x698
- stack 0: 0x448
4025	 338	JUMP		 	 
- stack 0: 0x698
4026	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4027	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4028	 44A	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
4029	 44B	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
- stack 0: 0xE0
4030	 44D	SHR		 	 
- stack 1: 0x698
- stack 0: 0x4480002
4031	 44E	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x4480002
- stack 0: 0xFFFF
4032	 451	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4033	 452	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4034	 454	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4035	 455	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4036	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4037	 459	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4038	 45B	ADD		 	 
- stack 0: 0x69C
4039	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4040	 45D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
4041	 45E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
- stack 0: 0xF0
4042	 460	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x462
4043	 461	JUMP		 	 
- stack 0: 0x69C
4044	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x69C
4045	 463	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4046	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x1
4047	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4048	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x1
4049	 46D	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0xA0
4050	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4051	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4052	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x2
4053	 477	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x1
4054	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x69C
- stack 1: 0x1
- stack 0: 0x480
4055	 47B	JUMPI		 	 
- stack 0: 0x69C
4056	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x69C
4057	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4058	 482	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
4059	 483	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
- stack 0: 0xE0
4060	 485	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x462FFD0
4061	 486	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x462FFD0
- stack 0: 0xFFFF
4062	 489	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFD0
4063	 48A	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFD0
- stack 0: 0x1
4064	 48C	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
4065	 48D	ADD		 	 
- stack 0: 0x66C
4066	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x66C
- stack 0: 0xFFFFFFFF
4067	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x66C
4068	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
4069	 495	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0x507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB
4070	 496	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0x507DDAB0095FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB
- stack 0: 0xF0
4071	 498	SHR		 	 
- stack 1: 0x66C
- stack 0: 0x507
4072	 499	JUMP		 	 
- stack 0: 0x66C
4073	 507	JUMPDEST		 ;; __riscvimpl_LUI_cddab0b7	  ;; # instr: lui ra,0xcddab(ignore imm)
- stack 0: 0x66C
4074	 508	PUSH4	cddab000	 	 
- stack 1: 0x66C
- stack 0: 0xCDDAB000
4075	 50D	PUSH2	0020	 	 
- stack 2: 0x66C
- stack 1: 0xCDDAB000
- stack 0: 0x20
4076	 510	MSTORE		 	  ;; # store to x1
- stack 0: 0x66C
4077	 511	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
4078	 513	ADD		 	 
- stack 0: 0x670
4079	 514	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
4080	 515	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
4081	 516	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
- stack 0: 0xF0
4082	 518	SHR		 	 
- stack 1: 0x670
- stack 0: 0x95
4083	 519	JUMP		 	 
- stack 0: 0x670
4084	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x670
4085	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
4086	 97	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
4087	 98	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC04B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC
- stack 0: 0xE0
4088	 9A	SHR		 	 
- stack 1: 0x670
- stack 0: 0x95FBBC
4089	 9B	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0x95FBBC
- stack 0: 0xFFFF
4090	 9E	AND		 	 
- stack 1: 0x670
- stack 0: 0xFBBC
4091	 9F	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFBBC
- stack 0: 0x1
4092	 A1	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
4093	 A2	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x20
4094	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xCDDAB000
4095	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x670
- stack 0: 0xCDDAABBC
4096	 A7	PUSH2	0020	 	 
- stack 2: 0x670
- stack 1: 0xCDDAABBC
- stack 0: 0x20
4097	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x670
4098	 AB	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
4099	 AD	ADD		 	 
- stack 0: 0x674
4100	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
4101	 AF	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
4102	 B0	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
- stack 0: 0xF0
4103	 B2	SHR		 	 
- stack 1: 0x674
- stack 0: 0x4B7
4104	 B3	JUMP		 	 
- stack 0: 0x674
4105	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x674
4106	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x674
- stack 0: 0x674
4107	 4B9	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
4108	 4BA	PUSH1	E0	 	 
- stack 2: 0x674
- stack 1: 0x4B7000003A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204
- stack 0: 0xE0
4109	 4BC	SHR		 	 
- stack 1: 0x674
- stack 0: 0x4B70000
4110	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x674
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4111	 4C0	AND		 	 
- stack 1: 0x674
- stack 0: 0x0
4112	 4C1	PUSH1	01	 	 
- stack 2: 0x674
- stack 1: 0x0
- stack 0: 0x1
4113	 4C3	SIGNEXTEND		 	 
- stack 1: 0x674
- stack 0: 0x0
4114	 4C4	POP		 	 
- stack 0: 0x674
4115	 4C5	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
4116	 4C7	ADD		 	 
- stack 0: 0x678
4117	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
4118	 4C9	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204031A0001
4119	 4CA	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3A8000000C7025803B7000C0406000C051ADDAB0177FBBC01B00204031A0001
- stack 0: 0xF0
4120	 4CC	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3A8
4121	 4CD	JUMP		 	 
- stack 0: 0x678
4122	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x678
4123	 3A9	DUP1		 	 
- stack 1: 0x678
- stack 0: 0x678
4124	 3AA	PUSH2	0040	 	 
- stack 2: 0x678
- stack 1: 0x678
- stack 0: 0x40
4125	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x678
4126	 3AE	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
4127	 3B0	ADD		 	 
- stack 0: 0x67C
4128	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
4129	 3B2	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
4130	 3B3	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
- stack 0: 0xF0
4131	 3B5	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xC7
4132	 3B6	JUMP		 	 
- stack 0: 0x67C
4133	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x67C
4134	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
4135	 C9	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
4136	 CA	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0xC7025803B7000C0406000C051ADDAB0177FBBC01B00204031A000104480002
- stack 0: 0xE0
4137	 CC	SHR		 	 
- stack 1: 0x67C
- stack 0: 0xC70258
4138	 CD	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0xC70258
- stack 0: 0xFFFF
4139	 D0	AND		 	 
- stack 1: 0x67C
- stack 0: 0x258
4140	 D1	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x1
4141	 D3	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x258
4142	 D4	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x40
4143	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x67C
- stack 1: 0x258
- stack 0: 0x678
4144	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x67C
- stack 0: 0x8D0
4145	 D9	PUSH2	0040	 	 
- stack 2: 0x67C
- stack 1: 0x8D0
- stack 0: 0x40
4146	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x67C
4147	 DD	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
4148	 DF	ADD		 	 
- stack 0: 0x680
4149	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
4150	 E1	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
4151	 E2	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
- stack 0: 0xF0
4152	 E4	SHR		 	 
- stack 1: 0x680
- stack 0: 0x3B7
4153	 E5	JUMP		 	 
- stack 0: 0x680
4154	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x680
4155	 3B8	PUSH2	0040	 	 
- stack 1: 0x680
- stack 0: 0x40
4156	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x680
- stack 0: 0x8D0
4157	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x680
4158	 3BD	MLOAD		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
4159	 3BE	PUSH1	E0	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0x3B7000C0406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD0
- stack 0: 0xE0
4160	 3C0	SHR		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0x3B7000C
4161	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0x3B7000C
- stack 0: 0xFFFF
4162	 3C4	AND		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0xC
4163	 3C5	PUSH1	01	 	 
- stack 3: 0x680
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
4164	 3C7	SIGNEXTEND		 	 
- stack 2: 0x680
- stack 1: 0x8D0
- stack 0: 0xC
4165	 3C8	ADD		 	 
- stack 1: 0x680
- stack 0: 0x8DC
4166	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
4167	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x8DC
4168	 3CF	DUP1		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0x8DC
4169	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
4170	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4171	 3F2	AND		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
4172	 3F3	PUSH2	0020	 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x20
4173	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xCDDAABBC
4174	 3F7	PUSH1	E0	 	 
- stack 4: 0x680
- stack 3: 0x8DC
- stack 2: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 1: 0xCDDAABBC
- stack 0: 0xE0
4175	 3F9	SHL		 	 
- stack 3: 0x680
- stack 2: 0x8DC
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xCDDAABBC00000000000000000000000000000000000000000000000000000000
4176	 3FA	ADD		 	 
- stack 2: 0x680
- stack 1: 0x8DC
- stack 0: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
4177	 3FB	SWAP1		 	 
- stack 2: 0x680
- stack 1: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x8DC
4178	 3FC	MSTORE		 	 
- stack 0: 0x680
4179	 3FD	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4180	 3FF	ADD		 	 
- stack 0: 0x684
4181	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4182	 401	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
4183	 402	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
- stack 0: 0xF0
4184	 404	SHR		 	 
- stack 1: 0x684
- stack 0: 0x406
4185	 405	JUMP		 	 
- stack 0: 0x684
4186	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x684
4187	 407	PUSH2	0040	 	 
- stack 1: 0x684
- stack 0: 0x40
4188	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x684
- stack 0: 0x8D0
4189	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4190	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x8D0
4191	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x684
4192	 412	MLOAD		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
4193	 413	PUSH1	E0	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0x406000C051ADDAB0177FBBC01B00204031A0001044800020462FFD001960010
- stack 0: 0xE0
4194	 415	SHR		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0x406000C
4195	 416	PUSH2	FFFF	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0x406000C
- stack 0: 0xFFFF
4196	 419	AND		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xC
4197	 41A	PUSH1	01	 	 
- stack 3: 0x684
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
4198	 41C	SIGNEXTEND		 	 
- stack 2: 0x684
- stack 1: 0x8D0
- stack 0: 0xC
4199	 41D	ADD		 	 
- stack 1: 0x684
- stack 0: 0x8DC
4200	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x684
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
4201	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x684
- stack 0: 0x8DC
4202	 424	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
4203	 425	PUSH1	E0	 	 
- stack 2: 0x684
- stack 1: 0xCDDAABBC00AA00AAAA00AA000AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xE0
4204	 427	SHR		 	 
- stack 1: 0x684
- stack 0: 0xCDDAABBC
4205	 428	PUSH2	0060	 	 
- stack 2: 0x684
- stack 1: 0xCDDAABBC
- stack 0: 0x60
4206	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x684
4207	 42C	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4208	 42E	ADD		 	 
- stack 0: 0x688
4209	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4210	 430	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x51ADDAB0177FBBC01B00204031A0001044800020462FFD001960010037B0000
4211	 431	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x51ADDAB0177FBBC01B00204031A0001044800020462FFD001960010037B0000
- stack 0: 0xF0
4212	 433	SHR		 	 
- stack 1: 0x688
- stack 0: 0x51A
4213	 434	JUMP		 	 
- stack 0: 0x688
4214	 51A	JUMPDEST		 ;; __riscvimpl_LUI_cddabeb7	  ;; # instr: lui t4,0xcddab(ignore imm)
- stack 0: 0x688
4215	 51B	PUSH4	cddab000	 	 
- stack 1: 0x688
- stack 0: 0xCDDAB000
4216	 520	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xCDDAB000
- stack 0: 0x3A0
4217	 523	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
4218	 524	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4219	 526	ADD		 	 
- stack 0: 0x68C
4220	 527	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4221	 528	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
4222	 529	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
- stack 0: 0xF0
4223	 52B	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x177
4224	 52C	JUMP		 	 
- stack 0: 0x68C
4225	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x68C
4226	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4227	 179	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
4228	 17A	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC01B00204031A0001044800020462FFD001960010037B0000052DCDDB
- stack 0: 0xE0
4229	 17C	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x177FBBC
4230	 17D	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x177FBBC
- stack 0: 0xFFFF
4231	 180	AND		 	 
- stack 1: 0x68C
- stack 0: 0xFBBC
4232	 181	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xFBBC
- stack 0: 0x1
4233	 183	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
4234	 184	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0x3A0
4235	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x68C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBBC
- stack 0: 0xCDDAB000
4236	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x68C
- stack 0: 0xCDDAABBC
4237	 189	PUSH2	03A0	 	 
- stack 2: 0x68C
- stack 1: 0xCDDAABBC
- stack 0: 0x3A0
4238	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x68C
4239	 18D	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4240	 18F	ADD		 	 
- stack 0: 0x690
4241	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4242	 191	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x1B00204031A0001044800020462FFD001960010037B0000052DCDDB0095FABB
4243	 192	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x1B00204031A0001044800020462FFD001960010037B0000052DCDDB0095FABB
- stack 0: 0xF0
4244	 194	SHR		 	 
- stack 1: 0x690
- stack 0: 0x1B0
4245	 195	JUMP		 	 
- stack 0: 0x690
4246	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x690
4247	 1B1	PUSH2	0060	 	 
- stack 1: 0x690
- stack 0: 0x60
4248	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x690
- stack 0: 0xCDDAABBC
4249	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xFFFFFFFF
4250	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0xCDDAABBC
4251	 1BB	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0x3A0
4252	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xCDDAABBC
4253	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0xCDDAABBC
- stack 1: 0xCDDAABBC
- stack 0: 0xFFFFFFFF
4254	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0xCDDAABBC
- stack 0: 0xCDDAABBC
4255	 1C5	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
4256	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x1CE
4257	 1C9	JUMPI		 	 
- stack 0: 0x690
4258	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x690
- stack 0: 0x1E8
4259	 1CD	JUMP		 	 
- stack 0: 0x690
4260	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x690
4261	 1E9	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4262	 1EB	ADD		 	 
- stack 0: 0x694
4263	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4264	 1ED	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
4265	 1EE	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
- stack 0: 0xF0
4266	 1F0	SHR		 	 
- stack 1: 0x694
- stack 0: 0x31A
4267	 1F1	JUMP		 	 
- stack 0: 0x694
4268	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x694
4269	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4270	 31C	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
4271	 31D	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x31A0001044800020462FFD001960010037B0000052DCDDB0095FABB04B70000
- stack 0: 0xE0
4272	 31F	SHR		 	 
- stack 1: 0x694
- stack 0: 0x31A0001
4273	 320	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x31A0001
- stack 0: 0xFFFF
4274	 323	AND		 	 
- stack 1: 0x694
- stack 0: 0x1
4275	 324	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4276	 326	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x1
4277	 327	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x80
4278	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x694
- stack 1: 0x1
- stack 0: 0x1
4279	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x694
- stack 0: 0x2
4280	 32C	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x2
- stack 0: 0x80
4281	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4282	 330	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4283	 332	ADD		 	 
- stack 0: 0x698
4284	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4285	 334	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
4286	 335	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
- stack 0: 0xF0
4287	 337	SHR		 	 
- stack 1: 0x698
- stack 0: 0x448
4288	 338	JUMP		 	 
- stack 0: 0x698
4289	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x698
4290	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x698
- stack 0: 0x698
4291	 44A	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
4292	 44B	PUSH1	E0	 	 
- stack 2: 0x698
- stack 1: 0x44800020462FFD001960010037B0000052DCDDB0095FABB04B7000003A80000
- stack 0: 0xE0
4293	 44D	SHR		 	 
- stack 1: 0x698
- stack 0: 0x4480002
4294	 44E	PUSH2	FFFF	 	 
- stack 2: 0x698
- stack 1: 0x4480002
- stack 0: 0xFFFF
4295	 451	AND		 	 
- stack 1: 0x698
- stack 0: 0x2
4296	 452	PUSH1	01	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0x1
4297	 454	SIGNEXTEND		 	 
- stack 1: 0x698
- stack 0: 0x2
4298	 455	PUSH2	00A0	 	 
- stack 2: 0x698
- stack 1: 0x2
- stack 0: 0xA0
4299	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x698
4300	 459	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4301	 45B	ADD		 	 
- stack 0: 0x69C
4302	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4303	 45D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
4304	 45E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x462FFD001960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C
- stack 0: 0xF0
4305	 460	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x462
4306	 461	JUMP		 	 
- stack 0: 0x69C
4307	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x69C
4308	 463	PUSH2	0080	 	 
- stack 1: 0x69C
- stack 0: 0x80
4309	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x69C
- stack 0: 0x2
4310	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4311	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x69C
- stack 0: 0x2
4312	 46D	PUSH2	00A0	 	 
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0xA0
4313	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4314	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x69C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4315	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x69C
- stack 1: 0x2
- stack 0: 0x2
4316	 477	SUB		 	 
- stack 1: 0x69C
- stack 0: 0x0
4317	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x69C
- stack 1: 0x0
- stack 0: 0x480
4318	 47B	JUMPI		 	 
- stack 0: 0x69C
4319	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x69C
- stack 0: 0x49A
4320	 47F	JUMP		 	 
- stack 0: 0x69C
4321	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x69C
4322	 49B	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4323	 49D	ADD		 	 
- stack 0: 0x6A0
4324	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4325	 49F	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C04B70000
4326	 4A0	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x1960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C04B70000
- stack 0: 0xF0
4327	 4A2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x196
4328	 4A3	JUMP		 	 
- stack 0: 0x6A0
4329	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6A0
4330	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4331	 198	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x1960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C04B70000
4332	 199	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x1960010037B0000052DCDDB0095FABB04B7000003A8000000C7021C04B70000
- stack 0: 0xE0
4333	 19B	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x1960010
4334	 19C	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x1960010
- stack 0: 0xFFFF
4335	 19F	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x10
4336	 1A0	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x10
- stack 0: 0x1
4337	 1A2	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x10
4338	 1A3	PUSH2	0380	 	 
- stack 2: 0x6A0
- stack 1: 0x10
- stack 0: 0x380
4339	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x6A0
4340	 1A7	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4341	 1A9	ADD		 	 
- stack 0: 0x6A4
4342	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4343	 1AB	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x37B0000052DCDDB0095FABB04B7000003A8000000C7021C04B7000003B70010
4344	 1AC	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x37B0000052DCDDB0095FABB04B7000003A8000000C7021C04B7000003B70010
- stack 0: 0xF0
4345	 1AE	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x37B
4346	 1AF	JUMP		 	 
- stack 0: 0x6A4
4347	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6A4
4348	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A4
- stack 0: 0x6A4
4349	 37D	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x37B0000052DCDDB0095FABB04B7000003A8000000C7021C04B7000003B70010
4350	 37E	PUSH1	E0	 	 
- stack 2: 0x6A4
- stack 1: 0x37B0000052DCDDB0095FABB04B7000003A8000000C7021C04B7000003B70010
- stack 0: 0xE0
4351	 380	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x37B0000
4352	 381	PUSH2	FFFF	 	 
- stack 2: 0x6A4
- stack 1: 0x37B0000
- stack 0: 0xFFFF
4353	 384	AND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4354	 385	PUSH1	01	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x1
4355	 387	SIGNEXTEND		 	 
- stack 1: 0x6A4
- stack 0: 0x0
4356	 388	PUSH2	0080	 	 
- stack 2: 0x6A4
- stack 1: 0x0
- stack 0: 0x80
4357	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x6A4
4358	 38C	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4359	 38E	ADD		 	 
- stack 0: 0x6A8
4360	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4361	 390	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x52DCDDB0095FABB04B7000003A8000000C7021C04B7000003B7001004060010
4362	 391	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x52DCDDB0095FABB04B7000003A8000000C7021C04B7000003B7001004060010
- stack 0: 0xF0
4363	 393	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x52D
4364	 394	JUMP		 	 
- stack 0: 0x6A8
4365	 52D	JUMPDEST		 ;; __riscvimpl_LUI_ccddb0b7	  ;; # instr: lui ra,0xccddb(ignore imm)
- stack 0: 0x6A8
4366	 52E	PUSH4	ccddb000	 	 
- stack 1: 0x6A8
- stack 0: 0xCCDDB000
4367	 533	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0xCCDDB000
- stack 0: 0x20
4368	 536	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
4369	 537	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4370	 539	ADD		 	 
- stack 0: 0x6AC
4371	 53A	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4372	 53B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
4373	 53C	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
- stack 0: 0xF0
4374	 53E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x95
4375	 53F	JUMP		 	 
- stack 0: 0x6AC
4376	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6AC
4377	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4378	 97	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
4379	 98	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
- stack 0: 0xE0
4380	 9A	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB
4381	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB
- stack 0: 0xFFFF
4382	 9E	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xFABB
4383	 9F	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xFABB
- stack 0: 0x1
4384	 A1	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4385	 A2	PUSH2	0020	 	 
- stack 2: 0x6AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x20
4386	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xCCDDB000
4387	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6AC
- stack 0: 0xCCDDAABB
4388	 A7	PUSH2	0020	 	 
- stack 2: 0x6AC
- stack 1: 0xCCDDAABB
- stack 0: 0x20
4389	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6AC
4390	 AB	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4391	 AD	ADD		 	 
- stack 0: 0x6B0
4392	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4393	 AF	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
4394	 B0	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
- stack 0: 0xF0
4395	 B2	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7
4396	 B3	JUMP		 	 
- stack 0: 0x6B0
4397	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
4398	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4399	 4B9	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
4400	 4BA	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
- stack 0: 0xE0
4401	 4BC	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4B70000
4402	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4403	 4C0	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4404	 4C1	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
4405	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4406	 4C4	POP		 	 
- stack 0: 0x6B0
4407	 4C5	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4408	 4C7	ADD		 	 
- stack 0: 0x6B4
4409	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4410	 4C9	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3A8000000C7021C04B7000003B70010040600100540CDDB0177FABB01B001C4
4411	 4CA	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3A8000000C7021C04B7000003B70010040600100540CDDB0177FABB01B001C4
- stack 0: 0xF0
4412	 4CC	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3A8
4413	 4CD	JUMP		 	 
- stack 0: 0x6B4
4414	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6B4
4415	 3A9	DUP1		 	 
- stack 1: 0x6B4
- stack 0: 0x6B4
4416	 3AA	PUSH2	0040	 	 
- stack 2: 0x6B4
- stack 1: 0x6B4
- stack 0: 0x40
4417	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B4
4418	 3AE	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4419	 3B0	ADD		 	 
- stack 0: 0x6B8
4420	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4421	 3B2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
4422	 3B3	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
- stack 0: 0xF0
4423	 3B5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xC7
4424	 3B6	JUMP		 	 
- stack 0: 0x6B8
4425	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x6B8
4426	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4427	 C9	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
4428	 CA	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
- stack 0: 0xE0
4429	 CC	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C
4430	 CD	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C
- stack 0: 0xFFFF
4431	 D0	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x21C
4432	 D1	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x1
4433	 D3	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x21C
4434	 D4	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x40
4435	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x6B4
4436	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x6B8
- stack 0: 0x8D0
4437	 D9	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x8D0
- stack 0: 0x40
4438	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
4439	 DD	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4440	 DF	ADD		 	 
- stack 0: 0x6BC
4441	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4442	 E1	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
4443	 E2	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
- stack 0: 0xF0
4444	 E4	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7
4445	 E5	JUMP		 	 
- stack 0: 0x6BC
4446	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
4447	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4448	 4B9	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
4449	 4BA	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
- stack 0: 0xE0
4450	 4BC	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x4B70000
4451	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4452	 4C0	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4453	 4C1	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
4454	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4455	 4C4	POP		 	 
- stack 0: 0x6BC
4456	 4C5	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4457	 4C7	ADD		 	 
- stack 0: 0x6C0
4458	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4459	 4C9	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
4460	 4CA	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
- stack 0: 0xF0
4461	 4CC	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3B7
4462	 4CD	JUMP		 	 
- stack 0: 0x6C0
4463	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x6C0
4464	 3B8	PUSH2	0040	 	 
- stack 1: 0x6C0
- stack 0: 0x40
4465	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C0
- stack 0: 0x8D0
4466	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x6C0
4467	 3BD	MLOAD		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
4468	 3BE	PUSH1	E0	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
- stack 0: 0xE0
4469	 3C0	SHR		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x3B70010
4470	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x3B70010
- stack 0: 0xFFFF
4471	 3C4	AND		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x10
4472	 3C5	PUSH1	01	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
4473	 3C7	SIGNEXTEND		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x10
4474	 3C8	ADD		 	 
- stack 1: 0x6C0
- stack 0: 0x8E0
4475	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
4476	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x8E0
4477	 3CF	DUP1		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0x8E0
4478	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xAA00AAAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4479	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AAAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4480	 3F2	AND		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4481	 3F3	PUSH2	0020	 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x20
4482	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xCCDDAABB
4483	 3F7	PUSH1	E0	 	 
- stack 4: 0x6C0
- stack 3: 0x8E0
- stack 2: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 1: 0xCCDDAABB
- stack 0: 0xE0
4484	 3F9	SHL		 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xCCDDAABB00000000000000000000000000000000000000000000000000000000
4485	 3FA	ADD		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4486	 3FB	SWAP1		 	 
- stack 2: 0x6C0
- stack 1: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x8E0
4487	 3FC	MSTORE		 	 
- stack 0: 0x6C0
4488	 3FD	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4489	 3FF	ADD		 	 
- stack 0: 0x6C4
4490	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4491	 401	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
4492	 402	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
- stack 0: 0xF0
4493	 404	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x406
4494	 405	JUMP		 	 
- stack 0: 0x6C4
4495	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x6C4
4496	 407	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
4497	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0x8D0
4498	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4499	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x8D0
4500	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x6C4
4501	 412	MLOAD		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
4502	 413	PUSH1	E0	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
- stack 0: 0xE0
4503	 415	SHR		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x4060010
4504	 416	PUSH2	FFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x4060010
- stack 0: 0xFFFF
4505	 419	AND		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x10
4506	 41A	PUSH1	01	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
4507	 41C	SIGNEXTEND		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x10
4508	 41D	ADD		 	 
- stack 1: 0x6C4
- stack 0: 0x8E0
4509	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
4510	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x8E0
4511	 424	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4512	 425	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xE0
4513	 427	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xCCDDAABB
4514	 428	PUSH2	0060	 	 
- stack 2: 0x6C4
- stack 1: 0xCCDDAABB
- stack 0: 0x60
4515	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C4
4516	 42C	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4517	 42E	ADD		 	 
- stack 0: 0x6C8
4518	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4519	 430	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011037B0000
4520	 431	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011037B0000
- stack 0: 0xF0
4521	 433	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x540
4522	 434	JUMP		 	 
- stack 0: 0x6C8
4523	 540	JUMPDEST		 ;; __riscvimpl_LUI_ccddbeb7	  ;; # instr: lui t4,0xccddb(ignore imm)
- stack 0: 0x6C8
4524	 541	PUSH4	ccddb000	 	 
- stack 1: 0x6C8
- stack 0: 0xCCDDB000
4525	 546	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0xCCDDB000
- stack 0: 0x3A0
4526	 549	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C8
4527	 54A	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4528	 54C	ADD		 	 
- stack 0: 0x6CC
4529	 54D	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4530	 54E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
4531	 54F	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
- stack 0: 0xF0
4532	 551	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x177
4533	 552	JUMP		 	 
- stack 0: 0x6CC
4534	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x6CC
4535	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4536	 179	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
4537	 17A	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
- stack 0: 0xE0
4538	 17C	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB
4539	 17D	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB
- stack 0: 0xFFFF
4540	 180	AND		 	 
- stack 1: 0x6CC
- stack 0: 0xFABB
4541	 181	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0xFABB
- stack 0: 0x1
4542	 183	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4543	 184	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x3A0
4544	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xCCDDB000
4545	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x6CC
- stack 0: 0xCCDDAABB
4546	 189	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xCCDDAABB
- stack 0: 0x3A0
4547	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x6CC
4548	 18D	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4549	 18F	ADD		 	 
- stack 0: 0x6D0
4550	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4551	 191	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1B001C4031A0001044800020462FFCC01960011037B00000553CCDE0095FAAB
4552	 192	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x1B001C4031A0001044800020462FFCC01960011037B00000553CCDE0095FAAB
- stack 0: 0xF0
4553	 194	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1B0
4554	 195	JUMP		 	 
- stack 0: 0x6D0
4555	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x6D0
4556	 1B1	PUSH2	0060	 	 
- stack 1: 0x6D0
- stack 0: 0x60
4557	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x6D0
- stack 0: 0xCCDDAABB
4558	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xFFFFFFFF
4559	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0xCCDDAABB
4560	 1BB	PUSH2	03A0	 	 
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0x3A0
4561	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xCCDDAABB
4562	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0xCCDDAABB
- stack 1: 0xCCDDAABB
- stack 0: 0xFFFFFFFF
4563	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xCCDDAABB
4564	 1C5	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4565	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1CE
4566	 1C9	JUMPI		 	 
- stack 0: 0x6D0
4567	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x6D0
- stack 0: 0x1E8
4568	 1CD	JUMP		 	 
- stack 0: 0x6D0
4569	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x6D0
4570	 1E9	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4571	 1EB	ADD		 	 
- stack 0: 0x6D4
4572	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4573	 1ED	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
4574	 1EE	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
- stack 0: 0xF0
4575	 1F0	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x31A
4576	 1F1	JUMP		 	 
- stack 0: 0x6D4
4577	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x6D4
4578	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4579	 31C	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
4580	 31D	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
- stack 0: 0xE0
4581	 31F	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001
4582	 320	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001
- stack 0: 0xFFFF
4583	 323	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
4584	 324	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
4585	 326	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
4586	 327	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
4587	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x0
4588	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D4
- stack 0: 0x1
4589	 32C	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
4590	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
4591	 330	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4592	 332	ADD		 	 
- stack 0: 0x6D8
4593	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4594	 334	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
4595	 335	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
- stack 0: 0xF0
4596	 337	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x448
4597	 338	JUMP		 	 
- stack 0: 0x6D8
4598	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D8
4599	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4600	 44A	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
4601	 44B	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
- stack 0: 0xE0
4602	 44D	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x4480002
4603	 44E	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x4480002
- stack 0: 0xFFFF
4604	 451	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
4605	 452	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x1
4606	 454	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
4607	 455	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
4608	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D8
4609	 459	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4610	 45B	ADD		 	 
- stack 0: 0x6DC
4611	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4612	 45D	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
4613	 45E	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
- stack 0: 0xF0
4614	 460	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x462
4615	 461	JUMP		 	 
- stack 0: 0x6DC
4616	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x6DC
4617	 463	PUSH2	0080	 	 
- stack 1: 0x6DC
- stack 0: 0x80
4618	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x6DC
- stack 0: 0x1
4619	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4620	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x1
4621	 46D	PUSH2	00A0	 	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0xA0
4622	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x2
4623	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6DC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4624	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x2
4625	 477	SUB		 	 
- stack 1: 0x6DC
- stack 0: 0x1
4626	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x6DC
- stack 1: 0x1
- stack 0: 0x480
4627	 47B	JUMPI		 	 
- stack 0: 0x6DC
4628	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x6DC
4629	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4630	 482	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
4631	 483	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
- stack 0: 0xE0
4632	 485	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x462FFCC
4633	 486	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
4634	 489	AND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFCC
4635	 48A	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0xFFCC
- stack 0: 0x1
4636	 48C	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
4637	 48D	ADD		 	 
- stack 0: 0x6A8
4638	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6A8
- stack 0: 0xFFFFFFFF
4639	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6A8
4640	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4641	 495	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0x52DCDDB0095FABB04B7000003A8000000C7021C04B7000003B7001004060010
4642	 496	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0x52DCDDB0095FABB04B7000003A8000000C7021C04B7000003B7001004060010
- stack 0: 0xF0
4643	 498	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0x52D
4644	 499	JUMP		 	 
- stack 0: 0x6A8
4645	 52D	JUMPDEST		 ;; __riscvimpl_LUI_ccddb0b7	  ;; # instr: lui ra,0xccddb(ignore imm)
- stack 0: 0x6A8
4646	 52E	PUSH4	ccddb000	 	 
- stack 1: 0x6A8
- stack 0: 0xCCDDB000
4647	 533	PUSH2	0020	 	 
- stack 2: 0x6A8
- stack 1: 0xCCDDB000
- stack 0: 0x20
4648	 536	MSTORE		 	  ;; # store to x1
- stack 0: 0x6A8
4649	 537	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4650	 539	ADD		 	 
- stack 0: 0x6AC
4651	 53A	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4652	 53B	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
4653	 53C	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
- stack 0: 0xF0
4654	 53E	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x95
4655	 53F	JUMP		 	 
- stack 0: 0x6AC
4656	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6AC
4657	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4658	 97	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
4659	 98	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB04B7000003A8000000C7021C04B7000003B70010040600100540CDDB
- stack 0: 0xE0
4660	 9A	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x95FABB
4661	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x95FABB
- stack 0: 0xFFFF
4662	 9E	AND		 	 
- stack 1: 0x6AC
- stack 0: 0xFABB
4663	 9F	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0xFABB
- stack 0: 0x1
4664	 A1	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4665	 A2	PUSH2	0020	 	 
- stack 2: 0x6AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x20
4666	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xCCDDB000
4667	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6AC
- stack 0: 0xCCDDAABB
4668	 A7	PUSH2	0020	 	 
- stack 2: 0x6AC
- stack 1: 0xCCDDAABB
- stack 0: 0x20
4669	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6AC
4670	 AB	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4671	 AD	ADD		 	 
- stack 0: 0x6B0
4672	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4673	 AF	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
4674	 B0	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
- stack 0: 0xF0
4675	 B2	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7
4676	 B3	JUMP		 	 
- stack 0: 0x6B0
4677	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6B0
4678	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B0
- stack 0: 0x6B0
4679	 4B9	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
4680	 4BA	PUSH1	E0	 	 
- stack 2: 0x6B0
- stack 1: 0x4B7000003A8000000C7021C04B7000003B70010040600100540CDDB0177FABB
- stack 0: 0xE0
4681	 4BC	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0x4B70000
4682	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6B0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4683	 4C0	AND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4684	 4C1	PUSH1	01	 	 
- stack 2: 0x6B0
- stack 1: 0x0
- stack 0: 0x1
4685	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6B0
- stack 0: 0x0
4686	 4C4	POP		 	 
- stack 0: 0x6B0
4687	 4C5	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4688	 4C7	ADD		 	 
- stack 0: 0x6B4
4689	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4690	 4C9	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3A8000000C7021C04B7000003B70010040600100540CDDB0177FABB01B001C4
4691	 4CA	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3A8000000C7021C04B7000003B70010040600100540CDDB0177FABB01B001C4
- stack 0: 0xF0
4692	 4CC	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3A8
4693	 4CD	JUMP		 	 
- stack 0: 0x6B4
4694	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6B4
4695	 3A9	DUP1		 	 
- stack 1: 0x6B4
- stack 0: 0x6B4
4696	 3AA	PUSH2	0040	 	 
- stack 2: 0x6B4
- stack 1: 0x6B4
- stack 0: 0x40
4697	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B4
4698	 3AE	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4699	 3B0	ADD		 	 
- stack 0: 0x6B8
4700	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4701	 3B2	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
4702	 3B3	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
- stack 0: 0xF0
4703	 3B5	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xC7
4704	 3B6	JUMP		 	 
- stack 0: 0x6B8
4705	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x6B8
4706	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4707	 C9	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
4708	 CA	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C04B7000003B70010040600100540CDDB0177FABB01B001C4031A0001
- stack 0: 0xE0
4709	 CC	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0xC7021C
4710	 CD	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0xC7021C
- stack 0: 0xFFFF
4711	 D0	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x21C
4712	 D1	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x1
4713	 D3	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x21C
4714	 D4	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x40
4715	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x6B8
- stack 1: 0x21C
- stack 0: 0x6B4
4716	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x6B8
- stack 0: 0x8D0
4717	 D9	PUSH2	0040	 	 
- stack 2: 0x6B8
- stack 1: 0x8D0
- stack 0: 0x40
4718	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x6B8
4719	 DD	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4720	 DF	ADD		 	 
- stack 0: 0x6BC
4721	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4722	 E1	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
4723	 E2	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
- stack 0: 0xF0
4724	 E4	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7
4725	 E5	JUMP		 	 
- stack 0: 0x6BC
4726	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6BC
4727	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4728	 4B9	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
4729	 4BA	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x4B7000003B70010040600100540CDDB0177FABB01B001C4031A000104480002
- stack 0: 0xE0
4730	 4BC	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x4B70000
4731	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4732	 4C0	AND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4733	 4C1	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x1
4734	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4735	 4C4	POP		 	 
- stack 0: 0x6BC
4736	 4C5	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4737	 4C7	ADD		 	 
- stack 0: 0x6C0
4738	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4739	 4C9	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
4740	 4CA	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
- stack 0: 0xF0
4741	 4CC	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x3B7
4742	 4CD	JUMP		 	 
- stack 0: 0x6C0
4743	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x6C0
4744	 3B8	PUSH2	0040	 	 
- stack 1: 0x6C0
- stack 0: 0x40
4745	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C0
- stack 0: 0x8D0
4746	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x6C0
4747	 3BD	MLOAD		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
4748	 3BE	PUSH1	E0	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x3B70010040600100540CDDB0177FABB01B001C4031A0001044800020462FFCC
- stack 0: 0xE0
4749	 3C0	SHR		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x3B70010
4750	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x3B70010
- stack 0: 0xFFFF
4751	 3C4	AND		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x10
4752	 3C5	PUSH1	01	 	 
- stack 3: 0x6C0
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
4753	 3C7	SIGNEXTEND		 	 
- stack 2: 0x6C0
- stack 1: 0x8D0
- stack 0: 0x10
4754	 3C8	ADD		 	 
- stack 1: 0x6C0
- stack 0: 0x8E0
4755	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
4756	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C0
- stack 0: 0x8E0
4757	 3CF	DUP1		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0x8E0
4758	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4759	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
4760	 3F2	AND		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4761	 3F3	PUSH2	0020	 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x20
4762	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xCCDDAABB
4763	 3F7	PUSH1	E0	 	 
- stack 4: 0x6C0
- stack 3: 0x8E0
- stack 2: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 1: 0xCCDDAABB
- stack 0: 0xE0
4764	 3F9	SHL		 	 
- stack 3: 0x6C0
- stack 2: 0x8E0
- stack 1: 0xAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xCCDDAABB00000000000000000000000000000000000000000000000000000000
4765	 3FA	ADD		 	 
- stack 2: 0x6C0
- stack 1: 0x8E0
- stack 0: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4766	 3FB	SWAP1		 	 
- stack 2: 0x6C0
- stack 1: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x8E0
4767	 3FC	MSTORE		 	 
- stack 0: 0x6C0
4768	 3FD	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4769	 3FF	ADD		 	 
- stack 0: 0x6C4
4770	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4771	 401	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
4772	 402	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
- stack 0: 0xF0
4773	 404	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x406
4774	 405	JUMP		 	 
- stack 0: 0x6C4
4775	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x6C4
4776	 407	PUSH2	0040	 	 
- stack 1: 0x6C4
- stack 0: 0x40
4777	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x6C4
- stack 0: 0x8D0
4778	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
4779	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x8D0
4780	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x6C4
4781	 412	MLOAD		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
4782	 413	PUSH1	E0	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x40600100540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011
- stack 0: 0xE0
4783	 415	SHR		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x4060010
4784	 416	PUSH2	FFFF	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x4060010
- stack 0: 0xFFFF
4785	 419	AND		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x10
4786	 41A	PUSH1	01	 	 
- stack 3: 0x6C4
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
4787	 41C	SIGNEXTEND		 	 
- stack 2: 0x6C4
- stack 1: 0x8D0
- stack 0: 0x10
4788	 41D	ADD		 	 
- stack 1: 0x6C4
- stack 0: 0x8E0
4789	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
4790	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6C4
- stack 0: 0x8E0
4791	 424	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
4792	 425	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0xCCDDAABBAA00AA000AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xE0
4793	 427	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0xCCDDAABB
4794	 428	PUSH2	0060	 	 
- stack 2: 0x6C4
- stack 1: 0xCCDDAABB
- stack 0: 0x60
4795	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x6C4
4796	 42C	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4797	 42E	ADD		 	 
- stack 0: 0x6C8
4798	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4799	 430	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011037B0000
4800	 431	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x540CDDB0177FABB01B001C4031A0001044800020462FFCC01960011037B0000
- stack 0: 0xF0
4801	 433	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x540
4802	 434	JUMP		 	 
- stack 0: 0x6C8
4803	 540	JUMPDEST		 ;; __riscvimpl_LUI_ccddbeb7	  ;; # instr: lui t4,0xccddb(ignore imm)
- stack 0: 0x6C8
4804	 541	PUSH4	ccddb000	 	 
- stack 1: 0x6C8
- stack 0: 0xCCDDB000
4805	 546	PUSH2	03A0	 	 
- stack 2: 0x6C8
- stack 1: 0xCCDDB000
- stack 0: 0x3A0
4806	 549	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C8
4807	 54A	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4808	 54C	ADD		 	 
- stack 0: 0x6CC
4809	 54D	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4810	 54E	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
4811	 54F	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
- stack 0: 0xF0
4812	 551	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x177
4813	 552	JUMP		 	 
- stack 0: 0x6CC
4814	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x6CC
4815	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6CC
- stack 0: 0x6CC
4816	 179	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
4817	 17A	PUSH1	E0	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB01B001C4031A0001044800020462FFCC01960011037B00000553CCDE
- stack 0: 0xE0
4818	 17C	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x177FABB
4819	 17D	PUSH2	FFFF	 	 
- stack 2: 0x6CC
- stack 1: 0x177FABB
- stack 0: 0xFFFF
4820	 180	AND		 	 
- stack 1: 0x6CC
- stack 0: 0xFABB
4821	 181	PUSH1	01	 	 
- stack 2: 0x6CC
- stack 1: 0xFABB
- stack 0: 0x1
4822	 183	SIGNEXTEND		 	 
- stack 1: 0x6CC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
4823	 184	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0x3A0
4824	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFABB
- stack 0: 0xCCDDB000
4825	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x6CC
- stack 0: 0xCCDDAABB
4826	 189	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xCCDDAABB
- stack 0: 0x3A0
4827	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x6CC
4828	 18D	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4829	 18F	ADD		 	 
- stack 0: 0x6D0
4830	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4831	 191	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x1B001C4031A0001044800020462FFCC01960011037B00000553CCDE0095FAAB
4832	 192	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x1B001C4031A0001044800020462FFCC01960011037B00000553CCDE0095FAAB
- stack 0: 0xF0
4833	 194	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x1B0
4834	 195	JUMP		 	 
- stack 0: 0x6D0
4835	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x6D0
4836	 1B1	PUSH2	0060	 	 
- stack 1: 0x6D0
- stack 0: 0x60
4837	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x6D0
- stack 0: 0xCCDDAABB
4838	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xFFFFFFFF
4839	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6D0
- stack 0: 0xCCDDAABB
4840	 1BB	PUSH2	03A0	 	 
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0x3A0
4841	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xCCDDAABB
4842	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6D0
- stack 2: 0xCCDDAABB
- stack 1: 0xCCDDAABB
- stack 0: 0xFFFFFFFF
4843	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6D0
- stack 1: 0xCCDDAABB
- stack 0: 0xCCDDAABB
4844	 1C5	SUB		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4845	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1CE
4846	 1C9	JUMPI		 	 
- stack 0: 0x6D0
4847	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x6D0
- stack 0: 0x1E8
4848	 1CD	JUMP		 	 
- stack 0: 0x6D0
4849	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x6D0
4850	 1E9	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4851	 1EB	ADD		 	 
- stack 0: 0x6D4
4852	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4853	 1ED	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
4854	 1EE	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
- stack 0: 0xF0
4855	 1F0	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x31A
4856	 1F1	JUMP		 	 
- stack 0: 0x6D4
4857	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x6D4
4858	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D4
- stack 0: 0x6D4
4859	 31C	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
4860	 31D	PUSH1	E0	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001044800020462FFCC01960011037B00000553CCDE0095FAAB04B70000
- stack 0: 0xE0
4861	 31F	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x31A0001
4862	 320	PUSH2	FFFF	 	 
- stack 2: 0x6D4
- stack 1: 0x31A0001
- stack 0: 0xFFFF
4863	 323	AND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
4864	 324	PUSH1	01	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
4865	 326	SIGNEXTEND		 	 
- stack 1: 0x6D4
- stack 0: 0x1
4866	 327	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x80
4867	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x6D4
- stack 1: 0x1
- stack 0: 0x1
4868	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x6D4
- stack 0: 0x2
4869	 32C	PUSH2	0080	 	 
- stack 2: 0x6D4
- stack 1: 0x2
- stack 0: 0x80
4870	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D4
4871	 330	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4872	 332	ADD		 	 
- stack 0: 0x6D8
4873	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4874	 334	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
4875	 335	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
- stack 0: 0xF0
4876	 337	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x448
4877	 338	JUMP		 	 
- stack 0: 0x6D8
4878	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6D8
4879	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4880	 44A	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
4881	 44B	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x44800020462FFCC01960011037B00000553CCDE0095FAAB04B7000004B70000
- stack 0: 0xE0
4882	 44D	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x4480002
4883	 44E	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x4480002
- stack 0: 0xFFFF
4884	 451	AND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
4885	 452	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0x1
4886	 454	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0x2
4887	 455	PUSH2	00A0	 	 
- stack 2: 0x6D8
- stack 1: 0x2
- stack 0: 0xA0
4888	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x6D8
4889	 459	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4890	 45B	ADD		 	 
- stack 0: 0x6DC
4891	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4892	 45D	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
4893	 45E	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x462FFCC01960011037B00000553CCDE0095FAAB04B7000004B7000003A80000
- stack 0: 0xF0
4894	 460	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x462
4895	 461	JUMP		 	 
- stack 0: 0x6DC
4896	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x6DC
4897	 463	PUSH2	0080	 	 
- stack 1: 0x6DC
- stack 0: 0x80
4898	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x6DC
- stack 0: 0x2
4899	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4900	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6DC
- stack 0: 0x2
4901	 46D	PUSH2	00A0	 	 
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0xA0
4902	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0x2
4903	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6DC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4904	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6DC
- stack 1: 0x2
- stack 0: 0x2
4905	 477	SUB		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4906	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x480
4907	 47B	JUMPI		 	 
- stack 0: 0x6DC
4908	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x6DC
- stack 0: 0x49A
4909	 47F	JUMP		 	 
- stack 0: 0x6DC
4910	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x6DC
4911	 49B	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4912	 49D	ADD		 	 
- stack 0: 0x6E0
4913	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4914	 49F	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x1960011037B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D8
4915	 4A0	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x1960011037B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D8
- stack 0: 0xF0
4916	 4A2	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x196
4917	 4A3	JUMP		 	 
- stack 0: 0x6E0
4918	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6E0
4919	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4920	 198	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x1960011037B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D8
4921	 199	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x1960011037B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D8
- stack 0: 0xE0
4922	 19B	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x1960011
4923	 19C	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x1960011
- stack 0: 0xFFFF
4924	 19F	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x11
4925	 1A0	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x11
- stack 0: 0x1
4926	 1A2	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x11
4927	 1A3	PUSH2	0380	 	 
- stack 2: 0x6E0
- stack 1: 0x11
- stack 0: 0x380
4928	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x6E0
4929	 1A7	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4930	 1A9	ADD		 	 
- stack 0: 0x6E4
4931	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4932	 1AB	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x37B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D803B70014
4933	 1AC	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0x37B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D803B70014
- stack 0: 0xF0
4934	 1AE	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x37B
4935	 1AF	JUMP		 	 
- stack 0: 0x6E4
4936	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6E4
4937	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E4
- stack 0: 0x6E4
4938	 37D	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0x37B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D803B70014
4939	 37E	PUSH1	E0	 	 
- stack 2: 0x6E4
- stack 1: 0x37B00000553CCDE0095FAAB04B7000004B7000003A8000000C701D803B70014
- stack 0: 0xE0
4940	 380	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0x37B0000
4941	 381	PUSH2	FFFF	 	 
- stack 2: 0x6E4
- stack 1: 0x37B0000
- stack 0: 0xFFFF
4942	 384	AND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4943	 385	PUSH1	01	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x1
4944	 387	SIGNEXTEND		 	 
- stack 1: 0x6E4
- stack 0: 0x0
4945	 388	PUSH2	0080	 	 
- stack 2: 0x6E4
- stack 1: 0x0
- stack 0: 0x80
4946	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x6E4
4947	 38C	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4948	 38E	ADD		 	 
- stack 0: 0x6E8
4949	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4950	 390	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x553CCDE0095FAAB04B7000004B7000003A8000000C701D803B7001404060014
4951	 391	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x553CCDE0095FAAB04B7000004B7000003A8000000C701D803B7001404060014
- stack 0: 0xF0
4952	 393	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x553
4953	 394	JUMP		 	 
- stack 0: 0x6E8
4954	 553	JUMPDEST		 ;; __riscvimpl_LUI_bccde0b7	  ;; # instr: lui ra,0xbccde(ignore imm)
- stack 0: 0x6E8
4955	 554	PUSH4	bccde000	 	 
- stack 1: 0x6E8
- stack 0: 0xBCCDE000
4956	 559	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xBCCDE000
- stack 0: 0x20
4957	 55C	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E8
4958	 55D	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4959	 55F	ADD		 	 
- stack 0: 0x6EC
4960	 560	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4961	 561	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
4962	 562	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
- stack 0: 0xF0
4963	 564	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x95
4964	 565	JUMP		 	 
- stack 0: 0x6EC
4965	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6EC
4966	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
4967	 97	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
4968	 98	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
- stack 0: 0xE0
4969	 9A	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB
4970	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB
- stack 0: 0xFFFF
4971	 9E	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xFAAB
4972	 9F	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xFAAB
- stack 0: 0x1
4973	 A1	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
4974	 A2	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x20
4975	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xBCCDE000
4976	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6EC
- stack 0: 0xBCCDDAAB
4977	 A7	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xBCCDDAAB
- stack 0: 0x20
4978	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6EC
4979	 AB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4980	 AD	ADD		 	 
- stack 0: 0x6F0
4981	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4982	 AF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
4983	 B0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
- stack 0: 0xF0
4984	 B2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7
4985	 B3	JUMP		 	 
- stack 0: 0x6F0
4986	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F0
4987	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4988	 4B9	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
4989	 4BA	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
- stack 0: 0xE0
4990	 4BC	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x4B70000
4991	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
4992	 4C0	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4993	 4C1	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x1
4994	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
4995	 4C4	POP		 	 
- stack 0: 0x6F0
4996	 4C5	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4997	 4C7	ADD		 	 
- stack 0: 0x6F4
4998	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4999	 4C9	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
5000	 4CA	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
- stack 0: 0xF0
5001	 4CC	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7
5002	 4CD	JUMP		 	 
- stack 0: 0x6F4
5003	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
5004	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5005	 4B9	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
5006	 4BA	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
- stack 0: 0xE0
5007	 4BC	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4B70000
5008	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x4B70000
- stack 0: 0xFFFF
5009	 4C0	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5010	 4C1	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
5011	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5012	 4C4	POP		 	 
- stack 0: 0x6F4
5013	 4C5	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5014	 4C7	ADD		 	 
- stack 0: 0x6F8
5015	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5016	 4C9	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x3A8000000C701D803B70014040600140566CCDE0177FAAB01B00184031A0001
5017	 4CA	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x3A8000000C701D803B70014040600140566CCDE0177FAAB01B00184031A0001
- stack 0: 0xF0
5018	 4CC	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x3A8
5019	 4CD	JUMP		 	 
- stack 0: 0x6F8
5020	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6F8
5021	 3A9	DUP1		 	 
- stack 1: 0x6F8
- stack 0: 0x6F8
5022	 3AA	PUSH2	0040	 	 
- stack 2: 0x6F8
- stack 1: 0x6F8
- stack 0: 0x40
5023	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F8
5024	 3AE	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5025	 3B0	ADD		 	 
- stack 0: 0x6FC
5026	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5027	 3B2	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
5028	 3B3	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
- stack 0: 0xF0
5029	 3B5	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xC7
5030	 3B6	JUMP		 	 
- stack 0: 0x6FC
5031	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x6FC
5032	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5033	 C9	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
5034	 CA	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
- stack 0: 0xE0
5035	 CC	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D8
5036	 CD	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D8
- stack 0: 0xFFFF
5037	 D0	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1D8
5038	 D1	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x1
5039	 D3	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1D8
5040	 D4	PUSH2	0040	 	 
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x40
5041	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x6F8
5042	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x6FC
- stack 0: 0x8D0
5043	 D9	PUSH2	0040	 	 
- stack 2: 0x6FC
- stack 1: 0x8D0
- stack 0: 0x40
5044	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x6FC
5045	 DD	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5046	 DF	ADD		 	 
- stack 0: 0x700
5047	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5048	 E1	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
5049	 E2	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
- stack 0: 0xF0
5050	 E4	SHR		 	 
- stack 1: 0x700
- stack 0: 0x3B7
5051	 E5	JUMP		 	 
- stack 0: 0x700
5052	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x700
5053	 3B8	PUSH2	0040	 	 
- stack 1: 0x700
- stack 0: 0x40
5054	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x700
- stack 0: 0x8D0
5055	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x700
5056	 3BD	MLOAD		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
5057	 3BE	PUSH1	E0	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
- stack 0: 0xE0
5058	 3C0	SHR		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x3B70014
5059	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x3B70014
- stack 0: 0xFFFF
5060	 3C4	AND		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x14
5061	 3C5	PUSH1	01	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
5062	 3C7	SIGNEXTEND		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x14
5063	 3C8	ADD		 	 
- stack 1: 0x700
- stack 0: 0x8E4
5064	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
5065	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0x8E4
5066	 3CF	DUP1		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0x8E4
5067	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xAA00AA000AA00AA0A00AA00A1234567858213098000000000000000000000000
5068	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA000AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5069	 3F2	AND		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
5070	 3F3	PUSH2	0020	 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x20
5071	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xBCCDDAAB
5072	 3F7	PUSH1	E0	 	 
- stack 4: 0x700
- stack 3: 0x8E4
- stack 2: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 1: 0xBCCDDAAB
- stack 0: 0xE0
5073	 3F9	SHL		 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xBCCDDAAB00000000000000000000000000000000000000000000000000000000
5074	 3FA	ADD		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
5075	 3FB	SWAP1		 	 
- stack 2: 0x700
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x8E4
5076	 3FC	MSTORE		 	 
- stack 0: 0x700
5077	 3FD	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5078	 3FF	ADD		 	 
- stack 0: 0x704
5079	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5080	 401	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
5081	 402	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
- stack 0: 0xF0
5082	 404	SHR		 	 
- stack 1: 0x704
- stack 0: 0x406
5083	 405	JUMP		 	 
- stack 0: 0x704
5084	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x704
5085	 407	PUSH2	0040	 	 
- stack 1: 0x704
- stack 0: 0x40
5086	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x704
- stack 0: 0x8D0
5087	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5088	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x8D0
5089	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x704
5090	 412	MLOAD		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
5091	 413	PUSH1	E0	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
- stack 0: 0xE0
5092	 415	SHR		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x4060014
5093	 416	PUSH2	FFFF	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x4060014
- stack 0: 0xFFFF
5094	 419	AND		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x14
5095	 41A	PUSH1	01	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
5096	 41C	SIGNEXTEND		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x14
5097	 41D	ADD		 	 
- stack 1: 0x704
- stack 0: 0x8E4
5098	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
5099	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x8E4
5100	 424	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
5101	 425	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xE0
5102	 427	SHR		 	 
- stack 1: 0x704
- stack 0: 0xBCCDDAAB
5103	 428	PUSH2	0060	 	 
- stack 2: 0x704
- stack 1: 0xBCCDDAAB
- stack 0: 0x60
5104	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x704
5105	 42C	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5106	 42E	ADD		 	 
- stack 0: 0x708
5107	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5108	 430	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012037B0000
5109	 431	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012037B0000
- stack 0: 0xF0
5110	 433	SHR		 	 
- stack 1: 0x708
- stack 0: 0x566
5111	 434	JUMP		 	 
- stack 0: 0x708
5112	 566	JUMPDEST		 ;; __riscvimpl_LUI_bccdeeb7	  ;; # instr: lui t4,0xbccde(ignore imm)
- stack 0: 0x708
5113	 567	PUSH4	bccde000	 	 
- stack 1: 0x708
- stack 0: 0xBCCDE000
5114	 56C	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0xBCCDE000
- stack 0: 0x3A0
5115	 56F	MSTORE		 	  ;; # store to x29
- stack 0: 0x708
5116	 570	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5117	 572	ADD		 	 
- stack 0: 0x70C
5118	 573	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5119	 574	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
5120	 575	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
- stack 0: 0xF0
5121	 577	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x177
5122	 578	JUMP		 	 
- stack 0: 0x70C
5123	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x70C
5124	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5125	 179	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
5126	 17A	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
- stack 0: 0xE0
5127	 17C	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB
5128	 17D	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB
- stack 0: 0xFFFF
5129	 180	AND		 	 
- stack 1: 0x70C
- stack 0: 0xFAAB
5130	 181	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0xFAAB
- stack 0: 0x1
5131	 183	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5132	 184	PUSH2	03A0	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x3A0
5133	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xBCCDE000
5134	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x70C
- stack 0: 0xBCCDDAAB
5135	 189	PUSH2	03A0	 	 
- stack 2: 0x70C
- stack 1: 0xBCCDDAAB
- stack 0: 0x3A0
5136	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x70C
5137	 18D	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5138	 18F	ADD		 	 
- stack 0: 0x710
5139	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5140	 191	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x1B00184031A0001044800020462FFCC01960012037B000003A8000000C701A8
5141	 192	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x1B00184031A0001044800020462FFCC01960012037B000003A8000000C701A8
- stack 0: 0xF0
5142	 194	SHR		 	 
- stack 1: 0x710
- stack 0: 0x1B0
5143	 195	JUMP		 	 
- stack 0: 0x710
5144	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x710
5145	 1B1	PUSH2	0060	 	 
- stack 1: 0x710
- stack 0: 0x60
5146	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x710
- stack 0: 0xBCCDDAAB
5147	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xFFFFFFFF
5148	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0xBCCDDAAB
5149	 1BB	PUSH2	03A0	 	 
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0x3A0
5150	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xBCCDDAAB
5151	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x710
- stack 2: 0xBCCDDAAB
- stack 1: 0xBCCDDAAB
- stack 0: 0xFFFFFFFF
5152	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xBCCDDAAB
5153	 1C5	SUB		 	 
- stack 1: 0x710
- stack 0: 0x0
5154	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1CE
5155	 1C9	JUMPI		 	 
- stack 0: 0x710
5156	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x710
- stack 0: 0x1E8
5157	 1CD	JUMP		 	 
- stack 0: 0x710
5158	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x710
5159	 1E9	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5160	 1EB	ADD		 	 
- stack 0: 0x714
5161	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5162	 1ED	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
5163	 1EE	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
- stack 0: 0xF0
5164	 1F0	SHR		 	 
- stack 1: 0x714
- stack 0: 0x31A
5165	 1F1	JUMP		 	 
- stack 0: 0x714
5166	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x714
5167	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5168	 31C	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
5169	 31D	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
- stack 0: 0xE0
5170	 31F	SHR		 	 
- stack 1: 0x714
- stack 0: 0x31A0001
5171	 320	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x31A0001
- stack 0: 0xFFFF
5172	 323	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
5173	 324	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
5174	 326	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
5175	 327	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
5176	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x0
5177	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x1
5178	 32C	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
5179	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
5180	 330	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5181	 332	ADD		 	 
- stack 0: 0x718
5182	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5183	 334	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
5184	 335	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
- stack 0: 0xF0
5185	 337	SHR		 	 
- stack 1: 0x718
- stack 0: 0x448
5186	 338	JUMP		 	 
- stack 0: 0x718
5187	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
5188	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5189	 44A	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
5190	 44B	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
- stack 0: 0xE0
5191	 44D	SHR		 	 
- stack 1: 0x718
- stack 0: 0x4480002
5192	 44E	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x4480002
- stack 0: 0xFFFF
5193	 451	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
5194	 452	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
5195	 454	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
5196	 455	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
5197	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
5198	 459	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5199	 45B	ADD		 	 
- stack 0: 0x71C
5200	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5201	 45D	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
5202	 45E	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
- stack 0: 0xF0
5203	 460	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x462
5204	 461	JUMP		 	 
- stack 0: 0x71C
5205	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x71C
5206	 463	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
5207	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x1
5208	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5209	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x1
5210	 46D	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0xA0
5211	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
5212	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5213	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x2
5214	 477	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x1
5215	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x71C
- stack 1: 0x1
- stack 0: 0x480
5216	 47B	JUMPI		 	 
- stack 0: 0x71C
5217	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x71C
5218	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5219	 482	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
5220	 483	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
- stack 0: 0xE0
5221	 485	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x462FFCC
5222	 486	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
5223	 489	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFFCC
5224	 48A	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFFCC
- stack 0: 0x1
5225	 48C	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
5226	 48D	ADD		 	 
- stack 0: 0x6E8
5227	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFF
5228	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6E8
5229	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
5230	 495	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0x553CCDE0095FAAB04B7000004B7000003A8000000C701D803B7001404060014
5231	 496	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0x553CCDE0095FAAB04B7000004B7000003A8000000C701D803B7001404060014
- stack 0: 0xF0
5232	 498	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0x553
5233	 499	JUMP		 	 
- stack 0: 0x6E8
5234	 553	JUMPDEST		 ;; __riscvimpl_LUI_bccde0b7	  ;; # instr: lui ra,0xbccde(ignore imm)
- stack 0: 0x6E8
5235	 554	PUSH4	bccde000	 	 
- stack 1: 0x6E8
- stack 0: 0xBCCDE000
5236	 559	PUSH2	0020	 	 
- stack 2: 0x6E8
- stack 1: 0xBCCDE000
- stack 0: 0x20
5237	 55C	MSTORE		 	  ;; # store to x1
- stack 0: 0x6E8
5238	 55D	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
5239	 55F	ADD		 	 
- stack 0: 0x6EC
5240	 560	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
5241	 561	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
5242	 562	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
- stack 0: 0xF0
5243	 564	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x95
5244	 565	JUMP		 	 
- stack 0: 0x6EC
5245	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x6EC
5246	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6EC
- stack 0: 0x6EC
5247	 97	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
5248	 98	PUSH1	E0	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB04B7000004B7000003A8000000C701D803B70014040600140566CCDE
- stack 0: 0xE0
5249	 9A	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0x95FAAB
5250	 9B	PUSH2	FFFF	 	 
- stack 2: 0x6EC
- stack 1: 0x95FAAB
- stack 0: 0xFFFF
5251	 9E	AND		 	 
- stack 1: 0x6EC
- stack 0: 0xFAAB
5252	 9F	PUSH1	01	 	 
- stack 2: 0x6EC
- stack 1: 0xFAAB
- stack 0: 0x1
5253	 A1	SIGNEXTEND		 	 
- stack 1: 0x6EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5254	 A2	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x20
5255	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xBCCDE000
5256	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x6EC
- stack 0: 0xBCCDDAAB
5257	 A7	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xBCCDDAAB
- stack 0: 0x20
5258	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x6EC
5259	 AB	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
5260	 AD	ADD		 	 
- stack 0: 0x6F0
5261	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
5262	 AF	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
5263	 B0	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
- stack 0: 0xF0
5264	 B2	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7
5265	 B3	JUMP		 	 
- stack 0: 0x6F0
5266	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F0
5267	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
5268	 4B9	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
5269	 4BA	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x4B7000004B7000003A8000000C701D803B70014040600140566CCDE0177FAAB
- stack 0: 0xE0
5270	 4BC	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x4B70000
5271	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
5272	 4C0	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5273	 4C1	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x0
- stack 0: 0x1
5274	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x0
5275	 4C4	POP		 	 
- stack 0: 0x6F0
5276	 4C5	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
5277	 4C7	ADD		 	 
- stack 0: 0x6F4
5278	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
5279	 4C9	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
5280	 4CA	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
- stack 0: 0xF0
5281	 4CC	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7
5282	 4CD	JUMP		 	 
- stack 0: 0x6F4
5283	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6F4
5284	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
5285	 4B9	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
5286	 4BA	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x4B7000003A8000000C701D803B70014040600140566CCDE0177FAAB01B00184
- stack 0: 0xE0
5287	 4BC	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x4B70000
5288	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x4B70000
- stack 0: 0xFFFF
5289	 4C0	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5290	 4C1	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x0
- stack 0: 0x1
5291	 4C3	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x0
5292	 4C4	POP		 	 
- stack 0: 0x6F4
5293	 4C5	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
5294	 4C7	ADD		 	 
- stack 0: 0x6F8
5295	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
5296	 4C9	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x3A8000000C701D803B70014040600140566CCDE0177FAAB01B00184031A0001
5297	 4CA	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x3A8000000C701D803B70014040600140566CCDE0177FAAB01B00184031A0001
- stack 0: 0xF0
5298	 4CC	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x3A8
5299	 4CD	JUMP		 	 
- stack 0: 0x6F8
5300	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x6F8
5301	 3A9	DUP1		 	 
- stack 1: 0x6F8
- stack 0: 0x6F8
5302	 3AA	PUSH2	0040	 	 
- stack 2: 0x6F8
- stack 1: 0x6F8
- stack 0: 0x40
5303	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x6F8
5304	 3AE	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
5305	 3B0	ADD		 	 
- stack 0: 0x6FC
5306	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
5307	 3B2	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
5308	 3B3	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
- stack 0: 0xF0
5309	 3B5	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xC7
5310	 3B6	JUMP		 	 
- stack 0: 0x6FC
5311	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x6FC
5312	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6FC
- stack 0: 0x6FC
5313	 C9	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
5314	 CA	PUSH1	E0	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D803B70014040600140566CCDE0177FAAB01B00184031A000104480002
- stack 0: 0xE0
5315	 CC	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0xC701D8
5316	 CD	PUSH2	FFFF	 	 
- stack 2: 0x6FC
- stack 1: 0xC701D8
- stack 0: 0xFFFF
5317	 D0	AND		 	 
- stack 1: 0x6FC
- stack 0: 0x1D8
5318	 D1	PUSH1	01	 	 
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x1
5319	 D3	SIGNEXTEND		 	 
- stack 1: 0x6FC
- stack 0: 0x1D8
5320	 D4	PUSH2	0040	 	 
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x40
5321	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x6FC
- stack 1: 0x1D8
- stack 0: 0x6F8
5322	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x6FC
- stack 0: 0x8D0
5323	 D9	PUSH2	0040	 	 
- stack 2: 0x6FC
- stack 1: 0x8D0
- stack 0: 0x40
5324	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x6FC
5325	 DD	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
5326	 DF	ADD		 	 
- stack 0: 0x700
5327	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
5328	 E1	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
5329	 E2	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
- stack 0: 0xF0
5330	 E4	SHR		 	 
- stack 1: 0x700
- stack 0: 0x3B7
5331	 E5	JUMP		 	 
- stack 0: 0x700
5332	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x700
5333	 3B8	PUSH2	0040	 	 
- stack 1: 0x700
- stack 0: 0x40
5334	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x700
- stack 0: 0x8D0
5335	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x700
5336	 3BD	MLOAD		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
5337	 3BE	PUSH1	E0	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x3B70014040600140566CCDE0177FAAB01B00184031A0001044800020462FFCC
- stack 0: 0xE0
5338	 3C0	SHR		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x3B70014
5339	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x3B70014
- stack 0: 0xFFFF
5340	 3C4	AND		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x14
5341	 3C5	PUSH1	01	 	 
- stack 3: 0x700
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
5342	 3C7	SIGNEXTEND		 	 
- stack 2: 0x700
- stack 1: 0x8D0
- stack 0: 0x14
5343	 3C8	ADD		 	 
- stack 1: 0x700
- stack 0: 0x8E4
5344	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
5345	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x700
- stack 0: 0x8E4
5346	 3CF	DUP1		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0x8E4
5347	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
5348	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5349	 3F2	AND		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
5350	 3F3	PUSH2	0020	 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x20
5351	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xBCCDDAAB
5352	 3F7	PUSH1	E0	 	 
- stack 4: 0x700
- stack 3: 0x8E4
- stack 2: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 1: 0xBCCDDAAB
- stack 0: 0xE0
5353	 3F9	SHL		 	 
- stack 3: 0x700
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xBCCDDAAB00000000000000000000000000000000000000000000000000000000
5354	 3FA	ADD		 	 
- stack 2: 0x700
- stack 1: 0x8E4
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
5355	 3FB	SWAP1		 	 
- stack 2: 0x700
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x8E4
5356	 3FC	MSTORE		 	 
- stack 0: 0x700
5357	 3FD	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
5358	 3FF	ADD		 	 
- stack 0: 0x704
5359	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
5360	 401	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
5361	 402	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
- stack 0: 0xF0
5362	 404	SHR		 	 
- stack 1: 0x704
- stack 0: 0x406
5363	 405	JUMP		 	 
- stack 0: 0x704
5364	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x704
5365	 407	PUSH2	0040	 	 
- stack 1: 0x704
- stack 0: 0x40
5366	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x704
- stack 0: 0x8D0
5367	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5368	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x8D0
5369	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x704
5370	 412	MLOAD		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
5371	 413	PUSH1	E0	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x40600140566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012
- stack 0: 0xE0
5372	 415	SHR		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x4060014
5373	 416	PUSH2	FFFF	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x4060014
- stack 0: 0xFFFF
5374	 419	AND		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x14
5375	 41A	PUSH1	01	 	 
- stack 3: 0x704
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
5376	 41C	SIGNEXTEND		 	 
- stack 2: 0x704
- stack 1: 0x8D0
- stack 0: 0x14
5377	 41D	ADD		 	 
- stack 1: 0x704
- stack 0: 0x8E4
5378	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x704
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
5379	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x704
- stack 0: 0x8E4
5380	 424	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
5381	 425	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xE0
5382	 427	SHR		 	 
- stack 1: 0x704
- stack 0: 0xBCCDDAAB
5383	 428	PUSH2	0060	 	 
- stack 2: 0x704
- stack 1: 0xBCCDDAAB
- stack 0: 0x60
5384	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x704
5385	 42C	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
5386	 42E	ADD		 	 
- stack 0: 0x708
5387	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
5388	 430	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012037B0000
5389	 431	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x566CCDE0177FAAB01B00184031A0001044800020462FFCC01960012037B0000
- stack 0: 0xF0
5390	 433	SHR		 	 
- stack 1: 0x708
- stack 0: 0x566
5391	 434	JUMP		 	 
- stack 0: 0x708
5392	 566	JUMPDEST		 ;; __riscvimpl_LUI_bccdeeb7	  ;; # instr: lui t4,0xbccde(ignore imm)
- stack 0: 0x708
5393	 567	PUSH4	bccde000	 	 
- stack 1: 0x708
- stack 0: 0xBCCDE000
5394	 56C	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0xBCCDE000
- stack 0: 0x3A0
5395	 56F	MSTORE		 	  ;; # store to x29
- stack 0: 0x708
5396	 570	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
5397	 572	ADD		 	 
- stack 0: 0x70C
5398	 573	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
5399	 574	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
5400	 575	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
- stack 0: 0xF0
5401	 577	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x177
5402	 578	JUMP		 	 
- stack 0: 0x70C
5403	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x70C
5404	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
5405	 179	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
5406	 17A	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB01B00184031A0001044800020462FFCC01960012037B000003A80000
- stack 0: 0xE0
5407	 17C	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x177FAAB
5408	 17D	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x177FAAB
- stack 0: 0xFFFF
5409	 180	AND		 	 
- stack 1: 0x70C
- stack 0: 0xFAAB
5410	 181	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0xFAAB
- stack 0: 0x1
5411	 183	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
5412	 184	PUSH2	03A0	 	 
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0x3A0
5413	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x70C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAAB
- stack 0: 0xBCCDE000
5414	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x70C
- stack 0: 0xBCCDDAAB
5415	 189	PUSH2	03A0	 	 
- stack 2: 0x70C
- stack 1: 0xBCCDDAAB
- stack 0: 0x3A0
5416	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x70C
5417	 18D	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
5418	 18F	ADD		 	 
- stack 0: 0x710
5419	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5420	 191	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0x1B00184031A0001044800020462FFCC01960012037B000003A8000000C701A8
5421	 192	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0x1B00184031A0001044800020462FFCC01960012037B000003A8000000C701A8
- stack 0: 0xF0
5422	 194	SHR		 	 
- stack 1: 0x710
- stack 0: 0x1B0
5423	 195	JUMP		 	 
- stack 0: 0x710
5424	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x710
5425	 1B1	PUSH2	0060	 	 
- stack 1: 0x710
- stack 0: 0x60
5426	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x710
- stack 0: 0xBCCDDAAB
5427	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xFFFFFFFF
5428	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x710
- stack 0: 0xBCCDDAAB
5429	 1BB	PUSH2	03A0	 	 
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0x3A0
5430	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xBCCDDAAB
5431	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x710
- stack 2: 0xBCCDDAAB
- stack 1: 0xBCCDDAAB
- stack 0: 0xFFFFFFFF
5432	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x710
- stack 1: 0xBCCDDAAB
- stack 0: 0xBCCDDAAB
5433	 1C5	SUB		 	 
- stack 1: 0x710
- stack 0: 0x0
5434	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x710
- stack 1: 0x0
- stack 0: 0x1CE
5435	 1C9	JUMPI		 	 
- stack 0: 0x710
5436	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x710
- stack 0: 0x1E8
5437	 1CD	JUMP		 	 
- stack 0: 0x710
5438	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x710
5439	 1E9	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5440	 1EB	ADD		 	 
- stack 0: 0x714
5441	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5442	 1ED	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
5443	 1EE	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
- stack 0: 0xF0
5444	 1F0	SHR		 	 
- stack 1: 0x714
- stack 0: 0x31A
5445	 1F1	JUMP		 	 
- stack 0: 0x714
5446	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x714
5447	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5448	 31C	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
5449	 31D	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0x31A0001044800020462FFCC01960012037B000003A8000000C701A805790112
- stack 0: 0xE0
5450	 31F	SHR		 	 
- stack 1: 0x714
- stack 0: 0x31A0001
5451	 320	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0x31A0001
- stack 0: 0xFFFF
5452	 323	AND		 	 
- stack 1: 0x714
- stack 0: 0x1
5453	 324	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
5454	 326	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0x1
5455	 327	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x80
5456	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x714
- stack 1: 0x1
- stack 0: 0x1
5457	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x714
- stack 0: 0x2
5458	 32C	PUSH2	0080	 	 
- stack 2: 0x714
- stack 1: 0x2
- stack 0: 0x80
5459	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x714
5460	 330	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5461	 332	ADD		 	 
- stack 0: 0x718
5462	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5463	 334	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
5464	 335	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
- stack 0: 0xF0
5465	 337	SHR		 	 
- stack 1: 0x718
- stack 0: 0x448
5466	 338	JUMP		 	 
- stack 0: 0x718
5467	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x718
5468	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x718
- stack 0: 0x718
5469	 44A	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
5470	 44B	PUSH1	E0	 	 
- stack 2: 0x718
- stack 1: 0x44800020462FFCC01960012037B000003A8000000C701A80579011200950233
- stack 0: 0xE0
5471	 44D	SHR		 	 
- stack 1: 0x718
- stack 0: 0x4480002
5472	 44E	PUSH2	FFFF	 	 
- stack 2: 0x718
- stack 1: 0x4480002
- stack 0: 0xFFFF
5473	 451	AND		 	 
- stack 1: 0x718
- stack 0: 0x2
5474	 452	PUSH1	01	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0x1
5475	 454	SIGNEXTEND		 	 
- stack 1: 0x718
- stack 0: 0x2
5476	 455	PUSH2	00A0	 	 
- stack 2: 0x718
- stack 1: 0x2
- stack 0: 0xA0
5477	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x718
5478	 459	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5479	 45B	ADD		 	 
- stack 0: 0x71C
5480	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5481	 45D	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
5482	 45E	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x462FFCC01960012037B000003A8000000C701A8057901120095023303B70000
- stack 0: 0xF0
5483	 460	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x462
5484	 461	JUMP		 	 
- stack 0: 0x71C
5485	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x71C
5486	 463	PUSH2	0080	 	 
- stack 1: 0x71C
- stack 0: 0x80
5487	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x71C
- stack 0: 0x2
5488	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5489	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x71C
- stack 0: 0x2
5490	 46D	PUSH2	00A0	 	 
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0xA0
5491	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
5492	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x71C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5493	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x71C
- stack 1: 0x2
- stack 0: 0x2
5494	 477	SUB		 	 
- stack 1: 0x71C
- stack 0: 0x0
5495	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x71C
- stack 1: 0x0
- stack 0: 0x480
5496	 47B	JUMPI		 	 
- stack 0: 0x71C
5497	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x71C
- stack 0: 0x49A
5498	 47F	JUMP		 	 
- stack 0: 0x71C
5499	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x71C
5500	 49B	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5501	 49D	ADD		 	 
- stack 0: 0x720
5502	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5503	 49F	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1960012037B000003A8000000C701A8057901120095023303B7000004060000
5504	 4A0	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0x1960012037B000003A8000000C701A8057901120095023303B7000004060000
- stack 0: 0xF0
5505	 4A2	SHR		 	 
- stack 1: 0x720
- stack 0: 0x196
5506	 4A3	JUMP		 	 
- stack 0: 0x720
5507	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x720
5508	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x720
- stack 0: 0x720
5509	 198	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0x1960012037B000003A8000000C701A8057901120095023303B7000004060000
5510	 199	PUSH1	E0	 	 
- stack 2: 0x720
- stack 1: 0x1960012037B000003A8000000C701A8057901120095023303B7000004060000
- stack 0: 0xE0
5511	 19B	SHR		 	 
- stack 1: 0x720
- stack 0: 0x1960012
5512	 19C	PUSH2	FFFF	 	 
- stack 2: 0x720
- stack 1: 0x1960012
- stack 0: 0xFFFF
5513	 19F	AND		 	 
- stack 1: 0x720
- stack 0: 0x12
5514	 1A0	PUSH1	01	 	 
- stack 2: 0x720
- stack 1: 0x12
- stack 0: 0x1
5515	 1A2	SIGNEXTEND		 	 
- stack 1: 0x720
- stack 0: 0x12
5516	 1A3	PUSH2	0380	 	 
- stack 2: 0x720
- stack 1: 0x12
- stack 0: 0x380
5517	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x720
5518	 1A7	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5519	 1A9	ADD		 	 
- stack 0: 0x724
5520	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5521	 1AB	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x37B000003A8000000C701A8057901120095023303B7000004060000058C0112
5522	 1AC	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x37B000003A8000000C701A8057901120095023303B7000004060000058C0112
- stack 0: 0xF0
5523	 1AE	SHR		 	 
- stack 1: 0x724
- stack 0: 0x37B
5524	 1AF	JUMP		 	 
- stack 0: 0x724
5525	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x724
5526	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5527	 37D	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x37B000003A8000000C701A8057901120095023303B7000004060000058C0112
5528	 37E	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x37B000003A8000000C701A8057901120095023303B7000004060000058C0112
- stack 0: 0xE0
5529	 380	SHR		 	 
- stack 1: 0x724
- stack 0: 0x37B0000
5530	 381	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x37B0000
- stack 0: 0xFFFF
5531	 384	AND		 	 
- stack 1: 0x724
- stack 0: 0x0
5532	 385	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0x1
5533	 387	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x0
5534	 388	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x0
- stack 0: 0x80
5535	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
5536	 38C	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5537	 38E	ADD		 	 
- stack 0: 0x728
5538	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5539	 390	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3A8000000C701A8057901120095023303B7000004060000058C011201770233
5540	 391	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x3A8000000C701A8057901120095023303B7000004060000058C011201770233
- stack 0: 0xF0
5541	 393	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3A8
5542	 394	JUMP		 	 
- stack 0: 0x728
5543	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x728
5544	 3A9	DUP1		 	 
- stack 1: 0x728
- stack 0: 0x728
5545	 3AA	PUSH2	0040	 	 
- stack 2: 0x728
- stack 1: 0x728
- stack 0: 0x40
5546	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x728
5547	 3AE	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5548	 3B0	ADD		 	 
- stack 0: 0x72C
5549	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5550	 3B2	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
5551	 3B3	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
- stack 0: 0xF0
5552	 3B5	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xC7
5553	 3B6	JUMP		 	 
- stack 0: 0x72C
5554	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x72C
5555	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5556	 C9	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
5557	 CA	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
- stack 0: 0xE0
5558	 CC	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8
5559	 CD	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8
- stack 0: 0xFFFF
5560	 D0	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1A8
5561	 D1	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x1
5562	 D3	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1A8
5563	 D4	PUSH2	0040	 	 
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x40
5564	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x728
5565	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x72C
- stack 0: 0x8D0
5566	 D9	PUSH2	0040	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x40
5567	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x72C
5568	 DD	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5569	 DF	ADD		 	 
- stack 0: 0x730
5570	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5571	 E1	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x57901120095023303B7000004060000058C01120177023301B0014C031A0001
5572	 E2	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x57901120095023303B7000004060000058C01120177023301B0014C031A0001
- stack 0: 0xF0
5573	 E4	SHR		 	 
- stack 1: 0x730
- stack 0: 0x579
5574	 E5	JUMP		 	 
- stack 0: 0x730
5575	 579	JUMPDEST		 ;; __riscvimpl_LUI_1120b7	  ;; # instr: lui ra,0x112(ignore imm)
- stack 0: 0x730
5576	 57A	PUSH4	00112000	 	 
- stack 1: 0x730
- stack 0: 0x112000
5577	 57F	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0x112000
- stack 0: 0x20
5578	 582	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
5579	 583	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5580	 585	ADD		 	 
- stack 0: 0x734
5581	 586	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5582	 587	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
5583	 588	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
- stack 0: 0xF0
5584	 58A	SHR		 	 
- stack 1: 0x734
- stack 0: 0x95
5585	 58B	JUMP		 	 
- stack 0: 0x734
5586	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x734
5587	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5588	 97	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
5589	 98	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
- stack 0: 0xE0
5590	 9A	SHR		 	 
- stack 1: 0x734
- stack 0: 0x950233
5591	 9B	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x950233
- stack 0: 0xFFFF
5592	 9E	AND		 	 
- stack 1: 0x734
- stack 0: 0x233
5593	 9F	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x1
5594	 A1	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x233
5595	 A2	PUSH2	0020	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x20
5596	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x112000
5597	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x734
- stack 0: 0x112233
5598	 A7	PUSH2	0020	 	 
- stack 2: 0x734
- stack 1: 0x112233
- stack 0: 0x20
5599	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x734
5600	 AB	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5601	 AD	ADD		 	 
- stack 0: 0x738
5602	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5603	 AF	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
5604	 B0	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
- stack 0: 0xF0
5605	 B2	SHR		 	 
- stack 1: 0x738
- stack 0: 0x3B7
5606	 B3	JUMP		 	 
- stack 0: 0x738
5607	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x738
5608	 3B8	PUSH2	0040	 	 
- stack 1: 0x738
- stack 0: 0x40
5609	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x738
- stack 0: 0x8D0
5610	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x738
5611	 3BD	MLOAD		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
5612	 3BE	PUSH1	E0	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
- stack 0: 0xE0
5613	 3C0	SHR		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x3B70000
5614	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x3B70000
- stack 0: 0xFFFF
5615	 3C4	AND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x0
5616	 3C5	PUSH1	01	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5617	 3C7	SIGNEXTEND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x0
5618	 3C8	ADD		 	 
- stack 1: 0x738
- stack 0: 0x8D0
5619	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5620	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x8D0
5621	 3CF	DUP1		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x8D0
5622	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0xAABBCCDDDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5623	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xAABBCCDDDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5624	 3F2	AND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5625	 3F3	PUSH2	0020	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x20
5626	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x112233
5627	 3F7	PUSH1	E0	 	 
- stack 4: 0x738
- stack 3: 0x8D0
- stack 2: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 1: 0x112233
- stack 0: 0xE0
5628	 3F9	SHL		 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x11223300000000000000000000000000000000000000000000000000000000
5629	 3FA	ADD		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5630	 3FB	SWAP1		 	 
- stack 2: 0x738
- stack 1: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x8D0
5631	 3FC	MSTORE		 	 
- stack 0: 0x738
5632	 3FD	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5633	 3FF	ADD		 	 
- stack 0: 0x73C
5634	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5635	 401	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
5636	 402	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
- stack 0: 0xF0
5637	 404	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x406
5638	 405	JUMP		 	 
- stack 0: 0x73C
5639	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x73C
5640	 407	PUSH2	0040	 	 
- stack 1: 0x73C
- stack 0: 0x40
5641	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x73C
- stack 0: 0x8D0
5642	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5643	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x8D0
5644	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x73C
5645	 412	MLOAD		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
5646	 413	PUSH1	E0	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
- stack 0: 0xE0
5647	 415	SHR		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x4060000
5648	 416	PUSH2	FFFF	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x4060000
- stack 0: 0xFFFF
5649	 419	AND		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x0
5650	 41A	PUSH1	01	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5651	 41C	SIGNEXTEND		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x0
5652	 41D	ADD		 	 
- stack 1: 0x73C
- stack 0: 0x8D0
5653	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5654	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x8D0
5655	 424	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5656	 425	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0xE0
5657	 427	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x112233
5658	 428	PUSH2	0060	 	 
- stack 2: 0x73C
- stack 1: 0x112233
- stack 0: 0x60
5659	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x73C
5660	 42C	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5661	 42E	ADD		 	 
- stack 0: 0x740
5662	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5663	 430	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x58C01120177023301B0014C031A0001044800020462FFD401960013037B0000
5664	 431	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x58C01120177023301B0014C031A0001044800020462FFD401960013037B0000
- stack 0: 0xF0
5665	 433	SHR		 	 
- stack 1: 0x740
- stack 0: 0x58C
5666	 434	JUMP		 	 
- stack 0: 0x740
5667	 58C	JUMPDEST		 ;; __riscvimpl_LUI_112eb7	  ;; # instr: lui t4,0x112(ignore imm)
- stack 0: 0x740
5668	 58D	PUSH4	00112000	 	 
- stack 1: 0x740
- stack 0: 0x112000
5669	 592	PUSH2	03A0	 	 
- stack 2: 0x740
- stack 1: 0x112000
- stack 0: 0x3A0
5670	 595	MSTORE		 	  ;; # store to x29
- stack 0: 0x740
5671	 596	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5672	 598	ADD		 	 
- stack 0: 0x744
5673	 599	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5674	 59A	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
5675	 59B	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
- stack 0: 0xF0
5676	 59D	SHR		 	 
- stack 1: 0x744
- stack 0: 0x177
5677	 59E	JUMP		 	 
- stack 0: 0x744
5678	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x744
5679	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5680	 179	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
5681	 17A	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
- stack 0: 0xE0
5682	 17C	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1770233
5683	 17D	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x1770233
- stack 0: 0xFFFF
5684	 180	AND		 	 
- stack 1: 0x744
- stack 0: 0x233
5685	 181	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x1
5686	 183	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x233
5687	 184	PUSH2	03A0	 	 
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x3A0
5688	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x112000
5689	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x744
- stack 0: 0x112233
5690	 189	PUSH2	03A0	 	 
- stack 2: 0x744
- stack 1: 0x112233
- stack 0: 0x3A0
5691	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x744
5692	 18D	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5693	 18F	ADD		 	 
- stack 0: 0x748
5694	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5695	 191	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x1B0014C031A0001044800020462FFD401960013037B000003A8000000C70170
5696	 192	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x1B0014C031A0001044800020462FFD401960013037B000003A8000000C70170
- stack 0: 0xF0
5697	 194	SHR		 	 
- stack 1: 0x748
- stack 0: 0x1B0
5698	 195	JUMP		 	 
- stack 0: 0x748
5699	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x748
5700	 1B1	PUSH2	0060	 	 
- stack 1: 0x748
- stack 0: 0x60
5701	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x748
- stack 0: 0x112233
5702	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0xFFFFFFFF
5703	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x112233
5704	 1BB	PUSH2	03A0	 	 
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x3A0
5705	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x112233
5706	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x112233
- stack 1: 0x112233
- stack 0: 0xFFFFFFFF
5707	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x112233
5708	 1C5	SUB		 	 
- stack 1: 0x748
- stack 0: 0x0
5709	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x1CE
5710	 1C9	JUMPI		 	 
- stack 0: 0x748
5711	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x748
- stack 0: 0x1E8
5712	 1CD	JUMP		 	 
- stack 0: 0x748
5713	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x748
5714	 1E9	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5715	 1EB	ADD		 	 
- stack 0: 0x74C
5716	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5717	 1ED	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
5718	 1EE	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
- stack 0: 0xF0
5719	 1F0	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x31A
5720	 1F1	JUMP		 	 
- stack 0: 0x74C
5721	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x74C
5722	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5723	 31C	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
5724	 31D	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
- stack 0: 0xE0
5725	 31F	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001
5726	 320	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001
- stack 0: 0xFFFF
5727	 323	AND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5728	 324	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x1
5729	 326	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5730	 327	PUSH2	0080	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x80
5731	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x0
5732	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x74C
- stack 0: 0x1
5733	 32C	PUSH2	0080	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x80
5734	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x74C
5735	 330	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5736	 332	ADD		 	 
- stack 0: 0x750
5737	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5738	 334	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
5739	 335	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
- stack 0: 0xF0
5740	 337	SHR		 	 
- stack 1: 0x750
- stack 0: 0x448
5741	 338	JUMP		 	 
- stack 0: 0x750
5742	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x750
5743	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5744	 44A	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
5745	 44B	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
- stack 0: 0xE0
5746	 44D	SHR		 	 
- stack 1: 0x750
- stack 0: 0x4480002
5747	 44E	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x4480002
- stack 0: 0xFFFF
5748	 451	AND		 	 
- stack 1: 0x750
- stack 0: 0x2
5749	 452	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x2
- stack 0: 0x1
5750	 454	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x2
5751	 455	PUSH2	00A0	 	 
- stack 2: 0x750
- stack 1: 0x2
- stack 0: 0xA0
5752	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x750
5753	 459	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5754	 45B	ADD		 	 
- stack 0: 0x754
5755	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5756	 45D	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
5757	 45E	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
- stack 0: 0xF0
5758	 460	SHR		 	 
- stack 1: 0x754
- stack 0: 0x462
5759	 461	JUMP		 	 
- stack 0: 0x754
5760	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x754
5761	 463	PUSH2	0080	 	 
- stack 1: 0x754
- stack 0: 0x80
5762	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x754
- stack 0: 0x1
5763	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5764	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x754
- stack 0: 0x1
5765	 46D	PUSH2	00A0	 	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0xA0
5766	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x2
5767	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x754
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5768	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x2
5769	 477	SUB		 	 
- stack 1: 0x754
- stack 0: 0x1
5770	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x754
- stack 1: 0x1
- stack 0: 0x480
5771	 47B	JUMPI		 	 
- stack 0: 0x754
5772	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x754
5773	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5774	 482	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
5775	 483	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
- stack 0: 0xE0
5776	 485	SHR		 	 
- stack 1: 0x754
- stack 0: 0x462FFD4
5777	 486	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x462FFD4
- stack 0: 0xFFFF
5778	 489	AND		 	 
- stack 1: 0x754
- stack 0: 0xFFD4
5779	 48A	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0xFFD4
- stack 0: 0x1
5780	 48C	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD4
5781	 48D	ADD		 	 
- stack 0: 0x728
5782	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x728
- stack 0: 0xFFFFFFFF
5783	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x728
5784	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5785	 495	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x3A8000000C701A8057901120095023303B7000004060000058C011201770233
5786	 496	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x3A8000000C701A8057901120095023303B7000004060000058C011201770233
- stack 0: 0xF0
5787	 498	SHR		 	 
- stack 1: 0x728
- stack 0: 0x3A8
5788	 499	JUMP		 	 
- stack 0: 0x728
5789	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x728
5790	 3A9	DUP1		 	 
- stack 1: 0x728
- stack 0: 0x728
5791	 3AA	PUSH2	0040	 	 
- stack 2: 0x728
- stack 1: 0x728
- stack 0: 0x40
5792	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x728
5793	 3AE	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5794	 3B0	ADD		 	 
- stack 0: 0x72C
5795	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5796	 3B2	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
5797	 3B3	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
- stack 0: 0xF0
5798	 3B5	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xC7
5799	 3B6	JUMP		 	 
- stack 0: 0x72C
5800	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x72C
5801	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5802	 C9	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
5803	 CA	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8057901120095023303B7000004060000058C01120177023301B0014C
- stack 0: 0xE0
5804	 CC	SHR		 	 
- stack 1: 0x72C
- stack 0: 0xC701A8
5805	 CD	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0xC701A8
- stack 0: 0xFFFF
5806	 D0	AND		 	 
- stack 1: 0x72C
- stack 0: 0x1A8
5807	 D1	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x1
5808	 D3	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0x1A8
5809	 D4	PUSH2	0040	 	 
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x40
5810	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x72C
- stack 1: 0x1A8
- stack 0: 0x728
5811	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x72C
- stack 0: 0x8D0
5812	 D9	PUSH2	0040	 	 
- stack 2: 0x72C
- stack 1: 0x8D0
- stack 0: 0x40
5813	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x72C
5814	 DD	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5815	 DF	ADD		 	 
- stack 0: 0x730
5816	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5817	 E1	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x57901120095023303B7000004060000058C01120177023301B0014C031A0001
5818	 E2	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x57901120095023303B7000004060000058C01120177023301B0014C031A0001
- stack 0: 0xF0
5819	 E4	SHR		 	 
- stack 1: 0x730
- stack 0: 0x579
5820	 E5	JUMP		 	 
- stack 0: 0x730
5821	 579	JUMPDEST		 ;; __riscvimpl_LUI_1120b7	  ;; # instr: lui ra,0x112(ignore imm)
- stack 0: 0x730
5822	 57A	PUSH4	00112000	 	 
- stack 1: 0x730
- stack 0: 0x112000
5823	 57F	PUSH2	0020	 	 
- stack 2: 0x730
- stack 1: 0x112000
- stack 0: 0x20
5824	 582	MSTORE		 	  ;; # store to x1
- stack 0: 0x730
5825	 583	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5826	 585	ADD		 	 
- stack 0: 0x734
5827	 586	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5828	 587	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
5829	 588	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
- stack 0: 0xF0
5830	 58A	SHR		 	 
- stack 1: 0x734
- stack 0: 0x95
5831	 58B	JUMP		 	 
- stack 0: 0x734
5832	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x734
5833	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5834	 97	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
5835	 98	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x95023303B7000004060000058C01120177023301B0014C031A000104480002
- stack 0: 0xE0
5836	 9A	SHR		 	 
- stack 1: 0x734
- stack 0: 0x950233
5837	 9B	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x950233
- stack 0: 0xFFFF
5838	 9E	AND		 	 
- stack 1: 0x734
- stack 0: 0x233
5839	 9F	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x1
5840	 A1	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0x233
5841	 A2	PUSH2	0020	 	 
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x20
5842	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x734
- stack 1: 0x233
- stack 0: 0x112000
5843	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x734
- stack 0: 0x112233
5844	 A7	PUSH2	0020	 	 
- stack 2: 0x734
- stack 1: 0x112233
- stack 0: 0x20
5845	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x734
5846	 AB	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5847	 AD	ADD		 	 
- stack 0: 0x738
5848	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5849	 AF	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
5850	 B0	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
- stack 0: 0xF0
5851	 B2	SHR		 	 
- stack 1: 0x738
- stack 0: 0x3B7
5852	 B3	JUMP		 	 
- stack 0: 0x738
5853	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x738
5854	 3B8	PUSH2	0040	 	 
- stack 1: 0x738
- stack 0: 0x40
5855	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x738
- stack 0: 0x8D0
5856	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x738
5857	 3BD	MLOAD		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
5858	 3BE	PUSH1	E0	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x3B7000004060000058C01120177023301B0014C031A0001044800020462FFD4
- stack 0: 0xE0
5859	 3C0	SHR		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x3B70000
5860	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x3B70000
- stack 0: 0xFFFF
5861	 3C4	AND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x0
5862	 3C5	PUSH1	01	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5863	 3C7	SIGNEXTEND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x0
5864	 3C8	ADD		 	 
- stack 1: 0x738
- stack 0: 0x8D0
5865	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5866	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x738
- stack 0: 0x8D0
5867	 3CF	DUP1		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x8D0
5868	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5869	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5870	 3F2	AND		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5871	 3F3	PUSH2	0020	 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x20
5872	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x112233
5873	 3F7	PUSH1	E0	 	 
- stack 4: 0x738
- stack 3: 0x8D0
- stack 2: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 1: 0x112233
- stack 0: 0xE0
5874	 3F9	SHL		 	 
- stack 3: 0x738
- stack 2: 0x8D0
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x11223300000000000000000000000000000000000000000000000000000000
5875	 3FA	ADD		 	 
- stack 2: 0x738
- stack 1: 0x8D0
- stack 0: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5876	 3FB	SWAP1		 	 
- stack 2: 0x738
- stack 1: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0x8D0
5877	 3FC	MSTORE		 	 
- stack 0: 0x738
5878	 3FD	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5879	 3FF	ADD		 	 
- stack 0: 0x73C
5880	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5881	 401	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
5882	 402	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
- stack 0: 0xF0
5883	 404	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x406
5884	 405	JUMP		 	 
- stack 0: 0x73C
5885	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x73C
5886	 407	PUSH2	0040	 	 
- stack 1: 0x73C
- stack 0: 0x40
5887	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x73C
- stack 0: 0x8D0
5888	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5889	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x8D0
5890	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x73C
5891	 412	MLOAD		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
5892	 413	PUSH1	E0	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x4060000058C01120177023301B0014C031A0001044800020462FFD401960013
- stack 0: 0xE0
5893	 415	SHR		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x4060000
5894	 416	PUSH2	FFFF	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x4060000
- stack 0: 0xFFFF
5895	 419	AND		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x0
5896	 41A	PUSH1	01	 	 
- stack 3: 0x73C
- stack 2: 0x8D0
- stack 1: 0x0
- stack 0: 0x1
5897	 41C	SIGNEXTEND		 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0x0
5898	 41D	ADD		 	 
- stack 1: 0x73C
- stack 0: 0x8D0
5899	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
5900	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0x8D0
5901	 424	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
5902	 425	PUSH1	E0	 	 
- stack 2: 0x73C
- stack 1: 0x112233DAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A
- stack 0: 0xE0
5903	 427	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x112233
5904	 428	PUSH2	0060	 	 
- stack 2: 0x73C
- stack 1: 0x112233
- stack 0: 0x60
5905	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x73C
5906	 42C	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5907	 42E	ADD		 	 
- stack 0: 0x740
5908	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5909	 430	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x58C01120177023301B0014C031A0001044800020462FFD401960013037B0000
5910	 431	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x58C01120177023301B0014C031A0001044800020462FFD401960013037B0000
- stack 0: 0xF0
5911	 433	SHR		 	 
- stack 1: 0x740
- stack 0: 0x58C
5912	 434	JUMP		 	 
- stack 0: 0x740
5913	 58C	JUMPDEST		 ;; __riscvimpl_LUI_112eb7	  ;; # instr: lui t4,0x112(ignore imm)
- stack 0: 0x740
5914	 58D	PUSH4	00112000	 	 
- stack 1: 0x740
- stack 0: 0x112000
5915	 592	PUSH2	03A0	 	 
- stack 2: 0x740
- stack 1: 0x112000
- stack 0: 0x3A0
5916	 595	MSTORE		 	  ;; # store to x29
- stack 0: 0x740
5917	 596	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5918	 598	ADD		 	 
- stack 0: 0x744
5919	 599	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5920	 59A	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
5921	 59B	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
- stack 0: 0xF0
5922	 59D	SHR		 	 
- stack 1: 0x744
- stack 0: 0x177
5923	 59E	JUMP		 	 
- stack 0: 0x744
5924	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x744
5925	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x744
- stack 0: 0x744
5926	 179	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
5927	 17A	PUSH1	E0	 	 
- stack 2: 0x744
- stack 1: 0x177023301B0014C031A0001044800020462FFD401960013037B000003A80000
- stack 0: 0xE0
5928	 17C	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1770233
5929	 17D	PUSH2	FFFF	 	 
- stack 2: 0x744
- stack 1: 0x1770233
- stack 0: 0xFFFF
5930	 180	AND		 	 
- stack 1: 0x744
- stack 0: 0x233
5931	 181	PUSH1	01	 	 
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x1
5932	 183	SIGNEXTEND		 	 
- stack 1: 0x744
- stack 0: 0x233
5933	 184	PUSH2	03A0	 	 
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x3A0
5934	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x744
- stack 1: 0x233
- stack 0: 0x112000
5935	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x744
- stack 0: 0x112233
5936	 189	PUSH2	03A0	 	 
- stack 2: 0x744
- stack 1: 0x112233
- stack 0: 0x3A0
5937	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x744
5938	 18D	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5939	 18F	ADD		 	 
- stack 0: 0x748
5940	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5941	 191	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0x1B0014C031A0001044800020462FFD401960013037B000003A8000000C70170
5942	 192	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0x1B0014C031A0001044800020462FFD401960013037B000003A8000000C70170
- stack 0: 0xF0
5943	 194	SHR		 	 
- stack 1: 0x748
- stack 0: 0x1B0
5944	 195	JUMP		 	 
- stack 0: 0x748
5945	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x748
5946	 1B1	PUSH2	0060	 	 
- stack 1: 0x748
- stack 0: 0x60
5947	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x748
- stack 0: 0x112233
5948	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0xFFFFFFFF
5949	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x748
- stack 0: 0x112233
5950	 1BB	PUSH2	03A0	 	 
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x3A0
5951	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x112233
5952	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x748
- stack 2: 0x112233
- stack 1: 0x112233
- stack 0: 0xFFFFFFFF
5953	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x748
- stack 1: 0x112233
- stack 0: 0x112233
5954	 1C5	SUB		 	 
- stack 1: 0x748
- stack 0: 0x0
5955	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x748
- stack 1: 0x0
- stack 0: 0x1CE
5956	 1C9	JUMPI		 	 
- stack 0: 0x748
5957	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x748
- stack 0: 0x1E8
5958	 1CD	JUMP		 	 
- stack 0: 0x748
5959	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x748
5960	 1E9	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5961	 1EB	ADD		 	 
- stack 0: 0x74C
5962	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5963	 1ED	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
5964	 1EE	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
- stack 0: 0xF0
5965	 1F0	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x31A
5966	 1F1	JUMP		 	 
- stack 0: 0x74C
5967	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x74C
5968	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x74C
- stack 0: 0x74C
5969	 31C	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
5970	 31D	PUSH1	E0	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001044800020462FFD401960013037B000003A8000000C70170059F0011
- stack 0: 0xE0
5971	 31F	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x31A0001
5972	 320	PUSH2	FFFF	 	 
- stack 2: 0x74C
- stack 1: 0x31A0001
- stack 0: 0xFFFF
5973	 323	AND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5974	 324	PUSH1	01	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x1
5975	 326	SIGNEXTEND		 	 
- stack 1: 0x74C
- stack 0: 0x1
5976	 327	PUSH2	0080	 	 
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x80
5977	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x74C
- stack 1: 0x1
- stack 0: 0x1
5978	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x74C
- stack 0: 0x2
5979	 32C	PUSH2	0080	 	 
- stack 2: 0x74C
- stack 1: 0x2
- stack 0: 0x80
5980	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x74C
5981	 330	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5982	 332	ADD		 	 
- stack 0: 0x750
5983	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5984	 334	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
5985	 335	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
- stack 0: 0xF0
5986	 337	SHR		 	 
- stack 1: 0x750
- stack 0: 0x448
5987	 338	JUMP		 	 
- stack 0: 0x750
5988	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x750
5989	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5990	 44A	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
5991	 44B	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x44800020462FFD401960013037B000003A8000000C70170059F001100950223
- stack 0: 0xE0
5992	 44D	SHR		 	 
- stack 1: 0x750
- stack 0: 0x4480002
5993	 44E	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x4480002
- stack 0: 0xFFFF
5994	 451	AND		 	 
- stack 1: 0x750
- stack 0: 0x2
5995	 452	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0x2
- stack 0: 0x1
5996	 454	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0x2
5997	 455	PUSH2	00A0	 	 
- stack 2: 0x750
- stack 1: 0x2
- stack 0: 0xA0
5998	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x750
5999	 459	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
6000	 45B	ADD		 	 
- stack 0: 0x754
6001	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
6002	 45D	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
6003	 45E	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x462FFD401960013037B000003A8000000C70170059F00110095022304B70000
- stack 0: 0xF0
6004	 460	SHR		 	 
- stack 1: 0x754
- stack 0: 0x462
6005	 461	JUMP		 	 
- stack 0: 0x754
6006	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x754
6007	 463	PUSH2	0080	 	 
- stack 1: 0x754
- stack 0: 0x80
6008	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x754
- stack 0: 0x2
6009	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x754
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6010	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x754
- stack 0: 0x2
6011	 46D	PUSH2	00A0	 	 
- stack 2: 0x754
- stack 1: 0x2
- stack 0: 0xA0
6012	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x754
- stack 1: 0x2
- stack 0: 0x2
6013	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x754
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6014	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x754
- stack 1: 0x2
- stack 0: 0x2
6015	 477	SUB		 	 
- stack 1: 0x754
- stack 0: 0x0
6016	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x480
6017	 47B	JUMPI		 	 
- stack 0: 0x754
6018	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x754
- stack 0: 0x49A
6019	 47F	JUMP		 	 
- stack 0: 0x754
6020	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x754
6021	 49B	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
6022	 49D	ADD		 	 
- stack 0: 0x758
6023	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
6024	 49F	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1960013037B000003A8000000C70170059F00110095022304B7000003B70004
6025	 4A0	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0x1960013037B000003A8000000C70170059F00110095022304B7000003B70004
- stack 0: 0xF0
6026	 4A2	SHR		 	 
- stack 1: 0x758
- stack 0: 0x196
6027	 4A3	JUMP		 	 
- stack 0: 0x758
6028	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x758
6029	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x758
- stack 0: 0x758
6030	 198	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0x1960013037B000003A8000000C70170059F00110095022304B7000003B70004
6031	 199	PUSH1	E0	 	 
- stack 2: 0x758
- stack 1: 0x1960013037B000003A8000000C70170059F00110095022304B7000003B70004
- stack 0: 0xE0
6032	 19B	SHR		 	 
- stack 1: 0x758
- stack 0: 0x1960013
6033	 19C	PUSH2	FFFF	 	 
- stack 2: 0x758
- stack 1: 0x1960013
- stack 0: 0xFFFF
6034	 19F	AND		 	 
- stack 1: 0x758
- stack 0: 0x13
6035	 1A0	PUSH1	01	 	 
- stack 2: 0x758
- stack 1: 0x13
- stack 0: 0x1
6036	 1A2	SIGNEXTEND		 	 
- stack 1: 0x758
- stack 0: 0x13
6037	 1A3	PUSH2	0380	 	 
- stack 2: 0x758
- stack 1: 0x13
- stack 0: 0x380
6038	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x758
6039	 1A7	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
6040	 1A9	ADD		 	 
- stack 0: 0x75C
6041	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
6042	 1AB	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x37B000003A8000000C70170059F00110095022304B7000003B7000404060004
6043	 1AC	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x37B000003A8000000C70170059F00110095022304B7000003B7000404060004
- stack 0: 0xF0
6044	 1AE	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x37B
6045	 1AF	JUMP		 	 
- stack 0: 0x75C
6046	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x75C
6047	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
6048	 37D	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x37B000003A8000000C70170059F00110095022304B7000003B7000404060004
6049	 37E	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x37B000003A8000000C70170059F00110095022304B7000003B7000404060004
- stack 0: 0xE0
6050	 380	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x37B0000
6051	 381	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x37B0000
- stack 0: 0xFFFF
6052	 384	AND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6053	 385	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x1
6054	 387	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x0
6055	 388	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x0
- stack 0: 0x80
6056	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
6057	 38C	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
6058	 38E	ADD		 	 
- stack 0: 0x760
6059	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6060	 390	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3A8000000C70170059F00110095022304B7000003B700040406000405B20011
6061	 391	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3A8000000C70170059F00110095022304B7000003B700040406000405B20011
- stack 0: 0xF0
6062	 393	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3A8
6063	 394	JUMP		 	 
- stack 0: 0x760
6064	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x760
6065	 3A9	DUP1		 	 
- stack 1: 0x760
- stack 0: 0x760
6066	 3AA	PUSH2	0040	 	 
- stack 2: 0x760
- stack 1: 0x760
- stack 0: 0x40
6067	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x760
6068	 3AE	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6069	 3B0	ADD		 	 
- stack 0: 0x764
6070	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6071	 3B2	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
6072	 3B3	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
- stack 0: 0xF0
6073	 3B5	SHR		 	 
- stack 1: 0x764
- stack 0: 0xC7
6074	 3B6	JUMP		 	 
- stack 0: 0x764
6075	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x764
6076	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
6077	 C9	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
6078	 CA	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
- stack 0: 0xE0
6079	 CC	SHR		 	 
- stack 1: 0x764
- stack 0: 0xC70170
6080	 CD	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0xC70170
- stack 0: 0xFFFF
6081	 D0	AND		 	 
- stack 1: 0x764
- stack 0: 0x170
6082	 D1	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x1
6083	 D3	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x170
6084	 D4	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x40
6085	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x760
6086	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x764
- stack 0: 0x8D0
6087	 D9	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x40
6088	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
6089	 DD	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6090	 DF	ADD		 	 
- stack 0: 0x768
6091	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6092	 E1	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x59F00110095022304B7000003B700040406000405B200110177022301B00110
6093	 E2	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x59F00110095022304B7000003B700040406000405B200110177022301B00110
- stack 0: 0xF0
6094	 E4	SHR		 	 
- stack 1: 0x768
- stack 0: 0x59F
6095	 E5	JUMP		 	 
- stack 0: 0x768
6096	 59F	JUMPDEST		 ;; __riscvimpl_LUI_300110b7	  ;; # instr: lui ra,0x30011(ignore imm)
- stack 0: 0x768
6097	 5A0	PUSH4	30011000	 	 
- stack 1: 0x768
- stack 0: 0x30011000
6098	 5A5	PUSH2	0020	 	 
- stack 2: 0x768
- stack 1: 0x30011000
- stack 0: 0x20
6099	 5A8	MSTORE		 	  ;; # store to x1
- stack 0: 0x768
6100	 5A9	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6101	 5AB	ADD		 	 
- stack 0: 0x76C
6102	 5AC	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6103	 5AD	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
6104	 5AE	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
- stack 0: 0xF0
6105	 5B0	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x95
6106	 5B1	JUMP		 	 
- stack 0: 0x76C
6107	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x76C
6108	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
6109	 97	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
6110	 98	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
- stack 0: 0xE0
6111	 9A	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x950223
6112	 9B	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x950223
- stack 0: 0xFFFF
6113	 9E	AND		 	 
- stack 1: 0x76C
- stack 0: 0x223
6114	 9F	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x1
6115	 A1	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x223
6116	 A2	PUSH2	0020	 	 
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x20
6117	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x30011000
6118	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x76C
- stack 0: 0x30011223
6119	 A7	PUSH2	0020	 	 
- stack 2: 0x76C
- stack 1: 0x30011223
- stack 0: 0x20
6120	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x76C
6121	 AB	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6122	 AD	ADD		 	 
- stack 0: 0x770
6123	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6124	 AF	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
6125	 B0	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
- stack 0: 0xF0
6126	 B2	SHR		 	 
- stack 1: 0x770
- stack 0: 0x4B7
6127	 B3	JUMP		 	 
- stack 0: 0x770
6128	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x770
6129	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
6130	 4B9	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
6131	 4BA	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
- stack 0: 0xE0
6132	 4BC	SHR		 	 
- stack 1: 0x770
- stack 0: 0x4B70000
6133	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6134	 4C0	AND		 	 
- stack 1: 0x770
- stack 0: 0x0
6135	 4C1	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x0
- stack 0: 0x1
6136	 4C3	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x0
6137	 4C4	POP		 	 
- stack 0: 0x770
6138	 4C5	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6139	 4C7	ADD		 	 
- stack 0: 0x774
6140	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6141	 4C9	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
6142	 4CA	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
- stack 0: 0xF0
6143	 4CC	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3B7
6144	 4CD	JUMP		 	 
- stack 0: 0x774
6145	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x774
6146	 3B8	PUSH2	0040	 	 
- stack 1: 0x774
- stack 0: 0x40
6147	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x774
- stack 0: 0x8D0
6148	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x774
6149	 3BD	MLOAD		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
6150	 3BE	PUSH1	E0	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
- stack 0: 0xE0
6151	 3C0	SHR		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x3B70004
6152	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x3B70004
- stack 0: 0xFFFF
6153	 3C4	AND		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x4
6154	 3C5	PUSH1	01	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6155	 3C7	SIGNEXTEND		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x4
6156	 3C8	ADD		 	 
- stack 1: 0x774
- stack 0: 0x8D4
6157	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6158	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0x8D4
6159	 3CF	DUP1		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0x8D4
6160	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6161	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDAABBCCDDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6162	 3F2	AND		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6163	 3F3	PUSH2	0020	 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x20
6164	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x30011223
6165	 3F7	PUSH1	E0	 	 
- stack 4: 0x774
- stack 3: 0x8D4
- stack 2: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 1: 0x30011223
- stack 0: 0xE0
6166	 3F9	SHL		 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x3001122300000000000000000000000000000000000000000000000000000000
6167	 3FA	ADD		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6168	 3FB	SWAP1		 	 
- stack 2: 0x774
- stack 1: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x8D4
6169	 3FC	MSTORE		 	 
- stack 0: 0x774
6170	 3FD	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6171	 3FF	ADD		 	 
- stack 0: 0x778
6172	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6173	 401	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
6174	 402	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
- stack 0: 0xF0
6175	 404	SHR		 	 
- stack 1: 0x778
- stack 0: 0x406
6176	 405	JUMP		 	 
- stack 0: 0x778
6177	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x778
6178	 407	PUSH2	0040	 	 
- stack 1: 0x778
- stack 0: 0x40
6179	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x778
- stack 0: 0x8D0
6180	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6181	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x8D0
6182	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x778
6183	 412	MLOAD		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
6184	 413	PUSH1	E0	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
- stack 0: 0xE0
6185	 415	SHR		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4060004
6186	 416	PUSH2	FFFF	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x4060004
- stack 0: 0xFFFF
6187	 419	AND		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4
6188	 41A	PUSH1	01	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6189	 41C	SIGNEXTEND		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4
6190	 41D	ADD		 	 
- stack 1: 0x778
- stack 0: 0x8D4
6191	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6192	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x8D4
6193	 424	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6194	 425	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0xE0
6195	 427	SHR		 	 
- stack 1: 0x778
- stack 0: 0x30011223
6196	 428	PUSH2	0060	 	 
- stack 2: 0x778
- stack 1: 0x30011223
- stack 0: 0x60
6197	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x778
6198	 42C	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6199	 42E	ADD		 	 
- stack 0: 0x77C
6200	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6201	 430	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x5B200110177022301B00110031A0001044800020462FFD001960014037B0000
6202	 431	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x5B200110177022301B00110031A0001044800020462FFD001960014037B0000
- stack 0: 0xF0
6203	 433	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x5B2
6204	 434	JUMP		 	 
- stack 0: 0x77C
6205	 5B2	JUMPDEST		 ;; __riscvimpl_LUI_30011eb7	  ;; # instr: lui t4,0x30011(ignore imm)
- stack 0: 0x77C
6206	 5B3	PUSH4	30011000	 	 
- stack 1: 0x77C
- stack 0: 0x30011000
6207	 5B8	PUSH2	03A0	 	 
- stack 2: 0x77C
- stack 1: 0x30011000
- stack 0: 0x3A0
6208	 5BB	MSTORE		 	  ;; # store to x29
- stack 0: 0x77C
6209	 5BC	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
6210	 5BE	ADD		 	 
- stack 0: 0x780
6211	 5BF	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
6212	 5C0	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
6213	 5C1	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
- stack 0: 0xF0
6214	 5C3	SHR		 	 
- stack 1: 0x780
- stack 0: 0x177
6215	 5C4	JUMP		 	 
- stack 0: 0x780
6216	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x780
6217	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
6218	 179	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
6219	 17A	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
- stack 0: 0xE0
6220	 17C	SHR		 	 
- stack 1: 0x780
- stack 0: 0x1770223
6221	 17D	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x1770223
- stack 0: 0xFFFF
6222	 180	AND		 	 
- stack 1: 0x780
- stack 0: 0x223
6223	 181	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x1
6224	 183	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x223
6225	 184	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x3A0
6226	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x30011000
6227	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x780
- stack 0: 0x30011223
6228	 189	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x30011223
- stack 0: 0x3A0
6229	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x780
6230	 18D	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
6231	 18F	ADD		 	 
- stack 0: 0x784
6232	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
6233	 191	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1B00110031A0001044800020462FFD001960014037B000003A8000000C70134
6234	 192	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1B00110031A0001044800020462FFD001960014037B000003A8000000C70134
- stack 0: 0xF0
6235	 194	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1B0
6236	 195	JUMP		 	 
- stack 0: 0x784
6237	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x784
6238	 1B1	PUSH2	0060	 	 
- stack 1: 0x784
- stack 0: 0x60
6239	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x784
- stack 0: 0x30011223
6240	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0xFFFFFFFF
6241	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0x30011223
6242	 1BB	PUSH2	03A0	 	 
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x3A0
6243	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x30011223
6244	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0x30011223
- stack 1: 0x30011223
- stack 0: 0xFFFFFFFF
6245	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x30011223
6246	 1C5	SUB		 	 
- stack 1: 0x784
- stack 0: 0x0
6247	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x1CE
6248	 1C9	JUMPI		 	 
- stack 0: 0x784
6249	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x784
- stack 0: 0x1E8
6250	 1CD	JUMP		 	 
- stack 0: 0x784
6251	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x784
6252	 1E9	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6253	 1EB	ADD		 	 
- stack 0: 0x788
6254	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6255	 1ED	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
6256	 1EE	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
- stack 0: 0xF0
6257	 1F0	SHR		 	 
- stack 1: 0x788
- stack 0: 0x31A
6258	 1F1	JUMP		 	 
- stack 0: 0x788
6259	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x788
6260	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
6261	 31C	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
6262	 31D	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
- stack 0: 0xE0
6263	 31F	SHR		 	 
- stack 1: 0x788
- stack 0: 0x31A0001
6264	 320	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x31A0001
- stack 0: 0xFFFF
6265	 323	AND		 	 
- stack 1: 0x788
- stack 0: 0x1
6266	 324	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x1
6267	 326	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x1
6268	 327	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x80
6269	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x0
6270	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x788
- stack 0: 0x1
6271	 32C	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x80
6272	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x788
6273	 330	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6274	 332	ADD		 	 
- stack 0: 0x78C
6275	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6276	 334	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
6277	 335	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
- stack 0: 0xF0
6278	 337	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x448
6279	 338	JUMP		 	 
- stack 0: 0x78C
6280	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x78C
6281	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6282	 44A	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
6283	 44B	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
- stack 0: 0xE0
6284	 44D	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x4480002
6285	 44E	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x4480002
- stack 0: 0xFFFF
6286	 451	AND		 	 
- stack 1: 0x78C
- stack 0: 0x2
6287	 452	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0x1
6288	 454	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x2
6289	 455	PUSH2	00A0	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0xA0
6290	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x78C
6291	 459	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6292	 45B	ADD		 	 
- stack 0: 0x790
6293	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6294	 45D	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
6295	 45E	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
- stack 0: 0xF0
6296	 460	SHR		 	 
- stack 1: 0x790
- stack 0: 0x462
6297	 461	JUMP		 	 
- stack 0: 0x790
6298	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x790
6299	 463	PUSH2	0080	 	 
- stack 1: 0x790
- stack 0: 0x80
6300	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x790
- stack 0: 0x1
6301	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x790
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6302	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x790
- stack 0: 0x1
6303	 46D	PUSH2	00A0	 	 
- stack 2: 0x790
- stack 1: 0x1
- stack 0: 0xA0
6304	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x790
- stack 1: 0x1
- stack 0: 0x2
6305	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x790
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6306	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x790
- stack 1: 0x1
- stack 0: 0x2
6307	 477	SUB		 	 
- stack 1: 0x790
- stack 0: 0x1
6308	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x790
- stack 1: 0x1
- stack 0: 0x480
6309	 47B	JUMPI		 	 
- stack 0: 0x790
6310	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x790
6311	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6312	 482	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
6313	 483	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
- stack 0: 0xE0
6314	 485	SHR		 	 
- stack 1: 0x790
- stack 0: 0x462FFD0
6315	 486	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x462FFD0
- stack 0: 0xFFFF
6316	 489	AND		 	 
- stack 1: 0x790
- stack 0: 0xFFD0
6317	 48A	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0xFFD0
- stack 0: 0x1
6318	 48C	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
6319	 48D	ADD		 	 
- stack 0: 0x760
6320	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x760
- stack 0: 0xFFFFFFFF
6321	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x760
6322	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
6323	 495	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x3A8000000C70170059F00110095022304B7000003B700040406000405B20011
6324	 496	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x3A8000000C70170059F00110095022304B7000003B700040406000405B20011
- stack 0: 0xF0
6325	 498	SHR		 	 
- stack 1: 0x760
- stack 0: 0x3A8
6326	 499	JUMP		 	 
- stack 0: 0x760
6327	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x760
6328	 3A9	DUP1		 	 
- stack 1: 0x760
- stack 0: 0x760
6329	 3AA	PUSH2	0040	 	 
- stack 2: 0x760
- stack 1: 0x760
- stack 0: 0x40
6330	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x760
6331	 3AE	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
6332	 3B0	ADD		 	 
- stack 0: 0x764
6333	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
6334	 3B2	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
6335	 3B3	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
- stack 0: 0xF0
6336	 3B5	SHR		 	 
- stack 1: 0x764
- stack 0: 0xC7
6337	 3B6	JUMP		 	 
- stack 0: 0x764
6338	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x764
6339	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
6340	 C9	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
6341	 CA	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0xC70170059F00110095022304B7000003B700040406000405B2001101770223
- stack 0: 0xE0
6342	 CC	SHR		 	 
- stack 1: 0x764
- stack 0: 0xC70170
6343	 CD	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0xC70170
- stack 0: 0xFFFF
6344	 D0	AND		 	 
- stack 1: 0x764
- stack 0: 0x170
6345	 D1	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x1
6346	 D3	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0x170
6347	 D4	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x40
6348	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x764
- stack 1: 0x170
- stack 0: 0x760
6349	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x764
- stack 0: 0x8D0
6350	 D9	PUSH2	0040	 	 
- stack 2: 0x764
- stack 1: 0x8D0
- stack 0: 0x40
6351	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x764
6352	 DD	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
6353	 DF	ADD		 	 
- stack 0: 0x768
6354	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
6355	 E1	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x59F00110095022304B7000003B700040406000405B200110177022301B00110
6356	 E2	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x59F00110095022304B7000003B700040406000405B200110177022301B00110
- stack 0: 0xF0
6357	 E4	SHR		 	 
- stack 1: 0x768
- stack 0: 0x59F
6358	 E5	JUMP		 	 
- stack 0: 0x768
6359	 59F	JUMPDEST		 ;; __riscvimpl_LUI_300110b7	  ;; # instr: lui ra,0x30011(ignore imm)
- stack 0: 0x768
6360	 5A0	PUSH4	30011000	 	 
- stack 1: 0x768
- stack 0: 0x30011000
6361	 5A5	PUSH2	0020	 	 
- stack 2: 0x768
- stack 1: 0x30011000
- stack 0: 0x20
6362	 5A8	MSTORE		 	  ;; # store to x1
- stack 0: 0x768
6363	 5A9	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
6364	 5AB	ADD		 	 
- stack 0: 0x76C
6365	 5AC	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
6366	 5AD	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
6367	 5AE	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
- stack 0: 0xF0
6368	 5B0	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x95
6369	 5B1	JUMP		 	 
- stack 0: 0x76C
6370	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x76C
6371	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
6372	 97	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
6373	 98	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x95022304B7000003B700040406000405B200110177022301B00110031A0001
- stack 0: 0xE0
6374	 9A	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x950223
6375	 9B	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x950223
- stack 0: 0xFFFF
6376	 9E	AND		 	 
- stack 1: 0x76C
- stack 0: 0x223
6377	 9F	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x1
6378	 A1	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0x223
6379	 A2	PUSH2	0020	 	 
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x20
6380	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x76C
- stack 1: 0x223
- stack 0: 0x30011000
6381	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x76C
- stack 0: 0x30011223
6382	 A7	PUSH2	0020	 	 
- stack 2: 0x76C
- stack 1: 0x30011223
- stack 0: 0x20
6383	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x76C
6384	 AB	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
6385	 AD	ADD		 	 
- stack 0: 0x770
6386	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
6387	 AF	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
6388	 B0	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
- stack 0: 0xF0
6389	 B2	SHR		 	 
- stack 1: 0x770
- stack 0: 0x4B7
6390	 B3	JUMP		 	 
- stack 0: 0x770
6391	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x770
6392	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
6393	 4B9	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
6394	 4BA	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x4B7000003B700040406000405B200110177022301B00110031A000104480002
- stack 0: 0xE0
6395	 4BC	SHR		 	 
- stack 1: 0x770
- stack 0: 0x4B70000
6396	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6397	 4C0	AND		 	 
- stack 1: 0x770
- stack 0: 0x0
6398	 4C1	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x0
- stack 0: 0x1
6399	 4C3	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x0
6400	 4C4	POP		 	 
- stack 0: 0x770
6401	 4C5	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
6402	 4C7	ADD		 	 
- stack 0: 0x774
6403	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
6404	 4C9	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
6405	 4CA	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
- stack 0: 0xF0
6406	 4CC	SHR		 	 
- stack 1: 0x774
- stack 0: 0x3B7
6407	 4CD	JUMP		 	 
- stack 0: 0x774
6408	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x774
6409	 3B8	PUSH2	0040	 	 
- stack 1: 0x774
- stack 0: 0x40
6410	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x774
- stack 0: 0x8D0
6411	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x774
6412	 3BD	MLOAD		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
6413	 3BE	PUSH1	E0	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x3B700040406000405B200110177022301B00110031A0001044800020462FFD0
- stack 0: 0xE0
6414	 3C0	SHR		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x3B70004
6415	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x3B70004
- stack 0: 0xFFFF
6416	 3C4	AND		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x4
6417	 3C5	PUSH1	01	 	 
- stack 3: 0x774
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6418	 3C7	SIGNEXTEND		 	 
- stack 2: 0x774
- stack 1: 0x8D0
- stack 0: 0x4
6419	 3C8	ADD		 	 
- stack 1: 0x774
- stack 0: 0x8D4
6420	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6421	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0x8D4
6422	 3CF	DUP1		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0x8D4
6423	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6424	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6425	 3F2	AND		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6426	 3F3	PUSH2	0020	 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x20
6427	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x30011223
6428	 3F7	PUSH1	E0	 	 
- stack 4: 0x774
- stack 3: 0x8D4
- stack 2: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 1: 0x30011223
- stack 0: 0xE0
6429	 3F9	SHL		 	 
- stack 3: 0x774
- stack 2: 0x8D4
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x3001122300000000000000000000000000000000000000000000000000000000
6430	 3FA	ADD		 	 
- stack 2: 0x774
- stack 1: 0x8D4
- stack 0: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6431	 3FB	SWAP1		 	 
- stack 2: 0x774
- stack 1: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0x8D4
6432	 3FC	MSTORE		 	 
- stack 0: 0x774
6433	 3FD	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
6434	 3FF	ADD		 	 
- stack 0: 0x778
6435	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
6436	 401	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
6437	 402	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
- stack 0: 0xF0
6438	 404	SHR		 	 
- stack 1: 0x778
- stack 0: 0x406
6439	 405	JUMP		 	 
- stack 0: 0x778
6440	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x778
6441	 407	PUSH2	0040	 	 
- stack 1: 0x778
- stack 0: 0x40
6442	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x778
- stack 0: 0x8D0
6443	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6444	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x8D0
6445	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x778
6446	 412	MLOAD		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
6447	 413	PUSH1	E0	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x406000405B200110177022301B00110031A0001044800020462FFD001960014
- stack 0: 0xE0
6448	 415	SHR		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4060004
6449	 416	PUSH2	FFFF	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x4060004
- stack 0: 0xFFFF
6450	 419	AND		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4
6451	 41A	PUSH1	01	 	 
- stack 3: 0x778
- stack 2: 0x8D0
- stack 1: 0x4
- stack 0: 0x1
6452	 41C	SIGNEXTEND		 	 
- stack 2: 0x778
- stack 1: 0x8D0
- stack 0: 0x4
6453	 41D	ADD		 	 
- stack 1: 0x778
- stack 0: 0x8D4
6454	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x778
- stack 1: 0x8D4
- stack 0: 0xFFFFFFFF
6455	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x778
- stack 0: 0x8D4
6456	 424	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
6457	 425	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x30011223DDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678
- stack 0: 0xE0
6458	 427	SHR		 	 
- stack 1: 0x778
- stack 0: 0x30011223
6459	 428	PUSH2	0060	 	 
- stack 2: 0x778
- stack 1: 0x30011223
- stack 0: 0x60
6460	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x778
6461	 42C	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
6462	 42E	ADD		 	 
- stack 0: 0x77C
6463	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
6464	 430	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0x5B200110177022301B00110031A0001044800020462FFD001960014037B0000
6465	 431	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0x5B200110177022301B00110031A0001044800020462FFD001960014037B0000
- stack 0: 0xF0
6466	 433	SHR		 	 
- stack 1: 0x77C
- stack 0: 0x5B2
6467	 434	JUMP		 	 
- stack 0: 0x77C
6468	 5B2	JUMPDEST		 ;; __riscvimpl_LUI_30011eb7	  ;; # instr: lui t4,0x30011(ignore imm)
- stack 0: 0x77C
6469	 5B3	PUSH4	30011000	 	 
- stack 1: 0x77C
- stack 0: 0x30011000
6470	 5B8	PUSH2	03A0	 	 
- stack 2: 0x77C
- stack 1: 0x30011000
- stack 0: 0x3A0
6471	 5BB	MSTORE		 	  ;; # store to x29
- stack 0: 0x77C
6472	 5BC	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
6473	 5BE	ADD		 	 
- stack 0: 0x780
6474	 5BF	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
6475	 5C0	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
6476	 5C1	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
- stack 0: 0xF0
6477	 5C3	SHR		 	 
- stack 1: 0x780
- stack 0: 0x177
6478	 5C4	JUMP		 	 
- stack 0: 0x780
6479	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x780
6480	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
6481	 179	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
6482	 17A	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0x177022301B00110031A0001044800020462FFD001960014037B000003A80000
- stack 0: 0xE0
6483	 17C	SHR		 	 
- stack 1: 0x780
- stack 0: 0x1770223
6484	 17D	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0x1770223
- stack 0: 0xFFFF
6485	 180	AND		 	 
- stack 1: 0x780
- stack 0: 0x223
6486	 181	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x1
6487	 183	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0x223
6488	 184	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x3A0
6489	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x780
- stack 1: 0x223
- stack 0: 0x30011000
6490	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x780
- stack 0: 0x30011223
6491	 189	PUSH2	03A0	 	 
- stack 2: 0x780
- stack 1: 0x30011223
- stack 0: 0x3A0
6492	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x780
6493	 18D	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
6494	 18F	ADD		 	 
- stack 0: 0x784
6495	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
6496	 191	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1B00110031A0001044800020462FFD001960014037B000003A8000000C70134
6497	 192	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1B00110031A0001044800020462FFD001960014037B000003A8000000C70134
- stack 0: 0xF0
6498	 194	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1B0
6499	 195	JUMP		 	 
- stack 0: 0x784
6500	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x784
6501	 1B1	PUSH2	0060	 	 
- stack 1: 0x784
- stack 0: 0x60
6502	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x784
- stack 0: 0x30011223
6503	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0xFFFFFFFF
6504	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x784
- stack 0: 0x30011223
6505	 1BB	PUSH2	03A0	 	 
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x3A0
6506	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x30011223
6507	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x784
- stack 2: 0x30011223
- stack 1: 0x30011223
- stack 0: 0xFFFFFFFF
6508	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x784
- stack 1: 0x30011223
- stack 0: 0x30011223
6509	 1C5	SUB		 	 
- stack 1: 0x784
- stack 0: 0x0
6510	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x784
- stack 1: 0x0
- stack 0: 0x1CE
6511	 1C9	JUMPI		 	 
- stack 0: 0x784
6512	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x784
- stack 0: 0x1E8
6513	 1CD	JUMP		 	 
- stack 0: 0x784
6514	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x784
6515	 1E9	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6516	 1EB	ADD		 	 
- stack 0: 0x788
6517	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6518	 1ED	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
6519	 1EE	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
- stack 0: 0xF0
6520	 1F0	SHR		 	 
- stack 1: 0x788
- stack 0: 0x31A
6521	 1F1	JUMP		 	 
- stack 0: 0x788
6522	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x788
6523	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
6524	 31C	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
6525	 31D	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x31A0001044800020462FFD001960014037B000003A8000000C7013405C53001
- stack 0: 0xE0
6526	 31F	SHR		 	 
- stack 1: 0x788
- stack 0: 0x31A0001
6527	 320	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x31A0001
- stack 0: 0xFFFF
6528	 323	AND		 	 
- stack 1: 0x788
- stack 0: 0x1
6529	 324	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x1
6530	 326	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0x1
6531	 327	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x80
6532	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x788
- stack 1: 0x1
- stack 0: 0x1
6533	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x788
- stack 0: 0x2
6534	 32C	PUSH2	0080	 	 
- stack 2: 0x788
- stack 1: 0x2
- stack 0: 0x80
6535	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x788
6536	 330	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6537	 332	ADD		 	 
- stack 0: 0x78C
6538	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6539	 334	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
6540	 335	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
- stack 0: 0xF0
6541	 337	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x448
6542	 338	JUMP		 	 
- stack 0: 0x78C
6543	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x78C
6544	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6545	 44A	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
6546	 44B	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x44800020462FFD001960014037B000003A8000000C7013405C5300100950122
- stack 0: 0xE0
6547	 44D	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x4480002
6548	 44E	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x4480002
- stack 0: 0xFFFF
6549	 451	AND		 	 
- stack 1: 0x78C
- stack 0: 0x2
6550	 452	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0x1
6551	 454	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x2
6552	 455	PUSH2	00A0	 	 
- stack 2: 0x78C
- stack 1: 0x2
- stack 0: 0xA0
6553	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x78C
6554	 459	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6555	 45B	ADD		 	 
- stack 0: 0x790
6556	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6557	 45D	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
6558	 45E	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x462FFD001960014037B000003A8000000C7013405C530010095012204B70000
- stack 0: 0xF0
6559	 460	SHR		 	 
- stack 1: 0x790
- stack 0: 0x462
6560	 461	JUMP		 	 
- stack 0: 0x790
6561	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x790
6562	 463	PUSH2	0080	 	 
- stack 1: 0x790
- stack 0: 0x80
6563	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x790
- stack 0: 0x2
6564	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6565	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x790
- stack 0: 0x2
6566	 46D	PUSH2	00A0	 	 
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0xA0
6567	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0x2
6568	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x790
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6569	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x790
- stack 1: 0x2
- stack 0: 0x2
6570	 477	SUB		 	 
- stack 1: 0x790
- stack 0: 0x0
6571	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x480
6572	 47B	JUMPI		 	 
- stack 0: 0x790
6573	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x790
- stack 0: 0x49A
6574	 47F	JUMP		 	 
- stack 0: 0x790
6575	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x790
6576	 49B	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6577	 49D	ADD		 	 
- stack 0: 0x794
6578	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6579	 49F	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x1960014037B000003A8000000C7013405C530010095012204B7000004B70000
6580	 4A0	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0x1960014037B000003A8000000C7013405C530010095012204B7000004B70000
- stack 0: 0xF0
6581	 4A2	SHR		 	 
- stack 1: 0x794
- stack 0: 0x196
6582	 4A3	JUMP		 	 
- stack 0: 0x794
6583	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x794
6584	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x794
- stack 0: 0x794
6585	 198	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0x1960014037B000003A8000000C7013405C530010095012204B7000004B70000
6586	 199	PUSH1	E0	 	 
- stack 2: 0x794
- stack 1: 0x1960014037B000003A8000000C7013405C530010095012204B7000004B70000
- stack 0: 0xE0
6587	 19B	SHR		 	 
- stack 1: 0x794
- stack 0: 0x1960014
6588	 19C	PUSH2	FFFF	 	 
- stack 2: 0x794
- stack 1: 0x1960014
- stack 0: 0xFFFF
6589	 19F	AND		 	 
- stack 1: 0x794
- stack 0: 0x14
6590	 1A0	PUSH1	01	 	 
- stack 2: 0x794
- stack 1: 0x14
- stack 0: 0x1
6591	 1A2	SIGNEXTEND		 	 
- stack 1: 0x794
- stack 0: 0x14
6592	 1A3	PUSH2	0380	 	 
- stack 2: 0x794
- stack 1: 0x14
- stack 0: 0x380
6593	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x794
6594	 1A7	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6595	 1A9	ADD		 	 
- stack 0: 0x798
6596	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6597	 1AB	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x37B000003A8000000C7013405C530010095012204B7000004B7000003B70008
6598	 1AC	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x37B000003A8000000C7013405C530010095012204B7000004B7000003B70008
- stack 0: 0xF0
6599	 1AE	SHR		 	 
- stack 1: 0x798
- stack 0: 0x37B
6600	 1AF	JUMP		 	 
- stack 0: 0x798
6601	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x798
6602	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
6603	 37D	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x37B000003A8000000C7013405C530010095012204B7000004B7000003B70008
6604	 37E	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x37B000003A8000000C7013405C530010095012204B7000004B7000003B70008
- stack 0: 0xE0
6605	 380	SHR		 	 
- stack 1: 0x798
- stack 0: 0x37B0000
6606	 381	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x37B0000
- stack 0: 0xFFFF
6607	 384	AND		 	 
- stack 1: 0x798
- stack 0: 0x0
6608	 385	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x1
6609	 387	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x0
6610	 388	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x0
- stack 0: 0x80
6611	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x798
6612	 38C	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6613	 38E	ADD		 	 
- stack 0: 0x79C
6614	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6615	 390	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3A8000000C7013405C530010095012204B7000004B7000003B7000804060008
6616	 391	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x3A8000000C7013405C530010095012204B7000004B7000003B7000804060008
- stack 0: 0xF0
6617	 393	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3A8
6618	 394	JUMP		 	 
- stack 0: 0x79C
6619	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x79C
6620	 3A9	DUP1		 	 
- stack 1: 0x79C
- stack 0: 0x79C
6621	 3AA	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0x79C
- stack 0: 0x40
6622	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x79C
6623	 3AE	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6624	 3B0	ADD		 	 
- stack 0: 0x7A0
6625	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6626	 3B2	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
6627	 3B3	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
- stack 0: 0xF0
6628	 3B5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xC7
6629	 3B6	JUMP		 	 
- stack 0: 0x7A0
6630	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x7A0
6631	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
6632	 C9	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
6633	 CA	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
- stack 0: 0xE0
6634	 CC	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xC70134
6635	 CD	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xC70134
- stack 0: 0xFFFF
6636	 D0	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x134
6637	 D1	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x1
6638	 D3	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x134
6639	 D4	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x40
6640	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x79C
6641	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x7A0
- stack 0: 0x8D0
6642	 D9	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0x8D0
- stack 0: 0x40
6643	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x7A0
6644	 DD	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6645	 DF	ADD		 	 
- stack 0: 0x7A4
6646	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6647	 E1	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x5C530010095012204B7000004B7000003B700080406000805D8300101770122
6648	 E2	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x5C530010095012204B7000004B7000003B700080406000805D8300101770122
- stack 0: 0xF0
6649	 E4	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x5C5
6650	 E5	JUMP		 	 
- stack 0: 0x7A4
6651	 5C5	JUMPDEST		 ;; __riscvimpl_LUI_330010b7	  ;; # instr: lui ra,0x33001(ignore imm)
- stack 0: 0x7A4
6652	 5C6	PUSH4	33001000	 	 
- stack 1: 0x7A4
- stack 0: 0x33001000
6653	 5CB	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0x33001000
- stack 0: 0x20
6654	 5CE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A4
6655	 5CF	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6656	 5D1	ADD		 	 
- stack 0: 0x7A8
6657	 5D2	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6658	 5D3	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
6659	 5D4	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
- stack 0: 0xF0
6660	 5D6	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x95
6661	 5D7	JUMP		 	 
- stack 0: 0x7A8
6662	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x7A8
6663	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
6664	 97	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
6665	 98	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
- stack 0: 0xE0
6666	 9A	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x950122
6667	 9B	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x950122
- stack 0: 0xFFFF
6668	 9E	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x122
6669	 9F	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x1
6670	 A1	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x122
6671	 A2	PUSH2	0020	 	 
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x20
6672	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x33001000
6673	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x7A8
- stack 0: 0x33001122
6674	 A7	PUSH2	0020	 	 
- stack 2: 0x7A8
- stack 1: 0x33001122
- stack 0: 0x20
6675	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A8
6676	 AB	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6677	 AD	ADD		 	 
- stack 0: 0x7AC
6678	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6679	 AF	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
6680	 B0	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
- stack 0: 0xF0
6681	 B2	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7
6682	 B3	JUMP		 	 
- stack 0: 0x7AC
6683	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7AC
6684	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
6685	 4B9	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
6686	 4BA	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
- stack 0: 0xE0
6687	 4BC	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x4B70000
6688	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6689	 4C0	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x0
6690	 4C1	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x0
- stack 0: 0x1
6691	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x0
6692	 4C4	POP		 	 
- stack 0: 0x7AC
6693	 4C5	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6694	 4C7	ADD		 	 
- stack 0: 0x7B0
6695	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6696	 4C9	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
6697	 4CA	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
- stack 0: 0xF0
6698	 4CC	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7
6699	 4CD	JUMP		 	 
- stack 0: 0x7B0
6700	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7B0
6701	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
6702	 4B9	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
6703	 4BA	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
- stack 0: 0xE0
6704	 4BC	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x4B70000
6705	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6706	 4C0	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6707	 4C1	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x1
6708	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6709	 4C4	POP		 	 
- stack 0: 0x7B0
6710	 4C5	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6711	 4C7	ADD		 	 
- stack 0: 0x7B4
6712	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6713	 4C9	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
6714	 4CA	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
- stack 0: 0xF0
6715	 4CC	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3B7
6716	 4CD	JUMP		 	 
- stack 0: 0x7B4
6717	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x7B4
6718	 3B8	PUSH2	0040	 	 
- stack 1: 0x7B4
- stack 0: 0x40
6719	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x7B4
- stack 0: 0x8D0
6720	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x7B4
6721	 3BD	MLOAD		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
6722	 3BE	PUSH1	E0	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
- stack 0: 0xE0
6723	 3C0	SHR		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x3B70008
6724	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x3B70008
- stack 0: 0xFFFF
6725	 3C4	AND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x8
6726	 3C5	PUSH1	01	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
6727	 3C7	SIGNEXTEND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x8
6728	 3C8	ADD		 	 
- stack 1: 0x7B4
- stack 0: 0x8D8
6729	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
6730	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x8D8
6731	 3CF	DUP1		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0x8D8
6732	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
6733	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xDDAABBCCCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
6734	 3F2	AND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
6735	 3F3	PUSH2	0020	 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x20
6736	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x33001122
6737	 3F7	PUSH1	E0	 	 
- stack 4: 0x7B4
- stack 3: 0x8D8
- stack 2: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 1: 0x33001122
- stack 0: 0xE0
6738	 3F9	SHL		 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x3300112200000000000000000000000000000000000000000000000000000000
6739	 3FA	ADD		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
6740	 3FB	SWAP1		 	 
- stack 2: 0x7B4
- stack 1: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x8D8
6741	 3FC	MSTORE		 	 
- stack 0: 0x7B4
6742	 3FD	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6743	 3FF	ADD		 	 
- stack 0: 0x7B8
6744	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6745	 401	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
6746	 402	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
- stack 0: 0xF0
6747	 404	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x406
6748	 405	JUMP		 	 
- stack 0: 0x7B8
6749	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x7B8
6750	 407	PUSH2	0040	 	 
- stack 1: 0x7B8
- stack 0: 0x40
6751	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x7B8
- stack 0: 0x8D0
6752	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
6753	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x8D0
6754	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x7B8
6755	 412	MLOAD		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
6756	 413	PUSH1	E0	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
- stack 0: 0xE0
6757	 415	SHR		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x4060008
6758	 416	PUSH2	FFFF	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x4060008
- stack 0: 0xFFFF
6759	 419	AND		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x8
6760	 41A	PUSH1	01	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
6761	 41C	SIGNEXTEND		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x8
6762	 41D	ADD		 	 
- stack 1: 0x7B8
- stack 0: 0x8D8
6763	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
6764	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x8D8
6765	 424	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
6766	 425	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0xE0
6767	 427	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x33001122
6768	 428	PUSH2	0060	 	 
- stack 2: 0x7B8
- stack 1: 0x33001122
- stack 0: 0x60
6769	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x7B8
6770	 42C	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6771	 42E	ADD		 	 
- stack 0: 0x7BC
6772	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6773	 430	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x5D830010177012201B000D0031A0001044800020462FFCC01960015037B0000
6774	 431	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x5D830010177012201B000D0031A0001044800020462FFCC01960015037B0000
- stack 0: 0xF0
6775	 433	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x5D8
6776	 434	JUMP		 	 
- stack 0: 0x7BC
6777	 5D8	JUMPDEST		 ;; __riscvimpl_LUI_33001eb7	  ;; # instr: lui t4,0x33001(ignore imm)
- stack 0: 0x7BC
6778	 5D9	PUSH4	33001000	 	 
- stack 1: 0x7BC
- stack 0: 0x33001000
6779	 5DE	PUSH2	03A0	 	 
- stack 2: 0x7BC
- stack 1: 0x33001000
- stack 0: 0x3A0
6780	 5E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7BC
6781	 5E2	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6782	 5E4	ADD		 	 
- stack 0: 0x7C0
6783	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6784	 5E6	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
6785	 5E7	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
- stack 0: 0xF0
6786	 5E9	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x177
6787	 5EA	JUMP		 	 
- stack 0: 0x7C0
6788	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x7C0
6789	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6790	 179	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
6791	 17A	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
- stack 0: 0xE0
6792	 17C	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x1770122
6793	 17D	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x1770122
- stack 0: 0xFFFF
6794	 180	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x122
6795	 181	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x1
6796	 183	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x122
6797	 184	PUSH2	03A0	 	 
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x3A0
6798	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x33001000
6799	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x7C0
- stack 0: 0x33001122
6800	 189	PUSH2	03A0	 	 
- stack 2: 0x7C0
- stack 1: 0x33001122
- stack 0: 0x3A0
6801	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7C0
6802	 18D	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6803	 18F	ADD		 	 
- stack 0: 0x7C4
6804	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6805	 191	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B000D0031A0001044800020462FFCC01960015037B000003A8000000C700F4
6806	 192	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B000D0031A0001044800020462FFCC01960015037B000003A8000000C700F4
- stack 0: 0xF0
6807	 194	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B0
6808	 195	JUMP		 	 
- stack 0: 0x7C4
6809	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x7C4
6810	 1B1	PUSH2	0060	 	 
- stack 1: 0x7C4
- stack 0: 0x60
6811	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x7C4
- stack 0: 0x33001122
6812	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0xFFFFFFFF
6813	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C4
- stack 0: 0x33001122
6814	 1BB	PUSH2	03A0	 	 
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x3A0
6815	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x33001122
6816	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7C4
- stack 2: 0x33001122
- stack 1: 0x33001122
- stack 0: 0xFFFFFFFF
6817	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x33001122
6818	 1C5	SUB		 	 
- stack 1: 0x7C4
- stack 0: 0x0
6819	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1CE
6820	 1C9	JUMPI		 	 
- stack 0: 0x7C4
6821	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x7C4
- stack 0: 0x1E8
6822	 1CD	JUMP		 	 
- stack 0: 0x7C4
6823	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x7C4
6824	 1E9	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6825	 1EB	ADD		 	 
- stack 0: 0x7C8
6826	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6827	 1ED	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
6828	 1EE	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
- stack 0: 0xF0
6829	 1F0	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x31A
6830	 1F1	JUMP		 	 
- stack 0: 0x7C8
6831	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x7C8
6832	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6833	 31C	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
6834	 31D	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
- stack 0: 0xE0
6835	 31F	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001
6836	 320	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001
- stack 0: 0xFFFF
6837	 323	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
6838	 324	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
6839	 326	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
6840	 327	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
6841	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x0
6842	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x7C8
- stack 0: 0x1
6843	 32C	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
6844	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
6845	 330	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6846	 332	ADD		 	 
- stack 0: 0x7CC
6847	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6848	 334	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
6849	 335	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
- stack 0: 0xF0
6850	 337	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x448
6851	 338	JUMP		 	 
- stack 0: 0x7CC
6852	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7CC
6853	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
6854	 44A	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
6855	 44B	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
- stack 0: 0xE0
6856	 44D	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x4480002
6857	 44E	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x4480002
- stack 0: 0xFFFF
6858	 451	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
6859	 452	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x1
6860	 454	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
6861	 455	PUSH2	00A0	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0xA0
6862	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x7CC
6863	 459	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6864	 45B	ADD		 	 
- stack 0: 0x7D0
6865	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6866	 45D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
6867	 45E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
- stack 0: 0xF0
6868	 460	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x462
6869	 461	JUMP		 	 
- stack 0: 0x7D0
6870	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7D0
6871	 463	PUSH2	0080	 	 
- stack 1: 0x7D0
- stack 0: 0x80
6872	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D0
- stack 0: 0x1
6873	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6874	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0x1
6875	 46D	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0xA0
6876	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x2
6877	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6878	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x2
6879	 477	SUB		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6880	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x480
6881	 47B	JUMPI		 	 
- stack 0: 0x7D0
6882	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x7D0
6883	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6884	 482	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
6885	 483	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
- stack 0: 0xE0
6886	 485	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x462FFCC
6887	 486	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
6888	 489	AND		 	 
- stack 1: 0x7D0
- stack 0: 0xFFCC
6889	 48A	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0xFFCC
- stack 0: 0x1
6890	 48C	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
6891	 48D	ADD		 	 
- stack 0: 0x79C
6892	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x79C
- stack 0: 0xFFFFFFFF
6893	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x79C
6894	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6895	 495	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x3A8000000C7013405C530010095012204B7000004B7000003B7000804060008
6896	 496	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x3A8000000C7013405C530010095012204B7000004B7000003B7000804060008
- stack 0: 0xF0
6897	 498	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x3A8
6898	 499	JUMP		 	 
- stack 0: 0x79C
6899	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x79C
6900	 3A9	DUP1		 	 
- stack 1: 0x79C
- stack 0: 0x79C
6901	 3AA	PUSH2	0040	 	 
- stack 2: 0x79C
- stack 1: 0x79C
- stack 0: 0x40
6902	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x79C
6903	 3AE	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6904	 3B0	ADD		 	 
- stack 0: 0x7A0
6905	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6906	 3B2	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
6907	 3B3	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
- stack 0: 0xF0
6908	 3B5	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xC7
6909	 3B6	JUMP		 	 
- stack 0: 0x7A0
6910	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x7A0
6911	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
6912	 C9	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
6913	 CA	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0xC7013405C530010095012204B7000004B7000003B700080406000805D83001
- stack 0: 0xE0
6914	 CC	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0xC70134
6915	 CD	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0xC70134
- stack 0: 0xFFFF
6916	 D0	AND		 	 
- stack 1: 0x7A0
- stack 0: 0x134
6917	 D1	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x1
6918	 D3	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0x134
6919	 D4	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x40
6920	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x7A0
- stack 1: 0x134
- stack 0: 0x79C
6921	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x7A0
- stack 0: 0x8D0
6922	 D9	PUSH2	0040	 	 
- stack 2: 0x7A0
- stack 1: 0x8D0
- stack 0: 0x40
6923	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x7A0
6924	 DD	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6925	 DF	ADD		 	 
- stack 0: 0x7A4
6926	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6927	 E1	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x5C530010095012204B7000004B7000003B700080406000805D8300101770122
6928	 E2	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x5C530010095012204B7000004B7000003B700080406000805D8300101770122
- stack 0: 0xF0
6929	 E4	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x5C5
6930	 E5	JUMP		 	 
- stack 0: 0x7A4
6931	 5C5	JUMPDEST		 ;; __riscvimpl_LUI_330010b7	  ;; # instr: lui ra,0x33001(ignore imm)
- stack 0: 0x7A4
6932	 5C6	PUSH4	33001000	 	 
- stack 1: 0x7A4
- stack 0: 0x33001000
6933	 5CB	PUSH2	0020	 	 
- stack 2: 0x7A4
- stack 1: 0x33001000
- stack 0: 0x20
6934	 5CE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A4
6935	 5CF	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6936	 5D1	ADD		 	 
- stack 0: 0x7A8
6937	 5D2	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6938	 5D3	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
6939	 5D4	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
- stack 0: 0xF0
6940	 5D6	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x95
6941	 5D7	JUMP		 	 
- stack 0: 0x7A8
6942	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x7A8
6943	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
6944	 97	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
6945	 98	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x95012204B7000004B7000003B700080406000805D830010177012201B000D0
- stack 0: 0xE0
6946	 9A	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x950122
6947	 9B	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x950122
- stack 0: 0xFFFF
6948	 9E	AND		 	 
- stack 1: 0x7A8
- stack 0: 0x122
6949	 9F	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x1
6950	 A1	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0x122
6951	 A2	PUSH2	0020	 	 
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x20
6952	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7A8
- stack 1: 0x122
- stack 0: 0x33001000
6953	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x7A8
- stack 0: 0x33001122
6954	 A7	PUSH2	0020	 	 
- stack 2: 0x7A8
- stack 1: 0x33001122
- stack 0: 0x20
6955	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x7A8
6956	 AB	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6957	 AD	ADD		 	 
- stack 0: 0x7AC
6958	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6959	 AF	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
6960	 B0	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
- stack 0: 0xF0
6961	 B2	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7
6962	 B3	JUMP		 	 
- stack 0: 0x7AC
6963	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7AC
6964	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
6965	 4B9	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
6966	 4BA	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x4B7000004B7000003B700080406000805D830010177012201B000D0031A0001
- stack 0: 0xE0
6967	 4BC	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x4B70000
6968	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6969	 4C0	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x0
6970	 4C1	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x0
- stack 0: 0x1
6971	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x0
6972	 4C4	POP		 	 
- stack 0: 0x7AC
6973	 4C5	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6974	 4C7	ADD		 	 
- stack 0: 0x7B0
6975	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6976	 4C9	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
6977	 4CA	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
- stack 0: 0xF0
6978	 4CC	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7
6979	 4CD	JUMP		 	 
- stack 0: 0x7B0
6980	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7B0
6981	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B0
- stack 0: 0x7B0
6982	 4B9	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
6983	 4BA	PUSH1	E0	 	 
- stack 2: 0x7B0
- stack 1: 0x4B7000003B700080406000805D830010177012201B000D0031A000104480002
- stack 0: 0xE0
6984	 4BC	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x4B70000
6985	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7B0
- stack 1: 0x4B70000
- stack 0: 0xFFFF
6986	 4C0	AND		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6987	 4C1	PUSH1	01	 	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x1
6988	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6989	 4C4	POP		 	 
- stack 0: 0x7B0
6990	 4C5	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6991	 4C7	ADD		 	 
- stack 0: 0x7B4
6992	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6993	 4C9	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
6994	 4CA	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
- stack 0: 0xF0
6995	 4CC	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x3B7
6996	 4CD	JUMP		 	 
- stack 0: 0x7B4
6997	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x7B4
6998	 3B8	PUSH2	0040	 	 
- stack 1: 0x7B4
- stack 0: 0x40
6999	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x7B4
- stack 0: 0x8D0
7000	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x7B4
7001	 3BD	MLOAD		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
7002	 3BE	PUSH1	E0	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x3B700080406000805D830010177012201B000D0031A0001044800020462FFCC
- stack 0: 0xE0
7003	 3C0	SHR		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x3B70008
7004	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x3B70008
- stack 0: 0xFFFF
7005	 3C4	AND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x8
7006	 3C5	PUSH1	01	 	 
- stack 3: 0x7B4
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
7007	 3C7	SIGNEXTEND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D0
- stack 0: 0x8
7008	 3C8	ADD		 	 
- stack 1: 0x7B4
- stack 0: 0x8D8
7009	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
7010	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B4
- stack 0: 0x8D8
7011	 3CF	DUP1		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0x8D8
7012	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
7013	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7014	 3F2	AND		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
7015	 3F3	PUSH2	0020	 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x20
7016	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x33001122
7017	 3F7	PUSH1	E0	 	 
- stack 4: 0x7B4
- stack 3: 0x8D8
- stack 2: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 1: 0x33001122
- stack 0: 0xE0
7018	 3F9	SHL		 	 
- stack 3: 0x7B4
- stack 2: 0x8D8
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x3300112200000000000000000000000000000000000000000000000000000000
7019	 3FA	ADD		 	 
- stack 2: 0x7B4
- stack 1: 0x8D8
- stack 0: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
7020	 3FB	SWAP1		 	 
- stack 2: 0x7B4
- stack 1: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0x8D8
7021	 3FC	MSTORE		 	 
- stack 0: 0x7B4
7022	 3FD	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
7023	 3FF	ADD		 	 
- stack 0: 0x7B8
7024	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
7025	 401	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
7026	 402	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
- stack 0: 0xF0
7027	 404	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x406
7028	 405	JUMP		 	 
- stack 0: 0x7B8
7029	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x7B8
7030	 407	PUSH2	0040	 	 
- stack 1: 0x7B8
- stack 0: 0x40
7031	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x7B8
- stack 0: 0x8D0
7032	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7033	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x8D0
7034	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x7B8
7035	 412	MLOAD		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
7036	 413	PUSH1	E0	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x406000805D830010177012201B000D0031A0001044800020462FFCC01960015
- stack 0: 0xE0
7037	 415	SHR		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x4060008
7038	 416	PUSH2	FFFF	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x4060008
- stack 0: 0xFFFF
7039	 419	AND		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x8
7040	 41A	PUSH1	01	 	 
- stack 3: 0x7B8
- stack 2: 0x8D0
- stack 1: 0x8
- stack 0: 0x1
7041	 41C	SIGNEXTEND		 	 
- stack 2: 0x7B8
- stack 1: 0x8D0
- stack 0: 0x8
7042	 41D	ADD		 	 
- stack 1: 0x7B8
- stack 0: 0x8D8
7043	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B8
- stack 1: 0x8D8
- stack 0: 0xFFFFFFFF
7044	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B8
- stack 0: 0x8D8
7045	 424	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
7046	 425	PUSH1	E0	 	 
- stack 2: 0x7B8
- stack 1: 0x33001122CDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A1234567858213098
- stack 0: 0xE0
7047	 427	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0x33001122
7048	 428	PUSH2	0060	 	 
- stack 2: 0x7B8
- stack 1: 0x33001122
- stack 0: 0x60
7049	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x7B8
7050	 42C	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
7051	 42E	ADD		 	 
- stack 0: 0x7BC
7052	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
7053	 430	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0x5D830010177012201B000D0031A0001044800020462FFCC01960015037B0000
7054	 431	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0x5D830010177012201B000D0031A0001044800020462FFCC01960015037B0000
- stack 0: 0xF0
7055	 433	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0x5D8
7056	 434	JUMP		 	 
- stack 0: 0x7BC
7057	 5D8	JUMPDEST		 ;; __riscvimpl_LUI_33001eb7	  ;; # instr: lui t4,0x33001(ignore imm)
- stack 0: 0x7BC
7058	 5D9	PUSH4	33001000	 	 
- stack 1: 0x7BC
- stack 0: 0x33001000
7059	 5DE	PUSH2	03A0	 	 
- stack 2: 0x7BC
- stack 1: 0x33001000
- stack 0: 0x3A0
7060	 5E1	MSTORE		 	  ;; # store to x29
- stack 0: 0x7BC
7061	 5E2	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
7062	 5E4	ADD		 	 
- stack 0: 0x7C0
7063	 5E5	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
7064	 5E6	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
7065	 5E7	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
- stack 0: 0xF0
7066	 5E9	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x177
7067	 5EA	JUMP		 	 
- stack 0: 0x7C0
7068	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x7C0
7069	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
7070	 179	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
7071	 17A	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x177012201B000D0031A0001044800020462FFCC01960015037B000003A80000
- stack 0: 0xE0
7072	 17C	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x1770122
7073	 17D	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x1770122
- stack 0: 0xFFFF
7074	 180	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x122
7075	 181	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x1
7076	 183	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x122
7077	 184	PUSH2	03A0	 	 
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x3A0
7078	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x7C0
- stack 1: 0x122
- stack 0: 0x33001000
7079	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x7C0
- stack 0: 0x33001122
7080	 189	PUSH2	03A0	 	 
- stack 2: 0x7C0
- stack 1: 0x33001122
- stack 0: 0x3A0
7081	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7C0
7082	 18D	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
7083	 18F	ADD		 	 
- stack 0: 0x7C4
7084	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
7085	 191	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x1B000D0031A0001044800020462FFCC01960015037B000003A8000000C700F4
7086	 192	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x1B000D0031A0001044800020462FFCC01960015037B000003A8000000C700F4
- stack 0: 0xF0
7087	 194	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x1B0
7088	 195	JUMP		 	 
- stack 0: 0x7C4
7089	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x7C4
7090	 1B1	PUSH2	0060	 	 
- stack 1: 0x7C4
- stack 0: 0x60
7091	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x7C4
- stack 0: 0x33001122
7092	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0xFFFFFFFF
7093	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7C4
- stack 0: 0x33001122
7094	 1BB	PUSH2	03A0	 	 
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x3A0
7095	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x33001122
7096	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7C4
- stack 2: 0x33001122
- stack 1: 0x33001122
- stack 0: 0xFFFFFFFF
7097	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7C4
- stack 1: 0x33001122
- stack 0: 0x33001122
7098	 1C5	SUB		 	 
- stack 1: 0x7C4
- stack 0: 0x0
7099	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x7C4
- stack 1: 0x0
- stack 0: 0x1CE
7100	 1C9	JUMPI		 	 
- stack 0: 0x7C4
7101	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x7C4
- stack 0: 0x1E8
7102	 1CD	JUMP		 	 
- stack 0: 0x7C4
7103	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x7C4
7104	 1E9	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
7105	 1EB	ADD		 	 
- stack 0: 0x7C8
7106	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
7107	 1ED	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
7108	 1EE	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
- stack 0: 0xF0
7109	 1F0	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x31A
7110	 1F1	JUMP		 	 
- stack 0: 0x7C8
7111	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x7C8
7112	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
7113	 31C	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
7114	 31D	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001044800020462FFCC01960015037B000003A8000000C700F404B70000
- stack 0: 0xE0
7115	 31F	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x31A0001
7116	 320	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x31A0001
- stack 0: 0xFFFF
7117	 323	AND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
7118	 324	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
7119	 326	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0x1
7120	 327	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x80
7121	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x7C8
- stack 1: 0x1
- stack 0: 0x1
7122	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x7C8
- stack 0: 0x2
7123	 32C	PUSH2	0080	 	 
- stack 2: 0x7C8
- stack 1: 0x2
- stack 0: 0x80
7124	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x7C8
7125	 330	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
7126	 332	ADD		 	 
- stack 0: 0x7CC
7127	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
7128	 334	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
7129	 335	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
- stack 0: 0xF0
7130	 337	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x448
7131	 338	JUMP		 	 
- stack 0: 0x7CC
7132	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7CC
7133	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7CC
- stack 0: 0x7CC
7134	 44A	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
7135	 44B	PUSH1	E0	 	 
- stack 2: 0x7CC
- stack 1: 0x44800020462FFCC01960015037B000003A8000000C700F404B7000005EB3300
- stack 0: 0xE0
7136	 44D	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0x4480002
7137	 44E	PUSH2	FFFF	 	 
- stack 2: 0x7CC
- stack 1: 0x4480002
- stack 0: 0xFFFF
7138	 451	AND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
7139	 452	PUSH1	01	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0x1
7140	 454	SIGNEXTEND		 	 
- stack 1: 0x7CC
- stack 0: 0x2
7141	 455	PUSH2	00A0	 	 
- stack 2: 0x7CC
- stack 1: 0x2
- stack 0: 0xA0
7142	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x7CC
7143	 459	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
7144	 45B	ADD		 	 
- stack 0: 0x7D0
7145	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
7146	 45D	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
7147	 45E	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x462FFCC01960015037B000003A8000000C700F404B7000005EB330000950112
- stack 0: 0xF0
7148	 460	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x462
7149	 461	JUMP		 	 
- stack 0: 0x7D0
7150	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x7D0
7151	 463	PUSH2	0080	 	 
- stack 1: 0x7D0
- stack 0: 0x80
7152	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D0
- stack 0: 0x2
7153	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7154	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D0
- stack 0: 0x2
7155	 46D	PUSH2	00A0	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0xA0
7156	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x2
7157	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7158	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x2
7159	 477	SUB		 	 
- stack 1: 0x7D0
- stack 0: 0x0
7160	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x7D0
- stack 1: 0x0
- stack 0: 0x480
7161	 47B	JUMPI		 	 
- stack 0: 0x7D0
7162	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x7D0
- stack 0: 0x49A
7163	 47F	JUMP		 	 
- stack 0: 0x7D0
7164	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x7D0
7165	 49B	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
7166	 49D	ADD		 	 
- stack 0: 0x7D4
7167	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
7168	 49F	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x1960015037B000003A8000000C700F404B7000005EB33000095011203B7000C
7169	 4A0	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x1960015037B000003A8000000C700F404B7000005EB33000095011203B7000C
- stack 0: 0xF0
7170	 4A2	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x196
7171	 4A3	JUMP		 	 
- stack 0: 0x7D4
7172	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7D4
7173	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
7174	 198	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x1960015037B000003A8000000C700F404B7000005EB33000095011203B7000C
7175	 199	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x1960015037B000003A8000000C700F404B7000005EB33000095011203B7000C
- stack 0: 0xE0
7176	 19B	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x1960015
7177	 19C	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x1960015
- stack 0: 0xFFFF
7178	 19F	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x15
7179	 1A0	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x15
- stack 0: 0x1
7180	 1A2	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x15
7181	 1A3	PUSH2	0380	 	 
- stack 2: 0x7D4
- stack 1: 0x15
- stack 0: 0x380
7182	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x7D4
7183	 1A7	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
7184	 1A9	ADD		 	 
- stack 0: 0x7D8
7185	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
7186	 1AB	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x37B000003A8000000C700F404B7000005EB33000095011203B7000C0406000C
7187	 1AC	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x37B000003A8000000C700F404B7000005EB33000095011203B7000C0406000C
- stack 0: 0xF0
7188	 1AE	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x37B
7189	 1AF	JUMP		 	 
- stack 0: 0x7D8
7190	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7D8
7191	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
7192	 37D	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x37B000003A8000000C700F404B7000005EB33000095011203B7000C0406000C
7193	 37E	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x37B000003A8000000C700F404B7000005EB33000095011203B7000C0406000C
- stack 0: 0xE0
7194	 380	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x37B0000
7195	 381	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x37B0000
- stack 0: 0xFFFF
7196	 384	AND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
7197	 385	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x1
7198	 387	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0x0
7199	 388	PUSH2	0080	 	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x80
7200	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D8
7201	 38C	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
7202	 38E	ADD		 	 
- stack 0: 0x7DC
7203	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7204	 390	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x3A8000000C700F404B7000005EB33000095011203B7000C0406000C05FE3300
7205	 391	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x3A8000000C700F404B7000005EB33000095011203B7000C0406000C05FE3300
- stack 0: 0xF0
7206	 393	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x3A8
7207	 394	JUMP		 	 
- stack 0: 0x7DC
7208	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7DC
7209	 3A9	DUP1		 	 
- stack 1: 0x7DC
- stack 0: 0x7DC
7210	 3AA	PUSH2	0040	 	 
- stack 2: 0x7DC
- stack 1: 0x7DC
- stack 0: 0x40
7211	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x7DC
7212	 3AE	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7213	 3B0	ADD		 	 
- stack 0: 0x7E0
7214	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7215	 3B2	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
7216	 3B3	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
- stack 0: 0xF0
7217	 3B5	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0xC7
7218	 3B6	JUMP		 	 
- stack 0: 0x7E0
7219	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x7E0
7220	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
7221	 C9	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
7222	 CA	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
- stack 0: 0xE0
7223	 CC	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F4
7224	 CD	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F4
- stack 0: 0xFFFF
7225	 D0	AND		 	 
- stack 1: 0x7E0
- stack 0: 0xF4
7226	 D1	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x1
7227	 D3	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0xF4
7228	 D4	PUSH2	0040	 	 
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x40
7229	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x7DC
7230	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x7E0
- stack 0: 0x8D0
7231	 D9	PUSH2	0040	 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x40
7232	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x7E0
7233	 DD	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7234	 DF	ADD		 	 
- stack 0: 0x7E4
7235	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7236	 E1	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
7237	 E2	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
- stack 0: 0xF0
7238	 E4	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7
7239	 E5	JUMP		 	 
- stack 0: 0x7E4
7240	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7E4
7241	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7242	 4B9	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
7243	 4BA	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
- stack 0: 0xE0
7244	 4BC	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x4B70000
7245	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x4B70000
- stack 0: 0xFFFF
7246	 4C0	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
7247	 4C1	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x1
7248	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
7249	 4C4	POP		 	 
- stack 0: 0x7E4
7250	 4C5	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7251	 4C7	ADD		 	 
- stack 0: 0x7E8
7252	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7253	 4C9	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x5EB33000095011203B7000C0406000C05FE33000177011201B00094031A0001
7254	 4CA	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x5EB33000095011203B7000C0406000C05FE33000177011201B00094031A0001
- stack 0: 0xF0
7255	 4CC	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x5EB
7256	 4CD	JUMP		 	 
- stack 0: 0x7E8
7257	 5EB	JUMPDEST		 ;; __riscvimpl_LUI_233000b7	  ;; # instr: lui ra,0x23300(ignore imm)
- stack 0: 0x7E8
7258	 5EC	PUSH4	23300000	 	 
- stack 1: 0x7E8
- stack 0: 0x23300000
7259	 5F1	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x23300000
- stack 0: 0x20
7260	 5F4	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
7261	 5F5	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7262	 5F7	ADD		 	 
- stack 0: 0x7EC
7263	 5F8	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7264	 5F9	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
7265	 5FA	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
- stack 0: 0xF0
7266	 5FC	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x95
7267	 5FD	JUMP		 	 
- stack 0: 0x7EC
7268	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x7EC
7269	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
7270	 97	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
7271	 98	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
- stack 0: 0xE0
7272	 9A	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x950112
7273	 9B	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x950112
- stack 0: 0xFFFF
7274	 9E	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x112
7275	 9F	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x1
7276	 A1	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x112
7277	 A2	PUSH2	0020	 	 
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x20
7278	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x23300000
7279	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x7EC
- stack 0: 0x23300112
7280	 A7	PUSH2	0020	 	 
- stack 2: 0x7EC
- stack 1: 0x23300112
- stack 0: 0x20
7281	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x7EC
7282	 AB	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
7283	 AD	ADD		 	 
- stack 0: 0x7F0
7284	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
7285	 AF	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
7286	 B0	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
- stack 0: 0xF0
7287	 B2	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x3B7
7288	 B3	JUMP		 	 
- stack 0: 0x7F0
7289	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x7F0
7290	 3B8	PUSH2	0040	 	 
- stack 1: 0x7F0
- stack 0: 0x40
7291	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x7F0
- stack 0: 0x8D0
7292	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x7F0
7293	 3BD	MLOAD		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
7294	 3BE	PUSH1	E0	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
- stack 0: 0xE0
7295	 3C0	SHR		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x3B7000C
7296	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0x3B7000C
- stack 0: 0xFFFF
7297	 3C4	AND		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0xC
7298	 3C5	PUSH1	01	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
7299	 3C7	SIGNEXTEND		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0xC
7300	 3C8	ADD		 	 
- stack 1: 0x7F0
- stack 0: 0x8DC
7301	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
7302	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F0
- stack 0: 0x8DC
7303	 3CF	DUP1		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0x8DC
7304	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7305	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCDDAABBCCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7306	 3F2	AND		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7307	 3F3	PUSH2	0020	 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x20
7308	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x23300112
7309	 3F7	PUSH1	E0	 	 
- stack 4: 0x7F0
- stack 3: 0x8DC
- stack 2: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 1: 0x23300112
- stack 0: 0xE0
7310	 3F9	SHL		 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x2330011200000000000000000000000000000000000000000000000000000000
7311	 3FA	ADD		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7312	 3FB	SWAP1		 	 
- stack 2: 0x7F0
- stack 1: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x8DC
7313	 3FC	MSTORE		 	 
- stack 0: 0x7F0
7314	 3FD	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
7315	 3FF	ADD		 	 
- stack 0: 0x7F4
7316	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
7317	 401	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
7318	 402	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
- stack 0: 0xF0
7319	 404	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x406
7320	 405	JUMP		 	 
- stack 0: 0x7F4
7321	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x7F4
7322	 407	PUSH2	0040	 	 
- stack 1: 0x7F4
- stack 0: 0x40
7323	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x7F4
- stack 0: 0x8D0
7324	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7325	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x8D0
7326	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x7F4
7327	 412	MLOAD		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
7328	 413	PUSH1	E0	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
- stack 0: 0xE0
7329	 415	SHR		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x406000C
7330	 416	PUSH2	FFFF	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0x406000C
- stack 0: 0xFFFF
7331	 419	AND		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xC
7332	 41A	PUSH1	01	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
7333	 41C	SIGNEXTEND		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xC
7334	 41D	ADD		 	 
- stack 1: 0x7F4
- stack 0: 0x8DC
7335	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
7336	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x8DC
7337	 424	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7338	 425	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xE0
7339	 427	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x23300112
7340	 428	PUSH2	0060	 	 
- stack 2: 0x7F4
- stack 1: 0x23300112
- stack 0: 0x60
7341	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F4
7342	 42C	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
7343	 42E	ADD		 	 
- stack 0: 0x7F8
7344	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
7345	 430	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x5FE33000177011201B00094031A0001044800020462FFD001960016037B0000
7346	 431	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x5FE33000177011201B00094031A0001044800020462FFD001960016037B0000
- stack 0: 0xF0
7347	 433	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x5FE
7348	 434	JUMP		 	 
- stack 0: 0x7F8
7349	 5FE	JUMPDEST		 ;; __riscvimpl_LUI_23300eb7	  ;; # instr: lui t4,0x23300(ignore imm)
- stack 0: 0x7F8
7350	 5FF	PUSH4	23300000	 	 
- stack 1: 0x7F8
- stack 0: 0x23300000
7351	 604	PUSH2	03A0	 	 
- stack 2: 0x7F8
- stack 1: 0x23300000
- stack 0: 0x3A0
7352	 607	MSTORE		 	  ;; # store to x29
- stack 0: 0x7F8
7353	 608	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
7354	 60A	ADD		 	 
- stack 0: 0x7FC
7355	 60B	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
7356	 60C	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
7357	 60D	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
- stack 0: 0xF0
7358	 60F	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x177
7359	 610	JUMP		 	 
- stack 0: 0x7FC
7360	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x7FC
7361	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
7362	 179	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
7363	 17A	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
- stack 0: 0xE0
7364	 17C	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x1770112
7365	 17D	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x1770112
- stack 0: 0xFFFF
7366	 180	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x112
7367	 181	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x1
7368	 183	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x112
7369	 184	PUSH2	03A0	 	 
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x3A0
7370	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x23300000
7371	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x7FC
- stack 0: 0x23300112
7372	 189	PUSH2	03A0	 	 
- stack 2: 0x7FC
- stack 1: 0x23300112
- stack 0: 0x3A0
7373	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7FC
7374	 18D	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
7375	 18F	ADD		 	 
- stack 0: 0x800
7376	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
7377	 191	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x1B00094031A0001044800020462FFD001960016037B000003A8000000C700B8
7378	 192	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x1B00094031A0001044800020462FFD001960016037B000003A8000000C700B8
- stack 0: 0xF0
7379	 194	SHR		 	 
- stack 1: 0x800
- stack 0: 0x1B0
7380	 195	JUMP		 	 
- stack 0: 0x800
7381	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x800
7382	 1B1	PUSH2	0060	 	 
- stack 1: 0x800
- stack 0: 0x60
7383	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x800
- stack 0: 0x23300112
7384	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0xFFFFFFFF
7385	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0x23300112
7386	 1BB	PUSH2	03A0	 	 
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x3A0
7387	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x23300112
7388	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x800
- stack 2: 0x23300112
- stack 1: 0x23300112
- stack 0: 0xFFFFFFFF
7389	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x23300112
7390	 1C5	SUB		 	 
- stack 1: 0x800
- stack 0: 0x0
7391	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x1CE
7392	 1C9	JUMPI		 	 
- stack 0: 0x800
7393	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x800
- stack 0: 0x1E8
7394	 1CD	JUMP		 	 
- stack 0: 0x800
7395	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x800
7396	 1E9	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
7397	 1EB	ADD		 	 
- stack 0: 0x804
7398	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
7399	 1ED	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
7400	 1EE	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
- stack 0: 0xF0
7401	 1F0	SHR		 	 
- stack 1: 0x804
- stack 0: 0x31A
7402	 1F1	JUMP		 	 
- stack 0: 0x804
7403	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x804
7404	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
7405	 31C	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
7406	 31D	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
- stack 0: 0xE0
7407	 31F	SHR		 	 
- stack 1: 0x804
- stack 0: 0x31A0001
7408	 320	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x31A0001
- stack 0: 0xFFFF
7409	 323	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
7410	 324	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
7411	 326	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
7412	 327	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
7413	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x0
7414	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x1
7415	 32C	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
7416	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
7417	 330	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
7418	 332	ADD		 	 
- stack 0: 0x808
7419	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
7420	 334	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
7421	 335	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
- stack 0: 0xF0
7422	 337	SHR		 	 
- stack 1: 0x808
- stack 0: 0x448
7423	 338	JUMP		 	 
- stack 0: 0x808
7424	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
7425	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
7426	 44A	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
7427	 44B	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
- stack 0: 0xE0
7428	 44D	SHR		 	 
- stack 1: 0x808
- stack 0: 0x4480002
7429	 44E	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x4480002
- stack 0: 0xFFFF
7430	 451	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
7431	 452	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
7432	 454	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
7433	 455	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
7434	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
7435	 459	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
7436	 45B	ADD		 	 
- stack 0: 0x80C
7437	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
7438	 45D	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
7439	 45E	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
- stack 0: 0xF0
7440	 460	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x462
7441	 461	JUMP		 	 
- stack 0: 0x80C
7442	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x80C
7443	 463	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
7444	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x1
7445	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7446	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x1
7447	 46D	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0xA0
7448	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
7449	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7450	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x2
7451	 477	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x1
7452	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x480
7453	 47B	JUMPI		 	 
- stack 0: 0x80C
7454	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x80C
7455	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
7456	 482	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
7457	 483	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
- stack 0: 0xE0
7458	 485	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x462FFD0
7459	 486	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x462FFD0
- stack 0: 0xFFFF
7460	 489	AND		 	 
- stack 1: 0x80C
- stack 0: 0xFFD0
7461	 48A	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0xFFD0
- stack 0: 0x1
7462	 48C	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
7463	 48D	ADD		 	 
- stack 0: 0x7DC
7464	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7DC
- stack 0: 0xFFFFFFFF
7465	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7DC
7466	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
7467	 495	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x3A8000000C700F404B7000005EB33000095011203B7000C0406000C05FE3300
7468	 496	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x3A8000000C700F404B7000005EB33000095011203B7000C0406000C05FE3300
- stack 0: 0xF0
7469	 498	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x3A8
7470	 499	JUMP		 	 
- stack 0: 0x7DC
7471	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x7DC
7472	 3A9	DUP1		 	 
- stack 1: 0x7DC
- stack 0: 0x7DC
7473	 3AA	PUSH2	0040	 	 
- stack 2: 0x7DC
- stack 1: 0x7DC
- stack 0: 0x40
7474	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x7DC
7475	 3AE	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
7476	 3B0	ADD		 	 
- stack 0: 0x7E0
7477	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
7478	 3B2	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
7479	 3B3	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
- stack 0: 0xF0
7480	 3B5	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0xC7
7481	 3B6	JUMP		 	 
- stack 0: 0x7E0
7482	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x7E0
7483	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
7484	 C9	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
7485	 CA	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F404B7000005EB33000095011203B7000C0406000C05FE330001770112
- stack 0: 0xE0
7486	 CC	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0xC700F4
7487	 CD	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0xC700F4
- stack 0: 0xFFFF
7488	 D0	AND		 	 
- stack 1: 0x7E0
- stack 0: 0xF4
7489	 D1	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x1
7490	 D3	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0xF4
7491	 D4	PUSH2	0040	 	 
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x40
7492	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x7E0
- stack 1: 0xF4
- stack 0: 0x7DC
7493	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x7E0
- stack 0: 0x8D0
7494	 D9	PUSH2	0040	 	 
- stack 2: 0x7E0
- stack 1: 0x8D0
- stack 0: 0x40
7495	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x7E0
7496	 DD	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
7497	 DF	ADD		 	 
- stack 0: 0x7E4
7498	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
7499	 E1	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
7500	 E2	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
- stack 0: 0xF0
7501	 E4	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7
7502	 E5	JUMP		 	 
- stack 0: 0x7E4
7503	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7E4
7504	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
7505	 4B9	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
7506	 4BA	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x4B7000005EB33000095011203B7000C0406000C05FE33000177011201B00094
- stack 0: 0xE0
7507	 4BC	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x4B70000
7508	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x4B70000
- stack 0: 0xFFFF
7509	 4C0	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
7510	 4C1	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x0
- stack 0: 0x1
7511	 4C3	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x0
7512	 4C4	POP		 	 
- stack 0: 0x7E4
7513	 4C5	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
7514	 4C7	ADD		 	 
- stack 0: 0x7E8
7515	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
7516	 4C9	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x5EB33000095011203B7000C0406000C05FE33000177011201B00094031A0001
7517	 4CA	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x5EB33000095011203B7000C0406000C05FE33000177011201B00094031A0001
- stack 0: 0xF0
7518	 4CC	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x5EB
7519	 4CD	JUMP		 	 
- stack 0: 0x7E8
7520	 5EB	JUMPDEST		 ;; __riscvimpl_LUI_233000b7	  ;; # instr: lui ra,0x23300(ignore imm)
- stack 0: 0x7E8
7521	 5EC	PUSH4	23300000	 	 
- stack 1: 0x7E8
- stack 0: 0x23300000
7522	 5F1	PUSH2	0020	 	 
- stack 2: 0x7E8
- stack 1: 0x23300000
- stack 0: 0x20
7523	 5F4	MSTORE		 	  ;; # store to x1
- stack 0: 0x7E8
7524	 5F5	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
7525	 5F7	ADD		 	 
- stack 0: 0x7EC
7526	 5F8	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
7527	 5F9	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
7528	 5FA	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
- stack 0: 0xF0
7529	 5FC	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x95
7530	 5FD	JUMP		 	 
- stack 0: 0x7EC
7531	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x7EC
7532	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
7533	 97	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
7534	 98	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x95011203B7000C0406000C05FE33000177011201B00094031A000104480002
- stack 0: 0xE0
7535	 9A	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x950112
7536	 9B	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x950112
- stack 0: 0xFFFF
7537	 9E	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x112
7538	 9F	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x1
7539	 A1	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x112
7540	 A2	PUSH2	0020	 	 
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x20
7541	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x7EC
- stack 1: 0x112
- stack 0: 0x23300000
7542	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x7EC
- stack 0: 0x23300112
7543	 A7	PUSH2	0020	 	 
- stack 2: 0x7EC
- stack 1: 0x23300112
- stack 0: 0x20
7544	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x7EC
7545	 AB	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
7546	 AD	ADD		 	 
- stack 0: 0x7F0
7547	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
7548	 AF	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
7549	 B0	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
- stack 0: 0xF0
7550	 B2	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x3B7
7551	 B3	JUMP		 	 
- stack 0: 0x7F0
7552	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x7F0
7553	 3B8	PUSH2	0040	 	 
- stack 1: 0x7F0
- stack 0: 0x40
7554	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x7F0
- stack 0: 0x8D0
7555	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x7F0
7556	 3BD	MLOAD		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
7557	 3BE	PUSH1	E0	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0x3B7000C0406000C05FE33000177011201B00094031A0001044800020462FFD0
- stack 0: 0xE0
7558	 3C0	SHR		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0x3B7000C
7559	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0x3B7000C
- stack 0: 0xFFFF
7560	 3C4	AND		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0xC
7561	 3C5	PUSH1	01	 	 
- stack 3: 0x7F0
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
7562	 3C7	SIGNEXTEND		 	 
- stack 2: 0x7F0
- stack 1: 0x8D0
- stack 0: 0xC
7563	 3C8	ADD		 	 
- stack 1: 0x7F0
- stack 0: 0x8DC
7564	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
7565	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F0
- stack 0: 0x8DC
7566	 3CF	DUP1		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0x8DC
7567	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7568	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7569	 3F2	AND		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7570	 3F3	PUSH2	0020	 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x20
7571	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x23300112
7572	 3F7	PUSH1	E0	 	 
- stack 4: 0x7F0
- stack 3: 0x8DC
- stack 2: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 1: 0x23300112
- stack 0: 0xE0
7573	 3F9	SHL		 	 
- stack 3: 0x7F0
- stack 2: 0x8DC
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x2330011200000000000000000000000000000000000000000000000000000000
7574	 3FA	ADD		 	 
- stack 2: 0x7F0
- stack 1: 0x8DC
- stack 0: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7575	 3FB	SWAP1		 	 
- stack 2: 0x7F0
- stack 1: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0x8DC
7576	 3FC	MSTORE		 	 
- stack 0: 0x7F0
7577	 3FD	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
7578	 3FF	ADD		 	 
- stack 0: 0x7F4
7579	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
7580	 401	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
7581	 402	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
- stack 0: 0xF0
7582	 404	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x406
7583	 405	JUMP		 	 
- stack 0: 0x7F4
7584	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x7F4
7585	 407	PUSH2	0040	 	 
- stack 1: 0x7F4
- stack 0: 0x40
7586	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x7F4
- stack 0: 0x8D0
7587	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7588	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x8D0
7589	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x7F4
7590	 412	MLOAD		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
7591	 413	PUSH1	E0	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0x406000C05FE33000177011201B00094031A0001044800020462FFD001960016
- stack 0: 0xE0
7592	 415	SHR		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0x406000C
7593	 416	PUSH2	FFFF	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0x406000C
- stack 0: 0xFFFF
7594	 419	AND		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xC
7595	 41A	PUSH1	01	 	 
- stack 3: 0x7F4
- stack 2: 0x8D0
- stack 1: 0xC
- stack 0: 0x1
7596	 41C	SIGNEXTEND		 	 
- stack 2: 0x7F4
- stack 1: 0x8D0
- stack 0: 0xC
7597	 41D	ADD		 	 
- stack 1: 0x7F4
- stack 0: 0x8DC
7598	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7F4
- stack 1: 0x8DC
- stack 0: 0xFFFFFFFF
7599	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7F4
- stack 0: 0x8DC
7600	 424	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
7601	 425	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0x23300112CCDDAABBBCCDDAAB0AA00AA0A00AA00A123456785821309800000000
- stack 0: 0xE0
7602	 427	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0x23300112
7603	 428	PUSH2	0060	 	 
- stack 2: 0x7F4
- stack 1: 0x23300112
- stack 0: 0x60
7604	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x7F4
7605	 42C	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
7606	 42E	ADD		 	 
- stack 0: 0x7F8
7607	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
7608	 430	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x5FE33000177011201B00094031A0001044800020462FFD001960016037B0000
7609	 431	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x5FE33000177011201B00094031A0001044800020462FFD001960016037B0000
- stack 0: 0xF0
7610	 433	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x5FE
7611	 434	JUMP		 	 
- stack 0: 0x7F8
7612	 5FE	JUMPDEST		 ;; __riscvimpl_LUI_23300eb7	  ;; # instr: lui t4,0x23300(ignore imm)
- stack 0: 0x7F8
7613	 5FF	PUSH4	23300000	 	 
- stack 1: 0x7F8
- stack 0: 0x23300000
7614	 604	PUSH2	03A0	 	 
- stack 2: 0x7F8
- stack 1: 0x23300000
- stack 0: 0x3A0
7615	 607	MSTORE		 	  ;; # store to x29
- stack 0: 0x7F8
7616	 608	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
7617	 60A	ADD		 	 
- stack 0: 0x7FC
7618	 60B	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
7619	 60C	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
7620	 60D	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
- stack 0: 0xF0
7621	 60F	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x177
7622	 610	JUMP		 	 
- stack 0: 0x7FC
7623	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x7FC
7624	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7FC
- stack 0: 0x7FC
7625	 179	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
7626	 17A	PUSH1	E0	 	 
- stack 2: 0x7FC
- stack 1: 0x177011201B00094031A0001044800020462FFD001960016037B000003A80000
- stack 0: 0xE0
7627	 17C	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x1770112
7628	 17D	PUSH2	FFFF	 	 
- stack 2: 0x7FC
- stack 1: 0x1770112
- stack 0: 0xFFFF
7629	 180	AND		 	 
- stack 1: 0x7FC
- stack 0: 0x112
7630	 181	PUSH1	01	 	 
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x1
7631	 183	SIGNEXTEND		 	 
- stack 1: 0x7FC
- stack 0: 0x112
7632	 184	PUSH2	03A0	 	 
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x3A0
7633	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x7FC
- stack 1: 0x112
- stack 0: 0x23300000
7634	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x7FC
- stack 0: 0x23300112
7635	 189	PUSH2	03A0	 	 
- stack 2: 0x7FC
- stack 1: 0x23300112
- stack 0: 0x3A0
7636	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x7FC
7637	 18D	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
7638	 18F	ADD		 	 
- stack 0: 0x800
7639	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
7640	 191	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x1B00094031A0001044800020462FFD001960016037B000003A8000000C700B8
7641	 192	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x1B00094031A0001044800020462FFD001960016037B000003A8000000C700B8
- stack 0: 0xF0
7642	 194	SHR		 	 
- stack 1: 0x800
- stack 0: 0x1B0
7643	 195	JUMP		 	 
- stack 0: 0x800
7644	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x800
7645	 1B1	PUSH2	0060	 	 
- stack 1: 0x800
- stack 0: 0x60
7646	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x800
- stack 0: 0x23300112
7647	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0xFFFFFFFF
7648	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x800
- stack 0: 0x23300112
7649	 1BB	PUSH2	03A0	 	 
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x3A0
7650	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x23300112
7651	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x800
- stack 2: 0x23300112
- stack 1: 0x23300112
- stack 0: 0xFFFFFFFF
7652	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x800
- stack 1: 0x23300112
- stack 0: 0x23300112
7653	 1C5	SUB		 	 
- stack 1: 0x800
- stack 0: 0x0
7654	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x800
- stack 1: 0x0
- stack 0: 0x1CE
7655	 1C9	JUMPI		 	 
- stack 0: 0x800
7656	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x800
- stack 0: 0x1E8
7657	 1CD	JUMP		 	 
- stack 0: 0x800
7658	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x800
7659	 1E9	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
7660	 1EB	ADD		 	 
- stack 0: 0x804
7661	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
7662	 1ED	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
7663	 1EE	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
- stack 0: 0xF0
7664	 1F0	SHR		 	 
- stack 1: 0x804
- stack 0: 0x31A
7665	 1F1	JUMP		 	 
- stack 0: 0x804
7666	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x804
7667	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
7668	 31C	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
7669	 31D	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x31A0001044800020462FFD001960016037B000003A8000000C700B804B70000
- stack 0: 0xE0
7670	 31F	SHR		 	 
- stack 1: 0x804
- stack 0: 0x31A0001
7671	 320	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x31A0001
- stack 0: 0xFFFF
7672	 323	AND		 	 
- stack 1: 0x804
- stack 0: 0x1
7673	 324	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
7674	 326	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x1
7675	 327	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x80
7676	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x804
- stack 1: 0x1
- stack 0: 0x1
7677	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x804
- stack 0: 0x2
7678	 32C	PUSH2	0080	 	 
- stack 2: 0x804
- stack 1: 0x2
- stack 0: 0x80
7679	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x804
7680	 330	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
7681	 332	ADD		 	 
- stack 0: 0x808
7682	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
7683	 334	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
7684	 335	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
- stack 0: 0xF0
7685	 337	SHR		 	 
- stack 1: 0x808
- stack 0: 0x448
7686	 338	JUMP		 	 
- stack 0: 0x808
7687	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x808
7688	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x808
- stack 0: 0x808
7689	 44A	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
7690	 44B	PUSH1	E0	 	 
- stack 2: 0x808
- stack 1: 0x44800020462FFD001960016037B000003A8000000C700B804B7000006112330
- stack 0: 0xE0
7691	 44D	SHR		 	 
- stack 1: 0x808
- stack 0: 0x4480002
7692	 44E	PUSH2	FFFF	 	 
- stack 2: 0x808
- stack 1: 0x4480002
- stack 0: 0xFFFF
7693	 451	AND		 	 
- stack 1: 0x808
- stack 0: 0x2
7694	 452	PUSH1	01	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0x1
7695	 454	SIGNEXTEND		 	 
- stack 1: 0x808
- stack 0: 0x2
7696	 455	PUSH2	00A0	 	 
- stack 2: 0x808
- stack 1: 0x2
- stack 0: 0xA0
7697	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x808
7698	 459	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
7699	 45B	ADD		 	 
- stack 0: 0x80C
7700	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
7701	 45D	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
7702	 45E	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x462FFD001960016037B000003A8000000C700B804B700000611233000950011
- stack 0: 0xF0
7703	 460	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x462
7704	 461	JUMP		 	 
- stack 0: 0x80C
7705	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x80C
7706	 463	PUSH2	0080	 	 
- stack 1: 0x80C
- stack 0: 0x80
7707	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x80C
- stack 0: 0x2
7708	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7709	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x80C
- stack 0: 0x2
7710	 46D	PUSH2	00A0	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0xA0
7711	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
7712	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x80C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7713	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x2
7714	 477	SUB		 	 
- stack 1: 0x80C
- stack 0: 0x0
7715	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x80C
- stack 1: 0x0
- stack 0: 0x480
7716	 47B	JUMPI		 	 
- stack 0: 0x80C
7717	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x80C
- stack 0: 0x49A
7718	 47F	JUMP		 	 
- stack 0: 0x80C
7719	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x80C
7720	 49B	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
7721	 49D	ADD		 	 
- stack 0: 0x810
7722	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
7723	 49F	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x1960016037B000003A8000000C700B804B70000061123300095001104B70000
7724	 4A0	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x1960016037B000003A8000000C700B804B70000061123300095001104B70000
- stack 0: 0xF0
7725	 4A2	SHR		 	 
- stack 1: 0x810
- stack 0: 0x196
7726	 4A3	JUMP		 	 
- stack 0: 0x810
7727	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x810
7728	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
7729	 198	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x1960016037B000003A8000000C700B804B70000061123300095001104B70000
7730	 199	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x1960016037B000003A8000000C700B804B70000061123300095001104B70000
- stack 0: 0xE0
7731	 19B	SHR		 	 
- stack 1: 0x810
- stack 0: 0x1960016
7732	 19C	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x1960016
- stack 0: 0xFFFF
7733	 19F	AND		 	 
- stack 1: 0x810
- stack 0: 0x16
7734	 1A0	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x16
- stack 0: 0x1
7735	 1A2	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x16
7736	 1A3	PUSH2	0380	 	 
- stack 2: 0x810
- stack 1: 0x16
- stack 0: 0x380
7737	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x810
7738	 1A7	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
7739	 1A9	ADD		 	 
- stack 0: 0x814
7740	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
7741	 1AB	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x37B000003A8000000C700B804B70000061123300095001104B7000003B70010
7742	 1AC	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x37B000003A8000000C700B804B70000061123300095001104B7000003B70010
- stack 0: 0xF0
7743	 1AE	SHR		 	 
- stack 1: 0x814
- stack 0: 0x37B
7744	 1AF	JUMP		 	 
- stack 0: 0x814
7745	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x814
7746	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
7747	 37D	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x37B000003A8000000C700B804B70000061123300095001104B7000003B70010
7748	 37E	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x37B000003A8000000C700B804B70000061123300095001104B7000003B70010
- stack 0: 0xE0
7749	 380	SHR		 	 
- stack 1: 0x814
- stack 0: 0x37B0000
7750	 381	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x37B0000
- stack 0: 0xFFFF
7751	 384	AND		 	 
- stack 1: 0x814
- stack 0: 0x0
7752	 385	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x1
7753	 387	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0x0
7754	 388	PUSH2	0080	 	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x80
7755	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x814
7756	 38C	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
7757	 38E	ADD		 	 
- stack 0: 0x818
7758	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
7759	 390	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x3A8000000C700B804B70000061123300095001104B7000003B7001004060010
7760	 391	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x3A8000000C700B804B70000061123300095001104B7000003B7001004060010
- stack 0: 0xF0
7761	 393	SHR		 	 
- stack 1: 0x818
- stack 0: 0x3A8
7762	 394	JUMP		 	 
- stack 0: 0x818
7763	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x818
7764	 3A9	DUP1		 	 
- stack 1: 0x818
- stack 0: 0x818
7765	 3AA	PUSH2	0040	 	 
- stack 2: 0x818
- stack 1: 0x818
- stack 0: 0x40
7766	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x818
7767	 3AE	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
7768	 3B0	ADD		 	 
- stack 0: 0x81C
7769	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
7770	 3B2	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
7771	 3B3	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
- stack 0: 0xF0
7772	 3B5	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xC7
7773	 3B6	JUMP		 	 
- stack 0: 0x81C
7774	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x81C
7775	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
7776	 C9	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
7777	 CA	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
- stack 0: 0xE0
7778	 CC	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xC700B8
7779	 CD	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0xC700B8
- stack 0: 0xFFFF
7780	 D0	AND		 	 
- stack 1: 0x81C
- stack 0: 0xB8
7781	 D1	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x1
7782	 D3	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xB8
7783	 D4	PUSH2	0040	 	 
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x40
7784	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x818
7785	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x81C
- stack 0: 0x8D0
7786	 D9	PUSH2	0040	 	 
- stack 2: 0x81C
- stack 1: 0x8D0
- stack 0: 0x40
7787	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x81C
7788	 DD	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
7789	 DF	ADD		 	 
- stack 0: 0x820
7790	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
7791	 E1	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
7792	 E2	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
- stack 0: 0xF0
7793	 E4	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4B7
7794	 E5	JUMP		 	 
- stack 0: 0x820
7795	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x820
7796	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
7797	 4B9	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
7798	 4BA	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
- stack 0: 0xE0
7799	 4BC	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4B70000
7800	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x4B70000
- stack 0: 0xFFFF
7801	 4C0	AND		 	 
- stack 1: 0x820
- stack 0: 0x0
7802	 4C1	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1
7803	 4C3	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x0
7804	 4C4	POP		 	 
- stack 0: 0x820
7805	 4C5	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
7806	 4C7	ADD		 	 
- stack 0: 0x824
7807	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
7808	 4C9	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x61123300095001104B7000003B7001004060010062423300177001101B00054
7809	 4CA	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x61123300095001104B7000003B7001004060010062423300177001101B00054
- stack 0: 0xF0
7810	 4CC	SHR		 	 
- stack 1: 0x824
- stack 0: 0x611
7811	 4CD	JUMP		 	 
- stack 0: 0x824
7812	 611	JUMPDEST		 ;; __riscvimpl_LUI_223300b7	  ;; # instr: lui ra,0x22330(ignore imm)
- stack 0: 0x824
7813	 612	PUSH4	22330000	 	 
- stack 1: 0x824
- stack 0: 0x22330000
7814	 617	PUSH2	0020	 	 
- stack 2: 0x824
- stack 1: 0x22330000
- stack 0: 0x20
7815	 61A	MSTORE		 	  ;; # store to x1
- stack 0: 0x824
7816	 61B	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
7817	 61D	ADD		 	 
- stack 0: 0x828
7818	 61E	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
7819	 61F	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
7820	 620	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
- stack 0: 0xF0
7821	 622	SHR		 	 
- stack 1: 0x828
- stack 0: 0x95
7822	 623	JUMP		 	 
- stack 0: 0x828
7823	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x828
7824	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
7825	 97	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
7826	 98	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
- stack 0: 0xE0
7827	 9A	SHR		 	 
- stack 1: 0x828
- stack 0: 0x950011
7828	 9B	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x950011
- stack 0: 0xFFFF
7829	 9E	AND		 	 
- stack 1: 0x828
- stack 0: 0x11
7830	 9F	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x1
7831	 A1	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x11
7832	 A2	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x20
7833	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x22330000
7834	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x828
- stack 0: 0x22330011
7835	 A7	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0x22330011
- stack 0: 0x20
7836	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x828
7837	 AB	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
7838	 AD	ADD		 	 
- stack 0: 0x82C
7839	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7840	 AF	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
7841	 B0	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
- stack 0: 0xF0
7842	 B2	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4B7
7843	 B3	JUMP		 	 
- stack 0: 0x82C
7844	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
7845	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
7846	 4B9	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
7847	 4BA	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
- stack 0: 0xE0
7848	 4BC	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4B70000
7849	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x4B70000
- stack 0: 0xFFFF
7850	 4C0	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7851	 4C1	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
7852	 4C3	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
7853	 4C4	POP		 	 
- stack 0: 0x82C
7854	 4C5	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7855	 4C7	ADD		 	 
- stack 0: 0x830
7856	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7857	 4C9	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
7858	 4CA	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
- stack 0: 0xF0
7859	 4CC	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3B7
7860	 4CD	JUMP		 	 
- stack 0: 0x830
7861	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x830
7862	 3B8	PUSH2	0040	 	 
- stack 1: 0x830
- stack 0: 0x40
7863	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x830
- stack 0: 0x8D0
7864	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x830
7865	 3BD	MLOAD		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
7866	 3BE	PUSH1	E0	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
- stack 0: 0xE0
7867	 3C0	SHR		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x3B70010
7868	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x3B70010
- stack 0: 0xFFFF
7869	 3C4	AND		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x10
7870	 3C5	PUSH1	01	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
7871	 3C7	SIGNEXTEND		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x10
7872	 3C8	ADD		 	 
- stack 1: 0x830
- stack 0: 0x8E0
7873	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
7874	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x830
- stack 0: 0x8E0
7875	 3CF	DUP1		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0x8E0
7876	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
7877	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xCCDDAABBBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
7878	 3F2	AND		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
7879	 3F3	PUSH2	0020	 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x20
7880	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x22330011
7881	 3F7	PUSH1	E0	 	 
- stack 4: 0x830
- stack 3: 0x8E0
- stack 2: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 1: 0x22330011
- stack 0: 0xE0
7882	 3F9	SHL		 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x2233001100000000000000000000000000000000000000000000000000000000
7883	 3FA	ADD		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
7884	 3FB	SWAP1		 	 
- stack 2: 0x830
- stack 1: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x8E0
7885	 3FC	MSTORE		 	 
- stack 0: 0x830
7886	 3FD	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7887	 3FF	ADD		 	 
- stack 0: 0x834
7888	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7889	 401	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
7890	 402	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
- stack 0: 0xF0
7891	 404	SHR		 	 
- stack 1: 0x834
- stack 0: 0x406
7892	 405	JUMP		 	 
- stack 0: 0x834
7893	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x834
7894	 407	PUSH2	0040	 	 
- stack 1: 0x834
- stack 0: 0x40
7895	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x834
- stack 0: 0x8D0
7896	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
7897	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x8D0
7898	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x834
7899	 412	MLOAD		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
7900	 413	PUSH1	E0	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
- stack 0: 0xE0
7901	 415	SHR		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x4060010
7902	 416	PUSH2	FFFF	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x4060010
- stack 0: 0xFFFF
7903	 419	AND		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x10
7904	 41A	PUSH1	01	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
7905	 41C	SIGNEXTEND		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x10
7906	 41D	ADD		 	 
- stack 1: 0x834
- stack 0: 0x8E0
7907	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
7908	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x8E0
7909	 424	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
7910	 425	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xE0
7911	 427	SHR		 	 
- stack 1: 0x834
- stack 0: 0x22330011
7912	 428	PUSH2	0060	 	 
- stack 2: 0x834
- stack 1: 0x22330011
- stack 0: 0x60
7913	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x834
7914	 42C	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7915	 42E	ADD		 	 
- stack 0: 0x838
7916	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7917	 430	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x62423300177001101B00054031A0001044800020462FFCC01960017037B0000
7918	 431	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x62423300177001101B00054031A0001044800020462FFCC01960017037B0000
- stack 0: 0xF0
7919	 433	SHR		 	 
- stack 1: 0x838
- stack 0: 0x624
7920	 434	JUMP		 	 
- stack 0: 0x838
7921	 624	JUMPDEST		 ;; __riscvimpl_LUI_22330eb7	  ;; # instr: lui t4,0x22330(ignore imm)
- stack 0: 0x838
7922	 625	PUSH4	22330000	 	 
- stack 1: 0x838
- stack 0: 0x22330000
7923	 62A	PUSH2	03A0	 	 
- stack 2: 0x838
- stack 1: 0x22330000
- stack 0: 0x3A0
7924	 62D	MSTORE		 	  ;; # store to x29
- stack 0: 0x838
7925	 62E	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7926	 630	ADD		 	 
- stack 0: 0x83C
7927	 631	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7928	 632	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
7929	 633	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
- stack 0: 0xF0
7930	 635	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x177
7931	 636	JUMP		 	 
- stack 0: 0x83C
7932	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x83C
7933	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
7934	 179	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
7935	 17A	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
- stack 0: 0xE0
7936	 17C	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1770011
7937	 17D	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x1770011
- stack 0: 0xFFFF
7938	 180	AND		 	 
- stack 1: 0x83C
- stack 0: 0x11
7939	 181	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x1
7940	 183	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x11
7941	 184	PUSH2	03A0	 	 
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x3A0
7942	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x22330000
7943	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x83C
- stack 0: 0x22330011
7944	 189	PUSH2	03A0	 	 
- stack 2: 0x83C
- stack 1: 0x22330011
- stack 0: 0x3A0
7945	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x83C
7946	 18D	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7947	 18F	ADD		 	 
- stack 0: 0x840
7948	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7949	 191	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x1B00054031A0001044800020462FFCC01960017037B000003A8000000C70078
7950	 192	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x1B00054031A0001044800020462FFCC01960017037B000003A8000000C70078
- stack 0: 0xF0
7951	 194	SHR		 	 
- stack 1: 0x840
- stack 0: 0x1B0
7952	 195	JUMP		 	 
- stack 0: 0x840
7953	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x840
7954	 1B1	PUSH2	0060	 	 
- stack 1: 0x840
- stack 0: 0x60
7955	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x840
- stack 0: 0x22330011
7956	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0xFFFFFFFF
7957	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x840
- stack 0: 0x22330011
7958	 1BB	PUSH2	03A0	 	 
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x3A0
7959	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x22330011
7960	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x840
- stack 2: 0x22330011
- stack 1: 0x22330011
- stack 0: 0xFFFFFFFF
7961	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x22330011
7962	 1C5	SUB		 	 
- stack 1: 0x840
- stack 0: 0x0
7963	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1CE
7964	 1C9	JUMPI		 	 
- stack 0: 0x840
7965	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x840
- stack 0: 0x1E8
7966	 1CD	JUMP		 	 
- stack 0: 0x840
7967	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x840
7968	 1E9	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7969	 1EB	ADD		 	 
- stack 0: 0x844
7970	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7971	 1ED	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
7972	 1EE	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
- stack 0: 0xF0
7973	 1F0	SHR		 	 
- stack 1: 0x844
- stack 0: 0x31A
7974	 1F1	JUMP		 	 
- stack 0: 0x844
7975	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x844
7976	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
7977	 31C	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
7978	 31D	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
- stack 0: 0xE0
7979	 31F	SHR		 	 
- stack 1: 0x844
- stack 0: 0x31A0001
7980	 320	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x31A0001
- stack 0: 0xFFFF
7981	 323	AND		 	 
- stack 1: 0x844
- stack 0: 0x1
7982	 324	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x1
7983	 326	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x1
7984	 327	PUSH2	0080	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x80
7985	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x0
7986	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x844
- stack 0: 0x1
7987	 32C	PUSH2	0080	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x80
7988	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x844
7989	 330	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7990	 332	ADD		 	 
- stack 0: 0x848
7991	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7992	 334	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
7993	 335	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
- stack 0: 0xF0
7994	 337	SHR		 	 
- stack 1: 0x848
- stack 0: 0x448
7995	 338	JUMP		 	 
- stack 0: 0x848
7996	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x848
7997	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7998	 44A	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
7999	 44B	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
- stack 0: 0xE0
8000	 44D	SHR		 	 
- stack 1: 0x848
- stack 0: 0x4480002
8001	 44E	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x4480002
- stack 0: 0xFFFF
8002	 451	AND		 	 
- stack 1: 0x848
- stack 0: 0x2
8003	 452	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0x1
8004	 454	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x2
8005	 455	PUSH2	00A0	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0xA0
8006	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x848
8007	 459	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
8008	 45B	ADD		 	 
- stack 0: 0x84C
8009	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
8010	 45D	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
8011	 45E	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
- stack 0: 0xF0
8012	 460	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x462
8013	 461	JUMP		 	 
- stack 0: 0x84C
8014	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x84C
8015	 463	PUSH2	0080	 	 
- stack 1: 0x84C
- stack 0: 0x80
8016	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x84C
- stack 0: 0x1
8017	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8018	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x84C
- stack 0: 0x1
8019	 46D	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0xA0
8020	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x2
8021	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x84C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8022	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x2
8023	 477	SUB		 	 
- stack 1: 0x84C
- stack 0: 0x1
8024	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x84C
- stack 1: 0x1
- stack 0: 0x480
8025	 47B	JUMPI		 	 
- stack 0: 0x84C
8026	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x84C
8027	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
8028	 482	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
8029	 483	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
- stack 0: 0xE0
8030	 485	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x462FFCC
8031	 486	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
8032	 489	AND		 	 
- stack 1: 0x84C
- stack 0: 0xFFCC
8033	 48A	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0xFFCC
- stack 0: 0x1
8034	 48C	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
8035	 48D	ADD		 	 
- stack 0: 0x818
8036	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x818
- stack 0: 0xFFFFFFFF
8037	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x818
8038	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
8039	 495	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x3A8000000C700B804B70000061123300095001104B7000003B7001004060010
8040	 496	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x3A8000000C700B804B70000061123300095001104B7000003B7001004060010
- stack 0: 0xF0
8041	 498	SHR		 	 
- stack 1: 0x818
- stack 0: 0x3A8
8042	 499	JUMP		 	 
- stack 0: 0x818
8043	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x818
8044	 3A9	DUP1		 	 
- stack 1: 0x818
- stack 0: 0x818
8045	 3AA	PUSH2	0040	 	 
- stack 2: 0x818
- stack 1: 0x818
- stack 0: 0x40
8046	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x818
8047	 3AE	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
8048	 3B0	ADD		 	 
- stack 0: 0x81C
8049	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
8050	 3B2	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
8051	 3B3	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
- stack 0: 0xF0
8052	 3B5	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xC7
8053	 3B6	JUMP		 	 
- stack 0: 0x81C
8054	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x81C
8055	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
8056	 C9	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
8057	 CA	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0xC700B804B70000061123300095001104B7000003B700100406001006242330
- stack 0: 0xE0
8058	 CC	SHR		 	 
- stack 1: 0x81C
- stack 0: 0xC700B8
8059	 CD	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0xC700B8
- stack 0: 0xFFFF
8060	 D0	AND		 	 
- stack 1: 0x81C
- stack 0: 0xB8
8061	 D1	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x1
8062	 D3	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xB8
8063	 D4	PUSH2	0040	 	 
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x40
8064	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x81C
- stack 1: 0xB8
- stack 0: 0x818
8065	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x81C
- stack 0: 0x8D0
8066	 D9	PUSH2	0040	 	 
- stack 2: 0x81C
- stack 1: 0x8D0
- stack 0: 0x40
8067	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x81C
8068	 DD	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
8069	 DF	ADD		 	 
- stack 0: 0x820
8070	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
8071	 E1	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
8072	 E2	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
- stack 0: 0xF0
8073	 E4	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4B7
8074	 E5	JUMP		 	 
- stack 0: 0x820
8075	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x820
8076	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
8077	 4B9	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
8078	 4BA	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x4B70000061123300095001104B7000003B70010040600100624233001770011
- stack 0: 0xE0
8079	 4BC	SHR		 	 
- stack 1: 0x820
- stack 0: 0x4B70000
8080	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8081	 4C0	AND		 	 
- stack 1: 0x820
- stack 0: 0x0
8082	 4C1	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x0
- stack 0: 0x1
8083	 4C3	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x0
8084	 4C4	POP		 	 
- stack 0: 0x820
8085	 4C5	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
8086	 4C7	ADD		 	 
- stack 0: 0x824
8087	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
8088	 4C9	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x61123300095001104B7000003B7001004060010062423300177001101B00054
8089	 4CA	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x61123300095001104B7000003B7001004060010062423300177001101B00054
- stack 0: 0xF0
8090	 4CC	SHR		 	 
- stack 1: 0x824
- stack 0: 0x611
8091	 4CD	JUMP		 	 
- stack 0: 0x824
8092	 611	JUMPDEST		 ;; __riscvimpl_LUI_223300b7	  ;; # instr: lui ra,0x22330(ignore imm)
- stack 0: 0x824
8093	 612	PUSH4	22330000	 	 
- stack 1: 0x824
- stack 0: 0x22330000
8094	 617	PUSH2	0020	 	 
- stack 2: 0x824
- stack 1: 0x22330000
- stack 0: 0x20
8095	 61A	MSTORE		 	  ;; # store to x1
- stack 0: 0x824
8096	 61B	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
8097	 61D	ADD		 	 
- stack 0: 0x828
8098	 61E	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
8099	 61F	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
8100	 620	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
- stack 0: 0xF0
8101	 622	SHR		 	 
- stack 1: 0x828
- stack 0: 0x95
8102	 623	JUMP		 	 
- stack 0: 0x828
8103	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x828
8104	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
8105	 97	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
8106	 98	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x95001104B7000003B7001004060010062423300177001101B00054031A0001
- stack 0: 0xE0
8107	 9A	SHR		 	 
- stack 1: 0x828
- stack 0: 0x950011
8108	 9B	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x950011
- stack 0: 0xFFFF
8109	 9E	AND		 	 
- stack 1: 0x828
- stack 0: 0x11
8110	 9F	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x1
8111	 A1	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x11
8112	 A2	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x20
8113	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x828
- stack 1: 0x11
- stack 0: 0x22330000
8114	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x828
- stack 0: 0x22330011
8115	 A7	PUSH2	0020	 	 
- stack 2: 0x828
- stack 1: 0x22330011
- stack 0: 0x20
8116	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x828
8117	 AB	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
8118	 AD	ADD		 	 
- stack 0: 0x82C
8119	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
8120	 AF	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
8121	 B0	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
- stack 0: 0xF0
8122	 B2	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4B7
8123	 B3	JUMP		 	 
- stack 0: 0x82C
8124	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x82C
8125	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x82C
- stack 0: 0x82C
8126	 4B9	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
8127	 4BA	PUSH1	E0	 	 
- stack 2: 0x82C
- stack 1: 0x4B7000003B7001004060010062423300177001101B00054031A000104480002
- stack 0: 0xE0
8128	 4BC	SHR		 	 
- stack 1: 0x82C
- stack 0: 0x4B70000
8129	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x82C
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8130	 4C0	AND		 	 
- stack 1: 0x82C
- stack 0: 0x0
8131	 4C1	PUSH1	01	 	 
- stack 2: 0x82C
- stack 1: 0x0
- stack 0: 0x1
8132	 4C3	SIGNEXTEND		 	 
- stack 1: 0x82C
- stack 0: 0x0
8133	 4C4	POP		 	 
- stack 0: 0x82C
8134	 4C5	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
8135	 4C7	ADD		 	 
- stack 0: 0x830
8136	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
8137	 4C9	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
8138	 4CA	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
- stack 0: 0xF0
8139	 4CC	SHR		 	 
- stack 1: 0x830
- stack 0: 0x3B7
8140	 4CD	JUMP		 	 
- stack 0: 0x830
8141	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x830
8142	 3B8	PUSH2	0040	 	 
- stack 1: 0x830
- stack 0: 0x40
8143	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x830
- stack 0: 0x8D0
8144	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x830
8145	 3BD	MLOAD		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
8146	 3BE	PUSH1	E0	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x3B7001004060010062423300177001101B00054031A0001044800020462FFCC
- stack 0: 0xE0
8147	 3C0	SHR		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x3B70010
8148	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x3B70010
- stack 0: 0xFFFF
8149	 3C4	AND		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x10
8150	 3C5	PUSH1	01	 	 
- stack 3: 0x830
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
8151	 3C7	SIGNEXTEND		 	 
- stack 2: 0x830
- stack 1: 0x8D0
- stack 0: 0x10
8152	 3C8	ADD		 	 
- stack 1: 0x830
- stack 0: 0x8E0
8153	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
8154	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x830
- stack 0: 0x8E0
8155	 3CF	DUP1		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0x8E0
8156	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
8157	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8158	 3F2	AND		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
8159	 3F3	PUSH2	0020	 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x20
8160	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x22330011
8161	 3F7	PUSH1	E0	 	 
- stack 4: 0x830
- stack 3: 0x8E0
- stack 2: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 1: 0x22330011
- stack 0: 0xE0
8162	 3F9	SHL		 	 
- stack 3: 0x830
- stack 2: 0x8E0
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x2233001100000000000000000000000000000000000000000000000000000000
8163	 3FA	ADD		 	 
- stack 2: 0x830
- stack 1: 0x8E0
- stack 0: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
8164	 3FB	SWAP1		 	 
- stack 2: 0x830
- stack 1: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0x8E0
8165	 3FC	MSTORE		 	 
- stack 0: 0x830
8166	 3FD	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
8167	 3FF	ADD		 	 
- stack 0: 0x834
8168	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
8169	 401	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
8170	 402	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
- stack 0: 0xF0
8171	 404	SHR		 	 
- stack 1: 0x834
- stack 0: 0x406
8172	 405	JUMP		 	 
- stack 0: 0x834
8173	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x834
8174	 407	PUSH2	0040	 	 
- stack 1: 0x834
- stack 0: 0x40
8175	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x834
- stack 0: 0x8D0
8176	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8177	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x8D0
8178	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x834
8179	 412	MLOAD		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
8180	 413	PUSH1	E0	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x4060010062423300177001101B00054031A0001044800020462FFCC01960017
- stack 0: 0xE0
8181	 415	SHR		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x4060010
8182	 416	PUSH2	FFFF	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x4060010
- stack 0: 0xFFFF
8183	 419	AND		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x10
8184	 41A	PUSH1	01	 	 
- stack 3: 0x834
- stack 2: 0x8D0
- stack 1: 0x10
- stack 0: 0x1
8185	 41C	SIGNEXTEND		 	 
- stack 2: 0x834
- stack 1: 0x8D0
- stack 0: 0x10
8186	 41D	ADD		 	 
- stack 1: 0x834
- stack 0: 0x8E0
8187	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x834
- stack 1: 0x8E0
- stack 0: 0xFFFFFFFF
8188	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x834
- stack 0: 0x8E0
8189	 424	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
8190	 425	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x22330011BCCDDAAB0AA00AA0A00AA00A12345678582130980000000000000000
- stack 0: 0xE0
8191	 427	SHR		 	 
- stack 1: 0x834
- stack 0: 0x22330011
8192	 428	PUSH2	0060	 	 
- stack 2: 0x834
- stack 1: 0x22330011
- stack 0: 0x60
8193	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x834
8194	 42C	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
8195	 42E	ADD		 	 
- stack 0: 0x838
8196	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
8197	 430	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x62423300177001101B00054031A0001044800020462FFCC01960017037B0000
8198	 431	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x62423300177001101B00054031A0001044800020462FFCC01960017037B0000
- stack 0: 0xF0
8199	 433	SHR		 	 
- stack 1: 0x838
- stack 0: 0x624
8200	 434	JUMP		 	 
- stack 0: 0x838
8201	 624	JUMPDEST		 ;; __riscvimpl_LUI_22330eb7	  ;; # instr: lui t4,0x22330(ignore imm)
- stack 0: 0x838
8202	 625	PUSH4	22330000	 	 
- stack 1: 0x838
- stack 0: 0x22330000
8203	 62A	PUSH2	03A0	 	 
- stack 2: 0x838
- stack 1: 0x22330000
- stack 0: 0x3A0
8204	 62D	MSTORE		 	  ;; # store to x29
- stack 0: 0x838
8205	 62E	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
8206	 630	ADD		 	 
- stack 0: 0x83C
8207	 631	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
8208	 632	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
8209	 633	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
- stack 0: 0xF0
8210	 635	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x177
8211	 636	JUMP		 	 
- stack 0: 0x83C
8212	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x83C
8213	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x83C
- stack 0: 0x83C
8214	 179	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
8215	 17A	PUSH1	E0	 	 
- stack 2: 0x83C
- stack 1: 0x177001101B00054031A0001044800020462FFCC01960017037B000003A80000
- stack 0: 0xE0
8216	 17C	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1770011
8217	 17D	PUSH2	FFFF	 	 
- stack 2: 0x83C
- stack 1: 0x1770011
- stack 0: 0xFFFF
8218	 180	AND		 	 
- stack 1: 0x83C
- stack 0: 0x11
8219	 181	PUSH1	01	 	 
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x1
8220	 183	SIGNEXTEND		 	 
- stack 1: 0x83C
- stack 0: 0x11
8221	 184	PUSH2	03A0	 	 
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x3A0
8222	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x83C
- stack 1: 0x11
- stack 0: 0x22330000
8223	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x83C
- stack 0: 0x22330011
8224	 189	PUSH2	03A0	 	 
- stack 2: 0x83C
- stack 1: 0x22330011
- stack 0: 0x3A0
8225	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x83C
8226	 18D	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
8227	 18F	ADD		 	 
- stack 0: 0x840
8228	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
8229	 191	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x1B00054031A0001044800020462FFCC01960017037B000003A8000000C70078
8230	 192	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x1B00054031A0001044800020462FFCC01960017037B000003A8000000C70078
- stack 0: 0xF0
8231	 194	SHR		 	 
- stack 1: 0x840
- stack 0: 0x1B0
8232	 195	JUMP		 	 
- stack 0: 0x840
8233	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x840
8234	 1B1	PUSH2	0060	 	 
- stack 1: 0x840
- stack 0: 0x60
8235	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x840
- stack 0: 0x22330011
8236	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0xFFFFFFFF
8237	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x840
- stack 0: 0x22330011
8238	 1BB	PUSH2	03A0	 	 
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x3A0
8239	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x22330011
8240	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x840
- stack 2: 0x22330011
- stack 1: 0x22330011
- stack 0: 0xFFFFFFFF
8241	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x840
- stack 1: 0x22330011
- stack 0: 0x22330011
8242	 1C5	SUB		 	 
- stack 1: 0x840
- stack 0: 0x0
8243	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x840
- stack 1: 0x0
- stack 0: 0x1CE
8244	 1C9	JUMPI		 	 
- stack 0: 0x840
8245	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x840
- stack 0: 0x1E8
8246	 1CD	JUMP		 	 
- stack 0: 0x840
8247	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x840
8248	 1E9	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
8249	 1EB	ADD		 	 
- stack 0: 0x844
8250	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
8251	 1ED	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
8252	 1EE	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
- stack 0: 0xF0
8253	 1F0	SHR		 	 
- stack 1: 0x844
- stack 0: 0x31A
8254	 1F1	JUMP		 	 
- stack 0: 0x844
8255	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x844
8256	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x844
- stack 0: 0x844
8257	 31C	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
8258	 31D	PUSH1	E0	 	 
- stack 2: 0x844
- stack 1: 0x31A0001044800020462FFCC01960017037B000003A8000000C7007804B70000
- stack 0: 0xE0
8259	 31F	SHR		 	 
- stack 1: 0x844
- stack 0: 0x31A0001
8260	 320	PUSH2	FFFF	 	 
- stack 2: 0x844
- stack 1: 0x31A0001
- stack 0: 0xFFFF
8261	 323	AND		 	 
- stack 1: 0x844
- stack 0: 0x1
8262	 324	PUSH1	01	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x1
8263	 326	SIGNEXTEND		 	 
- stack 1: 0x844
- stack 0: 0x1
8264	 327	PUSH2	0080	 	 
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x80
8265	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x844
- stack 1: 0x1
- stack 0: 0x1
8266	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x844
- stack 0: 0x2
8267	 32C	PUSH2	0080	 	 
- stack 2: 0x844
- stack 1: 0x2
- stack 0: 0x80
8268	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x844
8269	 330	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
8270	 332	ADD		 	 
- stack 0: 0x848
8271	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
8272	 334	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
8273	 335	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
- stack 0: 0xF0
8274	 337	SHR		 	 
- stack 1: 0x848
- stack 0: 0x448
8275	 338	JUMP		 	 
- stack 0: 0x848
8276	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x848
8277	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
8278	 44A	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
8279	 44B	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x44800020462FFCC01960017037B000003A8000000C7007804B7000004B70000
- stack 0: 0xE0
8280	 44D	SHR		 	 
- stack 1: 0x848
- stack 0: 0x4480002
8281	 44E	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x4480002
- stack 0: 0xFFFF
8282	 451	AND		 	 
- stack 1: 0x848
- stack 0: 0x2
8283	 452	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0x1
8284	 454	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x2
8285	 455	PUSH2	00A0	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0xA0
8286	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x848
8287	 459	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
8288	 45B	ADD		 	 
- stack 0: 0x84C
8289	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
8290	 45D	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
8291	 45E	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x462FFCC01960017037B000003A8000000C7007804B7000004B7000006372233
- stack 0: 0xF0
8292	 460	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x462
8293	 461	JUMP		 	 
- stack 0: 0x84C
8294	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x84C
8295	 463	PUSH2	0080	 	 
- stack 1: 0x84C
- stack 0: 0x80
8296	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x84C
- stack 0: 0x2
8297	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8298	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x84C
- stack 0: 0x2
8299	 46D	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xA0
8300	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x2
8301	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x84C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8302	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x2
8303	 477	SUB		 	 
- stack 1: 0x84C
- stack 0: 0x0
8304	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x84C
- stack 1: 0x0
- stack 0: 0x480
8305	 47B	JUMPI		 	 
- stack 0: 0x84C
8306	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x84C
- stack 0: 0x49A
8307	 47F	JUMP		 	 
- stack 0: 0x84C
8308	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x84C
8309	 49B	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
8310	 49D	ADD		 	 
- stack 0: 0x850
8311	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
8312	 49F	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x1960017037B000003A8000000C7007804B7000004B700000637223300950001
8313	 4A0	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x1960017037B000003A8000000C7007804B7000004B700000637223300950001
- stack 0: 0xF0
8314	 4A2	SHR		 	 
- stack 1: 0x850
- stack 0: 0x196
8315	 4A3	JUMP		 	 
- stack 0: 0x850
8316	 196	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x850
8317	 197	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
8318	 198	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x1960017037B000003A8000000C7007804B7000004B700000637223300950001
8319	 199	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x1960017037B000003A8000000C7007804B7000004B700000637223300950001
- stack 0: 0xE0
8320	 19B	SHR		 	 
- stack 1: 0x850
- stack 0: 0x1960017
8321	 19C	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x1960017
- stack 0: 0xFFFF
8322	 19F	AND		 	 
- stack 1: 0x850
- stack 0: 0x17
8323	 1A0	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0x17
- stack 0: 0x1
8324	 1A2	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0x17
8325	 1A3	PUSH2	0380	 	 
- stack 2: 0x850
- stack 1: 0x17
- stack 0: 0x380
8326	 1A6	MSTORE		 	  ;; # store to x28
- stack 0: 0x850
8327	 1A7	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
8328	 1A9	ADD		 	 
- stack 0: 0x854
8329	 1AA	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
8330	 1AB	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x37B000003A8000000C7007804B7000004B70000063722330095000103B70014
8331	 1AC	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x37B000003A8000000C7007804B7000004B70000063722330095000103B70014
- stack 0: 0xF0
8332	 1AE	SHR		 	 
- stack 1: 0x854
- stack 0: 0x37B
8333	 1AF	JUMP		 	 
- stack 0: 0x854
8334	 37B	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x854
8335	 37C	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x854
- stack 0: 0x854
8336	 37D	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x37B000003A8000000C7007804B7000004B70000063722330095000103B70014
8337	 37E	PUSH1	E0	 	 
- stack 2: 0x854
- stack 1: 0x37B000003A8000000C7007804B7000004B70000063722330095000103B70014
- stack 0: 0xE0
8338	 380	SHR		 	 
- stack 1: 0x854
- stack 0: 0x37B0000
8339	 381	PUSH2	FFFF	 	 
- stack 2: 0x854
- stack 1: 0x37B0000
- stack 0: 0xFFFF
8340	 384	AND		 	 
- stack 1: 0x854
- stack 0: 0x0
8341	 385	PUSH1	01	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x1
8342	 387	SIGNEXTEND		 	 
- stack 1: 0x854
- stack 0: 0x0
8343	 388	PUSH2	0080	 	 
- stack 2: 0x854
- stack 1: 0x0
- stack 0: 0x80
8344	 38B	MSTORE		 	  ;; # store to x4
- stack 0: 0x854
8345	 38C	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
8346	 38E	ADD		 	 
- stack 0: 0x858
8347	 38F	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
8348	 390	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A8000000C7007804B7000004B70000063722330095000103B7001404060014
8349	 391	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3A8000000C7007804B7000004B70000063722330095000103B7001404060014
- stack 0: 0xF0
8350	 393	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A8
8351	 394	JUMP		 	 
- stack 0: 0x858
8352	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x858
8353	 3A9	DUP1		 	 
- stack 1: 0x858
- stack 0: 0x858
8354	 3AA	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0x858
- stack 0: 0x40
8355	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
8356	 3AE	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
8357	 3B0	ADD		 	 
- stack 0: 0x85C
8358	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
8359	 3B2	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
8360	 3B3	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
- stack 0: 0xF0
8361	 3B5	SHR		 	 
- stack 1: 0x85C
- stack 0: 0xC7
8362	 3B6	JUMP		 	 
- stack 0: 0x85C
8363	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x85C
8364	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
8365	 C9	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
8366	 CA	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
- stack 0: 0xE0
8367	 CC	SHR		 	 
- stack 1: 0x85C
- stack 0: 0xC70078
8368	 CD	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0xC70078
- stack 0: 0xFFFF
8369	 D0	AND		 	 
- stack 1: 0x85C
- stack 0: 0x78
8370	 D1	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x1
8371	 D3	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x78
8372	 D4	PUSH2	0040	 	 
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x40
8373	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x858
8374	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x85C
- stack 0: 0x8D0
8375	 D9	PUSH2	0040	 	 
- stack 2: 0x85C
- stack 1: 0x8D0
- stack 0: 0x40
8376	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x85C
8377	 DD	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
8378	 DF	ADD		 	 
- stack 0: 0x860
8379	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
8380	 E1	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
8381	 E2	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
- stack 0: 0xF0
8382	 E4	SHR		 	 
- stack 1: 0x860
- stack 0: 0x4B7
8383	 E5	JUMP		 	 
- stack 0: 0x860
8384	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x860
8385	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
8386	 4B9	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
8387	 4BA	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
- stack 0: 0xE0
8388	 4BC	SHR		 	 
- stack 1: 0x860
- stack 0: 0x4B70000
8389	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8390	 4C0	AND		 	 
- stack 1: 0x860
- stack 0: 0x0
8391	 4C1	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1
8392	 4C3	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x0
8393	 4C4	POP		 	 
- stack 0: 0x860
8394	 4C5	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
8395	 4C7	ADD		 	 
- stack 0: 0x864
8396	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
8397	 4C9	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
8398	 4CA	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
- stack 0: 0xF0
8399	 4CC	SHR		 	 
- stack 1: 0x864
- stack 0: 0x4B7
8400	 4CD	JUMP		 	 
- stack 0: 0x864
8401	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x864
8402	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
8403	 4B9	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
8404	 4BA	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
- stack 0: 0xE0
8405	 4BC	SHR		 	 
- stack 1: 0x864
- stack 0: 0x4B70000
8406	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8407	 4C0	AND		 	 
- stack 1: 0x864
- stack 0: 0x0
8408	 4C1	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x0
- stack 0: 0x1
8409	 4C3	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x0
8410	 4C4	POP		 	 
- stack 0: 0x864
8411	 4C5	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
8412	 4C7	ADD		 	 
- stack 0: 0x868
8413	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
8414	 4C9	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x63722330095000103B7001404060014064A22330177000101B00014031A0001
8415	 4CA	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x63722330095000103B7001404060014064A22330177000101B00014031A0001
- stack 0: 0xF0
8416	 4CC	SHR		 	 
- stack 1: 0x868
- stack 0: 0x637
8417	 4CD	JUMP		 	 
- stack 0: 0x868
8418	 637	JUMPDEST		 ;; __riscvimpl_LUI_122330b7	  ;; # instr: lui ra,0x12233(ignore imm)
- stack 0: 0x868
8419	 638	PUSH4	12233000	 	 
- stack 1: 0x868
- stack 0: 0x12233000
8420	 63D	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0x12233000
- stack 0: 0x20
8421	 640	MSTORE		 	  ;; # store to x1
- stack 0: 0x868
8422	 641	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
8423	 643	ADD		 	 
- stack 0: 0x86C
8424	 644	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
8425	 645	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
8426	 646	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
- stack 0: 0xF0
8427	 648	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x95
8428	 649	JUMP		 	 
- stack 0: 0x86C
8429	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x86C
8430	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
8431	 97	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
8432	 98	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
- stack 0: 0xE0
8433	 9A	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x950001
8434	 9B	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x950001
- stack 0: 0xFFFF
8435	 9E	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1
8436	 9F	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x1
8437	 A1	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1
8438	 A2	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x20
8439	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x12233000
8440	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x86C
- stack 0: 0x12233001
8441	 A7	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0x12233001
- stack 0: 0x20
8442	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x86C
8443	 AB	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
8444	 AD	ADD		 	 
- stack 0: 0x870
8445	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
8446	 AF	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
8447	 B0	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
- stack 0: 0xF0
8448	 B2	SHR		 	 
- stack 1: 0x870
- stack 0: 0x3B7
8449	 B3	JUMP		 	 
- stack 0: 0x870
8450	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x870
8451	 3B8	PUSH2	0040	 	 
- stack 1: 0x870
- stack 0: 0x40
8452	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x870
- stack 0: 0x8D0
8453	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x870
8454	 3BD	MLOAD		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
8455	 3BE	PUSH1	E0	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
- stack 0: 0xE0
8456	 3C0	SHR		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x3B70014
8457	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x3B70014
- stack 0: 0xFFFF
8458	 3C4	AND		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x14
8459	 3C5	PUSH1	01	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
8460	 3C7	SIGNEXTEND		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x14
8461	 3C8	ADD		 	 
- stack 1: 0x870
- stack 0: 0x8E4
8462	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
8463	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x870
- stack 0: 0x8E4
8464	 3CF	DUP1		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0x8E4
8465	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
8466	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xBCCDDAAB0AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8467	 3F2	AND		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
8468	 3F3	PUSH2	0020	 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x20
8469	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x12233001
8470	 3F7	PUSH1	E0	 	 
- stack 4: 0x870
- stack 3: 0x8E4
- stack 2: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 1: 0x12233001
- stack 0: 0xE0
8471	 3F9	SHL		 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x1223300100000000000000000000000000000000000000000000000000000000
8472	 3FA	ADD		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
8473	 3FB	SWAP1		 	 
- stack 2: 0x870
- stack 1: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x8E4
8474	 3FC	MSTORE		 	 
- stack 0: 0x870
8475	 3FD	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
8476	 3FF	ADD		 	 
- stack 0: 0x874
8477	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
8478	 401	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
8479	 402	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
- stack 0: 0xF0
8480	 404	SHR		 	 
- stack 1: 0x874
- stack 0: 0x406
8481	 405	JUMP		 	 
- stack 0: 0x874
8482	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x874
8483	 407	PUSH2	0040	 	 
- stack 1: 0x874
- stack 0: 0x40
8484	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x874
- stack 0: 0x8D0
8485	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8486	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x8D0
8487	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x874
8488	 412	MLOAD		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
8489	 413	PUSH1	E0	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
- stack 0: 0xE0
8490	 415	SHR		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x4060014
8491	 416	PUSH2	FFFF	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x4060014
- stack 0: 0xFFFF
8492	 419	AND		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x14
8493	 41A	PUSH1	01	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
8494	 41C	SIGNEXTEND		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x14
8495	 41D	ADD		 	 
- stack 1: 0x874
- stack 0: 0x8E4
8496	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
8497	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x8E4
8498	 424	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
8499	 425	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xE0
8500	 427	SHR		 	 
- stack 1: 0x874
- stack 0: 0x12233001
8501	 428	PUSH2	0060	 	 
- stack 2: 0x874
- stack 1: 0x12233001
- stack 0: 0x60
8502	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x874
8503	 42C	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
8504	 42E	ADD		 	 
- stack 0: 0x878
8505	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
8506	 430	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x64A22330177000101B00014031A0001044800020462FFCC065D001800210001
8507	 431	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x64A22330177000101B00014031A0001044800020462FFCC065D001800210001
- stack 0: 0xF0
8508	 433	SHR		 	 
- stack 1: 0x878
- stack 0: 0x64A
8509	 434	JUMP		 	 
- stack 0: 0x878
8510	 64A	JUMPDEST		 ;; __riscvimpl_LUI_12233eb7	  ;; # instr: lui t4,0x12233(ignore imm)
- stack 0: 0x878
8511	 64B	PUSH4	12233000	 	 
- stack 1: 0x878
- stack 0: 0x12233000
8512	 650	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x12233000
- stack 0: 0x3A0
8513	 653	MSTORE		 	  ;; # store to x29
- stack 0: 0x878
8514	 654	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
8515	 656	ADD		 	 
- stack 0: 0x87C
8516	 657	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
8517	 658	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
8518	 659	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
- stack 0: 0xF0
8519	 65B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x177
8520	 65C	JUMP		 	 
- stack 0: 0x87C
8521	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x87C
8522	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
8523	 179	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
8524	 17A	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
- stack 0: 0xE0
8525	 17C	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x1770001
8526	 17D	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x1770001
- stack 0: 0xFFFF
8527	 180	AND		 	 
- stack 1: 0x87C
- stack 0: 0x1
8528	 181	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1
8529	 183	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x1
8530	 184	PUSH2	03A0	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x3A0
8531	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x12233000
8532	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x87C
- stack 0: 0x12233001
8533	 189	PUSH2	03A0	 	 
- stack 2: 0x87C
- stack 1: 0x12233001
- stack 0: 0x3A0
8534	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x87C
8535	 18D	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
8536	 18F	ADD		 	 
- stack 0: 0x880
8537	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
8538	 191	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x1B00014031A0001044800020462FFCC065D0018002100010034F8C800530042
8539	 192	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x1B00014031A0001044800020462FFCC065D0018002100010034F8C800530042
- stack 0: 0xF0
8540	 194	SHR		 	 
- stack 1: 0x880
- stack 0: 0x1B0
8541	 195	JUMP		 	 
- stack 0: 0x880
8542	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x880
8543	 1B1	PUSH2	0060	 	 
- stack 1: 0x880
- stack 0: 0x60
8544	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x880
- stack 0: 0x12233001
8545	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0xFFFFFFFF
8546	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x880
- stack 0: 0x12233001
8547	 1BB	PUSH2	03A0	 	 
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x3A0
8548	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x12233001
8549	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x880
- stack 2: 0x12233001
- stack 1: 0x12233001
- stack 0: 0xFFFFFFFF
8550	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x12233001
8551	 1C5	SUB		 	 
- stack 1: 0x880
- stack 0: 0x0
8552	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x880
- stack 1: 0x0
- stack 0: 0x1CE
8553	 1C9	JUMPI		 	 
- stack 0: 0x880
8554	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x880
- stack 0: 0x1E8
8555	 1CD	JUMP		 	 
- stack 0: 0x880
8556	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x880
8557	 1E9	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
8558	 1EB	ADD		 	 
- stack 0: 0x884
8559	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
8560	 1ED	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
8561	 1EE	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
- stack 0: 0xF0
8562	 1F0	SHR		 	 
- stack 1: 0x884
- stack 0: 0x31A
8563	 1F1	JUMP		 	 
- stack 0: 0x884
8564	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x884
8565	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
8566	 31C	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
8567	 31D	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
- stack 0: 0xE0
8568	 31F	SHR		 	 
- stack 1: 0x884
- stack 0: 0x31A0001
8569	 320	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x31A0001
- stack 0: 0xFFFF
8570	 323	AND		 	 
- stack 1: 0x884
- stack 0: 0x1
8571	 324	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
8572	 326	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x1
8573	 327	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
8574	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x0
8575	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x884
- stack 0: 0x1
8576	 32C	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
8577	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x884
8578	 330	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
8579	 332	ADD		 	 
- stack 0: 0x888
8580	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
8581	 334	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
8582	 335	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
- stack 0: 0xF0
8583	 337	SHR		 	 
- stack 1: 0x888
- stack 0: 0x448
8584	 338	JUMP		 	 
- stack 0: 0x888
8585	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x888
8586	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
8587	 44A	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
8588	 44B	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
- stack 0: 0xE0
8589	 44D	SHR		 	 
- stack 1: 0x888
- stack 0: 0x4480002
8590	 44E	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x4480002
- stack 0: 0xFFFF
8591	 451	AND		 	 
- stack 1: 0x888
- stack 0: 0x2
8592	 452	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x1
8593	 454	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x2
8594	 455	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
8595	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x888
8596	 459	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
8597	 45B	ADD		 	 
- stack 0: 0x88C
8598	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
8599	 45D	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
8600	 45E	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
- stack 0: 0xF0
8601	 460	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x462
8602	 461	JUMP		 	 
- stack 0: 0x88C
8603	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x88C
8604	 463	PUSH2	0080	 	 
- stack 1: 0x88C
- stack 0: 0x80
8605	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x88C
- stack 0: 0x1
8606	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
8607	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0x1
8608	 46D	PUSH2	00A0	 	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0xA0
8609	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x2
8610	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x88C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8611	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x2
8612	 477	SUB		 	 
- stack 1: 0x88C
- stack 0: 0x1
8613	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x88C
- stack 1: 0x1
- stack 0: 0x480
8614	 47B	JUMPI		 	 
- stack 0: 0x88C
8615	 480	JUMPDEST		 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x88C
8616	 481	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x88C
- stack 0: 0x88C
8617	 482	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
8618	 483	PUSH1	E0	 	 
- stack 2: 0x88C
- stack 1: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
- stack 0: 0xE0
8619	 485	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x462FFCC
8620	 486	PUSH2	FFFF	 	 
- stack 2: 0x88C
- stack 1: 0x462FFCC
- stack 0: 0xFFFF
8621	 489	AND		 	 
- stack 1: 0x88C
- stack 0: 0xFFCC
8622	 48A	PUSH1	01	 	 
- stack 2: 0x88C
- stack 1: 0xFFCC
- stack 0: 0x1
8623	 48C	SIGNEXTEND		 	 
- stack 1: 0x88C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC
8624	 48D	ADD		 	 
- stack 0: 0x858
8625	 48E	PUSH4	FFFFFFFF	 	 
- stack 1: 0x858
- stack 0: 0xFFFFFFFF
8626	 493	AND		 	  ;; # mask to 32 bits
- stack 0: 0x858
8627	 494	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
8628	 495	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x3A8000000C7007804B7000004B70000063722330095000103B7001404060014
8629	 496	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x3A8000000C7007804B7000004B70000063722330095000103B7001404060014
- stack 0: 0xF0
8630	 498	SHR		 	 
- stack 1: 0x858
- stack 0: 0x3A8
8631	 499	JUMP		 	 
- stack 0: 0x858
8632	 3A8	JUMPDEST		 ;; __riscvimpl_AUIPC_17010000	  ;; # instr: auipc sp,0x0(ignore imm)
- stack 0: 0x858
8633	 3A9	DUP1		 	 
- stack 1: 0x858
- stack 0: 0x858
8634	 3AA	PUSH2	0040	 	 
- stack 2: 0x858
- stack 1: 0x858
- stack 0: 0x40
8635	 3AD	MSTORE		 	  ;; # store to x2
- stack 0: 0x858
8636	 3AE	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
8637	 3B0	ADD		 	 
- stack 0: 0x85C
8638	 3B1	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
8639	 3B2	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
8640	 3B3	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
- stack 0: 0xF0
8641	 3B5	SHR		 	 
- stack 1: 0x85C
- stack 0: 0xC7
8642	 3B6	JUMP		 	 
- stack 0: 0x85C
8643	 C7	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,170(ignore imm)
- stack 0: 0x85C
8644	 C8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
8645	 C9	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
8646	 CA	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0xC7007804B7000004B70000063722330095000103B7001404060014064A2233
- stack 0: 0xE0
8647	 CC	SHR		 	 
- stack 1: 0x85C
- stack 0: 0xC70078
8648	 CD	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0xC70078
- stack 0: 0xFFFF
8649	 D0	AND		 	 
- stack 1: 0x85C
- stack 0: 0x78
8650	 D1	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x1
8651	 D3	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x78
8652	 D4	PUSH2	0040	 	 
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x40
8653	 D7	MLOAD		 	  ;; # read from x2
- stack 2: 0x85C
- stack 1: 0x78
- stack 0: 0x858
8654	 D8	ADD		 	  ;; # ADDI 2
- stack 1: 0x85C
- stack 0: 0x8D0
8655	 D9	PUSH2	0040	 	 
- stack 2: 0x85C
- stack 1: 0x8D0
- stack 0: 0x40
8656	 DC	MSTORE		 	  ;; # store to x2
- stack 0: 0x85C
8657	 DD	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
8658	 DF	ADD		 	 
- stack 0: 0x860
8659	 E0	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
8660	 E1	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
8661	 E2	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
- stack 0: 0xF0
8662	 E4	SHR		 	 
- stack 1: 0x860
- stack 0: 0x4B7
8663	 E5	JUMP		 	 
- stack 0: 0x860
8664	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x860
8665	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x860
- stack 0: 0x860
8666	 4B9	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
8667	 4BA	PUSH1	E0	 	 
- stack 2: 0x860
- stack 1: 0x4B7000004B70000063722330095000103B7001404060014064A223301770001
- stack 0: 0xE0
8668	 4BC	SHR		 	 
- stack 1: 0x860
- stack 0: 0x4B70000
8669	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x860
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8670	 4C0	AND		 	 
- stack 1: 0x860
- stack 0: 0x0
8671	 4C1	PUSH1	01	 	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x1
8672	 4C3	SIGNEXTEND		 	 
- stack 1: 0x860
- stack 0: 0x0
8673	 4C4	POP		 	 
- stack 0: 0x860
8674	 4C5	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
8675	 4C7	ADD		 	 
- stack 0: 0x864
8676	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
8677	 4C9	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
8678	 4CA	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
- stack 0: 0xF0
8679	 4CC	SHR		 	 
- stack 1: 0x864
- stack 0: 0x4B7
8680	 4CD	JUMP		 	 
- stack 0: 0x864
8681	 4B7	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x864
8682	 4B8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x864
- stack 0: 0x864
8683	 4B9	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
8684	 4BA	PUSH1	E0	 	 
- stack 2: 0x864
- stack 1: 0x4B70000063722330095000103B7001404060014064A22330177000101B00014
- stack 0: 0xE0
8685	 4BC	SHR		 	 
- stack 1: 0x864
- stack 0: 0x4B70000
8686	 4BD	PUSH2	FFFF	 	 
- stack 2: 0x864
- stack 1: 0x4B70000
- stack 0: 0xFFFF
8687	 4C0	AND		 	 
- stack 1: 0x864
- stack 0: 0x0
8688	 4C1	PUSH1	01	 	 
- stack 2: 0x864
- stack 1: 0x0
- stack 0: 0x1
8689	 4C3	SIGNEXTEND		 	 
- stack 1: 0x864
- stack 0: 0x0
8690	 4C4	POP		 	 
- stack 0: 0x864
8691	 4C5	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
8692	 4C7	ADD		 	 
- stack 0: 0x868
8693	 4C8	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
8694	 4C9	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x63722330095000103B7001404060014064A22330177000101B00014031A0001
8695	 4CA	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x63722330095000103B7001404060014064A22330177000101B00014031A0001
- stack 0: 0xF0
8696	 4CC	SHR		 	 
- stack 1: 0x868
- stack 0: 0x637
8697	 4CD	JUMP		 	 
- stack 0: 0x868
8698	 637	JUMPDEST		 ;; __riscvimpl_LUI_122330b7	  ;; # instr: lui ra,0x12233(ignore imm)
- stack 0: 0x868
8699	 638	PUSH4	12233000	 	 
- stack 1: 0x868
- stack 0: 0x12233000
8700	 63D	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0x12233000
- stack 0: 0x20
8701	 640	MSTORE		 	  ;; # store to x1
- stack 0: 0x868
8702	 641	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
8703	 643	ADD		 	 
- stack 0: 0x86C
8704	 644	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
8705	 645	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
8706	 646	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
- stack 0: 0xF0
8707	 648	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x95
8708	 649	JUMP		 	 
- stack 0: 0x86C
8709	 95	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,1216(ignore imm)
- stack 0: 0x86C
8710	 96	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x86C
- stack 0: 0x86C
8711	 97	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
8712	 98	PUSH1	E0	 	 
- stack 2: 0x86C
- stack 1: 0x95000103B7001404060014064A22330177000101B00014031A000104480002
- stack 0: 0xE0
8713	 9A	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x950001
8714	 9B	PUSH2	FFFF	 	 
- stack 2: 0x86C
- stack 1: 0x950001
- stack 0: 0xFFFF
8715	 9E	AND		 	 
- stack 1: 0x86C
- stack 0: 0x1
8716	 9F	PUSH1	01	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x1
8717	 A1	SIGNEXTEND		 	 
- stack 1: 0x86C
- stack 0: 0x1
8718	 A2	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x20
8719	 A5	MLOAD		 	  ;; # read from x1
- stack 2: 0x86C
- stack 1: 0x1
- stack 0: 0x12233000
8720	 A6	ADD		 	  ;; # ADDI 1
- stack 1: 0x86C
- stack 0: 0x12233001
8721	 A7	PUSH2	0020	 	 
- stack 2: 0x86C
- stack 1: 0x12233001
- stack 0: 0x20
8722	 AA	MSTORE		 	  ;; # store to x1
- stack 0: 0x86C
8723	 AB	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
8724	 AD	ADD		 	 
- stack 0: 0x870
8725	 AE	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
8726	 AF	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
8727	 B0	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
- stack 0: 0xF0
8728	 B2	SHR		 	 
- stack 1: 0x870
- stack 0: 0x3B7
8729	 B3	JUMP		 	 
- stack 0: 0x870
8730	 3B7	JUMPDEST		 ;; __riscvimpl_SW_0_2_1	  ;; # instr: sw ra,0(sp)(ignore imm)
- stack 0: 0x870
8731	 3B8	PUSH2	0040	 	 
- stack 1: 0x870
- stack 0: 0x40
8732	 3BB	MLOAD		 	  ;; # read from x2
- stack 1: 0x870
- stack 0: 0x8D0
8733	 3BC	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x870
8734	 3BD	MLOAD		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
8735	 3BE	PUSH1	E0	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x3B7001404060014064A22330177000101B00014031A0001044800020462FFCC
- stack 0: 0xE0
8736	 3C0	SHR		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x3B70014
8737	 3C1	PUSH2	FFFF	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x3B70014
- stack 0: 0xFFFF
8738	 3C4	AND		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x14
8739	 3C5	PUSH1	01	 	 
- stack 3: 0x870
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
8740	 3C7	SIGNEXTEND		 	 
- stack 2: 0x870
- stack 1: 0x8D0
- stack 0: 0x14
8741	 3C8	ADD		 	 
- stack 1: 0x870
- stack 0: 0x8E4
8742	 3C9	PUSH4	FFFFFFFF	 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
8743	 3CE	AND		 	  ;; # mask to 32 bits
- stack 1: 0x870
- stack 0: 0x8E4
8744	 3CF	DUP1		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0x8E4
8745	 3D0	MLOAD		 	  ;; # fetch
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
8746	 3D1	PUSH32	00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF	 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
8747	 3F2	AND		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
8748	 3F3	PUSH2	0020	 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x20
8749	 3F6	MLOAD		 	  ;; # read from x1
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x12233001
8750	 3F7	PUSH1	E0	 	 
- stack 4: 0x870
- stack 3: 0x8E4
- stack 2: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 1: 0x12233001
- stack 0: 0xE0
8751	 3F9	SHL		 	 
- stack 3: 0x870
- stack 2: 0x8E4
- stack 1: 0xAA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x1223300100000000000000000000000000000000000000000000000000000000
8752	 3FA	ADD		 	 
- stack 2: 0x870
- stack 1: 0x8E4
- stack 0: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
8753	 3FB	SWAP1		 	 
- stack 2: 0x870
- stack 1: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0x8E4
8754	 3FC	MSTORE		 	 
- stack 0: 0x870
8755	 3FD	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
8756	 3FF	ADD		 	 
- stack 0: 0x874
8757	 400	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
8758	 401	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
8759	 402	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
- stack 0: 0xF0
8760	 404	SHR		 	 
- stack 1: 0x874
- stack 0: 0x406
8761	 405	JUMP		 	 
- stack 0: 0x874
8762	 406	JUMPDEST		 ;; __riscvimpl_LW_3_2_0	  ;; # instr: lw gp,0(sp)(ignore imm)
- stack 0: 0x874
8763	 407	PUSH2	0040	 	 
- stack 1: 0x874
- stack 0: 0x40
8764	 40A	MLOAD		 	  ;; # read from x2
- stack 1: 0x874
- stack 0: 0x8D0
8765	 40B	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0xFFFFFFFF
8766	 410	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x8D0
8767	 411	DUP2		 	  ;; # get IMM from PC
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x874
8768	 412	MLOAD		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
8769	 413	PUSH1	E0	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x4060014064A22330177000101B00014031A0001044800020462FFCC065D0018
- stack 0: 0xE0
8770	 415	SHR		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x4060014
8771	 416	PUSH2	FFFF	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x4060014
- stack 0: 0xFFFF
8772	 419	AND		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x14
8773	 41A	PUSH1	01	 	 
- stack 3: 0x874
- stack 2: 0x8D0
- stack 1: 0x14
- stack 0: 0x1
8774	 41C	SIGNEXTEND		 	 
- stack 2: 0x874
- stack 1: 0x8D0
- stack 0: 0x14
8775	 41D	ADD		 	 
- stack 1: 0x874
- stack 0: 0x8E4
8776	 41E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x874
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
8777	 423	AND		 	  ;; # mask to 32 bits
- stack 1: 0x874
- stack 0: 0x8E4
8778	 424	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
8779	 425	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x122330010AA00AA0A00AA00A1234567858213098000000000000000000000000
- stack 0: 0xE0
8780	 427	SHR		 	 
- stack 1: 0x874
- stack 0: 0x12233001
8781	 428	PUSH2	0060	 	 
- stack 2: 0x874
- stack 1: 0x12233001
- stack 0: 0x60
8782	 42B	MSTORE		 	  ;; # store to x3
- stack 0: 0x874
8783	 42C	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
8784	 42E	ADD		 	 
- stack 0: 0x878
8785	 42F	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
8786	 430	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x64A22330177000101B00014031A0001044800020462FFCC065D001800210001
8787	 431	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x64A22330177000101B00014031A0001044800020462FFCC065D001800210001
- stack 0: 0xF0
8788	 433	SHR		 	 
- stack 1: 0x878
- stack 0: 0x64A
8789	 434	JUMP		 	 
- stack 0: 0x878
8790	 64A	JUMPDEST		 ;; __riscvimpl_LUI_12233eb7	  ;; # instr: lui t4,0x12233(ignore imm)
- stack 0: 0x878
8791	 64B	PUSH4	12233000	 	 
- stack 1: 0x878
- stack 0: 0x12233000
8792	 650	PUSH2	03A0	 	 
- stack 2: 0x878
- stack 1: 0x12233000
- stack 0: 0x3A0
8793	 653	MSTORE		 	  ;; # store to x29
- stack 0: 0x878
8794	 654	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
8795	 656	ADD		 	 
- stack 0: 0x87C
8796	 657	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
8797	 658	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
8798	 659	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
- stack 0: 0xF0
8799	 65B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x177
8800	 65C	JUMP		 	 
- stack 0: 0x87C
8801	 177	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,170(ignore imm)
- stack 0: 0x87C
8802	 178	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x87C
- stack 0: 0x87C
8803	 179	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
8804	 17A	PUSH1	E0	 	 
- stack 2: 0x87C
- stack 1: 0x177000101B00014031A0001044800020462FFCC065D0018002100010034F8C8
- stack 0: 0xE0
8805	 17C	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x1770001
8806	 17D	PUSH2	FFFF	 	 
- stack 2: 0x87C
- stack 1: 0x1770001
- stack 0: 0xFFFF
8807	 180	AND		 	 
- stack 1: 0x87C
- stack 0: 0x1
8808	 181	PUSH1	01	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x1
8809	 183	SIGNEXTEND		 	 
- stack 1: 0x87C
- stack 0: 0x1
8810	 184	PUSH2	03A0	 	 
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x3A0
8811	 187	MLOAD		 	  ;; # read from x29
- stack 2: 0x87C
- stack 1: 0x1
- stack 0: 0x12233000
8812	 188	ADD		 	  ;; # ADDI 29
- stack 1: 0x87C
- stack 0: 0x12233001
8813	 189	PUSH2	03A0	 	 
- stack 2: 0x87C
- stack 1: 0x12233001
- stack 0: 0x3A0
8814	 18C	MSTORE		 	  ;; # store to x29
- stack 0: 0x87C
8815	 18D	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
8816	 18F	ADD		 	 
- stack 0: 0x880
8817	 190	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
8818	 191	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x1B00014031A0001044800020462FFCC065D0018002100010034F8C800530042
8819	 192	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x1B00014031A0001044800020462FFCC065D0018002100010034F8C800530042
- stack 0: 0xF0
8820	 194	SHR		 	 
- stack 1: 0x880
- stack 0: 0x1B0
8821	 195	JUMP		 	 
- stack 0: 0x880
8822	 1B0	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,460(ignore imm)
- stack 0: 0x880
8823	 1B1	PUSH2	0060	 	 
- stack 1: 0x880
- stack 0: 0x60
8824	 1B4	MLOAD		 	  ;; # read from x3
- stack 1: 0x880
- stack 0: 0x12233001
8825	 1B5	PUSH4	FFFFFFFF	 	 
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0xFFFFFFFF
8826	 1BA	AND		 	  ;; # mask to 32 bits
- stack 1: 0x880
- stack 0: 0x12233001
8827	 1BB	PUSH2	03A0	 	 
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x3A0
8828	 1BE	MLOAD		 	  ;; # read from x29
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x12233001
8829	 1BF	PUSH4	FFFFFFFF	 	 
- stack 3: 0x880
- stack 2: 0x12233001
- stack 1: 0x12233001
- stack 0: 0xFFFFFFFF
8830	 1C4	AND		 	  ;; # mask to 32 bits
- stack 2: 0x880
- stack 1: 0x12233001
- stack 0: 0x12233001
8831	 1C5	SUB		 	 
- stack 1: 0x880
- stack 0: 0x0
8832	 1C6	PUSH2	01CE	 ;; _neq_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 2: 0x880
- stack 1: 0x0
- stack 0: 0x1CE
8833	 1C9	JUMPI		 	 
- stack 0: 0x880
8834	 1CA	PUSH2	01E8	 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 1: 0x880
- stack 0: 0x1E8
8835	 1CD	JUMP		 	 
- stack 0: 0x880
8836	 1E8	JUMPDEST		 ;; _neq_after_0a7f2e9cb4c0e33e0f2c9416b692b1c63ce25a25eea265c6291bf948a4401c83	 
- stack 0: 0x880
8837	 1E9	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
8838	 1EB	ADD		 	 
- stack 0: 0x884
8839	 1EC	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
8840	 1ED	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
8841	 1EE	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
- stack 0: 0xF0
8842	 1F0	SHR		 	 
- stack 1: 0x884
- stack 0: 0x31A
8843	 1F1	JUMP		 	 
- stack 0: 0x884
8844	 31A	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,864(ignore imm)
- stack 0: 0x884
8845	 31B	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
8846	 31C	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
8847	 31D	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x31A0001044800020462FFCC065D0018002100010034F8C80053004200660000
- stack 0: 0xE0
8848	 31F	SHR		 	 
- stack 1: 0x884
- stack 0: 0x31A0001
8849	 320	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x31A0001
- stack 0: 0xFFFF
8850	 323	AND		 	 
- stack 1: 0x884
- stack 0: 0x1
8851	 324	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
8852	 326	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0x1
8853	 327	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x80
8854	 32A	MLOAD		 	  ;; # read from x4
- stack 2: 0x884
- stack 1: 0x1
- stack 0: 0x1
8855	 32B	ADD		 	  ;; # ADDI 4
- stack 1: 0x884
- stack 0: 0x2
8856	 32C	PUSH2	0080	 	 
- stack 2: 0x884
- stack 1: 0x2
- stack 0: 0x80
8857	 32F	MSTORE		 	  ;; # store to x4
- stack 0: 0x884
8858	 330	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
8859	 332	ADD		 	 
- stack 0: 0x888
8860	 333	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
8861	 334	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
8862	 335	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
- stack 0: 0xF0
8863	 337	SHR		 	 
- stack 1: 0x888
- stack 0: 0x448
8864	 338	JUMP		 	 
- stack 0: 0x888
8865	 448	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x888
8866	 449	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x888
- stack 0: 0x888
8867	 44A	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
8868	 44B	PUSH1	E0	 	 
- stack 2: 0x888
- stack 1: 0x44800020462FFCC065D0018002100010034F8C80053004200660000069D0001
- stack 0: 0xE0
8869	 44D	SHR		 	 
- stack 1: 0x888
- stack 0: 0x4480002
8870	 44E	PUSH2	FFFF	 	 
- stack 2: 0x888
- stack 1: 0x4480002
- stack 0: 0xFFFF
8871	 451	AND		 	 
- stack 1: 0x888
- stack 0: 0x2
8872	 452	PUSH1	01	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0x1
8873	 454	SIGNEXTEND		 	 
- stack 1: 0x888
- stack 0: 0x2
8874	 455	PUSH2	00A0	 	 
- stack 2: 0x888
- stack 1: 0x2
- stack 0: 0xA0
8875	 458	MSTORE		 	  ;; # store to x5
- stack 0: 0x888
8876	 459	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
8877	 45B	ADD		 	 
- stack 0: 0x88C
8878	 45C	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
8879	 45D	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
8880	 45E	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x462FFCC065D0018002100010034F8C80053004200660000069D000100210001
- stack 0: 0xF0
8881	 460	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x462
8882	 461	JUMP		 	 
- stack 0: 0x88C
8883	 462	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-2c(ignore imm)
- stack 0: 0x88C
8884	 463	PUSH2	0080	 	 
- stack 1: 0x88C
- stack 0: 0x80
8885	 466	MLOAD		 	  ;; # read from x4
- stack 1: 0x88C
- stack 0: 0x2
8886	 467	PUSH4	FFFFFFFF	 	 
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8887	 46C	AND		 	  ;; # mask to 32 bits
- stack 1: 0x88C
- stack 0: 0x2
8888	 46D	PUSH2	00A0	 	 
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0xA0
8889	 470	MLOAD		 	  ;; # read from x5
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0x2
8890	 471	PUSH4	FFFFFFFF	 	 
- stack 3: 0x88C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
8891	 476	AND		 	  ;; # mask to 32 bits
- stack 2: 0x88C
- stack 1: 0x2
- stack 0: 0x2
8892	 477	SUB		 	 
- stack 1: 0x88C
- stack 0: 0x0
8893	 478	PUSH2	0480	 ;; _neq_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 2: 0x88C
- stack 1: 0x0
- stack 0: 0x480
8894	 47B	JUMPI		 	 
- stack 0: 0x88C
8895	 47C	PUSH2	049A	 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 1: 0x88C
- stack 0: 0x49A
8896	 47F	JUMP		 	 
- stack 0: 0x88C
8897	 49A	JUMPDEST		 ;; _neq_after_17a68d58402adc48492b844c3a0c3a7063e382f32cdf6d806047571dbcdf156e	 
- stack 0: 0x88C
8898	 49B	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
8899	 49D	ADD		 	 
- stack 0: 0x890
8900	 49E	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
8901	 49F	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x65D0018002100010034F8C80053004200660000069D0001002100010034F8CC
8902	 4A0	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x65D0018002100010034F8C80053004200660000069D0001002100010034F8CC
- stack 0: 0xF0
8903	 4A2	SHR		 	 
- stack 1: 0x890
- stack 0: 0x65D
8904	 4A3	JUMP		 	 
- stack 0: 0x890
8905	 65D	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x890
8906	 65E	PUSH1	00	 	 
- stack 1: 0x890
- stack 0: 0x0
8907	 660	PUSH4	FFFFFFFF	 	 
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
8908	 665	AND		 	  ;; # mask to 32 bits
- stack 1: 0x890
- stack 0: 0x0
8909	 666	PUSH2	0380	 	 
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x380
8910	 669	MLOAD		 	  ;; # read from x28
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x17
8911	 66A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x890
- stack 2: 0x0
- stack 1: 0x17
- stack 0: 0xFFFFFFFF
8912	 66F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x890
- stack 1: 0x0
- stack 0: 0x17
8913	 670	SUB		 	 
- stack 1: 0x890
- stack 0: 0x17
8914	 671	PUSH2	0679	 ;; _neq_b625b50b5b5d7c21e78881f38c5efa5b8f800aa1bc6d939e86c079be9e91f061	 
- stack 2: 0x890
- stack 1: 0x17
- stack 0: 0x679
8915	 674	JUMPI		 	 
- stack 0: 0x890
8916	 679	JUMPDEST		 ;; _neq_b625b50b5b5d7c21e78881f38c5efa5b8f800aa1bc6d939e86c079be9e91f061	 
- stack 0: 0x890
8917	 67A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
8918	 67B	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x65D0018002100010034F8C80053004200660000069D0001002100010034F8CC
8919	 67C	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0x65D0018002100010034F8C80053004200660000069D0001002100010034F8CC
- stack 0: 0xE0
8920	 67E	SHR		 	 
- stack 1: 0x890
- stack 0: 0x65D0018
8921	 67F	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0x65D0018
- stack 0: 0xFFFF
8922	 682	AND		 	 
- stack 1: 0x890
- stack 0: 0x18
8923	 683	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0x18
- stack 0: 0x1
8924	 685	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0x18
8925	 686	ADD		 	 
- stack 0: 0x8A8
8926	 687	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8A8
- stack 0: 0xFFFFFFFF
8927	 68C	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8A8
8928	 68D	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
8929	 68E	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x2100010034F8CC005300420066000006A80000006600006574796D00007473
8930	 68F	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x2100010034F8CC005300420066000006A80000006600006574796D00007473
- stack 0: 0xF0
8931	 691	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x21
8932	 692	JUMP		 	 
- stack 0: 0x8A8
8933	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8A8
8934	 22	PUSH4	00001000	 	 
- stack 1: 0x8A8
- stack 0: 0x1000
8935	 27	PUSH2	0160	 	 
- stack 2: 0x8A8
- stack 1: 0x1000
- stack 0: 0x160
8936	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8A8
8937	 2B	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
8938	 2D	ADD		 	 
- stack 0: 0x8AC
8939	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
8940	 2F	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x34F8CC005300420066000006A80000006600006574796D0000747300525245
8941	 30	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x34F8CC005300420066000006A80000006600006574796D0000747300525245
- stack 0: 0xF0
8942	 32	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x34
8943	 33	JUMP		 	 
- stack 0: 0x8AC
8944	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1856(ignore imm)
- stack 0: 0x8AC
8945	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8AC
- stack 0: 0x8AC
8946	 36	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x34F8CC005300420066000006A80000006600006574796D0000747300525245
8947	 37	PUSH1	E0	 	 
- stack 2: 0x8AC
- stack 1: 0x34F8CC005300420066000006A80000006600006574796D0000747300525245
- stack 0: 0xE0
8948	 39	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x34F8CC
8949	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8AC
- stack 1: 0x34F8CC
- stack 0: 0xFFFF
8950	 3D	AND		 	 
- stack 1: 0x8AC
- stack 0: 0xF8CC
8951	 3E	PUSH1	01	 	 
- stack 2: 0x8AC
- stack 1: 0xF8CC
- stack 0: 0x1
8952	 40	SIGNEXTEND		 	 
- stack 1: 0x8AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
8953	 41	PUSH2	0160	 	 
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
- stack 0: 0x160
8954	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8CC
- stack 0: 0x1000
8955	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8AC
- stack 0: 0x8CC
8956	 46	PUSH2	0160	 	 
- stack 2: 0x8AC
- stack 1: 0x8CC
- stack 0: 0x160
8957	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8AC
8958	 4A	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
8959	 4C	ADD		 	 
- stack 0: 0x8B0
8960	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
8961	 4E	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x5300420066000006A80000006600006574796D000074730052524500004B4F
8962	 4F	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x5300420066000006A80000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
8963	 51	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x53
8964	 52	JUMP		 	 
- stack 0: 0x8B0
8965	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8B0
8966	 54	PUSH4	00042000	 	 
- stack 1: 0x8B0
- stack 0: 0x42000
8967	 59	PUSH2	0140	 	 
- stack 2: 0x8B0
- stack 1: 0x42000
- stack 0: 0x140
8968	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8B0
8969	 5D	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
8970	 5F	ADD		 	 
- stack 0: 0x8B4
8971	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
8972	 61	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x66000006A80000006600006574796D000074730052524500004B4F00112233
8973	 62	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x66000006A80000006600006574796D000074730052524500004B4F00112233
- stack 0: 0xF0
8974	 64	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x66
8975	 65	JUMP		 	 
- stack 0: 0x8B4
8976	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8B4
8977	 67	PUSH2	0140	 	 
- stack 1: 0x8B4
- stack 0: 0x140
8978	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8B4
- stack 0: 0x42000
8979	 6B	PUSH2	0075	 ;; _ecall_59f52a3ac6ee69558bad7a9c3c675c76a6d3539cf7b115e00697f23b3445ecc3	 
- stack 2: 0x8B4
- stack 1: 0x42000
- stack 0: 0x75
8980	 6E	JUMPI		 	 
- stack 0: 0x8B4
8981	 75	JUMPDEST		 ;; _ecall_59f52a3ac6ee69558bad7a9c3c675c76a6d3539cf7b115e00697f23b3445ecc3	 
- stack 0: 0x8B4
8982	 76	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
8983	 78	PUSH2	0160	 	 
- stack 2: 0x8B4
- stack 1: 0x4
- stack 0: 0x160
8984	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8B4
- stack 1: 0x4
- stack 0: 0x8CC
8985	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8B4
8986	 7D	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
8987	 7F	ADD		 	 
- stack 0: 0x8B8
8988	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
8989	 81	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0x6A80000006600006574796D000074730052524500004B4F0011223330011223
8990	 82	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0x6A80000006600006574796D000074730052524500004B4F0011223330011223
- stack 0: 0xF0
8991	 84	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0x6A8
8992	 85	JUMP		 	 
- stack 0: 0x8B8
8993	 6A8	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8B8
8994	 6A9	PUSH4	00000000	 	 
- stack 1: 0x8B8
- stack 0: 0x0
8995	 6AE	PUSH2	0140	 	 
- stack 2: 0x8B8
- stack 1: 0x0
- stack 0: 0x140
8996	 6B1	MSTORE		 	  ;; # store to x10
- stack 0: 0x8B8
8997	 6B2	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
8998	 6B4	ADD		 	 
- stack 0: 0x8BC
8999	 6B5	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
9000	 6B6	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x6600006574796D000074730052524500004B4F001122333001122333001122
9001	 6B7	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x6600006574796D000074730052524500004B4F001122333001122333001122
- stack 0: 0xF0
9002	 6B9	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x66
9003	 6BA	JUMP		 	 
- stack 0: 0x8BC
9004	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8BC
9005	 67	PUSH2	0140	 	 
- stack 1: 0x8BC
- stack 0: 0x140
9006	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8BC
- stack 0: 0x0
9007	 6B	PUSH2	0075	 ;; _ecall_59f52a3ac6ee69558bad7a9c3c675c76a6d3539cf7b115e00697f23b3445ecc3	 
- stack 2: 0x8BC
- stack 1: 0x0
- stack 0: 0x75
9008	 6E	JUMPI		 	 
- stack 0: 0x8BC
9009	 6F	PUSH1	20	 	 
- stack 1: 0x8BC
- stack 0: 0x20
9010	 71	PUSH2	0160	 	 
- stack 2: 0x8BC
- stack 1: 0x20
- stack 0: 0x160
9011	 74	RETURN		 	 
Final bytecode length; 2996
Returned: 00000000000000000000000000000000000000000000000000000000000008cc
gasUsed : 30684
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c,430,434
** HOT: 438 - range: 438,43c,440,444,448,44c,450,454,458,45c
** HOT: 460 - range: 460,464,468,46c,470,474,478,47c,480,484
** HOT: 488 - range: 488,48c,490,494,498,49c,4a0,4a4,4a8,4ac
** HOT: 4b0 - range: 4b0,4b4,4b8,4bc,4c0,4c4,4c8,4cc,4d0,4d4
** HOT: 4d8 - range: 4d8,4dc,4e0,4e4,4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530,534,538,53c,540,544,548,54c
** HOT: 550 - range: 550,554,558,55c,560,564,568,56c,570,574,578
** HOT: 57c - range: 57c,580,584,588,58c,590,594,598,59c,5a0,5a4,5a8,5ac
** HOT: 5b0 - range: 5b0,5b4,5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4,5d8
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4,5d8
** HOT: 5dc - range: 5dc,5e0,5e4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4,5f8,5fc,600,604,608,60c,610,614
** HOT: 5f0 - range: 5f0,5f4,5f8,5fc,600,604,608,60c,610,614
** HOT: 618 - range: 618,61c,620
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640,644,648,64c,650,654
** HOT: 62c - range: 62c,630,634,638,63c,640,644,648,64c,650,654
** HOT: 658 - range: 658,65c,660
** HOT: 664 - range: 664,668,66c,670,674,678,67c,680,684,688,68c,690
** HOT: 66c - range: 66c,670,674,678,67c,680,684,688,68c,690
** HOT: 694 - range: 694,698,69c
** HOT: 6a0 - range: 6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6a8 - range: 6a8,6ac,6b0,6b4,6b8,6bc,6c0,6c4,6c8,6cc,6d0
** HOT: 6d4 - range: 6d4,6d8,6dc
** HOT: 6e0 - range: 6e0,6e4,6e8,6ec,6f0,6f4,6f8,6fc,700,704,708,70c,710
** HOT: 6e8 - range: 6e8,6ec,6f0,6f4,6f8,6fc,700,704,708,70c,710
** HOT: 714 - range: 714,718,71c
** HOT: 720 - range: 720,724,728,72c,730,734,738,73c,740,744,748
** HOT: 728 - range: 728,72c,730,734,738,73c,740,744,748
** HOT: 74c - range: 74c,750,754
** HOT: 758 - range: 758,75c,760,764,768,76c,770,774,778,77c,780,784
** HOT: 760 - range: 760,764,768,76c,770,774,778,77c,780,784
** HOT: 788 - range: 788,78c,790
** HOT: 794 - range: 794,798,79c,7a0,7a4,7a8,7ac,7b0,7b4,7b8,7bc,7c0,7c4
** HOT: 79c - range: 79c,7a0,7a4,7a8,7ac,7b0,7b4,7b8,7bc,7c0,7c4
** HOT: 7c8 - range: 7c8,7cc,7d0
** HOT: 7d4 - range: 7d4,7d8,7dc,7e0,7e4,7e8,7ec,7f0,7f4,7f8,7fc,800
** HOT: 7dc - range: 7dc,7e0,7e4,7e8,7ec,7f0,7f4,7f8,7fc,800
** HOT: 804 - range: 804,808,80c
** HOT: 810 - range: 810,814,818,81c,820,824,828,82c,830,834,838,83c,840
** HOT: 818 - range: 818,81c,820,824,828,82c,830,834,838,83c,840
** HOT: 844 - range: 844,848,84c
** HOT: 850 - range: 850,854,858,85c,860,864,868,86c,870,874,878,87c,880
** HOT: 858 - range: 858,85c,860,864,868,86c,870,874,878,87c,880
** HOT: 884 - range: 884,888,88c
