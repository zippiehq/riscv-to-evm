Running in EVM:
0	 0	PUSH4	0510	 	 
- stack 0: 0x510
1	 5	PUSH2	0519	 ;; _rambegin	 
- stack 1: 0x510
- stack 0: 0x519
2	 8	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x519
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x510
- stack 0: 0x51A
4	 B	PUSH2	0400	 	 
- stack 2: 0x510
- stack 1: 0x51A
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x2100010034F90000530042006600000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00001000	 	 
- stack 1: 0x400
- stack 0: 0x1000
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x1000
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x34F90000530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34F900
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x34F900
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0xF900
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0xF900
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF900
- stack 0: 0x1000
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x900
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x900
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000010100FF
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x530042006600000086F0100099FF0000B8F0F100CBFF0F00EA0000010100FF
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA0000010100FF0114000F
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x6600000086F0100099FF0000B8F0F100CBFF0F00EA0000010100FF0114000F
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_96aa091709b9021147a1d574ecf175c50443185848c13c4989d3bd93cb78a665	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_96aa091709b9021147a1d574ecf175c50443185848c13c4989d3bd93cb78a665	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x900
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	ff010000	 	 
- stack 1: 0x410
- stack 0: 0xFF010000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF010000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF00FF00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF00FF00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF01
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8F0F100CBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF01
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x418
108	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x418
- stack 0: 0xF0F1000
109	 BE	PUSH2	0040	 	 
- stack 2: 0x418
- stack 1: 0xF0F1000
- stack 0: 0x40
110	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x418
111	 C2	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
112	 C4	ADD		 	 
- stack 0: 0x41C
113	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
114	 C6	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF010099FFF0
115	 C7	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF010099FFF0
- stack 0: 0xF0
116	 C9	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCB
117	 CA	JUMP		 	 
- stack 0: 0x41C
118	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x41C
119	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x41C
- stack 0: 0x41C
120	 CD	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF010099FFF0
121	 CE	PUSH1	E0	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F00EA0000010100FF0114000F01330002014D04A0018FFF010099FFF0
- stack 0: 0xE0
122	 D0	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xCBFF0F
123	 D1	PUSH2	FFFF	 	 
- stack 2: 0x41C
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
124	 D4	AND		 	 
- stack 1: 0x41C
- stack 0: 0xFF0F
125	 D5	PUSH1	01	 	 
- stack 2: 0x41C
- stack 1: 0xFF0F
- stack 0: 0x1
126	 D7	SIGNEXTEND		 	 
- stack 1: 0x41C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
127	 D8	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
128	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x41C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
129	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x41C
- stack 0: 0xF0F0F0F
130	 DD	PUSH2	0040	 	 
- stack 2: 0x41C
- stack 1: 0xF0F0F0F
- stack 0: 0x40
131	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x41C
132	 E1	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 E3	ADD		 	 
- stack 0: 0x420
134	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEA0000010100FF0114000F01330002014D04A0018FFF010099FFF001A20F0F
136	 E6	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEA0000010100FF0114000F01330002014D04A0018FFF010099FFF001A20F0F
- stack 0: 0xF0
137	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA
138	 E9	JUMP		 	 
- stack 0: 0x420
139	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x420
140	 EB	PUSH2	0040	 	 
- stack 1: 0x420
- stack 0: 0x40
141	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x420
- stack 0: 0xF0F0F0F
142	 EF	PUSH2	0020	 	 
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0x20
143	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x420
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
144	 F3	XOR		 	  ;; # XOR
- stack 1: 0x420
- stack 0: 0xF00FF00F
145	 F4	PUSH2	0060	 	 
- stack 2: 0x420
- stack 1: 0xF00FF00F
- stack 0: 0x60
146	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x420
147	 F8	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
148	 FA	ADD		 	 
- stack 0: 0x424
149	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
150	 FC	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x10100FF0114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F0
151	 FD	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x10100FF0114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
152	 FF	SHR		 	 
- stack 1: 0x424
- stack 0: 0x101
153	 100	JUMP		 	 
- stack 0: 0x424
154	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x424
155	 102	PUSH4	f00ff000	 	 
- stack 1: 0x424
- stack 0: 0xF00FF000
156	 107	PUSH2	03A0	 	 
- stack 2: 0x424
- stack 1: 0xF00FF000
- stack 0: 0x3A0
157	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x424
158	 10B	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
159	 10D	ADD		 	 
- stack 0: 0x428
160	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
161	 10F	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA0000
162	 110	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
163	 112	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114
164	 113	JUMP		 	 
- stack 0: 0x428
165	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x428
166	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x428
- stack 0: 0x428
167	 116	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA0000
168	 117	PUSH1	E0	 	 
- stack 2: 0x428
- stack 1: 0x114000F01330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
169	 119	SHR		 	 
- stack 1: 0x428
- stack 0: 0x114000F
170	 11A	PUSH2	FFFF	 	 
- stack 2: 0x428
- stack 1: 0x114000F
- stack 0: 0xFFFF
171	 11D	AND		 	 
- stack 1: 0x428
- stack 0: 0xF
172	 11E	PUSH1	01	 	 
- stack 2: 0x428
- stack 1: 0xF
- stack 0: 0x1
173	 120	SIGNEXTEND		 	 
- stack 1: 0x428
- stack 0: 0xF
174	 121	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xF
- stack 0: 0x3A0
175	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xF
- stack 0: 0xF00FF000
176	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x428
- stack 0: 0xF00FF00F
177	 126	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
178	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x428
179	 12A	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
180	 12C	ADD		 	 
- stack 0: 0x42C
181	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
182	 12E	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F010
183	 12F	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F010
- stack 0: 0xF0
184	 131	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x133
185	 132	JUMP		 	 
- stack 0: 0x42C
186	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x42C
187	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x42C
- stack 0: 0x42C
188	 135	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x1330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F010
189	 136	PUSH1	E0	 	 
- stack 2: 0x42C
- stack 1: 0x1330002014D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F010
- stack 0: 0xE0
190	 138	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x1330002
191	 139	PUSH2	FFFF	 	 
- stack 2: 0x42C
- stack 1: 0x1330002
- stack 0: 0xFFFF
192	 13C	AND		 	 
- stack 1: 0x42C
- stack 0: 0x2
193	 13D	PUSH1	01	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x1
194	 13F	SIGNEXTEND		 	 
- stack 1: 0x42C
- stack 0: 0x2
195	 140	PUSH2	0380	 	 
- stack 2: 0x42C
- stack 1: 0x2
- stack 0: 0x380
196	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x42C
197	 144	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
198	 146	ADD		 	 
- stack 0: 0x430
199	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
200	 148	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x14D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F0100114FF00
201	 149	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x14D04A0018FFF010099FFF001A20F0F00CB00F000EA000001B5F0100114FF00
- stack 0: 0xF0
202	 14B	SHR		 	 
- stack 1: 0x430
- stack 0: 0x14D
203	 14C	JUMP		 	 
- stack 0: 0x430
204	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x430
205	 14E	PUSH2	0060	 	 
- stack 1: 0x430
- stack 0: 0x60
206	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x430
- stack 0: 0xF00FF00F
207	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x430
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
208	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x430
- stack 0: 0xF00FF00F
209	 158	PUSH2	03A0	 	 
- stack 2: 0x430
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
210	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x430
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
211	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x430
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
212	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x430
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
213	 162	SUB		 	 
- stack 1: 0x430
- stack 0: 0x0
214	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x430
- stack 1: 0x0
- stack 0: 0x16B
215	 166	JUMPI		 	 
- stack 0: 0x430
216	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x430
- stack 0: 0x185
217	 16A	JUMP		 	 
- stack 0: 0x430
218	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x430
219	 186	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
220	 188	ADD		 	 
- stack 0: 0x434
221	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
222	 18A	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003
223	 18B	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003
- stack 0: 0xF0
224	 18D	SHR		 	 
- stack 1: 0x434
- stack 0: 0x18F
225	 18E	JUMP		 	 
- stack 0: 0x434
226	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x434
227	 190	PUSH4	0ff01000	 	 
- stack 1: 0x434
- stack 0: 0xFF01000
228	 195	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xFF01000
- stack 0: 0x20
229	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x434
230	 199	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
231	 19B	ADD		 	 
- stack 0: 0x438
232	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
233	 19D	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C
234	 19E	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C
- stack 0: 0xF0
235	 1A0	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99
236	 1A1	JUMP		 	 
- stack 0: 0x438
237	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x438
238	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x438
- stack 0: 0x438
239	 9B	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x99FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C
240	 9C	PUSH1	E0	 	 
- stack 2: 0x438
- stack 1: 0x99FFF001A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C
- stack 0: 0xE0
241	 9E	SHR		 	 
- stack 1: 0x438
- stack 0: 0x99FFF0
242	 9F	PUSH2	FFFF	 	 
- stack 2: 0x438
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
243	 A2	AND		 	 
- stack 1: 0x438
- stack 0: 0xFFF0
244	 A3	PUSH1	01	 	 
- stack 2: 0x438
- stack 1: 0xFFF0
- stack 0: 0x1
245	 A5	SIGNEXTEND		 	 
- stack 1: 0x438
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
246	 A6	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
247	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x438
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
248	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x438
- stack 0: 0xFF00FF0
249	 AB	PUSH2	0020	 	 
- stack 2: 0x438
- stack 1: 0xFF00FF0
- stack 0: 0x20
250	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x438
251	 AF	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
252	 B1	ADD		 	 
- stack 0: 0x43C
253	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
254	 B3	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0x1A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0
255	 B4	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0x1A20F0F00CB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0
- stack 0: 0xF0
256	 B6	SHR		 	 
- stack 1: 0x43C
- stack 0: 0x1A2
257	 B7	JUMP		 	 
- stack 0: 0x43C
258	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x43C
259	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x43C
- stack 0: 0xF0F0F000
260	 1A8	PUSH2	0040	 	 
- stack 2: 0x43C
- stack 1: 0xF0F0F000
- stack 0: 0x40
261	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x43C
262	 1AC	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
263	 1AE	ADD		 	 
- stack 0: 0x440
264	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
265	 1B0	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0009900FF
266	 1B1	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0009900FF
- stack 0: 0xF0
267	 1B3	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB
268	 1B4	JUMP		 	 
- stack 0: 0x440
269	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x440
270	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
271	 CD	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0xCB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0009900FF
272	 CE	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0xCB00F000EA000001B5F0100114FF0001330003014D047C01C80FF0009900FF
- stack 0: 0xE0
273	 D0	SHR		 	 
- stack 1: 0x440
- stack 0: 0xCB00F0
274	 D1	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
275	 D4	AND		 	 
- stack 1: 0x440
- stack 0: 0xF0
276	 D5	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x1
277	 D7	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0xF0
278	 D8	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0x40
279	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x440
- stack 1: 0xF0
- stack 0: 0xF0F0F000
280	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x440
- stack 0: 0xF0F0F0F0
281	 DD	PUSH2	0040	 	 
- stack 2: 0x440
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
282	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x440
283	 E1	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
284	 E3	ADD		 	 
- stack 0: 0x444
285	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
286	 E5	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0xEA000001B5F0100114FF0001330003014D047C01C80FF0009900FF00B8F0F1
287	 E6	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0xEA000001B5F0100114FF0001330003014D047C01C80FF0009900FF00B8F0F1
- stack 0: 0xF0
288	 E8	SHR		 	 
- stack 1: 0x444
- stack 0: 0xEA
289	 E9	JUMP		 	 
- stack 0: 0x444
290	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x444
291	 EB	PUSH2	0040	 	 
- stack 1: 0x444
- stack 0: 0x40
292	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x444
- stack 0: 0xF0F0F0F0
293	 EF	PUSH2	0020	 	 
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
294	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x444
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
295	 F3	XOR		 	  ;; # XOR
- stack 1: 0x444
- stack 0: 0xFF00FF00
296	 F4	PUSH2	0060	 	 
- stack 2: 0x444
- stack 1: 0xFF00FF00
- stack 0: 0x60
297	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x444
298	 F8	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
299	 FA	ADD		 	 
- stack 0: 0x448
300	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
301	 FC	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x1B5F0100114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F
302	 FD	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x1B5F0100114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
303	 FF	SHR		 	 
- stack 1: 0x448
- stack 0: 0x1B5
304	 100	JUMP		 	 
- stack 0: 0x448
305	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x448
306	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x448
- stack 0: 0xFF010000
307	 1BB	PUSH2	03A0	 	 
- stack 2: 0x448
- stack 1: 0xFF010000
- stack 0: 0x3A0
308	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x448
309	 1BF	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
310	 1C1	ADD		 	 
- stack 0: 0x44C
311	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
312	 1C3	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA0000
313	 1C4	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
314	 1C6	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x114
315	 1C7	JUMP		 	 
- stack 0: 0x44C
316	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x44C
317	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
318	 116	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA0000
319	 117	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x114FF0001330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
320	 119	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x114FF00
321	 11A	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x114FF00
- stack 0: 0xFFFF
322	 11D	AND		 	 
- stack 1: 0x44C
- stack 0: 0xFF00
323	 11E	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xFF00
- stack 0: 0x1
324	 120	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
325	 121	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
326	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
327	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x44C
- stack 0: 0xFF00FF00
328	 126	PUSH2	03A0	 	 
- stack 2: 0x44C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
329	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x44C
330	 12A	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
331	 12C	ADD		 	 
- stack 0: 0x450
332	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
333	 12E	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF01
334	 12F	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF01
- stack 0: 0xF0
335	 131	SHR		 	 
- stack 1: 0x450
- stack 0: 0x133
336	 132	JUMP		 	 
- stack 0: 0x450
337	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x450
338	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
339	 135	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0x1330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF01
340	 136	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0x1330003014D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF01
- stack 0: 0xE0
341	 138	SHR		 	 
- stack 1: 0x450
- stack 0: 0x1330003
342	 139	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0x1330003
- stack 0: 0xFFFF
343	 13C	AND		 	 
- stack 1: 0x450
- stack 0: 0x3
344	 13D	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x1
345	 13F	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x3
346	 140	PUSH2	0380	 	 
- stack 2: 0x450
- stack 1: 0x3
- stack 0: 0x380
347	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x450
348	 144	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
349	 146	ADD		 	 
- stack 0: 0x454
350	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
351	 148	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x14D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF0
352	 149	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x14D047C01C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF0
- stack 0: 0xF0
353	 14B	SHR		 	 
- stack 1: 0x454
- stack 0: 0x14D
354	 14C	JUMP		 	 
- stack 0: 0x454
355	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x454
356	 14E	PUSH2	0060	 	 
- stack 1: 0x454
- stack 0: 0x60
357	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x454
- stack 0: 0xFF00FF00
358	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x454
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
359	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x454
- stack 0: 0xFF00FF00
360	 158	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
361	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x454
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
362	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x454
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
363	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x454
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
364	 162	SUB		 	 
- stack 1: 0x454
- stack 0: 0x0
365	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x454
- stack 1: 0x0
- stack 0: 0x16B
366	 166	JUMPI		 	 
- stack 0: 0x454
367	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x454
- stack 0: 0x185
368	 16A	JUMP		 	 
- stack 0: 0x454
369	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x454
370	 186	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
371	 188	ADD		 	 
- stack 0: 0x458
372	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
373	 18A	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004
374	 18B	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004
- stack 0: 0xF0
375	 18D	SHR		 	 
- stack 1: 0x458
- stack 0: 0x1C8
376	 18E	JUMP		 	 
- stack 0: 0x458
377	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x458
378	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x458
- stack 0: 0xFF0000
379	 1CE	PUSH2	0020	 	 
- stack 2: 0x458
- stack 1: 0xFF0000
- stack 0: 0x20
380	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x458
381	 1D2	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
382	 1D4	ADD		 	 
- stack 0: 0x45C
383	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
384	 1D6	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D0458
385	 1D7	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D0458
- stack 0: 0xF0
386	 1D9	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x99
387	 1DA	JUMP		 	 
- stack 0: 0x45C
388	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x45C
389	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
390	 9B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D0458
391	 9C	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D0458
- stack 0: 0xE0
392	 9E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x9900FF
393	 9F	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
394	 A2	AND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
395	 A3	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x1
396	 A5	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0xFF
397	 A6	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0x20
398	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x45C
- stack 1: 0xFF
- stack 0: 0xFF0000
399	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x45C
- stack 0: 0xFF00FF
400	 AB	PUSH2	0020	 	 
- stack 2: 0x45C
- stack 1: 0xFF00FF
- stack 0: 0x20
401	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x45C
402	 AF	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
403	 B1	ADD		 	 
- stack 0: 0x460
404	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
405	 B3	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0xB8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF
406	 B4	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0xB8F0F100CBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF
- stack 0: 0xF0
407	 B6	SHR		 	 
- stack 1: 0x460
- stack 0: 0xB8
408	 B7	JUMP		 	 
- stack 0: 0x460
409	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x460
410	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x460
- stack 0: 0xF0F1000
411	 BE	PUSH2	0040	 	 
- stack 2: 0x460
- stack 1: 0xF0F1000
- stack 0: 0x40
412	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x460
413	 C2	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
414	 C4	ADD		 	 
- stack 0: 0x464
415	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
416	 C6	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF0099000F
417	 C7	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF0099000F
- stack 0: 0xF0
418	 C9	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCB
419	 CA	JUMP		 	 
- stack 0: 0x464
420	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x464
421	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x464
- stack 0: 0x464
422	 CD	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF0099000F
423	 CE	PUSH1	E0	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F00EA000001DBFF010114FFF001330004014D045801EE00FF0099000F
- stack 0: 0xE0
424	 D0	SHR		 	 
- stack 1: 0x464
- stack 0: 0xCBFF0F
425	 D1	PUSH2	FFFF	 	 
- stack 2: 0x464
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
426	 D4	AND		 	 
- stack 1: 0x464
- stack 0: 0xFF0F
427	 D5	PUSH1	01	 	 
- stack 2: 0x464
- stack 1: 0xFF0F
- stack 0: 0x1
428	 D7	SIGNEXTEND		 	 
- stack 1: 0x464
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
429	 D8	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
430	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x464
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
431	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x464
- stack 0: 0xF0F0F0F
432	 DD	PUSH2	0040	 	 
- stack 2: 0x464
- stack 1: 0xF0F0F0F
- stack 0: 0x40
433	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x464
434	 E1	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
435	 E3	ADD		 	 
- stack 0: 0x468
436	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
437	 E5	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0xEA000001DBFF010114FFF001330004014D045801EE00FF0099000F01A20F0F
438	 E6	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0xEA000001DBFF010114FFF001330004014D045801EE00FF0099000F01A20F0F
- stack 0: 0xF0
439	 E8	SHR		 	 
- stack 1: 0x468
- stack 0: 0xEA
440	 E9	JUMP		 	 
- stack 0: 0x468
441	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x468
442	 EB	PUSH2	0040	 	 
- stack 1: 0x468
- stack 0: 0x40
443	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x468
- stack 0: 0xF0F0F0F
444	 EF	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0x20
445	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
446	 F3	XOR		 	  ;; # XOR
- stack 1: 0x468
- stack 0: 0xFF00FF0
447	 F4	PUSH2	0060	 	 
- stack 2: 0x468
- stack 1: 0xFF00FF0
- stack 0: 0x60
448	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x468
449	 F8	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
450	 FA	ADD		 	 
- stack 0: 0x46C
451	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
452	 FC	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0x1DBFF010114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F0
453	 FD	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0x1DBFF010114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F0
- stack 0: 0xF0
454	 FF	SHR		 	 
- stack 1: 0x46C
- stack 0: 0x1DB
455	 100	JUMP		 	 
- stack 0: 0x46C
456	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x46C
457	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x46C
- stack 0: 0xFF01000
458	 1E1	PUSH2	03A0	 	 
- stack 2: 0x46C
- stack 1: 0xFF01000
- stack 0: 0x3A0
459	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x46C
460	 1E5	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
461	 1E7	ADD		 	 
- stack 0: 0x470
462	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
463	 1E9	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F000EA0000
464	 1EA	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xF0
465	 1EC	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114
466	 1ED	JUMP		 	 
- stack 0: 0x470
467	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x470
468	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x470
- stack 0: 0x470
469	 116	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F000EA0000
470	 117	PUSH1	E0	 	 
- stack 2: 0x470
- stack 1: 0x114FFF001330004014D045801EE00FF0099000F01A20F0F00CB00F000EA0000
- stack 0: 0xE0
471	 119	SHR		 	 
- stack 1: 0x470
- stack 0: 0x114FFF0
472	 11A	PUSH2	FFFF	 	 
- stack 2: 0x470
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
473	 11D	AND		 	 
- stack 1: 0x470
- stack 0: 0xFFF0
474	 11E	PUSH1	01	 	 
- stack 2: 0x470
- stack 1: 0xFFF0
- stack 0: 0x1
475	 120	SIGNEXTEND		 	 
- stack 1: 0x470
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
476	 121	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
477	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x470
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
478	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x470
- stack 0: 0xFF00FF0
479	 126	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
480	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
481	 12A	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
482	 12C	ADD		 	 
- stack 0: 0x474
483	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
484	 12E	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0
485	 12F	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0
- stack 0: 0xF0
486	 131	SHR		 	 
- stack 1: 0x474
- stack 0: 0x133
487	 132	JUMP		 	 
- stack 0: 0x474
488	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x474
489	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
490	 135	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0x1330004014D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0
491	 136	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0x1330004014D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0
- stack 0: 0xE0
492	 138	SHR		 	 
- stack 1: 0x474
- stack 0: 0x1330004
493	 139	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0x1330004
- stack 0: 0xFFFF
494	 13C	AND		 	 
- stack 1: 0x474
- stack 0: 0x4
495	 13D	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x1
496	 13F	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0x4
497	 140	PUSH2	0380	 	 
- stack 2: 0x474
- stack 1: 0x4
- stack 0: 0x380
498	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x474
499	 144	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
500	 146	ADD		 	 
- stack 0: 0x478
501	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
502	 148	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x14D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0011400FF
503	 149	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x14D045801EE00FF0099000F01A20F0F00CB00F000EA000002010FF0011400FF
- stack 0: 0xF0
504	 14B	SHR		 	 
- stack 1: 0x478
- stack 0: 0x14D
505	 14C	JUMP		 	 
- stack 0: 0x478
506	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x478
507	 14E	PUSH2	0060	 	 
- stack 1: 0x478
- stack 0: 0x60
508	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x478
- stack 0: 0xFF00FF0
509	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x478
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
510	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x478
- stack 0: 0xFF00FF0
511	 158	PUSH2	03A0	 	 
- stack 2: 0x478
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
512	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x478
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
513	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x478
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
514	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x478
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
515	 162	SUB		 	 
- stack 1: 0x478
- stack 0: 0x0
516	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x478
- stack 1: 0x0
- stack 0: 0x16B
517	 166	JUMPI		 	 
- stack 0: 0x478
518	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x478
- stack 0: 0x185
519	 16A	JUMP		 	 
- stack 0: 0x478
520	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x478
521	 186	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
522	 188	ADD		 	 
- stack 0: 0x47C
523	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
524	 18A	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x1EE00FF0099000F01A20F0F00CB00F000EA000002010FF0011400FF01330005
525	 18B	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x1EE00FF0099000F01A20F0F00CB00F000EA000002010FF0011400FF01330005
- stack 0: 0xF0
526	 18D	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x1EE
527	 18E	JUMP		 	 
- stack 0: 0x47C
528	 1EE	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x47C
529	 1EF	PUSH4	f00ff000	 	 
- stack 1: 0x47C
- stack 0: 0xF00FF000
530	 1F4	PUSH2	0020	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF000
- stack 0: 0x20
531	 1F7	MSTORE		 	  ;; # store to x1
- stack 0: 0x47C
532	 1F8	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
533	 1FA	ADD		 	 
- stack 0: 0x480
534	 1FB	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
535	 1FC	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA000002010FF0011400FF01330005014D0434
536	 1FD	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA000002010FF0011400FF01330005014D0434
- stack 0: 0xF0
537	 1FF	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99
538	 200	JUMP		 	 
- stack 0: 0x480
539	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x480
540	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x480
- stack 0: 0x480
541	 9B	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x99000F01A20F0F00CB00F000EA000002010FF0011400FF01330005014D0434
542	 9C	PUSH1	E0	 	 
- stack 2: 0x480
- stack 1: 0x99000F01A20F0F00CB00F000EA000002010FF0011400FF01330005014D0434
- stack 0: 0xE0
543	 9E	SHR		 	 
- stack 1: 0x480
- stack 0: 0x99000F
544	 9F	PUSH2	FFFF	 	 
- stack 2: 0x480
- stack 1: 0x99000F
- stack 0: 0xFFFF
545	 A2	AND		 	 
- stack 1: 0x480
- stack 0: 0xF
546	 A3	PUSH1	01	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x1
547	 A5	SIGNEXTEND		 	 
- stack 1: 0x480
- stack 0: 0xF
548	 A6	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0x20
549	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x480
- stack 1: 0xF
- stack 0: 0xF00FF000
550	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x480
- stack 0: 0xF00FF00F
551	 AB	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xF00FF00F
- stack 0: 0x20
552	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
553	 AF	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
554	 B1	ADD		 	 
- stack 0: 0x484
555	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
556	 B3	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x1A20F0F00CB00F000EA000002010FF0011400FF01330005014D04340086F010
557	 B4	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x1A20F0F00CB00F000EA000002010FF0011400FF01330005014D04340086F010
- stack 0: 0xF0
558	 B6	SHR		 	 
- stack 1: 0x484
- stack 0: 0x1A2
559	 B7	JUMP		 	 
- stack 0: 0x484
560	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x484
561	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x484
- stack 0: 0xF0F0F000
562	 1A8	PUSH2	0040	 	 
- stack 2: 0x484
- stack 1: 0xF0F0F000
- stack 0: 0x40
563	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x484
564	 1AC	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
565	 1AE	ADD		 	 
- stack 0: 0x488
566	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
567	 1B0	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA000002010FF0011400FF01330005014D04340086F0100099FF00
568	 1B1	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA000002010FF0011400FF01330005014D04340086F0100099FF00
- stack 0: 0xF0
569	 1B3	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB
570	 1B4	JUMP		 	 
- stack 0: 0x488
571	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x488
572	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
573	 CD	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0xCB00F000EA000002010FF0011400FF01330005014D04340086F0100099FF00
574	 CE	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0xCB00F000EA000002010FF0011400FF01330005014D04340086F0100099FF00
- stack 0: 0xE0
575	 D0	SHR		 	 
- stack 1: 0x488
- stack 0: 0xCB00F0
576	 D1	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
577	 D4	AND		 	 
- stack 1: 0x488
- stack 0: 0xF0
578	 D5	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x1
579	 D7	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0xF0
580	 D8	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0x40
581	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x488
- stack 1: 0xF0
- stack 0: 0xF0F0F000
582	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x488
- stack 0: 0xF0F0F0F0
583	 DD	PUSH2	0040	 	 
- stack 2: 0x488
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
584	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x488
585	 E1	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
586	 E3	ADD		 	 
- stack 0: 0x48C
587	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
588	 E5	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xEA000002010FF0011400FF01330005014D04340086F0100099FF0000B8F0F1
589	 E6	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xEA000002010FF0011400FF01330005014D04340086F0100099FF0000B8F0F1
- stack 0: 0xF0
590	 E8	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xEA
591	 E9	JUMP		 	 
- stack 0: 0x48C
592	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x48C
593	 EB	PUSH2	0040	 	 
- stack 1: 0x48C
- stack 0: 0x40
594	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x48C
- stack 0: 0xF0F0F0F0
595	 EF	PUSH2	0020	 	 
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
596	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x48C
- stack 1: 0xF0F0F0F0
- stack 0: 0xF00FF00F
597	 F3	XOR		 	  ;; # XOR
- stack 1: 0x48C
- stack 0: 0xFF00FF
598	 F4	PUSH2	0060	 	 
- stack 2: 0x48C
- stack 1: 0xFF00FF
- stack 0: 0x60
599	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x48C
600	 F8	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
601	 FA	ADD		 	 
- stack 0: 0x490
602	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
603	 FC	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0x2010FF0011400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F
604	 FD	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0x2010FF0011400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
605	 FF	SHR		 	 
- stack 1: 0x490
- stack 0: 0x201
606	 100	JUMP		 	 
- stack 0: 0x490
607	 201	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x490
608	 202	PUSH4	00ff0000	 	 
- stack 1: 0x490
- stack 0: 0xFF0000
609	 207	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFF0000
- stack 0: 0x3A0
610	 20A	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
611	 20B	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
612	 20D	ADD		 	 
- stack 0: 0x494
613	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
614	 20F	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x11400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000
615	 210	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x11400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000
- stack 0: 0xF0
616	 212	SHR		 	 
- stack 1: 0x494
- stack 0: 0x114
617	 213	JUMP		 	 
- stack 0: 0x494
618	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x494
619	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
620	 116	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x11400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000
621	 117	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x11400FF01330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000
- stack 0: 0xE0
622	 119	SHR		 	 
- stack 1: 0x494
- stack 0: 0x11400FF
623	 11A	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x11400FF
- stack 0: 0xFFFF
624	 11D	AND		 	 
- stack 1: 0x494
- stack 0: 0xFF
625	 11E	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0x1
626	 120	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0xFF
627	 121	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0x3A0
628	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x494
- stack 1: 0xFF
- stack 0: 0xFF0000
629	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x494
- stack 0: 0xFF00FF
630	 126	PUSH2	03A0	 	 
- stack 2: 0x494
- stack 1: 0xFF00FF
- stack 0: 0x3A0
631	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x494
632	 12A	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
633	 12C	ADD		 	 
- stack 0: 0x498
634	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
635	 12E	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF
636	 12F	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF
- stack 0: 0xF0
637	 131	SHR		 	 
- stack 1: 0x498
- stack 0: 0x133
638	 132	JUMP		 	 
- stack 0: 0x498
639	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x498
640	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x498
- stack 0: 0x498
641	 135	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF
642	 136	PUSH1	E0	 	 
- stack 2: 0x498
- stack 1: 0x1330005014D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF
- stack 0: 0xE0
643	 138	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1330005
644	 139	PUSH2	FFFF	 	 
- stack 2: 0x498
- stack 1: 0x1330005
- stack 0: 0xFFFF
645	 13C	AND		 	 
- stack 1: 0x498
- stack 0: 0x5
646	 13D	PUSH1	01	 	 
- stack 2: 0x498
- stack 1: 0x5
- stack 0: 0x1
647	 13F	SIGNEXTEND		 	 
- stack 1: 0x498
- stack 0: 0x5
648	 140	PUSH2	0380	 	 
- stack 2: 0x498
- stack 1: 0x5
- stack 0: 0x380
649	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x498
650	 144	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
651	 146	ADD		 	 
- stack 0: 0x49C
652	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
653	 148	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x14D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF0114000F
654	 149	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x14D04340086F0100099FF0000B8F0F100CBFF0F02140000010100FF0114000F
- stack 0: 0xF0
655	 14B	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x14D
656	 14C	JUMP		 	 
- stack 0: 0x49C
657	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x49C
658	 14E	PUSH2	0060	 	 
- stack 1: 0x49C
- stack 0: 0x60
659	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x49C
- stack 0: 0xFF00FF
660	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x49C
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
661	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x49C
- stack 0: 0xFF00FF
662	 158	PUSH2	03A0	 	 
- stack 2: 0x49C
- stack 1: 0xFF00FF
- stack 0: 0x3A0
663	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x49C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
664	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x49C
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
665	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x49C
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
666	 162	SUB		 	 
- stack 1: 0x49C
- stack 0: 0x0
667	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x16B
668	 166	JUMPI		 	 
- stack 0: 0x49C
669	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x49C
- stack 0: 0x185
670	 16A	JUMP		 	 
- stack 0: 0x49C
671	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x49C
672	 186	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
673	 188	ADD		 	 
- stack 0: 0x4A0
674	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
675	 18A	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006
676	 18B	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006
- stack 0: 0xF0
677	 18D	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x86
678	 18E	JUMP		 	 
- stack 0: 0x4A0
679	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4A0
680	 87	PUSH4	ff010000	 	 
- stack 1: 0x4A0
- stack 0: 0xFF010000
681	 8C	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF010000
- stack 0: 0x20
682	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
683	 90	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
684	 92	ADD		 	 
- stack 0: 0x4A4
685	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
686	 94	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006022B0410
687	 95	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006022B0410
- stack 0: 0xF0
688	 97	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99
689	 98	JUMP		 	 
- stack 0: 0x4A4
690	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A4
691	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
692	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006022B0410
693	 9C	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF0000B8F0F100CBFF0F02140000010100FF0114000F01330006022B0410
- stack 0: 0xE0
694	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99FF00
695	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x99FF00
- stack 0: 0xFFFF
696	 A2	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFF00
697	 A3	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00
- stack 0: 0x1
698	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
699	 A6	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
700	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
701	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0xFF00FF00
702	 AB	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF00
- stack 0: 0x20
703	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
704	 AF	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
705	 B1	ADD		 	 
- stack 0: 0x4A8
706	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
707	 B3	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB8F0F100CBFF0F02140000010100FF0114000F01330006022B04100086F010
708	 B4	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB8F0F100CBFF0F02140000010100FF0114000F01330006022B04100086F010
- stack 0: 0xF0
709	 B6	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB8
710	 B7	JUMP		 	 
- stack 0: 0x4A8
711	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x4A8
712	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x4A8
- stack 0: 0xF0F1000
713	 BE	PUSH2	0040	 	 
- stack 2: 0x4A8
- stack 1: 0xF0F1000
- stack 0: 0x40
714	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4A8
715	 C2	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
716	 C4	ADD		 	 
- stack 0: 0x4AC
717	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
718	 C6	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F02140000010100FF0114000F01330006022B04100086F0100099FF00
719	 C7	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F02140000010100FF0114000F01330006022B04100086F0100099FF00
- stack 0: 0xF0
720	 C9	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xCB
721	 CA	JUMP		 	 
- stack 0: 0x4AC
722	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4AC
723	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
724	 CD	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F02140000010100FF0114000F01330006022B04100086F0100099FF00
725	 CE	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F02140000010100FF0114000F01330006022B04100086F0100099FF00
- stack 0: 0xE0
726	 D0	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0xCBFF0F
727	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
728	 D4	AND		 	 
- stack 1: 0x4AC
- stack 0: 0xFF0F
729	 D5	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0xFF0F
- stack 0: 0x1
730	 D7	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
731	 D8	PUSH2	0040	 	 
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
732	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4AC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
733	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4AC
- stack 0: 0xF0F0F0F
734	 DD	PUSH2	0040	 	 
- stack 2: 0x4AC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
735	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4AC
736	 E1	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
737	 E3	ADD		 	 
- stack 0: 0x4B0
738	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
739	 E5	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x2140000010100FF0114000F01330006022B04100086F0100099FF0000B8F0F1
740	 E6	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x2140000010100FF0114000F01330006022B04100086F0100099FF0000B8F0F1
- stack 0: 0xF0
741	 E8	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x214
742	 E9	JUMP		 	 
- stack 0: 0x4B0
743	 214	JUMPDEST		 ;; __riscvimpl_XOR_1_1_2	  ;; # instr: xor ra,ra,sp(ignore imm)
- stack 0: 0x4B0
744	 215	PUSH2	0040	 	 
- stack 1: 0x4B0
- stack 0: 0x40
745	 218	MLOAD		 	  ;; # read from x2
- stack 1: 0x4B0
- stack 0: 0xF0F0F0F
746	 219	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xF0F0F0F
- stack 0: 0x20
747	 21C	MLOAD		 	  ;; # read from x1
- stack 2: 0x4B0
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
748	 21D	XOR		 	  ;; # XOR
- stack 1: 0x4B0
- stack 0: 0xF00FF00F
749	 21E	PUSH2	0020	 	 
- stack 2: 0x4B0
- stack 1: 0xF00FF00F
- stack 0: 0x20
750	 221	MSTORE		 	  ;; # store to x1
- stack 0: 0x4B0
751	 222	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
752	 224	ADD		 	 
- stack 0: 0x4B4
753	 225	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
754	 226	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x10100FF0114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F
755	 227	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x10100FF0114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
756	 229	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x101
757	 22A	JUMP		 	 
- stack 0: 0x4B4
758	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x4B4
759	 102	PUSH4	f00ff000	 	 
- stack 1: 0x4B4
- stack 0: 0xF00FF000
760	 107	PUSH2	03A0	 	 
- stack 2: 0x4B4
- stack 1: 0xF00FF000
- stack 0: 0x3A0
761	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B4
762	 10B	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
763	 10D	ADD		 	 
- stack 0: 0x4B8
764	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
765	 10F	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000
766	 110	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000
- stack 0: 0xF0
767	 112	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x114
768	 113	JUMP		 	 
- stack 0: 0x4B8
769	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x4B8
770	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
771	 116	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000
772	 117	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x114000F01330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000
- stack 0: 0xE0
773	 119	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x114000F
774	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x114000F
- stack 0: 0xFFFF
775	 11D	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xF
776	 11E	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xF
- stack 0: 0x1
777	 120	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xF
778	 121	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xF
- stack 0: 0x3A0
779	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4B8
- stack 1: 0xF
- stack 0: 0xF00FF000
780	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4B8
- stack 0: 0xF00FF00F
781	 126	PUSH2	03A0	 	 
- stack 2: 0x4B8
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
782	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4B8
783	 12A	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
784	 12C	ADD		 	 
- stack 0: 0x4BC
785	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
786	 12E	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF
787	 12F	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF
- stack 0: 0xF0
788	 131	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x133
789	 132	JUMP		 	 
- stack 0: 0x4BC
790	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4BC
791	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4BC
- stack 0: 0x4BC
792	 135	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF
793	 136	PUSH1	E0	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006022B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF
- stack 0: 0xE0
794	 138	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x1330006
795	 139	PUSH2	FFFF	 	 
- stack 2: 0x4BC
- stack 1: 0x1330006
- stack 0: 0xFFFF
796	 13C	AND		 	 
- stack 1: 0x4BC
- stack 0: 0x6
797	 13D	PUSH1	01	 	 
- stack 2: 0x4BC
- stack 1: 0x6
- stack 0: 0x1
798	 13F	SIGNEXTEND		 	 
- stack 1: 0x4BC
- stack 0: 0x6
799	 140	PUSH2	0380	 	 
- stack 2: 0x4BC
- stack 1: 0x6
- stack 0: 0x380
800	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4BC
801	 144	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
802	 146	ADD		 	 
- stack 0: 0x4C0
803	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
804	 148	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0x22B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF0114000F
805	 149	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0x22B04100086F0100099FF0000B8F0F100CBFF0F026D0000010100FF0114000F
- stack 0: 0xF0
806	 14B	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0x22B
807	 14C	JUMP		 	 
- stack 0: 0x4C0
808	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,410(ignore imm)
- stack 0: 0x4C0
809	 22C	PUSH2	0020	 	 
- stack 1: 0x4C0
- stack 0: 0x20
810	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x4C0
- stack 0: 0xF00FF00F
811	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
812	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C0
- stack 0: 0xF00FF00F
813	 236	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
814	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
815	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C0
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
816	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C0
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
817	 240	SUB		 	 
- stack 1: 0x4C0
- stack 0: 0x0
818	 241	PUSH2	0249	 ;; _neq_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 2: 0x4C0
- stack 1: 0x0
- stack 0: 0x249
819	 244	JUMPI		 	 
- stack 0: 0x4C0
820	 245	PUSH2	0263	 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 1: 0x4C0
- stack 0: 0x263
821	 248	JUMP		 	 
- stack 0: 0x4C0
822	 263	JUMPDEST		 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 0: 0x4C0
823	 264	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
824	 266	ADD		 	 
- stack 0: 0x4C4
825	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
826	 268	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007
827	 269	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007
- stack 0: 0xF0
828	 26B	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x86
829	 26C	JUMP		 	 
- stack 0: 0x4C4
830	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4C4
831	 87	PUSH4	ff010000	 	 
- stack 1: 0x4C4
- stack 0: 0xFF010000
832	 8C	PUSH2	0020	 	 
- stack 2: 0x4C4
- stack 1: 0xFF010000
- stack 0: 0x20
833	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C4
834	 90	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
835	 92	ADD		 	 
- stack 0: 0x4C8
836	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
837	 94	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC
838	 95	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC
- stack 0: 0xF0
839	 97	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x99
840	 98	JUMP		 	 
- stack 0: 0x4C8
841	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4C8
842	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C8
- stack 0: 0x4C8
843	 9B	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC
844	 9C	PUSH1	E0	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF0000B8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC
- stack 0: 0xE0
845	 9E	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x99FF00
846	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
847	 A2	AND		 	 
- stack 1: 0x4C8
- stack 0: 0xFF00
848	 A3	PUSH1	01	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00
- stack 0: 0x1
849	 A5	SIGNEXTEND		 	 
- stack 1: 0x4C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
850	 A6	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
851	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
852	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4C8
- stack 0: 0xFF00FF00
853	 AB	PUSH2	0020	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
854	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4C8
855	 AF	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
856	 B1	ADD		 	 
- stack 0: 0x4CC
857	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
858	 B3	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0xB8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC0086F010
859	 B4	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0xB8F0F100CBFF0F026D0000010100FF0114000F01330007028403EC0086F010
- stack 0: 0xF0
860	 B6	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0xB8
861	 B7	JUMP		 	 
- stack 0: 0x4CC
862	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x4CC
863	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x4CC
- stack 0: 0xF0F1000
864	 BE	PUSH2	0040	 	 
- stack 2: 0x4CC
- stack 1: 0xF0F1000
- stack 0: 0x40
865	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x4CC
866	 C2	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
867	 C4	ADD		 	 
- stack 0: 0x4D0
868	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
869	 C6	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F026D0000010100FF0114000F01330007028403EC0086F0100099FF00
870	 C7	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F026D0000010100FF0114000F01330007028403EC0086F0100099FF00
- stack 0: 0xF0
871	 C9	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xCB
872	 CA	JUMP		 	 
- stack 0: 0x4D0
873	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x4D0
874	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D0
- stack 0: 0x4D0
875	 CD	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F026D0000010100FF0114000F01330007028403EC0086F0100099FF00
876	 CE	PUSH1	E0	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F026D0000010100FF0114000F01330007028403EC0086F0100099FF00
- stack 0: 0xE0
877	 D0	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0xCBFF0F
878	 D1	PUSH2	FFFF	 	 
- stack 2: 0x4D0
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
879	 D4	AND		 	 
- stack 1: 0x4D0
- stack 0: 0xFF0F
880	 D5	PUSH1	01	 	 
- stack 2: 0x4D0
- stack 1: 0xFF0F
- stack 0: 0x1
881	 D7	SIGNEXTEND		 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
882	 D8	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
883	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x4D0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
884	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x4D0
- stack 0: 0xF0F0F0F
885	 DD	PUSH2	0040	 	 
- stack 2: 0x4D0
- stack 1: 0xF0F0F0F
- stack 0: 0x40
886	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D0
887	 E1	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
888	 E3	ADD		 	 
- stack 0: 0x4D4
889	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
890	 E5	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x26D0000010100FF0114000F01330007028403EC0086F0100099FF0002C60000
891	 E6	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x26D0000010100FF0114000F01330007028403EC0086F0100099FF0002C60000
- stack 0: 0xF0
892	 E8	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x26D
893	 E9	JUMP		 	 
- stack 0: 0x4D4
894	 26D	JUMPDEST		 ;; __riscvimpl_XOR_2_1_2	  ;; # instr: xor sp,ra,sp(ignore imm)
- stack 0: 0x4D4
895	 26E	PUSH2	0040	 	 
- stack 1: 0x4D4
- stack 0: 0x40
896	 271	MLOAD		 	  ;; # read from x2
- stack 1: 0x4D4
- stack 0: 0xF0F0F0F
897	 272	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xF0F0F0F
- stack 0: 0x20
898	 275	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
899	 276	XOR		 	  ;; # XOR
- stack 1: 0x4D4
- stack 0: 0xF00FF00F
900	 277	PUSH2	0040	 	 
- stack 2: 0x4D4
- stack 1: 0xF00FF00F
- stack 0: 0x40
901	 27A	MSTORE		 	  ;; # store to x2
- stack 0: 0x4D4
902	 27B	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
903	 27D	ADD		 	 
- stack 0: 0x4D8
904	 27E	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
905	 27F	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0x10100FF0114000F01330007028403EC0086F0100099FF0002C6000002DD0000
906	 280	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0x10100FF0114000F01330007028403EC0086F0100099FF0002C6000002DD0000
- stack 0: 0xF0
907	 282	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0x101
908	 283	JUMP		 	 
- stack 0: 0x4D8
909	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x4D8
910	 102	PUSH4	f00ff000	 	 
- stack 1: 0x4D8
- stack 0: 0xF00FF000
911	 107	PUSH2	03A0	 	 
- stack 2: 0x4D8
- stack 1: 0xF00FF000
- stack 0: 0x3A0
912	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x4D8
913	 10B	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
914	 10D	ADD		 	 
- stack 0: 0x4DC
915	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
916	 10F	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x114000F01330007028403EC0086F0100099FF0002C6000002DD000001330008
917	 110	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x114000F01330007028403EC0086F0100099FF0002C6000002DD000001330008
- stack 0: 0xF0
918	 112	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x114
919	 113	JUMP		 	 
- stack 0: 0x4DC
920	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x4DC
921	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
922	 116	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x114000F01330007028403EC0086F0100099FF0002C6000002DD000001330008
923	 117	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x114000F01330007028403EC0086F0100099FF0002C6000002DD000001330008
- stack 0: 0xE0
924	 119	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x114000F
925	 11A	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x114000F
- stack 0: 0xFFFF
926	 11D	AND		 	 
- stack 1: 0x4DC
- stack 0: 0xF
927	 11E	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0x1
928	 120	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0xF
929	 121	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0x3A0
930	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x4DC
- stack 1: 0xF
- stack 0: 0xF00FF000
931	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x4DC
- stack 0: 0xF00FF00F
932	 126	PUSH2	03A0	 	 
- stack 2: 0x4DC
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
933	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x4DC
934	 12A	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
935	 12C	ADD		 	 
- stack 0: 0x4E0
936	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
937	 12E	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007028403EC0086F0100099FF0002C6000002DD000001330008022B03D4
938	 12F	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007028403EC0086F0100099FF0002C6000002DD000001330008022B03D4
- stack 0: 0xF0
939	 131	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x133
940	 132	JUMP		 	 
- stack 0: 0x4E0
941	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4E0
942	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
943	 135	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007028403EC0086F0100099FF0002C6000002DD000001330008022B03D4
944	 136	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007028403EC0086F0100099FF0002C6000002DD000001330008022B03D4
- stack 0: 0xE0
945	 138	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x1330007
946	 139	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x1330007
- stack 0: 0xFFFF
947	 13C	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x7
948	 13D	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x7
- stack 0: 0x1
949	 13F	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x7
950	 140	PUSH2	0380	 	 
- stack 2: 0x4E0
- stack 1: 0x7
- stack 0: 0x380
951	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4E0
952	 144	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
953	 146	ADD		 	 
- stack 0: 0x4E4
954	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
955	 148	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x28403EC0086F0100099FF0002C6000002DD000001330008022B03D402F70000
956	 149	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x28403EC0086F0100099FF0002C6000002DD000001330008022B03D402F70000
- stack 0: 0xF0
957	 14B	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x284
958	 14C	JUMP		 	 
- stack 0: 0x4E4
959	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3ec(ignore imm)
- stack 0: 0x4E4
960	 285	PUSH2	0040	 	 
- stack 1: 0x4E4
- stack 0: 0x40
961	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x4E4
- stack 0: 0xF00FF00F
962	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4E4
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
963	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4E4
- stack 0: 0xF00FF00F
964	 28F	PUSH2	03A0	 	 
- stack 2: 0x4E4
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
965	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x4E4
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
966	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4E4
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
967	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4E4
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
968	 299	SUB		 	 
- stack 1: 0x4E4
- stack 0: 0x0
969	 29A	PUSH2	02A2	 ;; _neq_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 2: 0x4E4
- stack 1: 0x0
- stack 0: 0x2A2
970	 29D	JUMPI		 	 
- stack 0: 0x4E4
971	 29E	PUSH2	02BC	 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 1: 0x4E4
- stack 0: 0x2BC
972	 2A1	JUMP		 	 
- stack 0: 0x4E4
973	 2BC	JUMPDEST		 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 0: 0x4E4
974	 2BD	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
975	 2BF	ADD		 	 
- stack 0: 0x4E8
976	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
977	 2C1	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x86F0100099FF0002C6000002DD000001330008022B03D402F700000086F010
978	 2C2	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x86F0100099FF0002C6000002DD000001330008022B03D402F700000086F010
- stack 0: 0xF0
979	 2C4	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x86
980	 2C5	JUMP		 	 
- stack 0: 0x4E8
981	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x4E8
982	 87	PUSH4	ff010000	 	 
- stack 1: 0x4E8
- stack 0: 0xFF010000
983	 8C	PUSH2	0020	 	 
- stack 2: 0x4E8
- stack 1: 0xFF010000
- stack 0: 0x20
984	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4E8
985	 90	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
986	 92	ADD		 	 
- stack 0: 0x4EC
987	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
988	 94	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF0002C6000002DD000001330008022B03D402F700000086F0100099FF00
989	 95	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF0002C6000002DD000001330008022B03D402F700000086F0100099FF00
- stack 0: 0xF0
990	 97	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99
991	 98	JUMP		 	 
- stack 0: 0x4EC
992	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4EC
993	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
994	 9B	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF0002C6000002DD000001330008022B03D402F700000086F0100099FF00
995	 9C	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF0002C6000002DD000001330008022B03D402F700000086F0100099FF00
- stack 0: 0xE0
996	 9E	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x99FF00
997	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
998	 A2	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFF00
999	 A3	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00
- stack 0: 0x1
1000	 A5	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1001	 A6	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1002	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4EC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1003	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4EC
- stack 0: 0xFF00FF00
1004	 AB	PUSH2	0020	 	 
- stack 2: 0x4EC
- stack 1: 0xFF00FF00
- stack 0: 0x20
1005	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4EC
1006	 AF	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1007	 B1	ADD		 	 
- stack 0: 0x4F0
1008	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1009	 B3	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x2C6000002DD000001330008022B03D402F700000086F0100099FF0000B8F0F1
1010	 B4	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x2C6000002DD000001330008022B03D402F700000086F0100099FF0000B8F0F1
- stack 0: 0xF0
1011	 B6	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x2C6
1012	 B7	JUMP		 	 
- stack 0: 0x4F0
1013	 2C6	JUMPDEST		 ;; __riscvimpl_XOR_1_1_1	  ;; # instr: xor ra,ra,ra(ignore imm)
- stack 0: 0x4F0
1014	 2C7	PUSH2	0020	 	 
- stack 1: 0x4F0
- stack 0: 0x20
1015	 2CA	MLOAD		 	  ;; # read from x1
- stack 1: 0x4F0
- stack 0: 0xFF00FF00
1016	 2CB	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0xFF00FF00
- stack 0: 0x20
1017	 2CE	MLOAD		 	  ;; # read from x1
- stack 2: 0x4F0
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1018	 2CF	XOR		 	  ;; # XOR
- stack 1: 0x4F0
- stack 0: 0x0
1019	 2D0	PUSH2	0020	 	 
- stack 2: 0x4F0
- stack 1: 0x0
- stack 0: 0x20
1020	 2D3	MSTORE		 	  ;; # store to x1
- stack 0: 0x4F0
1021	 2D4	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1022	 2D6	ADD		 	 
- stack 0: 0x4F4
1023	 2D7	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1024	 2D8	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x2DD000001330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F
1025	 2D9	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0x2DD000001330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
1026	 2DB	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x2DD
1027	 2DC	JUMP		 	 
- stack 0: 0x4F4
1028	 2DD	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x4F4
1029	 2DE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1030	 2DF	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0x2DD000001330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F
1031	 2E0	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0x2DD000001330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
1032	 2E2	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0x2DD0000
1033	 2E3	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0x2DD0000
- stack 0: 0xFFFF
1034	 2E6	AND		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1035	 2E7	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x1
1036	 2E9	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0x0
1037	 2EA	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0x0
- stack 0: 0x3A0
1038	 2ED	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1039	 2EE	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1040	 2F0	ADD		 	 
- stack 0: 0x4F8
1041	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1042	 2F2	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
1043	 2F3	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1044	 2F5	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x133
1045	 2F6	JUMP		 	 
- stack 0: 0x4F8
1046	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1047	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1048	 135	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
1049	 136	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008022B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1050	 138	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1330008
1051	 139	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1330008
- stack 0: 0xFFFF
1052	 13C	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1053	 13D	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x1
1054	 13F	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1055	 140	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x380
1056	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1057	 144	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1058	 146	ADD		 	 
- stack 0: 0x4FC
1059	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1060	 148	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x22B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA000003110000
1061	 149	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x22B03D402F700000086F0100099FF0000B8F0F100CBFF0F00EA000003110000
- stack 0: 0xF0
1062	 14B	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x22B
1063	 14C	JUMP		 	 
- stack 0: 0x4FC
1064	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,410(ignore imm)
- stack 0: 0x4FC
1065	 22C	PUSH2	0020	 	 
- stack 1: 0x4FC
- stack 0: 0x20
1066	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x4FC
- stack 0: 0x0
1067	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1068	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0x0
1069	 236	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x3A0
1070	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x0
1071	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
1072	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x0
1073	 240	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1074	 241	PUSH2	0249	 ;; _neq_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x249
1075	 244	JUMPI		 	 
- stack 0: 0x4FC
1076	 245	PUSH2	0263	 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 1: 0x4FC
- stack 0: 0x263
1077	 248	JUMP		 	 
- stack 0: 0x4FC
1078	 263	JUMPDEST		 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 0: 0x4FC
1079	 264	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1080	 266	ADD		 	 
- stack 0: 0x500
1081	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1082	 268	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001
1083	 269	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001
- stack 0: 0xF0
1084	 26B	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2F7
1085	 26C	JUMP		 	 
- stack 0: 0x500
1086	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x500
1087	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1088	 2F9	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001
1089	 2FA	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001
- stack 0: 0xE0
1090	 2FC	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2F70000
1091	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x2F70000
- stack 0: 0xFFFF
1092	 300	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1093	 301	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1094	 303	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1095	 304	PUSH2	0080	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x80
1096	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x500
1097	 308	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1098	 30A	ADD		 	 
- stack 0: 0x504
1099	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1100	 30C	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001034F0002
1101	 30D	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001034F0002
- stack 0: 0xF0
1102	 30F	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1103	 310	JUMP		 	 
- stack 0: 0x504
1104	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x504
1105	 87	PUSH4	ff010000	 	 
- stack 1: 0x504
- stack 0: 0xFF010000
1106	 8C	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFF010000
- stack 0: 0x20
1107	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1108	 90	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1109	 92	ADD		 	 
- stack 0: 0x508
1110	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1111	 94	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
1112	 95	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
- stack 0: 0xF0
1113	 97	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1114	 98	JUMP		 	 
- stack 0: 0x508
1115	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1116	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1117	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
1118	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
- stack 0: 0xE0
1119	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99FF00
1120	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1121	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xFF00
1122	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFF00
- stack 0: 0x1
1123	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1124	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1125	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1126	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xFF00FF00
1127	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF00FF00
- stack 0: 0x20
1128	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1129	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1130	 B1	ADD		 	 
- stack 0: 0x50C
1131	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1132	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0010100FF
1133	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
1134	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1135	 B7	JUMP		 	 
- stack 0: 0x50C
1136	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x50C
1137	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x50C
- stack 0: 0xF0F1000
1138	 BE	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xF0F1000
- stack 0: 0x40
1139	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1140	 C2	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1141	 C4	ADD		 	 
- stack 0: 0x510
1142	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1143	 C6	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
1144	 C7	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
1145	 C9	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCB
1146	 CA	JUMP		 	 
- stack 0: 0x510
1147	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x510
1148	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1149	 CD	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
1150	 CE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xE0
1151	 D0	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F
1152	 D1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1153	 D4	AND		 	 
- stack 1: 0x510
- stack 0: 0xFF0F
1154	 D5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFF0F
- stack 0: 0x1
1155	 D7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1156	 D8	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1157	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1158	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x510
- stack 0: 0xF0F0F0F
1159	 DD	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1160	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1161	 E1	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1162	 E3	ADD		 	 
- stack 0: 0x514
1163	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1164	 E5	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA00000311000003300001034F00020369FFE0010100FF0114000F01330009
1165	 E6	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xEA00000311000003300001034F00020369FFE0010100FF0114000F01330009
- stack 0: 0xF0
1166	 E8	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA
1167	 E9	JUMP		 	 
- stack 0: 0x514
1168	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x514
1169	 EB	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1170	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1171	 EF	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1172	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1173	 F3	XOR		 	  ;; # XOR
- stack 1: 0x514
- stack 0: 0xF00FF00F
1174	 F4	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0xF00FF00F
- stack 0: 0x60
1175	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x514
1176	 F8	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1177	 FA	ADD		 	 
- stack 0: 0x518
1178	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1179	 FC	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
1180	 FD	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
- stack 0: 0xF0
1181	 FF	SHR		 	 
- stack 1: 0x518
- stack 0: 0x311
1182	 100	JUMP		 	 
- stack 0: 0x518
1183	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1184	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1185	 313	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
1186	 314	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
- stack 0: 0xE0
1187	 316	SHR		 	 
- stack 1: 0x518
- stack 0: 0x3110000
1188	 317	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x3110000
- stack 0: 0xFFFF
1189	 31A	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1190	 31B	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1191	 31D	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1192	 31E	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1193	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF00FF00F
1194	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF00FF00F
1195	 323	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF00FF00F
- stack 0: 0xC0
1196	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1197	 327	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1198	 329	ADD		 	 
- stack 0: 0x51C
1199	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1200	 32B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
1201	 32C	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
- stack 0: 0xF0
1202	 32E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x330
1203	 32F	JUMP		 	 
- stack 0: 0x51C
1204	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1205	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1206	 332	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
1207	 333	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
- stack 0: 0xE0
1208	 335	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x3300001
1209	 336	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x3300001
- stack 0: 0xFFFF
1210	 339	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1211	 33A	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1212	 33C	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1213	 33D	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1214	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x0
1215	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x1
1216	 342	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1217	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1218	 346	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1219	 348	ADD		 	 
- stack 0: 0x520
1220	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1221	 34A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
1222	 34B	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
- stack 0: 0xF0
1223	 34D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x34F
1224	 34E	JUMP		 	 
- stack 0: 0x520
1225	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1226	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1227	 351	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
1228	 352	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
- stack 0: 0xE0
1229	 354	SHR		 	 
- stack 1: 0x520
- stack 0: 0x34F0002
1230	 355	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x34F0002
- stack 0: 0xFFFF
1231	 358	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1232	 359	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1233	 35B	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1234	 35C	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1235	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1236	 360	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1237	 362	ADD		 	 
- stack 0: 0x524
1238	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1239	 364	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
1240	 365	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
- stack 0: 0xF0
1241	 367	SHR		 	 
- stack 1: 0x524
- stack 0: 0x369
1242	 368	JUMP		 	 
- stack 0: 0x524
1243	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x524
1244	 36A	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1245	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x1
1246	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1247	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x1
1248	 374	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xA0
1249	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1250	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1251	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1252	 37E	SUB		 	 
- stack 1: 0x524
- stack 0: 0x1
1253	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x387
1254	 382	JUMPI		 	 
- stack 0: 0x524
1255	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x524
1256	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1257	 389	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
1258	 38A	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
- stack 0: 0xE0
1259	 38C	SHR		 	 
- stack 1: 0x524
- stack 0: 0x369FFE0
1260	 38D	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x369FFE0
- stack 0: 0xFFFF
1261	 390	AND		 	 
- stack 1: 0x524
- stack 0: 0xFFE0
1262	 391	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFFE0
- stack 0: 0x1
1263	 393	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1264	 394	ADD		 	 
- stack 0: 0x504
1265	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1266	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x504
1267	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1268	 39C	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001034F0002
1269	 39D	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA00000311000003300001034F0002
- stack 0: 0xF0
1270	 39F	SHR		 	 
- stack 1: 0x504
- stack 0: 0x86
1271	 3A0	JUMP		 	 
- stack 0: 0x504
1272	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x504
1273	 87	PUSH4	ff010000	 	 
- stack 1: 0x504
- stack 0: 0xFF010000
1274	 8C	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xFF010000
- stack 0: 0x20
1275	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1276	 90	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1277	 92	ADD		 	 
- stack 0: 0x508
1278	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1279	 94	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
1280	 95	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
- stack 0: 0xF0
1281	 97	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1282	 98	JUMP		 	 
- stack 0: 0x508
1283	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1284	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1285	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
1286	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0
- stack 0: 0xE0
1287	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99FF00
1288	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99FF00
- stack 0: 0xFFFF
1289	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xFF00
1290	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xFF00
- stack 0: 0x1
1291	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1292	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
1293	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1294	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xFF00FF00
1295	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xFF00FF00
- stack 0: 0x20
1296	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1297	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1298	 B1	ADD		 	 
- stack 0: 0x50C
1299	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1300	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0010100FF
1301	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB8F0F100CBFF0F00EA00000311000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
1302	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1303	 B7	JUMP		 	 
- stack 0: 0x50C
1304	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x50C
1305	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x50C
- stack 0: 0xF0F1000
1306	 BE	PUSH2	0040	 	 
- stack 2: 0x50C
- stack 1: 0xF0F1000
- stack 0: 0x40
1307	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x50C
1308	 C2	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1309	 C4	ADD		 	 
- stack 0: 0x510
1310	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1311	 C6	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
1312	 C7	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
1313	 C9	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCB
1314	 CA	JUMP		 	 
- stack 0: 0x510
1315	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x510
1316	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1317	 CD	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
1318	 CE	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F00EA00000311000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xE0
1319	 D0	SHR		 	 
- stack 1: 0x510
- stack 0: 0xCBFF0F
1320	 D1	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
1321	 D4	AND		 	 
- stack 1: 0x510
- stack 0: 0xFF0F
1322	 D5	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0xFF0F
- stack 0: 0x1
1323	 D7	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
1324	 D8	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
1325	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x510
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
1326	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x510
- stack 0: 0xF0F0F0F
1327	 DD	PUSH2	0040	 	 
- stack 2: 0x510
- stack 1: 0xF0F0F0F
- stack 0: 0x40
1328	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x510
1329	 E1	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1330	 E3	ADD		 	 
- stack 0: 0x514
1331	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1332	 E5	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0xEA00000311000003300001034F00020369FFE0010100FF0114000F01330009
1333	 E6	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0xEA00000311000003300001034F00020369FFE0010100FF0114000F01330009
- stack 0: 0xF0
1334	 E8	SHR		 	 
- stack 1: 0x514
- stack 0: 0xEA
1335	 E9	JUMP		 	 
- stack 0: 0x514
1336	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x514
1337	 EB	PUSH2	0040	 	 
- stack 1: 0x514
- stack 0: 0x40
1338	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x514
- stack 0: 0xF0F0F0F
1339	 EF	PUSH2	0020	 	 
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0x20
1340	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x514
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
1341	 F3	XOR		 	  ;; # XOR
- stack 1: 0x514
- stack 0: 0xF00FF00F
1342	 F4	PUSH2	0060	 	 
- stack 2: 0x514
- stack 1: 0xF00FF00F
- stack 0: 0x60
1343	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x514
1344	 F8	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1345	 FA	ADD		 	 
- stack 0: 0x518
1346	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1347	 FC	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
1348	 FD	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
- stack 0: 0xF0
1349	 FF	SHR		 	 
- stack 1: 0x518
- stack 0: 0x311
1350	 100	JUMP		 	 
- stack 0: 0x518
1351	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1352	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1353	 313	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
1354	 314	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x311000003300001034F00020369FFE0010100FF0114000F0133000903AB039C
- stack 0: 0xE0
1355	 316	SHR		 	 
- stack 1: 0x518
- stack 0: 0x3110000
1356	 317	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x3110000
- stack 0: 0xFFFF
1357	 31A	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1358	 31B	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1359	 31D	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1360	 31E	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1361	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF00FF00F
1362	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF00FF00F
1363	 323	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF00FF00F
- stack 0: 0xC0
1364	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1365	 327	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1366	 329	ADD		 	 
- stack 0: 0x51C
1367	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1368	 32B	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
1369	 32C	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
- stack 0: 0xF0
1370	 32E	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x330
1371	 32F	JUMP		 	 
- stack 0: 0x51C
1372	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1373	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1374	 332	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
1375	 333	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000903AB039C02F70000
- stack 0: 0xE0
1376	 335	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x3300001
1377	 336	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x3300001
- stack 0: 0xFFFF
1378	 339	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1379	 33A	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1380	 33C	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1381	 33D	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1382	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1383	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x2
1384	 342	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x80
1385	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1386	 346	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1387	 348	ADD		 	 
- stack 0: 0x520
1388	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1389	 34A	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
1390	 34B	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
- stack 0: 0xF0
1391	 34D	SHR		 	 
- stack 1: 0x520
- stack 0: 0x34F
1392	 34E	JUMP		 	 
- stack 0: 0x520
1393	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1394	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1395	 351	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
1396	 352	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000903AB039C02F70000018FFF01
- stack 0: 0xE0
1397	 354	SHR		 	 
- stack 1: 0x520
- stack 0: 0x34F0002
1398	 355	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x34F0002
- stack 0: 0xFFFF
1399	 358	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1400	 359	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1401	 35B	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1402	 35C	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1403	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1404	 360	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1405	 362	ADD		 	 
- stack 0: 0x524
1406	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1407	 364	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
1408	 365	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x369FFE0010100FF0114000F0133000903AB039C02F70000018FFF010099FFF0
- stack 0: 0xF0
1409	 367	SHR		 	 
- stack 1: 0x524
- stack 0: 0x369
1410	 368	JUMP		 	 
- stack 0: 0x524
1411	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x524
1412	 36A	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1413	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x2
1414	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1415	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x2
1416	 374	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1417	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1418	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1419	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1420	 37E	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1421	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x387
1422	 382	JUMPI		 	 
- stack 0: 0x524
1423	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x524
- stack 0: 0x3A1
1424	 386	JUMP		 	 
- stack 0: 0x524
1425	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x524
1426	 3A2	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1427	 3A4	ADD		 	 
- stack 0: 0x528
1428	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1429	 3A6	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x10100FF0114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F
1430	 3A7	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x10100FF0114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F
- stack 0: 0xF0
1431	 3A9	SHR		 	 
- stack 1: 0x528
- stack 0: 0x101
1432	 3AA	JUMP		 	 
- stack 0: 0x528
1433	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x528
1434	 102	PUSH4	f00ff000	 	 
- stack 1: 0x528
- stack 0: 0xF00FF000
1435	 107	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xF00FF000
- stack 0: 0x3A0
1436	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1437	 10B	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1438	 10D	ADD		 	 
- stack 0: 0x52C
1439	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1440	 10F	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F0
1441	 110	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0x114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
1442	 112	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x114
1443	 113	JUMP		 	 
- stack 0: 0x52C
1444	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x52C
1445	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1446	 116	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0x114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F0
1447	 117	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0x114000F0133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
1448	 119	SHR		 	 
- stack 1: 0x52C
- stack 0: 0x114000F
1449	 11A	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0x114000F
- stack 0: 0xFFFF
1450	 11D	AND		 	 
- stack 1: 0x52C
- stack 0: 0xF
1451	 11E	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xF
- stack 0: 0x1
1452	 120	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xF
1453	 121	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xF
- stack 0: 0x3A0
1454	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x52C
- stack 1: 0xF
- stack 0: 0xF00FF000
1455	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x52C
- stack 0: 0xF00FF00F
1456	 126	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1457	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1458	 12A	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1459	 12C	ADD		 	 
- stack 0: 0x530
1460	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1461	 12E	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA0000
1462	 12F	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xF0
1463	 131	SHR		 	 
- stack 1: 0x530
- stack 0: 0x133
1464	 132	JUMP		 	 
- stack 0: 0x530
1465	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1466	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1467	 135	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA0000
1468	 136	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x133000903AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA0000
- stack 0: 0xE0
1469	 138	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1330009
1470	 139	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1330009
- stack 0: 0xFFFF
1471	 13C	AND		 	 
- stack 1: 0x530
- stack 0: 0x9
1472	 13D	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x1
1473	 13F	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x9
1474	 140	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x380
1475	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1476	 144	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1477	 146	ADD		 	 
- stack 0: 0x534
1478	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1479	 148	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x3AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED0000
1480	 149	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x3AB039C02F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED0000
- stack 0: 0xF0
1481	 14B	SHR		 	 
- stack 1: 0x534
- stack 0: 0x3AB
1482	 14C	JUMP		 	 
- stack 0: 0x534
1483	 3AB	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x534
1484	 3AC	PUSH2	00C0	 	 
- stack 1: 0x534
- stack 0: 0xC0
1485	 3AF	MLOAD		 	  ;; # read from x6
- stack 1: 0x534
- stack 0: 0xF00FF00F
1486	 3B0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1487	 3B5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0xF00FF00F
1488	 3B6	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
1489	 3B9	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1490	 3BA	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
1491	 3BF	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
1492	 3C0	SUB		 	 
- stack 1: 0x534
- stack 0: 0x0
1493	 3C1	PUSH2	03C9	 ;; _neq_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x3C9
1494	 3C4	JUMPI		 	 
- stack 0: 0x534
1495	 3C5	PUSH2	03E3	 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 1: 0x534
- stack 0: 0x3E3
1496	 3C8	JUMP		 	 
- stack 0: 0x534
1497	 3E3	JUMPDEST		 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 0: 0x534
1498	 3E4	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1499	 3E6	ADD		 	 
- stack 0: 0x538
1500	 3E7	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1501	 3E8	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x2F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED000003110000
1502	 3E9	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x2F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED000003110000
- stack 0: 0xF0
1503	 3EB	SHR		 	 
- stack 1: 0x538
- stack 0: 0x2F7
1504	 3EC	JUMP		 	 
- stack 0: 0x538
1505	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x538
1506	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1507	 2F9	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x2F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED000003110000
1508	 2FA	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x2F70000018FFF010099FFF001A20F0F00CB00F000EA000003ED000003110000
- stack 0: 0xE0
1509	 2FC	SHR		 	 
- stack 1: 0x538
- stack 0: 0x2F70000
1510	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x2F70000
- stack 0: 0xFFFF
1511	 300	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1512	 301	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1513	 303	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1514	 304	PUSH2	0080	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x80
1515	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x538
1516	 308	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1517	 30A	ADD		 	 
- stack 0: 0x53C
1518	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1519	 30C	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003ED00000311000003300001
1520	 30D	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003ED00000311000003300001
- stack 0: 0xF0
1521	 30F	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18F
1522	 310	JUMP		 	 
- stack 0: 0x53C
1523	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
1524	 190	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
1525	 195	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
1526	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1527	 199	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1528	 19B	ADD		 	 
- stack 0: 0x540
1529	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1530	 19D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
1531	 19E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
- stack 0: 0xF0
1532	 1A0	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
1533	 1A1	JUMP		 	 
- stack 0: 0x540
1534	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
1535	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1536	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
1537	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
- stack 0: 0xE0
1538	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
1539	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1540	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1541	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1542	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1543	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1544	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1545	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
1546	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
1547	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1548	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1549	 B1	ADD		 	 
- stack 0: 0x544
1550	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1551	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1A20F0F00CB00F000EA000003ED00000311000003300001034F00020369FFDC
1552	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1A20F0F00CB00F000EA000003ED00000311000003300001034F00020369FFDC
- stack 0: 0xF0
1553	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1A2
1554	 B7	JUMP		 	 
- stack 0: 0x544
1555	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x544
1556	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x544
- stack 0: 0xF0F0F000
1557	 1A8	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0xF0F0F000
- stack 0: 0x40
1558	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1559	 1AC	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1560	 1AE	ADD		 	 
- stack 0: 0x548
1561	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1562	 1B0	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
1563	 1B1	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
1564	 1B3	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB
1565	 1B4	JUMP		 	 
- stack 0: 0x548
1566	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x548
1567	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1568	 CD	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
1569	 CE	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
- stack 0: 0xE0
1570	 D0	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB00F0
1571	 D1	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1572	 D4	AND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1573	 D5	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x1
1574	 D7	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1575	 D8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x40
1576	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1577	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x548
- stack 0: 0xF0F0F0F0
1578	 DD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1579	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1580	 E1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1581	 E3	ADD		 	 
- stack 0: 0x54C
1582	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1583	 E5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xEA000003ED00000311000003300001034F00020369FFDC01B5F0100114FF00
1584	 E6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xEA000003ED00000311000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
1585	 E8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xEA
1586	 E9	JUMP		 	 
- stack 0: 0x54C
1587	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x54C
1588	 EB	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1589	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1590	 EF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1591	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1592	 F3	XOR		 	  ;; # XOR
- stack 1: 0x54C
- stack 0: 0xFF00FF00
1593	 F4	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0xFF00FF00
- stack 0: 0x60
1594	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1595	 F8	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1596	 FA	ADD		 	 
- stack 0: 0x550
1597	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1598	 FC	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
1599	 FD	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
- stack 0: 0xF0
1600	 FF	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3ED
1601	 100	JUMP		 	 
- stack 0: 0x550
1602	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x550
1603	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1604	 3EF	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
1605	 3F0	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
- stack 0: 0xE0
1606	 3F2	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3ED0000
1607	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
1608	 3F6	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1609	 3F7	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1610	 3F9	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1611	 3FA	POP		 	 
- stack 0: 0x550
1612	 3FB	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1613	 3FD	ADD		 	 
- stack 0: 0x554
1614	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1615	 3FF	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
1616	 400	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
- stack 0: 0xF0
1617	 402	SHR		 	 
- stack 1: 0x554
- stack 0: 0x311
1618	 403	JUMP		 	 
- stack 0: 0x554
1619	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x554
1620	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1621	 313	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
1622	 314	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
- stack 0: 0xE0
1623	 316	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3110000
1624	 317	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x3110000
- stack 0: 0xFFFF
1625	 31A	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1626	 31B	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1627	 31D	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1628	 31E	PUSH2	0060	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x60
1629	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0xFF00FF00
1630	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x554
- stack 0: 0xFF00FF00
1631	 323	PUSH2	00C0	 	 
- stack 2: 0x554
- stack 1: 0xFF00FF00
- stack 0: 0xC0
1632	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x554
1633	 327	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1634	 329	ADD		 	 
- stack 0: 0x558
1635	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1636	 32B	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
1637	 32C	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
- stack 0: 0xF0
1638	 32E	SHR		 	 
- stack 1: 0x558
- stack 0: 0x330
1639	 32F	JUMP		 	 
- stack 0: 0x558
1640	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1641	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1642	 332	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
1643	 333	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
- stack 0: 0xE0
1644	 335	SHR		 	 
- stack 1: 0x558
- stack 0: 0x3300001
1645	 336	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x3300001
- stack 0: 0xFFFF
1646	 339	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1647	 33A	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1648	 33C	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1649	 33D	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1650	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x0
1651	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x1
1652	 342	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1653	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1654	 346	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1655	 348	ADD		 	 
- stack 0: 0x55C
1656	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1657	 34A	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
1658	 34B	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
- stack 0: 0xF0
1659	 34D	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x34F
1660	 34E	JUMP		 	 
- stack 0: 0x55C
1661	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1662	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1663	 351	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
1664	 352	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
- stack 0: 0xE0
1665	 354	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x34F0002
1666	 355	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
1667	 358	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1668	 359	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1669	 35B	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1670	 35C	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1671	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1672	 360	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1673	 362	ADD		 	 
- stack 0: 0x560
1674	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1675	 364	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
1676	 365	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
- stack 0: 0xF0
1677	 367	SHR		 	 
- stack 1: 0x560
- stack 0: 0x369
1678	 368	JUMP		 	 
- stack 0: 0x560
1679	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1680	 36A	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1681	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x1
1682	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1683	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x1
1684	 374	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0xA0
1685	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1686	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1687	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x2
1688	 37E	SUB		 	 
- stack 1: 0x560
- stack 0: 0x1
1689	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x560
- stack 1: 0x1
- stack 0: 0x387
1690	 382	JUMPI		 	 
- stack 0: 0x560
1691	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x560
1692	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x560
- stack 0: 0x560
1693	 389	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
1694	 38A	PUSH1	E0	 	 
- stack 2: 0x560
- stack 1: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
- stack 0: 0xE0
1695	 38C	SHR		 	 
- stack 1: 0x560
- stack 0: 0x369FFDC
1696	 38D	PUSH2	FFFF	 	 
- stack 2: 0x560
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
1697	 390	AND		 	 
- stack 1: 0x560
- stack 0: 0xFFDC
1698	 391	PUSH1	01	 	 
- stack 2: 0x560
- stack 1: 0xFFDC
- stack 0: 0x1
1699	 393	SIGNEXTEND		 	 
- stack 1: 0x560
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
1700	 394	ADD		 	 
- stack 0: 0x53C
1701	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
1702	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
1703	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1704	 39C	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F000EA000003ED00000311000003300001
1705	 39D	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F000EA000003ED00000311000003300001
- stack 0: 0xF0
1706	 39F	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x18F
1707	 3A0	JUMP		 	 
- stack 0: 0x53C
1708	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
1709	 190	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
1710	 195	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
1711	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1712	 199	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1713	 19B	ADD		 	 
- stack 0: 0x540
1714	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1715	 19D	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
1716	 19E	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
- stack 0: 0xF0
1717	 1A0	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
1718	 1A1	JUMP		 	 
- stack 0: 0x540
1719	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
1720	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1721	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
1722	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF001A20F0F00CB00F000EA000003ED00000311000003300001034F0002
- stack 0: 0xE0
1723	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
1724	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1725	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1726	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1727	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1728	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1729	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1730	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
1731	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
1732	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1733	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1734	 B1	ADD		 	 
- stack 0: 0x544
1735	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1736	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0x1A20F0F00CB00F000EA000003ED00000311000003300001034F00020369FFDC
1737	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0x1A20F0F00CB00F000EA000003ED00000311000003300001034F00020369FFDC
- stack 0: 0xF0
1738	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0x1A2
1739	 B7	JUMP		 	 
- stack 0: 0x544
1740	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x544
1741	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x544
- stack 0: 0xF0F0F000
1742	 1A8	PUSH2	0040	 	 
- stack 2: 0x544
- stack 1: 0xF0F0F000
- stack 0: 0x40
1743	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x544
1744	 1AC	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1745	 1AE	ADD		 	 
- stack 0: 0x548
1746	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1747	 1B0	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
1748	 1B1	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
1749	 1B3	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB
1750	 1B4	JUMP		 	 
- stack 0: 0x548
1751	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x548
1752	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1753	 CD	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
1754	 CE	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0xCB00F000EA000003ED00000311000003300001034F00020369FFDC01B5F010
- stack 0: 0xE0
1755	 D0	SHR		 	 
- stack 1: 0x548
- stack 0: 0xCB00F0
1756	 D1	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
1757	 D4	AND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1758	 D5	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x1
1759	 D7	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0xF0
1760	 D8	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0x40
1761	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x548
- stack 1: 0xF0
- stack 0: 0xF0F0F000
1762	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x548
- stack 0: 0xF0F0F0F0
1763	 DD	PUSH2	0040	 	 
- stack 2: 0x548
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
1764	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x548
1765	 E1	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1766	 E3	ADD		 	 
- stack 0: 0x54C
1767	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1768	 E5	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0xEA000003ED00000311000003300001034F00020369FFDC01B5F0100114FF00
1769	 E6	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0xEA000003ED00000311000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
1770	 E8	SHR		 	 
- stack 1: 0x54C
- stack 0: 0xEA
1771	 E9	JUMP		 	 
- stack 0: 0x54C
1772	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x54C
1773	 EB	PUSH2	0040	 	 
- stack 1: 0x54C
- stack 0: 0x40
1774	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x54C
- stack 0: 0xF0F0F0F0
1775	 EF	PUSH2	0020	 	 
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
1776	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x54C
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
1777	 F3	XOR		 	  ;; # XOR
- stack 1: 0x54C
- stack 0: 0xFF00FF00
1778	 F4	PUSH2	0060	 	 
- stack 2: 0x54C
- stack 1: 0xFF00FF00
- stack 0: 0x60
1779	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x54C
1780	 F8	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
1781	 FA	ADD		 	 
- stack 0: 0x550
1782	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
1783	 FC	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
1784	 FD	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
- stack 0: 0xF0
1785	 FF	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3ED
1786	 100	JUMP		 	 
- stack 0: 0x550
1787	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x550
1788	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
1789	 3EF	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
1790	 3F0	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x3ED00000311000003300001034F00020369FFDC01B5F0100114FF000133000A
- stack 0: 0xE0
1791	 3F2	SHR		 	 
- stack 1: 0x550
- stack 0: 0x3ED0000
1792	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
1793	 3F6	AND		 	 
- stack 1: 0x550
- stack 0: 0x0
1794	 3F7	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x1
1795	 3F9	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0x0
1796	 3FA	POP		 	 
- stack 0: 0x550
1797	 3FB	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
1798	 3FD	ADD		 	 
- stack 0: 0x554
1799	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
1800	 3FF	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
1801	 400	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
- stack 0: 0xF0
1802	 402	SHR		 	 
- stack 1: 0x554
- stack 0: 0x311
1803	 403	JUMP		 	 
- stack 0: 0x554
1804	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x554
1805	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x554
- stack 0: 0x554
1806	 313	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
1807	 314	PUSH1	E0	 	 
- stack 2: 0x554
- stack 1: 0x311000003300001034F00020369FFDC01B5F0100114FF000133000A03AB0360
- stack 0: 0xE0
1808	 316	SHR		 	 
- stack 1: 0x554
- stack 0: 0x3110000
1809	 317	PUSH2	FFFF	 	 
- stack 2: 0x554
- stack 1: 0x3110000
- stack 0: 0xFFFF
1810	 31A	AND		 	 
- stack 1: 0x554
- stack 0: 0x0
1811	 31B	PUSH1	01	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x1
1812	 31D	SIGNEXTEND		 	 
- stack 1: 0x554
- stack 0: 0x0
1813	 31E	PUSH2	0060	 	 
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0x60
1814	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x554
- stack 1: 0x0
- stack 0: 0xFF00FF00
1815	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x554
- stack 0: 0xFF00FF00
1816	 323	PUSH2	00C0	 	 
- stack 2: 0x554
- stack 1: 0xFF00FF00
- stack 0: 0xC0
1817	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x554
1818	 327	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
1819	 329	ADD		 	 
- stack 0: 0x558
1820	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
1821	 32B	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
1822	 32C	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
- stack 0: 0xF0
1823	 32E	SHR		 	 
- stack 1: 0x558
- stack 0: 0x330
1824	 32F	JUMP		 	 
- stack 0: 0x558
1825	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x558
1826	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
1827	 332	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
1828	 333	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF000133000A03AB036002F70000
- stack 0: 0xE0
1829	 335	SHR		 	 
- stack 1: 0x558
- stack 0: 0x3300001
1830	 336	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0x3300001
- stack 0: 0xFFFF
1831	 339	AND		 	 
- stack 1: 0x558
- stack 0: 0x1
1832	 33A	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1833	 33C	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0x1
1834	 33D	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x80
1835	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x558
- stack 1: 0x1
- stack 0: 0x1
1836	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x558
- stack 0: 0x2
1837	 342	PUSH2	0080	 	 
- stack 2: 0x558
- stack 1: 0x2
- stack 0: 0x80
1838	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x558
1839	 346	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
1840	 348	ADD		 	 
- stack 0: 0x55C
1841	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
1842	 34A	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
1843	 34B	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
- stack 0: 0xF0
1844	 34D	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x34F
1845	 34E	JUMP		 	 
- stack 0: 0x55C
1846	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x55C
1847	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
1848	 351	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
1849	 352	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x34F00020369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0
- stack 0: 0xE0
1850	 354	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x34F0002
1851	 355	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
1852	 358	AND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1853	 359	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0x1
1854	 35B	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0x2
1855	 35C	PUSH2	00A0	 	 
- stack 2: 0x55C
- stack 1: 0x2
- stack 0: 0xA0
1856	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x55C
1857	 360	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
1858	 362	ADD		 	 
- stack 0: 0x560
1859	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
1860	 364	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
1861	 365	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x369FFDC01B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF
- stack 0: 0xF0
1862	 367	SHR		 	 
- stack 1: 0x560
- stack 0: 0x369
1863	 368	JUMP		 	 
- stack 0: 0x560
1864	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x560
1865	 36A	PUSH2	0080	 	 
- stack 1: 0x560
- stack 0: 0x80
1866	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x560
- stack 0: 0x2
1867	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1868	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0x2
1869	 374	PUSH2	00A0	 	 
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0xA0
1870	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
1871	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1872	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0x2
- stack 0: 0x2
1873	 37E	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
1874	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x387
1875	 382	JUMPI		 	 
- stack 0: 0x560
1876	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x560
- stack 0: 0x3A1
1877	 386	JUMP		 	 
- stack 0: 0x560
1878	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x560
1879	 3A2	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
1880	 3A4	ADD		 	 
- stack 0: 0x564
1881	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
1882	 3A6	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x1B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F1
1883	 3A7	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x1B5F0100114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
1884	 3A9	SHR		 	 
- stack 1: 0x564
- stack 0: 0x1B5
1885	 3AA	JUMP		 	 
- stack 0: 0x564
1886	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x564
1887	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x564
- stack 0: 0xFF010000
1888	 1BB	PUSH2	03A0	 	 
- stack 2: 0x564
- stack 1: 0xFF010000
- stack 0: 0x3A0
1889	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x564
1890	 1BF	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
1891	 1C1	ADD		 	 
- stack 0: 0x568
1892	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
1893	 1C3	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F
1894	 1C4	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
1895	 1C6	SHR		 	 
- stack 1: 0x568
- stack 0: 0x114
1896	 1C7	JUMP		 	 
- stack 0: 0x568
1897	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x568
1898	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x568
- stack 0: 0x568
1899	 116	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F
1900	 117	PUSH1	E0	 	 
- stack 2: 0x568
- stack 1: 0x114FF000133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
1901	 119	SHR		 	 
- stack 1: 0x568
- stack 0: 0x114FF00
1902	 11A	PUSH2	FFFF	 	 
- stack 2: 0x568
- stack 1: 0x114FF00
- stack 0: 0xFFFF
1903	 11D	AND		 	 
- stack 1: 0x568
- stack 0: 0xFF00
1904	 11E	PUSH1	01	 	 
- stack 2: 0x568
- stack 1: 0xFF00
- stack 0: 0x1
1905	 120	SIGNEXTEND		 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1906	 121	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1907	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x568
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
1908	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x568
- stack 0: 0xFF00FF00
1909	 126	PUSH2	03A0	 	 
- stack 2: 0x568
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1910	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x568
1911	 12A	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
1912	 12C	ADD		 	 
- stack 0: 0x56C
1913	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
1914	 12E	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1915	 12F	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
1916	 131	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x133
1917	 132	JUMP		 	 
- stack 0: 0x56C
1918	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x56C
1919	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
1920	 135	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
1921	 136	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x133000A03AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
1922	 138	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x133000A
1923	 139	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x133000A
- stack 0: 0xFFFF
1924	 13C	AND		 	 
- stack 1: 0x56C
- stack 0: 0xA
1925	 13D	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xA
- stack 0: 0x1
1926	 13F	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xA
1927	 140	PUSH2	0380	 	 
- stack 2: 0x56C
- stack 1: 0xA
- stack 0: 0x380
1928	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x56C
1929	 144	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
1930	 146	ADD		 	 
- stack 0: 0x570
1931	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
1932	 148	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x3AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED0000
1933	 149	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x3AB036002F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED0000
- stack 0: 0xF0
1934	 14B	SHR		 	 
- stack 1: 0x570
- stack 0: 0x3AB
1935	 14C	JUMP		 	 
- stack 0: 0x570
1936	 3AB	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x570
1937	 3AC	PUSH2	00C0	 	 
- stack 1: 0x570
- stack 0: 0xC0
1938	 3AF	MLOAD		 	  ;; # read from x6
- stack 1: 0x570
- stack 0: 0xFF00FF00
1939	 3B0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x570
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1940	 3B5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x570
- stack 0: 0xFF00FF00
1941	 3B6	PUSH2	03A0	 	 
- stack 2: 0x570
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
1942	 3B9	MLOAD		 	  ;; # read from x29
- stack 2: 0x570
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1943	 3BA	PUSH4	FFFFFFFF	 	 
- stack 3: 0x570
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
1944	 3BF	AND		 	  ;; # mask to 32 bits
- stack 2: 0x570
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
1945	 3C0	SUB		 	 
- stack 1: 0x570
- stack 0: 0x0
1946	 3C1	PUSH2	03C9	 ;; _neq_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x3C9
1947	 3C4	JUMPI		 	 
- stack 0: 0x570
1948	 3C5	PUSH2	03E3	 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 1: 0x570
- stack 0: 0x3E3
1949	 3C8	JUMP		 	 
- stack 0: 0x570
1950	 3E3	JUMPDEST		 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 0: 0x570
1951	 3E4	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
1952	 3E6	ADD		 	 
- stack 0: 0x574
1953	 3E7	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
1954	 3E8	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED0000
1955	 3E9	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED0000
- stack 0: 0xF0
1956	 3EB	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2F7
1957	 3EC	JUMP		 	 
- stack 0: 0x574
1958	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x574
1959	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
1960	 2F9	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED0000
1961	 2FA	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED0000
- stack 0: 0xE0
1962	 2FC	SHR		 	 
- stack 1: 0x574
- stack 0: 0x2F70000
1963	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0x2F70000
- stack 0: 0xFFFF
1964	 300	AND		 	 
- stack 1: 0x574
- stack 0: 0x0
1965	 301	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x1
1966	 303	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0x0
1967	 304	PUSH2	0080	 	 
- stack 2: 0x574
- stack 1: 0x0
- stack 0: 0x80
1968	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x574
1969	 308	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
1970	 30A	ADD		 	 
- stack 0: 0x578
1971	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
1972	 30C	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED000003110000
1973	 30D	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED000003110000
- stack 0: 0xF0
1974	 30F	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C8
1975	 310	JUMP		 	 
- stack 0: 0x578
1976	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x578
1977	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x578
- stack 0: 0xFF0000
1978	 1CE	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFF0000
- stack 0: 0x20
1979	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
1980	 1D2	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
1981	 1D4	ADD		 	 
- stack 0: 0x57C
1982	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
1983	 1D6	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
1984	 1D7	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
- stack 0: 0xF0
1985	 1D9	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
1986	 1DA	JUMP		 	 
- stack 0: 0x57C
1987	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
1988	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
1989	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
1990	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
- stack 0: 0xE0
1991	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF
1992	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
1993	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
1994	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x1
1995	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
1996	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x20
1997	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0xFF0000
1998	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xFF00FF
1999	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF00FF
- stack 0: 0x20
2000	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2001	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2002	 B1	ADD		 	 
- stack 0: 0x580
2003	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2004	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xB8F0F100CBFF0F00EA000003ED000003ED00000311000003300001034F0002
2005	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xB8F0F100CBFF0F00EA000003ED000003ED00000311000003300001034F0002
- stack 0: 0xF0
2006	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0xB8
2007	 B7	JUMP		 	 
- stack 0: 0x580
2008	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x580
2009	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x580
- stack 0: 0xF0F1000
2010	 BE	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xF0F1000
- stack 0: 0x40
2011	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2012	 C2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2013	 C4	ADD		 	 
- stack 0: 0x584
2014	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2015	 C6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
2016	 C7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
- stack 0: 0xF0
2017	 C9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCB
2018	 CA	JUMP		 	 
- stack 0: 0x584
2019	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x584
2020	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2021	 CD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
2022	 CE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
- stack 0: 0xE0
2023	 D0	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F
2024	 D1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2025	 D4	AND		 	 
- stack 1: 0x584
- stack 0: 0xFF0F
2026	 D5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xFF0F
- stack 0: 0x1
2027	 D7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2028	 D8	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2029	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2030	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x584
- stack 0: 0xF0F0F0F
2031	 DD	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2032	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2033	 E1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2034	 E3	ADD		 	 
- stack 0: 0x588
2035	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2036	 E5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEA000003ED000003ED00000311000003300001034F00020369FFD801DBFF01
2037	 E6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xEA000003ED000003ED00000311000003300001034F00020369FFD801DBFF01
- stack 0: 0xF0
2038	 E8	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEA
2039	 E9	JUMP		 	 
- stack 0: 0x588
2040	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x588
2041	 EB	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2042	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2043	 EF	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2044	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2045	 F3	XOR		 	  ;; # XOR
- stack 1: 0x588
- stack 0: 0xFF00FF0
2046	 F4	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xFF00FF0
- stack 0: 0x60
2047	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2048	 F8	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2049	 FA	ADD		 	 
- stack 0: 0x58C
2050	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2051	 FC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
2052	 FD	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
- stack 0: 0xF0
2053	 FF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3ED
2054	 100	JUMP		 	 
- stack 0: 0x58C
2055	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x58C
2056	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2057	 3EF	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
2058	 3F0	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
- stack 0: 0xE0
2059	 3F2	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3ED0000
2060	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
2061	 3F6	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2062	 3F7	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2063	 3F9	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2064	 3FA	POP		 	 
- stack 0: 0x58C
2065	 3FB	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2066	 3FD	ADD		 	 
- stack 0: 0x590
2067	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2068	 3FF	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
2069	 400	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
- stack 0: 0xF0
2070	 402	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3ED
2071	 403	JUMP		 	 
- stack 0: 0x590
2072	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2073	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2074	 3EF	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
2075	 3F0	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
- stack 0: 0xE0
2076	 3F2	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3ED0000
2077	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
2078	 3F6	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2079	 3F7	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2080	 3F9	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2081	 3FA	POP		 	 
- stack 0: 0x590
2082	 3FB	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2083	 3FD	ADD		 	 
- stack 0: 0x594
2084	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2085	 3FF	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
2086	 400	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
- stack 0: 0xF0
2087	 402	SHR		 	 
- stack 1: 0x594
- stack 0: 0x311
2088	 403	JUMP		 	 
- stack 0: 0x594
2089	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2090	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2091	 313	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
2092	 314	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
- stack 0: 0xE0
2093	 316	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3110000
2094	 317	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x3110000
- stack 0: 0xFFFF
2095	 31A	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2096	 31B	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2097	 31D	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2098	 31E	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2099	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0xFF00FF0
2100	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0xFF00FF0
2101	 323	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0xFF00FF0
- stack 0: 0xC0
2102	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2103	 327	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2104	 329	ADD		 	 
- stack 0: 0x598
2105	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2106	 32B	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
2107	 32C	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
- stack 0: 0xF0
2108	 32E	SHR		 	 
- stack 1: 0x598
- stack 0: 0x330
2109	 32F	JUMP		 	 
- stack 0: 0x598
2110	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2111	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2112	 332	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
2113	 333	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
- stack 0: 0xE0
2114	 335	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3300001
2115	 336	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3300001
- stack 0: 0xFFFF
2116	 339	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2117	 33A	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2118	 33C	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2119	 33D	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2120	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x0
2121	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x1
2122	 342	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2123	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2124	 346	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2125	 348	ADD		 	 
- stack 0: 0x59C
2126	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2127	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
2128	 34B	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
- stack 0: 0xF0
2129	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x34F
2130	 34E	JUMP		 	 
- stack 0: 0x59C
2131	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2132	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2133	 351	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
2134	 352	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
- stack 0: 0xE0
2135	 354	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x34F0002
2136	 355	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2137	 358	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2138	 359	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2139	 35B	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2140	 35C	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2141	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2142	 360	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2143	 362	ADD		 	 
- stack 0: 0x5A0
2144	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2145	 364	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
2146	 365	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
- stack 0: 0xF0
2147	 367	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x369
2148	 368	JUMP		 	 
- stack 0: 0x5A0
2149	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A0
2150	 36A	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2151	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x1
2152	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2153	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x1
2154	 374	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0xA0
2155	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2156	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2157	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x2
2158	 37E	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x1
2159	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x5A0
- stack 1: 0x1
- stack 0: 0x387
2160	 382	JUMPI		 	 
- stack 0: 0x5A0
2161	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x5A0
2162	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2163	 389	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
2164	 38A	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
- stack 0: 0xE0
2165	 38C	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x369FFD8
2166	 38D	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x369FFD8
- stack 0: 0xFFFF
2167	 390	AND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFD8
2168	 391	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0xFFD8
- stack 0: 0x1
2169	 393	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD8
2170	 394	ADD		 	 
- stack 0: 0x578
2171	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x578
- stack 0: 0xFFFFFFFF
2172	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x578
2173	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2174	 39C	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED000003110000
2175	 39D	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F00EA000003ED000003ED000003110000
- stack 0: 0xF0
2176	 39F	SHR		 	 
- stack 1: 0x578
- stack 0: 0x1C8
2177	 3A0	JUMP		 	 
- stack 0: 0x578
2178	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x578
2179	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x578
- stack 0: 0xFF0000
2180	 1CE	PUSH2	0020	 	 
- stack 2: 0x578
- stack 1: 0xFF0000
- stack 0: 0x20
2181	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x578
2182	 1D2	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2183	 1D4	ADD		 	 
- stack 0: 0x57C
2184	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2185	 1D6	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
2186	 1D7	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
- stack 0: 0xF0
2187	 1D9	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x99
2188	 1DA	JUMP		 	 
- stack 0: 0x57C
2189	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x57C
2190	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2191	 9B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
2192	 9C	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF00B8F0F100CBFF0F00EA000003ED000003ED00000311000003300001
- stack 0: 0xE0
2193	 9E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x9900FF
2194	 9F	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x9900FF
- stack 0: 0xFFFF
2195	 A2	AND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
2196	 A3	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x1
2197	 A5	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0xFF
2198	 A6	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0x20
2199	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x57C
- stack 1: 0xFF
- stack 0: 0xFF0000
2200	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x57C
- stack 0: 0xFF00FF
2201	 AB	PUSH2	0020	 	 
- stack 2: 0x57C
- stack 1: 0xFF00FF
- stack 0: 0x20
2202	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x57C
2203	 AF	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2204	 B1	ADD		 	 
- stack 0: 0x580
2205	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2206	 B3	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0xB8F0F100CBFF0F00EA000003ED000003ED00000311000003300001034F0002
2207	 B4	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0xB8F0F100CBFF0F00EA000003ED000003ED00000311000003300001034F0002
- stack 0: 0xF0
2208	 B6	SHR		 	 
- stack 1: 0x580
- stack 0: 0xB8
2209	 B7	JUMP		 	 
- stack 0: 0x580
2210	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x580
2211	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x580
- stack 0: 0xF0F1000
2212	 BE	PUSH2	0040	 	 
- stack 2: 0x580
- stack 1: 0xF0F1000
- stack 0: 0x40
2213	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x580
2214	 C2	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2215	 C4	ADD		 	 
- stack 0: 0x584
2216	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2217	 C6	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
2218	 C7	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
- stack 0: 0xF0
2219	 C9	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCB
2220	 CA	JUMP		 	 
- stack 0: 0x584
2221	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x584
2222	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x584
- stack 0: 0x584
2223	 CD	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
2224	 CE	PUSH1	E0	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F00EA000003ED000003ED00000311000003300001034F00020369FFD8
- stack 0: 0xE0
2225	 D0	SHR		 	 
- stack 1: 0x584
- stack 0: 0xCBFF0F
2226	 D1	PUSH2	FFFF	 	 
- stack 2: 0x584
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2227	 D4	AND		 	 
- stack 1: 0x584
- stack 0: 0xFF0F
2228	 D5	PUSH1	01	 	 
- stack 2: 0x584
- stack 1: 0xFF0F
- stack 0: 0x1
2229	 D7	SIGNEXTEND		 	 
- stack 1: 0x584
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2230	 D8	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2231	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x584
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2232	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x584
- stack 0: 0xF0F0F0F
2233	 DD	PUSH2	0040	 	 
- stack 2: 0x584
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2234	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x584
2235	 E1	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2236	 E3	ADD		 	 
- stack 0: 0x588
2237	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2238	 E5	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEA000003ED000003ED00000311000003300001034F00020369FFD801DBFF01
2239	 E6	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xEA000003ED000003ED00000311000003300001034F00020369FFD801DBFF01
- stack 0: 0xF0
2240	 E8	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEA
2241	 E9	JUMP		 	 
- stack 0: 0x588
2242	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x588
2243	 EB	PUSH2	0040	 	 
- stack 1: 0x588
- stack 0: 0x40
2244	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x588
- stack 0: 0xF0F0F0F
2245	 EF	PUSH2	0020	 	 
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2246	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x588
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
2247	 F3	XOR		 	  ;; # XOR
- stack 1: 0x588
- stack 0: 0xFF00FF0
2248	 F4	PUSH2	0060	 	 
- stack 2: 0x588
- stack 1: 0xFF00FF0
- stack 0: 0x60
2249	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x588
2250	 F8	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2251	 FA	ADD		 	 
- stack 0: 0x58C
2252	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2253	 FC	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
2254	 FD	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
- stack 0: 0xF0
2255	 FF	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3ED
2256	 100	JUMP		 	 
- stack 0: 0x58C
2257	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x58C
2258	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2259	 3EF	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
2260	 3F0	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x3ED000003ED00000311000003300001034F00020369FFD801DBFF010114FFF0
- stack 0: 0xE0
2261	 3F2	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x3ED0000
2262	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
2263	 3F6	AND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2264	 3F7	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0x0
- stack 0: 0x1
2265	 3F9	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0x0
2266	 3FA	POP		 	 
- stack 0: 0x58C
2267	 3FB	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2268	 3FD	ADD		 	 
- stack 0: 0x590
2269	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2270	 3FF	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
2271	 400	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
- stack 0: 0xF0
2272	 402	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3ED
2273	 403	JUMP		 	 
- stack 0: 0x590
2274	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x590
2275	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x590
- stack 0: 0x590
2276	 3EF	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
2277	 3F0	PUSH1	E0	 	 
- stack 2: 0x590
- stack 1: 0x3ED00000311000003300001034F00020369FFD801DBFF010114FFF00133000B
- stack 0: 0xE0
2278	 3F2	SHR		 	 
- stack 1: 0x590
- stack 0: 0x3ED0000
2279	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x590
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
2280	 3F6	AND		 	 
- stack 1: 0x590
- stack 0: 0x0
2281	 3F7	PUSH1	01	 	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x1
2282	 3F9	SIGNEXTEND		 	 
- stack 1: 0x590
- stack 0: 0x0
2283	 3FA	POP		 	 
- stack 0: 0x590
2284	 3FB	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2285	 3FD	ADD		 	 
- stack 0: 0x594
2286	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2287	 3FF	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
2288	 400	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
- stack 0: 0xF0
2289	 402	SHR		 	 
- stack 1: 0x594
- stack 0: 0x311
2290	 403	JUMP		 	 
- stack 0: 0x594
2291	 311	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x594
2292	 312	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2293	 313	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
2294	 314	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x311000003300001034F00020369FFD801DBFF010114FFF00133000B03AB0320
- stack 0: 0xE0
2295	 316	SHR		 	 
- stack 1: 0x594
- stack 0: 0x3110000
2296	 317	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x3110000
- stack 0: 0xFFFF
2297	 31A	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2298	 31B	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2299	 31D	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2300	 31E	PUSH2	0060	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x60
2301	 321	MLOAD		 	  ;; # read from x3
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0xFF00FF0
2302	 322	ADD		 	  ;; # ADDI 3
- stack 1: 0x594
- stack 0: 0xFF00FF0
2303	 323	PUSH2	00C0	 	 
- stack 2: 0x594
- stack 1: 0xFF00FF0
- stack 0: 0xC0
2304	 326	MSTORE		 	  ;; # store to x6
- stack 0: 0x594
2305	 327	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2306	 329	ADD		 	 
- stack 0: 0x598
2307	 32A	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2308	 32B	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
2309	 32C	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
- stack 0: 0xF0
2310	 32E	SHR		 	 
- stack 1: 0x598
- stack 0: 0x330
2311	 32F	JUMP		 	 
- stack 0: 0x598
2312	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x598
2313	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x598
- stack 0: 0x598
2314	 332	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
2315	 333	PUSH1	E0	 	 
- stack 2: 0x598
- stack 1: 0x3300001034F00020369FFD801DBFF010114FFF00133000B03AB032002F70000
- stack 0: 0xE0
2316	 335	SHR		 	 
- stack 1: 0x598
- stack 0: 0x3300001
2317	 336	PUSH2	FFFF	 	 
- stack 2: 0x598
- stack 1: 0x3300001
- stack 0: 0xFFFF
2318	 339	AND		 	 
- stack 1: 0x598
- stack 0: 0x1
2319	 33A	PUSH1	01	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2320	 33C	SIGNEXTEND		 	 
- stack 1: 0x598
- stack 0: 0x1
2321	 33D	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x80
2322	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x598
- stack 1: 0x1
- stack 0: 0x1
2323	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x598
- stack 0: 0x2
2324	 342	PUSH2	0080	 	 
- stack 2: 0x598
- stack 1: 0x2
- stack 0: 0x80
2325	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x598
2326	 346	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2327	 348	ADD		 	 
- stack 0: 0x59C
2328	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2329	 34A	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
2330	 34B	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
- stack 0: 0xF0
2331	 34D	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x34F
2332	 34E	JUMP		 	 
- stack 0: 0x59C
2333	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x59C
2334	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2335	 351	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
2336	 352	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x34F00020369FFD801DBFF010114FFF00133000B03AB032002F700000086F010
- stack 0: 0xE0
2337	 354	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x34F0002
2338	 355	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2339	 358	AND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2340	 359	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0x1
2341	 35B	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0x2
2342	 35C	PUSH2	00A0	 	 
- stack 2: 0x59C
- stack 1: 0x2
- stack 0: 0xA0
2343	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x59C
2344	 360	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2345	 362	ADD		 	 
- stack 0: 0x5A0
2346	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2347	 364	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
2348	 365	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x369FFD801DBFF010114FFF00133000B03AB032002F700000086F0100099FF00
- stack 0: 0xF0
2349	 367	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x369
2350	 368	JUMP		 	 
- stack 0: 0x5A0
2351	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5A0
2352	 36A	PUSH2	0080	 	 
- stack 1: 0x5A0
- stack 0: 0x80
2353	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x5A0
- stack 0: 0x2
2354	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2355	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5A0
- stack 0: 0x2
2356	 374	PUSH2	00A0	 	 
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0xA0
2357	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2358	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2359	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5A0
- stack 1: 0x2
- stack 0: 0x2
2360	 37E	SUB		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2361	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x387
2362	 382	JUMPI		 	 
- stack 0: 0x5A0
2363	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x5A0
- stack 0: 0x3A1
2364	 386	JUMP		 	 
- stack 0: 0x5A0
2365	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x5A0
2366	 3A2	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2367	 3A4	ADD		 	 
- stack 0: 0x5A4
2368	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2369	 3A6	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x1DBFF010114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F1
2370	 3A7	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x1DBFF010114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F1
- stack 0: 0xF0
2371	 3A9	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x1DB
2372	 3AA	JUMP		 	 
- stack 0: 0x5A4
2373	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x5A4
2374	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x5A4
- stack 0: 0xFF01000
2375	 1E1	PUSH2	03A0	 	 
- stack 2: 0x5A4
- stack 1: 0xFF01000
- stack 0: 0x3A0
2376	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A4
2377	 1E5	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2378	 1E7	ADD		 	 
- stack 0: 0x5A8
2379	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2380	 1E9	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F
2381	 1EA	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0x114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xF0
2382	 1EC	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x114
2383	 1ED	JUMP		 	 
- stack 0: 0x5A8
2384	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x5A8
2385	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2386	 116	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0x114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F
2387	 117	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0x114FFF00133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F
- stack 0: 0xE0
2388	 119	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0x114FFF0
2389	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
2390	 11D	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFF0
2391	 11E	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xFFF0
- stack 0: 0x1
2392	 120	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2393	 121	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2394	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2395	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5A8
- stack 0: 0xFF00FF0
2396	 126	PUSH2	03A0	 	 
- stack 2: 0x5A8
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2397	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5A8
2398	 12A	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2399	 12C	ADD		 	 
- stack 0: 0x5AC
2400	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2401	 12E	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
2402	 12F	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
2403	 131	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x133
2404	 132	JUMP		 	 
- stack 0: 0x5AC
2405	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5AC
2406	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2407	 135	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
2408	 136	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B03AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
2409	 138	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x133000B
2410	 139	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x133000B
- stack 0: 0xFFFF
2411	 13C	AND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
2412	 13D	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x1
2413	 13F	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0xB
2414	 140	PUSH2	0380	 	 
- stack 2: 0x5AC
- stack 1: 0xB
- stack 0: 0x380
2415	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5AC
2416	 144	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2417	 146	ADD		 	 
- stack 0: 0x5B0
2418	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2419	 148	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x3AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001
2420	 149	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x3AB032002F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001
- stack 0: 0xF0
2421	 14B	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x3AB
2422	 14C	JUMP		 	 
- stack 0: 0x5B0
2423	 3AB	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,39c(ignore imm)
- stack 0: 0x5B0
2424	 3AC	PUSH2	00C0	 	 
- stack 1: 0x5B0
- stack 0: 0xC0
2425	 3AF	MLOAD		 	  ;; # read from x6
- stack 1: 0x5B0
- stack 0: 0xFF00FF0
2426	 3B0	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2427	 3B5	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B0
- stack 0: 0xFF00FF0
2428	 3B6	PUSH2	03A0	 	 
- stack 2: 0x5B0
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
2429	 3B9	MLOAD		 	  ;; # read from x29
- stack 2: 0x5B0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2430	 3BA	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B0
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
2431	 3BF	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
2432	 3C0	SUB		 	 
- stack 1: 0x5B0
- stack 0: 0x0
2433	 3C1	PUSH2	03C9	 ;; _neq_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 2: 0x5B0
- stack 1: 0x0
- stack 0: 0x3C9
2434	 3C4	JUMPI		 	 
- stack 0: 0x5B0
2435	 3C5	PUSH2	03E3	 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 1: 0x5B0
- stack 0: 0x3E3
2436	 3C8	JUMP		 	 
- stack 0: 0x5B0
2437	 3E3	JUMPDEST		 ;; _neq_after_fdd957601d0bd6c5548f8cd30b5ebf3f752cd42d16d81b7cb3ae9a6dc2dacb5a	 
- stack 0: 0x5B0
2438	 3E4	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2439	 3E6	ADD		 	 
- stack 0: 0x5B4
2440	 3E7	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2441	 3E8	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001034F0002
2442	 3E9	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xF0
2443	 3EB	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2F7
2444	 3EC	JUMP		 	 
- stack 0: 0x5B4
2445	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5B4
2446	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2447	 2F9	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001034F0002
2448	 2FA	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x2F700000086F0100099FF0000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xE0
2449	 2FC	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2F70000
2450	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2F70000
- stack 0: 0xFFFF
2451	 300	AND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2452	 301	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x1
2453	 303	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2454	 304	PUSH2	0080	 	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x80
2455	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x5B4
2456	 308	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2457	 30A	ADD		 	 
- stack 0: 0x5B8
2458	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2459	 30C	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4
2460	 30D	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4
- stack 0: 0xF0
2461	 30F	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
2462	 310	JUMP		 	 
- stack 0: 0x5B8
2463	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5B8
2464	 87	PUSH4	ff010000	 	 
- stack 1: 0x5B8
- stack 0: 0xFF010000
2465	 8C	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF010000
- stack 0: 0x20
2466	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2467	 90	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2468	 92	ADD		 	 
- stack 0: 0x5BC
2469	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2470	 94	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
2471	 95	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
- stack 0: 0xF0
2472	 97	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99
2473	 98	JUMP		 	 
- stack 0: 0x5BC
2474	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5BC
2475	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2476	 9B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
2477	 9C	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
- stack 0: 0xE0
2478	 9E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF00
2479	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2480	 A2	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF00
2481	 A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00
- stack 0: 0x1
2482	 A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2483	 A6	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2484	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2485	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2486	 AB	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x20
2487	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2488	 AF	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2489	 B1	ADD		 	 
- stack 0: 0x5C0
2490	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2491	 B3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF0114000F
2492	 B4	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF0114000F
- stack 0: 0xF0
2493	 B6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB8
2494	 B7	JUMP		 	 
- stack 0: 0x5C0
2495	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C0
2496	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C0
- stack 0: 0xF0F1000
2497	 BE	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xF0F1000
- stack 0: 0x40
2498	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2499	 C2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2500	 C4	ADD		 	 
- stack 0: 0x5C4
2501	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2502	 C6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
2503	 C7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
- stack 0: 0xF0
2504	 C9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCB
2505	 CA	JUMP		 	 
- stack 0: 0x5C4
2506	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C4
2507	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2508	 CD	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
2509	 CE	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
- stack 0: 0xE0
2510	 D0	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F
2511	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2512	 D4	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFF0F
2513	 D5	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFF0F
- stack 0: 0x1
2514	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2515	 D8	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2516	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2517	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0xF0F0F0F
2518	 DD	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2519	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2520	 E1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2521	 E3	ADD		 	 
- stack 0: 0x5C8
2522	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2523	 E5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xEA000003300001034F00020369FFE4010100FF0114000F0133000C014D02EC
2524	 E6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xEA000003300001034F00020369FFE4010100FF0114000F0133000C014D02EC
- stack 0: 0xF0
2525	 E8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xEA
2526	 E9	JUMP		 	 
- stack 0: 0x5C8
2527	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x5C8
2528	 EB	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2529	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2530	 EF	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2531	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2532	 F3	XOR		 	  ;; # XOR
- stack 1: 0x5C8
- stack 0: 0xF00FF00F
2533	 F4	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0xF00FF00F
- stack 0: 0x60
2534	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C8
2535	 F8	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2536	 FA	ADD		 	 
- stack 0: 0x5CC
2537	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2538	 FC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
2539	 FD	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
- stack 0: 0xF0
2540	 FF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x330
2541	 100	JUMP		 	 
- stack 0: 0x5CC
2542	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2543	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2544	 332	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
2545	 333	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
- stack 0: 0xE0
2546	 335	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001
2547	 336	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001
- stack 0: 0xFFFF
2548	 339	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2549	 33A	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2550	 33C	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2551	 33D	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2552	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x0
2553	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x1
2554	 342	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2555	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2556	 346	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2557	 348	ADD		 	 
- stack 0: 0x5D0
2558	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2559	 34A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
2560	 34B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
- stack 0: 0xF0
2561	 34D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x34F
2562	 34E	JUMP		 	 
- stack 0: 0x5D0
2563	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2564	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2565	 351	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
2566	 352	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
- stack 0: 0xE0
2567	 354	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x34F0002
2568	 355	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2569	 358	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2570	 359	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2571	 35B	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2572	 35C	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2573	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2574	 360	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2575	 362	ADD		 	 
- stack 0: 0x5D4
2576	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2577	 364	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
2578	 365	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
- stack 0: 0xF0
2579	 367	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x369
2580	 368	JUMP		 	 
- stack 0: 0x5D4
2581	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D4
2582	 36A	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2583	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x1
2584	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2585	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x1
2586	 374	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0xA0
2587	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2588	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2589	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x2
2590	 37E	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x1
2591	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x5D4
- stack 1: 0x1
- stack 0: 0x387
2592	 382	JUMPI		 	 
- stack 0: 0x5D4
2593	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x5D4
2594	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D4
- stack 0: 0x5D4
2595	 389	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
2596	 38A	PUSH1	E0	 	 
- stack 2: 0x5D4
- stack 1: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
- stack 0: 0xE0
2597	 38C	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x369FFE4
2598	 38D	PUSH2	FFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x369FFE4
- stack 0: 0xFFFF
2599	 390	AND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFE4
2600	 391	PUSH1	01	 	 
- stack 2: 0x5D4
- stack 1: 0xFFE4
- stack 0: 0x1
2601	 393	SIGNEXTEND		 	 
- stack 1: 0x5D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2602	 394	ADD		 	 
- stack 0: 0x5B8
2603	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5B8
- stack 0: 0xFFFFFFFF
2604	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5B8
2605	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2606	 39C	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4
2607	 39D	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x86F0100099FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4
- stack 0: 0xF0
2608	 39F	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x86
2609	 3A0	JUMP		 	 
- stack 0: 0x5B8
2610	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x5B8
2611	 87	PUSH4	ff010000	 	 
- stack 1: 0x5B8
- stack 0: 0xFF010000
2612	 8C	PUSH2	0020	 	 
- stack 2: 0x5B8
- stack 1: 0xFF010000
- stack 0: 0x20
2613	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x5B8
2614	 90	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2615	 92	ADD		 	 
- stack 0: 0x5BC
2616	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2617	 94	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
2618	 95	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
- stack 0: 0xF0
2619	 97	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99
2620	 98	JUMP		 	 
- stack 0: 0x5BC
2621	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5BC
2622	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2623	 9B	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
2624	 9C	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF0000B8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF
- stack 0: 0xE0
2625	 9E	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0x99FF00
2626	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0x99FF00
- stack 0: 0xFFFF
2627	 A2	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF00
2628	 A3	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00
- stack 0: 0x1
2629	 A5	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2630	 A6	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
2631	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
2632	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5BC
- stack 0: 0xFF00FF00
2633	 AB	PUSH2	0020	 	 
- stack 2: 0x5BC
- stack 1: 0xFF00FF00
- stack 0: 0x20
2634	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5BC
2635	 AF	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2636	 B1	ADD		 	 
- stack 0: 0x5C0
2637	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2638	 B3	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF0114000F
2639	 B4	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE4010100FF0114000F
- stack 0: 0xF0
2640	 B6	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0xB8
2641	 B7	JUMP		 	 
- stack 0: 0x5C0
2642	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x5C0
2643	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x5C0
- stack 0: 0xF0F1000
2644	 BE	PUSH2	0040	 	 
- stack 2: 0x5C0
- stack 1: 0xF0F1000
- stack 0: 0x40
2645	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C0
2646	 C2	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2647	 C4	ADD		 	 
- stack 0: 0x5C4
2648	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2649	 C6	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
2650	 C7	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
- stack 0: 0xF0
2651	 C9	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCB
2652	 CA	JUMP		 	 
- stack 0: 0x5C4
2653	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5C4
2654	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C4
- stack 0: 0x5C4
2655	 CD	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
2656	 CE	PUSH1	E0	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE4010100FF0114000F0133000C
- stack 0: 0xE0
2657	 D0	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0xCBFF0F
2658	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
2659	 D4	AND		 	 
- stack 1: 0x5C4
- stack 0: 0xFF0F
2660	 D5	PUSH1	01	 	 
- stack 2: 0x5C4
- stack 1: 0xFF0F
- stack 0: 0x1
2661	 D7	SIGNEXTEND		 	 
- stack 1: 0x5C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
2662	 D8	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
2663	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
2664	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5C4
- stack 0: 0xF0F0F0F
2665	 DD	PUSH2	0040	 	 
- stack 2: 0x5C4
- stack 1: 0xF0F0F0F
- stack 0: 0x40
2666	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5C4
2667	 E1	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2668	 E3	ADD		 	 
- stack 0: 0x5C8
2669	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2670	 E5	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0xEA000003300001034F00020369FFE4010100FF0114000F0133000C014D02EC
2671	 E6	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0xEA000003300001034F00020369FFE4010100FF0114000F0133000C014D02EC
- stack 0: 0xF0
2672	 E8	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0xEA
2673	 E9	JUMP		 	 
- stack 0: 0x5C8
2674	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x5C8
2675	 EB	PUSH2	0040	 	 
- stack 1: 0x5C8
- stack 0: 0x40
2676	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x5C8
- stack 0: 0xF0F0F0F
2677	 EF	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0x20
2678	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x5C8
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
2679	 F3	XOR		 	  ;; # XOR
- stack 1: 0x5C8
- stack 0: 0xF00FF00F
2680	 F4	PUSH2	0060	 	 
- stack 2: 0x5C8
- stack 1: 0xF00FF00F
- stack 0: 0x60
2681	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x5C8
2682	 F8	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2683	 FA	ADD		 	 
- stack 0: 0x5CC
2684	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2685	 FC	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
2686	 FD	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
- stack 0: 0xF0
2687	 FF	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x330
2688	 100	JUMP		 	 
- stack 0: 0x5CC
2689	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5CC
2690	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
2691	 332	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
2692	 333	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F0133000C014D02EC02F70000
- stack 0: 0xE0
2693	 335	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x3300001
2694	 336	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x3300001
- stack 0: 0xFFFF
2695	 339	AND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2696	 33A	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2697	 33C	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0x1
2698	 33D	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x80
2699	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x5CC
- stack 1: 0x1
- stack 0: 0x1
2700	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x5CC
- stack 0: 0x2
2701	 342	PUSH2	0080	 	 
- stack 2: 0x5CC
- stack 1: 0x2
- stack 0: 0x80
2702	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x5CC
2703	 346	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
2704	 348	ADD		 	 
- stack 0: 0x5D0
2705	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
2706	 34A	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
2707	 34B	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
- stack 0: 0xF0
2708	 34D	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x34F
2709	 34E	JUMP		 	 
- stack 0: 0x5D0
2710	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5D0
2711	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
2712	 351	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
2713	 352	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x34F00020369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF01
- stack 0: 0xE0
2714	 354	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x34F0002
2715	 355	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2716	 358	AND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2717	 359	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0x1
2718	 35B	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0x2
2719	 35C	PUSH2	00A0	 	 
- stack 2: 0x5D0
- stack 1: 0x2
- stack 0: 0xA0
2720	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x5D0
2721	 360	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
2722	 362	ADD		 	 
- stack 0: 0x5D4
2723	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
2724	 364	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
2725	 365	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x369FFE4010100FF0114000F0133000C014D02EC02F70000018FFF010099FFF0
- stack 0: 0xF0
2726	 367	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x369
2727	 368	JUMP		 	 
- stack 0: 0x5D4
2728	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x5D4
2729	 36A	PUSH2	0080	 	 
- stack 1: 0x5D4
- stack 0: 0x80
2730	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x5D4
- stack 0: 0x2
2731	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2732	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0x2
2733	 374	PUSH2	00A0	 	 
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0xA0
2734	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2735	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2736	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0x2
- stack 0: 0x2
2737	 37E	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
2738	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x387
2739	 382	JUMPI		 	 
- stack 0: 0x5D4
2740	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x5D4
- stack 0: 0x3A1
2741	 386	JUMP		 	 
- stack 0: 0x5D4
2742	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x5D4
2743	 3A2	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
2744	 3A4	ADD		 	 
- stack 0: 0x5D8
2745	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
2746	 3A6	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x10100FF0114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F
2747	 3A7	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x10100FF0114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F
- stack 0: 0xF0
2748	 3A9	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x101
2749	 3AA	JUMP		 	 
- stack 0: 0x5D8
2750	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x5D8
2751	 102	PUSH4	f00ff000	 	 
- stack 1: 0x5D8
- stack 0: 0xF00FF000
2752	 107	PUSH2	03A0	 	 
- stack 2: 0x5D8
- stack 1: 0xF00FF000
- stack 0: 0x3A0
2753	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x5D8
2754	 10B	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
2755	 10D	ADD		 	 
- stack 0: 0x5DC
2756	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
2757	 10F	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F0
2758	 110	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xF0
2759	 112	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x114
2760	 113	JUMP		 	 
- stack 0: 0x5DC
2761	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x5DC
2762	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
2763	 116	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F0
2764	 117	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x114000F0133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F0
- stack 0: 0xE0
2765	 119	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x114000F
2766	 11A	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x114000F
- stack 0: 0xFFFF
2767	 11D	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xF
2768	 11E	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x1
2769	 120	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xF
2770	 121	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0x3A0
2771	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x5DC
- stack 1: 0xF
- stack 0: 0xF00FF000
2772	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x5DC
- stack 0: 0xF00FF00F
2773	 126	PUSH2	03A0	 	 
- stack 2: 0x5DC
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2774	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x5DC
2775	 12A	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
2776	 12C	ADD		 	 
- stack 0: 0x5E0
2777	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
2778	 12E	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED0000
2779	 12F	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED0000
- stack 0: 0xF0
2780	 131	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x133
2781	 132	JUMP		 	 
- stack 0: 0x5E0
2782	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E0
2783	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
2784	 135	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED0000
2785	 136	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C014D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED0000
- stack 0: 0xE0
2786	 138	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x133000C
2787	 139	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x133000C
- stack 0: 0xFFFF
2788	 13C	AND		 	 
- stack 1: 0x5E0
- stack 0: 0xC
2789	 13D	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0xC
- stack 0: 0x1
2790	 13F	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0xC
2791	 140	PUSH2	0380	 	 
- stack 2: 0x5E0
- stack 1: 0xC
- stack 0: 0x380
2792	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E0
2793	 144	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
2794	 146	ADD		 	 
- stack 0: 0x5E4
2795	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
2796	 148	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x14D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA0000
2797	 149	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x14D02EC02F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA0000
- stack 0: 0xF0
2798	 14B	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x14D
2799	 14C	JUMP		 	 
- stack 0: 0x5E4
2800	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x5E4
2801	 14E	PUSH2	0060	 	 
- stack 1: 0x5E4
- stack 0: 0x60
2802	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x5E4
- stack 0: 0xF00FF00F
2803	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5E4
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2804	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5E4
- stack 0: 0xF00FF00F
2805	 158	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
2806	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x5E4
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2807	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5E4
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
2808	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5E4
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
2809	 162	SUB		 	 
- stack 1: 0x5E4
- stack 0: 0x0
2810	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x16B
2811	 166	JUMPI		 	 
- stack 0: 0x5E4
2812	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x5E4
- stack 0: 0x185
2813	 16A	JUMP		 	 
- stack 0: 0x5E4
2814	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x5E4
2815	 186	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
2816	 188	ADD		 	 
- stack 0: 0x5E8
2817	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
2818	 18A	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001
2819	 18B	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x2F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001
- stack 0: 0xF0
2820	 18D	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2F7
2821	 18E	JUMP		 	 
- stack 0: 0x5E8
2822	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x5E8
2823	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
2824	 2F9	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x2F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001
2825	 2FA	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x2F70000018FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001
- stack 0: 0xE0
2826	 2FC	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x2F70000
2827	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x2F70000
- stack 0: 0xFFFF
2828	 300	AND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2829	 301	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x1
2830	 303	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0x0
2831	 304	PUSH2	0080	 	 
- stack 2: 0x5E8
- stack 1: 0x0
- stack 0: 0x80
2832	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x5E8
2833	 308	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
2834	 30A	ADD		 	 
- stack 0: 0x5EC
2835	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
2836	 30C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001034F0002
2837	 30D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xF0
2838	 30F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x18F
2839	 310	JUMP		 	 
- stack 0: 0x5EC
2840	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5EC
2841	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5EC
- stack 0: 0xFF01000
2842	 195	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFF01000
- stack 0: 0x20
2843	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
2844	 199	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
2845	 19B	ADD		 	 
- stack 0: 0x5F0
2846	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
2847	 19D	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
2848	 19E	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xF0
2849	 1A0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
2850	 1A1	JUMP		 	 
- stack 0: 0x5F0
2851	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F0
2852	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
2853	 9B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
2854	 9C	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xE0
2855	 9E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF0
2856	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
2857	 A2	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFF0
2858	 A3	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFF0
- stack 0: 0x1
2859	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2860	 A6	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
2861	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2862	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xFF00FF0
2863	 AB	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF00FF0
- stack 0: 0x20
2864	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
2865	 AF	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
2866	 B1	ADD		 	 
- stack 0: 0x5F4
2867	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
2868	 B3	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFE001B5F010
2869	 B4	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFE001B5F010
- stack 0: 0xF0
2870	 B6	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A2
2871	 B7	JUMP		 	 
- stack 0: 0x5F4
2872	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F4
2873	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F4
- stack 0: 0xF0F0F000
2874	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
2875	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
2876	 1AC	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
2877	 1AE	ADD		 	 
- stack 0: 0x5F8
2878	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
2879	 1B0	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
2880	 1B1	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xF0
2881	 1B3	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB
2882	 1B4	JUMP		 	 
- stack 0: 0x5F8
2883	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5F8
2884	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
2885	 CD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
2886	 CE	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xE0
2887	 D0	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F0
2888	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
2889	 D4	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
2890	 D5	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x1
2891	 D7	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
2892	 D8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x40
2893	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
2894	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5F8
- stack 0: 0xF0F0F0F0
2895	 DD	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
2896	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
2897	 E1	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
2898	 E3	ADD		 	 
- stack 0: 0x5FC
2899	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
2900	 E5	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
2901	 E6	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
- stack 0: 0xF0
2902	 E8	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED
2903	 E9	JUMP		 	 
- stack 0: 0x5FC
2904	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
2905	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
2906	 3EF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
2907	 3F0	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
- stack 0: 0xE0
2908	 3F2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED0000
2909	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
2910	 3F6	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2911	 3F7	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
2912	 3F9	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
2913	 3FA	POP		 	 
- stack 0: 0x5FC
2914	 3FB	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
2915	 3FD	ADD		 	 
- stack 0: 0x600
2916	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
2917	 3FF	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xEA000003300001034F00020369FFE001B5F0100114FF000133000D014D02B4
2918	 400	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xEA000003300001034F00020369FFE001B5F0100114FF000133000D014D02B4
- stack 0: 0xF0
2919	 402	SHR		 	 
- stack 1: 0x600
- stack 0: 0xEA
2920	 403	JUMP		 	 
- stack 0: 0x600
2921	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x600
2922	 EB	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
2923	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0F0F0F0
2924	 EF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
2925	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
2926	 F3	XOR		 	  ;; # XOR
- stack 1: 0x600
- stack 0: 0xFF00FF00
2927	 F4	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xFF00FF00
- stack 0: 0x60
2928	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
2929	 F8	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
2930	 FA	ADD		 	 
- stack 0: 0x604
2931	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
2932	 FC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
2933	 FD	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
- stack 0: 0xF0
2934	 FF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x330
2935	 100	JUMP		 	 
- stack 0: 0x604
2936	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
2937	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
2938	 332	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
2939	 333	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
- stack 0: 0xE0
2940	 335	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3300001
2941	 336	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3300001
- stack 0: 0xFFFF
2942	 339	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
2943	 33A	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
2944	 33C	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
2945	 33D	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2946	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x0
2947	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x1
2948	 342	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
2949	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
2950	 346	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
2951	 348	ADD		 	 
- stack 0: 0x608
2952	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
2953	 34A	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
2954	 34B	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
- stack 0: 0xF0
2955	 34D	SHR		 	 
- stack 1: 0x608
- stack 0: 0x34F
2956	 34E	JUMP		 	 
- stack 0: 0x608
2957	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
2958	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
2959	 351	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
2960	 352	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
- stack 0: 0xE0
2961	 354	SHR		 	 
- stack 1: 0x608
- stack 0: 0x34F0002
2962	 355	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x34F0002
- stack 0: 0xFFFF
2963	 358	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
2964	 359	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
2965	 35B	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
2966	 35C	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
2967	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
2968	 360	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
2969	 362	ADD		 	 
- stack 0: 0x60C
2970	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
2971	 364	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
2972	 365	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
- stack 0: 0xF0
2973	 367	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x369
2974	 368	JUMP		 	 
- stack 0: 0x60C
2975	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x60C
2976	 36A	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
2977	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x1
2978	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2979	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x1
2980	 374	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0xA0
2981	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2982	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2983	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x2
2984	 37E	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x1
2985	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x60C
- stack 1: 0x1
- stack 0: 0x387
2986	 382	JUMPI		 	 
- stack 0: 0x60C
2987	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x60C
2988	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
2989	 389	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
2990	 38A	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
- stack 0: 0xE0
2991	 38C	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x369FFE0
2992	 38D	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x369FFE0
- stack 0: 0xFFFF
2993	 390	AND		 	 
- stack 1: 0x60C
- stack 0: 0xFFE0
2994	 391	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0xFFE0
- stack 0: 0x1
2995	 393	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
2996	 394	ADD		 	 
- stack 0: 0x5EC
2997	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x5EC
- stack 0: 0xFFFFFFFF
2998	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x5EC
2999	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3000	 39C	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x18FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001034F0002
3001	 39D	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x18FFF010099FFF001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xF0
3002	 39F	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x18F
3003	 3A0	JUMP		 	 
- stack 0: 0x5EC
3004	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x5EC
3005	 190	PUSH4	0ff01000	 	 
- stack 1: 0x5EC
- stack 0: 0xFF01000
3006	 195	PUSH2	0020	 	 
- stack 2: 0x5EC
- stack 1: 0xFF01000
- stack 0: 0x20
3007	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x5EC
3008	 199	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3009	 19B	ADD		 	 
- stack 0: 0x5F0
3010	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3011	 19D	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
3012	 19E	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xF0
3013	 1A0	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99
3014	 1A1	JUMP		 	 
- stack 0: 0x5F0
3015	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5F0
3016	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3017	 9B	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
3018	 9C	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF001A20F0F00CB00F003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xE0
3019	 9E	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x99FFF0
3020	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
3021	 A2	AND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFF0
3022	 A3	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0xFFF0
- stack 0: 0x1
3023	 A5	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3024	 A6	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
3025	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5F0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
3026	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5F0
- stack 0: 0xFF00FF0
3027	 AB	PUSH2	0020	 	 
- stack 2: 0x5F0
- stack 1: 0xFF00FF0
- stack 0: 0x20
3028	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5F0
3029	 AF	PUSH1	04	 	 
- stack 1: 0x5F0
- stack 0: 0x4
3030	 B1	ADD		 	 
- stack 0: 0x5F4
3031	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5F4
- stack 0: 0x5F4
3032	 B3	MLOAD		 	 
- stack 1: 0x5F4
- stack 0: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFE001B5F010
3033	 B4	PUSH1	F0	 	 
- stack 2: 0x5F4
- stack 1: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFE001B5F010
- stack 0: 0xF0
3034	 B6	SHR		 	 
- stack 1: 0x5F4
- stack 0: 0x1A2
3035	 B7	JUMP		 	 
- stack 0: 0x5F4
3036	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x5F4
3037	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x5F4
- stack 0: 0xF0F0F000
3038	 1A8	PUSH2	0040	 	 
- stack 2: 0x5F4
- stack 1: 0xF0F0F000
- stack 0: 0x40
3039	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F4
3040	 1AC	PUSH1	04	 	 
- stack 1: 0x5F4
- stack 0: 0x4
3041	 1AE	ADD		 	 
- stack 0: 0x5F8
3042	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x5F8
- stack 0: 0x5F8
3043	 1B0	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
3044	 1B1	PUSH1	F0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xF0
3045	 1B3	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB
3046	 1B4	JUMP		 	 
- stack 0: 0x5F8
3047	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x5F8
3048	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F8
- stack 0: 0x5F8
3049	 CD	MLOAD		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
3050	 CE	PUSH1	E0	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xE0
3051	 D0	SHR		 	 
- stack 1: 0x5F8
- stack 0: 0xCB00F0
3052	 D1	PUSH2	FFFF	 	 
- stack 2: 0x5F8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
3053	 D4	AND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
3054	 D5	PUSH1	01	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x1
3055	 D7	SIGNEXTEND		 	 
- stack 1: 0x5F8
- stack 0: 0xF0
3056	 D8	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0x40
3057	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x5F8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
3058	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x5F8
- stack 0: 0xF0F0F0F0
3059	 DD	PUSH2	0040	 	 
- stack 2: 0x5F8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
3060	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x5F8
3061	 E1	PUSH1	04	 	 
- stack 1: 0x5F8
- stack 0: 0x4
3062	 E3	ADD		 	 
- stack 0: 0x5FC
3063	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x5FC
- stack 0: 0x5FC
3064	 E5	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
3065	 E6	PUSH1	F0	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
- stack 0: 0xF0
3066	 E8	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED
3067	 E9	JUMP		 	 
- stack 0: 0x5FC
3068	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5FC
3069	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5FC
- stack 0: 0x5FC
3070	 3EF	MLOAD		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
3071	 3F0	PUSH1	E0	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF000133000D
- stack 0: 0xE0
3072	 3F2	SHR		 	 
- stack 1: 0x5FC
- stack 0: 0x3ED0000
3073	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x5FC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3074	 3F6	AND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3075	 3F7	PUSH1	01	 	 
- stack 2: 0x5FC
- stack 1: 0x0
- stack 0: 0x1
3076	 3F9	SIGNEXTEND		 	 
- stack 1: 0x5FC
- stack 0: 0x0
3077	 3FA	POP		 	 
- stack 0: 0x5FC
3078	 3FB	PUSH1	04	 	 
- stack 1: 0x5FC
- stack 0: 0x4
3079	 3FD	ADD		 	 
- stack 0: 0x600
3080	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x600
- stack 0: 0x600
3081	 3FF	MLOAD		 	 
- stack 1: 0x600
- stack 0: 0xEA000003300001034F00020369FFE001B5F0100114FF000133000D014D02B4
3082	 400	PUSH1	F0	 	 
- stack 2: 0x600
- stack 1: 0xEA000003300001034F00020369FFE001B5F0100114FF000133000D014D02B4
- stack 0: 0xF0
3083	 402	SHR		 	 
- stack 1: 0x600
- stack 0: 0xEA
3084	 403	JUMP		 	 
- stack 0: 0x600
3085	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x600
3086	 EB	PUSH2	0040	 	 
- stack 1: 0x600
- stack 0: 0x40
3087	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x600
- stack 0: 0xF0F0F0F0
3088	 EF	PUSH2	0020	 	 
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
3089	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x600
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
3090	 F3	XOR		 	  ;; # XOR
- stack 1: 0x600
- stack 0: 0xFF00FF00
3091	 F4	PUSH2	0060	 	 
- stack 2: 0x600
- stack 1: 0xFF00FF00
- stack 0: 0x60
3092	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x600
3093	 F8	PUSH1	04	 	 
- stack 1: 0x600
- stack 0: 0x4
3094	 FA	ADD		 	 
- stack 0: 0x604
3095	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x604
- stack 0: 0x604
3096	 FC	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
3097	 FD	PUSH1	F0	 	 
- stack 2: 0x604
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
- stack 0: 0xF0
3098	 FF	SHR		 	 
- stack 1: 0x604
- stack 0: 0x330
3099	 100	JUMP		 	 
- stack 0: 0x604
3100	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x604
3101	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x604
- stack 0: 0x604
3102	 332	MLOAD		 	 
- stack 1: 0x604
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
3103	 333	PUSH1	E0	 	 
- stack 2: 0x604
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF000133000D014D02B402F70000
- stack 0: 0xE0
3104	 335	SHR		 	 
- stack 1: 0x604
- stack 0: 0x3300001
3105	 336	PUSH2	FFFF	 	 
- stack 2: 0x604
- stack 1: 0x3300001
- stack 0: 0xFFFF
3106	 339	AND		 	 
- stack 1: 0x604
- stack 0: 0x1
3107	 33A	PUSH1	01	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3108	 33C	SIGNEXTEND		 	 
- stack 1: 0x604
- stack 0: 0x1
3109	 33D	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x80
3110	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x604
- stack 1: 0x1
- stack 0: 0x1
3111	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x604
- stack 0: 0x2
3112	 342	PUSH2	0080	 	 
- stack 2: 0x604
- stack 1: 0x2
- stack 0: 0x80
3113	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x604
3114	 346	PUSH1	04	 	 
- stack 1: 0x604
- stack 0: 0x4
3115	 348	ADD		 	 
- stack 0: 0x608
3116	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3117	 34A	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
3118	 34B	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
- stack 0: 0xF0
3119	 34D	SHR		 	 
- stack 1: 0x608
- stack 0: 0x34F
3120	 34E	JUMP		 	 
- stack 0: 0x608
3121	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x608
3122	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x608
- stack 0: 0x608
3123	 351	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
3124	 352	PUSH1	E0	 	 
- stack 2: 0x608
- stack 1: 0x34F00020369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0
- stack 0: 0xE0
3125	 354	SHR		 	 
- stack 1: 0x608
- stack 0: 0x34F0002
3126	 355	PUSH2	FFFF	 	 
- stack 2: 0x608
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3127	 358	AND		 	 
- stack 1: 0x608
- stack 0: 0x2
3128	 359	PUSH1	01	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0x1
3129	 35B	SIGNEXTEND		 	 
- stack 1: 0x608
- stack 0: 0x2
3130	 35C	PUSH2	00A0	 	 
- stack 2: 0x608
- stack 1: 0x2
- stack 0: 0xA0
3131	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x608
3132	 360	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3133	 362	ADD		 	 
- stack 0: 0x60C
3134	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3135	 364	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
3136	 365	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x369FFE001B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF
- stack 0: 0xF0
3137	 367	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x369
3138	 368	JUMP		 	 
- stack 0: 0x60C
3139	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x60C
3140	 36A	PUSH2	0080	 	 
- stack 1: 0x60C
- stack 0: 0x80
3141	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x60C
- stack 0: 0x2
3142	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3143	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x60C
- stack 0: 0x2
3144	 374	PUSH2	00A0	 	 
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0xA0
3145	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3146	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x60C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3147	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x60C
- stack 1: 0x2
- stack 0: 0x2
3148	 37E	SUB		 	 
- stack 1: 0x60C
- stack 0: 0x0
3149	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x60C
- stack 1: 0x0
- stack 0: 0x387
3150	 382	JUMPI		 	 
- stack 0: 0x60C
3151	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x60C
- stack 0: 0x3A1
3152	 386	JUMP		 	 
- stack 0: 0x60C
3153	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x60C
3154	 3A2	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3155	 3A4	ADD		 	 
- stack 0: 0x610
3156	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3157	 3A6	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x1B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F1
3158	 3A7	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x1B5F0100114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F1
- stack 0: 0xF0
3159	 3A9	SHR		 	 
- stack 1: 0x610
- stack 0: 0x1B5
3160	 3AA	JUMP		 	 
- stack 0: 0x610
3161	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x610
3162	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x610
- stack 0: 0xFF010000
3163	 1BB	PUSH2	03A0	 	 
- stack 2: 0x610
- stack 1: 0xFF010000
- stack 0: 0x3A0
3164	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x610
3165	 1BF	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3166	 1C1	ADD		 	 
- stack 0: 0x614
3167	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3168	 1C3	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F
3169	 1C4	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xF0
3170	 1C6	SHR		 	 
- stack 1: 0x614
- stack 0: 0x114
3171	 1C7	JUMP		 	 
- stack 0: 0x614
3172	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x614
3173	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x614
- stack 0: 0x614
3174	 116	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F
3175	 117	PUSH1	E0	 	 
- stack 2: 0x614
- stack 1: 0x114FF000133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F
- stack 0: 0xE0
3176	 119	SHR		 	 
- stack 1: 0x614
- stack 0: 0x114FF00
3177	 11A	PUSH2	FFFF	 	 
- stack 2: 0x614
- stack 1: 0x114FF00
- stack 0: 0xFFFF
3178	 11D	AND		 	 
- stack 1: 0x614
- stack 0: 0xFF00
3179	 11E	PUSH1	01	 	 
- stack 2: 0x614
- stack 1: 0xFF00
- stack 0: 0x1
3180	 120	SIGNEXTEND		 	 
- stack 1: 0x614
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3181	 121	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
3182	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x614
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3183	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x614
- stack 0: 0xFF00FF00
3184	 126	PUSH2	03A0	 	 
- stack 2: 0x614
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
3185	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x614
3186	 12A	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3187	 12C	ADD		 	 
- stack 0: 0x618
3188	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3189	 12E	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED0000
3190	 12F	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED0000
- stack 0: 0xF0
3191	 131	SHR		 	 
- stack 1: 0x618
- stack 0: 0x133
3192	 132	JUMP		 	 
- stack 0: 0x618
3193	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x618
3194	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x618
- stack 0: 0x618
3195	 135	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED0000
3196	 136	PUSH1	E0	 	 
- stack 2: 0x618
- stack 1: 0x133000D014D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED0000
- stack 0: 0xE0
3197	 138	SHR		 	 
- stack 1: 0x618
- stack 0: 0x133000D
3198	 139	PUSH2	FFFF	 	 
- stack 2: 0x618
- stack 1: 0x133000D
- stack 0: 0xFFFF
3199	 13C	AND		 	 
- stack 1: 0x618
- stack 0: 0xD
3200	 13D	PUSH1	01	 	 
- stack 2: 0x618
- stack 1: 0xD
- stack 0: 0x1
3201	 13F	SIGNEXTEND		 	 
- stack 1: 0x618
- stack 0: 0xD
3202	 140	PUSH2	0380	 	 
- stack 2: 0x618
- stack 1: 0xD
- stack 0: 0x380
3203	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x618
3204	 144	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3205	 146	ADD		 	 
- stack 0: 0x61C
3206	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3207	 148	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x14D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED0000
3208	 149	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x14D02B402F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED0000
- stack 0: 0xF0
3209	 14B	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x14D
3210	 14C	JUMP		 	 
- stack 0: 0x61C
3211	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x61C
3212	 14E	PUSH2	0060	 	 
- stack 1: 0x61C
- stack 0: 0x60
3213	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x61C
- stack 0: 0xFF00FF00
3214	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x61C
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
3215	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x61C
- stack 0: 0xFF00FF00
3216	 158	PUSH2	03A0	 	 
- stack 2: 0x61C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
3217	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x61C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
3218	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x61C
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
3219	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x61C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
3220	 162	SUB		 	 
- stack 1: 0x61C
- stack 0: 0x0
3221	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x16B
3222	 166	JUMPI		 	 
- stack 0: 0x61C
3223	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x61C
- stack 0: 0x185
3224	 16A	JUMP		 	 
- stack 0: 0x61C
3225	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x61C
3226	 186	PUSH1	04	 	 
- stack 1: 0x61C
- stack 0: 0x4
3227	 188	ADD		 	 
- stack 0: 0x620
3228	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x620
- stack 0: 0x620
3229	 18A	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA0000
3230	 18B	PUSH1	F0	 	 
- stack 2: 0x620
- stack 1: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA0000
- stack 0: 0xF0
3231	 18D	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2F7
3232	 18E	JUMP		 	 
- stack 0: 0x620
3233	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x620
3234	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x620
- stack 0: 0x620
3235	 2F9	MLOAD		 	 
- stack 1: 0x620
- stack 0: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA0000
3236	 2FA	PUSH1	E0	 	 
- stack 2: 0x620
- stack 1: 0x2F7000001C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA0000
- stack 0: 0xE0
3237	 2FC	SHR		 	 
- stack 1: 0x620
- stack 0: 0x2F70000
3238	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x620
- stack 1: 0x2F70000
- stack 0: 0xFFFF
3239	 300	AND		 	 
- stack 1: 0x620
- stack 0: 0x0
3240	 301	PUSH1	01	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x1
3241	 303	SIGNEXTEND		 	 
- stack 1: 0x620
- stack 0: 0x0
3242	 304	PUSH2	0080	 	 
- stack 2: 0x620
- stack 1: 0x0
- stack 0: 0x80
3243	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x620
3244	 308	PUSH1	04	 	 
- stack 1: 0x620
- stack 0: 0x4
3245	 30A	ADD		 	 
- stack 0: 0x624
3246	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3247	 30C	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001
3248	 30D	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001
- stack 0: 0xF0
3249	 30F	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1C8
3250	 310	JUMP		 	 
- stack 0: 0x624
3251	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x624
3252	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x624
- stack 0: 0xFF0000
3253	 1CE	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0xFF0000
- stack 0: 0x20
3254	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3255	 1D2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3256	 1D4	ADD		 	 
- stack 0: 0x628
3257	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3258	 1D6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
3259	 1D7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
- stack 0: 0xF0
3260	 1D9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x99
3261	 1DA	JUMP		 	 
- stack 0: 0x628
3262	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x628
3263	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3264	 9B	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
3265	 9C	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
- stack 0: 0xE0
3266	 9E	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9900FF
3267	 9F	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3268	 A2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3269	 A3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x1
3270	 A5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3271	 A6	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x20
3272	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0xFF0000
3273	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0xFF00FF
3274	 AB	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF00FF
- stack 0: 0x20
3275	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3276	 AF	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3277	 B1	ADD		 	 
- stack 0: 0x62C
3278	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3279	 B3	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xB8F0F100CBFF0F03ED000003ED000000EA000003300001034F00020369FFDC
3280	 B4	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xB8F0F100CBFF0F03ED000003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
3281	 B6	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xB8
3282	 B7	JUMP		 	 
- stack 0: 0x62C
3283	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x62C
3284	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x62C
- stack 0: 0xF0F1000
3285	 BE	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0xF0F1000
- stack 0: 0x40
3286	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3287	 C2	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3288	 C4	ADD		 	 
- stack 0: 0x630
3289	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3290	 C6	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
3291	 C7	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
3292	 C9	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCB
3293	 CA	JUMP		 	 
- stack 0: 0x630
3294	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x630
3295	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3296	 CD	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
3297	 CE	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
3298	 D0	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F
3299	 D1	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3300	 D4	AND		 	 
- stack 1: 0x630
- stack 0: 0xFF0F
3301	 D5	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFF0F
- stack 0: 0x1
3302	 D7	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3303	 D8	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3304	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3305	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x630
- stack 0: 0xF0F0F0F
3306	 DD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3307	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3308	 E1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3309	 E3	ADD		 	 
- stack 0: 0x634
3310	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3311	 E5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
3312	 E6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
3313	 E8	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3ED
3314	 E9	JUMP		 	 
- stack 0: 0x634
3315	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3316	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3317	 3EF	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
3318	 3F0	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xE0
3319	 3F2	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3ED0000
3320	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3321	 3F6	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3322	 3F7	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3323	 3F9	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3324	 3FA	POP		 	 
- stack 0: 0x634
3325	 3FB	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3326	 3FD	ADD		 	 
- stack 0: 0x638
3327	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3328	 3FF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
3329	 400	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
- stack 0: 0xF0
3330	 402	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3ED
3331	 403	JUMP		 	 
- stack 0: 0x638
3332	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3333	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3334	 3EF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
3335	 3F0	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
- stack 0: 0xE0
3336	 3F2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3ED0000
3337	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3338	 3F6	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3339	 3F7	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3340	 3F9	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3341	 3FA	POP		 	 
- stack 0: 0x638
3342	 3FB	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3343	 3FD	ADD		 	 
- stack 0: 0x63C
3344	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3345	 3FF	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF00133000E014D0278
3346	 400	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF00133000E014D0278
- stack 0: 0xF0
3347	 402	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xEA
3348	 403	JUMP		 	 
- stack 0: 0x63C
3349	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x63C
3350	 EB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
3351	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xF0F0F0F
3352	 EF	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3353	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3354	 F3	XOR		 	  ;; # XOR
- stack 1: 0x63C
- stack 0: 0xFF00FF0
3355	 F4	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0xFF00FF0
- stack 0: 0x60
3356	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3357	 F8	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3358	 FA	ADD		 	 
- stack 0: 0x640
3359	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3360	 FC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
3361	 FD	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
- stack 0: 0xF0
3362	 FF	SHR		 	 
- stack 1: 0x640
- stack 0: 0x330
3363	 100	JUMP		 	 
- stack 0: 0x640
3364	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3365	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3366	 332	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
3367	 333	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
- stack 0: 0xE0
3368	 335	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3300001
3369	 336	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3300001
- stack 0: 0xFFFF
3370	 339	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3371	 33A	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3372	 33C	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3373	 33D	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3374	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x0
3375	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x1
3376	 342	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3377	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3378	 346	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3379	 348	ADD		 	 
- stack 0: 0x644
3380	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3381	 34A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
3382	 34B	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
- stack 0: 0xF0
3383	 34D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x34F
3384	 34E	JUMP		 	 
- stack 0: 0x644
3385	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3386	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3387	 351	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
3388	 352	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
- stack 0: 0xE0
3389	 354	SHR		 	 
- stack 1: 0x644
- stack 0: 0x34F0002
3390	 355	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3391	 358	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3392	 359	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3393	 35B	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3394	 35C	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3395	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3396	 360	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3397	 362	ADD		 	 
- stack 0: 0x648
3398	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3399	 364	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
3400	 365	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
- stack 0: 0xF0
3401	 367	SHR		 	 
- stack 1: 0x648
- stack 0: 0x369
3402	 368	JUMP		 	 
- stack 0: 0x648
3403	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x648
3404	 36A	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3405	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x1
3406	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3407	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x1
3408	 374	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0xA0
3409	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3410	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3411	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x2
3412	 37E	SUB		 	 
- stack 1: 0x648
- stack 0: 0x1
3413	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x648
- stack 1: 0x1
- stack 0: 0x387
3414	 382	JUMPI		 	 
- stack 0: 0x648
3415	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x648
3416	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x648
- stack 0: 0x648
3417	 389	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
3418	 38A	PUSH1	E0	 	 
- stack 2: 0x648
- stack 1: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
- stack 0: 0xE0
3419	 38C	SHR		 	 
- stack 1: 0x648
- stack 0: 0x369FFDC
3420	 38D	PUSH2	FFFF	 	 
- stack 2: 0x648
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
3421	 390	AND		 	 
- stack 1: 0x648
- stack 0: 0xFFDC
3422	 391	PUSH1	01	 	 
- stack 2: 0x648
- stack 1: 0xFFDC
- stack 0: 0x1
3423	 393	SIGNEXTEND		 	 
- stack 1: 0x648
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
3424	 394	ADD		 	 
- stack 0: 0x624
3425	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x624
- stack 0: 0xFFFFFFFF
3426	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x624
3427	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x624
- stack 0: 0x624
3428	 39C	MLOAD		 	 
- stack 1: 0x624
- stack 0: 0x1C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001
3429	 39D	PUSH1	F0	 	 
- stack 2: 0x624
- stack 1: 0x1C80FF0009900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001
- stack 0: 0xF0
3430	 39F	SHR		 	 
- stack 1: 0x624
- stack 0: 0x1C8
3431	 3A0	JUMP		 	 
- stack 0: 0x624
3432	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x624
3433	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x624
- stack 0: 0xFF0000
3434	 1CE	PUSH2	0020	 	 
- stack 2: 0x624
- stack 1: 0xFF0000
- stack 0: 0x20
3435	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x624
3436	 1D2	PUSH1	04	 	 
- stack 1: 0x624
- stack 0: 0x4
3437	 1D4	ADD		 	 
- stack 0: 0x628
3438	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x628
- stack 0: 0x628
3439	 1D6	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
3440	 1D7	PUSH1	F0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
- stack 0: 0xF0
3441	 1D9	SHR		 	 
- stack 1: 0x628
- stack 0: 0x99
3442	 1DA	JUMP		 	 
- stack 0: 0x628
3443	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x628
3444	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x628
- stack 0: 0x628
3445	 9B	MLOAD		 	 
- stack 1: 0x628
- stack 0: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
3446	 9C	PUSH1	E0	 	 
- stack 2: 0x628
- stack 1: 0x9900FF00B8F0F100CBFF0F03ED000003ED000000EA000003300001034F0002
- stack 0: 0xE0
3447	 9E	SHR		 	 
- stack 1: 0x628
- stack 0: 0x9900FF
3448	 9F	PUSH2	FFFF	 	 
- stack 2: 0x628
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3449	 A2	AND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3450	 A3	PUSH1	01	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x1
3451	 A5	SIGNEXTEND		 	 
- stack 1: 0x628
- stack 0: 0xFF
3452	 A6	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0x20
3453	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x628
- stack 1: 0xFF
- stack 0: 0xFF0000
3454	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x628
- stack 0: 0xFF00FF
3455	 AB	PUSH2	0020	 	 
- stack 2: 0x628
- stack 1: 0xFF00FF
- stack 0: 0x20
3456	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x628
3457	 AF	PUSH1	04	 	 
- stack 1: 0x628
- stack 0: 0x4
3458	 B1	ADD		 	 
- stack 0: 0x62C
3459	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x62C
- stack 0: 0x62C
3460	 B3	MLOAD		 	 
- stack 1: 0x62C
- stack 0: 0xB8F0F100CBFF0F03ED000003ED000000EA000003300001034F00020369FFDC
3461	 B4	PUSH1	F0	 	 
- stack 2: 0x62C
- stack 1: 0xB8F0F100CBFF0F03ED000003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
3462	 B6	SHR		 	 
- stack 1: 0x62C
- stack 0: 0xB8
3463	 B7	JUMP		 	 
- stack 0: 0x62C
3464	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x62C
3465	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x62C
- stack 0: 0xF0F1000
3466	 BE	PUSH2	0040	 	 
- stack 2: 0x62C
- stack 1: 0xF0F1000
- stack 0: 0x40
3467	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x62C
3468	 C2	PUSH1	04	 	 
- stack 1: 0x62C
- stack 0: 0x4
3469	 C4	ADD		 	 
- stack 0: 0x630
3470	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x630
- stack 0: 0x630
3471	 C6	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
3472	 C7	PUSH1	F0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
3473	 C9	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCB
3474	 CA	JUMP		 	 
- stack 0: 0x630
3475	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x630
3476	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x630
- stack 0: 0x630
3477	 CD	MLOAD		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
3478	 CE	PUSH1	E0	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
3479	 D0	SHR		 	 
- stack 1: 0x630
- stack 0: 0xCBFF0F
3480	 D1	PUSH2	FFFF	 	 
- stack 2: 0x630
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3481	 D4	AND		 	 
- stack 1: 0x630
- stack 0: 0xFF0F
3482	 D5	PUSH1	01	 	 
- stack 2: 0x630
- stack 1: 0xFF0F
- stack 0: 0x1
3483	 D7	SIGNEXTEND		 	 
- stack 1: 0x630
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3484	 D8	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3485	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x630
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3486	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x630
- stack 0: 0xF0F0F0F
3487	 DD	PUSH2	0040	 	 
- stack 2: 0x630
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3488	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x630
3489	 E1	PUSH1	04	 	 
- stack 1: 0x630
- stack 0: 0x4
3490	 E3	ADD		 	 
- stack 0: 0x634
3491	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x634
- stack 0: 0x634
3492	 E5	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
3493	 E6	PUSH1	F0	 	 
- stack 2: 0x634
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
3494	 E8	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3ED
3495	 E9	JUMP		 	 
- stack 0: 0x634
3496	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x634
3497	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x634
- stack 0: 0x634
3498	 3EF	MLOAD		 	 
- stack 1: 0x634
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
3499	 3F0	PUSH1	E0	 	 
- stack 2: 0x634
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xE0
3500	 3F2	SHR		 	 
- stack 1: 0x634
- stack 0: 0x3ED0000
3501	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x634
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3502	 3F6	AND		 	 
- stack 1: 0x634
- stack 0: 0x0
3503	 3F7	PUSH1	01	 	 
- stack 2: 0x634
- stack 1: 0x0
- stack 0: 0x1
3504	 3F9	SIGNEXTEND		 	 
- stack 1: 0x634
- stack 0: 0x0
3505	 3FA	POP		 	 
- stack 0: 0x634
3506	 3FB	PUSH1	04	 	 
- stack 1: 0x634
- stack 0: 0x4
3507	 3FD	ADD		 	 
- stack 0: 0x638
3508	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x638
- stack 0: 0x638
3509	 3FF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
3510	 400	PUSH1	F0	 	 
- stack 2: 0x638
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
- stack 0: 0xF0
3511	 402	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3ED
3512	 403	JUMP		 	 
- stack 0: 0x638
3513	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x638
3514	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x638
- stack 0: 0x638
3515	 3EF	MLOAD		 	 
- stack 1: 0x638
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
3516	 3F0	PUSH1	E0	 	 
- stack 2: 0x638
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF00133000E
- stack 0: 0xE0
3517	 3F2	SHR		 	 
- stack 1: 0x638
- stack 0: 0x3ED0000
3518	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x638
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3519	 3F6	AND		 	 
- stack 1: 0x638
- stack 0: 0x0
3520	 3F7	PUSH1	01	 	 
- stack 2: 0x638
- stack 1: 0x0
- stack 0: 0x1
3521	 3F9	SIGNEXTEND		 	 
- stack 1: 0x638
- stack 0: 0x0
3522	 3FA	POP		 	 
- stack 0: 0x638
3523	 3FB	PUSH1	04	 	 
- stack 1: 0x638
- stack 0: 0x4
3524	 3FD	ADD		 	 
- stack 0: 0x63C
3525	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x63C
- stack 0: 0x63C
3526	 3FF	MLOAD		 	 
- stack 1: 0x63C
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF00133000E014D0278
3527	 400	PUSH1	F0	 	 
- stack 2: 0x63C
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF00133000E014D0278
- stack 0: 0xF0
3528	 402	SHR		 	 
- stack 1: 0x63C
- stack 0: 0xEA
3529	 403	JUMP		 	 
- stack 0: 0x63C
3530	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x63C
3531	 EB	PUSH2	0040	 	 
- stack 1: 0x63C
- stack 0: 0x40
3532	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x63C
- stack 0: 0xF0F0F0F
3533	 EF	PUSH2	0020	 	 
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3534	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x63C
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
3535	 F3	XOR		 	  ;; # XOR
- stack 1: 0x63C
- stack 0: 0xFF00FF0
3536	 F4	PUSH2	0060	 	 
- stack 2: 0x63C
- stack 1: 0xFF00FF0
- stack 0: 0x60
3537	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x63C
3538	 F8	PUSH1	04	 	 
- stack 1: 0x63C
- stack 0: 0x4
3539	 FA	ADD		 	 
- stack 0: 0x640
3540	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x640
- stack 0: 0x640
3541	 FC	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
3542	 FD	PUSH1	F0	 	 
- stack 2: 0x640
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
- stack 0: 0xF0
3543	 FF	SHR		 	 
- stack 1: 0x640
- stack 0: 0x330
3544	 100	JUMP		 	 
- stack 0: 0x640
3545	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x640
3546	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x640
- stack 0: 0x640
3547	 332	MLOAD		 	 
- stack 1: 0x640
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
3548	 333	PUSH1	E0	 	 
- stack 2: 0x640
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF00133000E014D027802F70000
- stack 0: 0xE0
3549	 335	SHR		 	 
- stack 1: 0x640
- stack 0: 0x3300001
3550	 336	PUSH2	FFFF	 	 
- stack 2: 0x640
- stack 1: 0x3300001
- stack 0: 0xFFFF
3551	 339	AND		 	 
- stack 1: 0x640
- stack 0: 0x1
3552	 33A	PUSH1	01	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3553	 33C	SIGNEXTEND		 	 
- stack 1: 0x640
- stack 0: 0x1
3554	 33D	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x80
3555	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x640
- stack 1: 0x1
- stack 0: 0x1
3556	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x640
- stack 0: 0x2
3557	 342	PUSH2	0080	 	 
- stack 2: 0x640
- stack 1: 0x2
- stack 0: 0x80
3558	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x640
3559	 346	PUSH1	04	 	 
- stack 1: 0x640
- stack 0: 0x4
3560	 348	ADD		 	 
- stack 0: 0x644
3561	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x644
- stack 0: 0x644
3562	 34A	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
3563	 34B	PUSH1	F0	 	 
- stack 2: 0x644
- stack 1: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
- stack 0: 0xF0
3564	 34D	SHR		 	 
- stack 1: 0x644
- stack 0: 0x34F
3565	 34E	JUMP		 	 
- stack 0: 0x644
3566	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x644
3567	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x644
- stack 0: 0x644
3568	 351	MLOAD		 	 
- stack 1: 0x644
- stack 0: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
3569	 352	PUSH1	E0	 	 
- stack 2: 0x644
- stack 1: 0x34F00020369FFDC01DBFF010114FFF00133000E014D027802F700000086F010
- stack 0: 0xE0
3570	 354	SHR		 	 
- stack 1: 0x644
- stack 0: 0x34F0002
3571	 355	PUSH2	FFFF	 	 
- stack 2: 0x644
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3572	 358	AND		 	 
- stack 1: 0x644
- stack 0: 0x2
3573	 359	PUSH1	01	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0x1
3574	 35B	SIGNEXTEND		 	 
- stack 1: 0x644
- stack 0: 0x2
3575	 35C	PUSH2	00A0	 	 
- stack 2: 0x644
- stack 1: 0x2
- stack 0: 0xA0
3576	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x644
3577	 360	PUSH1	04	 	 
- stack 1: 0x644
- stack 0: 0x4
3578	 362	ADD		 	 
- stack 0: 0x648
3579	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x648
- stack 0: 0x648
3580	 364	MLOAD		 	 
- stack 1: 0x648
- stack 0: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
3581	 365	PUSH1	F0	 	 
- stack 2: 0x648
- stack 1: 0x369FFDC01DBFF010114FFF00133000E014D027802F700000086F0100099FF00
- stack 0: 0xF0
3582	 367	SHR		 	 
- stack 1: 0x648
- stack 0: 0x369
3583	 368	JUMP		 	 
- stack 0: 0x648
3584	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x648
3585	 36A	PUSH2	0080	 	 
- stack 1: 0x648
- stack 0: 0x80
3586	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x648
- stack 0: 0x2
3587	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3588	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x648
- stack 0: 0x2
3589	 374	PUSH2	00A0	 	 
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0xA0
3590	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3591	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x648
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3592	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x648
- stack 1: 0x2
- stack 0: 0x2
3593	 37E	SUB		 	 
- stack 1: 0x648
- stack 0: 0x0
3594	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x648
- stack 1: 0x0
- stack 0: 0x387
3595	 382	JUMPI		 	 
- stack 0: 0x648
3596	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x648
- stack 0: 0x3A1
3597	 386	JUMP		 	 
- stack 0: 0x648
3598	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x648
3599	 3A2	PUSH1	04	 	 
- stack 1: 0x648
- stack 0: 0x4
3600	 3A4	ADD		 	 
- stack 0: 0x64C
3601	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x64C
- stack 0: 0x64C
3602	 3A6	MLOAD		 	 
- stack 1: 0x64C
- stack 0: 0x1DBFF010114FFF00133000E014D027802F700000086F0100099FF0003ED0000
3603	 3A7	PUSH1	F0	 	 
- stack 2: 0x64C
- stack 1: 0x1DBFF010114FFF00133000E014D027802F700000086F0100099FF0003ED0000
- stack 0: 0xF0
3604	 3A9	SHR		 	 
- stack 1: 0x64C
- stack 0: 0x1DB
3605	 3AA	JUMP		 	 
- stack 0: 0x64C
3606	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x64C
3607	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x64C
- stack 0: 0xFF01000
3608	 1E1	PUSH2	03A0	 	 
- stack 2: 0x64C
- stack 1: 0xFF01000
- stack 0: 0x3A0
3609	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x64C
3610	 1E5	PUSH1	04	 	 
- stack 1: 0x64C
- stack 0: 0x4
3611	 1E7	ADD		 	 
- stack 0: 0x650
3612	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x650
- stack 0: 0x650
3613	 1E9	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x114FFF00133000E014D027802F700000086F0100099FF0003ED000000B8F0F1
3614	 1EA	PUSH1	F0	 	 
- stack 2: 0x650
- stack 1: 0x114FFF00133000E014D027802F700000086F0100099FF0003ED000000B8F0F1
- stack 0: 0xF0
3615	 1EC	SHR		 	 
- stack 1: 0x650
- stack 0: 0x114
3616	 1ED	JUMP		 	 
- stack 0: 0x650
3617	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x650
3618	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x650
- stack 0: 0x650
3619	 116	MLOAD		 	 
- stack 1: 0x650
- stack 0: 0x114FFF00133000E014D027802F700000086F0100099FF0003ED000000B8F0F1
3620	 117	PUSH1	E0	 	 
- stack 2: 0x650
- stack 1: 0x114FFF00133000E014D027802F700000086F0100099FF0003ED000000B8F0F1
- stack 0: 0xE0
3621	 119	SHR		 	 
- stack 1: 0x650
- stack 0: 0x114FFF0
3622	 11A	PUSH2	FFFF	 	 
- stack 2: 0x650
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
3623	 11D	AND		 	 
- stack 1: 0x650
- stack 0: 0xFFF0
3624	 11E	PUSH1	01	 	 
- stack 2: 0x650
- stack 1: 0xFFF0
- stack 0: 0x1
3625	 120	SIGNEXTEND		 	 
- stack 1: 0x650
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
3626	 121	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
3627	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x650
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
3628	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x650
- stack 0: 0xFF00FF0
3629	 126	PUSH2	03A0	 	 
- stack 2: 0x650
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
3630	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x650
3631	 12A	PUSH1	04	 	 
- stack 1: 0x650
- stack 0: 0x4
3632	 12C	ADD		 	 
- stack 0: 0x654
3633	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x654
- stack 0: 0x654
3634	 12E	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x133000E014D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F
3635	 12F	PUSH1	F0	 	 
- stack 2: 0x654
- stack 1: 0x133000E014D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F
- stack 0: 0xF0
3636	 131	SHR		 	 
- stack 1: 0x654
- stack 0: 0x133
3637	 132	JUMP		 	 
- stack 0: 0x654
3638	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x654
3639	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x654
- stack 0: 0x654
3640	 135	MLOAD		 	 
- stack 1: 0x654
- stack 0: 0x133000E014D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F
3641	 136	PUSH1	E0	 	 
- stack 2: 0x654
- stack 1: 0x133000E014D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F
- stack 0: 0xE0
3642	 138	SHR		 	 
- stack 1: 0x654
- stack 0: 0x133000E
3643	 139	PUSH2	FFFF	 	 
- stack 2: 0x654
- stack 1: 0x133000E
- stack 0: 0xFFFF
3644	 13C	AND		 	 
- stack 1: 0x654
- stack 0: 0xE
3645	 13D	PUSH1	01	 	 
- stack 2: 0x654
- stack 1: 0xE
- stack 0: 0x1
3646	 13F	SIGNEXTEND		 	 
- stack 1: 0x654
- stack 0: 0xE
3647	 140	PUSH2	0380	 	 
- stack 2: 0x654
- stack 1: 0xE
- stack 0: 0x380
3648	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x654
3649	 144	PUSH1	04	 	 
- stack 1: 0x654
- stack 0: 0x4
3650	 146	ADD		 	 
- stack 0: 0x658
3651	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x658
- stack 0: 0x658
3652	 148	MLOAD		 	 
- stack 1: 0x658
- stack 0: 0x14D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA0000
3653	 149	PUSH1	F0	 	 
- stack 2: 0x658
- stack 1: 0x14D027802F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
3654	 14B	SHR		 	 
- stack 1: 0x658
- stack 0: 0x14D
3655	 14C	JUMP		 	 
- stack 0: 0x658
3656	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x658
3657	 14E	PUSH2	0060	 	 
- stack 1: 0x658
- stack 0: 0x60
3658	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x658
- stack 0: 0xFF00FF0
3659	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x658
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
3660	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x658
- stack 0: 0xFF00FF0
3661	 158	PUSH2	03A0	 	 
- stack 2: 0x658
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
3662	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x658
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
3663	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x658
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
3664	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x658
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
3665	 162	SUB		 	 
- stack 1: 0x658
- stack 0: 0x0
3666	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x658
- stack 1: 0x0
- stack 0: 0x16B
3667	 166	JUMPI		 	 
- stack 0: 0x658
3668	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x658
- stack 0: 0x185
3669	 16A	JUMP		 	 
- stack 0: 0x658
3670	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x658
3671	 186	PUSH1	04	 	 
- stack 1: 0x658
- stack 0: 0x4
3672	 188	ADD		 	 
- stack 0: 0x65C
3673	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x65C
- stack 0: 0x65C
3674	 18A	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001
3675	 18B	PUSH1	F0	 	 
- stack 2: 0x65C
- stack 1: 0x2F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001
- stack 0: 0xF0
3676	 18D	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2F7
3677	 18E	JUMP		 	 
- stack 0: 0x65C
3678	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x65C
3679	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x65C
- stack 0: 0x65C
3680	 2F9	MLOAD		 	 
- stack 1: 0x65C
- stack 0: 0x2F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001
3681	 2FA	PUSH1	E0	 	 
- stack 2: 0x65C
- stack 1: 0x2F700000086F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001
- stack 0: 0xE0
3682	 2FC	SHR		 	 
- stack 1: 0x65C
- stack 0: 0x2F70000
3683	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x65C
- stack 1: 0x2F70000
- stack 0: 0xFFFF
3684	 300	AND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3685	 301	PUSH1	01	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x1
3686	 303	SIGNEXTEND		 	 
- stack 1: 0x65C
- stack 0: 0x0
3687	 304	PUSH2	0080	 	 
- stack 2: 0x65C
- stack 1: 0x0
- stack 0: 0x80
3688	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x65C
3689	 308	PUSH1	04	 	 
- stack 1: 0x65C
- stack 0: 0x4
3690	 30A	ADD		 	 
- stack 0: 0x660
3691	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3692	 30C	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001034F0002
3693	 30D	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xF0
3694	 30F	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3695	 310	JUMP		 	 
- stack 0: 0x660
3696	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x660
3697	 87	PUSH4	ff010000	 	 
- stack 1: 0x660
- stack 0: 0xFF010000
3698	 8C	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFF010000
- stack 0: 0x20
3699	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3700	 90	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3701	 92	ADD		 	 
- stack 0: 0x664
3702	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3703	 94	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
3704	 95	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
- stack 0: 0xF0
3705	 97	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99
3706	 98	JUMP		 	 
- stack 0: 0x664
3707	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x664
3708	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3709	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
3710	 9C	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
- stack 0: 0xE0
3711	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99FF00
3712	 9F	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3713	 A2	AND		 	 
- stack 1: 0x664
- stack 0: 0xFF00
3714	 A3	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFF00
- stack 0: 0x1
3715	 A5	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3716	 A6	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3717	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3718	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x664
- stack 0: 0xFF00FF00
3719	 AB	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF00FF00
- stack 0: 0x20
3720	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3721	 AF	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3722	 B1	ADD		 	 
- stack 0: 0x668
3723	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3724	 B3	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
3725	 B4	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
3726	 B6	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3ED
3727	 B7	JUMP		 	 
- stack 0: 0x668
3728	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
3729	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3730	 3EF	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
3731	 3F0	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
- stack 0: 0xE0
3732	 3F2	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3ED0000
3733	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3734	 3F6	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
3735	 3F7	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
3736	 3F9	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
3737	 3FA	POP		 	 
- stack 0: 0x668
3738	 3FB	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3739	 3FD	ADD		 	 
- stack 0: 0x66C
3740	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3741	 3FF	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF0114000F
3742	 400	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
3743	 402	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xB8
3744	 403	JUMP		 	 
- stack 0: 0x66C
3745	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x66C
3746	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x66C
- stack 0: 0xF0F1000
3747	 BE	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xF0F1000
- stack 0: 0x40
3748	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3749	 C2	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3750	 C4	ADD		 	 
- stack 0: 0x670
3751	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3752	 C6	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
3753	 C7	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
- stack 0: 0xF0
3754	 C9	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCB
3755	 CA	JUMP		 	 
- stack 0: 0x670
3756	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x670
3757	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3758	 CD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
3759	 CE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
- stack 0: 0xE0
3760	 D0	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F
3761	 D1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3762	 D4	AND		 	 
- stack 1: 0x670
- stack 0: 0xFF0F
3763	 D5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFF0F
- stack 0: 0x1
3764	 D7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3765	 D8	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3766	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3767	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x670
- stack 0: 0xF0F0F0F
3768	 DD	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3769	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3770	 E1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3771	 E3	ADD		 	 
- stack 0: 0x674
3772	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3773	 E5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEA000003300001034F00020369FFE0010100FF0114000F0133000F014D0240
3774	 E6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xEA000003300001034F00020369FFE0010100FF0114000F0133000F014D0240
- stack 0: 0xF0
3775	 E8	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEA
3776	 E9	JUMP		 	 
- stack 0: 0x674
3777	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x674
3778	 EB	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
3779	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3780	 EF	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3781	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3782	 F3	XOR		 	  ;; # XOR
- stack 1: 0x674
- stack 0: 0xF00FF00F
3783	 F4	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xF00FF00F
- stack 0: 0x60
3784	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
3785	 F8	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3786	 FA	ADD		 	 
- stack 0: 0x678
3787	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3788	 FC	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
3789	 FD	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
- stack 0: 0xF0
3790	 FF	SHR		 	 
- stack 1: 0x678
- stack 0: 0x330
3791	 100	JUMP		 	 
- stack 0: 0x678
3792	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x678
3793	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3794	 332	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
3795	 333	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
- stack 0: 0xE0
3796	 335	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3300001
3797	 336	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3300001
- stack 0: 0xFFFF
3798	 339	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3799	 33A	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3800	 33C	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3801	 33D	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3802	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x0
3803	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x678
- stack 0: 0x1
3804	 342	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3805	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x678
3806	 346	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3807	 348	ADD		 	 
- stack 0: 0x67C
3808	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3809	 34A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
3810	 34B	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
- stack 0: 0xF0
3811	 34D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x34F
3812	 34E	JUMP		 	 
- stack 0: 0x67C
3813	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x67C
3814	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3815	 351	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
3816	 352	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
- stack 0: 0xE0
3817	 354	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x34F0002
3818	 355	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3819	 358	AND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3820	 359	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x1
3821	 35B	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3822	 35C	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xA0
3823	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x67C
3824	 360	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3825	 362	ADD		 	 
- stack 0: 0x680
3826	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3827	 364	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
3828	 365	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
- stack 0: 0xF0
3829	 367	SHR		 	 
- stack 1: 0x680
- stack 0: 0x369
3830	 368	JUMP		 	 
- stack 0: 0x680
3831	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x680
3832	 36A	PUSH2	0080	 	 
- stack 1: 0x680
- stack 0: 0x80
3833	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x680
- stack 0: 0x1
3834	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
3835	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x1
3836	 374	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0xA0
3837	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x2
3838	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3839	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x2
3840	 37E	SUB		 	 
- stack 1: 0x680
- stack 0: 0x1
3841	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x680
- stack 1: 0x1
- stack 0: 0x387
3842	 382	JUMPI		 	 
- stack 0: 0x680
3843	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x680
3844	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x680
- stack 0: 0x680
3845	 389	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
3846	 38A	PUSH1	E0	 	 
- stack 2: 0x680
- stack 1: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
- stack 0: 0xE0
3847	 38C	SHR		 	 
- stack 1: 0x680
- stack 0: 0x369FFE0
3848	 38D	PUSH2	FFFF	 	 
- stack 2: 0x680
- stack 1: 0x369FFE0
- stack 0: 0xFFFF
3849	 390	AND		 	 
- stack 1: 0x680
- stack 0: 0xFFE0
3850	 391	PUSH1	01	 	 
- stack 2: 0x680
- stack 1: 0xFFE0
- stack 0: 0x1
3851	 393	SIGNEXTEND		 	 
- stack 1: 0x680
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
3852	 394	ADD		 	 
- stack 0: 0x660
3853	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x660
- stack 0: 0xFFFFFFFF
3854	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x660
3855	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x660
- stack 0: 0x660
3856	 39C	MLOAD		 	 
- stack 1: 0x660
- stack 0: 0x86F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001034F0002
3857	 39D	PUSH1	F0	 	 
- stack 2: 0x660
- stack 1: 0x86F0100099FF0003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xF0
3858	 39F	SHR		 	 
- stack 1: 0x660
- stack 0: 0x86
3859	 3A0	JUMP		 	 
- stack 0: 0x660
3860	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x660
3861	 87	PUSH4	ff010000	 	 
- stack 1: 0x660
- stack 0: 0xFF010000
3862	 8C	PUSH2	0020	 	 
- stack 2: 0x660
- stack 1: 0xFF010000
- stack 0: 0x20
3863	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x660
3864	 90	PUSH1	04	 	 
- stack 1: 0x660
- stack 0: 0x4
3865	 92	ADD		 	 
- stack 0: 0x664
3866	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x664
- stack 0: 0x664
3867	 94	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
3868	 95	PUSH1	F0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
- stack 0: 0xF0
3869	 97	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99
3870	 98	JUMP		 	 
- stack 0: 0x664
3871	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x664
3872	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x664
- stack 0: 0x664
3873	 9B	MLOAD		 	 
- stack 1: 0x664
- stack 0: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
3874	 9C	PUSH1	E0	 	 
- stack 2: 0x664
- stack 1: 0x99FF0003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0
- stack 0: 0xE0
3875	 9E	SHR		 	 
- stack 1: 0x664
- stack 0: 0x99FF00
3876	 9F	PUSH2	FFFF	 	 
- stack 2: 0x664
- stack 1: 0x99FF00
- stack 0: 0xFFFF
3877	 A2	AND		 	 
- stack 1: 0x664
- stack 0: 0xFF00
3878	 A3	PUSH1	01	 	 
- stack 2: 0x664
- stack 1: 0xFF00
- stack 0: 0x1
3879	 A5	SIGNEXTEND		 	 
- stack 1: 0x664
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
3880	 A6	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
3881	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x664
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
3882	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x664
- stack 0: 0xFF00FF00
3883	 AB	PUSH2	0020	 	 
- stack 2: 0x664
- stack 1: 0xFF00FF00
- stack 0: 0x20
3884	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x664
3885	 AF	PUSH1	04	 	 
- stack 1: 0x664
- stack 0: 0x4
3886	 B1	ADD		 	 
- stack 0: 0x668
3887	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x668
- stack 0: 0x668
3888	 B3	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
3889	 B4	PUSH1	F0	 	 
- stack 2: 0x668
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
3890	 B6	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3ED
3891	 B7	JUMP		 	 
- stack 0: 0x668
3892	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x668
3893	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x668
- stack 0: 0x668
3894	 3EF	MLOAD		 	 
- stack 1: 0x668
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
3895	 3F0	PUSH1	E0	 	 
- stack 2: 0x668
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF
- stack 0: 0xE0
3896	 3F2	SHR		 	 
- stack 1: 0x668
- stack 0: 0x3ED0000
3897	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x668
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
3898	 3F6	AND		 	 
- stack 1: 0x668
- stack 0: 0x0
3899	 3F7	PUSH1	01	 	 
- stack 2: 0x668
- stack 1: 0x0
- stack 0: 0x1
3900	 3F9	SIGNEXTEND		 	 
- stack 1: 0x668
- stack 0: 0x0
3901	 3FA	POP		 	 
- stack 0: 0x668
3902	 3FB	PUSH1	04	 	 
- stack 1: 0x668
- stack 0: 0x4
3903	 3FD	ADD		 	 
- stack 0: 0x66C
3904	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x66C
- stack 0: 0x66C
3905	 3FF	MLOAD		 	 
- stack 1: 0x66C
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF0114000F
3906	 400	PUSH1	F0	 	 
- stack 2: 0x66C
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
3907	 402	SHR		 	 
- stack 1: 0x66C
- stack 0: 0xB8
3908	 403	JUMP		 	 
- stack 0: 0x66C
3909	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x66C
3910	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x66C
- stack 0: 0xF0F1000
3911	 BE	PUSH2	0040	 	 
- stack 2: 0x66C
- stack 1: 0xF0F1000
- stack 0: 0x40
3912	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x66C
3913	 C2	PUSH1	04	 	 
- stack 1: 0x66C
- stack 0: 0x4
3914	 C4	ADD		 	 
- stack 0: 0x670
3915	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x670
- stack 0: 0x670
3916	 C6	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
3917	 C7	PUSH1	F0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
- stack 0: 0xF0
3918	 C9	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCB
3919	 CA	JUMP		 	 
- stack 0: 0x670
3920	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x670
3921	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x670
- stack 0: 0x670
3922	 CD	MLOAD		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
3923	 CE	PUSH1	E0	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFE0010100FF0114000F0133000F
- stack 0: 0xE0
3924	 D0	SHR		 	 
- stack 1: 0x670
- stack 0: 0xCBFF0F
3925	 D1	PUSH2	FFFF	 	 
- stack 2: 0x670
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
3926	 D4	AND		 	 
- stack 1: 0x670
- stack 0: 0xFF0F
3927	 D5	PUSH1	01	 	 
- stack 2: 0x670
- stack 1: 0xFF0F
- stack 0: 0x1
3928	 D7	SIGNEXTEND		 	 
- stack 1: 0x670
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
3929	 D8	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
3930	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x670
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
3931	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x670
- stack 0: 0xF0F0F0F
3932	 DD	PUSH2	0040	 	 
- stack 2: 0x670
- stack 1: 0xF0F0F0F
- stack 0: 0x40
3933	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x670
3934	 E1	PUSH1	04	 	 
- stack 1: 0x670
- stack 0: 0x4
3935	 E3	ADD		 	 
- stack 0: 0x674
3936	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x674
- stack 0: 0x674
3937	 E5	MLOAD		 	 
- stack 1: 0x674
- stack 0: 0xEA000003300001034F00020369FFE0010100FF0114000F0133000F014D0240
3938	 E6	PUSH1	F0	 	 
- stack 2: 0x674
- stack 1: 0xEA000003300001034F00020369FFE0010100FF0114000F0133000F014D0240
- stack 0: 0xF0
3939	 E8	SHR		 	 
- stack 1: 0x674
- stack 0: 0xEA
3940	 E9	JUMP		 	 
- stack 0: 0x674
3941	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x674
3942	 EB	PUSH2	0040	 	 
- stack 1: 0x674
- stack 0: 0x40
3943	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x674
- stack 0: 0xF0F0F0F
3944	 EF	PUSH2	0020	 	 
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0x20
3945	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x674
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
3946	 F3	XOR		 	  ;; # XOR
- stack 1: 0x674
- stack 0: 0xF00FF00F
3947	 F4	PUSH2	0060	 	 
- stack 2: 0x674
- stack 1: 0xF00FF00F
- stack 0: 0x60
3948	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x674
3949	 F8	PUSH1	04	 	 
- stack 1: 0x674
- stack 0: 0x4
3950	 FA	ADD		 	 
- stack 0: 0x678
3951	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x678
- stack 0: 0x678
3952	 FC	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
3953	 FD	PUSH1	F0	 	 
- stack 2: 0x678
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
- stack 0: 0xF0
3954	 FF	SHR		 	 
- stack 1: 0x678
- stack 0: 0x330
3955	 100	JUMP		 	 
- stack 0: 0x678
3956	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x678
3957	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x678
- stack 0: 0x678
3958	 332	MLOAD		 	 
- stack 1: 0x678
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
3959	 333	PUSH1	E0	 	 
- stack 2: 0x678
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F0133000F014D024002F70000
- stack 0: 0xE0
3960	 335	SHR		 	 
- stack 1: 0x678
- stack 0: 0x3300001
3961	 336	PUSH2	FFFF	 	 
- stack 2: 0x678
- stack 1: 0x3300001
- stack 0: 0xFFFF
3962	 339	AND		 	 
- stack 1: 0x678
- stack 0: 0x1
3963	 33A	PUSH1	01	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3964	 33C	SIGNEXTEND		 	 
- stack 1: 0x678
- stack 0: 0x1
3965	 33D	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x80
3966	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x678
- stack 1: 0x1
- stack 0: 0x1
3967	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x678
- stack 0: 0x2
3968	 342	PUSH2	0080	 	 
- stack 2: 0x678
- stack 1: 0x2
- stack 0: 0x80
3969	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x678
3970	 346	PUSH1	04	 	 
- stack 1: 0x678
- stack 0: 0x4
3971	 348	ADD		 	 
- stack 0: 0x67C
3972	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x67C
- stack 0: 0x67C
3973	 34A	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
3974	 34B	PUSH1	F0	 	 
- stack 2: 0x67C
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
- stack 0: 0xF0
3975	 34D	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x34F
3976	 34E	JUMP		 	 
- stack 0: 0x67C
3977	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x67C
3978	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x67C
- stack 0: 0x67C
3979	 351	MLOAD		 	 
- stack 1: 0x67C
- stack 0: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
3980	 352	PUSH1	E0	 	 
- stack 2: 0x67C
- stack 1: 0x34F00020369FFE0010100FF0114000F0133000F014D024002F70000018FFF01
- stack 0: 0xE0
3981	 354	SHR		 	 
- stack 1: 0x67C
- stack 0: 0x34F0002
3982	 355	PUSH2	FFFF	 	 
- stack 2: 0x67C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
3983	 358	AND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3984	 359	PUSH1	01	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0x1
3985	 35B	SIGNEXTEND		 	 
- stack 1: 0x67C
- stack 0: 0x2
3986	 35C	PUSH2	00A0	 	 
- stack 2: 0x67C
- stack 1: 0x2
- stack 0: 0xA0
3987	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x67C
3988	 360	PUSH1	04	 	 
- stack 1: 0x67C
- stack 0: 0x4
3989	 362	ADD		 	 
- stack 0: 0x680
3990	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x680
- stack 0: 0x680
3991	 364	MLOAD		 	 
- stack 1: 0x680
- stack 0: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
3992	 365	PUSH1	F0	 	 
- stack 2: 0x680
- stack 1: 0x369FFE0010100FF0114000F0133000F014D024002F70000018FFF010099FFF0
- stack 0: 0xF0
3993	 367	SHR		 	 
- stack 1: 0x680
- stack 0: 0x369
3994	 368	JUMP		 	 
- stack 0: 0x680
3995	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x680
3996	 36A	PUSH2	0080	 	 
- stack 1: 0x680
- stack 0: 0x80
3997	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x680
- stack 0: 0x2
3998	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
3999	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x680
- stack 0: 0x2
4000	 374	PUSH2	00A0	 	 
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0xA0
4001	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
4002	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x680
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4003	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x680
- stack 1: 0x2
- stack 0: 0x2
4004	 37E	SUB		 	 
- stack 1: 0x680
- stack 0: 0x0
4005	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x680
- stack 1: 0x0
- stack 0: 0x387
4006	 382	JUMPI		 	 
- stack 0: 0x680
4007	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x680
- stack 0: 0x3A1
4008	 386	JUMP		 	 
- stack 0: 0x680
4009	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x680
4010	 3A2	PUSH1	04	 	 
- stack 1: 0x680
- stack 0: 0x4
4011	 3A4	ADD		 	 
- stack 0: 0x684
4012	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x684
- stack 0: 0x684
4013	 3A6	MLOAD		 	 
- stack 1: 0x684
- stack 0: 0x10100FF0114000F0133000F014D024002F70000018FFF010099FFF003ED0000
4014	 3A7	PUSH1	F0	 	 
- stack 2: 0x684
- stack 1: 0x10100FF0114000F0133000F014D024002F70000018FFF010099FFF003ED0000
- stack 0: 0xF0
4015	 3A9	SHR		 	 
- stack 1: 0x684
- stack 0: 0x101
4016	 3AA	JUMP		 	 
- stack 0: 0x684
4017	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x684
4018	 102	PUSH4	f00ff000	 	 
- stack 1: 0x684
- stack 0: 0xF00FF000
4019	 107	PUSH2	03A0	 	 
- stack 2: 0x684
- stack 1: 0xF00FF000
- stack 0: 0x3A0
4020	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x684
4021	 10B	PUSH1	04	 	 
- stack 1: 0x684
- stack 0: 0x4
4022	 10D	ADD		 	 
- stack 0: 0x688
4023	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x688
- stack 0: 0x688
4024	 10F	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x114000F0133000F014D024002F70000018FFF010099FFF003ED000001A20F0F
4025	 110	PUSH1	F0	 	 
- stack 2: 0x688
- stack 1: 0x114000F0133000F014D024002F70000018FFF010099FFF003ED000001A20F0F
- stack 0: 0xF0
4026	 112	SHR		 	 
- stack 1: 0x688
- stack 0: 0x114
4027	 113	JUMP		 	 
- stack 0: 0x688
4028	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x688
4029	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x688
- stack 0: 0x688
4030	 116	MLOAD		 	 
- stack 1: 0x688
- stack 0: 0x114000F0133000F014D024002F70000018FFF010099FFF003ED000001A20F0F
4031	 117	PUSH1	E0	 	 
- stack 2: 0x688
- stack 1: 0x114000F0133000F014D024002F70000018FFF010099FFF003ED000001A20F0F
- stack 0: 0xE0
4032	 119	SHR		 	 
- stack 1: 0x688
- stack 0: 0x114000F
4033	 11A	PUSH2	FFFF	 	 
- stack 2: 0x688
- stack 1: 0x114000F
- stack 0: 0xFFFF
4034	 11D	AND		 	 
- stack 1: 0x688
- stack 0: 0xF
4035	 11E	PUSH1	01	 	 
- stack 2: 0x688
- stack 1: 0xF
- stack 0: 0x1
4036	 120	SIGNEXTEND		 	 
- stack 1: 0x688
- stack 0: 0xF
4037	 121	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xF
- stack 0: 0x3A0
4038	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x688
- stack 1: 0xF
- stack 0: 0xF00FF000
4039	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x688
- stack 0: 0xF00FF00F
4040	 126	PUSH2	03A0	 	 
- stack 2: 0x688
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
4041	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x688
4042	 12A	PUSH1	04	 	 
- stack 1: 0x688
- stack 0: 0x4
4043	 12C	ADD		 	 
- stack 0: 0x68C
4044	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x68C
- stack 0: 0x68C
4045	 12E	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x133000F014D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F0
4046	 12F	PUSH1	F0	 	 
- stack 2: 0x68C
- stack 1: 0x133000F014D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F0
- stack 0: 0xF0
4047	 131	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x133
4048	 132	JUMP		 	 
- stack 0: 0x68C
4049	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x68C
4050	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x68C
- stack 0: 0x68C
4051	 135	MLOAD		 	 
- stack 1: 0x68C
- stack 0: 0x133000F014D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F0
4052	 136	PUSH1	E0	 	 
- stack 2: 0x68C
- stack 1: 0x133000F014D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F0
- stack 0: 0xE0
4053	 138	SHR		 	 
- stack 1: 0x68C
- stack 0: 0x133000F
4054	 139	PUSH2	FFFF	 	 
- stack 2: 0x68C
- stack 1: 0x133000F
- stack 0: 0xFFFF
4055	 13C	AND		 	 
- stack 1: 0x68C
- stack 0: 0xF
4056	 13D	PUSH1	01	 	 
- stack 2: 0x68C
- stack 1: 0xF
- stack 0: 0x1
4057	 13F	SIGNEXTEND		 	 
- stack 1: 0x68C
- stack 0: 0xF
4058	 140	PUSH2	0380	 	 
- stack 2: 0x68C
- stack 1: 0xF
- stack 0: 0x380
4059	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x68C
4060	 144	PUSH1	04	 	 
- stack 1: 0x68C
- stack 0: 0x4
4061	 146	ADD		 	 
- stack 0: 0x690
4062	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x690
- stack 0: 0x690
4063	 148	MLOAD		 	 
- stack 1: 0x690
- stack 0: 0x14D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED0000
4064	 149	PUSH1	F0	 	 
- stack 2: 0x690
- stack 1: 0x14D024002F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED0000
- stack 0: 0xF0
4065	 14B	SHR		 	 
- stack 1: 0x690
- stack 0: 0x14D
4066	 14C	JUMP		 	 
- stack 0: 0x690
4067	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x690
4068	 14E	PUSH2	0060	 	 
- stack 1: 0x690
- stack 0: 0x60
4069	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x690
- stack 0: 0xF00FF00F
4070	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x690
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
4071	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x690
- stack 0: 0xF00FF00F
4072	 158	PUSH2	03A0	 	 
- stack 2: 0x690
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
4073	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x690
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
4074	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x690
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
4075	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x690
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
4076	 162	SUB		 	 
- stack 1: 0x690
- stack 0: 0x0
4077	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x690
- stack 1: 0x0
- stack 0: 0x16B
4078	 166	JUMPI		 	 
- stack 0: 0x690
4079	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x690
- stack 0: 0x185
4080	 16A	JUMP		 	 
- stack 0: 0x690
4081	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x690
4082	 186	PUSH1	04	 	 
- stack 1: 0x690
- stack 0: 0x4
4083	 188	ADD		 	 
- stack 0: 0x694
4084	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x694
- stack 0: 0x694
4085	 18A	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x2F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA0000
4086	 18B	PUSH1	F0	 	 
- stack 2: 0x694
- stack 1: 0x2F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA0000
- stack 0: 0xF0
4087	 18D	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2F7
4088	 18E	JUMP		 	 
- stack 0: 0x694
4089	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x694
4090	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x694
- stack 0: 0x694
4091	 2F9	MLOAD		 	 
- stack 1: 0x694
- stack 0: 0x2F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA0000
4092	 2FA	PUSH1	E0	 	 
- stack 2: 0x694
- stack 1: 0x2F70000018FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA0000
- stack 0: 0xE0
4093	 2FC	SHR		 	 
- stack 1: 0x694
- stack 0: 0x2F70000
4094	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x694
- stack 1: 0x2F70000
- stack 0: 0xFFFF
4095	 300	AND		 	 
- stack 1: 0x694
- stack 0: 0x0
4096	 301	PUSH1	01	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x1
4097	 303	SIGNEXTEND		 	 
- stack 1: 0x694
- stack 0: 0x0
4098	 304	PUSH2	0080	 	 
- stack 2: 0x694
- stack 1: 0x0
- stack 0: 0x80
4099	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x694
4100	 308	PUSH1	04	 	 
- stack 1: 0x694
- stack 0: 0x4
4101	 30A	ADD		 	 
- stack 0: 0x698
4102	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4103	 30C	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA000003300001
4104	 30D	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA000003300001
- stack 0: 0xF0
4105	 30F	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4106	 310	JUMP		 	 
- stack 0: 0x698
4107	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x698
4108	 190	PUSH4	0ff01000	 	 
- stack 1: 0x698
- stack 0: 0xFF01000
4109	 195	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFF01000
- stack 0: 0x20
4110	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4111	 199	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4112	 19B	ADD		 	 
- stack 0: 0x69C
4113	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4114	 19D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
4115	 19E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xF0
4116	 1A0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99
4117	 1A1	JUMP		 	 
- stack 0: 0x69C
4118	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x69C
4119	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4120	 9B	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
4121	 9C	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xE0
4122	 9E	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF0
4123	 9F	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4124	 A2	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFF0
4125	 A3	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFF0
- stack 0: 0x1
4126	 A5	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4127	 A6	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4128	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4129	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFF00FF0
4130	 AB	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF00FF0
- stack 0: 0x20
4131	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4132	 AF	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4133	 B1	ADD		 	 
- stack 0: 0x6A0
4134	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4135	 B3	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
4136	 B4	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
4137	 B6	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED
4138	 B7	JUMP		 	 
- stack 0: 0x6A0
4139	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4140	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4141	 3EF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
4142	 3F0	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xE0
4143	 3F2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED0000
4144	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4145	 3F6	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4146	 3F7	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4147	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4148	 3FA	POP		 	 
- stack 0: 0x6A0
4149	 3FB	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4150	 3FD	ADD		 	 
- stack 0: 0x6A4
4151	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4152	 3FF	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC01B5F010
4153	 400	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
4154	 402	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1A2
4155	 403	JUMP		 	 
- stack 0: 0x6A4
4156	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A4
4157	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A4
- stack 0: 0xF0F0F000
4158	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0xF0F0F000
- stack 0: 0x40
4159	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4160	 1AC	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4161	 1AE	ADD		 	 
- stack 0: 0x6A8
4162	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4163	 1B0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
4164	 1B1	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
4165	 1B3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB
4166	 1B4	JUMP		 	 
- stack 0: 0x6A8
4167	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6A8
4168	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4169	 CD	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
4170	 CE	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xE0
4171	 D0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F0
4172	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4173	 D4	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4174	 D5	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x1
4175	 D7	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4176	 D8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x40
4177	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4178	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0xF0F0F0F0
4179	 DD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4180	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4181	 E1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4182	 E3	ADD		 	 
- stack 0: 0x6AC
4183	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4184	 E5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
4185	 E6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
- stack 0: 0xF0
4186	 E8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED
4187	 E9	JUMP		 	 
- stack 0: 0x6AC
4188	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4189	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4190	 3EF	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
4191	 3F0	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
- stack 0: 0xE0
4192	 3F2	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED0000
4193	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4194	 3F6	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4195	 3F7	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4196	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4197	 3FA	POP		 	 
- stack 0: 0x6AC
4198	 3FB	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4199	 3FD	ADD		 	 
- stack 0: 0x6B0
4200	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4201	 3FF	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330010014D0204
4202	 400	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330010014D0204
- stack 0: 0xF0
4203	 402	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xEA
4204	 403	JUMP		 	 
- stack 0: 0x6B0
4205	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x6B0
4206	 EB	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4207	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0xF0F0F0F0
4208	 EF	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4209	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4210	 F3	XOR		 	  ;; # XOR
- stack 1: 0x6B0
- stack 0: 0xFF00FF00
4211	 F4	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xFF00FF00
- stack 0: 0x60
4212	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
4213	 F8	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4214	 FA	ADD		 	 
- stack 0: 0x6B4
4215	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4216	 FC	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
4217	 FD	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
- stack 0: 0xF0
4218	 FF	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x330
4219	 100	JUMP		 	 
- stack 0: 0x6B4
4220	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B4
4221	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4222	 332	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
4223	 333	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
- stack 0: 0xE0
4224	 335	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001
4225	 336	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001
- stack 0: 0xFFFF
4226	 339	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4227	 33A	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4228	 33C	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4229	 33D	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4230	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x0
4231	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B4
- stack 0: 0x1
4232	 342	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4233	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4234	 346	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4235	 348	ADD		 	 
- stack 0: 0x6B8
4236	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4237	 34A	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
4238	 34B	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
- stack 0: 0xF0
4239	 34D	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x34F
4240	 34E	JUMP		 	 
- stack 0: 0x6B8
4241	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B8
4242	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4243	 351	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
4244	 352	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
- stack 0: 0xE0
4245	 354	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x34F0002
4246	 355	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x34F0002
- stack 0: 0xFFFF
4247	 358	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4248	 359	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x1
4249	 35B	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4250	 35C	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xA0
4251	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B8
4252	 360	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4253	 362	ADD		 	 
- stack 0: 0x6BC
4254	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4255	 364	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
4256	 365	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
- stack 0: 0xF0
4257	 367	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x369
4258	 368	JUMP		 	 
- stack 0: 0x6BC
4259	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6BC
4260	 36A	PUSH2	0080	 	 
- stack 1: 0x6BC
- stack 0: 0x80
4261	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x6BC
- stack 0: 0x1
4262	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4263	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6BC
- stack 0: 0x1
4264	 374	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0xA0
4265	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4266	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6BC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4267	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x2
4268	 37E	SUB		 	 
- stack 1: 0x6BC
- stack 0: 0x1
4269	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x6BC
- stack 1: 0x1
- stack 0: 0x387
4270	 382	JUMPI		 	 
- stack 0: 0x6BC
4271	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x6BC
4272	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6BC
- stack 0: 0x6BC
4273	 389	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
4274	 38A	PUSH1	E0	 	 
- stack 2: 0x6BC
- stack 1: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
- stack 0: 0xE0
4275	 38C	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x369FFDC
4276	 38D	PUSH2	FFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
4277	 390	AND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFDC
4278	 391	PUSH1	01	 	 
- stack 2: 0x6BC
- stack 1: 0xFFDC
- stack 0: 0x1
4279	 393	SIGNEXTEND		 	 
- stack 1: 0x6BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4280	 394	ADD		 	 
- stack 0: 0x698
4281	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x698
- stack 0: 0xFFFFFFFF
4282	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x698
4283	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x698
- stack 0: 0x698
4284	 39C	MLOAD		 	 
- stack 1: 0x698
- stack 0: 0x18FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA000003300001
4285	 39D	PUSH1	F0	 	 
- stack 2: 0x698
- stack 1: 0x18FFF010099FFF003ED000001A20F0F00CB00F003ED000000EA000003300001
- stack 0: 0xF0
4286	 39F	SHR		 	 
- stack 1: 0x698
- stack 0: 0x18F
4287	 3A0	JUMP		 	 
- stack 0: 0x698
4288	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x698
4289	 190	PUSH4	0ff01000	 	 
- stack 1: 0x698
- stack 0: 0xFF01000
4290	 195	PUSH2	0020	 	 
- stack 2: 0x698
- stack 1: 0xFF01000
- stack 0: 0x20
4291	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x698
4292	 199	PUSH1	04	 	 
- stack 1: 0x698
- stack 0: 0x4
4293	 19B	ADD		 	 
- stack 0: 0x69C
4294	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x69C
- stack 0: 0x69C
4295	 19D	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
4296	 19E	PUSH1	F0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xF0
4297	 1A0	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99
4298	 1A1	JUMP		 	 
- stack 0: 0x69C
4299	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x69C
4300	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x69C
- stack 0: 0x69C
4301	 9B	MLOAD		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
4302	 9C	PUSH1	E0	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF003ED000001A20F0F00CB00F003ED000000EA000003300001034F0002
- stack 0: 0xE0
4303	 9E	SHR		 	 
- stack 1: 0x69C
- stack 0: 0x99FFF0
4304	 9F	PUSH2	FFFF	 	 
- stack 2: 0x69C
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
4305	 A2	AND		 	 
- stack 1: 0x69C
- stack 0: 0xFFF0
4306	 A3	PUSH1	01	 	 
- stack 2: 0x69C
- stack 1: 0xFFF0
- stack 0: 0x1
4307	 A5	SIGNEXTEND		 	 
- stack 1: 0x69C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4308	 A6	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
4309	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x69C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4310	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x69C
- stack 0: 0xFF00FF0
4311	 AB	PUSH2	0020	 	 
- stack 2: 0x69C
- stack 1: 0xFF00FF0
- stack 0: 0x20
4312	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x69C
4313	 AF	PUSH1	04	 	 
- stack 1: 0x69C
- stack 0: 0x4
4314	 B1	ADD		 	 
- stack 0: 0x6A0
4315	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6A0
- stack 0: 0x6A0
4316	 B3	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
4317	 B4	PUSH1	F0	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
4318	 B6	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED
4319	 B7	JUMP		 	 
- stack 0: 0x6A0
4320	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6A0
4321	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A0
- stack 0: 0x6A0
4322	 3EF	MLOAD		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
4323	 3F0	PUSH1	E0	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED000001A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xE0
4324	 3F2	SHR		 	 
- stack 1: 0x6A0
- stack 0: 0x3ED0000
4325	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6A0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4326	 3F6	AND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4327	 3F7	PUSH1	01	 	 
- stack 2: 0x6A0
- stack 1: 0x0
- stack 0: 0x1
4328	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6A0
- stack 0: 0x0
4329	 3FA	POP		 	 
- stack 0: 0x6A0
4330	 3FB	PUSH1	04	 	 
- stack 1: 0x6A0
- stack 0: 0x4
4331	 3FD	ADD		 	 
- stack 0: 0x6A4
4332	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6A4
- stack 0: 0x6A4
4333	 3FF	MLOAD		 	 
- stack 1: 0x6A4
- stack 0: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC01B5F010
4334	 400	PUSH1	F0	 	 
- stack 2: 0x6A4
- stack 1: 0x1A20F0F00CB00F003ED000000EA000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
4335	 402	SHR		 	 
- stack 1: 0x6A4
- stack 0: 0x1A2
4336	 403	JUMP		 	 
- stack 0: 0x6A4
4337	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x6A4
4338	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x6A4
- stack 0: 0xF0F0F000
4339	 1A8	PUSH2	0040	 	 
- stack 2: 0x6A4
- stack 1: 0xF0F0F000
- stack 0: 0x40
4340	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A4
4341	 1AC	PUSH1	04	 	 
- stack 1: 0x6A4
- stack 0: 0x4
4342	 1AE	ADD		 	 
- stack 0: 0x6A8
4343	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x6A8
- stack 0: 0x6A8
4344	 1B0	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
4345	 1B1	PUSH1	F0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
4346	 1B3	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB
4347	 1B4	JUMP		 	 
- stack 0: 0x6A8
4348	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6A8
4349	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6A8
- stack 0: 0x6A8
4350	 CD	MLOAD		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
4351	 CE	PUSH1	E0	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xE0
4352	 D0	SHR		 	 
- stack 1: 0x6A8
- stack 0: 0xCB00F0
4353	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6A8
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
4354	 D4	AND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4355	 D5	PUSH1	01	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x1
4356	 D7	SIGNEXTEND		 	 
- stack 1: 0x6A8
- stack 0: 0xF0
4357	 D8	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0x40
4358	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6A8
- stack 1: 0xF0
- stack 0: 0xF0F0F000
4359	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6A8
- stack 0: 0xF0F0F0F0
4360	 DD	PUSH2	0040	 	 
- stack 2: 0x6A8
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
4361	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6A8
4362	 E1	PUSH1	04	 	 
- stack 1: 0x6A8
- stack 0: 0x4
4363	 E3	ADD		 	 
- stack 0: 0x6AC
4364	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6AC
- stack 0: 0x6AC
4365	 E5	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
4366	 E6	PUSH1	F0	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
- stack 0: 0xF0
4367	 E8	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED
4368	 E9	JUMP		 	 
- stack 0: 0x6AC
4369	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6AC
4370	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6AC
- stack 0: 0x6AC
4371	 3EF	MLOAD		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
4372	 3F0	PUSH1	E0	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330010
- stack 0: 0xE0
4373	 3F2	SHR		 	 
- stack 1: 0x6AC
- stack 0: 0x3ED0000
4374	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6AC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4375	 3F6	AND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4376	 3F7	PUSH1	01	 	 
- stack 2: 0x6AC
- stack 1: 0x0
- stack 0: 0x1
4377	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6AC
- stack 0: 0x0
4378	 3FA	POP		 	 
- stack 0: 0x6AC
4379	 3FB	PUSH1	04	 	 
- stack 1: 0x6AC
- stack 0: 0x4
4380	 3FD	ADD		 	 
- stack 0: 0x6B0
4381	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6B0
- stack 0: 0x6B0
4382	 3FF	MLOAD		 	 
- stack 1: 0x6B0
- stack 0: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330010014D0204
4383	 400	PUSH1	F0	 	 
- stack 2: 0x6B0
- stack 1: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330010014D0204
- stack 0: 0xF0
4384	 402	SHR		 	 
- stack 1: 0x6B0
- stack 0: 0xEA
4385	 403	JUMP		 	 
- stack 0: 0x6B0
4386	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x6B0
4387	 EB	PUSH2	0040	 	 
- stack 1: 0x6B0
- stack 0: 0x40
4388	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6B0
- stack 0: 0xF0F0F0F0
4389	 EF	PUSH2	0020	 	 
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
4390	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6B0
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
4391	 F3	XOR		 	  ;; # XOR
- stack 1: 0x6B0
- stack 0: 0xFF00FF00
4392	 F4	PUSH2	0060	 	 
- stack 2: 0x6B0
- stack 1: 0xFF00FF00
- stack 0: 0x60
4393	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6B0
4394	 F8	PUSH1	04	 	 
- stack 1: 0x6B0
- stack 0: 0x4
4395	 FA	ADD		 	 
- stack 0: 0x6B4
4396	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6B4
- stack 0: 0x6B4
4397	 FC	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
4398	 FD	PUSH1	F0	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
- stack 0: 0xF0
4399	 FF	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x330
4400	 100	JUMP		 	 
- stack 0: 0x6B4
4401	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6B4
4402	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B4
- stack 0: 0x6B4
4403	 332	MLOAD		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
4404	 333	PUSH1	E0	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330010014D020402F70000
- stack 0: 0xE0
4405	 335	SHR		 	 
- stack 1: 0x6B4
- stack 0: 0x3300001
4406	 336	PUSH2	FFFF	 	 
- stack 2: 0x6B4
- stack 1: 0x3300001
- stack 0: 0xFFFF
4407	 339	AND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4408	 33A	PUSH1	01	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4409	 33C	SIGNEXTEND		 	 
- stack 1: 0x6B4
- stack 0: 0x1
4410	 33D	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x80
4411	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x6B4
- stack 1: 0x1
- stack 0: 0x1
4412	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x6B4
- stack 0: 0x2
4413	 342	PUSH2	0080	 	 
- stack 2: 0x6B4
- stack 1: 0x2
- stack 0: 0x80
4414	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x6B4
4415	 346	PUSH1	04	 	 
- stack 1: 0x6B4
- stack 0: 0x4
4416	 348	ADD		 	 
- stack 0: 0x6B8
4417	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6B8
- stack 0: 0x6B8
4418	 34A	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
4419	 34B	PUSH1	F0	 	 
- stack 2: 0x6B8
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
- stack 0: 0xF0
4420	 34D	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x34F
4421	 34E	JUMP		 	 
- stack 0: 0x6B8
4422	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6B8
4423	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6B8
- stack 0: 0x6B8
4424	 351	MLOAD		 	 
- stack 1: 0x6B8
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
4425	 352	PUSH1	E0	 	 
- stack 2: 0x6B8
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0
- stack 0: 0xE0
4426	 354	SHR		 	 
- stack 1: 0x6B8
- stack 0: 0x34F0002
4427	 355	PUSH2	FFFF	 	 
- stack 2: 0x6B8
- stack 1: 0x34F0002
- stack 0: 0xFFFF
4428	 358	AND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4429	 359	PUSH1	01	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0x1
4430	 35B	SIGNEXTEND		 	 
- stack 1: 0x6B8
- stack 0: 0x2
4431	 35C	PUSH2	00A0	 	 
- stack 2: 0x6B8
- stack 1: 0x2
- stack 0: 0xA0
4432	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x6B8
4433	 360	PUSH1	04	 	 
- stack 1: 0x6B8
- stack 0: 0x4
4434	 362	ADD		 	 
- stack 0: 0x6BC
4435	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x6BC
- stack 0: 0x6BC
4436	 364	MLOAD		 	 
- stack 1: 0x6BC
- stack 0: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
4437	 365	PUSH1	F0	 	 
- stack 2: 0x6BC
- stack 1: 0x369FFDC01B5F0100114FF0001330010014D020402F7000001C80FF0009900FF
- stack 0: 0xF0
4438	 367	SHR		 	 
- stack 1: 0x6BC
- stack 0: 0x369
4439	 368	JUMP		 	 
- stack 0: 0x6BC
4440	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6BC
4441	 36A	PUSH2	0080	 	 
- stack 1: 0x6BC
- stack 0: 0x80
4442	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x6BC
- stack 0: 0x2
4443	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4444	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6BC
- stack 0: 0x2
4445	 374	PUSH2	00A0	 	 
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0xA0
4446	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x2
4447	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6BC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4448	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6BC
- stack 1: 0x2
- stack 0: 0x2
4449	 37E	SUB		 	 
- stack 1: 0x6BC
- stack 0: 0x0
4450	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x6BC
- stack 1: 0x0
- stack 0: 0x387
4451	 382	JUMPI		 	 
- stack 0: 0x6BC
4452	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x6BC
- stack 0: 0x3A1
4453	 386	JUMP		 	 
- stack 0: 0x6BC
4454	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x6BC
4455	 3A2	PUSH1	04	 	 
- stack 1: 0x6BC
- stack 0: 0x4
4456	 3A4	ADD		 	 
- stack 0: 0x6C0
4457	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x6C0
- stack 0: 0x6C0
4458	 3A6	MLOAD		 	 
- stack 1: 0x6C0
- stack 0: 0x1B5F0100114FF0001330010014D020402F7000001C80FF0009900FF03ED0000
4459	 3A7	PUSH1	F0	 	 
- stack 2: 0x6C0
- stack 1: 0x1B5F0100114FF0001330010014D020402F7000001C80FF0009900FF03ED0000
- stack 0: 0xF0
4460	 3A9	SHR		 	 
- stack 1: 0x6C0
- stack 0: 0x1B5
4461	 3AA	JUMP		 	 
- stack 0: 0x6C0
4462	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x6C0
4463	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x6C0
- stack 0: 0xFF010000
4464	 1BB	PUSH2	03A0	 	 
- stack 2: 0x6C0
- stack 1: 0xFF010000
- stack 0: 0x3A0
4465	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C0
4466	 1BF	PUSH1	04	 	 
- stack 1: 0x6C0
- stack 0: 0x4
4467	 1C1	ADD		 	 
- stack 0: 0x6C4
4468	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x6C4
- stack 0: 0x6C4
4469	 1C3	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x114FF0001330010014D020402F7000001C80FF0009900FF03ED000003ED0000
4470	 1C4	PUSH1	F0	 	 
- stack 2: 0x6C4
- stack 1: 0x114FF0001330010014D020402F7000001C80FF0009900FF03ED000003ED0000
- stack 0: 0xF0
4471	 1C6	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x114
4472	 1C7	JUMP		 	 
- stack 0: 0x6C4
4473	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x6C4
4474	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C4
- stack 0: 0x6C4
4475	 116	MLOAD		 	 
- stack 1: 0x6C4
- stack 0: 0x114FF0001330010014D020402F7000001C80FF0009900FF03ED000003ED0000
4476	 117	PUSH1	E0	 	 
- stack 2: 0x6C4
- stack 1: 0x114FF0001330010014D020402F7000001C80FF0009900FF03ED000003ED0000
- stack 0: 0xE0
4477	 119	SHR		 	 
- stack 1: 0x6C4
- stack 0: 0x114FF00
4478	 11A	PUSH2	FFFF	 	 
- stack 2: 0x6C4
- stack 1: 0x114FF00
- stack 0: 0xFFFF
4479	 11D	AND		 	 
- stack 1: 0x6C4
- stack 0: 0xFF00
4480	 11E	PUSH1	01	 	 
- stack 2: 0x6C4
- stack 1: 0xFF00
- stack 0: 0x1
4481	 120	SIGNEXTEND		 	 
- stack 1: 0x6C4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
4482	 121	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
4483	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x6C4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
4484	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x6C4
- stack 0: 0xFF00FF00
4485	 126	PUSH2	03A0	 	 
- stack 2: 0x6C4
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
4486	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x6C4
4487	 12A	PUSH1	04	 	 
- stack 1: 0x6C4
- stack 0: 0x4
4488	 12C	ADD		 	 
- stack 0: 0x6C8
4489	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x6C8
- stack 0: 0x6C8
4490	 12E	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010014D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F1
4491	 12F	PUSH1	F0	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010014D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F1
- stack 0: 0xF0
4492	 131	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x133
4493	 132	JUMP		 	 
- stack 0: 0x6C8
4494	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x6C8
4495	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6C8
- stack 0: 0x6C8
4496	 135	MLOAD		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010014D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F1
4497	 136	PUSH1	E0	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010014D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F1
- stack 0: 0xE0
4498	 138	SHR		 	 
- stack 1: 0x6C8
- stack 0: 0x1330010
4499	 139	PUSH2	FFFF	 	 
- stack 2: 0x6C8
- stack 1: 0x1330010
- stack 0: 0xFFFF
4500	 13C	AND		 	 
- stack 1: 0x6C8
- stack 0: 0x10
4501	 13D	PUSH1	01	 	 
- stack 2: 0x6C8
- stack 1: 0x10
- stack 0: 0x1
4502	 13F	SIGNEXTEND		 	 
- stack 1: 0x6C8
- stack 0: 0x10
4503	 140	PUSH2	0380	 	 
- stack 2: 0x6C8
- stack 1: 0x10
- stack 0: 0x380
4504	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x6C8
4505	 144	PUSH1	04	 	 
- stack 1: 0x6C8
- stack 0: 0x4
4506	 146	ADD		 	 
- stack 0: 0x6CC
4507	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x6CC
- stack 0: 0x6CC
4508	 148	MLOAD		 	 
- stack 1: 0x6CC
- stack 0: 0x14D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F
4509	 149	PUSH1	F0	 	 
- stack 2: 0x6CC
- stack 1: 0x14D020402F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F
- stack 0: 0xF0
4510	 14B	SHR		 	 
- stack 1: 0x6CC
- stack 0: 0x14D
4511	 14C	JUMP		 	 
- stack 0: 0x6CC
4512	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x6CC
4513	 14E	PUSH2	0060	 	 
- stack 1: 0x6CC
- stack 0: 0x60
4514	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x6CC
- stack 0: 0xFF00FF00
4515	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6CC
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
4516	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6CC
- stack 0: 0xFF00FF00
4517	 158	PUSH2	03A0	 	 
- stack 2: 0x6CC
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
4518	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x6CC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
4519	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6CC
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
4520	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6CC
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
4521	 162	SUB		 	 
- stack 1: 0x6CC
- stack 0: 0x0
4522	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x6CC
- stack 1: 0x0
- stack 0: 0x16B
4523	 166	JUMPI		 	 
- stack 0: 0x6CC
4524	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x6CC
- stack 0: 0x185
4525	 16A	JUMP		 	 
- stack 0: 0x6CC
4526	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x6CC
4527	 186	PUSH1	04	 	 
- stack 1: 0x6CC
- stack 0: 0x4
4528	 188	ADD		 	 
- stack 0: 0x6D0
4529	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x6D0
- stack 0: 0x6D0
4530	 18A	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA0000
4531	 18B	PUSH1	F0	 	 
- stack 2: 0x6D0
- stack 1: 0x2F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA0000
- stack 0: 0xF0
4532	 18D	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2F7
4533	 18E	JUMP		 	 
- stack 0: 0x6D0
4534	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x6D0
4535	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D0
- stack 0: 0x6D0
4536	 2F9	MLOAD		 	 
- stack 1: 0x6D0
- stack 0: 0x2F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA0000
4537	 2FA	PUSH1	E0	 	 
- stack 2: 0x6D0
- stack 1: 0x2F7000001C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA0000
- stack 0: 0xE0
4538	 2FC	SHR		 	 
- stack 1: 0x6D0
- stack 0: 0x2F70000
4539	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x6D0
- stack 1: 0x2F70000
- stack 0: 0xFFFF
4540	 300	AND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4541	 301	PUSH1	01	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x1
4542	 303	SIGNEXTEND		 	 
- stack 1: 0x6D0
- stack 0: 0x0
4543	 304	PUSH2	0080	 	 
- stack 2: 0x6D0
- stack 1: 0x0
- stack 0: 0x80
4544	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x6D0
4545	 308	PUSH1	04	 	 
- stack 1: 0x6D0
- stack 0: 0x4
4546	 30A	ADD		 	 
- stack 0: 0x6D4
4547	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4548	 30C	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001
4549	 30D	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001
- stack 0: 0xF0
4550	 30F	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1C8
4551	 310	JUMP		 	 
- stack 0: 0x6D4
4552	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D4
4553	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D4
- stack 0: 0xFF0000
4554	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xFF0000
- stack 0: 0x20
4555	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
4556	 1D2	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4557	 1D4	ADD		 	 
- stack 0: 0x6D8
4558	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4559	 1D6	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
4560	 1D7	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xF0
4561	 1D9	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
4562	 1DA	JUMP		 	 
- stack 0: 0x6D8
4563	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6D8
4564	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4565	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
4566	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xE0
4567	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF
4568	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4569	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4570	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x1
4571	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4572	 A6	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x20
4573	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0xFF0000
4574	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6D8
- stack 0: 0xFF00FF
4575	 AB	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF00FF
- stack 0: 0x20
4576	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4577	 AF	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4578	 B1	ADD		 	 
- stack 0: 0x6DC
4579	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4580	 B3	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
4581	 B4	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
- stack 0: 0xF0
4582	 B6	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED
4583	 B7	JUMP		 	 
- stack 0: 0x6DC
4584	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
4585	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4586	 3EF	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
4587	 3F0	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
- stack 0: 0xE0
4588	 3F2	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED0000
4589	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4590	 3F6	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4591	 3F7	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4592	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4593	 3FA	POP		 	 
- stack 0: 0x6DC
4594	 3FB	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4595	 3FD	ADD		 	 
- stack 0: 0x6E0
4596	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4597	 3FF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
4598	 400	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
4599	 402	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED
4600	 403	JUMP		 	 
- stack 0: 0x6E0
4601	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4602	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4603	 3EF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
4604	 3F0	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
4605	 3F2	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED0000
4606	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4607	 3F6	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4608	 3F7	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4609	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4610	 3FA	POP		 	 
- stack 0: 0x6E0
4611	 3FB	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4612	 3FD	ADD		 	 
- stack 0: 0x6E4
4613	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4614	 3FF	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF0
4615	 400	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
4616	 402	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xB8
4617	 403	JUMP		 	 
- stack 0: 0x6E4
4618	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E4
4619	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0F1000
4620	 BE	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF0F1000
- stack 0: 0x40
4621	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E4
4622	 C2	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4623	 C4	ADD		 	 
- stack 0: 0x6E8
4624	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4625	 C6	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
4626	 C7	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
- stack 0: 0xF0
4627	 C9	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCB
4628	 CA	JUMP		 	 
- stack 0: 0x6E8
4629	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6E8
4630	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4631	 CD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
4632	 CE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
- stack 0: 0xE0
4633	 D0	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F
4634	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4635	 D4	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFF0F
4636	 D5	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFF0F
- stack 0: 0x1
4637	 D7	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4638	 D8	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4639	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4640	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6E8
- stack 0: 0xF0F0F0F
4641	 DD	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4642	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4643	 E1	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4644	 E3	ADD		 	 
- stack 0: 0x6EC
4645	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4646	 E5	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330011014D01C8
4647	 E6	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330011014D01C8
- stack 0: 0xF0
4648	 E8	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xEA
4649	 E9	JUMP		 	 
- stack 0: 0x6EC
4650	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x6EC
4651	 EB	PUSH2	0040	 	 
- stack 1: 0x6EC
- stack 0: 0x40
4652	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4653	 EF	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4654	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4655	 F3	XOR		 	  ;; # XOR
- stack 1: 0x6EC
- stack 0: 0xFF00FF0
4656	 F4	PUSH2	0060	 	 
- stack 2: 0x6EC
- stack 1: 0xFF00FF0
- stack 0: 0x60
4657	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6EC
4658	 F8	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4659	 FA	ADD		 	 
- stack 0: 0x6F0
4660	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4661	 FC	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
4662	 FD	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
- stack 0: 0xF0
4663	 FF	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x330
4664	 100	JUMP		 	 
- stack 0: 0x6F0
4665	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F0
4666	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4667	 332	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
4668	 333	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
- stack 0: 0xE0
4669	 335	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001
4670	 336	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001
- stack 0: 0xFFFF
4671	 339	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4672	 33A	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4673	 33C	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4674	 33D	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4675	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x0
4676	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F0
- stack 0: 0x1
4677	 342	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4678	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F0
4679	 346	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4680	 348	ADD		 	 
- stack 0: 0x6F4
4681	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4682	 34A	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
4683	 34B	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
- stack 0: 0xF0
4684	 34D	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x34F
4685	 34E	JUMP		 	 
- stack 0: 0x6F4
4686	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F4
4687	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4688	 351	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
4689	 352	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
- stack 0: 0xE0
4690	 354	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x34F0002
4691	 355	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x34F0002
- stack 0: 0xFFFF
4692	 358	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4693	 359	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x1
4694	 35B	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4695	 35C	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xA0
4696	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F4
4697	 360	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4698	 362	ADD		 	 
- stack 0: 0x6F8
4699	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4700	 364	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
4701	 365	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
- stack 0: 0xF0
4702	 367	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x369
4703	 368	JUMP		 	 
- stack 0: 0x6F8
4704	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6F8
4705	 36A	PUSH2	0080	 	 
- stack 1: 0x6F8
- stack 0: 0x80
4706	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F8
- stack 0: 0x1
4707	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
4708	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0x1
4709	 374	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0xA0
4710	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x2
4711	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4712	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x2
4713	 37E	SUB		 	 
- stack 1: 0x6F8
- stack 0: 0x1
4714	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x6F8
- stack 1: 0x1
- stack 0: 0x387
4715	 382	JUMPI		 	 
- stack 0: 0x6F8
4716	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x6F8
4717	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F8
- stack 0: 0x6F8
4718	 389	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
4719	 38A	PUSH1	E0	 	 
- stack 2: 0x6F8
- stack 1: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
- stack 0: 0xE0
4720	 38C	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x369FFDC
4721	 38D	PUSH2	FFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
4722	 390	AND		 	 
- stack 1: 0x6F8
- stack 0: 0xFFDC
4723	 391	PUSH1	01	 	 
- stack 2: 0x6F8
- stack 1: 0xFFDC
- stack 0: 0x1
4724	 393	SIGNEXTEND		 	 
- stack 1: 0x6F8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
4725	 394	ADD		 	 
- stack 0: 0x6D4
4726	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x6D4
- stack 0: 0xFFFFFFFF
4727	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x6D4
4728	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x6D4
- stack 0: 0x6D4
4729	 39C	MLOAD		 	 
- stack 1: 0x6D4
- stack 0: 0x1C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001
4730	 39D	PUSH1	F0	 	 
- stack 2: 0x6D4
- stack 1: 0x1C80FF0009900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001
- stack 0: 0xF0
4731	 39F	SHR		 	 
- stack 1: 0x6D4
- stack 0: 0x1C8
4732	 3A0	JUMP		 	 
- stack 0: 0x6D4
4733	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x6D4
4734	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x6D4
- stack 0: 0xFF0000
4735	 1CE	PUSH2	0020	 	 
- stack 2: 0x6D4
- stack 1: 0xFF0000
- stack 0: 0x20
4736	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D4
4737	 1D2	PUSH1	04	 	 
- stack 1: 0x6D4
- stack 0: 0x4
4738	 1D4	ADD		 	 
- stack 0: 0x6D8
4739	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x6D8
- stack 0: 0x6D8
4740	 1D6	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
4741	 1D7	PUSH1	F0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xF0
4742	 1D9	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x99
4743	 1DA	JUMP		 	 
- stack 0: 0x6D8
4744	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x6D8
4745	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6D8
- stack 0: 0x6D8
4746	 9B	MLOAD		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
4747	 9C	PUSH1	E0	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF03ED000003ED000000B8F0F100CBFF0F00EA000003300001034F0002
- stack 0: 0xE0
4748	 9E	SHR		 	 
- stack 1: 0x6D8
- stack 0: 0x9900FF
4749	 9F	PUSH2	FFFF	 	 
- stack 2: 0x6D8
- stack 1: 0x9900FF
- stack 0: 0xFFFF
4750	 A2	AND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4751	 A3	PUSH1	01	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x1
4752	 A5	SIGNEXTEND		 	 
- stack 1: 0x6D8
- stack 0: 0xFF
4753	 A6	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0x20
4754	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x6D8
- stack 1: 0xFF
- stack 0: 0xFF0000
4755	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x6D8
- stack 0: 0xFF00FF
4756	 AB	PUSH2	0020	 	 
- stack 2: 0x6D8
- stack 1: 0xFF00FF
- stack 0: 0x20
4757	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x6D8
4758	 AF	PUSH1	04	 	 
- stack 1: 0x6D8
- stack 0: 0x4
4759	 B1	ADD		 	 
- stack 0: 0x6DC
4760	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x6DC
- stack 0: 0x6DC
4761	 B3	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
4762	 B4	PUSH1	F0	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
- stack 0: 0xF0
4763	 B6	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED
4764	 B7	JUMP		 	 
- stack 0: 0x6DC
4765	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6DC
4766	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6DC
- stack 0: 0x6DC
4767	 3EF	MLOAD		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
4768	 3F0	PUSH1	E0	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED000003ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC
- stack 0: 0xE0
4769	 3F2	SHR		 	 
- stack 1: 0x6DC
- stack 0: 0x3ED0000
4770	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6DC
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4771	 3F6	AND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4772	 3F7	PUSH1	01	 	 
- stack 2: 0x6DC
- stack 1: 0x0
- stack 0: 0x1
4773	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6DC
- stack 0: 0x0
4774	 3FA	POP		 	 
- stack 0: 0x6DC
4775	 3FB	PUSH1	04	 	 
- stack 1: 0x6DC
- stack 0: 0x4
4776	 3FD	ADD		 	 
- stack 0: 0x6E0
4777	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E0
- stack 0: 0x6E0
4778	 3FF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
4779	 400	PUSH1	F0	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
4780	 402	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED
4781	 403	JUMP		 	 
- stack 0: 0x6E0
4782	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x6E0
4783	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E0
- stack 0: 0x6E0
4784	 3EF	MLOAD		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
4785	 3F0	PUSH1	E0	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED000000B8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
4786	 3F2	SHR		 	 
- stack 1: 0x6E0
- stack 0: 0x3ED0000
4787	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x6E0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
4788	 3F6	AND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4789	 3F7	PUSH1	01	 	 
- stack 2: 0x6E0
- stack 1: 0x0
- stack 0: 0x1
4790	 3F9	SIGNEXTEND		 	 
- stack 1: 0x6E0
- stack 0: 0x0
4791	 3FA	POP		 	 
- stack 0: 0x6E0
4792	 3FB	PUSH1	04	 	 
- stack 1: 0x6E0
- stack 0: 0x4
4793	 3FD	ADD		 	 
- stack 0: 0x6E4
4794	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x6E4
- stack 0: 0x6E4
4795	 3FF	MLOAD		 	 
- stack 1: 0x6E4
- stack 0: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF0
4796	 400	PUSH1	F0	 	 
- stack 2: 0x6E4
- stack 1: 0xB8F0F100CBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
4797	 402	SHR		 	 
- stack 1: 0x6E4
- stack 0: 0xB8
4798	 403	JUMP		 	 
- stack 0: 0x6E4
4799	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x6E4
4800	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x6E4
- stack 0: 0xF0F1000
4801	 BE	PUSH2	0040	 	 
- stack 2: 0x6E4
- stack 1: 0xF0F1000
- stack 0: 0x40
4802	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E4
4803	 C2	PUSH1	04	 	 
- stack 1: 0x6E4
- stack 0: 0x4
4804	 C4	ADD		 	 
- stack 0: 0x6E8
4805	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x6E8
- stack 0: 0x6E8
4806	 C6	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
4807	 C7	PUSH1	F0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
- stack 0: 0xF0
4808	 C9	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCB
4809	 CA	JUMP		 	 
- stack 0: 0x6E8
4810	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x6E8
4811	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6E8
- stack 0: 0x6E8
4812	 CD	MLOAD		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
4813	 CE	PUSH1	E0	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F00EA000003300001034F00020369FFDC01DBFF010114FFF001330011
- stack 0: 0xE0
4814	 D0	SHR		 	 
- stack 1: 0x6E8
- stack 0: 0xCBFF0F
4815	 D1	PUSH2	FFFF	 	 
- stack 2: 0x6E8
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
4816	 D4	AND		 	 
- stack 1: 0x6E8
- stack 0: 0xFF0F
4817	 D5	PUSH1	01	 	 
- stack 2: 0x6E8
- stack 1: 0xFF0F
- stack 0: 0x1
4818	 D7	SIGNEXTEND		 	 
- stack 1: 0x6E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
4819	 D8	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
4820	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x6E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
4821	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x6E8
- stack 0: 0xF0F0F0F
4822	 DD	PUSH2	0040	 	 
- stack 2: 0x6E8
- stack 1: 0xF0F0F0F
- stack 0: 0x40
4823	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x6E8
4824	 E1	PUSH1	04	 	 
- stack 1: 0x6E8
- stack 0: 0x4
4825	 E3	ADD		 	 
- stack 0: 0x6EC
4826	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x6EC
- stack 0: 0x6EC
4827	 E5	MLOAD		 	 
- stack 1: 0x6EC
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330011014D01C8
4828	 E6	PUSH1	F0	 	 
- stack 2: 0x6EC
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330011014D01C8
- stack 0: 0xF0
4829	 E8	SHR		 	 
- stack 1: 0x6EC
- stack 0: 0xEA
4830	 E9	JUMP		 	 
- stack 0: 0x6EC
4831	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x6EC
4832	 EB	PUSH2	0040	 	 
- stack 1: 0x6EC
- stack 0: 0x40
4833	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x6EC
- stack 0: 0xF0F0F0F
4834	 EF	PUSH2	0020	 	 
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
4835	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x6EC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
4836	 F3	XOR		 	  ;; # XOR
- stack 1: 0x6EC
- stack 0: 0xFF00FF0
4837	 F4	PUSH2	0060	 	 
- stack 2: 0x6EC
- stack 1: 0xFF00FF0
- stack 0: 0x60
4838	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x6EC
4839	 F8	PUSH1	04	 	 
- stack 1: 0x6EC
- stack 0: 0x4
4840	 FA	ADD		 	 
- stack 0: 0x6F0
4841	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x6F0
- stack 0: 0x6F0
4842	 FC	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
4843	 FD	PUSH1	F0	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
- stack 0: 0xF0
4844	 FF	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x330
4845	 100	JUMP		 	 
- stack 0: 0x6F0
4846	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x6F0
4847	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F0
- stack 0: 0x6F0
4848	 332	MLOAD		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
4849	 333	PUSH1	E0	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330011014D01C802F70000
- stack 0: 0xE0
4850	 335	SHR		 	 
- stack 1: 0x6F0
- stack 0: 0x3300001
4851	 336	PUSH2	FFFF	 	 
- stack 2: 0x6F0
- stack 1: 0x3300001
- stack 0: 0xFFFF
4852	 339	AND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4853	 33A	PUSH1	01	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4854	 33C	SIGNEXTEND		 	 
- stack 1: 0x6F0
- stack 0: 0x1
4855	 33D	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x80
4856	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x6F0
- stack 1: 0x1
- stack 0: 0x1
4857	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x6F0
- stack 0: 0x2
4858	 342	PUSH2	0080	 	 
- stack 2: 0x6F0
- stack 1: 0x2
- stack 0: 0x80
4859	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x6F0
4860	 346	PUSH1	04	 	 
- stack 1: 0x6F0
- stack 0: 0x4
4861	 348	ADD		 	 
- stack 0: 0x6F4
4862	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x6F4
- stack 0: 0x6F4
4863	 34A	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
4864	 34B	PUSH1	F0	 	 
- stack 2: 0x6F4
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
- stack 0: 0xF0
4865	 34D	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x34F
4866	 34E	JUMP		 	 
- stack 0: 0x6F4
4867	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x6F4
4868	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x6F4
- stack 0: 0x6F4
4869	 351	MLOAD		 	 
- stack 1: 0x6F4
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
4870	 352	PUSH1	E0	 	 
- stack 2: 0x6F4
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F1
- stack 0: 0xE0
4871	 354	SHR		 	 
- stack 1: 0x6F4
- stack 0: 0x34F0002
4872	 355	PUSH2	FFFF	 	 
- stack 2: 0x6F4
- stack 1: 0x34F0002
- stack 0: 0xFFFF
4873	 358	AND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4874	 359	PUSH1	01	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0x1
4875	 35B	SIGNEXTEND		 	 
- stack 1: 0x6F4
- stack 0: 0x2
4876	 35C	PUSH2	00A0	 	 
- stack 2: 0x6F4
- stack 1: 0x2
- stack 0: 0xA0
4877	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x6F4
4878	 360	PUSH1	04	 	 
- stack 1: 0x6F4
- stack 0: 0x4
4879	 362	ADD		 	 
- stack 0: 0x6F8
4880	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x6F8
- stack 0: 0x6F8
4881	 364	MLOAD		 	 
- stack 1: 0x6F8
- stack 0: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
4882	 365	PUSH1	F0	 	 
- stack 2: 0x6F8
- stack 1: 0x369FFDC01DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F
- stack 0: 0xF0
4883	 367	SHR		 	 
- stack 1: 0x6F8
- stack 0: 0x369
4884	 368	JUMP		 	 
- stack 0: 0x6F8
4885	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x6F8
4886	 36A	PUSH2	0080	 	 
- stack 1: 0x6F8
- stack 0: 0x80
4887	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x6F8
- stack 0: 0x2
4888	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4889	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x6F8
- stack 0: 0x2
4890	 374	PUSH2	00A0	 	 
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0xA0
4891	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x2
4892	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x6F8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
4893	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x6F8
- stack 1: 0x2
- stack 0: 0x2
4894	 37E	SUB		 	 
- stack 1: 0x6F8
- stack 0: 0x0
4895	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x6F8
- stack 1: 0x0
- stack 0: 0x387
4896	 382	JUMPI		 	 
- stack 0: 0x6F8
4897	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x6F8
- stack 0: 0x3A1
4898	 386	JUMP		 	 
- stack 0: 0x6F8
4899	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x6F8
4900	 3A2	PUSH1	04	 	 
- stack 1: 0x6F8
- stack 0: 0x4
4901	 3A4	ADD		 	 
- stack 0: 0x6FC
4902	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x6FC
- stack 0: 0x6FC
4903	 3A6	MLOAD		 	 
- stack 1: 0x6FC
- stack 0: 0x1DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F010
4904	 3A7	PUSH1	F0	 	 
- stack 2: 0x6FC
- stack 1: 0x1DBFF010114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F010
- stack 0: 0xF0
4905	 3A9	SHR		 	 
- stack 1: 0x6FC
- stack 0: 0x1DB
4906	 3AA	JUMP		 	 
- stack 0: 0x6FC
4907	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x6FC
4908	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x6FC
- stack 0: 0xFF01000
4909	 1E1	PUSH2	03A0	 	 
- stack 2: 0x6FC
- stack 1: 0xFF01000
- stack 0: 0x3A0
4910	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x6FC
4911	 1E5	PUSH1	04	 	 
- stack 1: 0x6FC
- stack 0: 0x4
4912	 1E7	ADD		 	 
- stack 0: 0x700
4913	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x700
- stack 0: 0x700
4914	 1E9	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF00
4915	 1EA	PUSH1	F0	 	 
- stack 2: 0x700
- stack 1: 0x114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xF0
4916	 1EC	SHR		 	 
- stack 1: 0x700
- stack 0: 0x114
4917	 1ED	JUMP		 	 
- stack 0: 0x700
4918	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x700
4919	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x700
- stack 0: 0x700
4920	 116	MLOAD		 	 
- stack 1: 0x700
- stack 0: 0x114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF00
4921	 117	PUSH1	E0	 	 
- stack 2: 0x700
- stack 1: 0x114FFF001330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF00
- stack 0: 0xE0
4922	 119	SHR		 	 
- stack 1: 0x700
- stack 0: 0x114FFF0
4923	 11A	PUSH2	FFFF	 	 
- stack 2: 0x700
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
4924	 11D	AND		 	 
- stack 1: 0x700
- stack 0: 0xFFF0
4925	 11E	PUSH1	01	 	 
- stack 2: 0x700
- stack 1: 0xFFF0
- stack 0: 0x1
4926	 120	SIGNEXTEND		 	 
- stack 1: 0x700
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
4927	 121	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
4928	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x700
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
4929	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x700
- stack 0: 0xFF00FF0
4930	 126	PUSH2	03A0	 	 
- stack 2: 0x700
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
4931	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x700
4932	 12A	PUSH1	04	 	 
- stack 1: 0x700
- stack 0: 0x4
4933	 12C	ADD		 	 
- stack 0: 0x704
4934	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x704
- stack 0: 0x704
4935	 12E	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4936	 12F	PUSH1	F0	 	 
- stack 2: 0x704
- stack 1: 0x1330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xF0
4937	 131	SHR		 	 
- stack 1: 0x704
- stack 0: 0x133
4938	 132	JUMP		 	 
- stack 0: 0x704
4939	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x704
4940	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x704
- stack 0: 0x704
4941	 135	MLOAD		 	 
- stack 1: 0x704
- stack 0: 0x1330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA0000
4942	 136	PUSH1	E0	 	 
- stack 2: 0x704
- stack 1: 0x1330011014D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA0000
- stack 0: 0xE0
4943	 138	SHR		 	 
- stack 1: 0x704
- stack 0: 0x1330011
4944	 139	PUSH2	FFFF	 	 
- stack 2: 0x704
- stack 1: 0x1330011
- stack 0: 0xFFFF
4945	 13C	AND		 	 
- stack 1: 0x704
- stack 0: 0x11
4946	 13D	PUSH1	01	 	 
- stack 2: 0x704
- stack 1: 0x11
- stack 0: 0x1
4947	 13F	SIGNEXTEND		 	 
- stack 1: 0x704
- stack 0: 0x11
4948	 140	PUSH2	0380	 	 
- stack 2: 0x704
- stack 1: 0x11
- stack 0: 0x380
4949	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x704
4950	 144	PUSH1	04	 	 
- stack 1: 0x704
- stack 0: 0x4
4951	 146	ADD		 	 
- stack 0: 0x708
4952	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x708
- stack 0: 0x708
4953	 148	MLOAD		 	 
- stack 1: 0x708
- stack 0: 0x14D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001
4954	 149	PUSH1	F0	 	 
- stack 2: 0x708
- stack 1: 0x14D01C802F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001
- stack 0: 0xF0
4955	 14B	SHR		 	 
- stack 1: 0x708
- stack 0: 0x14D
4956	 14C	JUMP		 	 
- stack 0: 0x708
4957	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x708
4958	 14E	PUSH2	0060	 	 
- stack 1: 0x708
- stack 0: 0x60
4959	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x708
- stack 0: 0xFF00FF0
4960	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x708
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
4961	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x708
- stack 0: 0xFF00FF0
4962	 158	PUSH2	03A0	 	 
- stack 2: 0x708
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
4963	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x708
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
4964	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x708
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
4965	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x708
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
4966	 162	SUB		 	 
- stack 1: 0x708
- stack 0: 0x0
4967	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x708
- stack 1: 0x0
- stack 0: 0x16B
4968	 166	JUMPI		 	 
- stack 0: 0x708
4969	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x708
- stack 0: 0x185
4970	 16A	JUMP		 	 
- stack 0: 0x708
4971	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x708
4972	 186	PUSH1	04	 	 
- stack 1: 0x708
- stack 0: 0x4
4973	 188	ADD		 	 
- stack 0: 0x70C
4974	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x70C
- stack 0: 0x70C
4975	 18A	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x2F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001034F0002
4976	 18B	PUSH1	F0	 	 
- stack 2: 0x70C
- stack 1: 0x2F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001034F0002
- stack 0: 0xF0
4977	 18D	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x2F7
4978	 18E	JUMP		 	 
- stack 0: 0x70C
4979	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x70C
4980	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x70C
- stack 0: 0x70C
4981	 2F9	MLOAD		 	 
- stack 1: 0x70C
- stack 0: 0x2F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001034F0002
4982	 2FA	PUSH1	E0	 	 
- stack 2: 0x70C
- stack 1: 0x2F7000000B8F0F100CBFF0F0086F0100099FF0000EA000003300001034F0002
- stack 0: 0xE0
4983	 2FC	SHR		 	 
- stack 1: 0x70C
- stack 0: 0x2F70000
4984	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x70C
- stack 1: 0x2F70000
- stack 0: 0xFFFF
4985	 300	AND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4986	 301	PUSH1	01	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x1
4987	 303	SIGNEXTEND		 	 
- stack 1: 0x70C
- stack 0: 0x0
4988	 304	PUSH2	0080	 	 
- stack 2: 0x70C
- stack 1: 0x0
- stack 0: 0x80
4989	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x70C
4990	 308	PUSH1	04	 	 
- stack 1: 0x70C
- stack 0: 0x4
4991	 30A	ADD		 	 
- stack 0: 0x710
4992	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
4993	 30C	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4
4994	 30D	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4
- stack 0: 0xF0
4995	 30F	SHR		 	 
- stack 1: 0x710
- stack 0: 0xB8
4996	 310	JUMP		 	 
- stack 0: 0x710
4997	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x710
4998	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x710
- stack 0: 0xF0F1000
4999	 BE	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xF0F1000
- stack 0: 0x40
5000	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x710
5001	 C2	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5002	 C4	ADD		 	 
- stack 0: 0x714
5003	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5004	 C6	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
5005	 C7	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
- stack 0: 0xF0
5006	 C9	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCB
5007	 CA	JUMP		 	 
- stack 0: 0x714
5008	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x714
5009	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5010	 CD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
5011	 CE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
- stack 0: 0xE0
5012	 D0	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F
5013	 D1	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5014	 D4	AND		 	 
- stack 1: 0x714
- stack 0: 0xFF0F
5015	 D5	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFF0F
- stack 0: 0x1
5016	 D7	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5017	 D8	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5018	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5019	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x714
- stack 0: 0xF0F0F0F
5020	 DD	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5021	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5022	 E1	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5023	 E3	ADD		 	 
- stack 0: 0x718
5024	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5025	 E5	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x86F0100099FF0000EA000003300001034F00020369FFE4010100FF0114000F
5026	 E6	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x86F0100099FF0000EA000003300001034F00020369FFE4010100FF0114000F
- stack 0: 0xF0
5027	 E8	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
5028	 E9	JUMP		 	 
- stack 0: 0x718
5029	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x718
5030	 87	PUSH4	ff010000	 	 
- stack 1: 0x718
- stack 0: 0xFF010000
5031	 8C	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0xFF010000
- stack 0: 0x20
5032	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
5033	 90	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5034	 92	ADD		 	 
- stack 0: 0x71C
5035	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5036	 94	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
5037	 95	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
- stack 0: 0xF0
5038	 97	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99
5039	 98	JUMP		 	 
- stack 0: 0x71C
5040	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x71C
5041	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5042	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
5043	 9C	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
- stack 0: 0xE0
5044	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99FF00
5045	 9F	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5046	 A2	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFF00
5047	 A3	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFF00
- stack 0: 0x1
5048	 A5	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5049	 A6	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5050	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5051	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x71C
- stack 0: 0xFF00FF00
5052	 AB	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF00FF00
- stack 0: 0x20
5053	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5054	 AF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5055	 B1	ADD		 	 
- stack 0: 0x720
5056	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5057	 B3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xEA000003300001034F00020369FFE4010100FF0114000F01330012014D0194
5058	 B4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xEA000003300001034F00020369FFE4010100FF0114000F01330012014D0194
- stack 0: 0xF0
5059	 B6	SHR		 	 
- stack 1: 0x720
- stack 0: 0xEA
5060	 B7	JUMP		 	 
- stack 0: 0x720
5061	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x720
5062	 EB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
5063	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xF0F0F0F
5064	 EF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5065	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5066	 F3	XOR		 	  ;; # XOR
- stack 1: 0x720
- stack 0: 0xF00FF00F
5067	 F4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0xF00FF00F
- stack 0: 0x60
5068	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
5069	 F8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5070	 FA	ADD		 	 
- stack 0: 0x724
5071	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5072	 FC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
5073	 FD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
- stack 0: 0xF0
5074	 FF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x330
5075	 100	JUMP		 	 
- stack 0: 0x724
5076	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
5077	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5078	 332	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
5079	 333	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
- stack 0: 0xE0
5080	 335	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3300001
5081	 336	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3300001
- stack 0: 0xFFFF
5082	 339	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
5083	 33A	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5084	 33C	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
5085	 33D	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5086	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x0
5087	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x1
5088	 342	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5089	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
5090	 346	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5091	 348	ADD		 	 
- stack 0: 0x728
5092	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5093	 34A	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
5094	 34B	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
- stack 0: 0xF0
5095	 34D	SHR		 	 
- stack 1: 0x728
- stack 0: 0x34F
5096	 34E	JUMP		 	 
- stack 0: 0x728
5097	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
5098	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5099	 351	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
5100	 352	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
- stack 0: 0xE0
5101	 354	SHR		 	 
- stack 1: 0x728
- stack 0: 0x34F0002
5102	 355	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5103	 358	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
5104	 359	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
5105	 35B	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
5106	 35C	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
5107	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
5108	 360	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5109	 362	ADD		 	 
- stack 0: 0x72C
5110	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5111	 364	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
5112	 365	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
- stack 0: 0xF0
5113	 367	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x369
5114	 368	JUMP		 	 
- stack 0: 0x72C
5115	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x72C
5116	 36A	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
5117	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x1
5118	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5119	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x1
5120	 374	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0xA0
5121	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
5122	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5123	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x2
5124	 37E	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x1
5125	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x72C
- stack 1: 0x1
- stack 0: 0x387
5126	 382	JUMPI		 	 
- stack 0: 0x72C
5127	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x72C
5128	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x72C
- stack 0: 0x72C
5129	 389	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
5130	 38A	PUSH1	E0	 	 
- stack 2: 0x72C
- stack 1: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
- stack 0: 0xE0
5131	 38C	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x369FFE4
5132	 38D	PUSH2	FFFF	 	 
- stack 2: 0x72C
- stack 1: 0x369FFE4
- stack 0: 0xFFFF
5133	 390	AND		 	 
- stack 1: 0x72C
- stack 0: 0xFFE4
5134	 391	PUSH1	01	 	 
- stack 2: 0x72C
- stack 1: 0xFFE4
- stack 0: 0x1
5135	 393	SIGNEXTEND		 	 
- stack 1: 0x72C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
5136	 394	ADD		 	 
- stack 0: 0x710
5137	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x710
- stack 0: 0xFFFFFFFF
5138	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x710
5139	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x710
- stack 0: 0x710
5140	 39C	MLOAD		 	 
- stack 1: 0x710
- stack 0: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4
5141	 39D	PUSH1	F0	 	 
- stack 2: 0x710
- stack 1: 0xB8F0F100CBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4
- stack 0: 0xF0
5142	 39F	SHR		 	 
- stack 1: 0x710
- stack 0: 0xB8
5143	 3A0	JUMP		 	 
- stack 0: 0x710
5144	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x710
5145	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x710
- stack 0: 0xF0F1000
5146	 BE	PUSH2	0040	 	 
- stack 2: 0x710
- stack 1: 0xF0F1000
- stack 0: 0x40
5147	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x710
5148	 C2	PUSH1	04	 	 
- stack 1: 0x710
- stack 0: 0x4
5149	 C4	ADD		 	 
- stack 0: 0x714
5150	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x714
- stack 0: 0x714
5151	 C6	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
5152	 C7	PUSH1	F0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
- stack 0: 0xF0
5153	 C9	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCB
5154	 CA	JUMP		 	 
- stack 0: 0x714
5155	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x714
5156	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x714
- stack 0: 0x714
5157	 CD	MLOAD		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
5158	 CE	PUSH1	E0	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F0086F0100099FF0000EA000003300001034F00020369FFE4010100FF
- stack 0: 0xE0
5159	 D0	SHR		 	 
- stack 1: 0x714
- stack 0: 0xCBFF0F
5160	 D1	PUSH2	FFFF	 	 
- stack 2: 0x714
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5161	 D4	AND		 	 
- stack 1: 0x714
- stack 0: 0xFF0F
5162	 D5	PUSH1	01	 	 
- stack 2: 0x714
- stack 1: 0xFF0F
- stack 0: 0x1
5163	 D7	SIGNEXTEND		 	 
- stack 1: 0x714
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5164	 D8	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5165	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x714
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5166	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x714
- stack 0: 0xF0F0F0F
5167	 DD	PUSH2	0040	 	 
- stack 2: 0x714
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5168	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x714
5169	 E1	PUSH1	04	 	 
- stack 1: 0x714
- stack 0: 0x4
5170	 E3	ADD		 	 
- stack 0: 0x718
5171	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x718
- stack 0: 0x718
5172	 E5	MLOAD		 	 
- stack 1: 0x718
- stack 0: 0x86F0100099FF0000EA000003300001034F00020369FFE4010100FF0114000F
5173	 E6	PUSH1	F0	 	 
- stack 2: 0x718
- stack 1: 0x86F0100099FF0000EA000003300001034F00020369FFE4010100FF0114000F
- stack 0: 0xF0
5174	 E8	SHR		 	 
- stack 1: 0x718
- stack 0: 0x86
5175	 E9	JUMP		 	 
- stack 0: 0x718
5176	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x718
5177	 87	PUSH4	ff010000	 	 
- stack 1: 0x718
- stack 0: 0xFF010000
5178	 8C	PUSH2	0020	 	 
- stack 2: 0x718
- stack 1: 0xFF010000
- stack 0: 0x20
5179	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x718
5180	 90	PUSH1	04	 	 
- stack 1: 0x718
- stack 0: 0x4
5181	 92	ADD		 	 
- stack 0: 0x71C
5182	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x71C
- stack 0: 0x71C
5183	 94	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
5184	 95	PUSH1	F0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
- stack 0: 0xF0
5185	 97	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99
5186	 98	JUMP		 	 
- stack 0: 0x71C
5187	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x71C
5188	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x71C
- stack 0: 0x71C
5189	 9B	MLOAD		 	 
- stack 1: 0x71C
- stack 0: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
5190	 9C	PUSH1	E0	 	 
- stack 2: 0x71C
- stack 1: 0x99FF0000EA000003300001034F00020369FFE4010100FF0114000F01330012
- stack 0: 0xE0
5191	 9E	SHR		 	 
- stack 1: 0x71C
- stack 0: 0x99FF00
5192	 9F	PUSH2	FFFF	 	 
- stack 2: 0x71C
- stack 1: 0x99FF00
- stack 0: 0xFFFF
5193	 A2	AND		 	 
- stack 1: 0x71C
- stack 0: 0xFF00
5194	 A3	PUSH1	01	 	 
- stack 2: 0x71C
- stack 1: 0xFF00
- stack 0: 0x1
5195	 A5	SIGNEXTEND		 	 
- stack 1: 0x71C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5196	 A6	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
5197	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x71C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5198	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x71C
- stack 0: 0xFF00FF00
5199	 AB	PUSH2	0020	 	 
- stack 2: 0x71C
- stack 1: 0xFF00FF00
- stack 0: 0x20
5200	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x71C
5201	 AF	PUSH1	04	 	 
- stack 1: 0x71C
- stack 0: 0x4
5202	 B1	ADD		 	 
- stack 0: 0x720
5203	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x720
- stack 0: 0x720
5204	 B3	MLOAD		 	 
- stack 1: 0x720
- stack 0: 0xEA000003300001034F00020369FFE4010100FF0114000F01330012014D0194
5205	 B4	PUSH1	F0	 	 
- stack 2: 0x720
- stack 1: 0xEA000003300001034F00020369FFE4010100FF0114000F01330012014D0194
- stack 0: 0xF0
5206	 B6	SHR		 	 
- stack 1: 0x720
- stack 0: 0xEA
5207	 B7	JUMP		 	 
- stack 0: 0x720
5208	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x720
5209	 EB	PUSH2	0040	 	 
- stack 1: 0x720
- stack 0: 0x40
5210	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x720
- stack 0: 0xF0F0F0F
5211	 EF	PUSH2	0020	 	 
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5212	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x720
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
5213	 F3	XOR		 	  ;; # XOR
- stack 1: 0x720
- stack 0: 0xF00FF00F
5214	 F4	PUSH2	0060	 	 
- stack 2: 0x720
- stack 1: 0xF00FF00F
- stack 0: 0x60
5215	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x720
5216	 F8	PUSH1	04	 	 
- stack 1: 0x720
- stack 0: 0x4
5217	 FA	ADD		 	 
- stack 0: 0x724
5218	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x724
- stack 0: 0x724
5219	 FC	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
5220	 FD	PUSH1	F0	 	 
- stack 2: 0x724
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
- stack 0: 0xF0
5221	 FF	SHR		 	 
- stack 1: 0x724
- stack 0: 0x330
5222	 100	JUMP		 	 
- stack 0: 0x724
5223	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x724
5224	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x724
- stack 0: 0x724
5225	 332	MLOAD		 	 
- stack 1: 0x724
- stack 0: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
5226	 333	PUSH1	E0	 	 
- stack 2: 0x724
- stack 1: 0x3300001034F00020369FFE4010100FF0114000F01330012014D019402F70000
- stack 0: 0xE0
5227	 335	SHR		 	 
- stack 1: 0x724
- stack 0: 0x3300001
5228	 336	PUSH2	FFFF	 	 
- stack 2: 0x724
- stack 1: 0x3300001
- stack 0: 0xFFFF
5229	 339	AND		 	 
- stack 1: 0x724
- stack 0: 0x1
5230	 33A	PUSH1	01	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5231	 33C	SIGNEXTEND		 	 
- stack 1: 0x724
- stack 0: 0x1
5232	 33D	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x80
5233	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x724
- stack 1: 0x1
- stack 0: 0x1
5234	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x724
- stack 0: 0x2
5235	 342	PUSH2	0080	 	 
- stack 2: 0x724
- stack 1: 0x2
- stack 0: 0x80
5236	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x724
5237	 346	PUSH1	04	 	 
- stack 1: 0x724
- stack 0: 0x4
5238	 348	ADD		 	 
- stack 0: 0x728
5239	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x728
- stack 0: 0x728
5240	 34A	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
5241	 34B	PUSH1	F0	 	 
- stack 2: 0x728
- stack 1: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
- stack 0: 0xF0
5242	 34D	SHR		 	 
- stack 1: 0x728
- stack 0: 0x34F
5243	 34E	JUMP		 	 
- stack 0: 0x728
5244	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x728
5245	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x728
- stack 0: 0x728
5246	 351	MLOAD		 	 
- stack 1: 0x728
- stack 0: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
5247	 352	PUSH1	E0	 	 
- stack 2: 0x728
- stack 1: 0x34F00020369FFE4010100FF0114000F01330012014D019402F7000001A20F0F
- stack 0: 0xE0
5248	 354	SHR		 	 
- stack 1: 0x728
- stack 0: 0x34F0002
5249	 355	PUSH2	FFFF	 	 
- stack 2: 0x728
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5250	 358	AND		 	 
- stack 1: 0x728
- stack 0: 0x2
5251	 359	PUSH1	01	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0x1
5252	 35B	SIGNEXTEND		 	 
- stack 1: 0x728
- stack 0: 0x2
5253	 35C	PUSH2	00A0	 	 
- stack 2: 0x728
- stack 1: 0x2
- stack 0: 0xA0
5254	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x728
5255	 360	PUSH1	04	 	 
- stack 1: 0x728
- stack 0: 0x4
5256	 362	ADD		 	 
- stack 0: 0x72C
5257	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x72C
- stack 0: 0x72C
5258	 364	MLOAD		 	 
- stack 1: 0x72C
- stack 0: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
5259	 365	PUSH1	F0	 	 
- stack 2: 0x72C
- stack 1: 0x369FFE4010100FF0114000F01330012014D019402F7000001A20F0F00CB00F0
- stack 0: 0xF0
5260	 367	SHR		 	 
- stack 1: 0x72C
- stack 0: 0x369
5261	 368	JUMP		 	 
- stack 0: 0x72C
5262	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x72C
5263	 36A	PUSH2	0080	 	 
- stack 1: 0x72C
- stack 0: 0x80
5264	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x72C
- stack 0: 0x2
5265	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5266	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x72C
- stack 0: 0x2
5267	 374	PUSH2	00A0	 	 
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0xA0
5268	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
5269	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x72C
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5270	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x72C
- stack 1: 0x2
- stack 0: 0x2
5271	 37E	SUB		 	 
- stack 1: 0x72C
- stack 0: 0x0
5272	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x72C
- stack 1: 0x0
- stack 0: 0x387
5273	 382	JUMPI		 	 
- stack 0: 0x72C
5274	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x72C
- stack 0: 0x3A1
5275	 386	JUMP		 	 
- stack 0: 0x72C
5276	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x72C
5277	 3A2	PUSH1	04	 	 
- stack 1: 0x72C
- stack 0: 0x4
5278	 3A4	ADD		 	 
- stack 0: 0x730
5279	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x730
- stack 0: 0x730
5280	 3A6	MLOAD		 	 
- stack 1: 0x730
- stack 0: 0x10100FF0114000F01330012014D019402F7000001A20F0F00CB00F0018FFF01
5281	 3A7	PUSH1	F0	 	 
- stack 2: 0x730
- stack 1: 0x10100FF0114000F01330012014D019402F7000001A20F0F00CB00F0018FFF01
- stack 0: 0xF0
5282	 3A9	SHR		 	 
- stack 1: 0x730
- stack 0: 0x101
5283	 3AA	JUMP		 	 
- stack 0: 0x730
5284	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x730
5285	 102	PUSH4	f00ff000	 	 
- stack 1: 0x730
- stack 0: 0xF00FF000
5286	 107	PUSH2	03A0	 	 
- stack 2: 0x730
- stack 1: 0xF00FF000
- stack 0: 0x3A0
5287	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x730
5288	 10B	PUSH1	04	 	 
- stack 1: 0x730
- stack 0: 0x4
5289	 10D	ADD		 	 
- stack 0: 0x734
5290	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x734
- stack 0: 0x734
5291	 10F	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x114000F01330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF0
5292	 110	PUSH1	F0	 	 
- stack 2: 0x734
- stack 1: 0x114000F01330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xF0
5293	 112	SHR		 	 
- stack 1: 0x734
- stack 0: 0x114
5294	 113	JUMP		 	 
- stack 0: 0x734
5295	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x734
5296	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x734
- stack 0: 0x734
5297	 116	MLOAD		 	 
- stack 1: 0x734
- stack 0: 0x114000F01330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF0
5298	 117	PUSH1	E0	 	 
- stack 2: 0x734
- stack 1: 0x114000F01330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF0
- stack 0: 0xE0
5299	 119	SHR		 	 
- stack 1: 0x734
- stack 0: 0x114000F
5300	 11A	PUSH2	FFFF	 	 
- stack 2: 0x734
- stack 1: 0x114000F
- stack 0: 0xFFFF
5301	 11D	AND		 	 
- stack 1: 0x734
- stack 0: 0xF
5302	 11E	PUSH1	01	 	 
- stack 2: 0x734
- stack 1: 0xF
- stack 0: 0x1
5303	 120	SIGNEXTEND		 	 
- stack 1: 0x734
- stack 0: 0xF
5304	 121	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0xF
- stack 0: 0x3A0
5305	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x734
- stack 1: 0xF
- stack 0: 0xF00FF000
5306	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x734
- stack 0: 0xF00FF00F
5307	 126	PUSH2	03A0	 	 
- stack 2: 0x734
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
5308	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x734
5309	 12A	PUSH1	04	 	 
- stack 1: 0x734
- stack 0: 0x4
5310	 12C	ADD		 	 
- stack 0: 0x738
5311	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x738
- stack 0: 0x738
5312	 12E	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x1330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED0000
5313	 12F	PUSH1	F0	 	 
- stack 2: 0x738
- stack 1: 0x1330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED0000
- stack 0: 0xF0
5314	 131	SHR		 	 
- stack 1: 0x738
- stack 0: 0x133
5315	 132	JUMP		 	 
- stack 0: 0x738
5316	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x738
5317	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x738
- stack 0: 0x738
5318	 135	MLOAD		 	 
- stack 1: 0x738
- stack 0: 0x1330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED0000
5319	 136	PUSH1	E0	 	 
- stack 2: 0x738
- stack 1: 0x1330012014D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED0000
- stack 0: 0xE0
5320	 138	SHR		 	 
- stack 1: 0x738
- stack 0: 0x1330012
5321	 139	PUSH2	FFFF	 	 
- stack 2: 0x738
- stack 1: 0x1330012
- stack 0: 0xFFFF
5322	 13C	AND		 	 
- stack 1: 0x738
- stack 0: 0x12
5323	 13D	PUSH1	01	 	 
- stack 2: 0x738
- stack 1: 0x12
- stack 0: 0x1
5324	 13F	SIGNEXTEND		 	 
- stack 1: 0x738
- stack 0: 0x12
5325	 140	PUSH2	0380	 	 
- stack 2: 0x738
- stack 1: 0x12
- stack 0: 0x380
5326	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x738
5327	 144	PUSH1	04	 	 
- stack 1: 0x738
- stack 0: 0x4
5328	 146	ADD		 	 
- stack 0: 0x73C
5329	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x73C
- stack 0: 0x73C
5330	 148	MLOAD		 	 
- stack 1: 0x73C
- stack 0: 0x14D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA0000
5331	 149	PUSH1	F0	 	 
- stack 2: 0x73C
- stack 1: 0x14D019402F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA0000
- stack 0: 0xF0
5332	 14B	SHR		 	 
- stack 1: 0x73C
- stack 0: 0x14D
5333	 14C	JUMP		 	 
- stack 0: 0x73C
5334	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x73C
5335	 14E	PUSH2	0060	 	 
- stack 1: 0x73C
- stack 0: 0x60
5336	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x73C
- stack 0: 0xF00FF00F
5337	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x73C
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
5338	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x73C
- stack 0: 0xF00FF00F
5339	 158	PUSH2	03A0	 	 
- stack 2: 0x73C
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
5340	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x73C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
5341	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x73C
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
5342	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x73C
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
5343	 162	SUB		 	 
- stack 1: 0x73C
- stack 0: 0x0
5344	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x73C
- stack 1: 0x0
- stack 0: 0x16B
5345	 166	JUMPI		 	 
- stack 0: 0x73C
5346	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x73C
- stack 0: 0x185
5347	 16A	JUMP		 	 
- stack 0: 0x73C
5348	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x73C
5349	 186	PUSH1	04	 	 
- stack 1: 0x73C
- stack 0: 0x4
5350	 188	ADD		 	 
- stack 0: 0x740
5351	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x740
- stack 0: 0x740
5352	 18A	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001
5353	 18B	PUSH1	F0	 	 
- stack 2: 0x740
- stack 1: 0x2F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001
- stack 0: 0xF0
5354	 18D	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2F7
5355	 18E	JUMP		 	 
- stack 0: 0x740
5356	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x740
5357	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x740
- stack 0: 0x740
5358	 2F9	MLOAD		 	 
- stack 1: 0x740
- stack 0: 0x2F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001
5359	 2FA	PUSH1	E0	 	 
- stack 2: 0x740
- stack 1: 0x2F7000001A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001
- stack 0: 0xE0
5360	 2FC	SHR		 	 
- stack 1: 0x740
- stack 0: 0x2F70000
5361	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x740
- stack 1: 0x2F70000
- stack 0: 0xFFFF
5362	 300	AND		 	 
- stack 1: 0x740
- stack 0: 0x0
5363	 301	PUSH1	01	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x1
5364	 303	SIGNEXTEND		 	 
- stack 1: 0x740
- stack 0: 0x0
5365	 304	PUSH2	0080	 	 
- stack 2: 0x740
- stack 1: 0x0
- stack 0: 0x80
5366	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x740
5367	 308	PUSH1	04	 	 
- stack 1: 0x740
- stack 0: 0x4
5368	 30A	ADD		 	 
- stack 0: 0x744
5369	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5370	 30C	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001034F0002
5371	 30D	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xF0
5372	 30F	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1A2
5373	 310	JUMP		 	 
- stack 0: 0x744
5374	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x744
5375	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x744
- stack 0: 0xF0F0F000
5376	 1A8	PUSH2	0040	 	 
- stack 2: 0x744
- stack 1: 0xF0F0F000
- stack 0: 0x40
5377	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x744
5378	 1AC	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5379	 1AE	ADD		 	 
- stack 0: 0x748
5380	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5381	 1B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
5382	 1B1	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xF0
5383	 1B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB
5384	 1B4	JUMP		 	 
- stack 0: 0x748
5385	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x748
5386	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5387	 CD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
5388	 CE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xE0
5389	 D0	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0
5390	 D1	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5391	 D4	AND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5392	 D5	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x1
5393	 D7	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5394	 D8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x40
5395	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5396	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x748
- stack 0: 0xF0F0F0F0
5397	 DD	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5398	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5399	 E1	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5400	 E3	ADD		 	 
- stack 0: 0x74C
5401	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5402	 E5	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFE001B5F010
5403	 E6	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFE001B5F010
- stack 0: 0xF0
5404	 E8	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x18F
5405	 E9	JUMP		 	 
- stack 0: 0x74C
5406	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x74C
5407	 190	PUSH4	0ff01000	 	 
- stack 1: 0x74C
- stack 0: 0xFF01000
5408	 195	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0xFF01000
- stack 0: 0x20
5409	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x74C
5410	 199	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5411	 19B	ADD		 	 
- stack 0: 0x750
5412	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5413	 19D	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
5414	 19E	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xF0
5415	 1A0	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99
5416	 1A1	JUMP		 	 
- stack 0: 0x750
5417	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x750
5418	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5419	 9B	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
5420	 9C	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xE0
5421	 9E	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99FFF0
5422	 9F	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5423	 A2	AND		 	 
- stack 1: 0x750
- stack 0: 0xFFF0
5424	 A3	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0xFFF0
- stack 0: 0x1
5425	 A5	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5426	 A6	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5427	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5428	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x750
- stack 0: 0xFF00FF0
5429	 AB	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF00FF0
- stack 0: 0x20
5430	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5431	 AF	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5432	 B1	ADD		 	 
- stack 0: 0x754
5433	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5434	 B3	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
5435	 B4	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
- stack 0: 0xF0
5436	 B6	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3ED
5437	 B7	JUMP		 	 
- stack 0: 0x754
5438	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x754
5439	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5440	 3EF	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
5441	 3F0	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
- stack 0: 0xE0
5442	 3F2	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3ED0000
5443	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
5444	 3F6	AND		 	 
- stack 1: 0x754
- stack 0: 0x0
5445	 3F7	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x1
5446	 3F9	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x0
5447	 3FA	POP		 	 
- stack 0: 0x754
5448	 3FB	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5449	 3FD	ADD		 	 
- stack 0: 0x758
5450	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5451	 3FF	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xEA000003300001034F00020369FFE001B5F0100114FF0001330013014D015C
5452	 400	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xEA000003300001034F00020369FFE001B5F0100114FF0001330013014D015C
- stack 0: 0xF0
5453	 402	SHR		 	 
- stack 1: 0x758
- stack 0: 0xEA
5454	 403	JUMP		 	 
- stack 0: 0x758
5455	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x758
5456	 EB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5457	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xF0F0F0F0
5458	 EF	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5459	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5460	 F3	XOR		 	  ;; # XOR
- stack 1: 0x758
- stack 0: 0xFF00FF00
5461	 F4	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0xFF00FF00
- stack 0: 0x60
5462	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5463	 F8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5464	 FA	ADD		 	 
- stack 0: 0x75C
5465	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5466	 FC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
5467	 FD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
- stack 0: 0xF0
5468	 FF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x330
5469	 100	JUMP		 	 
- stack 0: 0x75C
5470	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5471	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5472	 332	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
5473	 333	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
- stack 0: 0xE0
5474	 335	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3300001
5475	 336	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3300001
- stack 0: 0xFFFF
5476	 339	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5477	 33A	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5478	 33C	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5479	 33D	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5480	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x0
5481	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x1
5482	 342	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5483	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5484	 346	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5485	 348	ADD		 	 
- stack 0: 0x760
5486	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5487	 34A	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
5488	 34B	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
- stack 0: 0xF0
5489	 34D	SHR		 	 
- stack 1: 0x760
- stack 0: 0x34F
5490	 34E	JUMP		 	 
- stack 0: 0x760
5491	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5492	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5493	 351	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
5494	 352	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
- stack 0: 0xE0
5495	 354	SHR		 	 
- stack 1: 0x760
- stack 0: 0x34F0002
5496	 355	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5497	 358	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5498	 359	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5499	 35B	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5500	 35C	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5501	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5502	 360	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5503	 362	ADD		 	 
- stack 0: 0x764
5504	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5505	 364	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
5506	 365	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
- stack 0: 0xF0
5507	 367	SHR		 	 
- stack 1: 0x764
- stack 0: 0x369
5508	 368	JUMP		 	 
- stack 0: 0x764
5509	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x764
5510	 36A	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5511	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x1
5512	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5513	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x1
5514	 374	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0xA0
5515	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5516	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5517	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x2
5518	 37E	SUB		 	 
- stack 1: 0x764
- stack 0: 0x1
5519	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x764
- stack 1: 0x1
- stack 0: 0x387
5520	 382	JUMPI		 	 
- stack 0: 0x764
5521	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x764
5522	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x764
- stack 0: 0x764
5523	 389	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
5524	 38A	PUSH1	E0	 	 
- stack 2: 0x764
- stack 1: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
- stack 0: 0xE0
5525	 38C	SHR		 	 
- stack 1: 0x764
- stack 0: 0x369FFE0
5526	 38D	PUSH2	FFFF	 	 
- stack 2: 0x764
- stack 1: 0x369FFE0
- stack 0: 0xFFFF
5527	 390	AND		 	 
- stack 1: 0x764
- stack 0: 0xFFE0
5528	 391	PUSH1	01	 	 
- stack 2: 0x764
- stack 1: 0xFFE0
- stack 0: 0x1
5529	 393	SIGNEXTEND		 	 
- stack 1: 0x764
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
5530	 394	ADD		 	 
- stack 0: 0x744
5531	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x744
- stack 0: 0xFFFFFFFF
5532	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x744
5533	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x744
- stack 0: 0x744
5534	 39C	MLOAD		 	 
- stack 1: 0x744
- stack 0: 0x1A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001034F0002
5535	 39D	PUSH1	F0	 	 
- stack 2: 0x744
- stack 1: 0x1A20F0F00CB00F0018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xF0
5536	 39F	SHR		 	 
- stack 1: 0x744
- stack 0: 0x1A2
5537	 3A0	JUMP		 	 
- stack 0: 0x744
5538	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x744
5539	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x744
- stack 0: 0xF0F0F000
5540	 1A8	PUSH2	0040	 	 
- stack 2: 0x744
- stack 1: 0xF0F0F000
- stack 0: 0x40
5541	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x744
5542	 1AC	PUSH1	04	 	 
- stack 1: 0x744
- stack 0: 0x4
5543	 1AE	ADD		 	 
- stack 0: 0x748
5544	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x748
- stack 0: 0x748
5545	 1B0	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
5546	 1B1	PUSH1	F0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xF0
5547	 1B3	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB
5548	 1B4	JUMP		 	 
- stack 0: 0x748
5549	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x748
5550	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x748
- stack 0: 0x748
5551	 CD	MLOAD		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
5552	 CE	PUSH1	E0	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0018FFF010099FFF003ED000000EA000003300001034F00020369FFE0
- stack 0: 0xE0
5553	 D0	SHR		 	 
- stack 1: 0x748
- stack 0: 0xCB00F0
5554	 D1	PUSH2	FFFF	 	 
- stack 2: 0x748
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
5555	 D4	AND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5556	 D5	PUSH1	01	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x1
5557	 D7	SIGNEXTEND		 	 
- stack 1: 0x748
- stack 0: 0xF0
5558	 D8	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0x40
5559	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x748
- stack 1: 0xF0
- stack 0: 0xF0F0F000
5560	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x748
- stack 0: 0xF0F0F0F0
5561	 DD	PUSH2	0040	 	 
- stack 2: 0x748
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
5562	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x748
5563	 E1	PUSH1	04	 	 
- stack 1: 0x748
- stack 0: 0x4
5564	 E3	ADD		 	 
- stack 0: 0x74C
5565	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x74C
- stack 0: 0x74C
5566	 E5	MLOAD		 	 
- stack 1: 0x74C
- stack 0: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFE001B5F010
5567	 E6	PUSH1	F0	 	 
- stack 2: 0x74C
- stack 1: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFE001B5F010
- stack 0: 0xF0
5568	 E8	SHR		 	 
- stack 1: 0x74C
- stack 0: 0x18F
5569	 E9	JUMP		 	 
- stack 0: 0x74C
5570	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x74C
5571	 190	PUSH4	0ff01000	 	 
- stack 1: 0x74C
- stack 0: 0xFF01000
5572	 195	PUSH2	0020	 	 
- stack 2: 0x74C
- stack 1: 0xFF01000
- stack 0: 0x20
5573	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x74C
5574	 199	PUSH1	04	 	 
- stack 1: 0x74C
- stack 0: 0x4
5575	 19B	ADD		 	 
- stack 0: 0x750
5576	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x750
- stack 0: 0x750
5577	 19D	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
5578	 19E	PUSH1	F0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xF0
5579	 1A0	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99
5580	 1A1	JUMP		 	 
- stack 0: 0x750
5581	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x750
5582	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x750
- stack 0: 0x750
5583	 9B	MLOAD		 	 
- stack 1: 0x750
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
5584	 9C	PUSH1	E0	 	 
- stack 2: 0x750
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFE001B5F0100114FF00
- stack 0: 0xE0
5585	 9E	SHR		 	 
- stack 1: 0x750
- stack 0: 0x99FFF0
5586	 9F	PUSH2	FFFF	 	 
- stack 2: 0x750
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
5587	 A2	AND		 	 
- stack 1: 0x750
- stack 0: 0xFFF0
5588	 A3	PUSH1	01	 	 
- stack 2: 0x750
- stack 1: 0xFFF0
- stack 0: 0x1
5589	 A5	SIGNEXTEND		 	 
- stack 1: 0x750
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
5590	 A6	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
5591	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x750
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
5592	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x750
- stack 0: 0xFF00FF0
5593	 AB	PUSH2	0020	 	 
- stack 2: 0x750
- stack 1: 0xFF00FF0
- stack 0: 0x20
5594	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x750
5595	 AF	PUSH1	04	 	 
- stack 1: 0x750
- stack 0: 0x4
5596	 B1	ADD		 	 
- stack 0: 0x754
5597	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x754
- stack 0: 0x754
5598	 B3	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
5599	 B4	PUSH1	F0	 	 
- stack 2: 0x754
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
- stack 0: 0xF0
5600	 B6	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3ED
5601	 B7	JUMP		 	 
- stack 0: 0x754
5602	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x754
5603	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x754
- stack 0: 0x754
5604	 3EF	MLOAD		 	 
- stack 1: 0x754
- stack 0: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
5605	 3F0	PUSH1	E0	 	 
- stack 2: 0x754
- stack 1: 0x3ED000000EA000003300001034F00020369FFE001B5F0100114FF0001330013
- stack 0: 0xE0
5606	 3F2	SHR		 	 
- stack 1: 0x754
- stack 0: 0x3ED0000
5607	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x754
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
5608	 3F6	AND		 	 
- stack 1: 0x754
- stack 0: 0x0
5609	 3F7	PUSH1	01	 	 
- stack 2: 0x754
- stack 1: 0x0
- stack 0: 0x1
5610	 3F9	SIGNEXTEND		 	 
- stack 1: 0x754
- stack 0: 0x0
5611	 3FA	POP		 	 
- stack 0: 0x754
5612	 3FB	PUSH1	04	 	 
- stack 1: 0x754
- stack 0: 0x4
5613	 3FD	ADD		 	 
- stack 0: 0x758
5614	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x758
- stack 0: 0x758
5615	 3FF	MLOAD		 	 
- stack 1: 0x758
- stack 0: 0xEA000003300001034F00020369FFE001B5F0100114FF0001330013014D015C
5616	 400	PUSH1	F0	 	 
- stack 2: 0x758
- stack 1: 0xEA000003300001034F00020369FFE001B5F0100114FF0001330013014D015C
- stack 0: 0xF0
5617	 402	SHR		 	 
- stack 1: 0x758
- stack 0: 0xEA
5618	 403	JUMP		 	 
- stack 0: 0x758
5619	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x758
5620	 EB	PUSH2	0040	 	 
- stack 1: 0x758
- stack 0: 0x40
5621	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x758
- stack 0: 0xF0F0F0F0
5622	 EF	PUSH2	0020	 	 
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
5623	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x758
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
5624	 F3	XOR		 	  ;; # XOR
- stack 1: 0x758
- stack 0: 0xFF00FF00
5625	 F4	PUSH2	0060	 	 
- stack 2: 0x758
- stack 1: 0xFF00FF00
- stack 0: 0x60
5626	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x758
5627	 F8	PUSH1	04	 	 
- stack 1: 0x758
- stack 0: 0x4
5628	 FA	ADD		 	 
- stack 0: 0x75C
5629	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x75C
- stack 0: 0x75C
5630	 FC	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
5631	 FD	PUSH1	F0	 	 
- stack 2: 0x75C
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
- stack 0: 0xF0
5632	 FF	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x330
5633	 100	JUMP		 	 
- stack 0: 0x75C
5634	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x75C
5635	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x75C
- stack 0: 0x75C
5636	 332	MLOAD		 	 
- stack 1: 0x75C
- stack 0: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
5637	 333	PUSH1	E0	 	 
- stack 2: 0x75C
- stack 1: 0x3300001034F00020369FFE001B5F0100114FF0001330013014D015C02F70000
- stack 0: 0xE0
5638	 335	SHR		 	 
- stack 1: 0x75C
- stack 0: 0x3300001
5639	 336	PUSH2	FFFF	 	 
- stack 2: 0x75C
- stack 1: 0x3300001
- stack 0: 0xFFFF
5640	 339	AND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5641	 33A	PUSH1	01	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5642	 33C	SIGNEXTEND		 	 
- stack 1: 0x75C
- stack 0: 0x1
5643	 33D	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x80
5644	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x75C
- stack 1: 0x1
- stack 0: 0x1
5645	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x75C
- stack 0: 0x2
5646	 342	PUSH2	0080	 	 
- stack 2: 0x75C
- stack 1: 0x2
- stack 0: 0x80
5647	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x75C
5648	 346	PUSH1	04	 	 
- stack 1: 0x75C
- stack 0: 0x4
5649	 348	ADD		 	 
- stack 0: 0x760
5650	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x760
- stack 0: 0x760
5651	 34A	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
5652	 34B	PUSH1	F0	 	 
- stack 2: 0x760
- stack 1: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
- stack 0: 0xF0
5653	 34D	SHR		 	 
- stack 1: 0x760
- stack 0: 0x34F
5654	 34E	JUMP		 	 
- stack 0: 0x760
5655	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x760
5656	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x760
- stack 0: 0x760
5657	 351	MLOAD		 	 
- stack 1: 0x760
- stack 0: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
5658	 352	PUSH1	E0	 	 
- stack 2: 0x760
- stack 1: 0x34F00020369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F1
- stack 0: 0xE0
5659	 354	SHR		 	 
- stack 1: 0x760
- stack 0: 0x34F0002
5660	 355	PUSH2	FFFF	 	 
- stack 2: 0x760
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5661	 358	AND		 	 
- stack 1: 0x760
- stack 0: 0x2
5662	 359	PUSH1	01	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0x1
5663	 35B	SIGNEXTEND		 	 
- stack 1: 0x760
- stack 0: 0x2
5664	 35C	PUSH2	00A0	 	 
- stack 2: 0x760
- stack 1: 0x2
- stack 0: 0xA0
5665	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x760
5666	 360	PUSH1	04	 	 
- stack 1: 0x760
- stack 0: 0x4
5667	 362	ADD		 	 
- stack 0: 0x764
5668	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x764
- stack 0: 0x764
5669	 364	MLOAD		 	 
- stack 1: 0x764
- stack 0: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
5670	 365	PUSH1	F0	 	 
- stack 2: 0x764
- stack 1: 0x369FFE001B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F
- stack 0: 0xF0
5671	 367	SHR		 	 
- stack 1: 0x764
- stack 0: 0x369
5672	 368	JUMP		 	 
- stack 0: 0x764
5673	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x764
5674	 36A	PUSH2	0080	 	 
- stack 1: 0x764
- stack 0: 0x80
5675	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x764
- stack 0: 0x2
5676	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5677	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x764
- stack 0: 0x2
5678	 374	PUSH2	00A0	 	 
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0xA0
5679	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5680	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x764
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5681	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x764
- stack 1: 0x2
- stack 0: 0x2
5682	 37E	SUB		 	 
- stack 1: 0x764
- stack 0: 0x0
5683	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x764
- stack 1: 0x0
- stack 0: 0x387
5684	 382	JUMPI		 	 
- stack 0: 0x764
5685	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x764
- stack 0: 0x3A1
5686	 386	JUMP		 	 
- stack 0: 0x764
5687	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x764
5688	 3A2	PUSH1	04	 	 
- stack 1: 0x764
- stack 0: 0x4
5689	 3A4	ADD		 	 
- stack 0: 0x768
5690	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x768
- stack 0: 0x768
5691	 3A6	MLOAD		 	 
- stack 1: 0x768
- stack 0: 0x1B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0
5692	 3A7	PUSH1	F0	 	 
- stack 2: 0x768
- stack 1: 0x1B5F0100114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0
- stack 0: 0xF0
5693	 3A9	SHR		 	 
- stack 1: 0x768
- stack 0: 0x1B5
5694	 3AA	JUMP		 	 
- stack 0: 0x768
5695	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x768
5696	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x768
- stack 0: 0xFF010000
5697	 1BB	PUSH2	03A0	 	 
- stack 2: 0x768
- stack 1: 0xFF010000
- stack 0: 0x3A0
5698	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x768
5699	 1BF	PUSH1	04	 	 
- stack 1: 0x768
- stack 0: 0x4
5700	 1C1	ADD		 	 
- stack 0: 0x76C
5701	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x76C
- stack 0: 0x76C
5702	 1C3	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF
5703	 1C4	PUSH1	F0	 	 
- stack 2: 0x76C
- stack 1: 0x114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xF0
5704	 1C6	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x114
5705	 1C7	JUMP		 	 
- stack 0: 0x76C
5706	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x76C
5707	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x76C
- stack 0: 0x76C
5708	 116	MLOAD		 	 
- stack 1: 0x76C
- stack 0: 0x114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF
5709	 117	PUSH1	E0	 	 
- stack 2: 0x76C
- stack 1: 0x114FF0001330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF
- stack 0: 0xE0
5710	 119	SHR		 	 
- stack 1: 0x76C
- stack 0: 0x114FF00
5711	 11A	PUSH2	FFFF	 	 
- stack 2: 0x76C
- stack 1: 0x114FF00
- stack 0: 0xFFFF
5712	 11D	AND		 	 
- stack 1: 0x76C
- stack 0: 0xFF00
5713	 11E	PUSH1	01	 	 
- stack 2: 0x76C
- stack 1: 0xFF00
- stack 0: 0x1
5714	 120	SIGNEXTEND		 	 
- stack 1: 0x76C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
5715	 121	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
5716	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x76C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
5717	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x76C
- stack 0: 0xFF00FF00
5718	 126	PUSH2	03A0	 	 
- stack 2: 0x76C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
5719	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x76C
5720	 12A	PUSH1	04	 	 
- stack 1: 0x76C
- stack 0: 0x4
5721	 12C	ADD		 	 
- stack 0: 0x770
5722	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x770
- stack 0: 0x770
5723	 12E	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x1330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED0000
5724	 12F	PUSH1	F0	 	 
- stack 2: 0x770
- stack 1: 0x1330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED0000
- stack 0: 0xF0
5725	 131	SHR		 	 
- stack 1: 0x770
- stack 0: 0x133
5726	 132	JUMP		 	 
- stack 0: 0x770
5727	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x770
5728	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x770
- stack 0: 0x770
5729	 135	MLOAD		 	 
- stack 1: 0x770
- stack 0: 0x1330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED0000
5730	 136	PUSH1	E0	 	 
- stack 2: 0x770
- stack 1: 0x1330013014D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED0000
- stack 0: 0xE0
5731	 138	SHR		 	 
- stack 1: 0x770
- stack 0: 0x1330013
5732	 139	PUSH2	FFFF	 	 
- stack 2: 0x770
- stack 1: 0x1330013
- stack 0: 0xFFFF
5733	 13C	AND		 	 
- stack 1: 0x770
- stack 0: 0x13
5734	 13D	PUSH1	01	 	 
- stack 2: 0x770
- stack 1: 0x13
- stack 0: 0x1
5735	 13F	SIGNEXTEND		 	 
- stack 1: 0x770
- stack 0: 0x13
5736	 140	PUSH2	0380	 	 
- stack 2: 0x770
- stack 1: 0x13
- stack 0: 0x380
5737	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x770
5738	 144	PUSH1	04	 	 
- stack 1: 0x770
- stack 0: 0x4
5739	 146	ADD		 	 
- stack 0: 0x774
5740	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x774
- stack 0: 0x774
5741	 148	MLOAD		 	 
- stack 1: 0x774
- stack 0: 0x14D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED0000
5742	 149	PUSH1	F0	 	 
- stack 2: 0x774
- stack 1: 0x14D015C02F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED0000
- stack 0: 0xF0
5743	 14B	SHR		 	 
- stack 1: 0x774
- stack 0: 0x14D
5744	 14C	JUMP		 	 
- stack 0: 0x774
5745	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x774
5746	 14E	PUSH2	0060	 	 
- stack 1: 0x774
- stack 0: 0x60
5747	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x774
- stack 0: 0xFF00FF00
5748	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x774
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
5749	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x774
- stack 0: 0xFF00FF00
5750	 158	PUSH2	03A0	 	 
- stack 2: 0x774
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
5751	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x774
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
5752	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x774
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
5753	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x774
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
5754	 162	SUB		 	 
- stack 1: 0x774
- stack 0: 0x0
5755	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x774
- stack 1: 0x0
- stack 0: 0x16B
5756	 166	JUMPI		 	 
- stack 0: 0x774
5757	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x774
- stack 0: 0x185
5758	 16A	JUMP		 	 
- stack 0: 0x774
5759	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x774
5760	 186	PUSH1	04	 	 
- stack 1: 0x774
- stack 0: 0x4
5761	 188	ADD		 	 
- stack 0: 0x778
5762	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x778
- stack 0: 0x778
5763	 18A	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x2F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA0000
5764	 18B	PUSH1	F0	 	 
- stack 2: 0x778
- stack 1: 0x2F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA0000
- stack 0: 0xF0
5765	 18D	SHR		 	 
- stack 1: 0x778
- stack 0: 0x2F7
5766	 18E	JUMP		 	 
- stack 0: 0x778
5767	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x778
5768	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x778
- stack 0: 0x778
5769	 2F9	MLOAD		 	 
- stack 1: 0x778
- stack 0: 0x2F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA0000
5770	 2FA	PUSH1	E0	 	 
- stack 2: 0x778
- stack 1: 0x2F7000000B8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA0000
- stack 0: 0xE0
5771	 2FC	SHR		 	 
- stack 1: 0x778
- stack 0: 0x2F70000
5772	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x778
- stack 1: 0x2F70000
- stack 0: 0xFFFF
5773	 300	AND		 	 
- stack 1: 0x778
- stack 0: 0x0
5774	 301	PUSH1	01	 	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x1
5775	 303	SIGNEXTEND		 	 
- stack 1: 0x778
- stack 0: 0x0
5776	 304	PUSH2	0080	 	 
- stack 2: 0x778
- stack 1: 0x0
- stack 0: 0x80
5777	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x778
5778	 308	PUSH1	04	 	 
- stack 1: 0x778
- stack 0: 0x4
5779	 30A	ADD		 	 
- stack 0: 0x77C
5780	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5781	 30C	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001
5782	 30D	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001
- stack 0: 0xF0
5783	 30F	SHR		 	 
- stack 1: 0x77C
- stack 0: 0xB8
5784	 310	JUMP		 	 
- stack 0: 0x77C
5785	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x77C
5786	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x77C
- stack 0: 0xF0F1000
5787	 BE	PUSH2	0040	 	 
- stack 2: 0x77C
- stack 1: 0xF0F1000
- stack 0: 0x40
5788	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x77C
5789	 C2	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5790	 C4	ADD		 	 
- stack 0: 0x780
5791	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5792	 C6	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
5793	 C7	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
- stack 0: 0xF0
5794	 C9	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCB
5795	 CA	JUMP		 	 
- stack 0: 0x780
5796	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x780
5797	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5798	 CD	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
5799	 CE	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
- stack 0: 0xE0
5800	 D0	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F
5801	 D1	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5802	 D4	AND		 	 
- stack 1: 0x780
- stack 0: 0xFF0F
5803	 D5	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFF0F
- stack 0: 0x1
5804	 D7	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5805	 D8	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5806	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5807	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x780
- stack 0: 0xF0F0F0F
5808	 DD	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5809	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5810	 E1	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5811	 E3	ADD		 	 
- stack 0: 0x784
5812	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5813	 E5	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1C80FF0009900FF03ED000003ED000000EA000003300001034F00020369FFDC
5814	 E6	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1C80FF0009900FF03ED000003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
5815	 E8	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1C8
5816	 E9	JUMP		 	 
- stack 0: 0x784
5817	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x784
5818	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x784
- stack 0: 0xFF0000
5819	 1CE	PUSH2	0020	 	 
- stack 2: 0x784
- stack 1: 0xFF0000
- stack 0: 0x20
5820	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x784
5821	 1D2	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
5822	 1D4	ADD		 	 
- stack 0: 0x788
5823	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
5824	 1D6	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
5825	 1D7	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
5826	 1D9	SHR		 	 
- stack 1: 0x788
- stack 0: 0x99
5827	 1DA	JUMP		 	 
- stack 0: 0x788
5828	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x788
5829	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
5830	 9B	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
5831	 9C	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
5832	 9E	SHR		 	 
- stack 1: 0x788
- stack 0: 0x9900FF
5833	 9F	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x9900FF
- stack 0: 0xFFFF
5834	 A2	AND		 	 
- stack 1: 0x788
- stack 0: 0xFF
5835	 A3	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x1
5836	 A5	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0xFF
5837	 A6	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x20
5838	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0xFF0000
5839	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x788
- stack 0: 0xFF00FF
5840	 AB	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF00FF
- stack 0: 0x20
5841	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
5842	 AF	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
5843	 B1	ADD		 	 
- stack 0: 0x78C
5844	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
5845	 B3	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
5846	 B4	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
5847	 B6	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3ED
5848	 B7	JUMP		 	 
- stack 0: 0x78C
5849	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x78C
5850	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
5851	 3EF	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
5852	 3F0	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xE0
5853	 3F2	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3ED0000
5854	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
5855	 3F6	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5856	 3F7	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
5857	 3F9	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
5858	 3FA	POP		 	 
- stack 0: 0x78C
5859	 3FB	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
5860	 3FD	ADD		 	 
- stack 0: 0x790
5861	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
5862	 3FF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
5863	 400	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
- stack 0: 0xF0
5864	 402	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3ED
5865	 403	JUMP		 	 
- stack 0: 0x790
5866	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
5867	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
5868	 3EF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
5869	 3F0	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
- stack 0: 0xE0
5870	 3F2	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3ED0000
5871	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
5872	 3F6	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
5873	 3F7	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
5874	 3F9	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
5875	 3FA	POP		 	 
- stack 0: 0x790
5876	 3FB	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
5877	 3FD	ADD		 	 
- stack 0: 0x794
5878	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
5879	 3FF	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330014014D0120
5880	 400	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330014014D0120
- stack 0: 0xF0
5881	 402	SHR		 	 
- stack 1: 0x794
- stack 0: 0xEA
5882	 403	JUMP		 	 
- stack 0: 0x794
5883	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x794
5884	 EB	PUSH2	0040	 	 
- stack 1: 0x794
- stack 0: 0x40
5885	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x794
- stack 0: 0xF0F0F0F
5886	 EF	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0x20
5887	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
5888	 F3	XOR		 	  ;; # XOR
- stack 1: 0x794
- stack 0: 0xFF00FF0
5889	 F4	PUSH2	0060	 	 
- stack 2: 0x794
- stack 1: 0xFF00FF0
- stack 0: 0x60
5890	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x794
5891	 F8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
5892	 FA	ADD		 	 
- stack 0: 0x798
5893	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
5894	 FC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
5895	 FD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
- stack 0: 0xF0
5896	 FF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x330
5897	 100	JUMP		 	 
- stack 0: 0x798
5898	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x798
5899	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
5900	 332	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
5901	 333	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
- stack 0: 0xE0
5902	 335	SHR		 	 
- stack 1: 0x798
- stack 0: 0x3300001
5903	 336	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x3300001
- stack 0: 0xFFFF
5904	 339	AND		 	 
- stack 1: 0x798
- stack 0: 0x1
5905	 33A	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
5906	 33C	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x1
5907	 33D	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
5908	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x0
5909	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x798
- stack 0: 0x1
5910	 342	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
5911	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x798
5912	 346	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
5913	 348	ADD		 	 
- stack 0: 0x79C
5914	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
5915	 34A	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
5916	 34B	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
- stack 0: 0xF0
5917	 34D	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F
5918	 34E	JUMP		 	 
- stack 0: 0x79C
5919	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x79C
5920	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
5921	 351	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
5922	 352	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
- stack 0: 0xE0
5923	 354	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F0002
5924	 355	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
5925	 358	AND		 	 
- stack 1: 0x79C
- stack 0: 0x2
5926	 359	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x1
5927	 35B	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x2
5928	 35C	PUSH2	00A0	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0xA0
5929	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x79C
5930	 360	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
5931	 362	ADD		 	 
- stack 0: 0x7A0
5932	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
5933	 364	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
5934	 365	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
- stack 0: 0xF0
5935	 367	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x369
5936	 368	JUMP		 	 
- stack 0: 0x7A0
5937	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A0
5938	 36A	PUSH2	0080	 	 
- stack 1: 0x7A0
- stack 0: 0x80
5939	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A0
- stack 0: 0x1
5940	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
5941	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x1
5942	 374	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0xA0
5943	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x2
5944	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
5945	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x2
5946	 37E	SUB		 	 
- stack 1: 0x7A0
- stack 0: 0x1
5947	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x7A0
- stack 1: 0x1
- stack 0: 0x387
5948	 382	JUMPI		 	 
- stack 0: 0x7A0
5949	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x7A0
5950	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A0
- stack 0: 0x7A0
5951	 389	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
5952	 38A	PUSH1	E0	 	 
- stack 2: 0x7A0
- stack 1: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
- stack 0: 0xE0
5953	 38C	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x369FFDC
5954	 38D	PUSH2	FFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
5955	 390	AND		 	 
- stack 1: 0x7A0
- stack 0: 0xFFDC
5956	 391	PUSH1	01	 	 
- stack 2: 0x7A0
- stack 1: 0xFFDC
- stack 0: 0x1
5957	 393	SIGNEXTEND		 	 
- stack 1: 0x7A0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
5958	 394	ADD		 	 
- stack 0: 0x77C
5959	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x77C
- stack 0: 0xFFFFFFFF
5960	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x77C
5961	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x77C
- stack 0: 0x77C
5962	 39C	MLOAD		 	 
- stack 1: 0x77C
- stack 0: 0xB8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001
5963	 39D	PUSH1	F0	 	 
- stack 2: 0x77C
- stack 1: 0xB8F0F100CBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001
- stack 0: 0xF0
5964	 39F	SHR		 	 
- stack 1: 0x77C
- stack 0: 0xB8
5965	 3A0	JUMP		 	 
- stack 0: 0x77C
5966	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x77C
5967	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x77C
- stack 0: 0xF0F1000
5968	 BE	PUSH2	0040	 	 
- stack 2: 0x77C
- stack 1: 0xF0F1000
- stack 0: 0x40
5969	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x77C
5970	 C2	PUSH1	04	 	 
- stack 1: 0x77C
- stack 0: 0x4
5971	 C4	ADD		 	 
- stack 0: 0x780
5972	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x780
- stack 0: 0x780
5973	 C6	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
5974	 C7	PUSH1	F0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
- stack 0: 0xF0
5975	 C9	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCB
5976	 CA	JUMP		 	 
- stack 0: 0x780
5977	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x780
5978	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x780
- stack 0: 0x780
5979	 CD	MLOAD		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
5980	 CE	PUSH1	E0	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F01C80FF0009900FF03ED000003ED000000EA000003300001034F0002
- stack 0: 0xE0
5981	 D0	SHR		 	 
- stack 1: 0x780
- stack 0: 0xCBFF0F
5982	 D1	PUSH2	FFFF	 	 
- stack 2: 0x780
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
5983	 D4	AND		 	 
- stack 1: 0x780
- stack 0: 0xFF0F
5984	 D5	PUSH1	01	 	 
- stack 2: 0x780
- stack 1: 0xFF0F
- stack 0: 0x1
5985	 D7	SIGNEXTEND		 	 
- stack 1: 0x780
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
5986	 D8	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
5987	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x780
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
5988	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x780
- stack 0: 0xF0F0F0F
5989	 DD	PUSH2	0040	 	 
- stack 2: 0x780
- stack 1: 0xF0F0F0F
- stack 0: 0x40
5990	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x780
5991	 E1	PUSH1	04	 	 
- stack 1: 0x780
- stack 0: 0x4
5992	 E3	ADD		 	 
- stack 0: 0x784
5993	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x784
- stack 0: 0x784
5994	 E5	MLOAD		 	 
- stack 1: 0x784
- stack 0: 0x1C80FF0009900FF03ED000003ED000000EA000003300001034F00020369FFDC
5995	 E6	PUSH1	F0	 	 
- stack 2: 0x784
- stack 1: 0x1C80FF0009900FF03ED000003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
5996	 E8	SHR		 	 
- stack 1: 0x784
- stack 0: 0x1C8
5997	 E9	JUMP		 	 
- stack 0: 0x784
5998	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x784
5999	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x784
- stack 0: 0xFF0000
6000	 1CE	PUSH2	0020	 	 
- stack 2: 0x784
- stack 1: 0xFF0000
- stack 0: 0x20
6001	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x784
6002	 1D2	PUSH1	04	 	 
- stack 1: 0x784
- stack 0: 0x4
6003	 1D4	ADD		 	 
- stack 0: 0x788
6004	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x788
- stack 0: 0x788
6005	 1D6	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
6006	 1D7	PUSH1	F0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
6007	 1D9	SHR		 	 
- stack 1: 0x788
- stack 0: 0x99
6008	 1DA	JUMP		 	 
- stack 0: 0x788
6009	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x788
6010	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x788
- stack 0: 0x788
6011	 9B	MLOAD		 	 
- stack 1: 0x788
- stack 0: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
6012	 9C	PUSH1	E0	 	 
- stack 2: 0x788
- stack 1: 0x9900FF03ED000003ED000000EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
6013	 9E	SHR		 	 
- stack 1: 0x788
- stack 0: 0x9900FF
6014	 9F	PUSH2	FFFF	 	 
- stack 2: 0x788
- stack 1: 0x9900FF
- stack 0: 0xFFFF
6015	 A2	AND		 	 
- stack 1: 0x788
- stack 0: 0xFF
6016	 A3	PUSH1	01	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x1
6017	 A5	SIGNEXTEND		 	 
- stack 1: 0x788
- stack 0: 0xFF
6018	 A6	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0x20
6019	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x788
- stack 1: 0xFF
- stack 0: 0xFF0000
6020	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x788
- stack 0: 0xFF00FF
6021	 AB	PUSH2	0020	 	 
- stack 2: 0x788
- stack 1: 0xFF00FF
- stack 0: 0x20
6022	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x788
6023	 AF	PUSH1	04	 	 
- stack 1: 0x788
- stack 0: 0x4
6024	 B1	ADD		 	 
- stack 0: 0x78C
6025	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x78C
- stack 0: 0x78C
6026	 B3	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
6027	 B4	PUSH1	F0	 	 
- stack 2: 0x78C
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
6028	 B6	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3ED
6029	 B7	JUMP		 	 
- stack 0: 0x78C
6030	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x78C
6031	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x78C
- stack 0: 0x78C
6032	 3EF	MLOAD		 	 
- stack 1: 0x78C
- stack 0: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
6033	 3F0	PUSH1	E0	 	 
- stack 2: 0x78C
- stack 1: 0x3ED000003ED000000EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xE0
6034	 3F2	SHR		 	 
- stack 1: 0x78C
- stack 0: 0x3ED0000
6035	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x78C
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6036	 3F6	AND		 	 
- stack 1: 0x78C
- stack 0: 0x0
6037	 3F7	PUSH1	01	 	 
- stack 2: 0x78C
- stack 1: 0x0
- stack 0: 0x1
6038	 3F9	SIGNEXTEND		 	 
- stack 1: 0x78C
- stack 0: 0x0
6039	 3FA	POP		 	 
- stack 0: 0x78C
6040	 3FB	PUSH1	04	 	 
- stack 1: 0x78C
- stack 0: 0x4
6041	 3FD	ADD		 	 
- stack 0: 0x790
6042	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x790
- stack 0: 0x790
6043	 3FF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
6044	 400	PUSH1	F0	 	 
- stack 2: 0x790
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
- stack 0: 0xF0
6045	 402	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3ED
6046	 403	JUMP		 	 
- stack 0: 0x790
6047	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x790
6048	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x790
- stack 0: 0x790
6049	 3EF	MLOAD		 	 
- stack 1: 0x790
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
6050	 3F0	PUSH1	E0	 	 
- stack 2: 0x790
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01DBFF010114FFF001330014
- stack 0: 0xE0
6051	 3F2	SHR		 	 
- stack 1: 0x790
- stack 0: 0x3ED0000
6052	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x790
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6053	 3F6	AND		 	 
- stack 1: 0x790
- stack 0: 0x0
6054	 3F7	PUSH1	01	 	 
- stack 2: 0x790
- stack 1: 0x0
- stack 0: 0x1
6055	 3F9	SIGNEXTEND		 	 
- stack 1: 0x790
- stack 0: 0x0
6056	 3FA	POP		 	 
- stack 0: 0x790
6057	 3FB	PUSH1	04	 	 
- stack 1: 0x790
- stack 0: 0x4
6058	 3FD	ADD		 	 
- stack 0: 0x794
6059	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x794
- stack 0: 0x794
6060	 3FF	MLOAD		 	 
- stack 1: 0x794
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330014014D0120
6061	 400	PUSH1	F0	 	 
- stack 2: 0x794
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330014014D0120
- stack 0: 0xF0
6062	 402	SHR		 	 
- stack 1: 0x794
- stack 0: 0xEA
6063	 403	JUMP		 	 
- stack 0: 0x794
6064	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x794
6065	 EB	PUSH2	0040	 	 
- stack 1: 0x794
- stack 0: 0x40
6066	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x794
- stack 0: 0xF0F0F0F
6067	 EF	PUSH2	0020	 	 
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6068	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x794
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
6069	 F3	XOR		 	  ;; # XOR
- stack 1: 0x794
- stack 0: 0xFF00FF0
6070	 F4	PUSH2	0060	 	 
- stack 2: 0x794
- stack 1: 0xFF00FF0
- stack 0: 0x60
6071	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x794
6072	 F8	PUSH1	04	 	 
- stack 1: 0x794
- stack 0: 0x4
6073	 FA	ADD		 	 
- stack 0: 0x798
6074	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x798
- stack 0: 0x798
6075	 FC	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
6076	 FD	PUSH1	F0	 	 
- stack 2: 0x798
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
- stack 0: 0xF0
6077	 FF	SHR		 	 
- stack 1: 0x798
- stack 0: 0x330
6078	 100	JUMP		 	 
- stack 0: 0x798
6079	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x798
6080	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x798
- stack 0: 0x798
6081	 332	MLOAD		 	 
- stack 1: 0x798
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
6082	 333	PUSH1	E0	 	 
- stack 2: 0x798
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330014014D012002F70000
- stack 0: 0xE0
6083	 335	SHR		 	 
- stack 1: 0x798
- stack 0: 0x3300001
6084	 336	PUSH2	FFFF	 	 
- stack 2: 0x798
- stack 1: 0x3300001
- stack 0: 0xFFFF
6085	 339	AND		 	 
- stack 1: 0x798
- stack 0: 0x1
6086	 33A	PUSH1	01	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
6087	 33C	SIGNEXTEND		 	 
- stack 1: 0x798
- stack 0: 0x1
6088	 33D	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x80
6089	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x798
- stack 1: 0x1
- stack 0: 0x1
6090	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x798
- stack 0: 0x2
6091	 342	PUSH2	0080	 	 
- stack 2: 0x798
- stack 1: 0x2
- stack 0: 0x80
6092	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x798
6093	 346	PUSH1	04	 	 
- stack 1: 0x798
- stack 0: 0x4
6094	 348	ADD		 	 
- stack 0: 0x79C
6095	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x79C
- stack 0: 0x79C
6096	 34A	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
6097	 34B	PUSH1	F0	 	 
- stack 2: 0x79C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
- stack 0: 0xF0
6098	 34D	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F
6099	 34E	JUMP		 	 
- stack 0: 0x79C
6100	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x79C
6101	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x79C
- stack 0: 0x79C
6102	 351	MLOAD		 	 
- stack 1: 0x79C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
6103	 352	PUSH1	E0	 	 
- stack 2: 0x79C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F1
- stack 0: 0xE0
6104	 354	SHR		 	 
- stack 1: 0x79C
- stack 0: 0x34F0002
6105	 355	PUSH2	FFFF	 	 
- stack 2: 0x79C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6106	 358	AND		 	 
- stack 1: 0x79C
- stack 0: 0x2
6107	 359	PUSH1	01	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0x1
6108	 35B	SIGNEXTEND		 	 
- stack 1: 0x79C
- stack 0: 0x2
6109	 35C	PUSH2	00A0	 	 
- stack 2: 0x79C
- stack 1: 0x2
- stack 0: 0xA0
6110	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x79C
6111	 360	PUSH1	04	 	 
- stack 1: 0x79C
- stack 0: 0x4
6112	 362	ADD		 	 
- stack 0: 0x7A0
6113	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x7A0
- stack 0: 0x7A0
6114	 364	MLOAD		 	 
- stack 1: 0x7A0
- stack 0: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
6115	 365	PUSH1	F0	 	 
- stack 2: 0x7A0
- stack 1: 0x369FFDC01DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F
- stack 0: 0xF0
6116	 367	SHR		 	 
- stack 1: 0x7A0
- stack 0: 0x369
6117	 368	JUMP		 	 
- stack 0: 0x7A0
6118	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7A0
6119	 36A	PUSH2	0080	 	 
- stack 1: 0x7A0
- stack 0: 0x80
6120	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x7A0
- stack 0: 0x2
6121	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6122	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7A0
- stack 0: 0x2
6123	 374	PUSH2	00A0	 	 
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0xA0
6124	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x2
6125	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7A0
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6126	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7A0
- stack 1: 0x2
- stack 0: 0x2
6127	 37E	SUB		 	 
- stack 1: 0x7A0
- stack 0: 0x0
6128	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x7A0
- stack 1: 0x0
- stack 0: 0x387
6129	 382	JUMPI		 	 
- stack 0: 0x7A0
6130	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x7A0
- stack 0: 0x3A1
6131	 386	JUMP		 	 
- stack 0: 0x7A0
6132	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x7A0
6133	 3A2	PUSH1	04	 	 
- stack 1: 0x7A0
- stack 0: 0x4
6134	 3A4	ADD		 	 
- stack 0: 0x7A4
6135	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x7A4
- stack 0: 0x7A4
6136	 3A6	MLOAD		 	 
- stack 1: 0x7A4
- stack 0: 0x1DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED0000
6137	 3A7	PUSH1	F0	 	 
- stack 2: 0x7A4
- stack 1: 0x1DBFF010114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED0000
- stack 0: 0xF0
6138	 3A9	SHR		 	 
- stack 1: 0x7A4
- stack 0: 0x1DB
6139	 3AA	JUMP		 	 
- stack 0: 0x7A4
6140	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x7A4
6141	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x7A4
- stack 0: 0xFF01000
6142	 1E1	PUSH2	03A0	 	 
- stack 2: 0x7A4
- stack 1: 0xFF01000
- stack 0: 0x3A0
6143	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A4
6144	 1E5	PUSH1	04	 	 
- stack 1: 0x7A4
- stack 0: 0x4
6145	 1E7	ADD		 	 
- stack 0: 0x7A8
6146	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x7A8
- stack 0: 0x7A8
6147	 1E9	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED00000086F010
6148	 1EA	PUSH1	F0	 	 
- stack 2: 0x7A8
- stack 1: 0x114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED00000086F010
- stack 0: 0xF0
6149	 1EC	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x114
6150	 1ED	JUMP		 	 
- stack 0: 0x7A8
6151	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x7A8
6152	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7A8
- stack 0: 0x7A8
6153	 116	MLOAD		 	 
- stack 1: 0x7A8
- stack 0: 0x114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED00000086F010
6154	 117	PUSH1	E0	 	 
- stack 2: 0x7A8
- stack 1: 0x114FFF001330014014D012002F7000000B8F0F100CBFF0F03ED00000086F010
- stack 0: 0xE0
6155	 119	SHR		 	 
- stack 1: 0x7A8
- stack 0: 0x114FFF0
6156	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7A8
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
6157	 11D	AND		 	 
- stack 1: 0x7A8
- stack 0: 0xFFF0
6158	 11E	PUSH1	01	 	 
- stack 2: 0x7A8
- stack 1: 0xFFF0
- stack 0: 0x1
6159	 120	SIGNEXTEND		 	 
- stack 1: 0x7A8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6160	 121	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
6161	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7A8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6162	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7A8
- stack 0: 0xFF00FF0
6163	 126	PUSH2	03A0	 	 
- stack 2: 0x7A8
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
6164	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7A8
6165	 12A	PUSH1	04	 	 
- stack 1: 0x7A8
- stack 0: 0x4
6166	 12C	ADD		 	 
- stack 0: 0x7AC
6167	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7AC
- stack 0: 0x7AC
6168	 12E	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014014D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF00
6169	 12F	PUSH1	F0	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014014D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF00
- stack 0: 0xF0
6170	 131	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x133
6171	 132	JUMP		 	 
- stack 0: 0x7AC
6172	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7AC
6173	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7AC
- stack 0: 0x7AC
6174	 135	MLOAD		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014014D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF00
6175	 136	PUSH1	E0	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014014D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF00
- stack 0: 0xE0
6176	 138	SHR		 	 
- stack 1: 0x7AC
- stack 0: 0x1330014
6177	 139	PUSH2	FFFF	 	 
- stack 2: 0x7AC
- stack 1: 0x1330014
- stack 0: 0xFFFF
6178	 13C	AND		 	 
- stack 1: 0x7AC
- stack 0: 0x14
6179	 13D	PUSH1	01	 	 
- stack 2: 0x7AC
- stack 1: 0x14
- stack 0: 0x1
6180	 13F	SIGNEXTEND		 	 
- stack 1: 0x7AC
- stack 0: 0x14
6181	 140	PUSH2	0380	 	 
- stack 2: 0x7AC
- stack 1: 0x14
- stack 0: 0x380
6182	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7AC
6183	 144	PUSH1	04	 	 
- stack 1: 0x7AC
- stack 0: 0x4
6184	 146	ADD		 	 
- stack 0: 0x7B0
6185	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7B0
- stack 0: 0x7B0
6186	 148	MLOAD		 	 
- stack 1: 0x7B0
- stack 0: 0x14D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA0000
6187	 149	PUSH1	F0	 	 
- stack 2: 0x7B0
- stack 1: 0x14D012002F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA0000
- stack 0: 0xF0
6188	 14B	SHR		 	 
- stack 1: 0x7B0
- stack 0: 0x14D
6189	 14C	JUMP		 	 
- stack 0: 0x7B0
6190	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x7B0
6191	 14E	PUSH2	0060	 	 
- stack 1: 0x7B0
- stack 0: 0x60
6192	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7B0
- stack 0: 0xFF00FF0
6193	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7B0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
6194	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7B0
- stack 0: 0xFF00FF0
6195	 158	PUSH2	03A0	 	 
- stack 2: 0x7B0
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
6196	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7B0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
6197	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7B0
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
6198	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7B0
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
6199	 162	SUB		 	 
- stack 1: 0x7B0
- stack 0: 0x0
6200	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x7B0
- stack 1: 0x0
- stack 0: 0x16B
6201	 166	JUMPI		 	 
- stack 0: 0x7B0
6202	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x7B0
- stack 0: 0x185
6203	 16A	JUMP		 	 
- stack 0: 0x7B0
6204	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x7B0
6205	 186	PUSH1	04	 	 
- stack 1: 0x7B0
- stack 0: 0x4
6206	 188	ADD		 	 
- stack 0: 0x7B4
6207	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7B4
- stack 0: 0x7B4
6208	 18A	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001
6209	 18B	PUSH1	F0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001
- stack 0: 0xF0
6210	 18D	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F7
6211	 18E	JUMP		 	 
- stack 0: 0x7B4
6212	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7B4
6213	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7B4
- stack 0: 0x7B4
6214	 2F9	MLOAD		 	 
- stack 1: 0x7B4
- stack 0: 0x2F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001
6215	 2FA	PUSH1	E0	 	 
- stack 2: 0x7B4
- stack 1: 0x2F7000000B8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001
- stack 0: 0xE0
6216	 2FC	SHR		 	 
- stack 1: 0x7B4
- stack 0: 0x2F70000
6217	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7B4
- stack 1: 0x2F70000
- stack 0: 0xFFFF
6218	 300	AND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6219	 301	PUSH1	01	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x1
6220	 303	SIGNEXTEND		 	 
- stack 1: 0x7B4
- stack 0: 0x0
6221	 304	PUSH2	0080	 	 
- stack 2: 0x7B4
- stack 1: 0x0
- stack 0: 0x80
6222	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x7B4
6223	 308	PUSH1	04	 	 
- stack 1: 0x7B4
- stack 0: 0x4
6224	 30A	ADD		 	 
- stack 0: 0x7B8
6225	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6226	 30C	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xB8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001034F0002
6227	 30D	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xB8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001034F0002
- stack 0: 0xF0
6228	 30F	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xB8
6229	 310	JUMP		 	 
- stack 0: 0x7B8
6230	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7B8
6231	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7B8
- stack 0: 0xF0F1000
6232	 BE	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xF0F1000
- stack 0: 0x40
6233	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
6234	 C2	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6235	 C4	ADD		 	 
- stack 0: 0x7BC
6236	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6237	 C6	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
6238	 C7	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
- stack 0: 0xF0
6239	 C9	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCB
6240	 CA	JUMP		 	 
- stack 0: 0x7BC
6241	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7BC
6242	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6243	 CD	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
6244	 CE	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
- stack 0: 0xE0
6245	 D0	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F
6246	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6247	 D4	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xFF0F
6248	 D5	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xFF0F
- stack 0: 0x1
6249	 D7	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6250	 D8	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6251	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6252	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7BC
- stack 0: 0xF0F0F0F
6253	 DD	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6254	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6255	 E1	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6256	 E3	ADD		 	 
- stack 0: 0x7C0
6257	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6258	 E5	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
6259	 E6	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
6260	 E8	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED
6261	 E9	JUMP		 	 
- stack 0: 0x7C0
6262	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
6263	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6264	 3EF	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
6265	 3F0	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
- stack 0: 0xE0
6266	 3F2	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED0000
6267	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6268	 3F6	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6269	 3F7	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
6270	 3F9	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6271	 3FA	POP		 	 
- stack 0: 0x7C0
6272	 3FB	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6273	 3FD	ADD		 	 
- stack 0: 0x7C4
6274	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6275	 3FF	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86F0100099FF0000EA000003300001034F00020369FFE0010100FF0114000F
6276	 400	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86F0100099FF0000EA000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
6277	 402	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
6278	 403	JUMP		 	 
- stack 0: 0x7C4
6279	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C4
6280	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C4
- stack 0: 0xFF010000
6281	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFF010000
- stack 0: 0x20
6282	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
6283	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6284	 92	ADD		 	 
- stack 0: 0x7C8
6285	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6286	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
6287	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
- stack 0: 0xF0
6288	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99
6289	 98	JUMP		 	 
- stack 0: 0x7C8
6290	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7C8
6291	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6292	 9B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
6293	 9C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
- stack 0: 0xE0
6294	 9E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF00
6295	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6296	 A2	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xFF00
6297	 A3	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00
- stack 0: 0x1
6298	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6299	 A6	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6300	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6301	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7C8
- stack 0: 0xFF00FF00
6302	 AB	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
6303	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6304	 AF	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6305	 B1	ADD		 	 
- stack 0: 0x7CC
6306	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6307	 B3	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xEA000003300001034F00020369FFE0010100FF0114000F01330015014D00E8
6308	 B4	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xEA000003300001034F00020369FFE0010100FF0114000F01330015014D00E8
- stack 0: 0xF0
6309	 B6	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xEA
6310	 B7	JUMP		 	 
- stack 0: 0x7CC
6311	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x7CC
6312	 EB	PUSH2	0040	 	 
- stack 1: 0x7CC
- stack 0: 0x40
6313	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7CC
- stack 0: 0xF0F0F0F
6314	 EF	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6315	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6316	 F3	XOR		 	  ;; # XOR
- stack 1: 0x7CC
- stack 0: 0xF00FF00F
6317	 F4	PUSH2	0060	 	 
- stack 2: 0x7CC
- stack 1: 0xF00FF00F
- stack 0: 0x60
6318	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7CC
6319	 F8	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6320	 FA	ADD		 	 
- stack 0: 0x7D0
6321	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6322	 FC	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
6323	 FD	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
- stack 0: 0xF0
6324	 FF	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x330
6325	 100	JUMP		 	 
- stack 0: 0x7D0
6326	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D0
6327	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6328	 332	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
6329	 333	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
- stack 0: 0xE0
6330	 335	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001
6331	 336	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001
- stack 0: 0xFFFF
6332	 339	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6333	 33A	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6334	 33C	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6335	 33D	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6336	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x0
6337	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D0
- stack 0: 0x1
6338	 342	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6339	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D0
6340	 346	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6341	 348	ADD		 	 
- stack 0: 0x7D4
6342	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6343	 34A	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
6344	 34B	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
- stack 0: 0xF0
6345	 34D	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F
6346	 34E	JUMP		 	 
- stack 0: 0x7D4
6347	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D4
6348	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6349	 351	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
6350	 352	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
- stack 0: 0xE0
6351	 354	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F0002
6352	 355	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6353	 358	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6354	 359	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x1
6355	 35B	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6356	 35C	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
6357	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D4
6358	 360	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6359	 362	ADD		 	 
- stack 0: 0x7D8
6360	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6361	 364	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
6362	 365	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
- stack 0: 0xF0
6363	 367	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x369
6364	 368	JUMP		 	 
- stack 0: 0x7D8
6365	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7D8
6366	 36A	PUSH2	0080	 	 
- stack 1: 0x7D8
- stack 0: 0x80
6367	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D8
- stack 0: 0x1
6368	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6369	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x1
6370	 374	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0xA0
6371	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x2
6372	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6373	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x2
6374	 37E	SUB		 	 
- stack 1: 0x7D8
- stack 0: 0x1
6375	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x7D8
- stack 1: 0x1
- stack 0: 0x387
6376	 382	JUMPI		 	 
- stack 0: 0x7D8
6377	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x7D8
6378	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D8
- stack 0: 0x7D8
6379	 389	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
6380	 38A	PUSH1	E0	 	 
- stack 2: 0x7D8
- stack 1: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
- stack 0: 0xE0
6381	 38C	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x369FFE0
6382	 38D	PUSH2	FFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x369FFE0
- stack 0: 0xFFFF
6383	 390	AND		 	 
- stack 1: 0x7D8
- stack 0: 0xFFE0
6384	 391	PUSH1	01	 	 
- stack 2: 0x7D8
- stack 1: 0xFFE0
- stack 0: 0x1
6385	 393	SIGNEXTEND		 	 
- stack 1: 0x7D8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
6386	 394	ADD		 	 
- stack 0: 0x7B8
6387	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7B8
- stack 0: 0xFFFFFFFF
6388	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7B8
6389	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x7B8
- stack 0: 0x7B8
6390	 39C	MLOAD		 	 
- stack 1: 0x7B8
- stack 0: 0xB8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001034F0002
6391	 39D	PUSH1	F0	 	 
- stack 2: 0x7B8
- stack 1: 0xB8F0F100CBFF0F03ED00000086F0100099FF0000EA000003300001034F0002
- stack 0: 0xF0
6392	 39F	SHR		 	 
- stack 1: 0x7B8
- stack 0: 0xB8
6393	 3A0	JUMP		 	 
- stack 0: 0x7B8
6394	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x7B8
6395	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x7B8
- stack 0: 0xF0F1000
6396	 BE	PUSH2	0040	 	 
- stack 2: 0x7B8
- stack 1: 0xF0F1000
- stack 0: 0x40
6397	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x7B8
6398	 C2	PUSH1	04	 	 
- stack 1: 0x7B8
- stack 0: 0x4
6399	 C4	ADD		 	 
- stack 0: 0x7BC
6400	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x7BC
- stack 0: 0x7BC
6401	 C6	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
6402	 C7	PUSH1	F0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
- stack 0: 0xF0
6403	 C9	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCB
6404	 CA	JUMP		 	 
- stack 0: 0x7BC
6405	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7BC
6406	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7BC
- stack 0: 0x7BC
6407	 CD	MLOAD		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
6408	 CE	PUSH1	E0	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F03ED00000086F0100099FF0000EA000003300001034F00020369FFE0
- stack 0: 0xE0
6409	 D0	SHR		 	 
- stack 1: 0x7BC
- stack 0: 0xCBFF0F
6410	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7BC
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
6411	 D4	AND		 	 
- stack 1: 0x7BC
- stack 0: 0xFF0F
6412	 D5	PUSH1	01	 	 
- stack 2: 0x7BC
- stack 1: 0xFF0F
- stack 0: 0x1
6413	 D7	SIGNEXTEND		 	 
- stack 1: 0x7BC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
6414	 D8	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
6415	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7BC
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
6416	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7BC
- stack 0: 0xF0F0F0F
6417	 DD	PUSH2	0040	 	 
- stack 2: 0x7BC
- stack 1: 0xF0F0F0F
- stack 0: 0x40
6418	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7BC
6419	 E1	PUSH1	04	 	 
- stack 1: 0x7BC
- stack 0: 0x4
6420	 E3	ADD		 	 
- stack 0: 0x7C0
6421	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7C0
- stack 0: 0x7C0
6422	 E5	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
6423	 E6	PUSH1	F0	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
- stack 0: 0xF0
6424	 E8	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED
6425	 E9	JUMP		 	 
- stack 0: 0x7C0
6426	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7C0
6427	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C0
- stack 0: 0x7C0
6428	 3EF	MLOAD		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
6429	 3F0	PUSH1	E0	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED00000086F0100099FF0000EA000003300001034F00020369FFE0010100FF
- stack 0: 0xE0
6430	 3F2	SHR		 	 
- stack 1: 0x7C0
- stack 0: 0x3ED0000
6431	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x7C0
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6432	 3F6	AND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6433	 3F7	PUSH1	01	 	 
- stack 2: 0x7C0
- stack 1: 0x0
- stack 0: 0x1
6434	 3F9	SIGNEXTEND		 	 
- stack 1: 0x7C0
- stack 0: 0x0
6435	 3FA	POP		 	 
- stack 0: 0x7C0
6436	 3FB	PUSH1	04	 	 
- stack 1: 0x7C0
- stack 0: 0x4
6437	 3FD	ADD		 	 
- stack 0: 0x7C4
6438	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x7C4
- stack 0: 0x7C4
6439	 3FF	MLOAD		 	 
- stack 1: 0x7C4
- stack 0: 0x86F0100099FF0000EA000003300001034F00020369FFE0010100FF0114000F
6440	 400	PUSH1	F0	 	 
- stack 2: 0x7C4
- stack 1: 0x86F0100099FF0000EA000003300001034F00020369FFE0010100FF0114000F
- stack 0: 0xF0
6441	 402	SHR		 	 
- stack 1: 0x7C4
- stack 0: 0x86
6442	 403	JUMP		 	 
- stack 0: 0x7C4
6443	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x7C4
6444	 87	PUSH4	ff010000	 	 
- stack 1: 0x7C4
- stack 0: 0xFF010000
6445	 8C	PUSH2	0020	 	 
- stack 2: 0x7C4
- stack 1: 0xFF010000
- stack 0: 0x20
6446	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C4
6447	 90	PUSH1	04	 	 
- stack 1: 0x7C4
- stack 0: 0x4
6448	 92	ADD		 	 
- stack 0: 0x7C8
6449	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x7C8
- stack 0: 0x7C8
6450	 94	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
6451	 95	PUSH1	F0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
- stack 0: 0xF0
6452	 97	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99
6453	 98	JUMP		 	 
- stack 0: 0x7C8
6454	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x7C8
6455	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7C8
- stack 0: 0x7C8
6456	 9B	MLOAD		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
6457	 9C	PUSH1	E0	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF0000EA000003300001034F00020369FFE0010100FF0114000F01330015
- stack 0: 0xE0
6458	 9E	SHR		 	 
- stack 1: 0x7C8
- stack 0: 0x99FF00
6459	 9F	PUSH2	FFFF	 	 
- stack 2: 0x7C8
- stack 1: 0x99FF00
- stack 0: 0xFFFF
6460	 A2	AND		 	 
- stack 1: 0x7C8
- stack 0: 0xFF00
6461	 A3	PUSH1	01	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00
- stack 0: 0x1
6462	 A5	SIGNEXTEND		 	 
- stack 1: 0x7C8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
6463	 A6	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
6464	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x7C8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
6465	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x7C8
- stack 0: 0xFF00FF00
6466	 AB	PUSH2	0020	 	 
- stack 2: 0x7C8
- stack 1: 0xFF00FF00
- stack 0: 0x20
6467	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x7C8
6468	 AF	PUSH1	04	 	 
- stack 1: 0x7C8
- stack 0: 0x4
6469	 B1	ADD		 	 
- stack 0: 0x7CC
6470	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x7CC
- stack 0: 0x7CC
6471	 B3	MLOAD		 	 
- stack 1: 0x7CC
- stack 0: 0xEA000003300001034F00020369FFE0010100FF0114000F01330015014D00E8
6472	 B4	PUSH1	F0	 	 
- stack 2: 0x7CC
- stack 1: 0xEA000003300001034F00020369FFE0010100FF0114000F01330015014D00E8
- stack 0: 0xF0
6473	 B6	SHR		 	 
- stack 1: 0x7CC
- stack 0: 0xEA
6474	 B7	JUMP		 	 
- stack 0: 0x7CC
6475	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x7CC
6476	 EB	PUSH2	0040	 	 
- stack 1: 0x7CC
- stack 0: 0x40
6477	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x7CC
- stack 0: 0xF0F0F0F
6478	 EF	PUSH2	0020	 	 
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0x20
6479	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x7CC
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF00
6480	 F3	XOR		 	  ;; # XOR
- stack 1: 0x7CC
- stack 0: 0xF00FF00F
6481	 F4	PUSH2	0060	 	 
- stack 2: 0x7CC
- stack 1: 0xF00FF00F
- stack 0: 0x60
6482	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x7CC
6483	 F8	PUSH1	04	 	 
- stack 1: 0x7CC
- stack 0: 0x4
6484	 FA	ADD		 	 
- stack 0: 0x7D0
6485	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x7D0
- stack 0: 0x7D0
6486	 FC	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
6487	 FD	PUSH1	F0	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
- stack 0: 0xF0
6488	 FF	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x330
6489	 100	JUMP		 	 
- stack 0: 0x7D0
6490	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x7D0
6491	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D0
- stack 0: 0x7D0
6492	 332	MLOAD		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
6493	 333	PUSH1	E0	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001034F00020369FFE0010100FF0114000F01330015014D00E802F70000
- stack 0: 0xE0
6494	 335	SHR		 	 
- stack 1: 0x7D0
- stack 0: 0x3300001
6495	 336	PUSH2	FFFF	 	 
- stack 2: 0x7D0
- stack 1: 0x3300001
- stack 0: 0xFFFF
6496	 339	AND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6497	 33A	PUSH1	01	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6498	 33C	SIGNEXTEND		 	 
- stack 1: 0x7D0
- stack 0: 0x1
6499	 33D	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x80
6500	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x7D0
- stack 1: 0x1
- stack 0: 0x1
6501	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x7D0
- stack 0: 0x2
6502	 342	PUSH2	0080	 	 
- stack 2: 0x7D0
- stack 1: 0x2
- stack 0: 0x80
6503	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x7D0
6504	 346	PUSH1	04	 	 
- stack 1: 0x7D0
- stack 0: 0x4
6505	 348	ADD		 	 
- stack 0: 0x7D4
6506	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x7D4
- stack 0: 0x7D4
6507	 34A	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
6508	 34B	PUSH1	F0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
- stack 0: 0xF0
6509	 34D	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F
6510	 34E	JUMP		 	 
- stack 0: 0x7D4
6511	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x7D4
6512	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7D4
- stack 0: 0x7D4
6513	 351	MLOAD		 	 
- stack 1: 0x7D4
- stack 0: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
6514	 352	PUSH1	E0	 	 
- stack 2: 0x7D4
- stack 1: 0x34F00020369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F
- stack 0: 0xE0
6515	 354	SHR		 	 
- stack 1: 0x7D4
- stack 0: 0x34F0002
6516	 355	PUSH2	FFFF	 	 
- stack 2: 0x7D4
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6517	 358	AND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6518	 359	PUSH1	01	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0x1
6519	 35B	SIGNEXTEND		 	 
- stack 1: 0x7D4
- stack 0: 0x2
6520	 35C	PUSH2	00A0	 	 
- stack 2: 0x7D4
- stack 1: 0x2
- stack 0: 0xA0
6521	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x7D4
6522	 360	PUSH1	04	 	 
- stack 1: 0x7D4
- stack 0: 0x4
6523	 362	ADD		 	 
- stack 0: 0x7D8
6524	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x7D8
- stack 0: 0x7D8
6525	 364	MLOAD		 	 
- stack 1: 0x7D8
- stack 0: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
6526	 365	PUSH1	F0	 	 
- stack 2: 0x7D8
- stack 1: 0x369FFE0010100FF0114000F01330015014D00E802F7000001A20F0F00CB00F0
- stack 0: 0xF0
6527	 367	SHR		 	 
- stack 1: 0x7D8
- stack 0: 0x369
6528	 368	JUMP		 	 
- stack 0: 0x7D8
6529	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x7D8
6530	 36A	PUSH2	0080	 	 
- stack 1: 0x7D8
- stack 0: 0x80
6531	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x7D8
- stack 0: 0x2
6532	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6533	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7D8
- stack 0: 0x2
6534	 374	PUSH2	00A0	 	 
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0xA0
6535	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x2
6536	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7D8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6537	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7D8
- stack 1: 0x2
- stack 0: 0x2
6538	 37E	SUB		 	 
- stack 1: 0x7D8
- stack 0: 0x0
6539	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x7D8
- stack 1: 0x0
- stack 0: 0x387
6540	 382	JUMPI		 	 
- stack 0: 0x7D8
6541	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x7D8
- stack 0: 0x3A1
6542	 386	JUMP		 	 
- stack 0: 0x7D8
6543	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x7D8
6544	 3A2	PUSH1	04	 	 
- stack 1: 0x7D8
- stack 0: 0x4
6545	 3A4	ADD		 	 
- stack 0: 0x7DC
6546	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x7DC
- stack 0: 0x7DC
6547	 3A6	MLOAD		 	 
- stack 1: 0x7DC
- stack 0: 0x10100FF0114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000
6548	 3A7	PUSH1	F0	 	 
- stack 2: 0x7DC
- stack 1: 0x10100FF0114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000
- stack 0: 0xF0
6549	 3A9	SHR		 	 
- stack 1: 0x7DC
- stack 0: 0x101
6550	 3AA	JUMP		 	 
- stack 0: 0x7DC
6551	 101	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x7DC
6552	 102	PUSH4	f00ff000	 	 
- stack 1: 0x7DC
- stack 0: 0xF00FF000
6553	 107	PUSH2	03A0	 	 
- stack 2: 0x7DC
- stack 1: 0xF00FF000
- stack 0: 0x3A0
6554	 10A	MSTORE		 	  ;; # store to x29
- stack 0: 0x7DC
6555	 10B	PUSH1	04	 	 
- stack 1: 0x7DC
- stack 0: 0x4
6556	 10D	ADD		 	 
- stack 0: 0x7E0
6557	 10E	DUP1		 	  ;; # executing pc
- stack 1: 0x7E0
- stack 0: 0x7E0
6558	 10F	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF01
6559	 110	PUSH1	F0	 	 
- stack 2: 0x7E0
- stack 1: 0x114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF01
- stack 0: 0xF0
6560	 112	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x114
6561	 113	JUMP		 	 
- stack 0: 0x7E0
6562	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x7E0
6563	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E0
- stack 0: 0x7E0
6564	 116	MLOAD		 	 
- stack 1: 0x7E0
- stack 0: 0x114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF01
6565	 117	PUSH1	E0	 	 
- stack 2: 0x7E0
- stack 1: 0x114000F01330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF01
- stack 0: 0xE0
6566	 119	SHR		 	 
- stack 1: 0x7E0
- stack 0: 0x114000F
6567	 11A	PUSH2	FFFF	 	 
- stack 2: 0x7E0
- stack 1: 0x114000F
- stack 0: 0xFFFF
6568	 11D	AND		 	 
- stack 1: 0x7E0
- stack 0: 0xF
6569	 11E	PUSH1	01	 	 
- stack 2: 0x7E0
- stack 1: 0xF
- stack 0: 0x1
6570	 120	SIGNEXTEND		 	 
- stack 1: 0x7E0
- stack 0: 0xF
6571	 121	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xF
- stack 0: 0x3A0
6572	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E0
- stack 1: 0xF
- stack 0: 0xF00FF000
6573	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x7E0
- stack 0: 0xF00FF00F
6574	 126	PUSH2	03A0	 	 
- stack 2: 0x7E0
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
6575	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x7E0
6576	 12A	PUSH1	04	 	 
- stack 1: 0x7E0
- stack 0: 0x4
6577	 12C	ADD		 	 
- stack 0: 0x7E4
6578	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x7E4
- stack 0: 0x7E4
6579	 12E	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF0
6580	 12F	PUSH1	F0	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF0
- stack 0: 0xF0
6581	 131	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x133
6582	 132	JUMP		 	 
- stack 0: 0x7E4
6583	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x7E4
6584	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7E4
- stack 0: 0x7E4
6585	 135	MLOAD		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF0
6586	 136	PUSH1	E0	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015014D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF0
- stack 0: 0xE0
6587	 138	SHR		 	 
- stack 1: 0x7E4
- stack 0: 0x1330015
6588	 139	PUSH2	FFFF	 	 
- stack 2: 0x7E4
- stack 1: 0x1330015
- stack 0: 0xFFFF
6589	 13C	AND		 	 
- stack 1: 0x7E4
- stack 0: 0x15
6590	 13D	PUSH1	01	 	 
- stack 2: 0x7E4
- stack 1: 0x15
- stack 0: 0x1
6591	 13F	SIGNEXTEND		 	 
- stack 1: 0x7E4
- stack 0: 0x15
6592	 140	PUSH2	0380	 	 
- stack 2: 0x7E4
- stack 1: 0x15
- stack 0: 0x380
6593	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x7E4
6594	 144	PUSH1	04	 	 
- stack 1: 0x7E4
- stack 0: 0x4
6595	 146	ADD		 	 
- stack 0: 0x7E8
6596	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x7E8
- stack 0: 0x7E8
6597	 148	MLOAD		 	 
- stack 1: 0x7E8
- stack 0: 0x14D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED0000
6598	 149	PUSH1	F0	 	 
- stack 2: 0x7E8
- stack 1: 0x14D00E802F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED0000
- stack 0: 0xF0
6599	 14B	SHR		 	 
- stack 1: 0x7E8
- stack 0: 0x14D
6600	 14C	JUMP		 	 
- stack 0: 0x7E8
6601	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x7E8
6602	 14E	PUSH2	0060	 	 
- stack 1: 0x7E8
- stack 0: 0x60
6603	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x7E8
- stack 0: 0xF00FF00F
6604	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x7E8
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
6605	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x7E8
- stack 0: 0xF00FF00F
6606	 158	PUSH2	03A0	 	 
- stack 2: 0x7E8
- stack 1: 0xF00FF00F
- stack 0: 0x3A0
6607	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x7E8
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
6608	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x7E8
- stack 2: 0xF00FF00F
- stack 1: 0xF00FF00F
- stack 0: 0xFFFFFFFF
6609	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x7E8
- stack 1: 0xF00FF00F
- stack 0: 0xF00FF00F
6610	 162	SUB		 	 
- stack 1: 0x7E8
- stack 0: 0x0
6611	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x7E8
- stack 1: 0x0
- stack 0: 0x16B
6612	 166	JUMPI		 	 
- stack 0: 0x7E8
6613	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x7E8
- stack 0: 0x185
6614	 16A	JUMP		 	 
- stack 0: 0x7E8
6615	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x7E8
6616	 186	PUSH1	04	 	 
- stack 1: 0x7E8
- stack 0: 0x4
6617	 188	ADD		 	 
- stack 0: 0x7EC
6618	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x7EC
- stack 0: 0x7EC
6619	 18A	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x2F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA0000
6620	 18B	PUSH1	F0	 	 
- stack 2: 0x7EC
- stack 1: 0x2F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA0000
- stack 0: 0xF0
6621	 18D	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x2F7
6622	 18E	JUMP		 	 
- stack 0: 0x7EC
6623	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x7EC
6624	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7EC
- stack 0: 0x7EC
6625	 2F9	MLOAD		 	 
- stack 1: 0x7EC
- stack 0: 0x2F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA0000
6626	 2FA	PUSH1	E0	 	 
- stack 2: 0x7EC
- stack 1: 0x2F7000001A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA0000
- stack 0: 0xE0
6627	 2FC	SHR		 	 
- stack 1: 0x7EC
- stack 0: 0x2F70000
6628	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x7EC
- stack 1: 0x2F70000
- stack 0: 0xFFFF
6629	 300	AND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6630	 301	PUSH1	01	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x1
6631	 303	SIGNEXTEND		 	 
- stack 1: 0x7EC
- stack 0: 0x0
6632	 304	PUSH2	0080	 	 
- stack 2: 0x7EC
- stack 1: 0x0
- stack 0: 0x80
6633	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x7EC
6634	 308	PUSH1	04	 	 
- stack 1: 0x7EC
- stack 0: 0x4
6635	 30A	ADD		 	 
- stack 0: 0x7F0
6636	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6637	 30C	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x1A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA000003300001
6638	 30D	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x1A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA000003300001
- stack 0: 0xF0
6639	 30F	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x1A2
6640	 310	JUMP		 	 
- stack 0: 0x7F0
6641	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F0
6642	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F0
- stack 0: 0xF0F0F000
6643	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xF0F0F000
- stack 0: 0x40
6644	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
6645	 1AC	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6646	 1AE	ADD		 	 
- stack 0: 0x7F4
6647	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6648	 1B0	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
6649	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xF0
6650	 1B3	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB
6651	 1B4	JUMP		 	 
- stack 0: 0x7F4
6652	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F4
6653	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6654	 CD	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
6655	 CE	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xE0
6656	 D0	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F0
6657	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6658	 D4	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6659	 D5	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x1
6660	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6661	 D8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x40
6662	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6663	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F4
- stack 0: 0xF0F0F0F0
6664	 DD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6665	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6666	 E1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6667	 E3	ADD		 	 
- stack 0: 0x7F8
6668	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6669	 E5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
6670	 E6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
6671	 E8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED
6672	 E9	JUMP		 	 
- stack 0: 0x7F8
6673	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6674	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6675	 3EF	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
6676	 3F0	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xE0
6677	 3F2	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000
6678	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6679	 3F6	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6680	 3F7	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6681	 3F9	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6682	 3FA	POP		 	 
- stack 0: 0x7F8
6683	 3FB	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6684	 3FD	ADD		 	 
- stack 0: 0x7FC
6685	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6686	 3FF	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFDC01B5F010
6687	 400	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
6688	 402	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x18F
6689	 403	JUMP		 	 
- stack 0: 0x7FC
6690	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x7FC
6691	 190	PUSH4	0ff01000	 	 
- stack 1: 0x7FC
- stack 0: 0xFF01000
6692	 195	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xFF01000
- stack 0: 0x20
6693	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6694	 199	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6695	 19B	ADD		 	 
- stack 0: 0x800
6696	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6697	 19D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
6698	 19E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
6699	 1A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99
6700	 1A1	JUMP		 	 
- stack 0: 0x800
6701	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x800
6702	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6703	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
6704	 9C	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xE0
6705	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99FFF0
6706	 9F	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6707	 A2	AND		 	 
- stack 1: 0x800
- stack 0: 0xFFF0
6708	 A3	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0xFFF0
- stack 0: 0x1
6709	 A5	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6710	 A6	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6711	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6712	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x800
- stack 0: 0xFF00FF0
6713	 AB	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF00FF0
- stack 0: 0x20
6714	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6715	 AF	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6716	 B1	ADD		 	 
- stack 0: 0x804
6717	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6718	 B3	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
6719	 B4	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
- stack 0: 0xF0
6720	 B6	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3ED
6721	 B7	JUMP		 	 
- stack 0: 0x804
6722	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x804
6723	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6724	 3EF	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
6725	 3F0	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
- stack 0: 0xE0
6726	 3F2	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3ED0000
6727	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6728	 3F6	AND		 	 
- stack 1: 0x804
- stack 0: 0x0
6729	 3F7	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x1
6730	 3F9	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x0
6731	 3FA	POP		 	 
- stack 0: 0x804
6732	 3FB	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6733	 3FD	ADD		 	 
- stack 0: 0x808
6734	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6735	 3FF	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330016014D00AC
6736	 400	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330016014D00AC
- stack 0: 0xF0
6737	 402	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEA
6738	 403	JUMP		 	 
- stack 0: 0x808
6739	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x808
6740	 EB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6741	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xF0F0F0F0
6742	 EF	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6743	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6744	 F3	XOR		 	  ;; # XOR
- stack 1: 0x808
- stack 0: 0xFF00FF00
6745	 F4	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0xFF00FF00
- stack 0: 0x60
6746	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6747	 F8	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6748	 FA	ADD		 	 
- stack 0: 0x80C
6749	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6750	 FC	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
6751	 FD	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
- stack 0: 0xF0
6752	 FF	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x330
6753	 100	JUMP		 	 
- stack 0: 0x80C
6754	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6755	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6756	 332	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
6757	 333	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
- stack 0: 0xE0
6758	 335	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3300001
6759	 336	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x3300001
- stack 0: 0xFFFF
6760	 339	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6761	 33A	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6762	 33C	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6763	 33D	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6764	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x0
6765	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x1
6766	 342	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6767	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6768	 346	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6769	 348	ADD		 	 
- stack 0: 0x810
6770	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6771	 34A	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
6772	 34B	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
- stack 0: 0xF0
6773	 34D	SHR		 	 
- stack 1: 0x810
- stack 0: 0x34F
6774	 34E	JUMP		 	 
- stack 0: 0x810
6775	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6776	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6777	 351	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
6778	 352	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
- stack 0: 0xE0
6779	 354	SHR		 	 
- stack 1: 0x810
- stack 0: 0x34F0002
6780	 355	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6781	 358	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6782	 359	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6783	 35B	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6784	 35C	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6785	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6786	 360	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6787	 362	ADD		 	 
- stack 0: 0x814
6788	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6789	 364	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
6790	 365	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
- stack 0: 0xF0
6791	 367	SHR		 	 
- stack 1: 0x814
- stack 0: 0x369
6792	 368	JUMP		 	 
- stack 0: 0x814
6793	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x814
6794	 36A	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6795	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x1
6796	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
6797	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x1
6798	 374	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0xA0
6799	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6800	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6801	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x2
6802	 37E	SUB		 	 
- stack 1: 0x814
- stack 0: 0x1
6803	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x814
- stack 1: 0x1
- stack 0: 0x387
6804	 382	JUMPI		 	 
- stack 0: 0x814
6805	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x814
6806	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x814
- stack 0: 0x814
6807	 389	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
6808	 38A	PUSH1	E0	 	 
- stack 2: 0x814
- stack 1: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
- stack 0: 0xE0
6809	 38C	SHR		 	 
- stack 1: 0x814
- stack 0: 0x369FFDC
6810	 38D	PUSH2	FFFF	 	 
- stack 2: 0x814
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
6811	 390	AND		 	 
- stack 1: 0x814
- stack 0: 0xFFDC
6812	 391	PUSH1	01	 	 
- stack 2: 0x814
- stack 1: 0xFFDC
- stack 0: 0x1
6813	 393	SIGNEXTEND		 	 
- stack 1: 0x814
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
6814	 394	ADD		 	 
- stack 0: 0x7F0
6815	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x7F0
- stack 0: 0xFFFFFFFF
6816	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x7F0
6817	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x7F0
- stack 0: 0x7F0
6818	 39C	MLOAD		 	 
- stack 1: 0x7F0
- stack 0: 0x1A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA000003300001
6819	 39D	PUSH1	F0	 	 
- stack 2: 0x7F0
- stack 1: 0x1A20F0F00CB00F003ED0000018FFF010099FFF003ED000000EA000003300001
- stack 0: 0xF0
6820	 39F	SHR		 	 
- stack 1: 0x7F0
- stack 0: 0x1A2
6821	 3A0	JUMP		 	 
- stack 0: 0x7F0
6822	 1A2	JUMPDEST		 ;; __riscvimpl_LUI_f0f0f137	  ;; # instr: lui sp,0xf0f0f(ignore imm)
- stack 0: 0x7F0
6823	 1A3	PUSH4	f0f0f000	 	 
- stack 1: 0x7F0
- stack 0: 0xF0F0F000
6824	 1A8	PUSH2	0040	 	 
- stack 2: 0x7F0
- stack 1: 0xF0F0F000
- stack 0: 0x40
6825	 1AB	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F0
6826	 1AC	PUSH1	04	 	 
- stack 1: 0x7F0
- stack 0: 0x4
6827	 1AE	ADD		 	 
- stack 0: 0x7F4
6828	 1AF	DUP1		 	  ;; # executing pc
- stack 1: 0x7F4
- stack 0: 0x7F4
6829	 1B0	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
6830	 1B1	PUSH1	F0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xF0
6831	 1B3	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB
6832	 1B4	JUMP		 	 
- stack 0: 0x7F4
6833	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x7F4
6834	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F4
- stack 0: 0x7F4
6835	 CD	MLOAD		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
6836	 CE	PUSH1	E0	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F003ED0000018FFF010099FFF003ED000000EA000003300001034F0002
- stack 0: 0xE0
6837	 D0	SHR		 	 
- stack 1: 0x7F4
- stack 0: 0xCB00F0
6838	 D1	PUSH2	FFFF	 	 
- stack 2: 0x7F4
- stack 1: 0xCB00F0
- stack 0: 0xFFFF
6839	 D4	AND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6840	 D5	PUSH1	01	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x1
6841	 D7	SIGNEXTEND		 	 
- stack 1: 0x7F4
- stack 0: 0xF0
6842	 D8	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0x40
6843	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x7F4
- stack 1: 0xF0
- stack 0: 0xF0F0F000
6844	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x7F4
- stack 0: 0xF0F0F0F0
6845	 DD	PUSH2	0040	 	 
- stack 2: 0x7F4
- stack 1: 0xF0F0F0F0
- stack 0: 0x40
6846	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x7F4
6847	 E1	PUSH1	04	 	 
- stack 1: 0x7F4
- stack 0: 0x4
6848	 E3	ADD		 	 
- stack 0: 0x7F8
6849	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x7F8
- stack 0: 0x7F8
6850	 E5	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
6851	 E6	PUSH1	F0	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xF0
6852	 E8	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED
6853	 E9	JUMP		 	 
- stack 0: 0x7F8
6854	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x7F8
6855	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x7F8
- stack 0: 0x7F8
6856	 3EF	MLOAD		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
6857	 3F0	PUSH1	E0	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000018FFF010099FFF003ED000000EA000003300001034F00020369FFDC
- stack 0: 0xE0
6858	 3F2	SHR		 	 
- stack 1: 0x7F8
- stack 0: 0x3ED0000
6859	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x7F8
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6860	 3F6	AND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6861	 3F7	PUSH1	01	 	 
- stack 2: 0x7F8
- stack 1: 0x0
- stack 0: 0x1
6862	 3F9	SIGNEXTEND		 	 
- stack 1: 0x7F8
- stack 0: 0x0
6863	 3FA	POP		 	 
- stack 0: 0x7F8
6864	 3FB	PUSH1	04	 	 
- stack 1: 0x7F8
- stack 0: 0x4
6865	 3FD	ADD		 	 
- stack 0: 0x7FC
6866	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x7FC
- stack 0: 0x7FC
6867	 3FF	MLOAD		 	 
- stack 1: 0x7FC
- stack 0: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFDC01B5F010
6868	 400	PUSH1	F0	 	 
- stack 2: 0x7FC
- stack 1: 0x18FFF010099FFF003ED000000EA000003300001034F00020369FFDC01B5F010
- stack 0: 0xF0
6869	 402	SHR		 	 
- stack 1: 0x7FC
- stack 0: 0x18F
6870	 403	JUMP		 	 
- stack 0: 0x7FC
6871	 18F	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x7FC
6872	 190	PUSH4	0ff01000	 	 
- stack 1: 0x7FC
- stack 0: 0xFF01000
6873	 195	PUSH2	0020	 	 
- stack 2: 0x7FC
- stack 1: 0xFF01000
- stack 0: 0x20
6874	 198	MSTORE		 	  ;; # store to x1
- stack 0: 0x7FC
6875	 199	PUSH1	04	 	 
- stack 1: 0x7FC
- stack 0: 0x4
6876	 19B	ADD		 	 
- stack 0: 0x800
6877	 19C	DUP1		 	  ;; # executing pc
- stack 1: 0x800
- stack 0: 0x800
6878	 19D	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
6879	 19E	PUSH1	F0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xF0
6880	 1A0	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99
6881	 1A1	JUMP		 	 
- stack 0: 0x800
6882	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x800
6883	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x800
- stack 0: 0x800
6884	 9B	MLOAD		 	 
- stack 1: 0x800
- stack 0: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
6885	 9C	PUSH1	E0	 	 
- stack 2: 0x800
- stack 1: 0x99FFF003ED000000EA000003300001034F00020369FFDC01B5F0100114FF00
- stack 0: 0xE0
6886	 9E	SHR		 	 
- stack 1: 0x800
- stack 0: 0x99FFF0
6887	 9F	PUSH2	FFFF	 	 
- stack 2: 0x800
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
6888	 A2	AND		 	 
- stack 1: 0x800
- stack 0: 0xFFF0
6889	 A3	PUSH1	01	 	 
- stack 2: 0x800
- stack 1: 0xFFF0
- stack 0: 0x1
6890	 A5	SIGNEXTEND		 	 
- stack 1: 0x800
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
6891	 A6	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
6892	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x800
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
6893	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x800
- stack 0: 0xFF00FF0
6894	 AB	PUSH2	0020	 	 
- stack 2: 0x800
- stack 1: 0xFF00FF0
- stack 0: 0x20
6895	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x800
6896	 AF	PUSH1	04	 	 
- stack 1: 0x800
- stack 0: 0x4
6897	 B1	ADD		 	 
- stack 0: 0x804
6898	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x804
- stack 0: 0x804
6899	 B3	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
6900	 B4	PUSH1	F0	 	 
- stack 2: 0x804
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
- stack 0: 0xF0
6901	 B6	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3ED
6902	 B7	JUMP		 	 
- stack 0: 0x804
6903	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x804
6904	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x804
- stack 0: 0x804
6905	 3EF	MLOAD		 	 
- stack 1: 0x804
- stack 0: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
6906	 3F0	PUSH1	E0	 	 
- stack 2: 0x804
- stack 1: 0x3ED000000EA000003300001034F00020369FFDC01B5F0100114FF0001330016
- stack 0: 0xE0
6907	 3F2	SHR		 	 
- stack 1: 0x804
- stack 0: 0x3ED0000
6908	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x804
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
6909	 3F6	AND		 	 
- stack 1: 0x804
- stack 0: 0x0
6910	 3F7	PUSH1	01	 	 
- stack 2: 0x804
- stack 1: 0x0
- stack 0: 0x1
6911	 3F9	SIGNEXTEND		 	 
- stack 1: 0x804
- stack 0: 0x0
6912	 3FA	POP		 	 
- stack 0: 0x804
6913	 3FB	PUSH1	04	 	 
- stack 1: 0x804
- stack 0: 0x4
6914	 3FD	ADD		 	 
- stack 0: 0x808
6915	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x808
- stack 0: 0x808
6916	 3FF	MLOAD		 	 
- stack 1: 0x808
- stack 0: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330016014D00AC
6917	 400	PUSH1	F0	 	 
- stack 2: 0x808
- stack 1: 0xEA000003300001034F00020369FFDC01B5F0100114FF0001330016014D00AC
- stack 0: 0xF0
6918	 402	SHR		 	 
- stack 1: 0x808
- stack 0: 0xEA
6919	 403	JUMP		 	 
- stack 0: 0x808
6920	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x808
6921	 EB	PUSH2	0040	 	 
- stack 1: 0x808
- stack 0: 0x40
6922	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x808
- stack 0: 0xF0F0F0F0
6923	 EF	PUSH2	0020	 	 
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0x20
6924	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x808
- stack 1: 0xF0F0F0F0
- stack 0: 0xFF00FF0
6925	 F3	XOR		 	  ;; # XOR
- stack 1: 0x808
- stack 0: 0xFF00FF00
6926	 F4	PUSH2	0060	 	 
- stack 2: 0x808
- stack 1: 0xFF00FF00
- stack 0: 0x60
6927	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x808
6928	 F8	PUSH1	04	 	 
- stack 1: 0x808
- stack 0: 0x4
6929	 FA	ADD		 	 
- stack 0: 0x80C
6930	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x80C
- stack 0: 0x80C
6931	 FC	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
6932	 FD	PUSH1	F0	 	 
- stack 2: 0x80C
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
- stack 0: 0xF0
6933	 FF	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x330
6934	 100	JUMP		 	 
- stack 0: 0x80C
6935	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x80C
6936	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x80C
- stack 0: 0x80C
6937	 332	MLOAD		 	 
- stack 1: 0x80C
- stack 0: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
6938	 333	PUSH1	E0	 	 
- stack 2: 0x80C
- stack 1: 0x3300001034F00020369FFDC01B5F0100114FF0001330016014D00AC02F70000
- stack 0: 0xE0
6939	 335	SHR		 	 
- stack 1: 0x80C
- stack 0: 0x3300001
6940	 336	PUSH2	FFFF	 	 
- stack 2: 0x80C
- stack 1: 0x3300001
- stack 0: 0xFFFF
6941	 339	AND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6942	 33A	PUSH1	01	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6943	 33C	SIGNEXTEND		 	 
- stack 1: 0x80C
- stack 0: 0x1
6944	 33D	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x80
6945	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x80C
- stack 1: 0x1
- stack 0: 0x1
6946	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x80C
- stack 0: 0x2
6947	 342	PUSH2	0080	 	 
- stack 2: 0x80C
- stack 1: 0x2
- stack 0: 0x80
6948	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x80C
6949	 346	PUSH1	04	 	 
- stack 1: 0x80C
- stack 0: 0x4
6950	 348	ADD		 	 
- stack 0: 0x810
6951	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x810
- stack 0: 0x810
6952	 34A	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
6953	 34B	PUSH1	F0	 	 
- stack 2: 0x810
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
- stack 0: 0xF0
6954	 34D	SHR		 	 
- stack 1: 0x810
- stack 0: 0x34F
6955	 34E	JUMP		 	 
- stack 0: 0x810
6956	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x810
6957	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x810
- stack 0: 0x810
6958	 351	MLOAD		 	 
- stack 1: 0x810
- stack 0: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
6959	 352	PUSH1	E0	 	 
- stack 2: 0x810
- stack 1: 0x34F00020369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F1
- stack 0: 0xE0
6960	 354	SHR		 	 
- stack 1: 0x810
- stack 0: 0x34F0002
6961	 355	PUSH2	FFFF	 	 
- stack 2: 0x810
- stack 1: 0x34F0002
- stack 0: 0xFFFF
6962	 358	AND		 	 
- stack 1: 0x810
- stack 0: 0x2
6963	 359	PUSH1	01	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0x1
6964	 35B	SIGNEXTEND		 	 
- stack 1: 0x810
- stack 0: 0x2
6965	 35C	PUSH2	00A0	 	 
- stack 2: 0x810
- stack 1: 0x2
- stack 0: 0xA0
6966	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x810
6967	 360	PUSH1	04	 	 
- stack 1: 0x810
- stack 0: 0x4
6968	 362	ADD		 	 
- stack 0: 0x814
6969	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x814
- stack 0: 0x814
6970	 364	MLOAD		 	 
- stack 1: 0x814
- stack 0: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
6971	 365	PUSH1	F0	 	 
- stack 2: 0x814
- stack 1: 0x369FFDC01B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F
- stack 0: 0xF0
6972	 367	SHR		 	 
- stack 1: 0x814
- stack 0: 0x369
6973	 368	JUMP		 	 
- stack 0: 0x814
6974	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x814
6975	 36A	PUSH2	0080	 	 
- stack 1: 0x814
- stack 0: 0x80
6976	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x814
- stack 0: 0x2
6977	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6978	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x814
- stack 0: 0x2
6979	 374	PUSH2	00A0	 	 
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0xA0
6980	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6981	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x814
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
6982	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x814
- stack 1: 0x2
- stack 0: 0x2
6983	 37E	SUB		 	 
- stack 1: 0x814
- stack 0: 0x0
6984	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x814
- stack 1: 0x0
- stack 0: 0x387
6985	 382	JUMPI		 	 
- stack 0: 0x814
6986	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x814
- stack 0: 0x3A1
6987	 386	JUMP		 	 
- stack 0: 0x814
6988	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x814
6989	 3A2	PUSH1	04	 	 
- stack 1: 0x814
- stack 0: 0x4
6990	 3A4	ADD		 	 
- stack 0: 0x818
6991	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x818
- stack 0: 0x818
6992	 3A6	MLOAD		 	 
- stack 1: 0x818
- stack 0: 0x1B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED0000
6993	 3A7	PUSH1	F0	 	 
- stack 2: 0x818
- stack 1: 0x1B5F0100114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED0000
- stack 0: 0xF0
6994	 3A9	SHR		 	 
- stack 1: 0x818
- stack 0: 0x1B5
6995	 3AA	JUMP		 	 
- stack 0: 0x818
6996	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x818
6997	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x818
- stack 0: 0xFF010000
6998	 1BB	PUSH2	03A0	 	 
- stack 2: 0x818
- stack 1: 0xFF010000
- stack 0: 0x3A0
6999	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x818
7000	 1BF	PUSH1	04	 	 
- stack 1: 0x818
- stack 0: 0x4
7001	 1C1	ADD		 	 
- stack 0: 0x81C
7002	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x81C
- stack 0: 0x81C
7003	 1C3	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED0000
7004	 1C4	PUSH1	F0	 	 
- stack 2: 0x81C
- stack 1: 0x114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED0000
- stack 0: 0xF0
7005	 1C6	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x114
7006	 1C7	JUMP		 	 
- stack 0: 0x81C
7007	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x81C
7008	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x81C
- stack 0: 0x81C
7009	 116	MLOAD		 	 
- stack 1: 0x81C
- stack 0: 0x114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED0000
7010	 117	PUSH1	E0	 	 
- stack 2: 0x81C
- stack 1: 0x114FF0001330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED0000
- stack 0: 0xE0
7011	 119	SHR		 	 
- stack 1: 0x81C
- stack 0: 0x114FF00
7012	 11A	PUSH2	FFFF	 	 
- stack 2: 0x81C
- stack 1: 0x114FF00
- stack 0: 0xFFFF
7013	 11D	AND		 	 
- stack 1: 0x81C
- stack 0: 0xFF00
7014	 11E	PUSH1	01	 	 
- stack 2: 0x81C
- stack 1: 0xFF00
- stack 0: 0x1
7015	 120	SIGNEXTEND		 	 
- stack 1: 0x81C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7016	 121	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
7017	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x81C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7018	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x81C
- stack 0: 0xFF00FF00
7019	 126	PUSH2	03A0	 	 
- stack 2: 0x81C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7020	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x81C
7021	 12A	PUSH1	04	 	 
- stack 1: 0x81C
- stack 0: 0x4
7022	 12C	ADD		 	 
- stack 0: 0x820
7023	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x820
- stack 0: 0x820
7024	 12E	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x1330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0
7025	 12F	PUSH1	F0	 	 
- stack 2: 0x820
- stack 1: 0x1330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0
- stack 0: 0xF0
7026	 131	SHR		 	 
- stack 1: 0x820
- stack 0: 0x133
7027	 132	JUMP		 	 
- stack 0: 0x820
7028	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x820
7029	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x820
- stack 0: 0x820
7030	 135	MLOAD		 	 
- stack 1: 0x820
- stack 0: 0x1330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0
7031	 136	PUSH1	E0	 	 
- stack 2: 0x820
- stack 1: 0x1330016014D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0
- stack 0: 0xE0
7032	 138	SHR		 	 
- stack 1: 0x820
- stack 0: 0x1330016
7033	 139	PUSH2	FFFF	 	 
- stack 2: 0x820
- stack 1: 0x1330016
- stack 0: 0xFFFF
7034	 13C	AND		 	 
- stack 1: 0x820
- stack 0: 0x16
7035	 13D	PUSH1	01	 	 
- stack 2: 0x820
- stack 1: 0x16
- stack 0: 0x1
7036	 13F	SIGNEXTEND		 	 
- stack 1: 0x820
- stack 0: 0x16
7037	 140	PUSH2	0380	 	 
- stack 2: 0x820
- stack 1: 0x16
- stack 0: 0x380
7038	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x820
7039	 144	PUSH1	04	 	 
- stack 1: 0x820
- stack 0: 0x4
7040	 146	ADD		 	 
- stack 0: 0x824
7041	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x824
- stack 0: 0x824
7042	 148	MLOAD		 	 
- stack 1: 0x824
- stack 0: 0x14D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF
7043	 149	PUSH1	F0	 	 
- stack 2: 0x824
- stack 1: 0x14D00AC02F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF
- stack 0: 0xF0
7044	 14B	SHR		 	 
- stack 1: 0x824
- stack 0: 0x14D
7045	 14C	JUMP		 	 
- stack 0: 0x824
7046	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x824
7047	 14E	PUSH2	0060	 	 
- stack 1: 0x824
- stack 0: 0x60
7048	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x824
- stack 0: 0xFF00FF00
7049	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x824
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7050	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x824
- stack 0: 0xFF00FF00
7051	 158	PUSH2	03A0	 	 
- stack 2: 0x824
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7052	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x824
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7053	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x824
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7054	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x824
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7055	 162	SUB		 	 
- stack 1: 0x824
- stack 0: 0x0
7056	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x824
- stack 1: 0x0
- stack 0: 0x16B
7057	 166	JUMPI		 	 
- stack 0: 0x824
7058	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x824
- stack 0: 0x185
7059	 16A	JUMP		 	 
- stack 0: 0x824
7060	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x824
7061	 186	PUSH1	04	 	 
- stack 1: 0x824
- stack 0: 0x4
7062	 188	ADD		 	 
- stack 0: 0x828
7063	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x828
- stack 0: 0x828
7064	 18A	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x2F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA0000
7065	 18B	PUSH1	F0	 	 
- stack 2: 0x828
- stack 1: 0x2F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA0000
- stack 0: 0xF0
7066	 18D	SHR		 	 
- stack 1: 0x828
- stack 0: 0x2F7
7067	 18E	JUMP		 	 
- stack 0: 0x828
7068	 2F7	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x828
7069	 2F8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x828
- stack 0: 0x828
7070	 2F9	MLOAD		 	 
- stack 1: 0x828
- stack 0: 0x2F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA0000
7071	 2FA	PUSH1	E0	 	 
- stack 2: 0x828
- stack 1: 0x2F7000000B8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA0000
- stack 0: 0xE0
7072	 2FC	SHR		 	 
- stack 1: 0x828
- stack 0: 0x2F70000
7073	 2FD	PUSH2	FFFF	 	 
- stack 2: 0x828
- stack 1: 0x2F70000
- stack 0: 0xFFFF
7074	 300	AND		 	 
- stack 1: 0x828
- stack 0: 0x0
7075	 301	PUSH1	01	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x1
7076	 303	SIGNEXTEND		 	 
- stack 1: 0x828
- stack 0: 0x0
7077	 304	PUSH2	0080	 	 
- stack 2: 0x828
- stack 1: 0x0
- stack 0: 0x80
7078	 307	MSTORE		 	  ;; # store to x4
- stack 0: 0x828
7079	 308	PUSH1	04	 	 
- stack 1: 0x828
- stack 0: 0x4
7080	 30A	ADD		 	 
- stack 0: 0x82C
7081	 30B	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7082	 30C	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0xB8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001
7083	 30D	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0xB8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001
- stack 0: 0xF0
7084	 30F	SHR		 	 
- stack 1: 0x82C
- stack 0: 0xB8
7085	 310	JUMP		 	 
- stack 0: 0x82C
7086	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x82C
7087	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x82C
- stack 0: 0xF0F1000
7088	 BE	PUSH2	0040	 	 
- stack 2: 0x82C
- stack 1: 0xF0F1000
- stack 0: 0x40
7089	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x82C
7090	 C2	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7091	 C4	ADD		 	 
- stack 0: 0x830
7092	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7093	 C6	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
7094	 C7	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
- stack 0: 0xF0
7095	 C9	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCB
7096	 CA	JUMP		 	 
- stack 0: 0x830
7097	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x830
7098	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
7099	 CD	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
7100	 CE	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
- stack 0: 0xE0
7101	 D0	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F
7102	 D1	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7103	 D4	AND		 	 
- stack 1: 0x830
- stack 0: 0xFF0F
7104	 D5	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xFF0F
- stack 0: 0x1
7105	 D7	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7106	 D8	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7107	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7108	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x830
- stack 0: 0xF0F0F0F
7109	 DD	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7110	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7111	 E1	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7112	 E3	ADD		 	 
- stack 0: 0x834
7113	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7114	 E5	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
7115	 E6	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
- stack 0: 0xF0
7116	 E8	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3ED
7117	 E9	JUMP		 	 
- stack 0: 0x834
7118	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
7119	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7120	 3EF	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
7121	 3F0	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
- stack 0: 0xE0
7122	 3F2	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3ED0000
7123	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
7124	 3F6	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
7125	 3F7	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
7126	 3F9	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
7127	 3FA	POP		 	 
- stack 0: 0x834
7128	 3FB	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7129	 3FD	ADD		 	 
- stack 0: 0x838
7130	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7131	 3FF	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
7132	 400	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
7133	 402	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3ED
7134	 403	JUMP		 	 
- stack 0: 0x838
7135	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7136	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7137	 3EF	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
7138	 3F0	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
7139	 3F2	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3ED0000
7140	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
7141	 3F6	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7142	 3F7	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7143	 3F9	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7144	 3FA	POP		 	 
- stack 0: 0x838
7145	 3FB	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7146	 3FD	ADD		 	 
- stack 0: 0x83C
7147	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7148	 3FF	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF010114FFF0
7149	 400	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
7150	 402	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1C8
7151	 403	JUMP		 	 
- stack 0: 0x83C
7152	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x83C
7153	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x83C
- stack 0: 0xFF0000
7154	 1CE	PUSH2	0020	 	 
- stack 2: 0x83C
- stack 1: 0xFF0000
- stack 0: 0x20
7155	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x83C
7156	 1D2	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7157	 1D4	ADD		 	 
- stack 0: 0x840
7158	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7159	 1D6	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
7160	 1D7	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
- stack 0: 0xF0
7161	 1D9	SHR		 	 
- stack 1: 0x840
- stack 0: 0x99
7162	 1DA	JUMP		 	 
- stack 0: 0x840
7163	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x840
7164	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
7165	 9B	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
7166	 9C	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
- stack 0: 0xE0
7167	 9E	SHR		 	 
- stack 1: 0x840
- stack 0: 0x9900FF
7168	 9F	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7169	 A2	AND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7170	 A3	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x1
7171	 A5	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7172	 A6	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x20
7173	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0xFF0000
7174	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x840
- stack 0: 0xFF00FF
7175	 AB	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF00FF
- stack 0: 0x20
7176	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7177	 AF	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7178	 B1	ADD		 	 
- stack 0: 0x844
7179	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7180	 B3	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330017014D0070
7181	 B4	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330017014D0070
- stack 0: 0xF0
7182	 B6	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEA
7183	 B7	JUMP		 	 
- stack 0: 0x844
7184	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x844
7185	 EB	PUSH2	0040	 	 
- stack 1: 0x844
- stack 0: 0x40
7186	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x844
- stack 0: 0xF0F0F0F
7187	 EF	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7188	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7189	 F3	XOR		 	  ;; # XOR
- stack 1: 0x844
- stack 0: 0xFF00FF0
7190	 F4	PUSH2	0060	 	 
- stack 2: 0x844
- stack 1: 0xFF00FF0
- stack 0: 0x60
7191	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x844
7192	 F8	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7193	 FA	ADD		 	 
- stack 0: 0x848
7194	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7195	 FC	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
7196	 FD	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
- stack 0: 0xF0
7197	 FF	SHR		 	 
- stack 1: 0x848
- stack 0: 0x330
7198	 100	JUMP		 	 
- stack 0: 0x848
7199	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x848
7200	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7201	 332	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
7202	 333	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
- stack 0: 0xE0
7203	 335	SHR		 	 
- stack 1: 0x848
- stack 0: 0x3300001
7204	 336	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x3300001
- stack 0: 0xFFFF
7205	 339	AND		 	 
- stack 1: 0x848
- stack 0: 0x1
7206	 33A	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7207	 33C	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x1
7208	 33D	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7209	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x0
7210	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x848
- stack 0: 0x1
7211	 342	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7212	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x848
7213	 346	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7214	 348	ADD		 	 
- stack 0: 0x84C
7215	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7216	 34A	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
7217	 34B	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
- stack 0: 0xF0
7218	 34D	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x34F
7219	 34E	JUMP		 	 
- stack 0: 0x84C
7220	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x84C
7221	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7222	 351	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
7223	 352	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
- stack 0: 0xE0
7224	 354	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x34F0002
7225	 355	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
7226	 358	AND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7227	 359	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x1
7228	 35B	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7229	 35C	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xA0
7230	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x84C
7231	 360	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7232	 362	ADD		 	 
- stack 0: 0x850
7233	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7234	 364	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
7235	 365	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
- stack 0: 0xF0
7236	 367	SHR		 	 
- stack 1: 0x850
- stack 0: 0x369
7237	 368	JUMP		 	 
- stack 0: 0x850
7238	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x850
7239	 36A	PUSH2	0080	 	 
- stack 1: 0x850
- stack 0: 0x80
7240	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x850
- stack 0: 0x1
7241	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
7242	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x1
7243	 374	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0xA0
7244	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x2
7245	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7246	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x2
7247	 37E	SUB		 	 
- stack 1: 0x850
- stack 0: 0x1
7248	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x850
- stack 1: 0x1
- stack 0: 0x387
7249	 382	JUMPI		 	 
- stack 0: 0x850
7250	 387	JUMPDEST		 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x850
7251	 388	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x850
- stack 0: 0x850
7252	 389	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
7253	 38A	PUSH1	E0	 	 
- stack 2: 0x850
- stack 1: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
- stack 0: 0xE0
7254	 38C	SHR		 	 
- stack 1: 0x850
- stack 0: 0x369FFDC
7255	 38D	PUSH2	FFFF	 	 
- stack 2: 0x850
- stack 1: 0x369FFDC
- stack 0: 0xFFFF
7256	 390	AND		 	 
- stack 1: 0x850
- stack 0: 0xFFDC
7257	 391	PUSH1	01	 	 
- stack 2: 0x850
- stack 1: 0xFFDC
- stack 0: 0x1
7258	 393	SIGNEXTEND		 	 
- stack 1: 0x850
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC
7259	 394	ADD		 	 
- stack 0: 0x82C
7260	 395	PUSH4	FFFFFFFF	 	 
- stack 1: 0x82C
- stack 0: 0xFFFFFFFF
7261	 39A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x82C
7262	 39B	DUP1		 	  ;; # executing pc
- stack 1: 0x82C
- stack 0: 0x82C
7263	 39C	MLOAD		 	 
- stack 1: 0x82C
- stack 0: 0xB8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001
7264	 39D	PUSH1	F0	 	 
- stack 2: 0x82C
- stack 1: 0xB8F0F100CBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001
- stack 0: 0xF0
7265	 39F	SHR		 	 
- stack 1: 0x82C
- stack 0: 0xB8
7266	 3A0	JUMP		 	 
- stack 0: 0x82C
7267	 B8	JUMPDEST		 ;; __riscvimpl_LUI_f0f1137	  ;; # instr: lui sp,0xf0f1(ignore imm)
- stack 0: 0x82C
7268	 B9	PUSH4	0f0f1000	 	 
- stack 1: 0x82C
- stack 0: 0xF0F1000
7269	 BE	PUSH2	0040	 	 
- stack 2: 0x82C
- stack 1: 0xF0F1000
- stack 0: 0x40
7270	 C1	MSTORE		 	  ;; # store to x2
- stack 0: 0x82C
7271	 C2	PUSH1	04	 	 
- stack 1: 0x82C
- stack 0: 0x4
7272	 C4	ADD		 	 
- stack 0: 0x830
7273	 C5	DUP1		 	  ;; # executing pc
- stack 1: 0x830
- stack 0: 0x830
7274	 C6	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
7275	 C7	PUSH1	F0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
- stack 0: 0xF0
7276	 C9	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCB
7277	 CA	JUMP		 	 
- stack 0: 0x830
7278	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x830
7279	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x830
- stack 0: 0x830
7280	 CD	MLOAD		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
7281	 CE	PUSH1	E0	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F03ED000003ED000001C80FF0009900FF00EA000003300001034F0002
- stack 0: 0xE0
7282	 D0	SHR		 	 
- stack 1: 0x830
- stack 0: 0xCBFF0F
7283	 D1	PUSH2	FFFF	 	 
- stack 2: 0x830
- stack 1: 0xCBFF0F
- stack 0: 0xFFFF
7284	 D4	AND		 	 
- stack 1: 0x830
- stack 0: 0xFF0F
7285	 D5	PUSH1	01	 	 
- stack 2: 0x830
- stack 1: 0xFF0F
- stack 0: 0x1
7286	 D7	SIGNEXTEND		 	 
- stack 1: 0x830
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
7287	 D8	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x40
7288	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x830
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xF0F1000
7289	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x830
- stack 0: 0xF0F0F0F
7290	 DD	PUSH2	0040	 	 
- stack 2: 0x830
- stack 1: 0xF0F0F0F
- stack 0: 0x40
7291	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x830
7292	 E1	PUSH1	04	 	 
- stack 1: 0x830
- stack 0: 0x4
7293	 E3	ADD		 	 
- stack 0: 0x834
7294	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x834
- stack 0: 0x834
7295	 E5	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
7296	 E6	PUSH1	F0	 	 
- stack 2: 0x834
- stack 1: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
- stack 0: 0xF0
7297	 E8	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3ED
7298	 E9	JUMP		 	 
- stack 0: 0x834
7299	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x834
7300	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x834
- stack 0: 0x834
7301	 3EF	MLOAD		 	 
- stack 1: 0x834
- stack 0: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
7302	 3F0	PUSH1	E0	 	 
- stack 2: 0x834
- stack 1: 0x3ED000003ED000001C80FF0009900FF00EA000003300001034F00020369FFDC
- stack 0: 0xE0
7303	 3F2	SHR		 	 
- stack 1: 0x834
- stack 0: 0x3ED0000
7304	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x834
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
7305	 3F6	AND		 	 
- stack 1: 0x834
- stack 0: 0x0
7306	 3F7	PUSH1	01	 	 
- stack 2: 0x834
- stack 1: 0x0
- stack 0: 0x1
7307	 3F9	SIGNEXTEND		 	 
- stack 1: 0x834
- stack 0: 0x0
7308	 3FA	POP		 	 
- stack 0: 0x834
7309	 3FB	PUSH1	04	 	 
- stack 1: 0x834
- stack 0: 0x4
7310	 3FD	ADD		 	 
- stack 0: 0x838
7311	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x838
- stack 0: 0x838
7312	 3FF	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
7313	 400	PUSH1	F0	 	 
- stack 2: 0x838
- stack 1: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xF0
7314	 402	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3ED
7315	 403	JUMP		 	 
- stack 0: 0x838
7316	 3ED	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x838
7317	 3EE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x838
- stack 0: 0x838
7318	 3EF	MLOAD		 	 
- stack 1: 0x838
- stack 0: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
7319	 3F0	PUSH1	E0	 	 
- stack 2: 0x838
- stack 1: 0x3ED000001C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF01
- stack 0: 0xE0
7320	 3F2	SHR		 	 
- stack 1: 0x838
- stack 0: 0x3ED0000
7321	 3F3	PUSH2	FFFF	 	 
- stack 2: 0x838
- stack 1: 0x3ED0000
- stack 0: 0xFFFF
7322	 3F6	AND		 	 
- stack 1: 0x838
- stack 0: 0x0
7323	 3F7	PUSH1	01	 	 
- stack 2: 0x838
- stack 1: 0x0
- stack 0: 0x1
7324	 3F9	SIGNEXTEND		 	 
- stack 1: 0x838
- stack 0: 0x0
7325	 3FA	POP		 	 
- stack 0: 0x838
7326	 3FB	PUSH1	04	 	 
- stack 1: 0x838
- stack 0: 0x4
7327	 3FD	ADD		 	 
- stack 0: 0x83C
7328	 3FE	DUP1		 	  ;; # executing pc
- stack 1: 0x83C
- stack 0: 0x83C
7329	 3FF	MLOAD		 	 
- stack 1: 0x83C
- stack 0: 0x1C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF010114FFF0
7330	 400	PUSH1	F0	 	 
- stack 2: 0x83C
- stack 1: 0x1C80FF0009900FF00EA000003300001034F00020369FFDC01DBFF010114FFF0
- stack 0: 0xF0
7331	 402	SHR		 	 
- stack 1: 0x83C
- stack 0: 0x1C8
7332	 403	JUMP		 	 
- stack 0: 0x83C
7333	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x83C
7334	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x83C
- stack 0: 0xFF0000
7335	 1CE	PUSH2	0020	 	 
- stack 2: 0x83C
- stack 1: 0xFF0000
- stack 0: 0x20
7336	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x83C
7337	 1D2	PUSH1	04	 	 
- stack 1: 0x83C
- stack 0: 0x4
7338	 1D4	ADD		 	 
- stack 0: 0x840
7339	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x840
- stack 0: 0x840
7340	 1D6	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
7341	 1D7	PUSH1	F0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
- stack 0: 0xF0
7342	 1D9	SHR		 	 
- stack 1: 0x840
- stack 0: 0x99
7343	 1DA	JUMP		 	 
- stack 0: 0x840
7344	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x840
7345	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x840
- stack 0: 0x840
7346	 9B	MLOAD		 	 
- stack 1: 0x840
- stack 0: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
7347	 9C	PUSH1	E0	 	 
- stack 2: 0x840
- stack 1: 0x9900FF00EA000003300001034F00020369FFDC01DBFF010114FFF001330017
- stack 0: 0xE0
7348	 9E	SHR		 	 
- stack 1: 0x840
- stack 0: 0x9900FF
7349	 9F	PUSH2	FFFF	 	 
- stack 2: 0x840
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7350	 A2	AND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7351	 A3	PUSH1	01	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x1
7352	 A5	SIGNEXTEND		 	 
- stack 1: 0x840
- stack 0: 0xFF
7353	 A6	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0x20
7354	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x840
- stack 1: 0xFF
- stack 0: 0xFF0000
7355	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x840
- stack 0: 0xFF00FF
7356	 AB	PUSH2	0020	 	 
- stack 2: 0x840
- stack 1: 0xFF00FF
- stack 0: 0x20
7357	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x840
7358	 AF	PUSH1	04	 	 
- stack 1: 0x840
- stack 0: 0x4
7359	 B1	ADD		 	 
- stack 0: 0x844
7360	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x844
- stack 0: 0x844
7361	 B3	MLOAD		 	 
- stack 1: 0x844
- stack 0: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330017014D0070
7362	 B4	PUSH1	F0	 	 
- stack 2: 0x844
- stack 1: 0xEA000003300001034F00020369FFDC01DBFF010114FFF001330017014D0070
- stack 0: 0xF0
7363	 B6	SHR		 	 
- stack 1: 0x844
- stack 0: 0xEA
7364	 B7	JUMP		 	 
- stack 0: 0x844
7365	 EA	JUMPDEST		 ;; __riscvimpl_XOR_3_1_2	  ;; # instr: xor gp,ra,sp(ignore imm)
- stack 0: 0x844
7366	 EB	PUSH2	0040	 	 
- stack 1: 0x844
- stack 0: 0x40
7367	 EE	MLOAD		 	  ;; # read from x2
- stack 1: 0x844
- stack 0: 0xF0F0F0F
7368	 EF	PUSH2	0020	 	 
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0x20
7369	 F2	MLOAD		 	  ;; # read from x1
- stack 2: 0x844
- stack 1: 0xF0F0F0F
- stack 0: 0xFF00FF
7370	 F3	XOR		 	  ;; # XOR
- stack 1: 0x844
- stack 0: 0xFF00FF0
7371	 F4	PUSH2	0060	 	 
- stack 2: 0x844
- stack 1: 0xFF00FF0
- stack 0: 0x60
7372	 F7	MSTORE		 	  ;; # store to x3
- stack 0: 0x844
7373	 F8	PUSH1	04	 	 
- stack 1: 0x844
- stack 0: 0x4
7374	 FA	ADD		 	 
- stack 0: 0x848
7375	 FB	DUP1		 	  ;; # executing pc
- stack 1: 0x848
- stack 0: 0x848
7376	 FC	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
7377	 FD	PUSH1	F0	 	 
- stack 2: 0x848
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
- stack 0: 0xF0
7378	 FF	SHR		 	 
- stack 1: 0x848
- stack 0: 0x330
7379	 100	JUMP		 	 
- stack 0: 0x848
7380	 330	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x848
7381	 331	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x848
- stack 0: 0x848
7382	 332	MLOAD		 	 
- stack 1: 0x848
- stack 0: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
7383	 333	PUSH1	E0	 	 
- stack 2: 0x848
- stack 1: 0x3300001034F00020369FFDC01DBFF010114FFF001330017014D00700086F010
- stack 0: 0xE0
7384	 335	SHR		 	 
- stack 1: 0x848
- stack 0: 0x3300001
7385	 336	PUSH2	FFFF	 	 
- stack 2: 0x848
- stack 1: 0x3300001
- stack 0: 0xFFFF
7386	 339	AND		 	 
- stack 1: 0x848
- stack 0: 0x1
7387	 33A	PUSH1	01	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7388	 33C	SIGNEXTEND		 	 
- stack 1: 0x848
- stack 0: 0x1
7389	 33D	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x80
7390	 340	MLOAD		 	  ;; # read from x4
- stack 2: 0x848
- stack 1: 0x1
- stack 0: 0x1
7391	 341	ADD		 	  ;; # ADDI 4
- stack 1: 0x848
- stack 0: 0x2
7392	 342	PUSH2	0080	 	 
- stack 2: 0x848
- stack 1: 0x2
- stack 0: 0x80
7393	 345	MSTORE		 	  ;; # store to x4
- stack 0: 0x848
7394	 346	PUSH1	04	 	 
- stack 1: 0x848
- stack 0: 0x4
7395	 348	ADD		 	 
- stack 0: 0x84C
7396	 349	DUP1		 	  ;; # executing pc
- stack 1: 0x84C
- stack 0: 0x84C
7397	 34A	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
7398	 34B	PUSH1	F0	 	 
- stack 2: 0x84C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
- stack 0: 0xF0
7399	 34D	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x34F
7400	 34E	JUMP		 	 
- stack 0: 0x84C
7401	 34F	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x84C
7402	 350	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x84C
- stack 0: 0x84C
7403	 351	MLOAD		 	 
- stack 1: 0x84C
- stack 0: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
7404	 352	PUSH1	E0	 	 
- stack 2: 0x84C
- stack 1: 0x34F00020369FFDC01DBFF010114FFF001330017014D00700086F0100099FF00
- stack 0: 0xE0
7405	 354	SHR		 	 
- stack 1: 0x84C
- stack 0: 0x34F0002
7406	 355	PUSH2	FFFF	 	 
- stack 2: 0x84C
- stack 1: 0x34F0002
- stack 0: 0xFFFF
7407	 358	AND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7408	 359	PUSH1	01	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0x1
7409	 35B	SIGNEXTEND		 	 
- stack 1: 0x84C
- stack 0: 0x2
7410	 35C	PUSH2	00A0	 	 
- stack 2: 0x84C
- stack 1: 0x2
- stack 0: 0xA0
7411	 35F	MSTORE		 	  ;; # store to x5
- stack 0: 0x84C
7412	 360	PUSH1	04	 	 
- stack 1: 0x84C
- stack 0: 0x4
7413	 362	ADD		 	 
- stack 0: 0x850
7414	 363	DUP1		 	  ;; # executing pc
- stack 1: 0x850
- stack 0: 0x850
7415	 364	MLOAD		 	 
- stack 1: 0x850
- stack 0: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
7416	 365	PUSH1	F0	 	 
- stack 2: 0x850
- stack 1: 0x369FFDC01DBFF010114FFF001330017014D00700086F0100099FF0004040000
- stack 0: 0xF0
7417	 367	SHR		 	 
- stack 1: 0x850
- stack 0: 0x369
7418	 368	JUMP		 	 
- stack 0: 0x850
7419	 369	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-20(ignore imm)
- stack 0: 0x850
7420	 36A	PUSH2	0080	 	 
- stack 1: 0x850
- stack 0: 0x80
7421	 36D	MLOAD		 	  ;; # read from x4
- stack 1: 0x850
- stack 0: 0x2
7422	 36E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7423	 373	AND		 	  ;; # mask to 32 bits
- stack 1: 0x850
- stack 0: 0x2
7424	 374	PUSH2	00A0	 	 
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0xA0
7425	 377	MLOAD		 	  ;; # read from x5
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x2
7426	 378	PUSH4	FFFFFFFF	 	 
- stack 3: 0x850
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
7427	 37D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x850
- stack 1: 0x2
- stack 0: 0x2
7428	 37E	SUB		 	 
- stack 1: 0x850
- stack 0: 0x0
7429	 37F	PUSH2	0387	 ;; _neq_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 2: 0x850
- stack 1: 0x0
- stack 0: 0x387
7430	 382	JUMPI		 	 
- stack 0: 0x850
7431	 383	PUSH2	03A1	 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 1: 0x850
- stack 0: 0x3A1
7432	 386	JUMP		 	 
- stack 0: 0x850
7433	 3A1	JUMPDEST		 ;; _neq_after_2b2abf595f9fc5275ce25990b8f399a8d440346b862f63229a1bc9c6465b0bb5	 
- stack 0: 0x850
7434	 3A2	PUSH1	04	 	 
- stack 1: 0x850
- stack 0: 0x4
7435	 3A4	ADD		 	 
- stack 0: 0x854
7436	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x854
- stack 0: 0x854
7437	 3A6	MLOAD		 	 
- stack 1: 0x854
- stack 0: 0x1DBFF010114FFF001330017014D00700086F0100099FF000404000001B5F010
7438	 3A7	PUSH1	F0	 	 
- stack 2: 0x854
- stack 1: 0x1DBFF010114FFF001330017014D00700086F0100099FF000404000001B5F010
- stack 0: 0xF0
7439	 3A9	SHR		 	 
- stack 1: 0x854
- stack 0: 0x1DB
7440	 3AA	JUMP		 	 
- stack 0: 0x854
7441	 1DB	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x854
7442	 1DC	PUSH4	0ff01000	 	 
- stack 1: 0x854
- stack 0: 0xFF01000
7443	 1E1	PUSH2	03A0	 	 
- stack 2: 0x854
- stack 1: 0xFF01000
- stack 0: 0x3A0
7444	 1E4	MSTORE		 	  ;; # store to x29
- stack 0: 0x854
7445	 1E5	PUSH1	04	 	 
- stack 1: 0x854
- stack 0: 0x4
7446	 1E7	ADD		 	 
- stack 0: 0x858
7447	 1E8	DUP1		 	  ;; # executing pc
- stack 1: 0x858
- stack 0: 0x858
7448	 1E9	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x114FFF001330017014D00700086F0100099FF000404000001B5F0100114FF00
7449	 1EA	PUSH1	F0	 	 
- stack 2: 0x858
- stack 1: 0x114FFF001330017014D00700086F0100099FF000404000001B5F0100114FF00
- stack 0: 0xF0
7450	 1EC	SHR		 	 
- stack 1: 0x858
- stack 0: 0x114
7451	 1ED	JUMP		 	 
- stack 0: 0x858
7452	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x858
7453	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x858
- stack 0: 0x858
7454	 116	MLOAD		 	 
- stack 1: 0x858
- stack 0: 0x114FFF001330017014D00700086F0100099FF000404000001B5F0100114FF00
7455	 117	PUSH1	E0	 	 
- stack 2: 0x858
- stack 1: 0x114FFF001330017014D00700086F0100099FF000404000001B5F0100114FF00
- stack 0: 0xE0
7456	 119	SHR		 	 
- stack 1: 0x858
- stack 0: 0x114FFF0
7457	 11A	PUSH2	FFFF	 	 
- stack 2: 0x858
- stack 1: 0x114FFF0
- stack 0: 0xFFFF
7458	 11D	AND		 	 
- stack 1: 0x858
- stack 0: 0xFFF0
7459	 11E	PUSH1	01	 	 
- stack 2: 0x858
- stack 1: 0xFFF0
- stack 0: 0x1
7460	 120	SIGNEXTEND		 	 
- stack 1: 0x858
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
7461	 121	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
7462	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x858
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
7463	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x858
- stack 0: 0xFF00FF0
7464	 126	PUSH2	03A0	 	 
- stack 2: 0x858
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
7465	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x858
7466	 12A	PUSH1	04	 	 
- stack 1: 0x858
- stack 0: 0x4
7467	 12C	ADD		 	 
- stack 0: 0x85C
7468	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x85C
- stack 0: 0x85C
7469	 12E	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x1330017014D00700086F0100099FF000404000001B5F0100114FF0001330018
7470	 12F	PUSH1	F0	 	 
- stack 2: 0x85C
- stack 1: 0x1330017014D00700086F0100099FF000404000001B5F0100114FF0001330018
- stack 0: 0xF0
7471	 131	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x133
7472	 132	JUMP		 	 
- stack 0: 0x85C
7473	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x85C
7474	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x85C
- stack 0: 0x85C
7475	 135	MLOAD		 	 
- stack 1: 0x85C
- stack 0: 0x1330017014D00700086F0100099FF000404000001B5F0100114FF0001330018
7476	 136	PUSH1	E0	 	 
- stack 2: 0x85C
- stack 1: 0x1330017014D00700086F0100099FF000404000001B5F0100114FF0001330018
- stack 0: 0xE0
7477	 138	SHR		 	 
- stack 1: 0x85C
- stack 0: 0x1330017
7478	 139	PUSH2	FFFF	 	 
- stack 2: 0x85C
- stack 1: 0x1330017
- stack 0: 0xFFFF
7479	 13C	AND		 	 
- stack 1: 0x85C
- stack 0: 0x17
7480	 13D	PUSH1	01	 	 
- stack 2: 0x85C
- stack 1: 0x17
- stack 0: 0x1
7481	 13F	SIGNEXTEND		 	 
- stack 1: 0x85C
- stack 0: 0x17
7482	 140	PUSH2	0380	 	 
- stack 2: 0x85C
- stack 1: 0x17
- stack 0: 0x380
7483	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x85C
7484	 144	PUSH1	04	 	 
- stack 1: 0x85C
- stack 0: 0x4
7485	 146	ADD		 	 
- stack 0: 0x860
7486	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x860
- stack 0: 0x860
7487	 148	MLOAD		 	 
- stack 1: 0x860
- stack 0: 0x14D00700086F0100099FF000404000001B5F0100114FF000133001802840054
7488	 149	PUSH1	F0	 	 
- stack 2: 0x860
- stack 1: 0x14D00700086F0100099FF000404000001B5F0100114FF000133001802840054
- stack 0: 0xF0
7489	 14B	SHR		 	 
- stack 1: 0x860
- stack 0: 0x14D
7490	 14C	JUMP		 	 
- stack 0: 0x860
7491	 14D	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,4a0(ignore imm)
- stack 0: 0x860
7492	 14E	PUSH2	0060	 	 
- stack 1: 0x860
- stack 0: 0x60
7493	 151	MLOAD		 	  ;; # read from x3
- stack 1: 0x860
- stack 0: 0xFF00FF0
7494	 152	PUSH4	FFFFFFFF	 	 
- stack 2: 0x860
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
7495	 157	AND		 	  ;; # mask to 32 bits
- stack 1: 0x860
- stack 0: 0xFF00FF0
7496	 158	PUSH2	03A0	 	 
- stack 2: 0x860
- stack 1: 0xFF00FF0
- stack 0: 0x3A0
7497	 15B	MLOAD		 	  ;; # read from x29
- stack 2: 0x860
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
7498	 15C	PUSH4	FFFFFFFF	 	 
- stack 3: 0x860
- stack 2: 0xFF00FF0
- stack 1: 0xFF00FF0
- stack 0: 0xFFFFFFFF
7499	 161	AND		 	  ;; # mask to 32 bits
- stack 2: 0x860
- stack 1: 0xFF00FF0
- stack 0: 0xFF00FF0
7500	 162	SUB		 	 
- stack 1: 0x860
- stack 0: 0x0
7501	 163	PUSH2	016B	 ;; _neq_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 2: 0x860
- stack 1: 0x0
- stack 0: 0x16B
7502	 166	JUMPI		 	 
- stack 0: 0x860
7503	 167	PUSH2	0185	 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 1: 0x860
- stack 0: 0x185
7504	 16A	JUMP		 	 
- stack 0: 0x860
7505	 185	JUMPDEST		 ;; _neq_after_ee0e75406be30a2b6001de0c336772b4f2a1c959b6d10c1ac37d4a06bd2857db	 
- stack 0: 0x860
7506	 186	PUSH1	04	 	 
- stack 1: 0x860
- stack 0: 0x4
7507	 188	ADD		 	 
- stack 0: 0x864
7508	 189	DUP1		 	  ;; # executing pc
- stack 1: 0x864
- stack 0: 0x864
7509	 18A	MLOAD		 	 
- stack 1: 0x864
- stack 0: 0x86F0100099FF000404000001B5F0100114FF00013300180284005401C80FF0
7510	 18B	PUSH1	F0	 	 
- stack 2: 0x864
- stack 1: 0x86F0100099FF000404000001B5F0100114FF00013300180284005401C80FF0
- stack 0: 0xF0
7511	 18D	SHR		 	 
- stack 1: 0x864
- stack 0: 0x86
7512	 18E	JUMP		 	 
- stack 0: 0x864
7513	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff0100b7	  ;; # instr: lui ra,0xff010(ignore imm)
- stack 0: 0x864
7514	 87	PUSH4	ff010000	 	 
- stack 1: 0x864
- stack 0: 0xFF010000
7515	 8C	PUSH2	0020	 	 
- stack 2: 0x864
- stack 1: 0xFF010000
- stack 0: 0x20
7516	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x864
7517	 90	PUSH1	04	 	 
- stack 1: 0x864
- stack 0: 0x4
7518	 92	ADD		 	 
- stack 0: 0x868
7519	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x868
- stack 0: 0x868
7520	 94	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x99FF000404000001B5F0100114FF00013300180284005401C80FF0009900FF
7521	 95	PUSH1	F0	 	 
- stack 2: 0x868
- stack 1: 0x99FF000404000001B5F0100114FF00013300180284005401C80FF0009900FF
- stack 0: 0xF0
7522	 97	SHR		 	 
- stack 1: 0x868
- stack 0: 0x99
7523	 98	JUMP		 	 
- stack 0: 0x868
7524	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x868
7525	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x868
- stack 0: 0x868
7526	 9B	MLOAD		 	 
- stack 1: 0x868
- stack 0: 0x99FF000404000001B5F0100114FF00013300180284005401C80FF0009900FF
7527	 9C	PUSH1	E0	 	 
- stack 2: 0x868
- stack 1: 0x99FF000404000001B5F0100114FF00013300180284005401C80FF0009900FF
- stack 0: 0xE0
7528	 9E	SHR		 	 
- stack 1: 0x868
- stack 0: 0x99FF00
7529	 9F	PUSH2	FFFF	 	 
- stack 2: 0x868
- stack 1: 0x99FF00
- stack 0: 0xFFFF
7530	 A2	AND		 	 
- stack 1: 0x868
- stack 0: 0xFF00
7531	 A3	PUSH1	01	 	 
- stack 2: 0x868
- stack 1: 0xFF00
- stack 0: 0x1
7532	 A5	SIGNEXTEND		 	 
- stack 1: 0x868
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7533	 A6	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
7534	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x868
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7535	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x868
- stack 0: 0xFF00FF00
7536	 AB	PUSH2	0020	 	 
- stack 2: 0x868
- stack 1: 0xFF00FF00
- stack 0: 0x20
7537	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x868
7538	 AF	PUSH1	04	 	 
- stack 1: 0x868
- stack 0: 0x4
7539	 B1	ADD		 	 
- stack 0: 0x86C
7540	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x86C
- stack 0: 0x86C
7541	 B3	MLOAD		 	 
- stack 1: 0x86C
- stack 0: 0x404000001B5F0100114FF00013300180284005401C80FF0009900FF04190000
7542	 B4	PUSH1	F0	 	 
- stack 2: 0x86C
- stack 1: 0x404000001B5F0100114FF00013300180284005401C80FF0009900FF04190000
- stack 0: 0xF0
7543	 B6	SHR		 	 
- stack 1: 0x86C
- stack 0: 0x404
7544	 B7	JUMP		 	 
- stack 0: 0x86C
7545	 404	JUMPDEST		 ;; __riscvimpl_XOR_2_0_1	  ;; # instr: xor sp,zero,ra(ignore imm)
- stack 0: 0x86C
7546	 405	PUSH2	0020	 	 
- stack 1: 0x86C
- stack 0: 0x20
7547	 408	MLOAD		 	  ;; # read from x1
- stack 1: 0x86C
- stack 0: 0xFF00FF00
7548	 409	PUSH1	00	 	 
- stack 2: 0x86C
- stack 1: 0xFF00FF00
- stack 0: 0x0
7549	 40B	XOR		 	  ;; # XOR
- stack 1: 0x86C
- stack 0: 0xFF00FF00
7550	 40C	PUSH2	0040	 	 
- stack 2: 0x86C
- stack 1: 0xFF00FF00
- stack 0: 0x40
7551	 40F	MSTORE		 	  ;; # store to x2
- stack 0: 0x86C
7552	 410	PUSH1	04	 	 
- stack 1: 0x86C
- stack 0: 0x4
7553	 412	ADD		 	 
- stack 0: 0x870
7554	 413	DUP1		 	  ;; # executing pc
- stack 1: 0x870
- stack 0: 0x870
7555	 414	MLOAD		 	 
- stack 1: 0x870
- stack 0: 0x1B5F0100114FF00013300180284005401C80FF0009900FF0419000002010FF0
7556	 415	PUSH1	F0	 	 
- stack 2: 0x870
- stack 1: 0x1B5F0100114FF00013300180284005401C80FF0009900FF0419000002010FF0
- stack 0: 0xF0
7557	 417	SHR		 	 
- stack 1: 0x870
- stack 0: 0x1B5
7558	 418	JUMP		 	 
- stack 0: 0x870
7559	 1B5	JUMPDEST		 ;; __riscvimpl_LUI_ff010eb7	  ;; # instr: lui t4,0xff010(ignore imm)
- stack 0: 0x870
7560	 1B6	PUSH4	ff010000	 	 
- stack 1: 0x870
- stack 0: 0xFF010000
7561	 1BB	PUSH2	03A0	 	 
- stack 2: 0x870
- stack 1: 0xFF010000
- stack 0: 0x3A0
7562	 1BE	MSTORE		 	  ;; # store to x29
- stack 0: 0x870
7563	 1BF	PUSH1	04	 	 
- stack 1: 0x870
- stack 0: 0x4
7564	 1C1	ADD		 	 
- stack 0: 0x874
7565	 1C2	DUP1		 	  ;; # executing pc
- stack 1: 0x874
- stack 0: 0x874
7566	 1C3	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x114FF00013300180284005401C80FF0009900FF0419000002010FF0011400FF
7567	 1C4	PUSH1	F0	 	 
- stack 2: 0x874
- stack 1: 0x114FF00013300180284005401C80FF0009900FF0419000002010FF0011400FF
- stack 0: 0xF0
7568	 1C6	SHR		 	 
- stack 1: 0x874
- stack 0: 0x114
7569	 1C7	JUMP		 	 
- stack 0: 0x874
7570	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x874
7571	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x874
- stack 0: 0x874
7572	 116	MLOAD		 	 
- stack 1: 0x874
- stack 0: 0x114FF00013300180284005401C80FF0009900FF0419000002010FF0011400FF
7573	 117	PUSH1	E0	 	 
- stack 2: 0x874
- stack 1: 0x114FF00013300180284005401C80FF0009900FF0419000002010FF0011400FF
- stack 0: 0xE0
7574	 119	SHR		 	 
- stack 1: 0x874
- stack 0: 0x114FF00
7575	 11A	PUSH2	FFFF	 	 
- stack 2: 0x874
- stack 1: 0x114FF00
- stack 0: 0xFFFF
7576	 11D	AND		 	 
- stack 1: 0x874
- stack 0: 0xFF00
7577	 11E	PUSH1	01	 	 
- stack 2: 0x874
- stack 1: 0xFF00
- stack 0: 0x1
7578	 120	SIGNEXTEND		 	 
- stack 1: 0x874
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
7579	 121	PUSH2	03A0	 	 
- stack 2: 0x874
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
7580	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x874
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF010000
7581	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x874
- stack 0: 0xFF00FF00
7582	 126	PUSH2	03A0	 	 
- stack 2: 0x874
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7583	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x874
7584	 12A	PUSH1	04	 	 
- stack 1: 0x874
- stack 0: 0x4
7585	 12C	ADD		 	 
- stack 0: 0x878
7586	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x878
- stack 0: 0x878
7587	 12E	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x13300180284005401C80FF0009900FF0419000002010FF0011400FF01330019
7588	 12F	PUSH1	F0	 	 
- stack 2: 0x878
- stack 1: 0x13300180284005401C80FF0009900FF0419000002010FF0011400FF01330019
- stack 0: 0xF0
7589	 131	SHR		 	 
- stack 1: 0x878
- stack 0: 0x133
7590	 132	JUMP		 	 
- stack 0: 0x878
7591	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x878
7592	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x878
- stack 0: 0x878
7593	 135	MLOAD		 	 
- stack 1: 0x878
- stack 0: 0x13300180284005401C80FF0009900FF0419000002010FF0011400FF01330019
7594	 136	PUSH1	E0	 	 
- stack 2: 0x878
- stack 1: 0x13300180284005401C80FF0009900FF0419000002010FF0011400FF01330019
- stack 0: 0xE0
7595	 138	SHR		 	 
- stack 1: 0x878
- stack 0: 0x1330018
7596	 139	PUSH2	FFFF	 	 
- stack 2: 0x878
- stack 1: 0x1330018
- stack 0: 0xFFFF
7597	 13C	AND		 	 
- stack 1: 0x878
- stack 0: 0x18
7598	 13D	PUSH1	01	 	 
- stack 2: 0x878
- stack 1: 0x18
- stack 0: 0x1
7599	 13F	SIGNEXTEND		 	 
- stack 1: 0x878
- stack 0: 0x18
7600	 140	PUSH2	0380	 	 
- stack 2: 0x878
- stack 1: 0x18
- stack 0: 0x380
7601	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x878
7602	 144	PUSH1	04	 	 
- stack 1: 0x878
- stack 0: 0x4
7603	 146	ADD		 	 
- stack 0: 0x87C
7604	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x87C
- stack 0: 0x87C
7605	 148	MLOAD		 	 
- stack 1: 0x87C
- stack 0: 0x284005401C80FF0009900FF0419000002010FF0011400FF0133001902840038
7606	 149	PUSH1	F0	 	 
- stack 2: 0x87C
- stack 1: 0x284005401C80FF0009900FF0419000002010FF0011400FF0133001902840038
- stack 0: 0xF0
7607	 14B	SHR		 	 
- stack 1: 0x87C
- stack 0: 0x284
7608	 14C	JUMP		 	 
- stack 0: 0x87C
7609	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3ec(ignore imm)
- stack 0: 0x87C
7610	 285	PUSH2	0040	 	 
- stack 1: 0x87C
- stack 0: 0x40
7611	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x87C
- stack 0: 0xFF00FF00
7612	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x87C
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7613	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x87C
- stack 0: 0xFF00FF00
7614	 28F	PUSH2	03A0	 	 
- stack 2: 0x87C
- stack 1: 0xFF00FF00
- stack 0: 0x3A0
7615	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x87C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7616	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x87C
- stack 2: 0xFF00FF00
- stack 1: 0xFF00FF00
- stack 0: 0xFFFFFFFF
7617	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x87C
- stack 1: 0xFF00FF00
- stack 0: 0xFF00FF00
7618	 299	SUB		 	 
- stack 1: 0x87C
- stack 0: 0x0
7619	 29A	PUSH2	02A2	 ;; _neq_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 2: 0x87C
- stack 1: 0x0
- stack 0: 0x2A2
7620	 29D	JUMPI		 	 
- stack 0: 0x87C
7621	 29E	PUSH2	02BC	 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 1: 0x87C
- stack 0: 0x2BC
7622	 2A1	JUMP		 	 
- stack 0: 0x87C
7623	 2BC	JUMPDEST		 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 0: 0x87C
7624	 2BD	PUSH1	04	 	 
- stack 1: 0x87C
- stack 0: 0x4
7625	 2BF	ADD		 	 
- stack 0: 0x880
7626	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x880
- stack 0: 0x880
7627	 2C1	MLOAD		 	 
- stack 1: 0x880
- stack 0: 0x1C80FF0009900FF0419000002010FF0011400FF0133001902840038042E0000
7628	 2C2	PUSH1	F0	 	 
- stack 2: 0x880
- stack 1: 0x1C80FF0009900FF0419000002010FF0011400FF0133001902840038042E0000
- stack 0: 0xF0
7629	 2C4	SHR		 	 
- stack 1: 0x880
- stack 0: 0x1C8
7630	 2C5	JUMP		 	 
- stack 0: 0x880
7631	 1C8	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x880
7632	 1C9	PUSH4	00ff0000	 	 
- stack 1: 0x880
- stack 0: 0xFF0000
7633	 1CE	PUSH2	0020	 	 
- stack 2: 0x880
- stack 1: 0xFF0000
- stack 0: 0x20
7634	 1D1	MSTORE		 	  ;; # store to x1
- stack 0: 0x880
7635	 1D2	PUSH1	04	 	 
- stack 1: 0x880
- stack 0: 0x4
7636	 1D4	ADD		 	 
- stack 0: 0x884
7637	 1D5	DUP1		 	  ;; # executing pc
- stack 1: 0x884
- stack 0: 0x884
7638	 1D6	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x9900FF0419000002010FF0011400FF0133001902840038042E000002DD0000
7639	 1D7	PUSH1	F0	 	 
- stack 2: 0x884
- stack 1: 0x9900FF0419000002010FF0011400FF0133001902840038042E000002DD0000
- stack 0: 0xF0
7640	 1D9	SHR		 	 
- stack 1: 0x884
- stack 0: 0x99
7641	 1DA	JUMP		 	 
- stack 0: 0x884
7642	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x884
7643	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x884
- stack 0: 0x884
7644	 9B	MLOAD		 	 
- stack 1: 0x884
- stack 0: 0x9900FF0419000002010FF0011400FF0133001902840038042E000002DD0000
7645	 9C	PUSH1	E0	 	 
- stack 2: 0x884
- stack 1: 0x9900FF0419000002010FF0011400FF0133001902840038042E000002DD0000
- stack 0: 0xE0
7646	 9E	SHR		 	 
- stack 1: 0x884
- stack 0: 0x9900FF
7647	 9F	PUSH2	FFFF	 	 
- stack 2: 0x884
- stack 1: 0x9900FF
- stack 0: 0xFFFF
7648	 A2	AND		 	 
- stack 1: 0x884
- stack 0: 0xFF
7649	 A3	PUSH1	01	 	 
- stack 2: 0x884
- stack 1: 0xFF
- stack 0: 0x1
7650	 A5	SIGNEXTEND		 	 
- stack 1: 0x884
- stack 0: 0xFF
7651	 A6	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFF
- stack 0: 0x20
7652	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x884
- stack 1: 0xFF
- stack 0: 0xFF0000
7653	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x884
- stack 0: 0xFF00FF
7654	 AB	PUSH2	0020	 	 
- stack 2: 0x884
- stack 1: 0xFF00FF
- stack 0: 0x20
7655	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x884
7656	 AF	PUSH1	04	 	 
- stack 1: 0x884
- stack 0: 0x4
7657	 B1	ADD		 	 
- stack 0: 0x888
7658	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x888
- stack 0: 0x888
7659	 B3	MLOAD		 	 
- stack 1: 0x888
- stack 0: 0x419000002010FF0011400FF0133001902840038042E000002DD00000133001A
7660	 B4	PUSH1	F0	 	 
- stack 2: 0x888
- stack 1: 0x419000002010FF0011400FF0133001902840038042E000002DD00000133001A
- stack 0: 0xF0
7661	 B6	SHR		 	 
- stack 1: 0x888
- stack 0: 0x419
7662	 B7	JUMP		 	 
- stack 0: 0x888
7663	 419	JUMPDEST		 ;; __riscvimpl_XOR_2_1_0	  ;; # instr: xor sp,ra,zero(ignore imm)
- stack 0: 0x888
7664	 41A	PUSH1	00	 	 
- stack 1: 0x888
- stack 0: 0x0
7665	 41C	PUSH2	0020	 	 
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0x20
7666	 41F	MLOAD		 	  ;; # read from x1
- stack 2: 0x888
- stack 1: 0x0
- stack 0: 0xFF00FF
7667	 420	XOR		 	  ;; # XOR
- stack 1: 0x888
- stack 0: 0xFF00FF
7668	 421	PUSH2	0040	 	 
- stack 2: 0x888
- stack 1: 0xFF00FF
- stack 0: 0x40
7669	 424	MSTORE		 	  ;; # store to x2
- stack 0: 0x888
7670	 425	PUSH1	04	 	 
- stack 1: 0x888
- stack 0: 0x4
7671	 427	ADD		 	 
- stack 0: 0x88C
7672	 428	DUP1		 	  ;; # executing pc
- stack 1: 0x88C
- stack 0: 0x88C
7673	 429	MLOAD		 	 
- stack 1: 0x88C
- stack 0: 0x2010FF0011400FF0133001902840038042E000002DD00000133001A022B0028
7674	 42A	PUSH1	F0	 	 
- stack 2: 0x88C
- stack 1: 0x2010FF0011400FF0133001902840038042E000002DD00000133001A022B0028
- stack 0: 0xF0
7675	 42C	SHR		 	 
- stack 1: 0x88C
- stack 0: 0x201
7676	 42D	JUMP		 	 
- stack 0: 0x88C
7677	 201	JUMPDEST		 ;; __riscvimpl_LUI_ff0eb7	  ;; # instr: lui t4,0xff0(ignore imm)
- stack 0: 0x88C
7678	 202	PUSH4	00ff0000	 	 
- stack 1: 0x88C
- stack 0: 0xFF0000
7679	 207	PUSH2	03A0	 	 
- stack 2: 0x88C
- stack 1: 0xFF0000
- stack 0: 0x3A0
7680	 20A	MSTORE		 	  ;; # store to x29
- stack 0: 0x88C
7681	 20B	PUSH1	04	 	 
- stack 1: 0x88C
- stack 0: 0x4
7682	 20D	ADD		 	 
- stack 0: 0x890
7683	 20E	DUP1		 	  ;; # executing pc
- stack 1: 0x890
- stack 0: 0x890
7684	 20F	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x11400FF0133001902840038042E000002DD00000133001A022B002804411111
7685	 210	PUSH1	F0	 	 
- stack 2: 0x890
- stack 1: 0x11400FF0133001902840038042E000002DD00000133001A022B002804411111
- stack 0: 0xF0
7686	 212	SHR		 	 
- stack 1: 0x890
- stack 0: 0x114
7687	 213	JUMP		 	 
- stack 0: 0x890
7688	 114	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x890
7689	 115	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x890
- stack 0: 0x890
7690	 116	MLOAD		 	 
- stack 1: 0x890
- stack 0: 0x11400FF0133001902840038042E000002DD00000133001A022B002804411111
7691	 117	PUSH1	E0	 	 
- stack 2: 0x890
- stack 1: 0x11400FF0133001902840038042E000002DD00000133001A022B002804411111
- stack 0: 0xE0
7692	 119	SHR		 	 
- stack 1: 0x890
- stack 0: 0x11400FF
7693	 11A	PUSH2	FFFF	 	 
- stack 2: 0x890
- stack 1: 0x11400FF
- stack 0: 0xFFFF
7694	 11D	AND		 	 
- stack 1: 0x890
- stack 0: 0xFF
7695	 11E	PUSH1	01	 	 
- stack 2: 0x890
- stack 1: 0xFF
- stack 0: 0x1
7696	 120	SIGNEXTEND		 	 
- stack 1: 0x890
- stack 0: 0xFF
7697	 121	PUSH2	03A0	 	 
- stack 2: 0x890
- stack 1: 0xFF
- stack 0: 0x3A0
7698	 124	MLOAD		 	  ;; # read from x29
- stack 2: 0x890
- stack 1: 0xFF
- stack 0: 0xFF0000
7699	 125	ADD		 	  ;; # ADDI 29
- stack 1: 0x890
- stack 0: 0xFF00FF
7700	 126	PUSH2	03A0	 	 
- stack 2: 0x890
- stack 1: 0xFF00FF
- stack 0: 0x3A0
7701	 129	MSTORE		 	  ;; # store to x29
- stack 0: 0x890
7702	 12A	PUSH1	04	 	 
- stack 1: 0x890
- stack 0: 0x4
7703	 12C	ADD		 	 
- stack 0: 0x894
7704	 12D	DUP1		 	  ;; # executing pc
- stack 1: 0x894
- stack 0: 0x894
7705	 12E	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x133001902840038042E000002DD00000133001A022B00280441111100990111
7706	 12F	PUSH1	F0	 	 
- stack 2: 0x894
- stack 1: 0x133001902840038042E000002DD00000133001A022B00280441111100990111
- stack 0: 0xF0
7707	 131	SHR		 	 
- stack 1: 0x894
- stack 0: 0x133
7708	 132	JUMP		 	 
- stack 0: 0x894
7709	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x894
7710	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x894
- stack 0: 0x894
7711	 135	MLOAD		 	 
- stack 1: 0x894
- stack 0: 0x133001902840038042E000002DD00000133001A022B00280441111100990111
7712	 136	PUSH1	E0	 	 
- stack 2: 0x894
- stack 1: 0x133001902840038042E000002DD00000133001A022B00280441111100990111
- stack 0: 0xE0
7713	 138	SHR		 	 
- stack 1: 0x894
- stack 0: 0x1330019
7714	 139	PUSH2	FFFF	 	 
- stack 2: 0x894
- stack 1: 0x1330019
- stack 0: 0xFFFF
7715	 13C	AND		 	 
- stack 1: 0x894
- stack 0: 0x19
7716	 13D	PUSH1	01	 	 
- stack 2: 0x894
- stack 1: 0x19
- stack 0: 0x1
7717	 13F	SIGNEXTEND		 	 
- stack 1: 0x894
- stack 0: 0x19
7718	 140	PUSH2	0380	 	 
- stack 2: 0x894
- stack 1: 0x19
- stack 0: 0x380
7719	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x894
7720	 144	PUSH1	04	 	 
- stack 1: 0x894
- stack 0: 0x4
7721	 146	ADD		 	 
- stack 0: 0x898
7722	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x898
- stack 0: 0x898
7723	 148	MLOAD		 	 
- stack 1: 0x898
- stack 0: 0x2840038042E000002DD00000133001A022B0028044111110099011104542222
7724	 149	PUSH1	F0	 	 
- stack 2: 0x898
- stack 1: 0x2840038042E000002DD00000133001A022B0028044111110099011104542222
- stack 0: 0xF0
7725	 14B	SHR		 	 
- stack 1: 0x898
- stack 0: 0x284
7726	 14C	JUMP		 	 
- stack 0: 0x898
7727	 284	JUMPDEST		 ;; __riscvimpl_BNE_0_2_29	  ;; # instr: bne sp,t4,3ec(ignore imm)
- stack 0: 0x898
7728	 285	PUSH2	0040	 	 
- stack 1: 0x898
- stack 0: 0x40
7729	 288	MLOAD		 	  ;; # read from x2
- stack 1: 0x898
- stack 0: 0xFF00FF
7730	 289	PUSH4	FFFFFFFF	 	 
- stack 2: 0x898
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
7731	 28E	AND		 	  ;; # mask to 32 bits
- stack 1: 0x898
- stack 0: 0xFF00FF
7732	 28F	PUSH2	03A0	 	 
- stack 2: 0x898
- stack 1: 0xFF00FF
- stack 0: 0x3A0
7733	 292	MLOAD		 	  ;; # read from x29
- stack 2: 0x898
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
7734	 293	PUSH4	FFFFFFFF	 	 
- stack 3: 0x898
- stack 2: 0xFF00FF
- stack 1: 0xFF00FF
- stack 0: 0xFFFFFFFF
7735	 298	AND		 	  ;; # mask to 32 bits
- stack 2: 0x898
- stack 1: 0xFF00FF
- stack 0: 0xFF00FF
7736	 299	SUB		 	 
- stack 1: 0x898
- stack 0: 0x0
7737	 29A	PUSH2	02A2	 ;; _neq_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 2: 0x898
- stack 1: 0x0
- stack 0: 0x2A2
7738	 29D	JUMPI		 	 
- stack 0: 0x898
7739	 29E	PUSH2	02BC	 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 1: 0x898
- stack 0: 0x2BC
7740	 2A1	JUMP		 	 
- stack 0: 0x898
7741	 2BC	JUMPDEST		 ;; _neq_after_a03793336aa93e0e6c526b1d011bbc532727c5df8fe04abdeec7605a6b9db244	 
- stack 0: 0x898
7742	 2BD	PUSH1	04	 	 
- stack 1: 0x898
- stack 0: 0x4
7743	 2BF	ADD		 	 
- stack 0: 0x89C
7744	 2C0	DUP1		 	  ;; # executing pc
- stack 1: 0x89C
- stack 0: 0x89C
7745	 2C1	MLOAD		 	 
- stack 1: 0x89C
- stack 0: 0x42E000002DD00000133001A022B002804411111009901110454222200CB0222
7746	 2C2	PUSH1	F0	 	 
- stack 2: 0x89C
- stack 1: 0x42E000002DD00000133001A022B002804411111009901110454222200CB0222
- stack 0: 0xF0
7747	 2C4	SHR		 	 
- stack 1: 0x89C
- stack 0: 0x42E
7748	 2C5	JUMP		 	 
- stack 0: 0x89C
7749	 42E	JUMPDEST		 ;; __riscvimpl_XOR_1_0_0	  ;; # instr: xor ra,zero,zero(ignore imm)
- stack 0: 0x89C
7750	 42F	PUSH1	00	 	 
- stack 1: 0x89C
- stack 0: 0x0
7751	 431	PUSH1	00	 	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0x0
7752	 433	XOR		 	  ;; # XOR
- stack 1: 0x89C
- stack 0: 0x0
7753	 434	PUSH2	0020	 	 
- stack 2: 0x89C
- stack 1: 0x0
- stack 0: 0x20
7754	 437	MSTORE		 	  ;; # store to x1
- stack 0: 0x89C
7755	 438	PUSH1	04	 	 
- stack 1: 0x89C
- stack 0: 0x4
7756	 43A	ADD		 	 
- stack 0: 0x8A0
7757	 43B	DUP1		 	  ;; # executing pc
- stack 1: 0x8A0
- stack 0: 0x8A0
7758	 43C	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x2DD00000133001A022B002804411111009901110454222200CB022204670000
7759	 43D	PUSH1	F0	 	 
- stack 2: 0x8A0
- stack 1: 0x2DD00000133001A022B002804411111009901110454222200CB022204670000
- stack 0: 0xF0
7760	 43F	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x2DD
7761	 440	JUMP		 	 
- stack 0: 0x8A0
7762	 2DD	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8A0
7763	 2DE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A0
- stack 0: 0x8A0
7764	 2DF	MLOAD		 	 
- stack 1: 0x8A0
- stack 0: 0x2DD00000133001A022B002804411111009901110454222200CB022204670000
7765	 2E0	PUSH1	E0	 	 
- stack 2: 0x8A0
- stack 1: 0x2DD00000133001A022B002804411111009901110454222200CB022204670000
- stack 0: 0xE0
7766	 2E2	SHR		 	 
- stack 1: 0x8A0
- stack 0: 0x2DD0000
7767	 2E3	PUSH2	FFFF	 	 
- stack 2: 0x8A0
- stack 1: 0x2DD0000
- stack 0: 0xFFFF
7768	 2E6	AND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7769	 2E7	PUSH1	01	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x1
7770	 2E9	SIGNEXTEND		 	 
- stack 1: 0x8A0
- stack 0: 0x0
7771	 2EA	PUSH2	03A0	 	 
- stack 2: 0x8A0
- stack 1: 0x0
- stack 0: 0x3A0
7772	 2ED	MSTORE		 	  ;; # store to x29
- stack 0: 0x8A0
7773	 2EE	PUSH1	04	 	 
- stack 1: 0x8A0
- stack 0: 0x4
7774	 2F0	ADD		 	 
- stack 0: 0x8A4
7775	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x8A4
- stack 0: 0x8A4
7776	 2F2	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x133001A022B002804411111009901110454222200CB02220467000002DD0000
7777	 2F3	PUSH1	F0	 	 
- stack 2: 0x8A4
- stack 1: 0x133001A022B002804411111009901110454222200CB02220467000002DD0000
- stack 0: 0xF0
7778	 2F5	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x133
7779	 2F6	JUMP		 	 
- stack 0: 0x8A4
7780	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8A4
7781	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8A4
- stack 0: 0x8A4
7782	 135	MLOAD		 	 
- stack 1: 0x8A4
- stack 0: 0x133001A022B002804411111009901110454222200CB02220467000002DD0000
7783	 136	PUSH1	E0	 	 
- stack 2: 0x8A4
- stack 1: 0x133001A022B002804411111009901110454222200CB02220467000002DD0000
- stack 0: 0xE0
7784	 138	SHR		 	 
- stack 1: 0x8A4
- stack 0: 0x133001A
7785	 139	PUSH2	FFFF	 	 
- stack 2: 0x8A4
- stack 1: 0x133001A
- stack 0: 0xFFFF
7786	 13C	AND		 	 
- stack 1: 0x8A4
- stack 0: 0x1A
7787	 13D	PUSH1	01	 	 
- stack 2: 0x8A4
- stack 1: 0x1A
- stack 0: 0x1
7788	 13F	SIGNEXTEND		 	 
- stack 1: 0x8A4
- stack 0: 0x1A
7789	 140	PUSH2	0380	 	 
- stack 2: 0x8A4
- stack 1: 0x1A
- stack 0: 0x380
7790	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x8A4
7791	 144	PUSH1	04	 	 
- stack 1: 0x8A4
- stack 0: 0x4
7792	 146	ADD		 	 
- stack 0: 0x8A8
7793	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8A8
- stack 0: 0x8A8
7794	 148	MLOAD		 	 
- stack 1: 0x8A8
- stack 0: 0x22B002804411111009901110454222200CB02220467000002DD00000133001B
7795	 149	PUSH1	F0	 	 
- stack 2: 0x8A8
- stack 1: 0x22B002804411111009901110454222200CB02220467000002DD00000133001B
- stack 0: 0xF0
7796	 14B	SHR		 	 
- stack 1: 0x8A8
- stack 0: 0x22B
7797	 14C	JUMP		 	 
- stack 0: 0x8A8
7798	 22B	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,410(ignore imm)
- stack 0: 0x8A8
7799	 22C	PUSH2	0020	 	 
- stack 1: 0x8A8
- stack 0: 0x20
7800	 22F	MLOAD		 	  ;; # read from x1
- stack 1: 0x8A8
- stack 0: 0x0
7801	 230	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7802	 235	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8A8
- stack 0: 0x0
7803	 236	PUSH2	03A0	 	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x3A0
7804	 239	MLOAD		 	  ;; # read from x29
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x0
7805	 23A	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8A8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7806	 23F	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x0
7807	 240	SUB		 	 
- stack 1: 0x8A8
- stack 0: 0x0
7808	 241	PUSH2	0249	 ;; _neq_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 2: 0x8A8
- stack 1: 0x0
- stack 0: 0x249
7809	 244	JUMPI		 	 
- stack 0: 0x8A8
7810	 245	PUSH2	0263	 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 1: 0x8A8
- stack 0: 0x263
7811	 248	JUMP		 	 
- stack 0: 0x8A8
7812	 263	JUMPDEST		 ;; _neq_after_b278b1731c2441637227fc395e119bbd3c133f001bb5324ad394cea5608cb7f5	 
- stack 0: 0x8A8
7813	 264	PUSH1	04	 	 
- stack 1: 0x8A8
- stack 0: 0x4
7814	 266	ADD		 	 
- stack 0: 0x8AC
7815	 267	DUP1		 	  ;; # executing pc
- stack 1: 0x8AC
- stack 0: 0x8AC
7816	 268	MLOAD		 	 
- stack 1: 0x8AC
- stack 0: 0x4411111009901110454222200CB02220467000002DD00000133001B047B0008
7817	 269	PUSH1	F0	 	 
- stack 2: 0x8AC
- stack 1: 0x4411111009901110454222200CB02220467000002DD00000133001B047B0008
- stack 0: 0xF0
7818	 26B	SHR		 	 
- stack 1: 0x8AC
- stack 0: 0x441
7819	 26C	JUMP		 	 
- stack 0: 0x8AC
7820	 441	JUMPDEST		 ;; __riscvimpl_LUI_111110b7	  ;; # instr: lui ra,0x11111(ignore imm)
- stack 0: 0x8AC
7821	 442	PUSH4	11111000	 	 
- stack 1: 0x8AC
- stack 0: 0x11111000
7822	 447	PUSH2	0020	 	 
- stack 2: 0x8AC
- stack 1: 0x11111000
- stack 0: 0x20
7823	 44A	MSTORE		 	  ;; # store to x1
- stack 0: 0x8AC
7824	 44B	PUSH1	04	 	 
- stack 1: 0x8AC
- stack 0: 0x4
7825	 44D	ADD		 	 
- stack 0: 0x8B0
7826	 44E	DUP1		 	  ;; # executing pc
- stack 1: 0x8B0
- stack 0: 0x8B0
7827	 44F	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x9901110454222200CB02220467000002DD00000133001B047B000804BB0018
7828	 450	PUSH1	F0	 	 
- stack 2: 0x8B0
- stack 1: 0x9901110454222200CB02220467000002DD00000133001B047B000804BB0018
- stack 0: 0xF0
7829	 452	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x99
7830	 453	JUMP		 	 
- stack 0: 0x8B0
7831	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x8B0
7832	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B0
- stack 0: 0x8B0
7833	 9B	MLOAD		 	 
- stack 1: 0x8B0
- stack 0: 0x9901110454222200CB02220467000002DD00000133001B047B000804BB0018
7834	 9C	PUSH1	E0	 	 
- stack 2: 0x8B0
- stack 1: 0x9901110454222200CB02220467000002DD00000133001B047B000804BB0018
- stack 0: 0xE0
7835	 9E	SHR		 	 
- stack 1: 0x8B0
- stack 0: 0x990111
7836	 9F	PUSH2	FFFF	 	 
- stack 2: 0x8B0
- stack 1: 0x990111
- stack 0: 0xFFFF
7837	 A2	AND		 	 
- stack 1: 0x8B0
- stack 0: 0x111
7838	 A3	PUSH1	01	 	 
- stack 2: 0x8B0
- stack 1: 0x111
- stack 0: 0x1
7839	 A5	SIGNEXTEND		 	 
- stack 1: 0x8B0
- stack 0: 0x111
7840	 A6	PUSH2	0020	 	 
- stack 2: 0x8B0
- stack 1: 0x111
- stack 0: 0x20
7841	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x8B0
- stack 1: 0x111
- stack 0: 0x11111000
7842	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x8B0
- stack 0: 0x11111111
7843	 AB	PUSH2	0020	 	 
- stack 2: 0x8B0
- stack 1: 0x11111111
- stack 0: 0x20
7844	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x8B0
7845	 AF	PUSH1	04	 	 
- stack 1: 0x8B0
- stack 0: 0x4
7846	 B1	ADD		 	 
- stack 0: 0x8B4
7847	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x8B4
- stack 0: 0x8B4
7848	 B3	MLOAD		 	 
- stack 1: 0x8B4
- stack 0: 0x454222200CB02220467000002DD00000133001B047B000804BB001800210001
7849	 B4	PUSH1	F0	 	 
- stack 2: 0x8B4
- stack 1: 0x454222200CB02220467000002DD00000133001B047B000804BB001800210001
- stack 0: 0xF0
7850	 B6	SHR		 	 
- stack 1: 0x8B4
- stack 0: 0x454
7851	 B7	JUMP		 	 
- stack 0: 0x8B4
7852	 454	JUMPDEST		 ;; __riscvimpl_LUI_22222137	  ;; # instr: lui sp,0x22222(ignore imm)
- stack 0: 0x8B4
7853	 455	PUSH4	22222000	 	 
- stack 1: 0x8B4
- stack 0: 0x22222000
7854	 45A	PUSH2	0040	 	 
- stack 2: 0x8B4
- stack 1: 0x22222000
- stack 0: 0x40
7855	 45D	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B4
7856	 45E	PUSH1	04	 	 
- stack 1: 0x8B4
- stack 0: 0x4
7857	 460	ADD		 	 
- stack 0: 0x8B8
7858	 461	DUP1		 	  ;; # executing pc
- stack 1: 0x8B8
- stack 0: 0x8B8
7859	 462	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xCB02220467000002DD00000133001B047B000804BB0018002100010034F908
7860	 463	PUSH1	F0	 	 
- stack 2: 0x8B8
- stack 1: 0xCB02220467000002DD00000133001B047B000804BB0018002100010034F908
- stack 0: 0xF0
7861	 465	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xCB
7862	 466	JUMP		 	 
- stack 0: 0x8B8
7863	 CB	JUMPDEST		 ;; __riscvimpl_ADDI_2_2_0	  ;; # instr: addi sp,sp,-241(ignore imm)
- stack 0: 0x8B8
7864	 CC	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8B8
- stack 0: 0x8B8
7865	 CD	MLOAD		 	 
- stack 1: 0x8B8
- stack 0: 0xCB02220467000002DD00000133001B047B000804BB0018002100010034F908
7866	 CE	PUSH1	E0	 	 
- stack 2: 0x8B8
- stack 1: 0xCB02220467000002DD00000133001B047B000804BB0018002100010034F908
- stack 0: 0xE0
7867	 D0	SHR		 	 
- stack 1: 0x8B8
- stack 0: 0xCB0222
7868	 D1	PUSH2	FFFF	 	 
- stack 2: 0x8B8
- stack 1: 0xCB0222
- stack 0: 0xFFFF
7869	 D4	AND		 	 
- stack 1: 0x8B8
- stack 0: 0x222
7870	 D5	PUSH1	01	 	 
- stack 2: 0x8B8
- stack 1: 0x222
- stack 0: 0x1
7871	 D7	SIGNEXTEND		 	 
- stack 1: 0x8B8
- stack 0: 0x222
7872	 D8	PUSH2	0040	 	 
- stack 2: 0x8B8
- stack 1: 0x222
- stack 0: 0x40
7873	 DB	MLOAD		 	  ;; # read from x2
- stack 2: 0x8B8
- stack 1: 0x222
- stack 0: 0x22222000
7874	 DC	ADD		 	  ;; # ADDI 2
- stack 1: 0x8B8
- stack 0: 0x22222222
7875	 DD	PUSH2	0040	 	 
- stack 2: 0x8B8
- stack 1: 0x22222222
- stack 0: 0x40
7876	 E0	MSTORE		 	  ;; # store to x2
- stack 0: 0x8B8
7877	 E1	PUSH1	04	 	 
- stack 1: 0x8B8
- stack 0: 0x4
7878	 E3	ADD		 	 
- stack 0: 0x8BC
7879	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x8BC
- stack 0: 0x8BC
7880	 E5	MLOAD		 	 
- stack 1: 0x8BC
- stack 0: 0x467000002DD00000133001B047B000804BB0018002100010034F90800530042
7881	 E6	PUSH1	F0	 	 
- stack 2: 0x8BC
- stack 1: 0x467000002DD00000133001B047B000804BB0018002100010034F90800530042
- stack 0: 0xF0
7882	 E8	SHR		 	 
- stack 1: 0x8BC
- stack 0: 0x467
7883	 E9	JUMP		 	 
- stack 0: 0x8BC
7884	 467	JUMPDEST		 ;; __riscvimpl_XOR_0_1_2	  ;; # instr: xor zero,ra,sp(ignore imm)
- stack 0: 0x8BC
7885	 468	PUSH2	0040	 	 
- stack 1: 0x8BC
- stack 0: 0x40
7886	 46B	MLOAD		 	  ;; # read from x2
- stack 1: 0x8BC
- stack 0: 0x22222222
7887	 46C	PUSH2	0020	 	 
- stack 2: 0x8BC
- stack 1: 0x22222222
- stack 0: 0x20
7888	 46F	MLOAD		 	  ;; # read from x1
- stack 2: 0x8BC
- stack 1: 0x22222222
- stack 0: 0x11111111
7889	 470	XOR		 	  ;; # XOR
- stack 1: 0x8BC
- stack 0: 0x33333333
7890	 471	POP		 	 
- stack 0: 0x8BC
7891	 472	PUSH1	04	 	 
- stack 1: 0x8BC
- stack 0: 0x4
7892	 474	ADD		 	 
- stack 0: 0x8C0
7893	 475	DUP1		 	  ;; # executing pc
- stack 1: 0x8C0
- stack 0: 0x8C0
7894	 476	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x2DD00000133001B047B000804BB0018002100010034F9080053004200660000
7895	 477	PUSH1	F0	 	 
- stack 2: 0x8C0
- stack 1: 0x2DD00000133001B047B000804BB0018002100010034F9080053004200660000
- stack 0: 0xF0
7896	 479	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x2DD
7897	 47A	JUMP		 	 
- stack 0: 0x8C0
7898	 2DD	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,0(ignore imm)
- stack 0: 0x8C0
7899	 2DE	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C0
- stack 0: 0x8C0
7900	 2DF	MLOAD		 	 
- stack 1: 0x8C0
- stack 0: 0x2DD00000133001B047B000804BB0018002100010034F9080053004200660000
7901	 2E0	PUSH1	E0	 	 
- stack 2: 0x8C0
- stack 1: 0x2DD00000133001B047B000804BB0018002100010034F9080053004200660000
- stack 0: 0xE0
7902	 2E2	SHR		 	 
- stack 1: 0x8C0
- stack 0: 0x2DD0000
7903	 2E3	PUSH2	FFFF	 	 
- stack 2: 0x8C0
- stack 1: 0x2DD0000
- stack 0: 0xFFFF
7904	 2E6	AND		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7905	 2E7	PUSH1	01	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x1
7906	 2E9	SIGNEXTEND		 	 
- stack 1: 0x8C0
- stack 0: 0x0
7907	 2EA	PUSH2	03A0	 	 
- stack 2: 0x8C0
- stack 1: 0x0
- stack 0: 0x3A0
7908	 2ED	MSTORE		 	  ;; # store to x29
- stack 0: 0x8C0
7909	 2EE	PUSH1	04	 	 
- stack 1: 0x8C0
- stack 0: 0x4
7910	 2F0	ADD		 	 
- stack 0: 0x8C4
7911	 2F1	DUP1		 	  ;; # executing pc
- stack 1: 0x8C4
- stack 0: 0x8C4
7912	 2F2	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x133001B047B000804BB0018002100010034F908005300420066000004FB0001
7913	 2F3	PUSH1	F0	 	 
- stack 2: 0x8C4
- stack 1: 0x133001B047B000804BB0018002100010034F908005300420066000004FB0001
- stack 0: 0xF0
7914	 2F5	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x133
7915	 2F6	JUMP		 	 
- stack 0: 0x8C4
7916	 133	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x8C4
7917	 134	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8C4
- stack 0: 0x8C4
7918	 135	MLOAD		 	 
- stack 1: 0x8C4
- stack 0: 0x133001B047B000804BB0018002100010034F908005300420066000004FB0001
7919	 136	PUSH1	E0	 	 
- stack 2: 0x8C4
- stack 1: 0x133001B047B000804BB0018002100010034F908005300420066000004FB0001
- stack 0: 0xE0
7920	 138	SHR		 	 
- stack 1: 0x8C4
- stack 0: 0x133001B
7921	 139	PUSH2	FFFF	 	 
- stack 2: 0x8C4
- stack 1: 0x133001B
- stack 0: 0xFFFF
7922	 13C	AND		 	 
- stack 1: 0x8C4
- stack 0: 0x1B
7923	 13D	PUSH1	01	 	 
- stack 2: 0x8C4
- stack 1: 0x1B
- stack 0: 0x1
7924	 13F	SIGNEXTEND		 	 
- stack 1: 0x8C4
- stack 0: 0x1B
7925	 140	PUSH2	0380	 	 
- stack 2: 0x8C4
- stack 1: 0x1B
- stack 0: 0x380
7926	 143	MSTORE		 	  ;; # store to x28
- stack 0: 0x8C4
7927	 144	PUSH1	04	 	 
- stack 1: 0x8C4
- stack 0: 0x4
7928	 146	ADD		 	 
- stack 0: 0x8C8
7929	 147	DUP1		 	  ;; # executing pc
- stack 1: 0x8C8
- stack 0: 0x8C8
7930	 148	MLOAD		 	 
- stack 1: 0x8C8
- stack 0: 0x47B000804BB0018002100010034F908005300420066000004FB000100210001
7931	 149	PUSH1	F0	 	 
- stack 2: 0x8C8
- stack 1: 0x47B000804BB0018002100010034F908005300420066000004FB000100210001
- stack 0: 0xF0
7932	 14B	SHR		 	 
- stack 1: 0x8C8
- stack 0: 0x47B
7933	 14C	JUMP		 	 
- stack 0: 0x8C8
7934	 47B	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x8C8
7935	 47C	PUSH1	00	 	 
- stack 1: 0x8C8
- stack 0: 0x0
7936	 47E	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7937	 483	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8C8
- stack 0: 0x0
7938	 484	PUSH2	03A0	 	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x3A0
7939	 487	MLOAD		 	  ;; # read from x29
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x0
7940	 488	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8C8
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7941	 48D	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x0
7942	 48E	SUB		 	 
- stack 1: 0x8C8
- stack 0: 0x0
7943	 48F	PUSH2	0497	 ;; _neq_9db419cf105916f0452f23962d849b1dfd968260d44aaa39c6d172125cdda135	 
- stack 2: 0x8C8
- stack 1: 0x0
- stack 0: 0x497
7944	 492	JUMPI		 	 
- stack 0: 0x8C8
7945	 493	PUSH2	04B1	 ;; _neq_after_9db419cf105916f0452f23962d849b1dfd968260d44aaa39c6d172125cdda135	 
- stack 1: 0x8C8
- stack 0: 0x4B1
7946	 496	JUMP		 	 
- stack 0: 0x8C8
7947	 4B1	JUMPDEST		 ;; _neq_after_9db419cf105916f0452f23962d849b1dfd968260d44aaa39c6d172125cdda135	 
- stack 0: 0x8C8
7948	 4B2	PUSH1	04	 	 
- stack 1: 0x8C8
- stack 0: 0x4
7949	 4B4	ADD		 	 
- stack 0: 0x8CC
7950	 4B5	DUP1		 	  ;; # executing pc
- stack 1: 0x8CC
- stack 0: 0x8CC
7951	 4B6	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4BB0018002100010034F908005300420066000004FB0001002100010034F90C
7952	 4B7	PUSH1	F0	 	 
- stack 2: 0x8CC
- stack 1: 0x4BB0018002100010034F908005300420066000004FB0001002100010034F90C
- stack 0: 0xF0
7953	 4B9	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4BB
7954	 4BA	JUMP		 	 
- stack 0: 0x8CC
7955	 4BB	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x8CC
7956	 4BC	PUSH1	00	 	 
- stack 1: 0x8CC
- stack 0: 0x0
7957	 4BE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
7958	 4C3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x8CC
- stack 0: 0x0
7959	 4C4	PUSH2	0380	 	 
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x380
7960	 4C7	MLOAD		 	  ;; # read from x28
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x1B
7961	 4C8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x8CC
- stack 2: 0x0
- stack 1: 0x1B
- stack 0: 0xFFFFFFFF
7962	 4CD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x8CC
- stack 1: 0x0
- stack 0: 0x1B
7963	 4CE	SUB		 	 
- stack 1: 0x8CC
- stack 0: 0x1B
7964	 4CF	PUSH2	04D7	 ;; _neq_4eb7e41c9fa4bde52119e8c49dfc426b88aa303b436a3c443a9d1426e58ac102	 
- stack 2: 0x8CC
- stack 1: 0x1B
- stack 0: 0x4D7
7965	 4D2	JUMPI		 	 
- stack 0: 0x8CC
7966	 4D7	JUMPDEST		 ;; _neq_4eb7e41c9fa4bde52119e8c49dfc426b88aa303b436a3c443a9d1426e58ac102	 
- stack 0: 0x8CC
7967	 4D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8CC
- stack 0: 0x8CC
7968	 4D9	MLOAD		 	 
- stack 1: 0x8CC
- stack 0: 0x4BB0018002100010034F908005300420066000004FB0001002100010034F90C
7969	 4DA	PUSH1	E0	 	 
- stack 2: 0x8CC
- stack 1: 0x4BB0018002100010034F908005300420066000004FB0001002100010034F90C
- stack 0: 0xE0
7970	 4DC	SHR		 	 
- stack 1: 0x8CC
- stack 0: 0x4BB0018
7971	 4DD	PUSH2	FFFF	 	 
- stack 2: 0x8CC
- stack 1: 0x4BB0018
- stack 0: 0xFFFF
7972	 4E0	AND		 	 
- stack 1: 0x8CC
- stack 0: 0x18
7973	 4E1	PUSH1	01	 	 
- stack 2: 0x8CC
- stack 1: 0x18
- stack 0: 0x1
7974	 4E3	SIGNEXTEND		 	 
- stack 1: 0x8CC
- stack 0: 0x18
7975	 4E4	ADD		 	 
- stack 0: 0x8E4
7976	 4E5	PUSH4	FFFFFFFF	 	 
- stack 1: 0x8E4
- stack 0: 0xFFFFFFFF
7977	 4EA	AND		 	  ;; # mask to 32 bits
- stack 0: 0x8E4
7978	 4EB	DUP1		 	  ;; # executing pc
- stack 1: 0x8E4
- stack 0: 0x8E4
7979	 4EC	MLOAD		 	 
- stack 1: 0x8E4
- stack 0: 0x2100010034F90C00530042006600000506000000660000000000006574796D
7980	 4ED	PUSH1	F0	 	 
- stack 2: 0x8E4
- stack 1: 0x2100010034F90C00530042006600000506000000660000000000006574796D
- stack 0: 0xF0
7981	 4EF	SHR		 	 
- stack 1: 0x8E4
- stack 0: 0x21
7982	 4F0	JUMP		 	 
- stack 0: 0x8E4
7983	 21	JUMPDEST		 ;; __riscvimpl_LUI_15b7	  ;; # instr: lui a1,0x1(ignore imm)
- stack 0: 0x8E4
7984	 22	PUSH4	00001000	 	 
- stack 1: 0x8E4
- stack 0: 0x1000
7985	 27	PUSH2	0160	 	 
- stack 2: 0x8E4
- stack 1: 0x1000
- stack 0: 0x160
7986	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E4
7987	 2B	PUSH1	04	 	 
- stack 1: 0x8E4
- stack 0: 0x4
7988	 2D	ADD		 	 
- stack 0: 0x8E8
7989	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x8E8
- stack 0: 0x8E8
7990	 2F	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C00530042006600000506000000660000000000006574796D00007473
7991	 30	PUSH1	F0	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C00530042006600000506000000660000000000006574796D00007473
- stack 0: 0xF0
7992	 32	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x34
7993	 33	JUMP		 	 
- stack 0: 0x8E8
7994	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,-1792(ignore imm)
- stack 0: 0x8E8
7995	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x8E8
- stack 0: 0x8E8
7996	 36	MLOAD		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C00530042006600000506000000660000000000006574796D00007473
7997	 37	PUSH1	E0	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C00530042006600000506000000660000000000006574796D00007473
- stack 0: 0xE0
7998	 39	SHR		 	 
- stack 1: 0x8E8
- stack 0: 0x34F90C
7999	 3A	PUSH2	FFFF	 	 
- stack 2: 0x8E8
- stack 1: 0x34F90C
- stack 0: 0xFFFF
8000	 3D	AND		 	 
- stack 1: 0x8E8
- stack 0: 0xF90C
8001	 3E	PUSH1	01	 	 
- stack 2: 0x8E8
- stack 1: 0xF90C
- stack 0: 0x1
8002	 40	SIGNEXTEND		 	 
- stack 1: 0x8E8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
8003	 41	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x160
8004	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x8E8
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF90C
- stack 0: 0x1000
8005	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x8E8
- stack 0: 0x90C
8006	 46	PUSH2	0160	 	 
- stack 2: 0x8E8
- stack 1: 0x90C
- stack 0: 0x160
8007	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x8E8
8008	 4A	PUSH1	04	 	 
- stack 1: 0x8E8
- stack 0: 0x4
8009	 4C	ADD		 	 
- stack 0: 0x8EC
8010	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x8EC
- stack 0: 0x8EC
8011	 4E	MLOAD		 	 
- stack 1: 0x8EC
- stack 0: 0x530042006600000506000000660000000000006574796D0000747300525245
8012	 4F	PUSH1	F0	 	 
- stack 2: 0x8EC
- stack 1: 0x530042006600000506000000660000000000006574796D0000747300525245
- stack 0: 0xF0
8013	 51	SHR		 	 
- stack 1: 0x8EC
- stack 0: 0x53
8014	 52	JUMP		 	 
- stack 0: 0x8EC
8015	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x8EC
8016	 54	PUSH4	00042000	 	 
- stack 1: 0x8EC
- stack 0: 0x42000
8017	 59	PUSH2	0140	 	 
- stack 2: 0x8EC
- stack 1: 0x42000
- stack 0: 0x140
8018	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x8EC
8019	 5D	PUSH1	04	 	 
- stack 1: 0x8EC
- stack 0: 0x4
8020	 5F	ADD		 	 
- stack 0: 0x8F0
8021	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x8F0
- stack 0: 0x8F0
8022	 61	MLOAD		 	 
- stack 1: 0x8F0
- stack 0: 0x6600000506000000660000000000006574796D000074730052524500004B4F
8023	 62	PUSH1	F0	 	 
- stack 2: 0x8F0
- stack 1: 0x6600000506000000660000000000006574796D000074730052524500004B4F
- stack 0: 0xF0
8024	 64	SHR		 	 
- stack 1: 0x8F0
- stack 0: 0x66
8025	 65	JUMP		 	 
- stack 0: 0x8F0
8026	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F0
8027	 67	PUSH2	0140	 	 
- stack 1: 0x8F0
- stack 0: 0x140
8028	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F0
- stack 0: 0x42000
8029	 6B	PUSH2	0075	 ;; _ecall_96aa091709b9021147a1d574ecf175c50443185848c13c4989d3bd93cb78a665	 
- stack 2: 0x8F0
- stack 1: 0x42000
- stack 0: 0x75
8030	 6E	JUMPI		 	 
- stack 0: 0x8F0
8031	 75	JUMPDEST		 ;; _ecall_96aa091709b9021147a1d574ecf175c50443185848c13c4989d3bd93cb78a665	 
- stack 0: 0x8F0
8032	 76	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
8033	 78	PUSH2	0160	 	 
- stack 2: 0x8F0
- stack 1: 0x4
- stack 0: 0x160
8034	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x8F0
- stack 1: 0x4
- stack 0: 0x90C
8035	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x8F0
8036	 7D	PUSH1	04	 	 
- stack 1: 0x8F0
- stack 0: 0x4
8037	 7F	ADD		 	 
- stack 0: 0x8F4
8038	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x8F4
- stack 0: 0x8F4
8039	 81	MLOAD		 	 
- stack 1: 0x8F4
- stack 0: 0x506000000660000000000006574796D000074730052524500004B4F00000000
8040	 82	PUSH1	F0	 	 
- stack 2: 0x8F4
- stack 1: 0x506000000660000000000006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
8041	 84	SHR		 	 
- stack 1: 0x8F4
- stack 0: 0x506
8042	 85	JUMP		 	 
- stack 0: 0x8F4
8043	 506	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x8F4
8044	 507	PUSH4	00000000	 	 
- stack 1: 0x8F4
- stack 0: 0x0
8045	 50C	PUSH2	0140	 	 
- stack 2: 0x8F4
- stack 1: 0x0
- stack 0: 0x140
8046	 50F	MSTORE		 	  ;; # store to x10
- stack 0: 0x8F4
8047	 510	PUSH1	04	 	 
- stack 1: 0x8F4
- stack 0: 0x4
8048	 512	ADD		 	 
- stack 0: 0x8F8
8049	 513	DUP1		 	  ;; # executing pc
- stack 1: 0x8F8
- stack 0: 0x8F8
8050	 514	MLOAD		 	 
- stack 1: 0x8F8
- stack 0: 0x660000000000006574796D000074730052524500004B4F0000000000000000
8051	 515	PUSH1	F0	 	 
- stack 2: 0x8F8
- stack 1: 0x660000000000006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
8052	 517	SHR		 	 
- stack 1: 0x8F8
- stack 0: 0x66
8053	 518	JUMP		 	 
- stack 0: 0x8F8
8054	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x8F8
8055	 67	PUSH2	0140	 	 
- stack 1: 0x8F8
- stack 0: 0x140
8056	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x8F8
- stack 0: 0x0
8057	 6B	PUSH2	0075	 ;; _ecall_96aa091709b9021147a1d574ecf175c50443185848c13c4989d3bd93cb78a665	 
- stack 2: 0x8F8
- stack 1: 0x0
- stack 0: 0x75
8058	 6E	JUMPI		 	 
- stack 0: 0x8F8
8059	 6F	PUSH1	20	 	 
- stack 1: 0x8F8
- stack 0: 0x20
8060	 71	PUSH2	0160	 	 
- stack 2: 0x8F8
- stack 1: 0x20
- stack 0: 0x160
8061	 74	RETURN		 	 
Final bytecode length; 2602
Returned: 000000000000000000000000000000000000000000000000000000000000090c
gasUsed : 27714
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428,42c,430
** HOT: 434 - range: 434,438,43c,440,444,448,44c,450,454
** HOT: 458 - range: 458,45c,460,464,468,46c,470,474,478
** HOT: 47c - range: 47c,480,484,488,48c,490,494,498,49c
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8,4bc,4c0
** HOT: 4c4 - range: 4c4,4c8,4cc,4d0,4d4,4d8,4dc,4e0,4e4
** HOT: 4e8 - range: 4e8,4ec,4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c,520,524
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530,534
** HOT: 538 - range: 538,53c,540,544,548,54c,550,554,558,55c,560
** HOT: 53c - range: 53c,540,544,548,54c,550,554,558,55c,560
** HOT: 564 - range: 564,568,56c,570
** HOT: 574 - range: 574,578,57c,580,584,588,58c,590,594,598,59c,5a0
** HOT: 578 - range: 578,57c,580,584,588,58c,590,594,598,59c,5a0
** HOT: 5a4 - range: 5a4,5a8,5ac,5b0
** HOT: 5b4 - range: 5b4,5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4,5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4
** HOT: 5e8 - range: 5e8,5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 5ec - range: 5ec,5f0,5f4,5f8,5fc,600,604,608,60c
** HOT: 610 - range: 610,614,618,61c
** HOT: 620 - range: 620,624,628,62c,630,634,638,63c,640,644,648
** HOT: 624 - range: 624,628,62c,630,634,638,63c,640,644,648
** HOT: 64c - range: 64c,650,654,658
** HOT: 65c - range: 65c,660,664,668,66c,670,674,678,67c,680
** HOT: 660 - range: 660,664,668,66c,670,674,678,67c,680
** HOT: 684 - range: 684,688,68c,690
** HOT: 694 - range: 694,698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc
** HOT: 698 - range: 698,69c,6a0,6a4,6a8,6ac,6b0,6b4,6b8,6bc
** HOT: 6c0 - range: 6c0,6c4,6c8,6cc
** HOT: 6d0 - range: 6d0,6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6d4 - range: 6d4,6d8,6dc,6e0,6e4,6e8,6ec,6f0,6f4,6f8
** HOT: 6fc - range: 6fc,700,704,708
** HOT: 70c - range: 70c,710,714,718,71c,720,724,728,72c
** HOT: 710 - range: 710,714,718,71c,720,724,728,72c
** HOT: 730 - range: 730,734,738,73c
** HOT: 740 - range: 740,744,748,74c,750,754,758,75c,760,764
** HOT: 744 - range: 744,748,74c,750,754,758,75c,760,764
** HOT: 768 - range: 768,76c,770,774
** HOT: 778 - range: 778,77c,780,784,788,78c,790,794,798,79c,7a0
** HOT: 77c - range: 77c,780,784,788,78c,790,794,798,79c,7a0
** HOT: 7a4 - range: 7a4,7a8,7ac,7b0
** HOT: 7b4 - range: 7b4,7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8
** HOT: 7b8 - range: 7b8,7bc,7c0,7c4,7c8,7cc,7d0,7d4,7d8
** HOT: 7dc - range: 7dc,7e0,7e4,7e8
** HOT: 7ec - range: 7ec,7f0,7f4,7f8,7fc,800,804,808,80c,810,814
** HOT: 7f0 - range: 7f0,7f4,7f8,7fc,800,804,808,80c,810,814
** HOT: 818 - range: 818,81c,820,824
** HOT: 828 - range: 828,82c,830,834,838,83c,840,844,848,84c,850
** HOT: 82c - range: 82c,830,834,838,83c,840,844,848,84c,850
** HOT: 854 - range: 854,858,85c,860
** HOT: 864 - range: 864,868,86c,870,874,878,87c
** HOT: 880 - range: 880,884,888,88c,890,894,898
** HOT: 89c - range: 89c,8a0,8a4,8a8
** HOT: 8ac - range: 8ac,8b0,8b4,8b8,8bc,8c0,8c4,8c8
