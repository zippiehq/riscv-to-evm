Running in EVM:
0	 0	PUSH4	0230	 	 
- stack 0: 0x230
1	 5	PUSH2	0449	 ;; _rambegin	 
- stack 1: 0x230
- stack 0: 0x449
2	 8	PUSH1	01	 	 
- stack 2: 0x230
- stack 1: 0x449
- stack 0: 0x1
3	 A	ADD		 	 
- stack 1: 0x230
- stack 0: 0x44A
4	 B	PUSH2	0400	 	 
- stack 2: 0x230
- stack 1: 0x44A
- stack 0: 0x400
5	 E	CODECOPY		 	 
6	 F	PUSH2	0400	 	 
- stack 0: 0x400
7	 12	PUSH2	001A	 ;; _execute	 
- stack 1: 0x400
- stack 0: 0x1A
8	 15	JUMP		 	 
- stack 0: 0x400
9	 1A	JUMPDEST		 ;; _execute	 
- stack 0: 0x400
10	 1B	DUP1		 	  ;; # executing pc
- stack 1: 0x400
- stack 0: 0x400
11	 1C	MLOAD		 	 
- stack 1: 0x400
- stack 0: 0x21000000340620005300420066000000860FF10099FF0000B8FF0F00D7F00F
12	 1D	PUSH1	F0	 	 
- stack 2: 0x400
- stack 1: 0x21000000340620005300420066000000860FF10099FF0000B8FF0F00D7F00F
- stack 0: 0xF0
13	 1F	SHR		 	 
- stack 1: 0x400
- stack 0: 0x21
14	 20	JUMP		 	 
- stack 0: 0x400
15	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x400
16	 22	PUSH4	00000000	 	 
- stack 1: 0x400
- stack 0: 0x0
17	 27	PUSH2	0160	 	 
- stack 2: 0x400
- stack 1: 0x0
- stack 0: 0x160
18	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x400
19	 2B	PUSH1	04	 	 
- stack 1: 0x400
- stack 0: 0x4
20	 2D	ADD		 	 
- stack 0: 0x404
21	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x404
- stack 0: 0x404
22	 2F	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x340620005300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F
23	 30	PUSH1	F0	 	 
- stack 2: 0x404
- stack 1: 0x340620005300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F
- stack 0: 0xF0
24	 32	SHR		 	 
- stack 1: 0x404
- stack 0: 0x34
25	 33	JUMP		 	 
- stack 0: 0x404
26	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1568(ignore imm)
- stack 0: 0x404
27	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x404
- stack 0: 0x404
28	 36	MLOAD		 	 
- stack 1: 0x404
- stack 0: 0x340620005300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F
29	 37	PUSH1	E0	 	 
- stack 2: 0x404
- stack 1: 0x340620005300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F
- stack 0: 0xE0
30	 39	SHR		 	 
- stack 1: 0x404
- stack 0: 0x340620
31	 3A	PUSH2	FFFF	 	 
- stack 2: 0x404
- stack 1: 0x340620
- stack 0: 0xFFFF
32	 3D	AND		 	 
- stack 1: 0x404
- stack 0: 0x620
33	 3E	PUSH1	01	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x1
34	 40	SIGNEXTEND		 	 
- stack 1: 0x404
- stack 0: 0x620
35	 41	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x160
36	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x0
37	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x404
- stack 0: 0x620
38	 46	PUSH2	0160	 	 
- stack 2: 0x404
- stack 1: 0x620
- stack 0: 0x160
39	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x404
40	 4A	PUSH1	04	 	 
- stack 1: 0x404
- stack 0: 0x4
41	 4C	ADD		 	 
- stack 0: 0x408
42	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x408
- stack 0: 0x408
43	 4E	MLOAD		 	 
- stack 1: 0x408
- stack 0: 0x5300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F01090002
44	 4F	PUSH1	F0	 	 
- stack 2: 0x408
- stack 1: 0x5300420066000000860FF10099FF0000B8FF0F00D7F00F00EA000F01090002
- stack 0: 0xF0
45	 51	SHR		 	 
- stack 1: 0x408
- stack 0: 0x53
46	 52	JUMP		 	 
- stack 0: 0x408
47	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x408
48	 54	PUSH4	00042000	 	 
- stack 1: 0x408
- stack 0: 0x42000
49	 59	PUSH2	0140	 	 
- stack 2: 0x408
- stack 1: 0x42000
- stack 0: 0x140
50	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x408
51	 5D	PUSH1	04	 	 
- stack 1: 0x408
- stack 0: 0x4
52	 5F	ADD		 	 
- stack 0: 0x40C
53	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x40C
- stack 0: 0x40C
54	 61	MLOAD		 	 
- stack 1: 0x40C
- stack 0: 0x66000000860FF10099FF0000B8FF0F00D7F00F00EA000F01090002012301CC
55	 62	PUSH1	F0	 	 
- stack 2: 0x40C
- stack 1: 0x66000000860FF10099FF0000B8FF0F00D7F00F00EA000F01090002012301CC
- stack 0: 0xF0
56	 64	SHR		 	 
- stack 1: 0x40C
- stack 0: 0x66
57	 65	JUMP		 	 
- stack 0: 0x40C
58	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x40C
59	 67	PUSH2	0140	 	 
- stack 1: 0x40C
- stack 0: 0x140
60	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x40C
- stack 0: 0x42000
61	 6B	PUSH2	0075	 ;; _ecall_083b61ee6a0b0fa5653b9f06053037a999fee9eba3be669e181f49fe80163d36	 
- stack 2: 0x40C
- stack 1: 0x42000
- stack 0: 0x75
62	 6E	JUMPI		 	 
- stack 0: 0x40C
63	 75	JUMPDEST		 ;; _ecall_083b61ee6a0b0fa5653b9f06053037a999fee9eba3be669e181f49fe80163d36	 
- stack 0: 0x40C
64	 76	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
65	 78	PUSH2	0160	 	 
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x160
66	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x40C
- stack 1: 0x4
- stack 0: 0x620
67	 7C	LOG0		 	 
*** PRINT: mytest
- stack 0: 0x40C
68	 7D	PUSH1	04	 	 
- stack 1: 0x40C
- stack 0: 0x4
69	 7F	ADD		 	 
- stack 0: 0x410
70	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x410
- stack 0: 0x410
71	 81	MLOAD		 	 
- stack 1: 0x410
- stack 0: 0x860FF10099FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF01
72	 82	PUSH1	F0	 	 
- stack 2: 0x410
- stack 1: 0x860FF10099FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF01
- stack 0: 0xF0
73	 84	SHR		 	 
- stack 1: 0x410
- stack 0: 0x86
74	 85	JUMP		 	 
- stack 0: 0x410
75	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x410
76	 87	PUSH4	00ff1000	 	 
- stack 1: 0x410
- stack 0: 0xFF1000
77	 8C	PUSH2	0020	 	 
- stack 2: 0x410
- stack 1: 0xFF1000
- stack 0: 0x20
78	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x410
79	 90	PUSH1	04	 	 
- stack 1: 0x410
- stack 0: 0x4
80	 92	ADD		 	 
- stack 0: 0x414
81	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x414
- stack 0: 0x414
82	 94	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF0
83	 95	PUSH1	F0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF0
- stack 0: 0xF0
84	 97	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99
85	 98	JUMP		 	 
- stack 0: 0x414
86	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x414
87	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x414
- stack 0: 0x414
88	 9B	MLOAD		 	 
- stack 1: 0x414
- stack 0: 0x99FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF0
89	 9C	PUSH1	E0	 	 
- stack 2: 0x414
- stack 1: 0x99FF0000B8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF0
- stack 0: 0xE0
90	 9E	SHR		 	 
- stack 1: 0x414
- stack 0: 0x99FF00
91	 9F	PUSH2	FFFF	 	 
- stack 2: 0x414
- stack 1: 0x99FF00
- stack 0: 0xFFFF
92	 A2	AND		 	 
- stack 1: 0x414
- stack 0: 0xFF00
93	 A3	PUSH1	01	 	 
- stack 2: 0x414
- stack 1: 0xFF00
- stack 0: 0x1
94	 A5	SIGNEXTEND		 	 
- stack 1: 0x414
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
95	 A6	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x20
96	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x414
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF1000
97	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x414
- stack 0: 0xFF0F00
98	 AB	PUSH2	0020	 	 
- stack 2: 0x414
- stack 1: 0xFF0F00
- stack 0: 0x20
99	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x414
100	 AF	PUSH1	04	 	 
- stack 1: 0x414
- stack 0: 0x4
101	 B1	ADD		 	 
- stack 0: 0x418
102	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x418
- stack 0: 0x418
103	 B3	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF000B800F0
104	 B4	PUSH1	F0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF000B800F0
- stack 0: 0xF0
105	 B6	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8
106	 B7	JUMP		 	 
- stack 0: 0x418
107	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x418
108	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x418
- stack 0: 0x418
109	 BA	MLOAD		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF000B800F0
110	 BB	PUSH1	E0	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F00D7F00F00EA000F01090002012301CC0165FF010099FFF000B800F0
- stack 0: 0xE0
111	 BD	SHR		 	 
- stack 1: 0x418
- stack 0: 0xB8FF0F
112	 BE	PUSH2	FFFF	 	 
- stack 2: 0x418
- stack 1: 0xB8FF0F
- stack 0: 0xFFFF
113	 C1	AND		 	 
- stack 1: 0x418
- stack 0: 0xFF0F
114	 C2	PUSH1	01	 	 
- stack 2: 0x418
- stack 1: 0xFF0F
- stack 0: 0x1
115	 C4	SIGNEXTEND		 	 
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
116	 C5	PUSH2	0020	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0x20
117	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0F
- stack 0: 0xFF0F00
118	 C9	XOR		 	  ;; # XORI
- stack 1: 0x418
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F00F
119	 CA	PUSH2	0060	 	 
- stack 2: 0x418
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F00F
- stack 0: 0x60
120	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x418
121	 CE	PUSH1	04	 	 
- stack 1: 0x418
- stack 0: 0x4
122	 D0	ADD		 	 
- stack 0: 0x41C
123	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x41C
- stack 0: 0x41C
124	 D2	MLOAD		 	 
- stack 1: 0x41C
- stack 0: 0xD7F00F00EA000F01090002012301CC0165FF010099FFF000B800F00178FF01
125	 D3	PUSH1	F0	 	 
- stack 2: 0x41C
- stack 1: 0xD7F00F00EA000F01090002012301CC0165FF010099FFF000B800F00178FF01
- stack 0: 0xF0
126	 D5	SHR		 	 
- stack 1: 0x41C
- stack 0: 0xD7
127	 D6	JUMP		 	 
- stack 0: 0x41C
128	 D7	JUMPDEST		 ;; __riscvimpl_LUI_ff00feb7	  ;; # instr: lui t4,0xff00f(ignore imm)
- stack 0: 0x41C
129	 D8	PUSH4	ff00f000	 	 
- stack 1: 0x41C
- stack 0: 0xFF00F000
130	 DD	PUSH2	03A0	 	 
- stack 2: 0x41C
- stack 1: 0xFF00F000
- stack 0: 0x3A0
131	 E0	MSTORE		 	  ;; # store to x29
- stack 0: 0x41C
132	 E1	PUSH1	04	 	 
- stack 1: 0x41C
- stack 0: 0x4
133	 E3	ADD		 	 
- stack 0: 0x420
134	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x420
- stack 0: 0x420
135	 E5	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEA000F01090002012301CC0165FF010099FFF000B800F00178FF0100EAFF00
136	 E6	PUSH1	F0	 	 
- stack 2: 0x420
- stack 1: 0xEA000F01090002012301CC0165FF010099FFF000B800F00178FF0100EAFF00
- stack 0: 0xF0
137	 E8	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA
138	 E9	JUMP		 	 
- stack 0: 0x420
139	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x420
140	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x420
- stack 0: 0x420
141	 EC	MLOAD		 	 
- stack 1: 0x420
- stack 0: 0xEA000F01090002012301CC0165FF010099FFF000B800F00178FF0100EAFF00
142	 ED	PUSH1	E0	 	 
- stack 2: 0x420
- stack 1: 0xEA000F01090002012301CC0165FF010099FFF000B800F00178FF0100EAFF00
- stack 0: 0xE0
143	 EF	SHR		 	 
- stack 1: 0x420
- stack 0: 0xEA000F
144	 F0	PUSH2	FFFF	 	 
- stack 2: 0x420
- stack 1: 0xEA000F
- stack 0: 0xFFFF
145	 F3	AND		 	 
- stack 1: 0x420
- stack 0: 0xF
146	 F4	PUSH1	01	 	 
- stack 2: 0x420
- stack 1: 0xF
- stack 0: 0x1
147	 F6	SIGNEXTEND		 	 
- stack 1: 0x420
- stack 0: 0xF
148	 F7	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xF
- stack 0: 0x3A0
149	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x420
- stack 1: 0xF
- stack 0: 0xFF00F000
150	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x420
- stack 0: 0xFF00F00F
151	 FC	PUSH2	03A0	 	 
- stack 2: 0x420
- stack 1: 0xFF00F00F
- stack 0: 0x3A0
152	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x420
153	 100	PUSH1	04	 	 
- stack 1: 0x420
- stack 0: 0x4
154	 102	ADD		 	 
- stack 0: 0x424
155	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x424
- stack 0: 0x424
156	 104	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1090002012301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003
157	 105	PUSH1	F0	 	 
- stack 2: 0x424
- stack 1: 0x1090002012301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003
- stack 0: 0xF0
158	 107	SHR		 	 
- stack 1: 0x424
- stack 0: 0x109
159	 108	JUMP		 	 
- stack 0: 0x424
160	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x424
161	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x424
- stack 0: 0x424
162	 10B	MLOAD		 	 
- stack 1: 0x424
- stack 0: 0x1090002012301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003
163	 10C	PUSH1	E0	 	 
- stack 2: 0x424
- stack 1: 0x1090002012301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003
- stack 0: 0xE0
164	 10E	SHR		 	 
- stack 1: 0x424
- stack 0: 0x1090002
165	 10F	PUSH2	FFFF	 	 
- stack 2: 0x424
- stack 1: 0x1090002
- stack 0: 0xFFFF
166	 112	AND		 	 
- stack 1: 0x424
- stack 0: 0x2
167	 113	PUSH1	01	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x1
168	 115	SIGNEXTEND		 	 
- stack 1: 0x424
- stack 0: 0x2
169	 116	PUSH2	0380	 	 
- stack 2: 0x424
- stack 1: 0x2
- stack 0: 0x380
170	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x424
171	 11A	PUSH1	04	 	 
- stack 1: 0x424
- stack 0: 0x4
172	 11C	ADD		 	 
- stack 0: 0x428
173	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x428
- stack 0: 0x428
174	 11E	MLOAD		 	 
- stack 1: 0x428
- stack 0: 0x12301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003012301B0
175	 11F	PUSH1	F0	 	 
- stack 2: 0x428
- stack 1: 0x12301CC0165FF010099FFF000B800F00178FF0100EAFF0001090003012301B0
- stack 0: 0xF0
176	 121	SHR		 	 
- stack 1: 0x428
- stack 0: 0x123
177	 122	JUMP		 	 
- stack 0: 0x428
178	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x428
179	 124	PUSH2	0060	 	 
- stack 1: 0x428
- stack 0: 0x60
180	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x428
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F00F
181	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x428
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00F00F
- stack 0: 0xFFFFFFFF
182	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x428
- stack 0: 0xFF00F00F
183	 12E	PUSH2	03A0	 	 
- stack 2: 0x428
- stack 1: 0xFF00F00F
- stack 0: 0x3A0
184	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x428
- stack 1: 0xFF00F00F
- stack 0: 0xFF00F00F
185	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x428
- stack 2: 0xFF00F00F
- stack 1: 0xFF00F00F
- stack 0: 0xFFFFFFFF
186	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x428
- stack 1: 0xFF00F00F
- stack 0: 0xFF00F00F
187	 138	SUB		 	 
- stack 1: 0x428
- stack 0: 0x0
188	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x428
- stack 1: 0x0
- stack 0: 0x141
189	 13C	JUMPI		 	 
- stack 0: 0x428
190	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x428
- stack 0: 0x15B
191	 140	JUMP		 	 
- stack 0: 0x428
192	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x428
193	 15C	PUSH1	04	 	 
- stack 1: 0x428
- stack 0: 0x4
194	 15E	ADD		 	 
- stack 0: 0x42C
195	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x42C
- stack 0: 0x42C
196	 160	MLOAD		 	 
- stack 1: 0x42C
- stack 0: 0x165FF010099FFF000B800F00178FF0100EAFF0001090003012301B000860FF1
197	 161	PUSH1	F0	 	 
- stack 2: 0x42C
- stack 1: 0x165FF010099FFF000B800F00178FF0100EAFF0001090003012301B000860FF1
- stack 0: 0xF0
198	 163	SHR		 	 
- stack 1: 0x42C
- stack 0: 0x165
199	 164	JUMP		 	 
- stack 0: 0x42C
200	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x42C
201	 166	PUSH4	0ff01000	 	 
- stack 1: 0x42C
- stack 0: 0xFF01000
202	 16B	PUSH2	0020	 	 
- stack 2: 0x42C
- stack 1: 0xFF01000
- stack 0: 0x20
203	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x42C
204	 16F	PUSH1	04	 	 
- stack 1: 0x42C
- stack 0: 0x4
205	 171	ADD		 	 
- stack 0: 0x430
206	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x430
- stack 0: 0x430
207	 173	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x99FFF000B800F00178FF0100EAFF0001090003012301B000860FF10099F8FF
208	 174	PUSH1	F0	 	 
- stack 2: 0x430
- stack 1: 0x99FFF000B800F00178FF0100EAFF0001090003012301B000860FF10099F8FF
- stack 0: 0xF0
209	 176	SHR		 	 
- stack 1: 0x430
- stack 0: 0x99
210	 177	JUMP		 	 
- stack 0: 0x430
211	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x430
212	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x430
- stack 0: 0x430
213	 9B	MLOAD		 	 
- stack 1: 0x430
- stack 0: 0x99FFF000B800F00178FF0100EAFF0001090003012301B000860FF10099F8FF
214	 9C	PUSH1	E0	 	 
- stack 2: 0x430
- stack 1: 0x99FFF000B800F00178FF0100EAFF0001090003012301B000860FF10099F8FF
- stack 0: 0xE0
215	 9E	SHR		 	 
- stack 1: 0x430
- stack 0: 0x99FFF0
216	 9F	PUSH2	FFFF	 	 
- stack 2: 0x430
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
217	 A2	AND		 	 
- stack 1: 0x430
- stack 0: 0xFFF0
218	 A3	PUSH1	01	 	 
- stack 2: 0x430
- stack 1: 0xFFF0
- stack 0: 0x1
219	 A5	SIGNEXTEND		 	 
- stack 1: 0x430
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
220	 A6	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
221	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x430
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
222	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x430
- stack 0: 0xFF00FF0
223	 AB	PUSH2	0020	 	 
- stack 2: 0x430
- stack 1: 0xFF00FF0
- stack 0: 0x20
224	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x430
225	 AF	PUSH1	04	 	 
- stack 1: 0x430
- stack 0: 0x4
226	 B1	ADD		 	 
- stack 0: 0x434
227	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x434
- stack 0: 0x434
228	 B3	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB800F00178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F
229	 B4	PUSH1	F0	 	 
- stack 2: 0x434
- stack 1: 0xB800F00178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F
- stack 0: 0xF0
230	 B6	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB8
231	 B7	JUMP		 	 
- stack 0: 0x434
232	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x434
233	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x434
- stack 0: 0x434
234	 BA	MLOAD		 	 
- stack 1: 0x434
- stack 0: 0xB800F00178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F
235	 BB	PUSH1	E0	 	 
- stack 2: 0x434
- stack 1: 0xB800F00178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F
- stack 0: 0xE0
236	 BD	SHR		 	 
- stack 1: 0x434
- stack 0: 0xB800F0
237	 BE	PUSH2	FFFF	 	 
- stack 2: 0x434
- stack 1: 0xB800F0
- stack 0: 0xFFFF
238	 C1	AND		 	 
- stack 1: 0x434
- stack 0: 0xF0
239	 C2	PUSH1	01	 	 
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0x1
240	 C4	SIGNEXTEND		 	 
- stack 1: 0x434
- stack 0: 0xF0
241	 C5	PUSH2	0020	 	 
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0x20
242	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x434
- stack 1: 0xF0
- stack 0: 0xFF00FF0
243	 C9	XOR		 	  ;; # XORI
- stack 1: 0x434
- stack 0: 0xFF00F00
244	 CA	PUSH2	0060	 	 
- stack 2: 0x434
- stack 1: 0xFF00F00
- stack 0: 0x60
245	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x434
246	 CE	PUSH1	04	 	 
- stack 1: 0x434
- stack 0: 0x4
247	 D0	ADD		 	 
- stack 0: 0x438
248	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x438
- stack 0: 0x438
249	 D2	MLOAD		 	 
- stack 1: 0x438
- stack 0: 0x178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF1
250	 D3	PUSH1	F0	 	 
- stack 2: 0x438
- stack 1: 0x178FF0100EAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF1
- stack 0: 0xF0
251	 D5	SHR		 	 
- stack 1: 0x438
- stack 0: 0x178
252	 D6	JUMP		 	 
- stack 0: 0x438
253	 178	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x438
254	 179	PUSH4	0ff01000	 	 
- stack 1: 0x438
- stack 0: 0xFF01000
255	 17E	PUSH2	03A0	 	 
- stack 2: 0x438
- stack 1: 0xFF01000
- stack 0: 0x3A0
256	 181	MSTORE		 	  ;; # store to x29
- stack 0: 0x438
257	 182	PUSH1	04	 	 
- stack 1: 0x438
- stack 0: 0x4
258	 184	ADD		 	 
- stack 0: 0x43C
259	 185	DUP1		 	  ;; # executing pc
- stack 1: 0x43C
- stack 0: 0x43C
260	 186	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xEAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF0
261	 187	PUSH1	F0	 	 
- stack 2: 0x43C
- stack 1: 0xEAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF0
- stack 0: 0xF0
262	 189	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xEA
263	 18A	JUMP		 	 
- stack 0: 0x43C
264	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x43C
265	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x43C
- stack 0: 0x43C
266	 EC	MLOAD		 	 
- stack 1: 0x43C
- stack 0: 0xEAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF0
267	 ED	PUSH1	E0	 	 
- stack 2: 0x43C
- stack 1: 0xEAFF0001090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF0
- stack 0: 0xE0
268	 EF	SHR		 	 
- stack 1: 0x43C
- stack 0: 0xEAFF00
269	 F0	PUSH2	FFFF	 	 
- stack 2: 0x43C
- stack 1: 0xEAFF00
- stack 0: 0xFFFF
270	 F3	AND		 	 
- stack 1: 0x43C
- stack 0: 0xFF00
271	 F4	PUSH1	01	 	 
- stack 2: 0x43C
- stack 1: 0xFF00
- stack 0: 0x1
272	 F6	SIGNEXTEND		 	 
- stack 1: 0x43C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
273	 F7	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
274	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x43C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF01000
275	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x43C
- stack 0: 0xFF00F00
276	 FC	PUSH2	03A0	 	 
- stack 2: 0x43C
- stack 1: 0xFF00F00
- stack 0: 0x3A0
277	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x43C
278	 100	PUSH1	04	 	 
- stack 1: 0x43C
- stack 0: 0x4
279	 102	ADD		 	 
- stack 0: 0x440
280	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x440
- stack 0: 0x440
281	 104	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF001090004
282	 105	PUSH1	F0	 	 
- stack 2: 0x440
- stack 1: 0x1090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF001090004
- stack 0: 0xF0
283	 107	SHR		 	 
- stack 1: 0x440
- stack 0: 0x109
284	 108	JUMP		 	 
- stack 0: 0x440
285	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x440
286	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x440
- stack 0: 0x440
287	 10B	MLOAD		 	 
- stack 1: 0x440
- stack 0: 0x1090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF001090004
288	 10C	PUSH1	E0	 	 
- stack 2: 0x440
- stack 1: 0x1090003012301B000860FF10099F8FF00B8070F018B0FF100EAFFF001090004
- stack 0: 0xE0
289	 10E	SHR		 	 
- stack 1: 0x440
- stack 0: 0x1090003
290	 10F	PUSH2	FFFF	 	 
- stack 2: 0x440
- stack 1: 0x1090003
- stack 0: 0xFFFF
291	 112	AND		 	 
- stack 1: 0x440
- stack 0: 0x3
292	 113	PUSH1	01	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x1
293	 115	SIGNEXTEND		 	 
- stack 1: 0x440
- stack 0: 0x3
294	 116	PUSH2	0380	 	 
- stack 2: 0x440
- stack 1: 0x3
- stack 0: 0x380
295	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x440
296	 11A	PUSH1	04	 	 
- stack 1: 0x440
- stack 0: 0x4
297	 11C	ADD		 	 
- stack 0: 0x444
298	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x444
- stack 0: 0x444
299	 11E	MLOAD		 	 
- stack 1: 0x444
- stack 0: 0x12301B000860FF10099F8FF00B8070F018B0FF100EAFFF00109000401230194
300	 11F	PUSH1	F0	 	 
- stack 2: 0x444
- stack 1: 0x12301B000860FF10099F8FF00B8070F018B0FF100EAFFF00109000401230194
- stack 0: 0xF0
301	 121	SHR		 	 
- stack 1: 0x444
- stack 0: 0x123
302	 122	JUMP		 	 
- stack 0: 0x444
303	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x444
304	 124	PUSH2	0060	 	 
- stack 1: 0x444
- stack 0: 0x60
305	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x444
- stack 0: 0xFF00F00
306	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x444
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
307	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x444
- stack 0: 0xFF00F00
308	 12E	PUSH2	03A0	 	 
- stack 2: 0x444
- stack 1: 0xFF00F00
- stack 0: 0x3A0
309	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x444
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
310	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x444
- stack 2: 0xFF00F00
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
311	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x444
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
312	 138	SUB		 	 
- stack 1: 0x444
- stack 0: 0x0
313	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x444
- stack 1: 0x0
- stack 0: 0x141
314	 13C	JUMPI		 	 
- stack 0: 0x444
315	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x444
- stack 0: 0x15B
316	 140	JUMP		 	 
- stack 0: 0x444
317	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x444
318	 15C	PUSH1	04	 	 
- stack 1: 0x444
- stack 0: 0x4
319	 15E	ADD		 	 
- stack 0: 0x448
320	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x448
- stack 0: 0x448
321	 160	MLOAD		 	 
- stack 1: 0x448
- stack 0: 0x860FF10099F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF
322	 161	PUSH1	F0	 	 
- stack 2: 0x448
- stack 1: 0x860FF10099F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF
- stack 0: 0xF0
323	 163	SHR		 	 
- stack 1: 0x448
- stack 0: 0x86
324	 164	JUMP		 	 
- stack 0: 0x448
325	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x448
326	 87	PUSH4	00ff1000	 	 
- stack 1: 0x448
- stack 0: 0xFF1000
327	 8C	PUSH2	0020	 	 
- stack 2: 0x448
- stack 1: 0xFF1000
- stack 0: 0x20
328	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x448
329	 90	PUSH1	04	 	 
- stack 1: 0x448
- stack 0: 0x4
330	 92	ADD		 	 
- stack 0: 0x44C
331	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x44C
- stack 0: 0x44C
332	 94	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x99F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF0099000F
333	 95	PUSH1	F0	 	 
- stack 2: 0x44C
- stack 1: 0x99F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF0099000F
- stack 0: 0xF0
334	 97	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x99
335	 98	JUMP		 	 
- stack 0: 0x44C
336	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x44C
337	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x44C
- stack 0: 0x44C
338	 9B	MLOAD		 	 
- stack 1: 0x44C
- stack 0: 0x99F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF0099000F
339	 9C	PUSH1	E0	 	 
- stack 2: 0x44C
- stack 1: 0x99F8FF00B8070F018B0FF100EAFFF00109000401230194019E00FF0099000F
- stack 0: 0xE0
340	 9E	SHR		 	 
- stack 1: 0x44C
- stack 0: 0x99F8FF
341	 9F	PUSH2	FFFF	 	 
- stack 2: 0x44C
- stack 1: 0x99F8FF
- stack 0: 0xFFFF
342	 A2	AND		 	 
- stack 1: 0x44C
- stack 0: 0xF8FF
343	 A3	PUSH1	01	 	 
- stack 2: 0x44C
- stack 1: 0xF8FF
- stack 0: 0x1
344	 A5	SIGNEXTEND		 	 
- stack 1: 0x44C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
345	 A6	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0x20
346	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x44C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0xFF1000
347	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x44C
- stack 0: 0xFF08FF
348	 AB	PUSH2	0020	 	 
- stack 2: 0x44C
- stack 1: 0xFF08FF
- stack 0: 0x20
349	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x44C
350	 AF	PUSH1	04	 	 
- stack 1: 0x44C
- stack 0: 0x4
351	 B1	ADD		 	 
- stack 0: 0x450
352	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x450
- stack 0: 0x450
353	 B3	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xB8070F018B0FF100EAFFF00109000401230194019E00FF0099000F00B800F0
354	 B4	PUSH1	F0	 	 
- stack 2: 0x450
- stack 1: 0xB8070F018B0FF100EAFFF00109000401230194019E00FF0099000F00B800F0
- stack 0: 0xF0
355	 B6	SHR		 	 
- stack 1: 0x450
- stack 0: 0xB8
356	 B7	JUMP		 	 
- stack 0: 0x450
357	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x450
358	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x450
- stack 0: 0x450
359	 BA	MLOAD		 	 
- stack 1: 0x450
- stack 0: 0xB8070F018B0FF100EAFFF00109000401230194019E00FF0099000F00B800F0
360	 BB	PUSH1	E0	 	 
- stack 2: 0x450
- stack 1: 0xB8070F018B0FF100EAFFF00109000401230194019E00FF0099000F00B800F0
- stack 0: 0xE0
361	 BD	SHR		 	 
- stack 1: 0x450
- stack 0: 0xB8070F
362	 BE	PUSH2	FFFF	 	 
- stack 2: 0x450
- stack 1: 0xB8070F
- stack 0: 0xFFFF
363	 C1	AND		 	 
- stack 1: 0x450
- stack 0: 0x70F
364	 C2	PUSH1	01	 	 
- stack 2: 0x450
- stack 1: 0x70F
- stack 0: 0x1
365	 C4	SIGNEXTEND		 	 
- stack 1: 0x450
- stack 0: 0x70F
366	 C5	PUSH2	0020	 	 
- stack 2: 0x450
- stack 1: 0x70F
- stack 0: 0x20
367	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x450
- stack 1: 0x70F
- stack 0: 0xFF08FF
368	 C9	XOR		 	  ;; # XORI
- stack 1: 0x450
- stack 0: 0xFF0FF0
369	 CA	PUSH2	0060	 	 
- stack 2: 0x450
- stack 1: 0xFF0FF0
- stack 0: 0x60
370	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x450
371	 CE	PUSH1	04	 	 
- stack 1: 0x450
- stack 0: 0x4
372	 D0	ADD		 	 
- stack 0: 0x454
373	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x454
- stack 0: 0x454
374	 D2	MLOAD		 	 
- stack 1: 0x454
- stack 0: 0x18B0FF100EAFFF00109000401230194019E00FF0099000F00B800F001B100FF
375	 D3	PUSH1	F0	 	 
- stack 2: 0x454
- stack 1: 0x18B0FF100EAFFF00109000401230194019E00FF0099000F00B800F001B100FF
- stack 0: 0xF0
376	 D5	SHR		 	 
- stack 1: 0x454
- stack 0: 0x18B
377	 D6	JUMP		 	 
- stack 0: 0x454
378	 18B	JUMPDEST		 ;; __riscvimpl_LUI_ff1eb7	  ;; # instr: lui t4,0xff1(ignore imm)
- stack 0: 0x454
379	 18C	PUSH4	00ff1000	 	 
- stack 1: 0x454
- stack 0: 0xFF1000
380	 191	PUSH2	03A0	 	 
- stack 2: 0x454
- stack 1: 0xFF1000
- stack 0: 0x3A0
381	 194	MSTORE		 	  ;; # store to x29
- stack 0: 0x454
382	 195	PUSH1	04	 	 
- stack 1: 0x454
- stack 0: 0x4
383	 197	ADD		 	 
- stack 0: 0x458
384	 198	DUP1		 	  ;; # executing pc
- stack 1: 0x458
- stack 0: 0x458
385	 199	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xEAFFF00109000401230194019E00FF0099000F00B800F001B100FF00EA00FF
386	 19A	PUSH1	F0	 	 
- stack 2: 0x458
- stack 1: 0xEAFFF00109000401230194019E00FF0099000F00B800F001B100FF00EA00FF
- stack 0: 0xF0
387	 19C	SHR		 	 
- stack 1: 0x458
- stack 0: 0xEA
388	 19D	JUMP		 	 
- stack 0: 0x458
389	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x458
390	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x458
- stack 0: 0x458
391	 EC	MLOAD		 	 
- stack 1: 0x458
- stack 0: 0xEAFFF00109000401230194019E00FF0099000F00B800F001B100FF00EA00FF
392	 ED	PUSH1	E0	 	 
- stack 2: 0x458
- stack 1: 0xEAFFF00109000401230194019E00FF0099000F00B800F001B100FF00EA00FF
- stack 0: 0xE0
393	 EF	SHR		 	 
- stack 1: 0x458
- stack 0: 0xEAFFF0
394	 F0	PUSH2	FFFF	 	 
- stack 2: 0x458
- stack 1: 0xEAFFF0
- stack 0: 0xFFFF
395	 F3	AND		 	 
- stack 1: 0x458
- stack 0: 0xFFF0
396	 F4	PUSH1	01	 	 
- stack 2: 0x458
- stack 1: 0xFFF0
- stack 0: 0x1
397	 F6	SIGNEXTEND		 	 
- stack 1: 0x458
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
398	 F7	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
399	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x458
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF1000
400	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x458
- stack 0: 0xFF0FF0
401	 FC	PUSH2	03A0	 	 
- stack 2: 0x458
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
402	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x458
403	 100	PUSH1	04	 	 
- stack 1: 0x458
- stack 0: 0x4
404	 102	ADD		 	 
- stack 0: 0x45C
405	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x45C
- stack 0: 0x45C
406	 104	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x109000401230194019E00FF0099000F00B800F001B100FF00EA00FF01090005
407	 105	PUSH1	F0	 	 
- stack 2: 0x45C
- stack 1: 0x109000401230194019E00FF0099000F00B800F001B100FF00EA00FF01090005
- stack 0: 0xF0
408	 107	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x109
409	 108	JUMP		 	 
- stack 0: 0x45C
410	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x45C
411	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x45C
- stack 0: 0x45C
412	 10B	MLOAD		 	 
- stack 1: 0x45C
- stack 0: 0x109000401230194019E00FF0099000F00B800F001B100FF00EA00FF01090005
413	 10C	PUSH1	E0	 	 
- stack 2: 0x45C
- stack 1: 0x109000401230194019E00FF0099000F00B800F001B100FF00EA00FF01090005
- stack 0: 0xE0
414	 10E	SHR		 	 
- stack 1: 0x45C
- stack 0: 0x1090004
415	 10F	PUSH2	FFFF	 	 
- stack 2: 0x45C
- stack 1: 0x1090004
- stack 0: 0xFFFF
416	 112	AND		 	 
- stack 1: 0x45C
- stack 0: 0x4
417	 113	PUSH1	01	 	 
- stack 2: 0x45C
- stack 1: 0x4
- stack 0: 0x1
418	 115	SIGNEXTEND		 	 
- stack 1: 0x45C
- stack 0: 0x4
419	 116	PUSH2	0380	 	 
- stack 2: 0x45C
- stack 1: 0x4
- stack 0: 0x380
420	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x45C
421	 11A	PUSH1	04	 	 
- stack 1: 0x45C
- stack 0: 0x4
422	 11C	ADD		 	 
- stack 0: 0x460
423	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x460
- stack 0: 0x460
424	 11E	MLOAD		 	 
- stack 1: 0x460
- stack 0: 0x1230194019E00FF0099000F00B800F001B100FF00EA00FF0109000501230178
425	 11F	PUSH1	F0	 	 
- stack 2: 0x460
- stack 1: 0x1230194019E00FF0099000F00B800F001B100FF00EA00FF0109000501230178
- stack 0: 0xF0
426	 121	SHR		 	 
- stack 1: 0x460
- stack 0: 0x123
427	 122	JUMP		 	 
- stack 0: 0x460
428	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x460
429	 124	PUSH2	0060	 	 
- stack 1: 0x460
- stack 0: 0x60
430	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x460
- stack 0: 0xFF0FF0
431	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x460
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
432	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x460
- stack 0: 0xFF0FF0
433	 12E	PUSH2	03A0	 	 
- stack 2: 0x460
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
434	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x460
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
435	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x460
- stack 2: 0xFF0FF0
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
436	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x460
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
437	 138	SUB		 	 
- stack 1: 0x460
- stack 0: 0x0
438	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x460
- stack 1: 0x0
- stack 0: 0x141
439	 13C	JUMPI		 	 
- stack 0: 0x460
440	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x460
- stack 0: 0x15B
441	 140	JUMP		 	 
- stack 0: 0x460
442	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x460
443	 15C	PUSH1	04	 	 
- stack 1: 0x460
- stack 0: 0x4
444	 15E	ADD		 	 
- stack 0: 0x464
445	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x464
- stack 0: 0x464
446	 160	MLOAD		 	 
- stack 1: 0x464
- stack 0: 0x19E00FF0099000F00B800F001B100FF00EA00FF010900050123017801C4F00F
447	 161	PUSH1	F0	 	 
- stack 2: 0x464
- stack 1: 0x19E00FF0099000F00B800F001B100FF00EA00FF010900050123017801C4F00F
- stack 0: 0xF0
448	 163	SHR		 	 
- stack 1: 0x464
- stack 0: 0x19E
449	 164	JUMP		 	 
- stack 0: 0x464
450	 19E	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x464
451	 19F	PUSH4	f00ff000	 	 
- stack 1: 0x464
- stack 0: 0xF00FF000
452	 1A4	PUSH2	0020	 	 
- stack 2: 0x464
- stack 1: 0xF00FF000
- stack 0: 0x20
453	 1A7	MSTORE		 	  ;; # store to x1
- stack 0: 0x464
454	 1A8	PUSH1	04	 	 
- stack 1: 0x464
- stack 0: 0x4
455	 1AA	ADD		 	 
- stack 0: 0x468
456	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x468
- stack 0: 0x468
457	 1AC	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x99000F00B800F001B100FF00EA00FF010900050123017801C4F00F00990700
458	 1AD	PUSH1	F0	 	 
- stack 2: 0x468
- stack 1: 0x99000F00B800F001B100FF00EA00FF010900050123017801C4F00F00990700
- stack 0: 0xF0
459	 1AF	SHR		 	 
- stack 1: 0x468
- stack 0: 0x99
460	 1B0	JUMP		 	 
- stack 0: 0x468
461	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x468
462	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x468
- stack 0: 0x468
463	 9B	MLOAD		 	 
- stack 1: 0x468
- stack 0: 0x99000F00B800F001B100FF00EA00FF010900050123017801C4F00F00990700
464	 9C	PUSH1	E0	 	 
- stack 2: 0x468
- stack 1: 0x99000F00B800F001B100FF00EA00FF010900050123017801C4F00F00990700
- stack 0: 0xE0
465	 9E	SHR		 	 
- stack 1: 0x468
- stack 0: 0x99000F
466	 9F	PUSH2	FFFF	 	 
- stack 2: 0x468
- stack 1: 0x99000F
- stack 0: 0xFFFF
467	 A2	AND		 	 
- stack 1: 0x468
- stack 0: 0xF
468	 A3	PUSH1	01	 	 
- stack 2: 0x468
- stack 1: 0xF
- stack 0: 0x1
469	 A5	SIGNEXTEND		 	 
- stack 1: 0x468
- stack 0: 0xF
470	 A6	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF
- stack 0: 0x20
471	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x468
- stack 1: 0xF
- stack 0: 0xF00FF000
472	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x468
- stack 0: 0xF00FF00F
473	 AB	PUSH2	0020	 	 
- stack 2: 0x468
- stack 1: 0xF00FF00F
- stack 0: 0x20
474	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x468
475	 AF	PUSH1	04	 	 
- stack 1: 0x468
- stack 0: 0x4
476	 B1	ADD		 	 
- stack 0: 0x46C
477	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x46C
- stack 0: 0x46C
478	 B3	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xB800F001B100FF00EA00FF010900050123017801C4F00F0099070001D7070F
479	 B4	PUSH1	F0	 	 
- stack 2: 0x46C
- stack 1: 0xB800F001B100FF00EA00FF010900050123017801C4F00F0099070001D7070F
- stack 0: 0xF0
480	 B6	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xB8
481	 B7	JUMP		 	 
- stack 0: 0x46C
482	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x46C
483	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x46C
- stack 0: 0x46C
484	 BA	MLOAD		 	 
- stack 1: 0x46C
- stack 0: 0xB800F001B100FF00EA00FF010900050123017801C4F00F0099070001D7070F
485	 BB	PUSH1	E0	 	 
- stack 2: 0x46C
- stack 1: 0xB800F001B100FF00EA00FF010900050123017801C4F00F0099070001D7070F
- stack 0: 0xE0
486	 BD	SHR		 	 
- stack 1: 0x46C
- stack 0: 0xB800F0
487	 BE	PUSH2	FFFF	 	 
- stack 2: 0x46C
- stack 1: 0xB800F0
- stack 0: 0xFFFF
488	 C1	AND		 	 
- stack 1: 0x46C
- stack 0: 0xF0
489	 C2	PUSH1	01	 	 
- stack 2: 0x46C
- stack 1: 0xF0
- stack 0: 0x1
490	 C4	SIGNEXTEND		 	 
- stack 1: 0x46C
- stack 0: 0xF0
491	 C5	PUSH2	0020	 	 
- stack 2: 0x46C
- stack 1: 0xF0
- stack 0: 0x20
492	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x46C
- stack 1: 0xF0
- stack 0: 0xF00FF00F
493	 C9	XOR		 	  ;; # XORI
- stack 1: 0x46C
- stack 0: 0xF00FF0FF
494	 CA	PUSH2	0060	 	 
- stack 2: 0x46C
- stack 1: 0xF00FF0FF
- stack 0: 0x60
495	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x46C
496	 CE	PUSH1	04	 	 
- stack 1: 0x46C
- stack 0: 0x4
497	 D0	ADD		 	 
- stack 0: 0x470
498	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x470
- stack 0: 0x470
499	 D2	MLOAD		 	 
- stack 1: 0x470
- stack 0: 0x1B100FF00EA00FF010900050123017801C4F00F0099070001D7070F00D7F00F
500	 D3	PUSH1	F0	 	 
- stack 2: 0x470
- stack 1: 0x1B100FF00EA00FF010900050123017801C4F00F0099070001D7070F00D7F00F
- stack 0: 0xF0
501	 D5	SHR		 	 
- stack 1: 0x470
- stack 0: 0x1B1
502	 D6	JUMP		 	 
- stack 0: 0x470
503	 1B1	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x470
504	 1B2	PUSH4	f00ff000	 	 
- stack 1: 0x470
- stack 0: 0xF00FF000
505	 1B7	PUSH2	03A0	 	 
- stack 2: 0x470
- stack 1: 0xF00FF000
- stack 0: 0x3A0
506	 1BA	MSTORE		 	  ;; # store to x29
- stack 0: 0x470
507	 1BB	PUSH1	04	 	 
- stack 1: 0x470
- stack 0: 0x4
508	 1BD	ADD		 	 
- stack 0: 0x474
509	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x474
- stack 0: 0x474
510	 1BF	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xEA00FF010900050123017801C4F00F0099070001D7070F00D7F00F00EA000F
511	 1C0	PUSH1	F0	 	 
- stack 2: 0x474
- stack 1: 0xEA00FF010900050123017801C4F00F0099070001D7070F00D7F00F00EA000F
- stack 0: 0xF0
512	 1C2	SHR		 	 
- stack 1: 0x474
- stack 0: 0xEA
513	 1C3	JUMP		 	 
- stack 0: 0x474
514	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x474
515	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x474
- stack 0: 0x474
516	 EC	MLOAD		 	 
- stack 1: 0x474
- stack 0: 0xEA00FF010900050123017801C4F00F0099070001D7070F00D7F00F00EA000F
517	 ED	PUSH1	E0	 	 
- stack 2: 0x474
- stack 1: 0xEA00FF010900050123017801C4F00F0099070001D7070F00D7F00F00EA000F
- stack 0: 0xE0
518	 EF	SHR		 	 
- stack 1: 0x474
- stack 0: 0xEA00FF
519	 F0	PUSH2	FFFF	 	 
- stack 2: 0x474
- stack 1: 0xEA00FF
- stack 0: 0xFFFF
520	 F3	AND		 	 
- stack 1: 0x474
- stack 0: 0xFF
521	 F4	PUSH1	01	 	 
- stack 2: 0x474
- stack 1: 0xFF
- stack 0: 0x1
522	 F6	SIGNEXTEND		 	 
- stack 1: 0x474
- stack 0: 0xFF
523	 F7	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xFF
- stack 0: 0x3A0
524	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x474
- stack 1: 0xFF
- stack 0: 0xF00FF000
525	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x474
- stack 0: 0xF00FF0FF
526	 FC	PUSH2	03A0	 	 
- stack 2: 0x474
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
527	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x474
528	 100	PUSH1	04	 	 
- stack 1: 0x474
- stack 0: 0x4
529	 102	ADD		 	 
- stack 0: 0x478
530	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x478
- stack 0: 0x478
531	 104	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x10900050123017801C4F00F0099070001D7070F00D7F00F00EA000F01090006
532	 105	PUSH1	F0	 	 
- stack 2: 0x478
- stack 1: 0x10900050123017801C4F00F0099070001D7070F00D7F00F00EA000F01090006
- stack 0: 0xF0
533	 107	SHR		 	 
- stack 1: 0x478
- stack 0: 0x109
534	 108	JUMP		 	 
- stack 0: 0x478
535	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x478
536	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x478
- stack 0: 0x478
537	 10B	MLOAD		 	 
- stack 1: 0x478
- stack 0: 0x10900050123017801C4F00F0099070001D7070F00D7F00F00EA000F01090006
538	 10C	PUSH1	E0	 	 
- stack 2: 0x478
- stack 1: 0x10900050123017801C4F00F0099070001D7070F00D7F00F00EA000F01090006
- stack 0: 0xE0
539	 10E	SHR		 	 
- stack 1: 0x478
- stack 0: 0x1090005
540	 10F	PUSH2	FFFF	 	 
- stack 2: 0x478
- stack 1: 0x1090005
- stack 0: 0xFFFF
541	 112	AND		 	 
- stack 1: 0x478
- stack 0: 0x5
542	 113	PUSH1	01	 	 
- stack 2: 0x478
- stack 1: 0x5
- stack 0: 0x1
543	 115	SIGNEXTEND		 	 
- stack 1: 0x478
- stack 0: 0x5
544	 116	PUSH2	0380	 	 
- stack 2: 0x478
- stack 1: 0x5
- stack 0: 0x380
545	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x478
546	 11A	PUSH1	04	 	 
- stack 1: 0x478
- stack 0: 0x4
547	 11C	ADD		 	 
- stack 0: 0x47C
548	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x47C
- stack 0: 0x47C
549	 11E	MLOAD		 	 
- stack 1: 0x47C
- stack 0: 0x123017801C4F00F0099070001D7070F00D7F00F00EA000F0109000601F6015C
550	 11F	PUSH1	F0	 	 
- stack 2: 0x47C
- stack 1: 0x123017801C4F00F0099070001D7070F00D7F00F00EA000F0109000601F6015C
- stack 0: 0xF0
551	 121	SHR		 	 
- stack 1: 0x47C
- stack 0: 0x123
552	 122	JUMP		 	 
- stack 0: 0x47C
553	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x47C
554	 124	PUSH2	0060	 	 
- stack 1: 0x47C
- stack 0: 0x60
555	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x47C
- stack 0: 0xF00FF0FF
556	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
557	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x47C
- stack 0: 0xF00FF0FF
558	 12E	PUSH2	03A0	 	 
- stack 2: 0x47C
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
559	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x47C
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
560	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x47C
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
561	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x47C
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
562	 138	SUB		 	 
- stack 1: 0x47C
- stack 0: 0x0
563	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x47C
- stack 1: 0x0
- stack 0: 0x141
564	 13C	JUMPI		 	 
- stack 0: 0x47C
565	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x47C
- stack 0: 0x15B
566	 140	JUMP		 	 
- stack 0: 0x47C
567	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x47C
568	 15C	PUSH1	04	 	 
- stack 1: 0x47C
- stack 0: 0x4
569	 15E	ADD		 	 
- stack 0: 0x480
570	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x480
- stack 0: 0x480
571	 160	MLOAD		 	 
- stack 1: 0x480
- stack 0: 0x1C4F00F0099070001D7070F00D7F00F00EA000F0109000601F6015C02380000
572	 161	PUSH1	F0	 	 
- stack 2: 0x480
- stack 1: 0x1C4F00F0099070001D7070F00D7F00F00EA000F0109000601F6015C02380000
- stack 0: 0xF0
573	 163	SHR		 	 
- stack 1: 0x480
- stack 0: 0x1C4
574	 164	JUMP		 	 
- stack 0: 0x480
575	 1C4	JUMPDEST		 ;; __riscvimpl_LUI_ff00f0b7	  ;; # instr: lui ra,0xff00f(ignore imm)
- stack 0: 0x480
576	 1C5	PUSH4	ff00f000	 	 
- stack 1: 0x480
- stack 0: 0xFF00F000
577	 1CA	PUSH2	0020	 	 
- stack 2: 0x480
- stack 1: 0xFF00F000
- stack 0: 0x20
578	 1CD	MSTORE		 	  ;; # store to x1
- stack 0: 0x480
579	 1CE	PUSH1	04	 	 
- stack 1: 0x480
- stack 0: 0x4
580	 1D0	ADD		 	 
- stack 0: 0x484
581	 1D1	DUP1		 	  ;; # executing pc
- stack 1: 0x484
- stack 0: 0x484
582	 1D2	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x99070001D7070F00D7F00F00EA000F0109000601F6015C023800000165FF01
583	 1D3	PUSH1	F0	 	 
- stack 2: 0x484
- stack 1: 0x99070001D7070F00D7F00F00EA000F0109000601F6015C023800000165FF01
- stack 0: 0xF0
584	 1D5	SHR		 	 
- stack 1: 0x484
- stack 0: 0x99
585	 1D6	JUMP		 	 
- stack 0: 0x484
586	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x484
587	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x484
- stack 0: 0x484
588	 9B	MLOAD		 	 
- stack 1: 0x484
- stack 0: 0x99070001D7070F00D7F00F00EA000F0109000601F6015C023800000165FF01
589	 9C	PUSH1	E0	 	 
- stack 2: 0x484
- stack 1: 0x99070001D7070F00D7F00F00EA000F0109000601F6015C023800000165FF01
- stack 0: 0xE0
590	 9E	SHR		 	 
- stack 1: 0x484
- stack 0: 0x990700
591	 9F	PUSH2	FFFF	 	 
- stack 2: 0x484
- stack 1: 0x990700
- stack 0: 0xFFFF
592	 A2	AND		 	 
- stack 1: 0x484
- stack 0: 0x700
593	 A3	PUSH1	01	 	 
- stack 2: 0x484
- stack 1: 0x700
- stack 0: 0x1
594	 A5	SIGNEXTEND		 	 
- stack 1: 0x484
- stack 0: 0x700
595	 A6	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0x700
- stack 0: 0x20
596	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x484
- stack 1: 0x700
- stack 0: 0xFF00F000
597	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x484
- stack 0: 0xFF00F700
598	 AB	PUSH2	0020	 	 
- stack 2: 0x484
- stack 1: 0xFF00F700
- stack 0: 0x20
599	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x484
600	 AF	PUSH1	04	 	 
- stack 1: 0x484
- stack 0: 0x4
601	 B1	ADD		 	 
- stack 0: 0x488
602	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x488
- stack 0: 0x488
603	 B3	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1D7070F00D7F00F00EA000F0109000601F6015C023800000165FF010099FFF0
604	 B4	PUSH1	F0	 	 
- stack 2: 0x488
- stack 1: 0x1D7070F00D7F00F00EA000F0109000601F6015C023800000165FF010099FFF0
- stack 0: 0xF0
605	 B6	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1D7
606	 B7	JUMP		 	 
- stack 0: 0x488
607	 1D7	JUMPDEST		 ;; __riscvimpl_XORI_1_1_0	  ;; # instr: xori ra,ra,1807(ignore imm)
- stack 0: 0x488
608	 1D8	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x488
- stack 0: 0x488
609	 1D9	MLOAD		 	 
- stack 1: 0x488
- stack 0: 0x1D7070F00D7F00F00EA000F0109000601F6015C023800000165FF010099FFF0
610	 1DA	PUSH1	E0	 	 
- stack 2: 0x488
- stack 1: 0x1D7070F00D7F00F00EA000F0109000601F6015C023800000165FF010099FFF0
- stack 0: 0xE0
611	 1DC	SHR		 	 
- stack 1: 0x488
- stack 0: 0x1D7070F
612	 1DD	PUSH2	FFFF	 	 
- stack 2: 0x488
- stack 1: 0x1D7070F
- stack 0: 0xFFFF
613	 1E0	AND		 	 
- stack 1: 0x488
- stack 0: 0x70F
614	 1E1	PUSH1	01	 	 
- stack 2: 0x488
- stack 1: 0x70F
- stack 0: 0x1
615	 1E3	SIGNEXTEND		 	 
- stack 1: 0x488
- stack 0: 0x70F
616	 1E4	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0x70F
- stack 0: 0x20
617	 1E7	MLOAD		 	  ;; # read from x1
- stack 2: 0x488
- stack 1: 0x70F
- stack 0: 0xFF00F700
618	 1E8	XOR		 	  ;; # XORI
- stack 1: 0x488
- stack 0: 0xFF00F00F
619	 1E9	PUSH2	0020	 	 
- stack 2: 0x488
- stack 1: 0xFF00F00F
- stack 0: 0x20
620	 1EC	MSTORE		 	  ;; # store to x1
- stack 0: 0x488
621	 1ED	PUSH1	04	 	 
- stack 1: 0x488
- stack 0: 0x4
622	 1EF	ADD		 	 
- stack 0: 0x48C
623	 1F0	DUP1		 	  ;; # executing pc
- stack 1: 0x48C
- stack 0: 0x48C
624	 1F1	MLOAD		 	 
- stack 1: 0x48C
- stack 0: 0xD7F00F00EA000F0109000601F6015C023800000165FF010099FFF000B800F0
625	 1F2	PUSH1	F0	 	 
- stack 2: 0x48C
- stack 1: 0xD7F00F00EA000F0109000601F6015C023800000165FF010099FFF000B800F0
- stack 0: 0xF0
626	 1F4	SHR		 	 
- stack 1: 0x48C
- stack 0: 0xD7
627	 1F5	JUMP		 	 
- stack 0: 0x48C
628	 D7	JUMPDEST		 ;; __riscvimpl_LUI_ff00feb7	  ;; # instr: lui t4,0xff00f(ignore imm)
- stack 0: 0x48C
629	 D8	PUSH4	ff00f000	 	 
- stack 1: 0x48C
- stack 0: 0xFF00F000
630	 DD	PUSH2	03A0	 	 
- stack 2: 0x48C
- stack 1: 0xFF00F000
- stack 0: 0x3A0
631	 E0	MSTORE		 	  ;; # store to x29
- stack 0: 0x48C
632	 E1	PUSH1	04	 	 
- stack 1: 0x48C
- stack 0: 0x4
633	 E3	ADD		 	 
- stack 0: 0x490
634	 E4	DUP1		 	  ;; # executing pc
- stack 1: 0x490
- stack 0: 0x490
635	 E5	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xEA000F0109000601F6015C023800000165FF010099FFF000B800F002520000
636	 E6	PUSH1	F0	 	 
- stack 2: 0x490
- stack 1: 0xEA000F0109000601F6015C023800000165FF010099FFF000B800F002520000
- stack 0: 0xF0
637	 E8	SHR		 	 
- stack 1: 0x490
- stack 0: 0xEA
638	 E9	JUMP		 	 
- stack 0: 0x490
639	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x490
640	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x490
- stack 0: 0x490
641	 EC	MLOAD		 	 
- stack 1: 0x490
- stack 0: 0xEA000F0109000601F6015C023800000165FF010099FFF000B800F002520000
642	 ED	PUSH1	E0	 	 
- stack 2: 0x490
- stack 1: 0xEA000F0109000601F6015C023800000165FF010099FFF000B800F002520000
- stack 0: 0xE0
643	 EF	SHR		 	 
- stack 1: 0x490
- stack 0: 0xEA000F
644	 F0	PUSH2	FFFF	 	 
- stack 2: 0x490
- stack 1: 0xEA000F
- stack 0: 0xFFFF
645	 F3	AND		 	 
- stack 1: 0x490
- stack 0: 0xF
646	 F4	PUSH1	01	 	 
- stack 2: 0x490
- stack 1: 0xF
- stack 0: 0x1
647	 F6	SIGNEXTEND		 	 
- stack 1: 0x490
- stack 0: 0xF
648	 F7	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xF
- stack 0: 0x3A0
649	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x490
- stack 1: 0xF
- stack 0: 0xFF00F000
650	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x490
- stack 0: 0xFF00F00F
651	 FC	PUSH2	03A0	 	 
- stack 2: 0x490
- stack 1: 0xFF00F00F
- stack 0: 0x3A0
652	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x490
653	 100	PUSH1	04	 	 
- stack 1: 0x490
- stack 0: 0x4
654	 102	ADD		 	 
- stack 0: 0x494
655	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x494
- stack 0: 0x494
656	 104	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x109000601F6015C023800000165FF010099FFF000B800F00252000002710001
657	 105	PUSH1	F0	 	 
- stack 2: 0x494
- stack 1: 0x109000601F6015C023800000165FF010099FFF000B800F00252000002710001
- stack 0: 0xF0
658	 107	SHR		 	 
- stack 1: 0x494
- stack 0: 0x109
659	 108	JUMP		 	 
- stack 0: 0x494
660	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x494
661	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x494
- stack 0: 0x494
662	 10B	MLOAD		 	 
- stack 1: 0x494
- stack 0: 0x109000601F6015C023800000165FF010099FFF000B800F00252000002710001
663	 10C	PUSH1	E0	 	 
- stack 2: 0x494
- stack 1: 0x109000601F6015C023800000165FF010099FFF000B800F00252000002710001
- stack 0: 0xE0
664	 10E	SHR		 	 
- stack 1: 0x494
- stack 0: 0x1090006
665	 10F	PUSH2	FFFF	 	 
- stack 2: 0x494
- stack 1: 0x1090006
- stack 0: 0xFFFF
666	 112	AND		 	 
- stack 1: 0x494
- stack 0: 0x6
667	 113	PUSH1	01	 	 
- stack 2: 0x494
- stack 1: 0x6
- stack 0: 0x1
668	 115	SIGNEXTEND		 	 
- stack 1: 0x494
- stack 0: 0x6
669	 116	PUSH2	0380	 	 
- stack 2: 0x494
- stack 1: 0x6
- stack 0: 0x380
670	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x494
671	 11A	PUSH1	04	 	 
- stack 1: 0x494
- stack 0: 0x4
672	 11C	ADD		 	 
- stack 0: 0x498
673	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x498
- stack 0: 0x498
674	 11E	MLOAD		 	 
- stack 1: 0x498
- stack 0: 0x1F6015C023800000165FF010099FFF000B800F0025200000271000102900002
675	 11F	PUSH1	F0	 	 
- stack 2: 0x498
- stack 1: 0x1F6015C023800000165FF010099FFF000B800F0025200000271000102900002
- stack 0: 0xF0
676	 121	SHR		 	 
- stack 1: 0x498
- stack 0: 0x1F6
677	 122	JUMP		 	 
- stack 0: 0x498
678	 1F6	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,15c(ignore imm)
- stack 0: 0x498
679	 1F7	PUSH2	0020	 	 
- stack 1: 0x498
- stack 0: 0x20
680	 1FA	MLOAD		 	  ;; # read from x1
- stack 1: 0x498
- stack 0: 0xFF00F00F
681	 1FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x498
- stack 1: 0xFF00F00F
- stack 0: 0xFFFFFFFF
682	 200	AND		 	  ;; # mask to 32 bits
- stack 1: 0x498
- stack 0: 0xFF00F00F
683	 201	PUSH2	03A0	 	 
- stack 2: 0x498
- stack 1: 0xFF00F00F
- stack 0: 0x3A0
684	 204	MLOAD		 	  ;; # read from x29
- stack 2: 0x498
- stack 1: 0xFF00F00F
- stack 0: 0xFF00F00F
685	 205	PUSH4	FFFFFFFF	 	 
- stack 3: 0x498
- stack 2: 0xFF00F00F
- stack 1: 0xFF00F00F
- stack 0: 0xFFFFFFFF
686	 20A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x498
- stack 1: 0xFF00F00F
- stack 0: 0xFF00F00F
687	 20B	SUB		 	 
- stack 1: 0x498
- stack 0: 0x0
688	 20C	PUSH2	0214	 ;; _neq_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 2: 0x498
- stack 1: 0x0
- stack 0: 0x214
689	 20F	JUMPI		 	 
- stack 0: 0x498
690	 210	PUSH2	022E	 ;; _neq_after_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 1: 0x498
- stack 0: 0x22E
691	 213	JUMP		 	 
- stack 0: 0x498
692	 22E	JUMPDEST		 ;; _neq_after_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 0: 0x498
693	 22F	PUSH1	04	 	 
- stack 1: 0x498
- stack 0: 0x4
694	 231	ADD		 	 
- stack 0: 0x49C
695	 232	DUP1		 	  ;; # executing pc
- stack 1: 0x49C
- stack 0: 0x49C
696	 233	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23800000165FF010099FFF000B800F002520000027100010290000202AAFFE8
697	 234	PUSH1	F0	 	 
- stack 2: 0x49C
- stack 1: 0x23800000165FF010099FFF000B800F002520000027100010290000202AAFFE8
- stack 0: 0xF0
698	 236	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x238
699	 237	JUMP		 	 
- stack 0: 0x49C
700	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x49C
701	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x49C
- stack 0: 0x49C
702	 23A	MLOAD		 	 
- stack 1: 0x49C
- stack 0: 0x23800000165FF010099FFF000B800F002520000027100010290000202AAFFE8
703	 23B	PUSH1	E0	 	 
- stack 2: 0x49C
- stack 1: 0x23800000165FF010099FFF000B800F002520000027100010290000202AAFFE8
- stack 0: 0xE0
704	 23D	SHR		 	 
- stack 1: 0x49C
- stack 0: 0x2380000
705	 23E	PUSH2	FFFF	 	 
- stack 2: 0x49C
- stack 1: 0x2380000
- stack 0: 0xFFFF
706	 241	AND		 	 
- stack 1: 0x49C
- stack 0: 0x0
707	 242	PUSH1	01	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x1
708	 244	SIGNEXTEND		 	 
- stack 1: 0x49C
- stack 0: 0x0
709	 245	PUSH2	0080	 	 
- stack 2: 0x49C
- stack 1: 0x0
- stack 0: 0x80
710	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x49C
711	 249	PUSH1	04	 	 
- stack 1: 0x49C
- stack 0: 0x4
712	 24B	ADD		 	 
- stack 0: 0x4A0
713	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
714	 24D	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x165FF010099FFF000B800F002520000027100010290000202AAFFE80178FF01
715	 24E	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x165FF010099FFF000B800F002520000027100010290000202AAFFE80178FF01
- stack 0: 0xF0
716	 250	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x165
717	 251	JUMP		 	 
- stack 0: 0x4A0
718	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x4A0
719	 166	PUSH4	0ff01000	 	 
- stack 1: 0x4A0
- stack 0: 0xFF01000
720	 16B	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF01000
- stack 0: 0x20
721	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
722	 16F	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
723	 171	ADD		 	 
- stack 0: 0x4A4
724	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
725	 173	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
726	 174	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
- stack 0: 0xF0
727	 176	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99
728	 177	JUMP		 	 
- stack 0: 0x4A4
729	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A4
730	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
731	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
732	 9C	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
- stack 0: 0xE0
733	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF0
734	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
735	 A2	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFF0
736	 A3	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFF0
- stack 0: 0x1
737	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
738	 A6	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
739	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
740	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0xFF00FF0
741	 AB	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF0
- stack 0: 0x20
742	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
743	 AF	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
744	 B1	ADD		 	 
- stack 0: 0x4A8
745	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
746	 B3	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
747	 B4	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
- stack 0: 0xF0
748	 B6	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB8
749	 B7	JUMP		 	 
- stack 0: 0x4A8
750	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x4A8
751	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
752	 BA	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
753	 BB	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
- stack 0: 0xE0
754	 BD	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F0
755	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F0
- stack 0: 0xFFFF
756	 C1	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
757	 C2	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x1
758	 C4	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
759	 C5	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x20
760	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0xFF00FF0
761	 C9	XOR		 	  ;; # XORI
- stack 1: 0x4A8
- stack 0: 0xFF00F00
762	 CA	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0xFF00F00
- stack 0: 0x60
763	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
764	 CE	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
765	 D0	ADD		 	 
- stack 0: 0x4AC
766	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
767	 D2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
768	 D3	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
- stack 0: 0xF0
769	 D5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x252
770	 D6	JUMP		 	 
- stack 0: 0x4AC
771	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4AC
772	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
773	 254	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
774	 255	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
- stack 0: 0xE0
775	 257	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000
776	 258	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000
- stack 0: 0xFFFF
777	 25B	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x0
778	 25C	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x1
779	 25E	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x0
780	 25F	PUSH2	0060	 	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x60
781	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0xFF00F00
782	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x4AC
- stack 0: 0xFF00F00
783	 264	PUSH2	00C0	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00F00
- stack 0: 0xC0
784	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x4AC
785	 268	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
786	 26A	ADD		 	 
- stack 0: 0x4B0
787	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
788	 26C	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
789	 26D	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
- stack 0: 0xF0
790	 26F	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x271
791	 270	JUMP		 	 
- stack 0: 0x4B0
792	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4B0
793	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
794	 273	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
795	 274	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
- stack 0: 0xE0
796	 276	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2710001
797	 277	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x2710001
- stack 0: 0xFFFF
798	 27A	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
799	 27B	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x1
800	 27D	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
801	 27E	PUSH2	0080	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x80
802	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x0
803	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x4B0
- stack 0: 0x1
804	 283	PUSH2	0080	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x80
805	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x4B0
806	 287	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
807	 289	ADD		 	 
- stack 0: 0x4B4
808	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
809	 28B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
810	 28C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
- stack 0: 0xF0
811	 28E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x290
812	 28F	JUMP		 	 
- stack 0: 0x4B4
813	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4B4
814	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
815	 292	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
816	 293	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
- stack 0: 0xE0
817	 295	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2900002
818	 296	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x2900002
- stack 0: 0xFFFF
819	 299	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x2
820	 29A	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0x1
821	 29C	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x2
822	 29D	PUSH2	00A0	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0xA0
823	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x4B4
824	 2A1	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
825	 2A3	ADD		 	 
- stack 0: 0x4B8
826	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
827	 2A5	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
828	 2A6	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
- stack 0: 0xF0
829	 2A8	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2AA
830	 2A9	JUMP		 	 
- stack 0: 0x4B8
831	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4B8
832	 2AB	PUSH2	0080	 	 
- stack 1: 0x4B8
- stack 0: 0x80
833	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x4B8
- stack 0: 0x1
834	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
835	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x1
836	 2B5	PUSH2	00A0	 	 
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0xA0
837	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x2
838	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
839	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x2
840	 2BF	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x1
841	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x4B8
- stack 1: 0x1
- stack 0: 0x2C8
842	 2C3	JUMPI		 	 
- stack 0: 0x4B8
843	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x4B8
844	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B8
- stack 0: 0x4B8
845	 2CA	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
846	 2CB	PUSH1	E0	 	 
- stack 2: 0x4B8
- stack 1: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
- stack 0: 0xE0
847	 2CD	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2AAFFE8
848	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x2AAFFE8
- stack 0: 0xFFFF
849	 2D1	AND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFE8
850	 2D2	PUSH1	01	 	 
- stack 2: 0x4B8
- stack 1: 0xFFE8
- stack 0: 0x1
851	 2D4	SIGNEXTEND		 	 
- stack 1: 0x4B8
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
852	 2D5	ADD		 	 
- stack 0: 0x4A0
853	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4A0
- stack 0: 0xFFFFFFFF
854	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4A0
855	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x4A0
- stack 0: 0x4A0
856	 2DD	MLOAD		 	 
- stack 1: 0x4A0
- stack 0: 0x165FF010099FFF000B800F002520000027100010290000202AAFFE80178FF01
857	 2DE	PUSH1	F0	 	 
- stack 2: 0x4A0
- stack 1: 0x165FF010099FFF000B800F002520000027100010290000202AAFFE80178FF01
- stack 0: 0xF0
858	 2E0	SHR		 	 
- stack 1: 0x4A0
- stack 0: 0x165
859	 2E1	JUMP		 	 
- stack 0: 0x4A0
860	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x4A0
861	 166	PUSH4	0ff01000	 	 
- stack 1: 0x4A0
- stack 0: 0xFF01000
862	 16B	PUSH2	0020	 	 
- stack 2: 0x4A0
- stack 1: 0xFF01000
- stack 0: 0x20
863	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A0
864	 16F	PUSH1	04	 	 
- stack 1: 0x4A0
- stack 0: 0x4
865	 171	ADD		 	 
- stack 0: 0x4A4
866	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x4A4
- stack 0: 0x4A4
867	 173	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
868	 174	PUSH1	F0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
- stack 0: 0xF0
869	 176	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99
870	 177	JUMP		 	 
- stack 0: 0x4A4
871	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4A4
872	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A4
- stack 0: 0x4A4
873	 9B	MLOAD		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
874	 9C	PUSH1	E0	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF000B800F002520000027100010290000202AAFFE80178FF0100EAFF00
- stack 0: 0xE0
875	 9E	SHR		 	 
- stack 1: 0x4A4
- stack 0: 0x99FFF0
876	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4A4
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
877	 A2	AND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFF0
878	 A3	PUSH1	01	 	 
- stack 2: 0x4A4
- stack 1: 0xFFF0
- stack 0: 0x1
879	 A5	SIGNEXTEND		 	 
- stack 1: 0x4A4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
880	 A6	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
881	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
882	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4A4
- stack 0: 0xFF00FF0
883	 AB	PUSH2	0020	 	 
- stack 2: 0x4A4
- stack 1: 0xFF00FF0
- stack 0: 0x20
884	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4A4
885	 AF	PUSH1	04	 	 
- stack 1: 0x4A4
- stack 0: 0x4
886	 B1	ADD		 	 
- stack 0: 0x4A8
887	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4A8
- stack 0: 0x4A8
888	 B3	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
889	 B4	PUSH1	F0	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
- stack 0: 0xF0
890	 B6	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB8
891	 B7	JUMP		 	 
- stack 0: 0x4A8
892	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x4A8
893	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4A8
- stack 0: 0x4A8
894	 BA	MLOAD		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
895	 BB	PUSH1	E0	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F002520000027100010290000202AAFFE80178FF0100EAFF0001090007
- stack 0: 0xE0
896	 BD	SHR		 	 
- stack 1: 0x4A8
- stack 0: 0xB800F0
897	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4A8
- stack 1: 0xB800F0
- stack 0: 0xFFFF
898	 C1	AND		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
899	 C2	PUSH1	01	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x1
900	 C4	SIGNEXTEND		 	 
- stack 1: 0x4A8
- stack 0: 0xF0
901	 C5	PUSH2	0020	 	 
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0x20
902	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4A8
- stack 1: 0xF0
- stack 0: 0xFF00FF0
903	 C9	XOR		 	  ;; # XORI
- stack 1: 0x4A8
- stack 0: 0xFF00F00
904	 CA	PUSH2	0060	 	 
- stack 2: 0x4A8
- stack 1: 0xFF00F00
- stack 0: 0x60
905	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4A8
906	 CE	PUSH1	04	 	 
- stack 1: 0x4A8
- stack 0: 0x4
907	 D0	ADD		 	 
- stack 0: 0x4AC
908	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4AC
- stack 0: 0x4AC
909	 D2	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
910	 D3	PUSH1	F0	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
- stack 0: 0xF0
911	 D5	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x252
912	 D6	JUMP		 	 
- stack 0: 0x4AC
913	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4AC
914	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4AC
- stack 0: 0x4AC
915	 254	MLOAD		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
916	 255	PUSH1	E0	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000027100010290000202AAFFE80178FF0100EAFF000109000702EC012C
- stack 0: 0xE0
917	 257	SHR		 	 
- stack 1: 0x4AC
- stack 0: 0x2520000
918	 258	PUSH2	FFFF	 	 
- stack 2: 0x4AC
- stack 1: 0x2520000
- stack 0: 0xFFFF
919	 25B	AND		 	 
- stack 1: 0x4AC
- stack 0: 0x0
920	 25C	PUSH1	01	 	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x1
921	 25E	SIGNEXTEND		 	 
- stack 1: 0x4AC
- stack 0: 0x0
922	 25F	PUSH2	0060	 	 
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0x60
923	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x4AC
- stack 1: 0x0
- stack 0: 0xFF00F00
924	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x4AC
- stack 0: 0xFF00F00
925	 264	PUSH2	00C0	 	 
- stack 2: 0x4AC
- stack 1: 0xFF00F00
- stack 0: 0xC0
926	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x4AC
927	 268	PUSH1	04	 	 
- stack 1: 0x4AC
- stack 0: 0x4
928	 26A	ADD		 	 
- stack 0: 0x4B0
929	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4B0
- stack 0: 0x4B0
930	 26C	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
931	 26D	PUSH1	F0	 	 
- stack 2: 0x4B0
- stack 1: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
- stack 0: 0xF0
932	 26F	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x271
933	 270	JUMP		 	 
- stack 0: 0x4B0
934	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4B0
935	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B0
- stack 0: 0x4B0
936	 273	MLOAD		 	 
- stack 1: 0x4B0
- stack 0: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
937	 274	PUSH1	E0	 	 
- stack 2: 0x4B0
- stack 1: 0x27100010290000202AAFFE80178FF0100EAFF000109000702EC012C02380000
- stack 0: 0xE0
938	 276	SHR		 	 
- stack 1: 0x4B0
- stack 0: 0x2710001
939	 277	PUSH2	FFFF	 	 
- stack 2: 0x4B0
- stack 1: 0x2710001
- stack 0: 0xFFFF
940	 27A	AND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
941	 27B	PUSH1	01	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x1
942	 27D	SIGNEXTEND		 	 
- stack 1: 0x4B0
- stack 0: 0x1
943	 27E	PUSH2	0080	 	 
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x80
944	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x4B0
- stack 1: 0x1
- stack 0: 0x1
945	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x4B0
- stack 0: 0x2
946	 283	PUSH2	0080	 	 
- stack 2: 0x4B0
- stack 1: 0x2
- stack 0: 0x80
947	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x4B0
948	 287	PUSH1	04	 	 
- stack 1: 0x4B0
- stack 0: 0x4
949	 289	ADD		 	 
- stack 0: 0x4B4
950	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x4B4
- stack 0: 0x4B4
951	 28B	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
952	 28C	PUSH1	F0	 	 
- stack 2: 0x4B4
- stack 1: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
- stack 0: 0xF0
953	 28E	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x290
954	 28F	JUMP		 	 
- stack 0: 0x4B4
955	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4B4
956	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4B4
- stack 0: 0x4B4
957	 292	MLOAD		 	 
- stack 1: 0x4B4
- stack 0: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
958	 293	PUSH1	E0	 	 
- stack 2: 0x4B4
- stack 1: 0x290000202AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF1
- stack 0: 0xE0
959	 295	SHR		 	 
- stack 1: 0x4B4
- stack 0: 0x2900002
960	 296	PUSH2	FFFF	 	 
- stack 2: 0x4B4
- stack 1: 0x2900002
- stack 0: 0xFFFF
961	 299	AND		 	 
- stack 1: 0x4B4
- stack 0: 0x2
962	 29A	PUSH1	01	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0x1
963	 29C	SIGNEXTEND		 	 
- stack 1: 0x4B4
- stack 0: 0x2
964	 29D	PUSH2	00A0	 	 
- stack 2: 0x4B4
- stack 1: 0x2
- stack 0: 0xA0
965	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x4B4
966	 2A1	PUSH1	04	 	 
- stack 1: 0x4B4
- stack 0: 0x4
967	 2A3	ADD		 	 
- stack 0: 0x4B8
968	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4B8
- stack 0: 0x4B8
969	 2A5	MLOAD		 	 
- stack 1: 0x4B8
- stack 0: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
970	 2A6	PUSH1	F0	 	 
- stack 2: 0x4B8
- stack 1: 0x2AAFFE80178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF
- stack 0: 0xF0
971	 2A8	SHR		 	 
- stack 1: 0x4B8
- stack 0: 0x2AA
972	 2A9	JUMP		 	 
- stack 0: 0x4B8
973	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4B8
974	 2AB	PUSH2	0080	 	 
- stack 1: 0x4B8
- stack 0: 0x80
975	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x4B8
- stack 0: 0x2
976	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4B8
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
977	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4B8
- stack 0: 0x2
978	 2B5	PUSH2	00A0	 	 
- stack 2: 0x4B8
- stack 1: 0x2
- stack 0: 0xA0
979	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x4B8
- stack 1: 0x2
- stack 0: 0x2
980	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4B8
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
981	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4B8
- stack 1: 0x2
- stack 0: 0x2
982	 2BF	SUB		 	 
- stack 1: 0x4B8
- stack 0: 0x0
983	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x4B8
- stack 1: 0x0
- stack 0: 0x2C8
984	 2C3	JUMPI		 	 
- stack 0: 0x4B8
985	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x4B8
- stack 0: 0x2E2
986	 2C7	JUMP		 	 
- stack 0: 0x4B8
987	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x4B8
988	 2E3	PUSH1	04	 	 
- stack 1: 0x4B8
- stack 0: 0x4
989	 2E5	ADD		 	 
- stack 0: 0x4BC
990	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x4BC
- stack 0: 0x4BC
991	 2E7	MLOAD		 	 
- stack 1: 0x4BC
- stack 0: 0x178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF00B8070F
992	 2E8	PUSH1	F0	 	 
- stack 2: 0x4BC
- stack 1: 0x178FF0100EAFF000109000702EC012C0238000000860FF10099F8FF00B8070F
- stack 0: 0xF0
993	 2EA	SHR		 	 
- stack 1: 0x4BC
- stack 0: 0x178
994	 2EB	JUMP		 	 
- stack 0: 0x4BC
995	 178	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x4BC
996	 179	PUSH4	0ff01000	 	 
- stack 1: 0x4BC
- stack 0: 0xFF01000
997	 17E	PUSH2	03A0	 	 
- stack 2: 0x4BC
- stack 1: 0xFF01000
- stack 0: 0x3A0
998	 181	MSTORE		 	  ;; # store to x29
- stack 0: 0x4BC
999	 182	PUSH1	04	 	 
- stack 1: 0x4BC
- stack 0: 0x4
1000	 184	ADD		 	 
- stack 0: 0x4C0
1001	 185	DUP1		 	  ;; # executing pc
- stack 1: 0x4C0
- stack 0: 0x4C0
1002	 186	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xEAFF000109000702EC012C0238000000860FF10099F8FF00B8070F032E0000
1003	 187	PUSH1	F0	 	 
- stack 2: 0x4C0
- stack 1: 0xEAFF000109000702EC012C0238000000860FF10099F8FF00B8070F032E0000
- stack 0: 0xF0
1004	 189	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xEA
1005	 18A	JUMP		 	 
- stack 0: 0x4C0
1006	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x4C0
1007	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C0
- stack 0: 0x4C0
1008	 EC	MLOAD		 	 
- stack 1: 0x4C0
- stack 0: 0xEAFF000109000702EC012C0238000000860FF10099F8FF00B8070F032E0000
1009	 ED	PUSH1	E0	 	 
- stack 2: 0x4C0
- stack 1: 0xEAFF000109000702EC012C0238000000860FF10099F8FF00B8070F032E0000
- stack 0: 0xE0
1010	 EF	SHR		 	 
- stack 1: 0x4C0
- stack 0: 0xEAFF00
1011	 F0	PUSH2	FFFF	 	 
- stack 2: 0x4C0
- stack 1: 0xEAFF00
- stack 0: 0xFFFF
1012	 F3	AND		 	 
- stack 1: 0x4C0
- stack 0: 0xFF00
1013	 F4	PUSH1	01	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00
- stack 0: 0x1
1014	 F6	SIGNEXTEND		 	 
- stack 1: 0x4C0
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
1015	 F7	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
1016	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C0
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF01000
1017	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x4C0
- stack 0: 0xFF00F00
1018	 FC	PUSH2	03A0	 	 
- stack 2: 0x4C0
- stack 1: 0xFF00F00
- stack 0: 0x3A0
1019	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x4C0
1020	 100	PUSH1	04	 	 
- stack 1: 0x4C0
- stack 0: 0x4
1021	 102	ADD		 	 
- stack 0: 0x4C4
1022	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x4C4
- stack 0: 0x4C4
1023	 104	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x109000702EC012C0238000000860FF10099F8FF00B8070F032E000002520000
1024	 105	PUSH1	F0	 	 
- stack 2: 0x4C4
- stack 1: 0x109000702EC012C0238000000860FF10099F8FF00B8070F032E000002520000
- stack 0: 0xF0
1025	 107	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x109
1026	 108	JUMP		 	 
- stack 0: 0x4C4
1027	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4C4
1028	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4C4
- stack 0: 0x4C4
1029	 10B	MLOAD		 	 
- stack 1: 0x4C4
- stack 0: 0x109000702EC012C0238000000860FF10099F8FF00B8070F032E000002520000
1030	 10C	PUSH1	E0	 	 
- stack 2: 0x4C4
- stack 1: 0x109000702EC012C0238000000860FF10099F8FF00B8070F032E000002520000
- stack 0: 0xE0
1031	 10E	SHR		 	 
- stack 1: 0x4C4
- stack 0: 0x1090007
1032	 10F	PUSH2	FFFF	 	 
- stack 2: 0x4C4
- stack 1: 0x1090007
- stack 0: 0xFFFF
1033	 112	AND		 	 
- stack 1: 0x4C4
- stack 0: 0x7
1034	 113	PUSH1	01	 	 
- stack 2: 0x4C4
- stack 1: 0x7
- stack 0: 0x1
1035	 115	SIGNEXTEND		 	 
- stack 1: 0x4C4
- stack 0: 0x7
1036	 116	PUSH2	0380	 	 
- stack 2: 0x4C4
- stack 1: 0x7
- stack 0: 0x380
1037	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x4C4
1038	 11A	PUSH1	04	 	 
- stack 1: 0x4C4
- stack 0: 0x4
1039	 11C	ADD		 	 
- stack 0: 0x4C8
1040	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x4C8
- stack 0: 0x4C8
1041	 11E	MLOAD		 	 
- stack 1: 0x4C8
- stack 0: 0x2EC012C0238000000860FF10099F8FF00B8070F032E00000252000002710001
1042	 11F	PUSH1	F0	 	 
- stack 2: 0x4C8
- stack 1: 0x2EC012C0238000000860FF10099F8FF00B8070F032E00000252000002710001
- stack 0: 0xF0
1043	 121	SHR		 	 
- stack 1: 0x4C8
- stack 0: 0x2EC
1044	 122	JUMP		 	 
- stack 0: 0x4C8
1045	 2EC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,12c(ignore imm)
- stack 0: 0x4C8
1046	 2ED	PUSH2	00C0	 	 
- stack 1: 0x4C8
- stack 0: 0xC0
1047	 2F0	MLOAD		 	  ;; # read from x6
- stack 1: 0x4C8
- stack 0: 0xFF00F00
1048	 2F1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
1049	 2F6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4C8
- stack 0: 0xFF00F00
1050	 2F7	PUSH2	03A0	 	 
- stack 2: 0x4C8
- stack 1: 0xFF00F00
- stack 0: 0x3A0
1051	 2FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x4C8
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
1052	 2FB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4C8
- stack 2: 0xFF00F00
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
1053	 300	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4C8
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
1054	 301	SUB		 	 
- stack 1: 0x4C8
- stack 0: 0x0
1055	 302	PUSH2	030A	 ;; _neq_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 2: 0x4C8
- stack 1: 0x0
- stack 0: 0x30A
1056	 305	JUMPI		 	 
- stack 0: 0x4C8
1057	 306	PUSH2	0324	 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 1: 0x4C8
- stack 0: 0x324
1058	 309	JUMP		 	 
- stack 0: 0x4C8
1059	 324	JUMPDEST		 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 0: 0x4C8
1060	 325	PUSH1	04	 	 
- stack 1: 0x4C8
- stack 0: 0x4
1061	 327	ADD		 	 
- stack 0: 0x4CC
1062	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x4CC
- stack 0: 0x4CC
1063	 329	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x238000000860FF10099F8FF00B8070F032E0000025200000271000102900002
1064	 32A	PUSH1	F0	 	 
- stack 2: 0x4CC
- stack 1: 0x238000000860FF10099F8FF00B8070F032E0000025200000271000102900002
- stack 0: 0xF0
1065	 32C	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x238
1066	 32D	JUMP		 	 
- stack 0: 0x4CC
1067	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x4CC
1068	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4CC
- stack 0: 0x4CC
1069	 23A	MLOAD		 	 
- stack 1: 0x4CC
- stack 0: 0x238000000860FF10099F8FF00B8070F032E0000025200000271000102900002
1070	 23B	PUSH1	E0	 	 
- stack 2: 0x4CC
- stack 1: 0x238000000860FF10099F8FF00B8070F032E0000025200000271000102900002
- stack 0: 0xE0
1071	 23D	SHR		 	 
- stack 1: 0x4CC
- stack 0: 0x2380000
1072	 23E	PUSH2	FFFF	 	 
- stack 2: 0x4CC
- stack 1: 0x2380000
- stack 0: 0xFFFF
1073	 241	AND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1074	 242	PUSH1	01	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x1
1075	 244	SIGNEXTEND		 	 
- stack 1: 0x4CC
- stack 0: 0x0
1076	 245	PUSH2	0080	 	 
- stack 2: 0x4CC
- stack 1: 0x0
- stack 0: 0x80
1077	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x4CC
1078	 249	PUSH1	04	 	 
- stack 1: 0x4CC
- stack 0: 0x4
1079	 24B	ADD		 	 
- stack 0: 0x4D0
1080	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1081	 24D	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x860FF10099F8FF00B8070F032E000002520000027100010290000202AAFFE4
1082	 24E	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x860FF10099F8FF00B8070F032E000002520000027100010290000202AAFFE4
- stack 0: 0xF0
1083	 250	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
1084	 251	JUMP		 	 
- stack 0: 0x4D0
1085	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x4D0
1086	 87	PUSH4	00ff1000	 	 
- stack 1: 0x4D0
- stack 0: 0xFF1000
1087	 8C	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF1000
- stack 0: 0x20
1088	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1089	 90	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1090	 92	ADD		 	 
- stack 0: 0x4D4
1091	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1092	 94	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
1093	 95	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
- stack 0: 0xF0
1094	 97	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x99
1095	 98	JUMP		 	 
- stack 0: 0x4D4
1096	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4D4
1097	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1098	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
1099	 9C	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
- stack 0: 0xE0
1100	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF
1101	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF
- stack 0: 0xFFFF
1102	 A2	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xF8FF
1103	 A3	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xF8FF
- stack 0: 0x1
1104	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
1105	 A6	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0x20
1106	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0xFF1000
1107	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D4
- stack 0: 0xFF08FF
1108	 AB	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xFF08FF
- stack 0: 0x20
1109	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
1110	 AF	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1111	 B1	ADD		 	 
- stack 0: 0x4D8
1112	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1113	 B3	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
1114	 B4	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
- stack 0: 0xF0
1115	 B6	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xB8
1116	 B7	JUMP		 	 
- stack 0: 0x4D8
1117	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x4D8
1118	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1119	 BA	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
1120	 BB	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
- stack 0: 0xE0
1121	 BD	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F
1122	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1123	 C1	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x70F
1124	 C2	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0x1
1125	 C4	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x70F
1126	 C5	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0x20
1127	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0xFF08FF
1128	 C9	XOR		 	  ;; # XORI
- stack 1: 0x4D8
- stack 0: 0xFF0FF0
1129	 CA	PUSH2	0060	 	 
- stack 2: 0x4D8
- stack 1: 0xFF0FF0
- stack 0: 0x60
1130	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D8
1131	 CE	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1132	 D0	ADD		 	 
- stack 0: 0x4DC
1133	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1134	 D2	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
1135	 D3	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
- stack 0: 0xF0
1136	 D5	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x32E
1137	 D6	JUMP		 	 
- stack 0: 0x4DC
1138	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4DC
1139	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1140	 330	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
1141	 331	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
- stack 0: 0xE0
1142	 333	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x32E0000
1143	 334	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1144	 337	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1145	 338	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x1
1146	 33A	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1147	 33B	POP		 	 
- stack 0: 0x4DC
1148	 33C	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1149	 33E	ADD		 	 
- stack 0: 0x4E0
1150	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1151	 340	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
1152	 341	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
- stack 0: 0xF0
1153	 343	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x252
1154	 344	JUMP		 	 
- stack 0: 0x4E0
1155	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4E0
1156	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1157	 254	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
1158	 255	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
- stack 0: 0xE0
1159	 257	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000
1160	 258	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000
- stack 0: 0xFFFF
1161	 25B	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1162	 25C	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x1
1163	 25E	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1164	 25F	PUSH2	0060	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x60
1165	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xFF0FF0
1166	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x4E0
- stack 0: 0xFF0FF0
1167	 264	PUSH2	00C0	 	 
- stack 2: 0x4E0
- stack 1: 0xFF0FF0
- stack 0: 0xC0
1168	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x4E0
1169	 268	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1170	 26A	ADD		 	 
- stack 0: 0x4E4
1171	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1172	 26C	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
1173	 26D	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
- stack 0: 0xF0
1174	 26F	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x271
1175	 270	JUMP		 	 
- stack 0: 0x4E4
1176	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4E4
1177	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1178	 273	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
1179	 274	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
- stack 0: 0xE0
1180	 276	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2710001
1181	 277	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x2710001
- stack 0: 0xFFFF
1182	 27A	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x1
1183	 27B	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x1
1184	 27D	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x1
1185	 27E	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x80
1186	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x0
1187	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x4E4
- stack 0: 0x1
1188	 283	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x80
1189	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E4
1190	 287	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1191	 289	ADD		 	 
- stack 0: 0x4E8
1192	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1193	 28B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
1194	 28C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
- stack 0: 0xF0
1195	 28E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x290
1196	 28F	JUMP		 	 
- stack 0: 0x4E8
1197	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4E8
1198	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1199	 292	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
1200	 293	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
- stack 0: 0xE0
1201	 295	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2900002
1202	 296	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x2900002
- stack 0: 0xFFFF
1203	 299	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x2
1204	 29A	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0x1
1205	 29C	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x2
1206	 29D	PUSH2	00A0	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0xA0
1207	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x4E8
1208	 2A1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1209	 2A3	ADD		 	 
- stack 0: 0x4EC
1210	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1211	 2A5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
1212	 2A6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
- stack 0: 0xF0
1213	 2A8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x2AA
1214	 2A9	JUMP		 	 
- stack 0: 0x4EC
1215	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4EC
1216	 2AB	PUSH2	0080	 	 
- stack 1: 0x4EC
- stack 0: 0x80
1217	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x4EC
- stack 0: 0x1
1218	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1219	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x1
1220	 2B5	PUSH2	00A0	 	 
- stack 2: 0x4EC
- stack 1: 0x1
- stack 0: 0xA0
1221	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x4EC
- stack 1: 0x1
- stack 0: 0x2
1222	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1223	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0x1
- stack 0: 0x2
1224	 2BF	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x1
1225	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x4EC
- stack 1: 0x1
- stack 0: 0x2C8
1226	 2C3	JUMPI		 	 
- stack 0: 0x4EC
1227	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x4EC
1228	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4EC
- stack 0: 0x4EC
1229	 2CA	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
1230	 2CB	PUSH1	E0	 	 
- stack 2: 0x4EC
- stack 1: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
- stack 0: 0xE0
1231	 2CD	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x2AAFFE4
1232	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x2AAFFE4
- stack 0: 0xFFFF
1233	 2D1	AND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFE4
1234	 2D2	PUSH1	01	 	 
- stack 2: 0x4EC
- stack 1: 0xFFE4
- stack 0: 0x1
1235	 2D4	SIGNEXTEND		 	 
- stack 1: 0x4EC
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
1236	 2D5	ADD		 	 
- stack 0: 0x4D0
1237	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x4D0
- stack 0: 0xFFFFFFFF
1238	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x4D0
1239	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x4D0
- stack 0: 0x4D0
1240	 2DD	MLOAD		 	 
- stack 1: 0x4D0
- stack 0: 0x860FF10099F8FF00B8070F032E000002520000027100010290000202AAFFE4
1241	 2DE	PUSH1	F0	 	 
- stack 2: 0x4D0
- stack 1: 0x860FF10099F8FF00B8070F032E000002520000027100010290000202AAFFE4
- stack 0: 0xF0
1242	 2E0	SHR		 	 
- stack 1: 0x4D0
- stack 0: 0x86
1243	 2E1	JUMP		 	 
- stack 0: 0x4D0
1244	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x4D0
1245	 87	PUSH4	00ff1000	 	 
- stack 1: 0x4D0
- stack 0: 0xFF1000
1246	 8C	PUSH2	0020	 	 
- stack 2: 0x4D0
- stack 1: 0xFF1000
- stack 0: 0x20
1247	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D0
1248	 90	PUSH1	04	 	 
- stack 1: 0x4D0
- stack 0: 0x4
1249	 92	ADD		 	 
- stack 0: 0x4D4
1250	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x4D4
- stack 0: 0x4D4
1251	 94	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
1252	 95	PUSH1	F0	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
- stack 0: 0xF0
1253	 97	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x99
1254	 98	JUMP		 	 
- stack 0: 0x4D4
1255	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x4D4
1256	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D4
- stack 0: 0x4D4
1257	 9B	MLOAD		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
1258	 9C	PUSH1	E0	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF00B8070F032E000002520000027100010290000202AAFFE4018B0FF1
- stack 0: 0xE0
1259	 9E	SHR		 	 
- stack 1: 0x4D4
- stack 0: 0x99F8FF
1260	 9F	PUSH2	FFFF	 	 
- stack 2: 0x4D4
- stack 1: 0x99F8FF
- stack 0: 0xFFFF
1261	 A2	AND		 	 
- stack 1: 0x4D4
- stack 0: 0xF8FF
1262	 A3	PUSH1	01	 	 
- stack 2: 0x4D4
- stack 1: 0xF8FF
- stack 0: 0x1
1263	 A5	SIGNEXTEND		 	 
- stack 1: 0x4D4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
1264	 A6	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0x20
1265	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FF
- stack 0: 0xFF1000
1266	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x4D4
- stack 0: 0xFF08FF
1267	 AB	PUSH2	0020	 	 
- stack 2: 0x4D4
- stack 1: 0xFF08FF
- stack 0: 0x20
1268	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x4D4
1269	 AF	PUSH1	04	 	 
- stack 1: 0x4D4
- stack 0: 0x4
1270	 B1	ADD		 	 
- stack 0: 0x4D8
1271	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x4D8
- stack 0: 0x4D8
1272	 B3	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
1273	 B4	PUSH1	F0	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
- stack 0: 0xF0
1274	 B6	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xB8
1275	 B7	JUMP		 	 
- stack 0: 0x4D8
1276	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x4D8
1277	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4D8
- stack 0: 0x4D8
1278	 BA	MLOAD		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
1279	 BB	PUSH1	E0	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F032E000002520000027100010290000202AAFFE4018B0FF100EAFFF0
- stack 0: 0xE0
1280	 BD	SHR		 	 
- stack 1: 0x4D8
- stack 0: 0xB8070F
1281	 BE	PUSH2	FFFF	 	 
- stack 2: 0x4D8
- stack 1: 0xB8070F
- stack 0: 0xFFFF
1282	 C1	AND		 	 
- stack 1: 0x4D8
- stack 0: 0x70F
1283	 C2	PUSH1	01	 	 
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0x1
1284	 C4	SIGNEXTEND		 	 
- stack 1: 0x4D8
- stack 0: 0x70F
1285	 C5	PUSH2	0020	 	 
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0x20
1286	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x4D8
- stack 1: 0x70F
- stack 0: 0xFF08FF
1287	 C9	XOR		 	  ;; # XORI
- stack 1: 0x4D8
- stack 0: 0xFF0FF0
1288	 CA	PUSH2	0060	 	 
- stack 2: 0x4D8
- stack 1: 0xFF0FF0
- stack 0: 0x60
1289	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x4D8
1290	 CE	PUSH1	04	 	 
- stack 1: 0x4D8
- stack 0: 0x4
1291	 D0	ADD		 	 
- stack 0: 0x4DC
1292	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x4DC
- stack 0: 0x4DC
1293	 D2	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
1294	 D3	PUSH1	F0	 	 
- stack 2: 0x4DC
- stack 1: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
- stack 0: 0xF0
1295	 D5	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x32E
1296	 D6	JUMP		 	 
- stack 0: 0x4DC
1297	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x4DC
1298	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4DC
- stack 0: 0x4DC
1299	 330	MLOAD		 	 
- stack 1: 0x4DC
- stack 0: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
1300	 331	PUSH1	E0	 	 
- stack 2: 0x4DC
- stack 1: 0x32E000002520000027100010290000202AAFFE4018B0FF100EAFFF001090008
- stack 0: 0xE0
1301	 333	SHR		 	 
- stack 1: 0x4DC
- stack 0: 0x32E0000
1302	 334	PUSH2	FFFF	 	 
- stack 2: 0x4DC
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1303	 337	AND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1304	 338	PUSH1	01	 	 
- stack 2: 0x4DC
- stack 1: 0x0
- stack 0: 0x1
1305	 33A	SIGNEXTEND		 	 
- stack 1: 0x4DC
- stack 0: 0x0
1306	 33B	POP		 	 
- stack 0: 0x4DC
1307	 33C	PUSH1	04	 	 
- stack 1: 0x4DC
- stack 0: 0x4
1308	 33E	ADD		 	 
- stack 0: 0x4E0
1309	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x4E0
- stack 0: 0x4E0
1310	 340	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
1311	 341	PUSH1	F0	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
- stack 0: 0xF0
1312	 343	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x252
1313	 344	JUMP		 	 
- stack 0: 0x4E0
1314	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x4E0
1315	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E0
- stack 0: 0x4E0
1316	 254	MLOAD		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
1317	 255	PUSH1	E0	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000027100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F8
- stack 0: 0xE0
1318	 257	SHR		 	 
- stack 1: 0x4E0
- stack 0: 0x2520000
1319	 258	PUSH2	FFFF	 	 
- stack 2: 0x4E0
- stack 1: 0x2520000
- stack 0: 0xFFFF
1320	 25B	AND		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1321	 25C	PUSH1	01	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x1
1322	 25E	SIGNEXTEND		 	 
- stack 1: 0x4E0
- stack 0: 0x0
1323	 25F	PUSH2	0060	 	 
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0x60
1324	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x4E0
- stack 1: 0x0
- stack 0: 0xFF0FF0
1325	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x4E0
- stack 0: 0xFF0FF0
1326	 264	PUSH2	00C0	 	 
- stack 2: 0x4E0
- stack 1: 0xFF0FF0
- stack 0: 0xC0
1327	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x4E0
1328	 268	PUSH1	04	 	 
- stack 1: 0x4E0
- stack 0: 0x4
1329	 26A	ADD		 	 
- stack 0: 0x4E4
1330	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x4E4
- stack 0: 0x4E4
1331	 26C	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
1332	 26D	PUSH1	F0	 	 
- stack 2: 0x4E4
- stack 1: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
- stack 0: 0xF0
1333	 26F	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x271
1334	 270	JUMP		 	 
- stack 0: 0x4E4
1335	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x4E4
1336	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E4
- stack 0: 0x4E4
1337	 273	MLOAD		 	 
- stack 1: 0x4E4
- stack 0: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
1338	 274	PUSH1	E0	 	 
- stack 2: 0x4E4
- stack 1: 0x27100010290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000
- stack 0: 0xE0
1339	 276	SHR		 	 
- stack 1: 0x4E4
- stack 0: 0x2710001
1340	 277	PUSH2	FFFF	 	 
- stack 2: 0x4E4
- stack 1: 0x2710001
- stack 0: 0xFFFF
1341	 27A	AND		 	 
- stack 1: 0x4E4
- stack 0: 0x1
1342	 27B	PUSH1	01	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x1
1343	 27D	SIGNEXTEND		 	 
- stack 1: 0x4E4
- stack 0: 0x1
1344	 27E	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x80
1345	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x4E4
- stack 1: 0x1
- stack 0: 0x1
1346	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x4E4
- stack 0: 0x2
1347	 283	PUSH2	0080	 	 
- stack 2: 0x4E4
- stack 1: 0x2
- stack 0: 0x80
1348	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x4E4
1349	 287	PUSH1	04	 	 
- stack 1: 0x4E4
- stack 0: 0x4
1350	 289	ADD		 	 
- stack 0: 0x4E8
1351	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x4E8
- stack 0: 0x4E8
1352	 28B	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
1353	 28C	PUSH1	F0	 	 
- stack 2: 0x4E8
- stack 1: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
- stack 0: 0xF0
1354	 28E	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x290
1355	 28F	JUMP		 	 
- stack 0: 0x4E8
1356	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x4E8
1357	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4E8
- stack 0: 0x4E8
1358	 292	MLOAD		 	 
- stack 1: 0x4E8
- stack 0: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
1359	 293	PUSH1	E0	 	 
- stack 2: 0x4E8
- stack 1: 0x290000202AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF
- stack 0: 0xE0
1360	 295	SHR		 	 
- stack 1: 0x4E8
- stack 0: 0x2900002
1361	 296	PUSH2	FFFF	 	 
- stack 2: 0x4E8
- stack 1: 0x2900002
- stack 0: 0xFFFF
1362	 299	AND		 	 
- stack 1: 0x4E8
- stack 0: 0x2
1363	 29A	PUSH1	01	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0x1
1364	 29C	SIGNEXTEND		 	 
- stack 1: 0x4E8
- stack 0: 0x2
1365	 29D	PUSH2	00A0	 	 
- stack 2: 0x4E8
- stack 1: 0x2
- stack 0: 0xA0
1366	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x4E8
1367	 2A1	PUSH1	04	 	 
- stack 1: 0x4E8
- stack 0: 0x4
1368	 2A3	ADD		 	 
- stack 0: 0x4EC
1369	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x4EC
- stack 0: 0x4EC
1370	 2A5	MLOAD		 	 
- stack 1: 0x4EC
- stack 0: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
1371	 2A6	PUSH1	F0	 	 
- stack 2: 0x4EC
- stack 1: 0x2AAFFE4018B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F
- stack 0: 0xF0
1372	 2A8	SHR		 	 
- stack 1: 0x4EC
- stack 0: 0x2AA
1373	 2A9	JUMP		 	 
- stack 0: 0x4EC
1374	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x4EC
1375	 2AB	PUSH2	0080	 	 
- stack 1: 0x4EC
- stack 0: 0x80
1376	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x4EC
- stack 0: 0x2
1377	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4EC
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1378	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4EC
- stack 0: 0x2
1379	 2B5	PUSH2	00A0	 	 
- stack 2: 0x4EC
- stack 1: 0x2
- stack 0: 0xA0
1380	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x4EC
- stack 1: 0x2
- stack 0: 0x2
1381	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4EC
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1382	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4EC
- stack 1: 0x2
- stack 0: 0x2
1383	 2BF	SUB		 	 
- stack 1: 0x4EC
- stack 0: 0x0
1384	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x4EC
- stack 1: 0x0
- stack 0: 0x2C8
1385	 2C3	JUMPI		 	 
- stack 0: 0x4EC
1386	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x4EC
- stack 0: 0x2E2
1387	 2C7	JUMP		 	 
- stack 0: 0x4EC
1388	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x4EC
1389	 2E3	PUSH1	04	 	 
- stack 1: 0x4EC
- stack 0: 0x4
1390	 2E5	ADD		 	 
- stack 0: 0x4F0
1391	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x4F0
- stack 0: 0x4F0
1392	 2E7	MLOAD		 	 
- stack 1: 0x4F0
- stack 0: 0x18B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F00B800F0
1393	 2E8	PUSH1	F0	 	 
- stack 2: 0x4F0
- stack 1: 0x18B0FF100EAFFF00109000802EC00F802380000019E00FF0099000F00B800F0
- stack 0: 0xF0
1394	 2EA	SHR		 	 
- stack 1: 0x4F0
- stack 0: 0x18B
1395	 2EB	JUMP		 	 
- stack 0: 0x4F0
1396	 18B	JUMPDEST		 ;; __riscvimpl_LUI_ff1eb7	  ;; # instr: lui t4,0xff1(ignore imm)
- stack 0: 0x4F0
1397	 18C	PUSH4	00ff1000	 	 
- stack 1: 0x4F0
- stack 0: 0xFF1000
1398	 191	PUSH2	03A0	 	 
- stack 2: 0x4F0
- stack 1: 0xFF1000
- stack 0: 0x3A0
1399	 194	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F0
1400	 195	PUSH1	04	 	 
- stack 1: 0x4F0
- stack 0: 0x4
1401	 197	ADD		 	 
- stack 0: 0x4F4
1402	 198	DUP1		 	  ;; # executing pc
- stack 1: 0x4F4
- stack 0: 0x4F4
1403	 199	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xEAFFF00109000802EC00F802380000019E00FF0099000F00B800F0032E0000
1404	 19A	PUSH1	F0	 	 
- stack 2: 0x4F4
- stack 1: 0xEAFFF00109000802EC00F802380000019E00FF0099000F00B800F0032E0000
- stack 0: 0xF0
1405	 19C	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xEA
1406	 19D	JUMP		 	 
- stack 0: 0x4F4
1407	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x4F4
1408	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F4
- stack 0: 0x4F4
1409	 EC	MLOAD		 	 
- stack 1: 0x4F4
- stack 0: 0xEAFFF00109000802EC00F802380000019E00FF0099000F00B800F0032E0000
1410	 ED	PUSH1	E0	 	 
- stack 2: 0x4F4
- stack 1: 0xEAFFF00109000802EC00F802380000019E00FF0099000F00B800F0032E0000
- stack 0: 0xE0
1411	 EF	SHR		 	 
- stack 1: 0x4F4
- stack 0: 0xEAFFF0
1412	 F0	PUSH2	FFFF	 	 
- stack 2: 0x4F4
- stack 1: 0xEAFFF0
- stack 0: 0xFFFF
1413	 F3	AND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFF0
1414	 F4	PUSH1	01	 	 
- stack 2: 0x4F4
- stack 1: 0xFFF0
- stack 0: 0x1
1415	 F6	SIGNEXTEND		 	 
- stack 1: 0x4F4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1416	 F7	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
1417	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x4F4
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF1000
1418	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x4F4
- stack 0: 0xFF0FF0
1419	 FC	PUSH2	03A0	 	 
- stack 2: 0x4F4
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
1420	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x4F4
1421	 100	PUSH1	04	 	 
- stack 1: 0x4F4
- stack 0: 0x4
1422	 102	ADD		 	 
- stack 0: 0x4F8
1423	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x4F8
- stack 0: 0x4F8
1424	 104	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x109000802EC00F802380000019E00FF0099000F00B800F0032E0000032E0000
1425	 105	PUSH1	F0	 	 
- stack 2: 0x4F8
- stack 1: 0x109000802EC00F802380000019E00FF0099000F00B800F0032E0000032E0000
- stack 0: 0xF0
1426	 107	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x109
1427	 108	JUMP		 	 
- stack 0: 0x4F8
1428	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x4F8
1429	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x4F8
- stack 0: 0x4F8
1430	 10B	MLOAD		 	 
- stack 1: 0x4F8
- stack 0: 0x109000802EC00F802380000019E00FF0099000F00B800F0032E0000032E0000
1431	 10C	PUSH1	E0	 	 
- stack 2: 0x4F8
- stack 1: 0x109000802EC00F802380000019E00FF0099000F00B800F0032E0000032E0000
- stack 0: 0xE0
1432	 10E	SHR		 	 
- stack 1: 0x4F8
- stack 0: 0x1090008
1433	 10F	PUSH2	FFFF	 	 
- stack 2: 0x4F8
- stack 1: 0x1090008
- stack 0: 0xFFFF
1434	 112	AND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1435	 113	PUSH1	01	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x1
1436	 115	SIGNEXTEND		 	 
- stack 1: 0x4F8
- stack 0: 0x8
1437	 116	PUSH2	0380	 	 
- stack 2: 0x4F8
- stack 1: 0x8
- stack 0: 0x380
1438	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x4F8
1439	 11A	PUSH1	04	 	 
- stack 1: 0x4F8
- stack 0: 0x4
1440	 11C	ADD		 	 
- stack 0: 0x4FC
1441	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x4FC
- stack 0: 0x4FC
1442	 11E	MLOAD		 	 
- stack 1: 0x4FC
- stack 0: 0x2EC00F802380000019E00FF0099000F00B800F0032E0000032E000002520000
1443	 11F	PUSH1	F0	 	 
- stack 2: 0x4FC
- stack 1: 0x2EC00F802380000019E00FF0099000F00B800F0032E0000032E000002520000
- stack 0: 0xF0
1444	 121	SHR		 	 
- stack 1: 0x4FC
- stack 0: 0x2EC
1445	 122	JUMP		 	 
- stack 0: 0x4FC
1446	 2EC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,12c(ignore imm)
- stack 0: 0x4FC
1447	 2ED	PUSH2	00C0	 	 
- stack 1: 0x4FC
- stack 0: 0xC0
1448	 2F0	MLOAD		 	  ;; # read from x6
- stack 1: 0x4FC
- stack 0: 0xFF0FF0
1449	 2F1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x4FC
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
1450	 2F6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x4FC
- stack 0: 0xFF0FF0
1451	 2F7	PUSH2	03A0	 	 
- stack 2: 0x4FC
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
1452	 2FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x4FC
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
1453	 2FB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x4FC
- stack 2: 0xFF0FF0
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
1454	 300	AND		 	  ;; # mask to 32 bits
- stack 2: 0x4FC
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
1455	 301	SUB		 	 
- stack 1: 0x4FC
- stack 0: 0x0
1456	 302	PUSH2	030A	 ;; _neq_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 2: 0x4FC
- stack 1: 0x0
- stack 0: 0x30A
1457	 305	JUMPI		 	 
- stack 0: 0x4FC
1458	 306	PUSH2	0324	 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 1: 0x4FC
- stack 0: 0x324
1459	 309	JUMP		 	 
- stack 0: 0x4FC
1460	 324	JUMPDEST		 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 0: 0x4FC
1461	 325	PUSH1	04	 	 
- stack 1: 0x4FC
- stack 0: 0x4
1462	 327	ADD		 	 
- stack 0: 0x500
1463	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x500
- stack 0: 0x500
1464	 329	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2380000019E00FF0099000F00B800F0032E0000032E00000252000002710001
1465	 32A	PUSH1	F0	 	 
- stack 2: 0x500
- stack 1: 0x2380000019E00FF0099000F00B800F0032E0000032E00000252000002710001
- stack 0: 0xF0
1466	 32C	SHR		 	 
- stack 1: 0x500
- stack 0: 0x238
1467	 32D	JUMP		 	 
- stack 0: 0x500
1468	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x500
1469	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x500
- stack 0: 0x500
1470	 23A	MLOAD		 	 
- stack 1: 0x500
- stack 0: 0x2380000019E00FF0099000F00B800F0032E0000032E00000252000002710001
1471	 23B	PUSH1	E0	 	 
- stack 2: 0x500
- stack 1: 0x2380000019E00FF0099000F00B800F0032E0000032E00000252000002710001
- stack 0: 0xE0
1472	 23D	SHR		 	 
- stack 1: 0x500
- stack 0: 0x2380000
1473	 23E	PUSH2	FFFF	 	 
- stack 2: 0x500
- stack 1: 0x2380000
- stack 0: 0xFFFF
1474	 241	AND		 	 
- stack 1: 0x500
- stack 0: 0x0
1475	 242	PUSH1	01	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x1
1476	 244	SIGNEXTEND		 	 
- stack 1: 0x500
- stack 0: 0x0
1477	 245	PUSH2	0080	 	 
- stack 2: 0x500
- stack 1: 0x0
- stack 0: 0x80
1478	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x500
1479	 249	PUSH1	04	 	 
- stack 1: 0x500
- stack 0: 0x4
1480	 24B	ADD		 	 
- stack 0: 0x504
1481	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1482	 24D	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x19E00FF0099000F00B800F0032E0000032E0000025200000271000102900002
1483	 24E	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x19E00FF0099000F00B800F0032E0000032E0000025200000271000102900002
- stack 0: 0xF0
1484	 250	SHR		 	 
- stack 1: 0x504
- stack 0: 0x19E
1485	 251	JUMP		 	 
- stack 0: 0x504
1486	 19E	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x504
1487	 19F	PUSH4	f00ff000	 	 
- stack 1: 0x504
- stack 0: 0xF00FF000
1488	 1A4	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF00FF000
- stack 0: 0x20
1489	 1A7	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1490	 1A8	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1491	 1AA	ADD		 	 
- stack 0: 0x508
1492	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1493	 1AC	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
1494	 1AD	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
- stack 0: 0xF0
1495	 1AF	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1496	 1B0	JUMP		 	 
- stack 0: 0x508
1497	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1498	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1499	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
1500	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
- stack 0: 0xE0
1501	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99000F
1502	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99000F
- stack 0: 0xFFFF
1503	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xF
1504	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0x1
1505	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xF
1506	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0x20
1507	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0xF00FF000
1508	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xF00FF00F
1509	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF00FF00F
- stack 0: 0x20
1510	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1511	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1512	 B1	ADD		 	 
- stack 0: 0x50C
1513	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1514	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
1515	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
- stack 0: 0xF0
1516	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1517	 B7	JUMP		 	 
- stack 0: 0x50C
1518	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x50C
1519	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1520	 BA	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
1521	 BB	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
- stack 0: 0xE0
1522	 BD	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0
1523	 BE	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1524	 C1	AND		 	 
- stack 1: 0x50C
- stack 0: 0xF0
1525	 C2	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0x1
1526	 C4	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xF0
1527	 C5	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0x20
1528	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0xF00FF00F
1529	 C9	XOR		 	  ;; # XORI
- stack 1: 0x50C
- stack 0: 0xF00FF0FF
1530	 CA	PUSH2	0060	 	 
- stack 2: 0x50C
- stack 1: 0xF00FF0FF
- stack 0: 0x60
1531	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x50C
1532	 CE	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1533	 D0	ADD		 	 
- stack 0: 0x510
1534	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1535	 D2	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
1536	 D3	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
- stack 0: 0xF0
1537	 D5	SHR		 	 
- stack 1: 0x510
- stack 0: 0x32E
1538	 D6	JUMP		 	 
- stack 0: 0x510
1539	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1540	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1541	 330	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
1542	 331	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
- stack 0: 0xE0
1543	 333	SHR		 	 
- stack 1: 0x510
- stack 0: 0x32E0000
1544	 334	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1545	 337	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1546	 338	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1547	 33A	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1548	 33B	POP		 	 
- stack 0: 0x510
1549	 33C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1550	 33E	ADD		 	 
- stack 0: 0x514
1551	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1552	 340	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
1553	 341	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
- stack 0: 0xF0
1554	 343	SHR		 	 
- stack 1: 0x514
- stack 0: 0x32E
1555	 344	JUMP		 	 
- stack 0: 0x514
1556	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x514
1557	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1558	 330	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
1559	 331	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
- stack 0: 0xE0
1560	 333	SHR		 	 
- stack 1: 0x514
- stack 0: 0x32E0000
1561	 334	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1562	 337	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1563	 338	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1564	 33A	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1565	 33B	POP		 	 
- stack 0: 0x514
1566	 33C	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1567	 33E	ADD		 	 
- stack 0: 0x518
1568	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1569	 340	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
1570	 341	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
- stack 0: 0xF0
1571	 343	SHR		 	 
- stack 1: 0x518
- stack 0: 0x252
1572	 344	JUMP		 	 
- stack 0: 0x518
1573	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1574	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1575	 254	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
1576	 255	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
- stack 0: 0xE0
1577	 257	SHR		 	 
- stack 1: 0x518
- stack 0: 0x2520000
1578	 258	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x2520000
- stack 0: 0xFFFF
1579	 25B	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1580	 25C	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1581	 25E	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1582	 25F	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1583	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF00FF0FF
1584	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF00FF0FF
1585	 264	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF00FF0FF
- stack 0: 0xC0
1586	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1587	 268	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1588	 26A	ADD		 	 
- stack 0: 0x51C
1589	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1590	 26C	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
1591	 26D	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
- stack 0: 0xF0
1592	 26F	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x271
1593	 270	JUMP		 	 
- stack 0: 0x51C
1594	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1595	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1596	 273	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
1597	 274	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
- stack 0: 0xE0
1598	 276	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2710001
1599	 277	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2710001
- stack 0: 0xFFFF
1600	 27A	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1601	 27B	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1602	 27D	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1603	 27E	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1604	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x0
1605	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x1
1606	 283	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1607	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1608	 287	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1609	 289	ADD		 	 
- stack 0: 0x520
1610	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1611	 28B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
1612	 28C	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
- stack 0: 0xF0
1613	 28E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x290
1614	 28F	JUMP		 	 
- stack 0: 0x520
1615	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1616	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1617	 292	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
1618	 293	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
- stack 0: 0xE0
1619	 295	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2900002
1620	 296	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x2900002
- stack 0: 0xFFFF
1621	 299	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1622	 29A	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1623	 29C	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1624	 29D	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1625	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1626	 2A1	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1627	 2A3	ADD		 	 
- stack 0: 0x524
1628	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1629	 2A5	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
1630	 2A6	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
- stack 0: 0xF0
1631	 2A8	SHR		 	 
- stack 1: 0x524
- stack 0: 0x2AA
1632	 2A9	JUMP		 	 
- stack 0: 0x524
1633	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x524
1634	 2AB	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1635	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x1
1636	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
1637	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x1
1638	 2B5	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0xA0
1639	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1640	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1641	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2
1642	 2BF	SUB		 	 
- stack 1: 0x524
- stack 0: 0x1
1643	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x524
- stack 1: 0x1
- stack 0: 0x2C8
1644	 2C3	JUMPI		 	 
- stack 0: 0x524
1645	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x524
1646	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x524
- stack 0: 0x524
1647	 2CA	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
1648	 2CB	PUSH1	E0	 	 
- stack 2: 0x524
- stack 1: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
- stack 0: 0xE0
1649	 2CD	SHR		 	 
- stack 1: 0x524
- stack 0: 0x2AAFFE0
1650	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x524
- stack 1: 0x2AAFFE0
- stack 0: 0xFFFF
1651	 2D1	AND		 	 
- stack 1: 0x524
- stack 0: 0xFFE0
1652	 2D2	PUSH1	01	 	 
- stack 2: 0x524
- stack 1: 0xFFE0
- stack 0: 0x1
1653	 2D4	SIGNEXTEND		 	 
- stack 1: 0x524
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
1654	 2D5	ADD		 	 
- stack 0: 0x504
1655	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x504
- stack 0: 0xFFFFFFFF
1656	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x504
1657	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x504
- stack 0: 0x504
1658	 2DD	MLOAD		 	 
- stack 1: 0x504
- stack 0: 0x19E00FF0099000F00B800F0032E0000032E0000025200000271000102900002
1659	 2DE	PUSH1	F0	 	 
- stack 2: 0x504
- stack 1: 0x19E00FF0099000F00B800F0032E0000032E0000025200000271000102900002
- stack 0: 0xF0
1660	 2E0	SHR		 	 
- stack 1: 0x504
- stack 0: 0x19E
1661	 2E1	JUMP		 	 
- stack 0: 0x504
1662	 19E	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x504
1663	 19F	PUSH4	f00ff000	 	 
- stack 1: 0x504
- stack 0: 0xF00FF000
1664	 1A4	PUSH2	0020	 	 
- stack 2: 0x504
- stack 1: 0xF00FF000
- stack 0: 0x20
1665	 1A7	MSTORE		 	  ;; # store to x1
- stack 0: 0x504
1666	 1A8	PUSH1	04	 	 
- stack 1: 0x504
- stack 0: 0x4
1667	 1AA	ADD		 	 
- stack 0: 0x508
1668	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x508
- stack 0: 0x508
1669	 1AC	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
1670	 1AD	PUSH1	F0	 	 
- stack 2: 0x508
- stack 1: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
- stack 0: 0xF0
1671	 1AF	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99
1672	 1B0	JUMP		 	 
- stack 0: 0x508
1673	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x508
1674	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x508
- stack 0: 0x508
1675	 9B	MLOAD		 	 
- stack 1: 0x508
- stack 0: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
1676	 9C	PUSH1	E0	 	 
- stack 2: 0x508
- stack 1: 0x99000F00B800F0032E0000032E000002520000027100010290000202AAFFE0
- stack 0: 0xE0
1677	 9E	SHR		 	 
- stack 1: 0x508
- stack 0: 0x99000F
1678	 9F	PUSH2	FFFF	 	 
- stack 2: 0x508
- stack 1: 0x99000F
- stack 0: 0xFFFF
1679	 A2	AND		 	 
- stack 1: 0x508
- stack 0: 0xF
1680	 A3	PUSH1	01	 	 
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0x1
1681	 A5	SIGNEXTEND		 	 
- stack 1: 0x508
- stack 0: 0xF
1682	 A6	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0x20
1683	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x508
- stack 1: 0xF
- stack 0: 0xF00FF000
1684	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x508
- stack 0: 0xF00FF00F
1685	 AB	PUSH2	0020	 	 
- stack 2: 0x508
- stack 1: 0xF00FF00F
- stack 0: 0x20
1686	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x508
1687	 AF	PUSH1	04	 	 
- stack 1: 0x508
- stack 0: 0x4
1688	 B1	ADD		 	 
- stack 0: 0x50C
1689	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x50C
- stack 0: 0x50C
1690	 B3	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
1691	 B4	PUSH1	F0	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
- stack 0: 0xF0
1692	 B6	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB8
1693	 B7	JUMP		 	 
- stack 0: 0x50C
1694	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x50C
1695	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x50C
- stack 0: 0x50C
1696	 BA	MLOAD		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
1697	 BB	PUSH1	E0	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0032E0000032E000002520000027100010290000202AAFFE001B100FF
- stack 0: 0xE0
1698	 BD	SHR		 	 
- stack 1: 0x50C
- stack 0: 0xB800F0
1699	 BE	PUSH2	FFFF	 	 
- stack 2: 0x50C
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1700	 C1	AND		 	 
- stack 1: 0x50C
- stack 0: 0xF0
1701	 C2	PUSH1	01	 	 
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0x1
1702	 C4	SIGNEXTEND		 	 
- stack 1: 0x50C
- stack 0: 0xF0
1703	 C5	PUSH2	0020	 	 
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0x20
1704	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x50C
- stack 1: 0xF0
- stack 0: 0xF00FF00F
1705	 C9	XOR		 	  ;; # XORI
- stack 1: 0x50C
- stack 0: 0xF00FF0FF
1706	 CA	PUSH2	0060	 	 
- stack 2: 0x50C
- stack 1: 0xF00FF0FF
- stack 0: 0x60
1707	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x50C
1708	 CE	PUSH1	04	 	 
- stack 1: 0x50C
- stack 0: 0x4
1709	 D0	ADD		 	 
- stack 0: 0x510
1710	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x510
- stack 0: 0x510
1711	 D2	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
1712	 D3	PUSH1	F0	 	 
- stack 2: 0x510
- stack 1: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
- stack 0: 0xF0
1713	 D5	SHR		 	 
- stack 1: 0x510
- stack 0: 0x32E
1714	 D6	JUMP		 	 
- stack 0: 0x510
1715	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x510
1716	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x510
- stack 0: 0x510
1717	 330	MLOAD		 	 
- stack 1: 0x510
- stack 0: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
1718	 331	PUSH1	E0	 	 
- stack 2: 0x510
- stack 1: 0x32E0000032E000002520000027100010290000202AAFFE001B100FF00EA00FF
- stack 0: 0xE0
1719	 333	SHR		 	 
- stack 1: 0x510
- stack 0: 0x32E0000
1720	 334	PUSH2	FFFF	 	 
- stack 2: 0x510
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1721	 337	AND		 	 
- stack 1: 0x510
- stack 0: 0x0
1722	 338	PUSH1	01	 	 
- stack 2: 0x510
- stack 1: 0x0
- stack 0: 0x1
1723	 33A	SIGNEXTEND		 	 
- stack 1: 0x510
- stack 0: 0x0
1724	 33B	POP		 	 
- stack 0: 0x510
1725	 33C	PUSH1	04	 	 
- stack 1: 0x510
- stack 0: 0x4
1726	 33E	ADD		 	 
- stack 0: 0x514
1727	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x514
- stack 0: 0x514
1728	 340	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
1729	 341	PUSH1	F0	 	 
- stack 2: 0x514
- stack 1: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
- stack 0: 0xF0
1730	 343	SHR		 	 
- stack 1: 0x514
- stack 0: 0x32E
1731	 344	JUMP		 	 
- stack 0: 0x514
1732	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x514
1733	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x514
- stack 0: 0x514
1734	 330	MLOAD		 	 
- stack 1: 0x514
- stack 0: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
1735	 331	PUSH1	E0	 	 
- stack 2: 0x514
- stack 1: 0x32E000002520000027100010290000202AAFFE001B100FF00EA00FF01090009
- stack 0: 0xE0
1736	 333	SHR		 	 
- stack 1: 0x514
- stack 0: 0x32E0000
1737	 334	PUSH2	FFFF	 	 
- stack 2: 0x514
- stack 1: 0x32E0000
- stack 0: 0xFFFF
1738	 337	AND		 	 
- stack 1: 0x514
- stack 0: 0x0
1739	 338	PUSH1	01	 	 
- stack 2: 0x514
- stack 1: 0x0
- stack 0: 0x1
1740	 33A	SIGNEXTEND		 	 
- stack 1: 0x514
- stack 0: 0x0
1741	 33B	POP		 	 
- stack 0: 0x514
1742	 33C	PUSH1	04	 	 
- stack 1: 0x514
- stack 0: 0x4
1743	 33E	ADD		 	 
- stack 0: 0x518
1744	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x518
- stack 0: 0x518
1745	 340	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
1746	 341	PUSH1	F0	 	 
- stack 2: 0x518
- stack 1: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
- stack 0: 0xF0
1747	 343	SHR		 	 
- stack 1: 0x518
- stack 0: 0x252
1748	 344	JUMP		 	 
- stack 0: 0x518
1749	 252	JUMPDEST		 ;; __riscvimpl_ADDI_6_3_0	  ;; # instr: addi t1,gp,0(ignore imm)
- stack 0: 0x518
1750	 253	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x518
- stack 0: 0x518
1751	 254	MLOAD		 	 
- stack 1: 0x518
- stack 0: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
1752	 255	PUSH1	E0	 	 
- stack 2: 0x518
- stack 1: 0x2520000027100010290000202AAFFE001B100FF00EA00FF0109000902EC00C0
- stack 0: 0xE0
1753	 257	SHR		 	 
- stack 1: 0x518
- stack 0: 0x2520000
1754	 258	PUSH2	FFFF	 	 
- stack 2: 0x518
- stack 1: 0x2520000
- stack 0: 0xFFFF
1755	 25B	AND		 	 
- stack 1: 0x518
- stack 0: 0x0
1756	 25C	PUSH1	01	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x1
1757	 25E	SIGNEXTEND		 	 
- stack 1: 0x518
- stack 0: 0x0
1758	 25F	PUSH2	0060	 	 
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0x60
1759	 262	MLOAD		 	  ;; # read from x3
- stack 2: 0x518
- stack 1: 0x0
- stack 0: 0xF00FF0FF
1760	 263	ADD		 	  ;; # ADDI 3
- stack 1: 0x518
- stack 0: 0xF00FF0FF
1761	 264	PUSH2	00C0	 	 
- stack 2: 0x518
- stack 1: 0xF00FF0FF
- stack 0: 0xC0
1762	 267	MSTORE		 	  ;; # store to x6
- stack 0: 0x518
1763	 268	PUSH1	04	 	 
- stack 1: 0x518
- stack 0: 0x4
1764	 26A	ADD		 	 
- stack 0: 0x51C
1765	 26B	DUP1		 	  ;; # executing pc
- stack 1: 0x51C
- stack 0: 0x51C
1766	 26C	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
1767	 26D	PUSH1	F0	 	 
- stack 2: 0x51C
- stack 1: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
- stack 0: 0xF0
1768	 26F	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x271
1769	 270	JUMP		 	 
- stack 0: 0x51C
1770	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x51C
1771	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x51C
- stack 0: 0x51C
1772	 273	MLOAD		 	 
- stack 1: 0x51C
- stack 0: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
1773	 274	PUSH1	E0	 	 
- stack 2: 0x51C
- stack 1: 0x27100010290000202AAFFE001B100FF00EA00FF0109000902EC00C002380000
- stack 0: 0xE0
1774	 276	SHR		 	 
- stack 1: 0x51C
- stack 0: 0x2710001
1775	 277	PUSH2	FFFF	 	 
- stack 2: 0x51C
- stack 1: 0x2710001
- stack 0: 0xFFFF
1776	 27A	AND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1777	 27B	PUSH1	01	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1778	 27D	SIGNEXTEND		 	 
- stack 1: 0x51C
- stack 0: 0x1
1779	 27E	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x80
1780	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x51C
- stack 1: 0x1
- stack 0: 0x1
1781	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x51C
- stack 0: 0x2
1782	 283	PUSH2	0080	 	 
- stack 2: 0x51C
- stack 1: 0x2
- stack 0: 0x80
1783	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x51C
1784	 287	PUSH1	04	 	 
- stack 1: 0x51C
- stack 0: 0x4
1785	 289	ADD		 	 
- stack 0: 0x520
1786	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x520
- stack 0: 0x520
1787	 28B	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
1788	 28C	PUSH1	F0	 	 
- stack 2: 0x520
- stack 1: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
- stack 0: 0xF0
1789	 28E	SHR		 	 
- stack 1: 0x520
- stack 0: 0x290
1790	 28F	JUMP		 	 
- stack 0: 0x520
1791	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x520
1792	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x520
- stack 0: 0x520
1793	 292	MLOAD		 	 
- stack 1: 0x520
- stack 0: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
1794	 293	PUSH1	E0	 	 
- stack 2: 0x520
- stack 1: 0x290000202AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF01
- stack 0: 0xE0
1795	 295	SHR		 	 
- stack 1: 0x520
- stack 0: 0x2900002
1796	 296	PUSH2	FFFF	 	 
- stack 2: 0x520
- stack 1: 0x2900002
- stack 0: 0xFFFF
1797	 299	AND		 	 
- stack 1: 0x520
- stack 0: 0x2
1798	 29A	PUSH1	01	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0x1
1799	 29C	SIGNEXTEND		 	 
- stack 1: 0x520
- stack 0: 0x2
1800	 29D	PUSH2	00A0	 	 
- stack 2: 0x520
- stack 1: 0x2
- stack 0: 0xA0
1801	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x520
1802	 2A1	PUSH1	04	 	 
- stack 1: 0x520
- stack 0: 0x4
1803	 2A3	ADD		 	 
- stack 0: 0x524
1804	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x524
- stack 0: 0x524
1805	 2A5	MLOAD		 	 
- stack 1: 0x524
- stack 0: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
1806	 2A6	PUSH1	F0	 	 
- stack 2: 0x524
- stack 1: 0x2AAFFE001B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF0
- stack 0: 0xF0
1807	 2A8	SHR		 	 
- stack 1: 0x524
- stack 0: 0x2AA
1808	 2A9	JUMP		 	 
- stack 0: 0x524
1809	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x524
1810	 2AB	PUSH2	0080	 	 
- stack 1: 0x524
- stack 0: 0x80
1811	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x524
- stack 0: 0x2
1812	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1813	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x524
- stack 0: 0x2
1814	 2B5	PUSH2	00A0	 	 
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0xA0
1815	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1816	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x524
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
1817	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x524
- stack 1: 0x2
- stack 0: 0x2
1818	 2BF	SUB		 	 
- stack 1: 0x524
- stack 0: 0x0
1819	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x524
- stack 1: 0x0
- stack 0: 0x2C8
1820	 2C3	JUMPI		 	 
- stack 0: 0x524
1821	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x524
- stack 0: 0x2E2
1822	 2C7	JUMP		 	 
- stack 0: 0x524
1823	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x524
1824	 2E3	PUSH1	04	 	 
- stack 1: 0x524
- stack 0: 0x4
1825	 2E5	ADD		 	 
- stack 0: 0x528
1826	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x528
- stack 0: 0x528
1827	 2E7	MLOAD		 	 
- stack 1: 0x528
- stack 0: 0x1B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF000B800F0
1828	 2E8	PUSH1	F0	 	 
- stack 2: 0x528
- stack 1: 0x1B100FF00EA00FF0109000902EC00C0023800000165FF010099FFF000B800F0
- stack 0: 0xF0
1829	 2EA	SHR		 	 
- stack 1: 0x528
- stack 0: 0x1B1
1830	 2EB	JUMP		 	 
- stack 0: 0x528
1831	 1B1	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x528
1832	 1B2	PUSH4	f00ff000	 	 
- stack 1: 0x528
- stack 0: 0xF00FF000
1833	 1B7	PUSH2	03A0	 	 
- stack 2: 0x528
- stack 1: 0xF00FF000
- stack 0: 0x3A0
1834	 1BA	MSTORE		 	  ;; # store to x29
- stack 0: 0x528
1835	 1BB	PUSH1	04	 	 
- stack 1: 0x528
- stack 0: 0x4
1836	 1BD	ADD		 	 
- stack 0: 0x52C
1837	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x52C
- stack 0: 0x52C
1838	 1BF	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xEA00FF0109000902EC00C0023800000165FF010099FFF000B800F002710001
1839	 1C0	PUSH1	F0	 	 
- stack 2: 0x52C
- stack 1: 0xEA00FF0109000902EC00C0023800000165FF010099FFF000B800F002710001
- stack 0: 0xF0
1840	 1C2	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xEA
1841	 1C3	JUMP		 	 
- stack 0: 0x52C
1842	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x52C
1843	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x52C
- stack 0: 0x52C
1844	 EC	MLOAD		 	 
- stack 1: 0x52C
- stack 0: 0xEA00FF0109000902EC00C0023800000165FF010099FFF000B800F002710001
1845	 ED	PUSH1	E0	 	 
- stack 2: 0x52C
- stack 1: 0xEA00FF0109000902EC00C0023800000165FF010099FFF000B800F002710001
- stack 0: 0xE0
1846	 EF	SHR		 	 
- stack 1: 0x52C
- stack 0: 0xEA00FF
1847	 F0	PUSH2	FFFF	 	 
- stack 2: 0x52C
- stack 1: 0xEA00FF
- stack 0: 0xFFFF
1848	 F3	AND		 	 
- stack 1: 0x52C
- stack 0: 0xFF
1849	 F4	PUSH1	01	 	 
- stack 2: 0x52C
- stack 1: 0xFF
- stack 0: 0x1
1850	 F6	SIGNEXTEND		 	 
- stack 1: 0x52C
- stack 0: 0xFF
1851	 F7	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xFF
- stack 0: 0x3A0
1852	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x52C
- stack 1: 0xFF
- stack 0: 0xF00FF000
1853	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x52C
- stack 0: 0xF00FF0FF
1854	 FC	PUSH2	03A0	 	 
- stack 2: 0x52C
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
1855	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x52C
1856	 100	PUSH1	04	 	 
- stack 1: 0x52C
- stack 0: 0x4
1857	 102	ADD		 	 
- stack 0: 0x530
1858	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x530
- stack 0: 0x530
1859	 104	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x109000902EC00C0023800000165FF010099FFF000B800F00271000102900002
1860	 105	PUSH1	F0	 	 
- stack 2: 0x530
- stack 1: 0x109000902EC00C0023800000165FF010099FFF000B800F00271000102900002
- stack 0: 0xF0
1861	 107	SHR		 	 
- stack 1: 0x530
- stack 0: 0x109
1862	 108	JUMP		 	 
- stack 0: 0x530
1863	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x530
1864	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x530
- stack 0: 0x530
1865	 10B	MLOAD		 	 
- stack 1: 0x530
- stack 0: 0x109000902EC00C0023800000165FF010099FFF000B800F00271000102900002
1866	 10C	PUSH1	E0	 	 
- stack 2: 0x530
- stack 1: 0x109000902EC00C0023800000165FF010099FFF000B800F00271000102900002
- stack 0: 0xE0
1867	 10E	SHR		 	 
- stack 1: 0x530
- stack 0: 0x1090009
1868	 10F	PUSH2	FFFF	 	 
- stack 2: 0x530
- stack 1: 0x1090009
- stack 0: 0xFFFF
1869	 112	AND		 	 
- stack 1: 0x530
- stack 0: 0x9
1870	 113	PUSH1	01	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x1
1871	 115	SIGNEXTEND		 	 
- stack 1: 0x530
- stack 0: 0x9
1872	 116	PUSH2	0380	 	 
- stack 2: 0x530
- stack 1: 0x9
- stack 0: 0x380
1873	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x530
1874	 11A	PUSH1	04	 	 
- stack 1: 0x530
- stack 0: 0x4
1875	 11C	ADD		 	 
- stack 0: 0x534
1876	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x534
- stack 0: 0x534
1877	 11E	MLOAD		 	 
- stack 1: 0x534
- stack 0: 0x2EC00C0023800000165FF010099FFF000B800F0027100010290000202AAFFEC
1878	 11F	PUSH1	F0	 	 
- stack 2: 0x534
- stack 1: 0x2EC00C0023800000165FF010099FFF000B800F0027100010290000202AAFFEC
- stack 0: 0xF0
1879	 121	SHR		 	 
- stack 1: 0x534
- stack 0: 0x2EC
1880	 122	JUMP		 	 
- stack 0: 0x534
1881	 2EC	JUMPDEST		 ;; __riscvimpl_BNE_0_6_29	  ;; # instr: bne t1,t4,12c(ignore imm)
- stack 0: 0x534
1882	 2ED	PUSH2	00C0	 	 
- stack 1: 0x534
- stack 0: 0xC0
1883	 2F0	MLOAD		 	  ;; # read from x6
- stack 1: 0x534
- stack 0: 0xF00FF0FF
1884	 2F1	PUSH4	FFFFFFFF	 	 
- stack 2: 0x534
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
1885	 2F6	AND		 	  ;; # mask to 32 bits
- stack 1: 0x534
- stack 0: 0xF00FF0FF
1886	 2F7	PUSH2	03A0	 	 
- stack 2: 0x534
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
1887	 2FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x534
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
1888	 2FB	PUSH4	FFFFFFFF	 	 
- stack 3: 0x534
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
1889	 300	AND		 	  ;; # mask to 32 bits
- stack 2: 0x534
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
1890	 301	SUB		 	 
- stack 1: 0x534
- stack 0: 0x0
1891	 302	PUSH2	030A	 ;; _neq_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 2: 0x534
- stack 1: 0x0
- stack 0: 0x30A
1892	 305	JUMPI		 	 
- stack 0: 0x534
1893	 306	PUSH2	0324	 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 1: 0x534
- stack 0: 0x324
1894	 309	JUMP		 	 
- stack 0: 0x534
1895	 324	JUMPDEST		 ;; _neq_after_51f639c88b1ed90e05b57164cbae0d9c5c45cc057c7b59a677d887a83fe2452d	 
- stack 0: 0x534
1896	 325	PUSH1	04	 	 
- stack 1: 0x534
- stack 0: 0x4
1897	 327	ADD		 	 
- stack 0: 0x538
1898	 328	DUP1		 	  ;; # executing pc
- stack 1: 0x538
- stack 0: 0x538
1899	 329	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x23800000165FF010099FFF000B800F0027100010290000202AAFFEC0178FF01
1900	 32A	PUSH1	F0	 	 
- stack 2: 0x538
- stack 1: 0x23800000165FF010099FFF000B800F0027100010290000202AAFFEC0178FF01
- stack 0: 0xF0
1901	 32C	SHR		 	 
- stack 1: 0x538
- stack 0: 0x238
1902	 32D	JUMP		 	 
- stack 0: 0x538
1903	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x538
1904	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x538
- stack 0: 0x538
1905	 23A	MLOAD		 	 
- stack 1: 0x538
- stack 0: 0x23800000165FF010099FFF000B800F0027100010290000202AAFFEC0178FF01
1906	 23B	PUSH1	E0	 	 
- stack 2: 0x538
- stack 1: 0x23800000165FF010099FFF000B800F0027100010290000202AAFFEC0178FF01
- stack 0: 0xE0
1907	 23D	SHR		 	 
- stack 1: 0x538
- stack 0: 0x2380000
1908	 23E	PUSH2	FFFF	 	 
- stack 2: 0x538
- stack 1: 0x2380000
- stack 0: 0xFFFF
1909	 241	AND		 	 
- stack 1: 0x538
- stack 0: 0x0
1910	 242	PUSH1	01	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x1
1911	 244	SIGNEXTEND		 	 
- stack 1: 0x538
- stack 0: 0x0
1912	 245	PUSH2	0080	 	 
- stack 2: 0x538
- stack 1: 0x0
- stack 0: 0x80
1913	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x538
1914	 249	PUSH1	04	 	 
- stack 1: 0x538
- stack 0: 0x4
1915	 24B	ADD		 	 
- stack 0: 0x53C
1916	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
1917	 24D	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x165FF010099FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF00
1918	 24E	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x165FF010099FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF00
- stack 0: 0xF0
1919	 250	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x165
1920	 251	JUMP		 	 
- stack 0: 0x53C
1921	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
1922	 166	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
1923	 16B	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
1924	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
1925	 16F	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
1926	 171	ADD		 	 
- stack 0: 0x540
1927	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
1928	 173	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
1929	 174	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
- stack 0: 0xF0
1930	 176	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
1931	 177	JUMP		 	 
- stack 0: 0x540
1932	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
1933	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
1934	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
1935	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
- stack 0: 0xE0
1936	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
1937	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
1938	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
1939	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
1940	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
1941	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
1942	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
1943	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
1944	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
1945	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
1946	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
1947	 B1	ADD		 	 
- stack 0: 0x544
1948	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
1949	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
1950	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
- stack 0: 0xF0
1951	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB8
1952	 B7	JUMP		 	 
- stack 0: 0x544
1953	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x544
1954	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
1955	 BA	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
1956	 BB	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
- stack 0: 0xE0
1957	 BD	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB800F0
1958	 BE	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0xB800F0
- stack 0: 0xFFFF
1959	 C1	AND		 	 
- stack 1: 0x544
- stack 0: 0xF0
1960	 C2	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0x1
1961	 C4	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xF0
1962	 C5	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0x20
1963	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0xFF00FF0
1964	 C9	XOR		 	  ;; # XORI
- stack 1: 0x544
- stack 0: 0xFF00F00
1965	 CA	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xFF00F00
- stack 0: 0x60
1966	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
1967	 CE	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
1968	 D0	ADD		 	 
- stack 0: 0x548
1969	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
1970	 D2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
1971	 D3	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
- stack 0: 0xF0
1972	 D5	SHR		 	 
- stack 1: 0x548
- stack 0: 0x271
1973	 D6	JUMP		 	 
- stack 0: 0x548
1974	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x548
1975	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
1976	 273	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
1977	 274	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
- stack 0: 0xE0
1978	 276	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2710001
1979	 277	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2710001
- stack 0: 0xFFFF
1980	 27A	AND		 	 
- stack 1: 0x548
- stack 0: 0x1
1981	 27B	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
1982	 27D	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x1
1983	 27E	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
1984	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x0
1985	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x548
- stack 0: 0x1
1986	 283	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
1987	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
1988	 287	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
1989	 289	ADD		 	 
- stack 0: 0x54C
1990	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
1991	 28B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
1992	 28C	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
- stack 0: 0xF0
1993	 28E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x290
1994	 28F	JUMP		 	 
- stack 0: 0x54C
1995	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x54C
1996	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
1997	 292	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
1998	 293	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
- stack 0: 0xE0
1999	 295	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x2900002
2000	 296	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x2900002
- stack 0: 0xFFFF
2001	 299	AND		 	 
- stack 1: 0x54C
- stack 0: 0x2
2002	 29A	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x1
2003	 29C	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x2
2004	 29D	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
2005	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x54C
2006	 2A1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2007	 2A3	ADD		 	 
- stack 0: 0x550
2008	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2009	 2A5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
2010	 2A6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
- stack 0: 0xF0
2011	 2A8	SHR		 	 
- stack 1: 0x550
- stack 0: 0x2AA
2012	 2A9	JUMP		 	 
- stack 0: 0x550
2013	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x550
2014	 2AB	PUSH2	0080	 	 
- stack 1: 0x550
- stack 0: 0x80
2015	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x550
- stack 0: 0x1
2016	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2017	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0x1
2018	 2B5	PUSH2	00A0	 	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0xA0
2019	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x2
2020	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2021	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x2
2022	 2BF	SUB		 	 
- stack 1: 0x550
- stack 0: 0x1
2023	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x550
- stack 1: 0x1
- stack 0: 0x2C8
2024	 2C3	JUMPI		 	 
- stack 0: 0x550
2025	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x550
2026	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x550
- stack 0: 0x550
2027	 2CA	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
2028	 2CB	PUSH1	E0	 	 
- stack 2: 0x550
- stack 1: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
- stack 0: 0xE0
2029	 2CD	SHR		 	 
- stack 1: 0x550
- stack 0: 0x2AAFFEC
2030	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x550
- stack 1: 0x2AAFFEC
- stack 0: 0xFFFF
2031	 2D1	AND		 	 
- stack 1: 0x550
- stack 0: 0xFFEC
2032	 2D2	PUSH1	01	 	 
- stack 2: 0x550
- stack 1: 0xFFEC
- stack 0: 0x1
2033	 2D4	SIGNEXTEND		 	 
- stack 1: 0x550
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC
2034	 2D5	ADD		 	 
- stack 0: 0x53C
2035	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x53C
- stack 0: 0xFFFFFFFF
2036	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x53C
2037	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x53C
- stack 0: 0x53C
2038	 2DD	MLOAD		 	 
- stack 1: 0x53C
- stack 0: 0x165FF010099FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF00
2039	 2DE	PUSH1	F0	 	 
- stack 2: 0x53C
- stack 1: 0x165FF010099FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF00
- stack 0: 0xF0
2040	 2E0	SHR		 	 
- stack 1: 0x53C
- stack 0: 0x165
2041	 2E1	JUMP		 	 
- stack 0: 0x53C
2042	 165	JUMPDEST		 ;; __riscvimpl_LUI_ff010b7	  ;; # instr: lui ra,0xff01(ignore imm)
- stack 0: 0x53C
2043	 166	PUSH4	0ff01000	 	 
- stack 1: 0x53C
- stack 0: 0xFF01000
2044	 16B	PUSH2	0020	 	 
- stack 2: 0x53C
- stack 1: 0xFF01000
- stack 0: 0x20
2045	 16E	MSTORE		 	  ;; # store to x1
- stack 0: 0x53C
2046	 16F	PUSH1	04	 	 
- stack 1: 0x53C
- stack 0: 0x4
2047	 171	ADD		 	 
- stack 0: 0x540
2048	 172	DUP1		 	  ;; # executing pc
- stack 1: 0x540
- stack 0: 0x540
2049	 173	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
2050	 174	PUSH1	F0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
- stack 0: 0xF0
2051	 176	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99
2052	 177	JUMP		 	 
- stack 0: 0x540
2053	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x540
2054	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x540
- stack 0: 0x540
2055	 9B	MLOAD		 	 
- stack 1: 0x540
- stack 0: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
2056	 9C	PUSH1	E0	 	 
- stack 2: 0x540
- stack 1: 0x99FFF000B800F0027100010290000202AAFFEC0178FF0100EAFF000109000A
- stack 0: 0xE0
2057	 9E	SHR		 	 
- stack 1: 0x540
- stack 0: 0x99FFF0
2058	 9F	PUSH2	FFFF	 	 
- stack 2: 0x540
- stack 1: 0x99FFF0
- stack 0: 0xFFFF
2059	 A2	AND		 	 
- stack 1: 0x540
- stack 0: 0xFFF0
2060	 A3	PUSH1	01	 	 
- stack 2: 0x540
- stack 1: 0xFFF0
- stack 0: 0x1
2061	 A5	SIGNEXTEND		 	 
- stack 1: 0x540
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2062	 A6	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x20
2063	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x540
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF01000
2064	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x540
- stack 0: 0xFF00FF0
2065	 AB	PUSH2	0020	 	 
- stack 2: 0x540
- stack 1: 0xFF00FF0
- stack 0: 0x20
2066	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x540
2067	 AF	PUSH1	04	 	 
- stack 1: 0x540
- stack 0: 0x4
2068	 B1	ADD		 	 
- stack 0: 0x544
2069	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x544
- stack 0: 0x544
2070	 B3	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
2071	 B4	PUSH1	F0	 	 
- stack 2: 0x544
- stack 1: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
- stack 0: 0xF0
2072	 B6	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB8
2073	 B7	JUMP		 	 
- stack 0: 0x544
2074	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x544
2075	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x544
- stack 0: 0x544
2076	 BA	MLOAD		 	 
- stack 1: 0x544
- stack 0: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
2077	 BB	PUSH1	E0	 	 
- stack 2: 0x544
- stack 1: 0xB800F0027100010290000202AAFFEC0178FF0100EAFF000109000A01230094
- stack 0: 0xE0
2078	 BD	SHR		 	 
- stack 1: 0x544
- stack 0: 0xB800F0
2079	 BE	PUSH2	FFFF	 	 
- stack 2: 0x544
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2080	 C1	AND		 	 
- stack 1: 0x544
- stack 0: 0xF0
2081	 C2	PUSH1	01	 	 
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0x1
2082	 C4	SIGNEXTEND		 	 
- stack 1: 0x544
- stack 0: 0xF0
2083	 C5	PUSH2	0020	 	 
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0x20
2084	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x544
- stack 1: 0xF0
- stack 0: 0xFF00FF0
2085	 C9	XOR		 	  ;; # XORI
- stack 1: 0x544
- stack 0: 0xFF00F00
2086	 CA	PUSH2	0060	 	 
- stack 2: 0x544
- stack 1: 0xFF00F00
- stack 0: 0x60
2087	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x544
2088	 CE	PUSH1	04	 	 
- stack 1: 0x544
- stack 0: 0x4
2089	 D0	ADD		 	 
- stack 0: 0x548
2090	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x548
- stack 0: 0x548
2091	 D2	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
2092	 D3	PUSH1	F0	 	 
- stack 2: 0x548
- stack 1: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
- stack 0: 0xF0
2093	 D5	SHR		 	 
- stack 1: 0x548
- stack 0: 0x271
2094	 D6	JUMP		 	 
- stack 0: 0x548
2095	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x548
2096	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x548
- stack 0: 0x548
2097	 273	MLOAD		 	 
- stack 1: 0x548
- stack 0: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
2098	 274	PUSH1	E0	 	 
- stack 2: 0x548
- stack 1: 0x27100010290000202AAFFEC0178FF0100EAFF000109000A0123009402380000
- stack 0: 0xE0
2099	 276	SHR		 	 
- stack 1: 0x548
- stack 0: 0x2710001
2100	 277	PUSH2	FFFF	 	 
- stack 2: 0x548
- stack 1: 0x2710001
- stack 0: 0xFFFF
2101	 27A	AND		 	 
- stack 1: 0x548
- stack 0: 0x1
2102	 27B	PUSH1	01	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
2103	 27D	SIGNEXTEND		 	 
- stack 1: 0x548
- stack 0: 0x1
2104	 27E	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x80
2105	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x548
- stack 1: 0x1
- stack 0: 0x1
2106	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x548
- stack 0: 0x2
2107	 283	PUSH2	0080	 	 
- stack 2: 0x548
- stack 1: 0x2
- stack 0: 0x80
2108	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x548
2109	 287	PUSH1	04	 	 
- stack 1: 0x548
- stack 0: 0x4
2110	 289	ADD		 	 
- stack 0: 0x54C
2111	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x54C
- stack 0: 0x54C
2112	 28B	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
2113	 28C	PUSH1	F0	 	 
- stack 2: 0x54C
- stack 1: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
- stack 0: 0xF0
2114	 28E	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x290
2115	 28F	JUMP		 	 
- stack 0: 0x54C
2116	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x54C
2117	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x54C
- stack 0: 0x54C
2118	 292	MLOAD		 	 
- stack 1: 0x54C
- stack 0: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
2119	 293	PUSH1	E0	 	 
- stack 2: 0x54C
- stack 1: 0x290000202AAFFEC0178FF0100EAFF000109000A012300940238000000860FF1
- stack 0: 0xE0
2120	 295	SHR		 	 
- stack 1: 0x54C
- stack 0: 0x2900002
2121	 296	PUSH2	FFFF	 	 
- stack 2: 0x54C
- stack 1: 0x2900002
- stack 0: 0xFFFF
2122	 299	AND		 	 
- stack 1: 0x54C
- stack 0: 0x2
2123	 29A	PUSH1	01	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0x1
2124	 29C	SIGNEXTEND		 	 
- stack 1: 0x54C
- stack 0: 0x2
2125	 29D	PUSH2	00A0	 	 
- stack 2: 0x54C
- stack 1: 0x2
- stack 0: 0xA0
2126	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x54C
2127	 2A1	PUSH1	04	 	 
- stack 1: 0x54C
- stack 0: 0x4
2128	 2A3	ADD		 	 
- stack 0: 0x550
2129	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x550
- stack 0: 0x550
2130	 2A5	MLOAD		 	 
- stack 1: 0x550
- stack 0: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
2131	 2A6	PUSH1	F0	 	 
- stack 2: 0x550
- stack 1: 0x2AAFFEC0178FF0100EAFF000109000A012300940238000000860FF10099FFFF
- stack 0: 0xF0
2132	 2A8	SHR		 	 
- stack 1: 0x550
- stack 0: 0x2AA
2133	 2A9	JUMP		 	 
- stack 0: 0x550
2134	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x550
2135	 2AB	PUSH2	0080	 	 
- stack 1: 0x550
- stack 0: 0x80
2136	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x550
- stack 0: 0x2
2137	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2138	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x550
- stack 0: 0x2
2139	 2B5	PUSH2	00A0	 	 
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0xA0
2140	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0x2
2141	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x550
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2142	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x550
- stack 1: 0x2
- stack 0: 0x2
2143	 2BF	SUB		 	 
- stack 1: 0x550
- stack 0: 0x0
2144	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x550
- stack 1: 0x0
- stack 0: 0x2C8
2145	 2C3	JUMPI		 	 
- stack 0: 0x550
2146	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x550
- stack 0: 0x2E2
2147	 2C7	JUMP		 	 
- stack 0: 0x550
2148	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x550
2149	 2E3	PUSH1	04	 	 
- stack 1: 0x550
- stack 0: 0x4
2150	 2E5	ADD		 	 
- stack 0: 0x554
2151	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x554
- stack 0: 0x554
2152	 2E7	MLOAD		 	 
- stack 1: 0x554
- stack 0: 0x178FF0100EAFF000109000A012300940238000000860FF10099FFFF032E0000
2153	 2E8	PUSH1	F0	 	 
- stack 2: 0x554
- stack 1: 0x178FF0100EAFF000109000A012300940238000000860FF10099FFFF032E0000
- stack 0: 0xF0
2154	 2EA	SHR		 	 
- stack 1: 0x554
- stack 0: 0x178
2155	 2EB	JUMP		 	 
- stack 0: 0x554
2156	 178	JUMPDEST		 ;; __riscvimpl_LUI_ff01eb7	  ;; # instr: lui t4,0xff01(ignore imm)
- stack 0: 0x554
2157	 179	PUSH4	0ff01000	 	 
- stack 1: 0x554
- stack 0: 0xFF01000
2158	 17E	PUSH2	03A0	 	 
- stack 2: 0x554
- stack 1: 0xFF01000
- stack 0: 0x3A0
2159	 181	MSTORE		 	  ;; # store to x29
- stack 0: 0x554
2160	 182	PUSH1	04	 	 
- stack 1: 0x554
- stack 0: 0x4
2161	 184	ADD		 	 
- stack 0: 0x558
2162	 185	DUP1		 	  ;; # executing pc
- stack 1: 0x558
- stack 0: 0x558
2163	 186	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xEAFF000109000A012300940238000000860FF10099FFFF032E000000B8000F
2164	 187	PUSH1	F0	 	 
- stack 2: 0x558
- stack 1: 0xEAFF000109000A012300940238000000860FF10099FFFF032E000000B8000F
- stack 0: 0xF0
2165	 189	SHR		 	 
- stack 1: 0x558
- stack 0: 0xEA
2166	 18A	JUMP		 	 
- stack 0: 0x558
2167	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x558
2168	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x558
- stack 0: 0x558
2169	 EC	MLOAD		 	 
- stack 1: 0x558
- stack 0: 0xEAFF000109000A012300940238000000860FF10099FFFF032E000000B8000F
2170	 ED	PUSH1	E0	 	 
- stack 2: 0x558
- stack 1: 0xEAFF000109000A012300940238000000860FF10099FFFF032E000000B8000F
- stack 0: 0xE0
2171	 EF	SHR		 	 
- stack 1: 0x558
- stack 0: 0xEAFF00
2172	 F0	PUSH2	FFFF	 	 
- stack 2: 0x558
- stack 1: 0xEAFF00
- stack 0: 0xFFFF
2173	 F3	AND		 	 
- stack 1: 0x558
- stack 0: 0xFF00
2174	 F4	PUSH1	01	 	 
- stack 2: 0x558
- stack 1: 0xFF00
- stack 0: 0x1
2175	 F6	SIGNEXTEND		 	 
- stack 1: 0x558
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
2176	 F7	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0x3A0
2177	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x558
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
- stack 0: 0xFF01000
2178	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x558
- stack 0: 0xFF00F00
2179	 FC	PUSH2	03A0	 	 
- stack 2: 0x558
- stack 1: 0xFF00F00
- stack 0: 0x3A0
2180	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x558
2181	 100	PUSH1	04	 	 
- stack 1: 0x558
- stack 0: 0x4
2182	 102	ADD		 	 
- stack 0: 0x55C
2183	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x55C
- stack 0: 0x55C
2184	 104	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x109000A012300940238000000860FF10099FFFF032E000000B8000F02710001
2185	 105	PUSH1	F0	 	 
- stack 2: 0x55C
- stack 1: 0x109000A012300940238000000860FF10099FFFF032E000000B8000F02710001
- stack 0: 0xF0
2186	 107	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x109
2187	 108	JUMP		 	 
- stack 0: 0x55C
2188	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x55C
2189	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x55C
- stack 0: 0x55C
2190	 10B	MLOAD		 	 
- stack 1: 0x55C
- stack 0: 0x109000A012300940238000000860FF10099FFFF032E000000B8000F02710001
2191	 10C	PUSH1	E0	 	 
- stack 2: 0x55C
- stack 1: 0x109000A012300940238000000860FF10099FFFF032E000000B8000F02710001
- stack 0: 0xE0
2192	 10E	SHR		 	 
- stack 1: 0x55C
- stack 0: 0x109000A
2193	 10F	PUSH2	FFFF	 	 
- stack 2: 0x55C
- stack 1: 0x109000A
- stack 0: 0xFFFF
2194	 112	AND		 	 
- stack 1: 0x55C
- stack 0: 0xA
2195	 113	PUSH1	01	 	 
- stack 2: 0x55C
- stack 1: 0xA
- stack 0: 0x1
2196	 115	SIGNEXTEND		 	 
- stack 1: 0x55C
- stack 0: 0xA
2197	 116	PUSH2	0380	 	 
- stack 2: 0x55C
- stack 1: 0xA
- stack 0: 0x380
2198	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x55C
2199	 11A	PUSH1	04	 	 
- stack 1: 0x55C
- stack 0: 0x4
2200	 11C	ADD		 	 
- stack 0: 0x560
2201	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x560
- stack 0: 0x560
2202	 11E	MLOAD		 	 
- stack 1: 0x560
- stack 0: 0x12300940238000000860FF10099FFFF032E000000B8000F0271000102900002
2203	 11F	PUSH1	F0	 	 
- stack 2: 0x560
- stack 1: 0x12300940238000000860FF10099FFFF032E000000B8000F0271000102900002
- stack 0: 0xF0
2204	 121	SHR		 	 
- stack 1: 0x560
- stack 0: 0x123
2205	 122	JUMP		 	 
- stack 0: 0x560
2206	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x560
2207	 124	PUSH2	0060	 	 
- stack 1: 0x560
- stack 0: 0x60
2208	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x560
- stack 0: 0xFF00F00
2209	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x560
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
2210	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x560
- stack 0: 0xFF00F00
2211	 12E	PUSH2	03A0	 	 
- stack 2: 0x560
- stack 1: 0xFF00F00
- stack 0: 0x3A0
2212	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x560
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
2213	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x560
- stack 2: 0xFF00F00
- stack 1: 0xFF00F00
- stack 0: 0xFFFFFFFF
2214	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x560
- stack 1: 0xFF00F00
- stack 0: 0xFF00F00
2215	 138	SUB		 	 
- stack 1: 0x560
- stack 0: 0x0
2216	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x560
- stack 1: 0x0
- stack 0: 0x141
2217	 13C	JUMPI		 	 
- stack 0: 0x560
2218	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x560
- stack 0: 0x15B
2219	 140	JUMP		 	 
- stack 0: 0x560
2220	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x560
2221	 15C	PUSH1	04	 	 
- stack 1: 0x560
- stack 0: 0x4
2222	 15E	ADD		 	 
- stack 0: 0x564
2223	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x564
- stack 0: 0x564
2224	 160	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x238000000860FF10099FFFF032E000000B8000F027100010290000202AAFFE8
2225	 161	PUSH1	F0	 	 
- stack 2: 0x564
- stack 1: 0x238000000860FF10099FFFF032E000000B8000F027100010290000202AAFFE8
- stack 0: 0xF0
2226	 163	SHR		 	 
- stack 1: 0x564
- stack 0: 0x238
2227	 164	JUMP		 	 
- stack 0: 0x564
2228	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x564
2229	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x564
- stack 0: 0x564
2230	 23A	MLOAD		 	 
- stack 1: 0x564
- stack 0: 0x238000000860FF10099FFFF032E000000B8000F027100010290000202AAFFE8
2231	 23B	PUSH1	E0	 	 
- stack 2: 0x564
- stack 1: 0x238000000860FF10099FFFF032E000000B8000F027100010290000202AAFFE8
- stack 0: 0xE0
2232	 23D	SHR		 	 
- stack 1: 0x564
- stack 0: 0x2380000
2233	 23E	PUSH2	FFFF	 	 
- stack 2: 0x564
- stack 1: 0x2380000
- stack 0: 0xFFFF
2234	 241	AND		 	 
- stack 1: 0x564
- stack 0: 0x0
2235	 242	PUSH1	01	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x1
2236	 244	SIGNEXTEND		 	 
- stack 1: 0x564
- stack 0: 0x0
2237	 245	PUSH2	0080	 	 
- stack 2: 0x564
- stack 1: 0x0
- stack 0: 0x80
2238	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x564
2239	 249	PUSH1	04	 	 
- stack 1: 0x564
- stack 0: 0x4
2240	 24B	ADD		 	 
- stack 0: 0x568
2241	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2242	 24D	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x860FF10099FFFF032E000000B8000F027100010290000202AAFFE8018B0FF1
2243	 24E	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x860FF10099FFFF032E000000B8000F027100010290000202AAFFE8018B0FF1
- stack 0: 0xF0
2244	 250	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86
2245	 251	JUMP		 	 
- stack 0: 0x568
2246	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x568
2247	 87	PUSH4	00ff1000	 	 
- stack 1: 0x568
- stack 0: 0xFF1000
2248	 8C	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF1000
- stack 0: 0x20
2249	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
2250	 90	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2251	 92	ADD		 	 
- stack 0: 0x56C
2252	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2253	 94	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
2254	 95	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
- stack 0: 0xF0
2255	 97	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x99
2256	 98	JUMP		 	 
- stack 0: 0x56C
2257	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x56C
2258	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2259	 9B	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
2260	 9C	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
- stack 0: 0xE0
2261	 9E	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF
2262	 9F	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF
- stack 0: 0xFFFF
2263	 A2	AND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFF
2264	 A3	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xFFFF
- stack 0: 0x1
2265	 A5	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2266	 A6	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2267	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFF1000
2268	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x56C
- stack 0: 0xFF0FFF
2269	 AB	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0xFF0FFF
- stack 0: 0x20
2270	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2271	 AF	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2272	 B1	ADD		 	 
- stack 0: 0x570
2273	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2274	 B3	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
2275	 B4	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
- stack 0: 0xF0
2276	 B6	SHR		 	 
- stack 1: 0x570
- stack 0: 0x32E
2277	 B7	JUMP		 	 
- stack 0: 0x570
2278	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x570
2279	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2280	 330	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
2281	 331	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
- stack 0: 0xE0
2282	 333	SHR		 	 
- stack 1: 0x570
- stack 0: 0x32E0000
2283	 334	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2284	 337	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
2285	 338	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
2286	 33A	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
2287	 33B	POP		 	 
- stack 0: 0x570
2288	 33C	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2289	 33E	ADD		 	 
- stack 0: 0x574
2290	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2291	 340	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
2292	 341	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
- stack 0: 0xF0
2293	 343	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB8
2294	 344	JUMP		 	 
- stack 0: 0x574
2295	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x574
2296	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2297	 BA	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
2298	 BB	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
- stack 0: 0xE0
2299	 BD	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB8000F
2300	 BE	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xB8000F
- stack 0: 0xFFFF
2301	 C1	AND		 	 
- stack 1: 0x574
- stack 0: 0xF
2302	 C2	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x1
2303	 C4	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xF
2304	 C5	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x20
2305	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0xFF0FFF
2306	 C9	XOR		 	  ;; # XORI
- stack 1: 0x574
- stack 0: 0xFF0FF0
2307	 CA	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0xFF0FF0
- stack 0: 0x60
2308	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2309	 CE	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2310	 D0	ADD		 	 
- stack 0: 0x578
2311	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2312	 D2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
2313	 D3	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
- stack 0: 0xF0
2314	 D5	SHR		 	 
- stack 1: 0x578
- stack 0: 0x271
2315	 D6	JUMP		 	 
- stack 0: 0x578
2316	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
2317	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2318	 273	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
2319	 274	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
- stack 0: 0xE0
2320	 276	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2710001
2321	 277	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2710001
- stack 0: 0xFFFF
2322	 27A	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
2323	 27B	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2324	 27D	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
2325	 27E	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2326	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x0
2327	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x1
2328	 283	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2329	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
2330	 287	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2331	 289	ADD		 	 
- stack 0: 0x57C
2332	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2333	 28B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
2334	 28C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
- stack 0: 0xF0
2335	 28E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x290
2336	 28F	JUMP		 	 
- stack 0: 0x57C
2337	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
2338	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2339	 292	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
2340	 293	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
- stack 0: 0xE0
2341	 295	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2900002
2342	 296	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2900002
- stack 0: 0xFFFF
2343	 299	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2344	 29A	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
2345	 29C	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2346	 29D	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2347	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
2348	 2A1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2349	 2A3	ADD		 	 
- stack 0: 0x580
2350	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2351	 2A5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
2352	 2A6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
- stack 0: 0xF0
2353	 2A8	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AA
2354	 2A9	JUMP		 	 
- stack 0: 0x580
2355	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x580
2356	 2AB	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
2357	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x1
2358	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2359	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x1
2360	 2B5	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0xA0
2361	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
2362	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2363	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2
2364	 2BF	SUB		 	 
- stack 1: 0x580
- stack 0: 0x1
2365	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x580
- stack 1: 0x1
- stack 0: 0x2C8
2366	 2C3	JUMPI		 	 
- stack 0: 0x580
2367	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x580
2368	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x580
- stack 0: 0x580
2369	 2CA	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
2370	 2CB	PUSH1	E0	 	 
- stack 2: 0x580
- stack 1: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
- stack 0: 0xE0
2371	 2CD	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AAFFE8
2372	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x580
- stack 1: 0x2AAFFE8
- stack 0: 0xFFFF
2373	 2D1	AND		 	 
- stack 1: 0x580
- stack 0: 0xFFE8
2374	 2D2	PUSH1	01	 	 
- stack 2: 0x580
- stack 1: 0xFFE8
- stack 0: 0x1
2375	 2D4	SIGNEXTEND		 	 
- stack 1: 0x580
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE8
2376	 2D5	ADD		 	 
- stack 0: 0x568
2377	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x568
- stack 0: 0xFFFFFFFF
2378	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x568
2379	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x568
- stack 0: 0x568
2380	 2DD	MLOAD		 	 
- stack 1: 0x568
- stack 0: 0x860FF10099FFFF032E000000B8000F027100010290000202AAFFE8018B0FF1
2381	 2DE	PUSH1	F0	 	 
- stack 2: 0x568
- stack 1: 0x860FF10099FFFF032E000000B8000F027100010290000202AAFFE8018B0FF1
- stack 0: 0xF0
2382	 2E0	SHR		 	 
- stack 1: 0x568
- stack 0: 0x86
2383	 2E1	JUMP		 	 
- stack 0: 0x568
2384	 86	JUMPDEST		 ;; __riscvimpl_LUI_ff10b7	  ;; # instr: lui ra,0xff1(ignore imm)
- stack 0: 0x568
2385	 87	PUSH4	00ff1000	 	 
- stack 1: 0x568
- stack 0: 0xFF1000
2386	 8C	PUSH2	0020	 	 
- stack 2: 0x568
- stack 1: 0xFF1000
- stack 0: 0x20
2387	 8F	MSTORE		 	  ;; # store to x1
- stack 0: 0x568
2388	 90	PUSH1	04	 	 
- stack 1: 0x568
- stack 0: 0x4
2389	 92	ADD		 	 
- stack 0: 0x56C
2390	 93	DUP1		 	  ;; # executing pc
- stack 1: 0x56C
- stack 0: 0x56C
2391	 94	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
2392	 95	PUSH1	F0	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
- stack 0: 0xF0
2393	 97	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x99
2394	 98	JUMP		 	 
- stack 0: 0x56C
2395	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x56C
2396	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x56C
- stack 0: 0x56C
2397	 9B	MLOAD		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
2398	 9C	PUSH1	E0	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF032E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF0
- stack 0: 0xE0
2399	 9E	SHR		 	 
- stack 1: 0x56C
- stack 0: 0x99FFFF
2400	 9F	PUSH2	FFFF	 	 
- stack 2: 0x56C
- stack 1: 0x99FFFF
- stack 0: 0xFFFF
2401	 A2	AND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFF
2402	 A3	PUSH1	01	 	 
- stack 2: 0x56C
- stack 1: 0xFFFF
- stack 0: 0x1
2403	 A5	SIGNEXTEND		 	 
- stack 1: 0x56C
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
2404	 A6	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0x20
2405	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x56C
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
- stack 0: 0xFF1000
2406	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x56C
- stack 0: 0xFF0FFF
2407	 AB	PUSH2	0020	 	 
- stack 2: 0x56C
- stack 1: 0xFF0FFF
- stack 0: 0x20
2408	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x56C
2409	 AF	PUSH1	04	 	 
- stack 1: 0x56C
- stack 0: 0x4
2410	 B1	ADD		 	 
- stack 0: 0x570
2411	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x570
- stack 0: 0x570
2412	 B3	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
2413	 B4	PUSH1	F0	 	 
- stack 2: 0x570
- stack 1: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
- stack 0: 0xF0
2414	 B6	SHR		 	 
- stack 1: 0x570
- stack 0: 0x32E
2415	 B7	JUMP		 	 
- stack 0: 0x570
2416	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x570
2417	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x570
- stack 0: 0x570
2418	 330	MLOAD		 	 
- stack 1: 0x570
- stack 0: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
2419	 331	PUSH1	E0	 	 
- stack 2: 0x570
- stack 1: 0x32E000000B8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B
- stack 0: 0xE0
2420	 333	SHR		 	 
- stack 1: 0x570
- stack 0: 0x32E0000
2421	 334	PUSH2	FFFF	 	 
- stack 2: 0x570
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2422	 337	AND		 	 
- stack 1: 0x570
- stack 0: 0x0
2423	 338	PUSH1	01	 	 
- stack 2: 0x570
- stack 1: 0x0
- stack 0: 0x1
2424	 33A	SIGNEXTEND		 	 
- stack 1: 0x570
- stack 0: 0x0
2425	 33B	POP		 	 
- stack 0: 0x570
2426	 33C	PUSH1	04	 	 
- stack 1: 0x570
- stack 0: 0x4
2427	 33E	ADD		 	 
- stack 0: 0x574
2428	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x574
- stack 0: 0x574
2429	 340	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
2430	 341	PUSH1	F0	 	 
- stack 2: 0x574
- stack 1: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
- stack 0: 0xF0
2431	 343	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB8
2432	 344	JUMP		 	 
- stack 0: 0x574
2433	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x574
2434	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x574
- stack 0: 0x574
2435	 BA	MLOAD		 	 
- stack 1: 0x574
- stack 0: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
2436	 BB	PUSH1	E0	 	 
- stack 2: 0x574
- stack 1: 0xB8000F027100010290000202AAFFE8018B0FF100EAFFF00109000B01230064
- stack 0: 0xE0
2437	 BD	SHR		 	 
- stack 1: 0x574
- stack 0: 0xB8000F
2438	 BE	PUSH2	FFFF	 	 
- stack 2: 0x574
- stack 1: 0xB8000F
- stack 0: 0xFFFF
2439	 C1	AND		 	 
- stack 1: 0x574
- stack 0: 0xF
2440	 C2	PUSH1	01	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x1
2441	 C4	SIGNEXTEND		 	 
- stack 1: 0x574
- stack 0: 0xF
2442	 C5	PUSH2	0020	 	 
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0x20
2443	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x574
- stack 1: 0xF
- stack 0: 0xFF0FFF
2444	 C9	XOR		 	  ;; # XORI
- stack 1: 0x574
- stack 0: 0xFF0FF0
2445	 CA	PUSH2	0060	 	 
- stack 2: 0x574
- stack 1: 0xFF0FF0
- stack 0: 0x60
2446	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x574
2447	 CE	PUSH1	04	 	 
- stack 1: 0x574
- stack 0: 0x4
2448	 D0	ADD		 	 
- stack 0: 0x578
2449	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x578
- stack 0: 0x578
2450	 D2	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
2451	 D3	PUSH1	F0	 	 
- stack 2: 0x578
- stack 1: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
- stack 0: 0xF0
2452	 D5	SHR		 	 
- stack 1: 0x578
- stack 0: 0x271
2453	 D6	JUMP		 	 
- stack 0: 0x578
2454	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x578
2455	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x578
- stack 0: 0x578
2456	 273	MLOAD		 	 
- stack 1: 0x578
- stack 0: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
2457	 274	PUSH1	E0	 	 
- stack 2: 0x578
- stack 1: 0x27100010290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000
- stack 0: 0xE0
2458	 276	SHR		 	 
- stack 1: 0x578
- stack 0: 0x2710001
2459	 277	PUSH2	FFFF	 	 
- stack 2: 0x578
- stack 1: 0x2710001
- stack 0: 0xFFFF
2460	 27A	AND		 	 
- stack 1: 0x578
- stack 0: 0x1
2461	 27B	PUSH1	01	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2462	 27D	SIGNEXTEND		 	 
- stack 1: 0x578
- stack 0: 0x1
2463	 27E	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x80
2464	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x578
- stack 1: 0x1
- stack 0: 0x1
2465	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x578
- stack 0: 0x2
2466	 283	PUSH2	0080	 	 
- stack 2: 0x578
- stack 1: 0x2
- stack 0: 0x80
2467	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x578
2468	 287	PUSH1	04	 	 
- stack 1: 0x578
- stack 0: 0x4
2469	 289	ADD		 	 
- stack 0: 0x57C
2470	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x57C
- stack 0: 0x57C
2471	 28B	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
2472	 28C	PUSH1	F0	 	 
- stack 2: 0x57C
- stack 1: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
- stack 0: 0xF0
2473	 28E	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x290
2474	 28F	JUMP		 	 
- stack 0: 0x57C
2475	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x57C
2476	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x57C
- stack 0: 0x57C
2477	 292	MLOAD		 	 
- stack 1: 0x57C
- stack 0: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
2478	 293	PUSH1	E0	 	 
- stack 2: 0x57C
- stack 1: 0x290000202AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF
- stack 0: 0xE0
2479	 295	SHR		 	 
- stack 1: 0x57C
- stack 0: 0x2900002
2480	 296	PUSH2	FFFF	 	 
- stack 2: 0x57C
- stack 1: 0x2900002
- stack 0: 0xFFFF
2481	 299	AND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2482	 29A	PUSH1	01	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0x1
2483	 29C	SIGNEXTEND		 	 
- stack 1: 0x57C
- stack 0: 0x2
2484	 29D	PUSH2	00A0	 	 
- stack 2: 0x57C
- stack 1: 0x2
- stack 0: 0xA0
2485	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x57C
2486	 2A1	PUSH1	04	 	 
- stack 1: 0x57C
- stack 0: 0x4
2487	 2A3	ADD		 	 
- stack 0: 0x580
2488	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x580
- stack 0: 0x580
2489	 2A5	MLOAD		 	 
- stack 1: 0x580
- stack 0: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
2490	 2A6	PUSH1	F0	 	 
- stack 2: 0x580
- stack 1: 0x2AAFFE8018B0FF100EAFFF00109000B0123006402380000019E00FF0099000F
- stack 0: 0xF0
2491	 2A8	SHR		 	 
- stack 1: 0x580
- stack 0: 0x2AA
2492	 2A9	JUMP		 	 
- stack 0: 0x580
2493	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x580
2494	 2AB	PUSH2	0080	 	 
- stack 1: 0x580
- stack 0: 0x80
2495	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x580
- stack 0: 0x2
2496	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2497	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x580
- stack 0: 0x2
2498	 2B5	PUSH2	00A0	 	 
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0xA0
2499	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2500	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x580
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2501	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x580
- stack 1: 0x2
- stack 0: 0x2
2502	 2BF	SUB		 	 
- stack 1: 0x580
- stack 0: 0x0
2503	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x580
- stack 1: 0x0
- stack 0: 0x2C8
2504	 2C3	JUMPI		 	 
- stack 0: 0x580
2505	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x580
- stack 0: 0x2E2
2506	 2C7	JUMP		 	 
- stack 0: 0x580
2507	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x580
2508	 2E3	PUSH1	04	 	 
- stack 1: 0x580
- stack 0: 0x4
2509	 2E5	ADD		 	 
- stack 0: 0x584
2510	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x584
- stack 0: 0x584
2511	 2E7	MLOAD		 	 
- stack 1: 0x584
- stack 0: 0x18B0FF100EAFFF00109000B0123006402380000019E00FF0099000F032E0000
2512	 2E8	PUSH1	F0	 	 
- stack 2: 0x584
- stack 1: 0x18B0FF100EAFFF00109000B0123006402380000019E00FF0099000F032E0000
- stack 0: 0xF0
2513	 2EA	SHR		 	 
- stack 1: 0x584
- stack 0: 0x18B
2514	 2EB	JUMP		 	 
- stack 0: 0x584
2515	 18B	JUMPDEST		 ;; __riscvimpl_LUI_ff1eb7	  ;; # instr: lui t4,0xff1(ignore imm)
- stack 0: 0x584
2516	 18C	PUSH4	00ff1000	 	 
- stack 1: 0x584
- stack 0: 0xFF1000
2517	 191	PUSH2	03A0	 	 
- stack 2: 0x584
- stack 1: 0xFF1000
- stack 0: 0x3A0
2518	 194	MSTORE		 	  ;; # store to x29
- stack 0: 0x584
2519	 195	PUSH1	04	 	 
- stack 1: 0x584
- stack 0: 0x4
2520	 197	ADD		 	 
- stack 0: 0x588
2521	 198	DUP1		 	  ;; # executing pc
- stack 1: 0x588
- stack 0: 0x588
2522	 199	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEAFFF00109000B0123006402380000019E00FF0099000F032E0000032E0000
2523	 19A	PUSH1	F0	 	 
- stack 2: 0x588
- stack 1: 0xEAFFF00109000B0123006402380000019E00FF0099000F032E0000032E0000
- stack 0: 0xF0
2524	 19C	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEA
2525	 19D	JUMP		 	 
- stack 0: 0x588
2526	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x588
2527	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x588
- stack 0: 0x588
2528	 EC	MLOAD		 	 
- stack 1: 0x588
- stack 0: 0xEAFFF00109000B0123006402380000019E00FF0099000F032E0000032E0000
2529	 ED	PUSH1	E0	 	 
- stack 2: 0x588
- stack 1: 0xEAFFF00109000B0123006402380000019E00FF0099000F032E0000032E0000
- stack 0: 0xE0
2530	 EF	SHR		 	 
- stack 1: 0x588
- stack 0: 0xEAFFF0
2531	 F0	PUSH2	FFFF	 	 
- stack 2: 0x588
- stack 1: 0xEAFFF0
- stack 0: 0xFFFF
2532	 F3	AND		 	 
- stack 1: 0x588
- stack 0: 0xFFF0
2533	 F4	PUSH1	01	 	 
- stack 2: 0x588
- stack 1: 0xFFF0
- stack 0: 0x1
2534	 F6	SIGNEXTEND		 	 
- stack 1: 0x588
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
2535	 F7	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0x3A0
2536	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x588
- stack 1: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
- stack 0: 0xFF1000
2537	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x588
- stack 0: 0xFF0FF0
2538	 FC	PUSH2	03A0	 	 
- stack 2: 0x588
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
2539	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x588
2540	 100	PUSH1	04	 	 
- stack 1: 0x588
- stack 0: 0x4
2541	 102	ADD		 	 
- stack 0: 0x58C
2542	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x58C
- stack 0: 0x58C
2543	 104	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x109000B0123006402380000019E00FF0099000F032E0000032E000000B800F0
2544	 105	PUSH1	F0	 	 
- stack 2: 0x58C
- stack 1: 0x109000B0123006402380000019E00FF0099000F032E0000032E000000B800F0
- stack 0: 0xF0
2545	 107	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x109
2546	 108	JUMP		 	 
- stack 0: 0x58C
2547	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x58C
2548	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x58C
- stack 0: 0x58C
2549	 10B	MLOAD		 	 
- stack 1: 0x58C
- stack 0: 0x109000B0123006402380000019E00FF0099000F032E0000032E000000B800F0
2550	 10C	PUSH1	E0	 	 
- stack 2: 0x58C
- stack 1: 0x109000B0123006402380000019E00FF0099000F032E0000032E000000B800F0
- stack 0: 0xE0
2551	 10E	SHR		 	 
- stack 1: 0x58C
- stack 0: 0x109000B
2552	 10F	PUSH2	FFFF	 	 
- stack 2: 0x58C
- stack 1: 0x109000B
- stack 0: 0xFFFF
2553	 112	AND		 	 
- stack 1: 0x58C
- stack 0: 0xB
2554	 113	PUSH1	01	 	 
- stack 2: 0x58C
- stack 1: 0xB
- stack 0: 0x1
2555	 115	SIGNEXTEND		 	 
- stack 1: 0x58C
- stack 0: 0xB
2556	 116	PUSH2	0380	 	 
- stack 2: 0x58C
- stack 1: 0xB
- stack 0: 0x380
2557	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x58C
2558	 11A	PUSH1	04	 	 
- stack 1: 0x58C
- stack 0: 0x4
2559	 11C	ADD		 	 
- stack 0: 0x590
2560	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x590
- stack 0: 0x590
2561	 11E	MLOAD		 	 
- stack 1: 0x590
- stack 0: 0x123006402380000019E00FF0099000F032E0000032E000000B800F002710001
2562	 11F	PUSH1	F0	 	 
- stack 2: 0x590
- stack 1: 0x123006402380000019E00FF0099000F032E0000032E000000B800F002710001
- stack 0: 0xF0
2563	 121	SHR		 	 
- stack 1: 0x590
- stack 0: 0x123
2564	 122	JUMP		 	 
- stack 0: 0x590
2565	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x590
2566	 124	PUSH2	0060	 	 
- stack 1: 0x590
- stack 0: 0x60
2567	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x590
- stack 0: 0xFF0FF0
2568	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x590
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
2569	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x590
- stack 0: 0xFF0FF0
2570	 12E	PUSH2	03A0	 	 
- stack 2: 0x590
- stack 1: 0xFF0FF0
- stack 0: 0x3A0
2571	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x590
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
2572	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x590
- stack 2: 0xFF0FF0
- stack 1: 0xFF0FF0
- stack 0: 0xFFFFFFFF
2573	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x590
- stack 1: 0xFF0FF0
- stack 0: 0xFF0FF0
2574	 138	SUB		 	 
- stack 1: 0x590
- stack 0: 0x0
2575	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x590
- stack 1: 0x0
- stack 0: 0x141
2576	 13C	JUMPI		 	 
- stack 0: 0x590
2577	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x590
- stack 0: 0x15B
2578	 140	JUMP		 	 
- stack 0: 0x590
2579	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x590
2580	 15C	PUSH1	04	 	 
- stack 1: 0x590
- stack 0: 0x4
2581	 15E	ADD		 	 
- stack 0: 0x594
2582	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x594
- stack 0: 0x594
2583	 160	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2380000019E00FF0099000F032E0000032E000000B800F00271000102900002
2584	 161	PUSH1	F0	 	 
- stack 2: 0x594
- stack 1: 0x2380000019E00FF0099000F032E0000032E000000B800F00271000102900002
- stack 0: 0xF0
2585	 163	SHR		 	 
- stack 1: 0x594
- stack 0: 0x238
2586	 164	JUMP		 	 
- stack 0: 0x594
2587	 238	JUMPDEST		 ;; __riscvimpl_ADDI_4_0_0	  ;; # instr: addi tp,zero,0(ignore imm)
- stack 0: 0x594
2588	 239	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x594
- stack 0: 0x594
2589	 23A	MLOAD		 	 
- stack 1: 0x594
- stack 0: 0x2380000019E00FF0099000F032E0000032E000000B800F00271000102900002
2590	 23B	PUSH1	E0	 	 
- stack 2: 0x594
- stack 1: 0x2380000019E00FF0099000F032E0000032E000000B800F00271000102900002
- stack 0: 0xE0
2591	 23D	SHR		 	 
- stack 1: 0x594
- stack 0: 0x2380000
2592	 23E	PUSH2	FFFF	 	 
- stack 2: 0x594
- stack 1: 0x2380000
- stack 0: 0xFFFF
2593	 241	AND		 	 
- stack 1: 0x594
- stack 0: 0x0
2594	 242	PUSH1	01	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x1
2595	 244	SIGNEXTEND		 	 
- stack 1: 0x594
- stack 0: 0x0
2596	 245	PUSH2	0080	 	 
- stack 2: 0x594
- stack 1: 0x0
- stack 0: 0x80
2597	 248	MSTORE		 	  ;; # store to x4
- stack 0: 0x594
2598	 249	PUSH1	04	 	 
- stack 1: 0x594
- stack 0: 0x4
2599	 24B	ADD		 	 
- stack 0: 0x598
2600	 24C	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2601	 24D	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x19E00FF0099000F032E0000032E000000B800F0027100010290000202AAFFE4
2602	 24E	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x19E00FF0099000F032E0000032E000000B800F0027100010290000202AAFFE4
- stack 0: 0xF0
2603	 250	SHR		 	 
- stack 1: 0x598
- stack 0: 0x19E
2604	 251	JUMP		 	 
- stack 0: 0x598
2605	 19E	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x598
2606	 19F	PUSH4	f00ff000	 	 
- stack 1: 0x598
- stack 0: 0xF00FF000
2607	 1A4	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0xF00FF000
- stack 0: 0x20
2608	 1A7	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
2609	 1A8	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2610	 1AA	ADD		 	 
- stack 0: 0x59C
2611	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2612	 1AC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
2613	 1AD	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
- stack 0: 0xF0
2614	 1AF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x99
2615	 1B0	JUMP		 	 
- stack 0: 0x59C
2616	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x59C
2617	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2618	 9B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
2619	 9C	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
- stack 0: 0xE0
2620	 9E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x99000F
2621	 9F	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x99000F
- stack 0: 0xFFFF
2622	 A2	AND		 	 
- stack 1: 0x59C
- stack 0: 0xF
2623	 A3	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0x1
2624	 A5	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xF
2625	 A6	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0x20
2626	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0xF00FF000
2627	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x59C
- stack 0: 0xF00FF00F
2628	 AB	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xF00FF00F
- stack 0: 0x20
2629	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2630	 AF	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2631	 B1	ADD		 	 
- stack 0: 0x5A0
2632	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2633	 B3	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
2634	 B4	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
- stack 0: 0xF0
2635	 B6	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x32E
2636	 B7	JUMP		 	 
- stack 0: 0x5A0
2637	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A0
2638	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2639	 330	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
2640	 331	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
- stack 0: 0xE0
2641	 333	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000
2642	 334	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2643	 337	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2644	 338	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2645	 33A	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2646	 33B	POP		 	 
- stack 0: 0x5A0
2647	 33C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2648	 33E	ADD		 	 
- stack 0: 0x5A4
2649	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2650	 340	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
2651	 341	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
- stack 0: 0xF0
2652	 343	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x32E
2653	 344	JUMP		 	 
- stack 0: 0x5A4
2654	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2655	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2656	 330	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
2657	 331	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
- stack 0: 0xE0
2658	 333	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x32E0000
2659	 334	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2660	 337	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2661	 338	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2662	 33A	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2663	 33B	POP		 	 
- stack 0: 0x5A4
2664	 33C	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2665	 33E	ADD		 	 
- stack 0: 0x5A8
2666	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2667	 340	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
2668	 341	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
- stack 0: 0xF0
2669	 343	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB8
2670	 344	JUMP		 	 
- stack 0: 0x5A8
2671	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x5A8
2672	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2673	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
2674	 BB	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
- stack 0: 0xE0
2675	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0
2676	 BE	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2677	 C1	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2678	 C2	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x1
2679	 C4	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2680	 C5	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x20
2681	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0xF00FF00F
2682	 C9	XOR		 	  ;; # XORI
- stack 1: 0x5A8
- stack 0: 0xF00FF0FF
2683	 CA	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xF00FF0FF
- stack 0: 0x60
2684	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2685	 CE	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2686	 D0	ADD		 	 
- stack 0: 0x5AC
2687	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2688	 D2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
2689	 D3	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
- stack 0: 0xF0
2690	 D5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x271
2691	 D6	JUMP		 	 
- stack 0: 0x5AC
2692	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
2693	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2694	 273	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
2695	 274	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
- stack 0: 0xE0
2696	 276	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2710001
2697	 277	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2710001
- stack 0: 0xFFFF
2698	 27A	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2699	 27B	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2700	 27D	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2701	 27E	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2702	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x0
2703	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x1
2704	 283	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2705	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
2706	 287	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2707	 289	ADD		 	 
- stack 0: 0x5B0
2708	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2709	 28B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
2710	 28C	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
- stack 0: 0xF0
2711	 28E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x290
2712	 28F	JUMP		 	 
- stack 0: 0x5B0
2713	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
2714	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2715	 292	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
2716	 293	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
- stack 0: 0xE0
2717	 295	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2900002
2718	 296	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2900002
- stack 0: 0xFFFF
2719	 299	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2720	 29A	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
2721	 29C	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2722	 29D	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
2723	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
2724	 2A1	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2725	 2A3	ADD		 	 
- stack 0: 0x5B4
2726	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2727	 2A5	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
2728	 2A6	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
- stack 0: 0xF0
2729	 2A8	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2AA
2730	 2A9	JUMP		 	 
- stack 0: 0x5B4
2731	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5B4
2732	 2AB	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
2733	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x1
2734	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xFFFFFFFF
2735	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x1
2736	 2B5	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0xA0
2737	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
2738	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x1
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2739	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2
2740	 2BF	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x1
2741	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x5B4
- stack 1: 0x1
- stack 0: 0x2C8
2742	 2C3	JUMPI		 	 
- stack 0: 0x5B4
2743	 2C8	JUMPDEST		 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x5B4
2744	 2C9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B4
- stack 0: 0x5B4
2745	 2CA	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
2746	 2CB	PUSH1	E0	 	 
- stack 2: 0x5B4
- stack 1: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
- stack 0: 0xE0
2747	 2CD	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2AAFFE4
2748	 2CE	PUSH2	FFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2AAFFE4
- stack 0: 0xFFFF
2749	 2D1	AND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFE4
2750	 2D2	PUSH1	01	 	 
- stack 2: 0x5B4
- stack 1: 0xFFE4
- stack 0: 0x1
2751	 2D4	SIGNEXTEND		 	 
- stack 1: 0x5B4
- stack 0: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE4
2752	 2D5	ADD		 	 
- stack 0: 0x598
2753	 2D6	PUSH4	FFFFFFFF	 	 
- stack 1: 0x598
- stack 0: 0xFFFFFFFF
2754	 2DB	AND		 	  ;; # mask to 32 bits
- stack 0: 0x598
2755	 2DC	DUP1		 	  ;; # executing pc
- stack 1: 0x598
- stack 0: 0x598
2756	 2DD	MLOAD		 	 
- stack 1: 0x598
- stack 0: 0x19E00FF0099000F032E0000032E000000B800F0027100010290000202AAFFE4
2757	 2DE	PUSH1	F0	 	 
- stack 2: 0x598
- stack 1: 0x19E00FF0099000F032E0000032E000000B800F0027100010290000202AAFFE4
- stack 0: 0xF0
2758	 2E0	SHR		 	 
- stack 1: 0x598
- stack 0: 0x19E
2759	 2E1	JUMP		 	 
- stack 0: 0x598
2760	 19E	JUMPDEST		 ;; __riscvimpl_LUI_f00ff0b7	  ;; # instr: lui ra,0xf00ff(ignore imm)
- stack 0: 0x598
2761	 19F	PUSH4	f00ff000	 	 
- stack 1: 0x598
- stack 0: 0xF00FF000
2762	 1A4	PUSH2	0020	 	 
- stack 2: 0x598
- stack 1: 0xF00FF000
- stack 0: 0x20
2763	 1A7	MSTORE		 	  ;; # store to x1
- stack 0: 0x598
2764	 1A8	PUSH1	04	 	 
- stack 1: 0x598
- stack 0: 0x4
2765	 1AA	ADD		 	 
- stack 0: 0x59C
2766	 1AB	DUP1		 	  ;; # executing pc
- stack 1: 0x59C
- stack 0: 0x59C
2767	 1AC	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
2768	 1AD	PUSH1	F0	 	 
- stack 2: 0x59C
- stack 1: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
- stack 0: 0xF0
2769	 1AF	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x99
2770	 1B0	JUMP		 	 
- stack 0: 0x59C
2771	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x59C
2772	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x59C
- stack 0: 0x59C
2773	 9B	MLOAD		 	 
- stack 1: 0x59C
- stack 0: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
2774	 9C	PUSH1	E0	 	 
- stack 2: 0x59C
- stack 1: 0x99000F032E0000032E000000B800F0027100010290000202AAFFE401B100FF
- stack 0: 0xE0
2775	 9E	SHR		 	 
- stack 1: 0x59C
- stack 0: 0x99000F
2776	 9F	PUSH2	FFFF	 	 
- stack 2: 0x59C
- stack 1: 0x99000F
- stack 0: 0xFFFF
2777	 A2	AND		 	 
- stack 1: 0x59C
- stack 0: 0xF
2778	 A3	PUSH1	01	 	 
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0x1
2779	 A5	SIGNEXTEND		 	 
- stack 1: 0x59C
- stack 0: 0xF
2780	 A6	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0x20
2781	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x59C
- stack 1: 0xF
- stack 0: 0xF00FF000
2782	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x59C
- stack 0: 0xF00FF00F
2783	 AB	PUSH2	0020	 	 
- stack 2: 0x59C
- stack 1: 0xF00FF00F
- stack 0: 0x20
2784	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x59C
2785	 AF	PUSH1	04	 	 
- stack 1: 0x59C
- stack 0: 0x4
2786	 B1	ADD		 	 
- stack 0: 0x5A0
2787	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5A0
- stack 0: 0x5A0
2788	 B3	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
2789	 B4	PUSH1	F0	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
- stack 0: 0xF0
2790	 B6	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x32E
2791	 B7	JUMP		 	 
- stack 0: 0x5A0
2792	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A0
2793	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A0
- stack 0: 0x5A0
2794	 330	MLOAD		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
2795	 331	PUSH1	E0	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000032E000000B800F0027100010290000202AAFFE401B100FF00EA00FF
- stack 0: 0xE0
2796	 333	SHR		 	 
- stack 1: 0x5A0
- stack 0: 0x32E0000
2797	 334	PUSH2	FFFF	 	 
- stack 2: 0x5A0
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2798	 337	AND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2799	 338	PUSH1	01	 	 
- stack 2: 0x5A0
- stack 1: 0x0
- stack 0: 0x1
2800	 33A	SIGNEXTEND		 	 
- stack 1: 0x5A0
- stack 0: 0x0
2801	 33B	POP		 	 
- stack 0: 0x5A0
2802	 33C	PUSH1	04	 	 
- stack 1: 0x5A0
- stack 0: 0x4
2803	 33E	ADD		 	 
- stack 0: 0x5A4
2804	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A4
- stack 0: 0x5A4
2805	 340	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
2806	 341	PUSH1	F0	 	 
- stack 2: 0x5A4
- stack 1: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
- stack 0: 0xF0
2807	 343	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x32E
2808	 344	JUMP		 	 
- stack 0: 0x5A4
2809	 32E	JUMPDEST		 ;; __riscvimpl_ADDI_0_0_0	  ;; # instr: addi zero,zero,0(ignore imm)
- stack 0: 0x5A4
2810	 32F	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A4
- stack 0: 0x5A4
2811	 330	MLOAD		 	 
- stack 1: 0x5A4
- stack 0: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
2812	 331	PUSH1	E0	 	 
- stack 2: 0x5A4
- stack 1: 0x32E000000B800F0027100010290000202AAFFE401B100FF00EA00FF0109000C
- stack 0: 0xE0
2813	 333	SHR		 	 
- stack 1: 0x5A4
- stack 0: 0x32E0000
2814	 334	PUSH2	FFFF	 	 
- stack 2: 0x5A4
- stack 1: 0x32E0000
- stack 0: 0xFFFF
2815	 337	AND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2816	 338	PUSH1	01	 	 
- stack 2: 0x5A4
- stack 1: 0x0
- stack 0: 0x1
2817	 33A	SIGNEXTEND		 	 
- stack 1: 0x5A4
- stack 0: 0x0
2818	 33B	POP		 	 
- stack 0: 0x5A4
2819	 33C	PUSH1	04	 	 
- stack 1: 0x5A4
- stack 0: 0x4
2820	 33E	ADD		 	 
- stack 0: 0x5A8
2821	 33F	DUP1		 	  ;; # executing pc
- stack 1: 0x5A8
- stack 0: 0x5A8
2822	 340	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
2823	 341	PUSH1	F0	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
- stack 0: 0xF0
2824	 343	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB8
2825	 344	JUMP		 	 
- stack 0: 0x5A8
2826	 B8	JUMPDEST		 ;; __riscvimpl_XORI_3_1_0	  ;; # instr: xori gp,ra,-241(ignore imm)
- stack 0: 0x5A8
2827	 B9	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5A8
- stack 0: 0x5A8
2828	 BA	MLOAD		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
2829	 BB	PUSH1	E0	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0027100010290000202AAFFE401B100FF00EA00FF0109000C01230030
- stack 0: 0xE0
2830	 BD	SHR		 	 
- stack 1: 0x5A8
- stack 0: 0xB800F0
2831	 BE	PUSH2	FFFF	 	 
- stack 2: 0x5A8
- stack 1: 0xB800F0
- stack 0: 0xFFFF
2832	 C1	AND		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2833	 C2	PUSH1	01	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x1
2834	 C4	SIGNEXTEND		 	 
- stack 1: 0x5A8
- stack 0: 0xF0
2835	 C5	PUSH2	0020	 	 
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0x20
2836	 C8	MLOAD		 	  ;; # read from x1
- stack 2: 0x5A8
- stack 1: 0xF0
- stack 0: 0xF00FF00F
2837	 C9	XOR		 	  ;; # XORI
- stack 1: 0x5A8
- stack 0: 0xF00FF0FF
2838	 CA	PUSH2	0060	 	 
- stack 2: 0x5A8
- stack 1: 0xF00FF0FF
- stack 0: 0x60
2839	 CD	MSTORE		 	  ;; # store to x3
- stack 0: 0x5A8
2840	 CE	PUSH1	04	 	 
- stack 1: 0x5A8
- stack 0: 0x4
2841	 D0	ADD		 	 
- stack 0: 0x5AC
2842	 D1	DUP1		 	  ;; # executing pc
- stack 1: 0x5AC
- stack 0: 0x5AC
2843	 D2	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
2844	 D3	PUSH1	F0	 	 
- stack 2: 0x5AC
- stack 1: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
- stack 0: 0xF0
2845	 D5	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x271
2846	 D6	JUMP		 	 
- stack 0: 0x5AC
2847	 271	JUMPDEST		 ;; __riscvimpl_ADDI_4_4_0	  ;; # instr: addi tp,tp,1(ignore imm)
- stack 0: 0x5AC
2848	 272	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5AC
- stack 0: 0x5AC
2849	 273	MLOAD		 	 
- stack 1: 0x5AC
- stack 0: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
2850	 274	PUSH1	E0	 	 
- stack 2: 0x5AC
- stack 1: 0x27100010290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0
- stack 0: 0xE0
2851	 276	SHR		 	 
- stack 1: 0x5AC
- stack 0: 0x2710001
2852	 277	PUSH2	FFFF	 	 
- stack 2: 0x5AC
- stack 1: 0x2710001
- stack 0: 0xFFFF
2853	 27A	AND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2854	 27B	PUSH1	01	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2855	 27D	SIGNEXTEND		 	 
- stack 1: 0x5AC
- stack 0: 0x1
2856	 27E	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x80
2857	 281	MLOAD		 	  ;; # read from x4
- stack 2: 0x5AC
- stack 1: 0x1
- stack 0: 0x1
2858	 282	ADD		 	  ;; # ADDI 4
- stack 1: 0x5AC
- stack 0: 0x2
2859	 283	PUSH2	0080	 	 
- stack 2: 0x5AC
- stack 1: 0x2
- stack 0: 0x80
2860	 286	MSTORE		 	  ;; # store to x4
- stack 0: 0x5AC
2861	 287	PUSH1	04	 	 
- stack 1: 0x5AC
- stack 0: 0x4
2862	 289	ADD		 	 
- stack 0: 0x5B0
2863	 28A	DUP1		 	  ;; # executing pc
- stack 1: 0x5B0
- stack 0: 0x5B0
2864	 28B	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
2865	 28C	PUSH1	F0	 	 
- stack 2: 0x5B0
- stack 1: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
- stack 0: 0xF0
2866	 28E	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x290
2867	 28F	JUMP		 	 
- stack 0: 0x5B0
2868	 290	JUMPDEST		 ;; __riscvimpl_ADDI_5_0_0	  ;; # instr: addi t0,zero,2(ignore imm)
- stack 0: 0x5B0
2869	 291	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5B0
- stack 0: 0x5B0
2870	 292	MLOAD		 	 
- stack 1: 0x5B0
- stack 0: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
2871	 293	PUSH1	E0	 	 
- stack 2: 0x5B0
- stack 1: 0x290000202AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F0
- stack 0: 0xE0
2872	 295	SHR		 	 
- stack 1: 0x5B0
- stack 0: 0x2900002
2873	 296	PUSH2	FFFF	 	 
- stack 2: 0x5B0
- stack 1: 0x2900002
- stack 0: 0xFFFF
2874	 299	AND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2875	 29A	PUSH1	01	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0x1
2876	 29C	SIGNEXTEND		 	 
- stack 1: 0x5B0
- stack 0: 0x2
2877	 29D	PUSH2	00A0	 	 
- stack 2: 0x5B0
- stack 1: 0x2
- stack 0: 0xA0
2878	 2A0	MSTORE		 	  ;; # store to x5
- stack 0: 0x5B0
2879	 2A1	PUSH1	04	 	 
- stack 1: 0x5B0
- stack 0: 0x4
2880	 2A3	ADD		 	 
- stack 0: 0x5B4
2881	 2A4	DUP1		 	  ;; # executing pc
- stack 1: 0x5B4
- stack 0: 0x5B4
2882	 2A5	MLOAD		 	 
- stack 1: 0x5B4
- stack 0: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
2883	 2A6	PUSH1	F0	 	 
- stack 2: 0x5B4
- stack 1: 0x2AAFFE401B100FF00EA00FF0109000C01230030034500F0036200F00109000D
- stack 0: 0xF0
2884	 2A8	SHR		 	 
- stack 1: 0x5B4
- stack 0: 0x2AA
2885	 2A9	JUMP		 	 
- stack 0: 0x5B4
2886	 2AA	JUMPDEST		 ;; __riscvimpl_BNE_0_4_5	  ;; # instr: bne tp,t0,-18(ignore imm)
- stack 0: 0x5B4
2887	 2AB	PUSH2	0080	 	 
- stack 1: 0x5B4
- stack 0: 0x80
2888	 2AE	MLOAD		 	  ;; # read from x4
- stack 1: 0x5B4
- stack 0: 0x2
2889	 2AF	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2890	 2B4	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5B4
- stack 0: 0x2
2891	 2B5	PUSH2	00A0	 	 
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0xA0
2892	 2B8	MLOAD		 	  ;; # read from x5
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2893	 2B9	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5B4
- stack 2: 0x2
- stack 1: 0x2
- stack 0: 0xFFFFFFFF
2894	 2BE	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5B4
- stack 1: 0x2
- stack 0: 0x2
2895	 2BF	SUB		 	 
- stack 1: 0x5B4
- stack 0: 0x0
2896	 2C0	PUSH2	02C8	 ;; _neq_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 2: 0x5B4
- stack 1: 0x0
- stack 0: 0x2C8
2897	 2C3	JUMPI		 	 
- stack 0: 0x5B4
2898	 2C4	PUSH2	02E2	 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 1: 0x5B4
- stack 0: 0x2E2
2899	 2C7	JUMP		 	 
- stack 0: 0x5B4
2900	 2E2	JUMPDEST		 ;; _neq_after_a870a4d60d5b8d936594b71d0f6c25f8cfcdc584db2b8e12eb7b0e43d6a30ae3	 
- stack 0: 0x5B4
2901	 2E3	PUSH1	04	 	 
- stack 1: 0x5B4
- stack 0: 0x4
2902	 2E5	ADD		 	 
- stack 0: 0x5B8
2903	 2E6	DUP1		 	  ;; # executing pc
- stack 1: 0x5B8
- stack 0: 0x5B8
2904	 2E7	MLOAD		 	 
- stack 1: 0x5B8
- stack 0: 0x1B100FF00EA00FF0109000C01230030034500F0036200F00109000D01F60020
2905	 2E8	PUSH1	F0	 	 
- stack 2: 0x5B8
- stack 1: 0x1B100FF00EA00FF0109000C01230030034500F0036200F00109000D01F60020
- stack 0: 0xF0
2906	 2EA	SHR		 	 
- stack 1: 0x5B8
- stack 0: 0x1B1
2907	 2EB	JUMP		 	 
- stack 0: 0x5B8
2908	 1B1	JUMPDEST		 ;; __riscvimpl_LUI_f00ffeb7	  ;; # instr: lui t4,0xf00ff(ignore imm)
- stack 0: 0x5B8
2909	 1B2	PUSH4	f00ff000	 	 
- stack 1: 0x5B8
- stack 0: 0xF00FF000
2910	 1B7	PUSH2	03A0	 	 
- stack 2: 0x5B8
- stack 1: 0xF00FF000
- stack 0: 0x3A0
2911	 1BA	MSTORE		 	  ;; # store to x29
- stack 0: 0x5B8
2912	 1BB	PUSH1	04	 	 
- stack 1: 0x5B8
- stack 0: 0x4
2913	 1BD	ADD		 	 
- stack 0: 0x5BC
2914	 1BE	DUP1		 	  ;; # executing pc
- stack 1: 0x5BC
- stack 0: 0x5BC
2915	 1BF	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xEA00FF0109000C01230030034500F0036200F00109000D01F60020037C0FF0
2916	 1C0	PUSH1	F0	 	 
- stack 2: 0x5BC
- stack 1: 0xEA00FF0109000C01230030034500F0036200F00109000D01F60020037C0FF0
- stack 0: 0xF0
2917	 1C2	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xEA
2918	 1C3	JUMP		 	 
- stack 0: 0x5BC
2919	 EA	JUMPDEST		 ;; __riscvimpl_ADDI_29_29_0	  ;; # instr: addi t4,t4,15(ignore imm)
- stack 0: 0x5BC
2920	 EB	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5BC
- stack 0: 0x5BC
2921	 EC	MLOAD		 	 
- stack 1: 0x5BC
- stack 0: 0xEA00FF0109000C01230030034500F0036200F00109000D01F60020037C0FF0
2922	 ED	PUSH1	E0	 	 
- stack 2: 0x5BC
- stack 1: 0xEA00FF0109000C01230030034500F0036200F00109000D01F60020037C0FF0
- stack 0: 0xE0
2923	 EF	SHR		 	 
- stack 1: 0x5BC
- stack 0: 0xEA00FF
2924	 F0	PUSH2	FFFF	 	 
- stack 2: 0x5BC
- stack 1: 0xEA00FF
- stack 0: 0xFFFF
2925	 F3	AND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF
2926	 F4	PUSH1	01	 	 
- stack 2: 0x5BC
- stack 1: 0xFF
- stack 0: 0x1
2927	 F6	SIGNEXTEND		 	 
- stack 1: 0x5BC
- stack 0: 0xFF
2928	 F7	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0xFF
- stack 0: 0x3A0
2929	 FA	MLOAD		 	  ;; # read from x29
- stack 2: 0x5BC
- stack 1: 0xFF
- stack 0: 0xF00FF000
2930	 FB	ADD		 	  ;; # ADDI 29
- stack 1: 0x5BC
- stack 0: 0xF00FF0FF
2931	 FC	PUSH2	03A0	 	 
- stack 2: 0x5BC
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
2932	 FF	MSTORE		 	  ;; # store to x29
- stack 0: 0x5BC
2933	 100	PUSH1	04	 	 
- stack 1: 0x5BC
- stack 0: 0x4
2934	 102	ADD		 	 
- stack 0: 0x5C0
2935	 103	DUP1		 	  ;; # executing pc
- stack 1: 0x5C0
- stack 0: 0x5C0
2936	 104	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x109000C01230030034500F0036200F00109000D01F60020037C0FF0009900FF
2937	 105	PUSH1	F0	 	 
- stack 2: 0x5C0
- stack 1: 0x109000C01230030034500F0036200F00109000D01F60020037C0FF0009900FF
- stack 0: 0xF0
2938	 107	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x109
2939	 108	JUMP		 	 
- stack 0: 0x5C0
2940	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5C0
2941	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C0
- stack 0: 0x5C0
2942	 10B	MLOAD		 	 
- stack 1: 0x5C0
- stack 0: 0x109000C01230030034500F0036200F00109000D01F60020037C0FF0009900FF
2943	 10C	PUSH1	E0	 	 
- stack 2: 0x5C0
- stack 1: 0x109000C01230030034500F0036200F00109000D01F60020037C0FF0009900FF
- stack 0: 0xE0
2944	 10E	SHR		 	 
- stack 1: 0x5C0
- stack 0: 0x109000C
2945	 10F	PUSH2	FFFF	 	 
- stack 2: 0x5C0
- stack 1: 0x109000C
- stack 0: 0xFFFF
2946	 112	AND		 	 
- stack 1: 0x5C0
- stack 0: 0xC
2947	 113	PUSH1	01	 	 
- stack 2: 0x5C0
- stack 1: 0xC
- stack 0: 0x1
2948	 115	SIGNEXTEND		 	 
- stack 1: 0x5C0
- stack 0: 0xC
2949	 116	PUSH2	0380	 	 
- stack 2: 0x5C0
- stack 1: 0xC
- stack 0: 0x380
2950	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x5C0
2951	 11A	PUSH1	04	 	 
- stack 1: 0x5C0
- stack 0: 0x4
2952	 11C	ADD		 	 
- stack 0: 0x5C4
2953	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5C4
- stack 0: 0x5C4
2954	 11E	MLOAD		 	 
- stack 1: 0x5C4
- stack 0: 0x1230030034500F0036200F00109000D01F60020037C0FF0009900FF038F070F
2955	 11F	PUSH1	F0	 	 
- stack 2: 0x5C4
- stack 1: 0x1230030034500F0036200F00109000D01F60020037C0FF0009900FF038F070F
- stack 0: 0xF0
2956	 121	SHR		 	 
- stack 1: 0x5C4
- stack 0: 0x123
2957	 122	JUMP		 	 
- stack 0: 0x5C4
2958	 123	JUMPDEST		 ;; __riscvimpl_BNE_0_3_29	  ;; # instr: bne gp,t4,1cc(ignore imm)
- stack 0: 0x5C4
2959	 124	PUSH2	0060	 	 
- stack 1: 0x5C4
- stack 0: 0x60
2960	 127	MLOAD		 	  ;; # read from x3
- stack 1: 0x5C4
- stack 0: 0xF00FF0FF
2961	 128	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5C4
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
2962	 12D	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5C4
- stack 0: 0xF00FF0FF
2963	 12E	PUSH2	03A0	 	 
- stack 2: 0x5C4
- stack 1: 0xF00FF0FF
- stack 0: 0x3A0
2964	 131	MLOAD		 	  ;; # read from x29
- stack 2: 0x5C4
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
2965	 132	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5C4
- stack 2: 0xF00FF0FF
- stack 1: 0xF00FF0FF
- stack 0: 0xFFFFFFFF
2966	 137	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5C4
- stack 1: 0xF00FF0FF
- stack 0: 0xF00FF0FF
2967	 138	SUB		 	 
- stack 1: 0x5C4
- stack 0: 0x0
2968	 139	PUSH2	0141	 ;; _neq_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 2: 0x5C4
- stack 1: 0x0
- stack 0: 0x141
2969	 13C	JUMPI		 	 
- stack 0: 0x5C4
2970	 13D	PUSH2	015B	 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 1: 0x5C4
- stack 0: 0x15B
2971	 140	JUMP		 	 
- stack 0: 0x5C4
2972	 15B	JUMPDEST		 ;; _neq_after_f00fc9e44fe170ce4f80d478ac1e5afde8a0f510c1ea75ecfd5b2228bc64b43c	 
- stack 0: 0x5C4
2973	 15C	PUSH1	04	 	 
- stack 1: 0x5C4
- stack 0: 0x4
2974	 15E	ADD		 	 
- stack 0: 0x5C8
2975	 15F	DUP1		 	  ;; # executing pc
- stack 1: 0x5C8
- stack 0: 0x5C8
2976	 160	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x34500F0036200F00109000D01F60020037C0FF0009900FF038F070F03620000
2977	 161	PUSH1	F0	 	 
- stack 2: 0x5C8
- stack 1: 0x34500F0036200F00109000D01F60020037C0FF0009900FF038F070F03620000
- stack 0: 0xF0
2978	 163	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x345
2979	 164	JUMP		 	 
- stack 0: 0x5C8
2980	 345	JUMPDEST		 ;; __riscvimpl_XORI_1_0_0	  ;; # instr: xori ra,zero,240(ignore imm)
- stack 0: 0x5C8
2981	 346	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5C8
- stack 0: 0x5C8
2982	 347	MLOAD		 	 
- stack 1: 0x5C8
- stack 0: 0x34500F0036200F00109000D01F60020037C0FF0009900FF038F070F03620000
2983	 348	PUSH1	E0	 	 
- stack 2: 0x5C8
- stack 1: 0x34500F0036200F00109000D01F60020037C0FF0009900FF038F070F03620000
- stack 0: 0xE0
2984	 34A	SHR		 	 
- stack 1: 0x5C8
- stack 0: 0x34500F0
2985	 34B	PUSH2	FFFF	 	 
- stack 2: 0x5C8
- stack 1: 0x34500F0
- stack 0: 0xFFFF
2986	 34E	AND		 	 
- stack 1: 0x5C8
- stack 0: 0xF0
2987	 34F	PUSH1	01	 	 
- stack 2: 0x5C8
- stack 1: 0xF0
- stack 0: 0x1
2988	 351	SIGNEXTEND		 	 
- stack 1: 0x5C8
- stack 0: 0xF0
2989	 352	PUSH1	00	 	 
- stack 2: 0x5C8
- stack 1: 0xF0
- stack 0: 0x0
2990	 354	XOR		 	  ;; # XORI
- stack 1: 0x5C8
- stack 0: 0xF0
2991	 355	PUSH2	0020	 	 
- stack 2: 0x5C8
- stack 1: 0xF0
- stack 0: 0x20
2992	 358	MSTORE		 	  ;; # store to x1
- stack 0: 0x5C8
2993	 359	PUSH1	04	 	 
- stack 1: 0x5C8
- stack 0: 0x4
2994	 35B	ADD		 	 
- stack 0: 0x5CC
2995	 35C	DUP1		 	  ;; # executing pc
- stack 1: 0x5CC
- stack 0: 0x5CC
2996	 35D	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x36200F00109000D01F60020037C0FF0009900FF038F070F036200000109000E
2997	 35E	PUSH1	F0	 	 
- stack 2: 0x5CC
- stack 1: 0x36200F00109000D01F60020037C0FF0009900FF038F070F036200000109000E
- stack 0: 0xF0
2998	 360	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x362
2999	 361	JUMP		 	 
- stack 0: 0x5CC
3000	 362	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x5CC
3001	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5CC
- stack 0: 0x5CC
3002	 364	MLOAD		 	 
- stack 1: 0x5CC
- stack 0: 0x36200F00109000D01F60020037C0FF0009900FF038F070F036200000109000E
3003	 365	PUSH1	E0	 	 
- stack 2: 0x5CC
- stack 1: 0x36200F00109000D01F60020037C0FF0009900FF038F070F036200000109000E
- stack 0: 0xE0
3004	 367	SHR		 	 
- stack 1: 0x5CC
- stack 0: 0x36200F0
3005	 368	PUSH2	FFFF	 	 
- stack 2: 0x5CC
- stack 1: 0x36200F0
- stack 0: 0xFFFF
3006	 36B	AND		 	 
- stack 1: 0x5CC
- stack 0: 0xF0
3007	 36C	PUSH1	01	 	 
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0x1
3008	 36E	SIGNEXTEND		 	 
- stack 1: 0x5CC
- stack 0: 0xF0
3009	 36F	PUSH2	03A0	 	 
- stack 2: 0x5CC
- stack 1: 0xF0
- stack 0: 0x3A0
3010	 372	MSTORE		 	  ;; # store to x29
- stack 0: 0x5CC
3011	 373	PUSH1	04	 	 
- stack 1: 0x5CC
- stack 0: 0x4
3012	 375	ADD		 	 
- stack 0: 0x5D0
3013	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x5D0
- stack 0: 0x5D0
3014	 377	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x109000D01F60020037C0FF0009900FF038F070F036200000109000E03AB0008
3015	 378	PUSH1	F0	 	 
- stack 2: 0x5D0
- stack 1: 0x109000D01F60020037C0FF0009900FF038F070F036200000109000E03AB0008
- stack 0: 0xF0
3016	 37A	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x109
3017	 37B	JUMP		 	 
- stack 0: 0x5D0
3018	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5D0
3019	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5D0
- stack 0: 0x5D0
3020	 10B	MLOAD		 	 
- stack 1: 0x5D0
- stack 0: 0x109000D01F60020037C0FF0009900FF038F070F036200000109000E03AB0008
3021	 10C	PUSH1	E0	 	 
- stack 2: 0x5D0
- stack 1: 0x109000D01F60020037C0FF0009900FF038F070F036200000109000E03AB0008
- stack 0: 0xE0
3022	 10E	SHR		 	 
- stack 1: 0x5D0
- stack 0: 0x109000D
3023	 10F	PUSH2	FFFF	 	 
- stack 2: 0x5D0
- stack 1: 0x109000D
- stack 0: 0xFFFF
3024	 112	AND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
3025	 113	PUSH1	01	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x1
3026	 115	SIGNEXTEND		 	 
- stack 1: 0x5D0
- stack 0: 0xD
3027	 116	PUSH2	0380	 	 
- stack 2: 0x5D0
- stack 1: 0xD
- stack 0: 0x380
3028	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x5D0
3029	 11A	PUSH1	04	 	 
- stack 1: 0x5D0
- stack 0: 0x4
3030	 11C	ADD		 	 
- stack 0: 0x5D4
3031	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5D4
- stack 0: 0x5D4
3032	 11E	MLOAD		 	 
- stack 1: 0x5D4
- stack 0: 0x1F60020037C0FF0009900FF038F070F036200000109000E03AB000803EB0018
3033	 11F	PUSH1	F0	 	 
- stack 2: 0x5D4
- stack 1: 0x1F60020037C0FF0009900FF038F070F036200000109000E03AB000803EB0018
- stack 0: 0xF0
3034	 121	SHR		 	 
- stack 1: 0x5D4
- stack 0: 0x1F6
3035	 122	JUMP		 	 
- stack 0: 0x5D4
3036	 1F6	JUMPDEST		 ;; __riscvimpl_BNE_0_1_29	  ;; # instr: bne ra,t4,15c(ignore imm)
- stack 0: 0x5D4
3037	 1F7	PUSH2	0020	 	 
- stack 1: 0x5D4
- stack 0: 0x20
3038	 1FA	MLOAD		 	  ;; # read from x1
- stack 1: 0x5D4
- stack 0: 0xF0
3039	 1FB	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5D4
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
3040	 200	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5D4
- stack 0: 0xF0
3041	 201	PUSH2	03A0	 	 
- stack 2: 0x5D4
- stack 1: 0xF0
- stack 0: 0x3A0
3042	 204	MLOAD		 	  ;; # read from x29
- stack 2: 0x5D4
- stack 1: 0xF0
- stack 0: 0xF0
3043	 205	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5D4
- stack 2: 0xF0
- stack 1: 0xF0
- stack 0: 0xFFFFFFFF
3044	 20A	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5D4
- stack 1: 0xF0
- stack 0: 0xF0
3045	 20B	SUB		 	 
- stack 1: 0x5D4
- stack 0: 0x0
3046	 20C	PUSH2	0214	 ;; _neq_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 2: 0x5D4
- stack 1: 0x0
- stack 0: 0x214
3047	 20F	JUMPI		 	 
- stack 0: 0x5D4
3048	 210	PUSH2	022E	 ;; _neq_after_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 1: 0x5D4
- stack 0: 0x22E
3049	 213	JUMP		 	 
- stack 0: 0x5D4
3050	 22E	JUMPDEST		 ;; _neq_after_6ff0e02e8e14779a05524c66863916f56a95c189b759763eb0109a5e0f2595b9	 
- stack 0: 0x5D4
3051	 22F	PUSH1	04	 	 
- stack 1: 0x5D4
- stack 0: 0x4
3052	 231	ADD		 	 
- stack 0: 0x5D8
3053	 232	DUP1		 	  ;; # executing pc
- stack 1: 0x5D8
- stack 0: 0x5D8
3054	 233	MLOAD		 	 
- stack 1: 0x5D8
- stack 0: 0x37C0FF0009900FF038F070F036200000109000E03AB000803EB001800210000
3055	 234	PUSH1	F0	 	 
- stack 2: 0x5D8
- stack 1: 0x37C0FF0009900FF038F070F036200000109000E03AB000803EB001800210000
- stack 0: 0xF0
3056	 236	SHR		 	 
- stack 1: 0x5D8
- stack 0: 0x37C
3057	 237	JUMP		 	 
- stack 0: 0x5D8
3058	 37C	JUMPDEST		 ;; __riscvimpl_LUI_ff00b7	  ;; # instr: lui ra,0xff0(ignore imm)
- stack 0: 0x5D8
3059	 37D	PUSH4	00ff0000	 	 
- stack 1: 0x5D8
- stack 0: 0xFF0000
3060	 382	PUSH2	0020	 	 
- stack 2: 0x5D8
- stack 1: 0xFF0000
- stack 0: 0x20
3061	 385	MSTORE		 	  ;; # store to x1
- stack 0: 0x5D8
3062	 386	PUSH1	04	 	 
- stack 1: 0x5D8
- stack 0: 0x4
3063	 388	ADD		 	 
- stack 0: 0x5DC
3064	 389	DUP1		 	  ;; # executing pc
- stack 1: 0x5DC
- stack 0: 0x5DC
3065	 38A	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x9900FF038F070F036200000109000E03AB000803EB00180021000000340628
3066	 38B	PUSH1	F0	 	 
- stack 2: 0x5DC
- stack 1: 0x9900FF038F070F036200000109000E03AB000803EB00180021000000340628
- stack 0: 0xF0
3067	 38D	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x99
3068	 38E	JUMP		 	 
- stack 0: 0x5DC
3069	 99	JUMPDEST		 ;; __riscvimpl_ADDI_1_1_0	  ;; # instr: addi ra,ra,-256(ignore imm)
- stack 0: 0x5DC
3070	 9A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5DC
- stack 0: 0x5DC
3071	 9B	MLOAD		 	 
- stack 1: 0x5DC
- stack 0: 0x9900FF038F070F036200000109000E03AB000803EB00180021000000340628
3072	 9C	PUSH1	E0	 	 
- stack 2: 0x5DC
- stack 1: 0x9900FF038F070F036200000109000E03AB000803EB00180021000000340628
- stack 0: 0xE0
3073	 9E	SHR		 	 
- stack 1: 0x5DC
- stack 0: 0x9900FF
3074	 9F	PUSH2	FFFF	 	 
- stack 2: 0x5DC
- stack 1: 0x9900FF
- stack 0: 0xFFFF
3075	 A2	AND		 	 
- stack 1: 0x5DC
- stack 0: 0xFF
3076	 A3	PUSH1	01	 	 
- stack 2: 0x5DC
- stack 1: 0xFF
- stack 0: 0x1
3077	 A5	SIGNEXTEND		 	 
- stack 1: 0x5DC
- stack 0: 0xFF
3078	 A6	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0xFF
- stack 0: 0x20
3079	 A9	MLOAD		 	  ;; # read from x1
- stack 2: 0x5DC
- stack 1: 0xFF
- stack 0: 0xFF0000
3080	 AA	ADD		 	  ;; # ADDI 1
- stack 1: 0x5DC
- stack 0: 0xFF00FF
3081	 AB	PUSH2	0020	 	 
- stack 2: 0x5DC
- stack 1: 0xFF00FF
- stack 0: 0x20
3082	 AE	MSTORE		 	  ;; # store to x1
- stack 0: 0x5DC
3083	 AF	PUSH1	04	 	 
- stack 1: 0x5DC
- stack 0: 0x4
3084	 B1	ADD		 	 
- stack 0: 0x5E0
3085	 B2	DUP1		 	  ;; # executing pc
- stack 1: 0x5E0
- stack 0: 0x5E0
3086	 B3	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x38F070F036200000109000E03AB000803EB0018002100000034062800530042
3087	 B4	PUSH1	F0	 	 
- stack 2: 0x5E0
- stack 1: 0x38F070F036200000109000E03AB000803EB0018002100000034062800530042
- stack 0: 0xF0
3088	 B6	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x38F
3089	 B7	JUMP		 	 
- stack 0: 0x5E0
3090	 38F	JUMPDEST		 ;; __riscvimpl_XORI_0_1_0	  ;; # instr: xori zero,ra,1807(ignore imm)
- stack 0: 0x5E0
3091	 390	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E0
- stack 0: 0x5E0
3092	 391	MLOAD		 	 
- stack 1: 0x5E0
- stack 0: 0x38F070F036200000109000E03AB000803EB0018002100000034062800530042
3093	 392	PUSH1	E0	 	 
- stack 2: 0x5E0
- stack 1: 0x38F070F036200000109000E03AB000803EB0018002100000034062800530042
- stack 0: 0xE0
3094	 394	SHR		 	 
- stack 1: 0x5E0
- stack 0: 0x38F070F
3095	 395	PUSH2	FFFF	 	 
- stack 2: 0x5E0
- stack 1: 0x38F070F
- stack 0: 0xFFFF
3096	 398	AND		 	 
- stack 1: 0x5E0
- stack 0: 0x70F
3097	 399	PUSH1	01	 	 
- stack 2: 0x5E0
- stack 1: 0x70F
- stack 0: 0x1
3098	 39B	SIGNEXTEND		 	 
- stack 1: 0x5E0
- stack 0: 0x70F
3099	 39C	PUSH2	0020	 	 
- stack 2: 0x5E0
- stack 1: 0x70F
- stack 0: 0x20
3100	 39F	MLOAD		 	  ;; # read from x1
- stack 2: 0x5E0
- stack 1: 0x70F
- stack 0: 0xFF00FF
3101	 3A0	XOR		 	  ;; # XORI
- stack 1: 0x5E0
- stack 0: 0xFF07F0
3102	 3A1	POP		 	 
- stack 0: 0x5E0
3103	 3A2	PUSH1	04	 	 
- stack 1: 0x5E0
- stack 0: 0x4
3104	 3A4	ADD		 	 
- stack 0: 0x5E4
3105	 3A5	DUP1		 	  ;; # executing pc
- stack 1: 0x5E4
- stack 0: 0x5E4
3106	 3A6	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x36200000109000E03AB000803EB001800210000003406280053004200660000
3107	 3A7	PUSH1	F0	 	 
- stack 2: 0x5E4
- stack 1: 0x36200000109000E03AB000803EB001800210000003406280053004200660000
- stack 0: 0xF0
3108	 3A9	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x362
3109	 3AA	JUMP		 	 
- stack 0: 0x5E4
3110	 362	JUMPDEST		 ;; __riscvimpl_ADDI_29_0_0	  ;; # instr: addi t4,zero,240(ignore imm)
- stack 0: 0x5E4
3111	 363	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E4
- stack 0: 0x5E4
3112	 364	MLOAD		 	 
- stack 1: 0x5E4
- stack 0: 0x36200000109000E03AB000803EB001800210000003406280053004200660000
3113	 365	PUSH1	E0	 	 
- stack 2: 0x5E4
- stack 1: 0x36200000109000E03AB000803EB001800210000003406280053004200660000
- stack 0: 0xE0
3114	 367	SHR		 	 
- stack 1: 0x5E4
- stack 0: 0x3620000
3115	 368	PUSH2	FFFF	 	 
- stack 2: 0x5E4
- stack 1: 0x3620000
- stack 0: 0xFFFF
3116	 36B	AND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3117	 36C	PUSH1	01	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x1
3118	 36E	SIGNEXTEND		 	 
- stack 1: 0x5E4
- stack 0: 0x0
3119	 36F	PUSH2	03A0	 	 
- stack 2: 0x5E4
- stack 1: 0x0
- stack 0: 0x3A0
3120	 372	MSTORE		 	  ;; # store to x29
- stack 0: 0x5E4
3121	 373	PUSH1	04	 	 
- stack 1: 0x5E4
- stack 0: 0x4
3122	 375	ADD		 	 
- stack 0: 0x5E8
3123	 376	DUP1		 	  ;; # executing pc
- stack 1: 0x5E8
- stack 0: 0x5E8
3124	 377	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x109000E03AB000803EB001800210000003406280053004200660000042B0001
3125	 378	PUSH1	F0	 	 
- stack 2: 0x5E8
- stack 1: 0x109000E03AB000803EB001800210000003406280053004200660000042B0001
- stack 0: 0xF0
3126	 37A	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x109
3127	 37B	JUMP		 	 
- stack 0: 0x5E8
3128	 109	JUMPDEST		 ;; __riscvimpl_ADDI_28_0_0	  ;; # instr: addi t3,zero,2(ignore imm)
- stack 0: 0x5E8
3129	 10A	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5E8
- stack 0: 0x5E8
3130	 10B	MLOAD		 	 
- stack 1: 0x5E8
- stack 0: 0x109000E03AB000803EB001800210000003406280053004200660000042B0001
3131	 10C	PUSH1	E0	 	 
- stack 2: 0x5E8
- stack 1: 0x109000E03AB000803EB001800210000003406280053004200660000042B0001
- stack 0: 0xE0
3132	 10E	SHR		 	 
- stack 1: 0x5E8
- stack 0: 0x109000E
3133	 10F	PUSH2	FFFF	 	 
- stack 2: 0x5E8
- stack 1: 0x109000E
- stack 0: 0xFFFF
3134	 112	AND		 	 
- stack 1: 0x5E8
- stack 0: 0xE
3135	 113	PUSH1	01	 	 
- stack 2: 0x5E8
- stack 1: 0xE
- stack 0: 0x1
3136	 115	SIGNEXTEND		 	 
- stack 1: 0x5E8
- stack 0: 0xE
3137	 116	PUSH2	0380	 	 
- stack 2: 0x5E8
- stack 1: 0xE
- stack 0: 0x380
3138	 119	MSTORE		 	  ;; # store to x28
- stack 0: 0x5E8
3139	 11A	PUSH1	04	 	 
- stack 1: 0x5E8
- stack 0: 0x4
3140	 11C	ADD		 	 
- stack 0: 0x5EC
3141	 11D	DUP1		 	  ;; # executing pc
- stack 1: 0x5EC
- stack 0: 0x5EC
3142	 11E	MLOAD		 	 
- stack 1: 0x5EC
- stack 0: 0x3AB000803EB001800210000003406280053004200660000042B000100210000
3143	 11F	PUSH1	F0	 	 
- stack 2: 0x5EC
- stack 1: 0x3AB000803EB001800210000003406280053004200660000042B000100210000
- stack 0: 0xF0
3144	 121	SHR		 	 
- stack 1: 0x5EC
- stack 0: 0x3AB
3145	 122	JUMP		 	 
- stack 0: 0x5EC
3146	 3AB	JUMPDEST		 ;; __riscvimpl_BNE_0_0_29	  ;; # instr: bne zero,t4,8(ignore imm)
- stack 0: 0x5EC
3147	 3AC	PUSH1	00	 	 
- stack 1: 0x5EC
- stack 0: 0x0
3148	 3AE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3149	 3B3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5EC
- stack 0: 0x0
3150	 3B4	PUSH2	03A0	 	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x3A0
3151	 3B7	MLOAD		 	  ;; # read from x29
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x0
3152	 3B8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5EC
- stack 2: 0x0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3153	 3BD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x0
3154	 3BE	SUB		 	 
- stack 1: 0x5EC
- stack 0: 0x0
3155	 3BF	PUSH2	03C7	 ;; _neq_938749ce3d5f9af129703ce2d483dc1313135d41f0b510398d97b7ceabf24397	 
- stack 2: 0x5EC
- stack 1: 0x0
- stack 0: 0x3C7
3156	 3C2	JUMPI		 	 
- stack 0: 0x5EC
3157	 3C3	PUSH2	03E1	 ;; _neq_after_938749ce3d5f9af129703ce2d483dc1313135d41f0b510398d97b7ceabf24397	 
- stack 1: 0x5EC
- stack 0: 0x3E1
3158	 3C6	JUMP		 	 
- stack 0: 0x5EC
3159	 3E1	JUMPDEST		 ;; _neq_after_938749ce3d5f9af129703ce2d483dc1313135d41f0b510398d97b7ceabf24397	 
- stack 0: 0x5EC
3160	 3E2	PUSH1	04	 	 
- stack 1: 0x5EC
- stack 0: 0x4
3161	 3E4	ADD		 	 
- stack 0: 0x5F0
3162	 3E5	DUP1		 	  ;; # executing pc
- stack 1: 0x5F0
- stack 0: 0x5F0
3163	 3E6	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x3EB001800210000003406280053004200660000042B0001002100000034062C
3164	 3E7	PUSH1	F0	 	 
- stack 2: 0x5F0
- stack 1: 0x3EB001800210000003406280053004200660000042B0001002100000034062C
- stack 0: 0xF0
3165	 3E9	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x3EB
3166	 3EA	JUMP		 	 
- stack 0: 0x5F0
3167	 3EB	JUMPDEST		 ;; __riscvimpl_BNE_0_0_28	  ;; # instr: bne zero,t3,18(ignore imm)
- stack 0: 0x5F0
3168	 3EC	PUSH1	00	 	 
- stack 1: 0x5F0
- stack 0: 0x0
3169	 3EE	PUSH4	FFFFFFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0xFFFFFFFF
3170	 3F3	AND		 	  ;; # mask to 32 bits
- stack 1: 0x5F0
- stack 0: 0x0
3171	 3F4	PUSH2	0380	 	 
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0x380
3172	 3F7	MLOAD		 	  ;; # read from x28
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0xE
3173	 3F8	PUSH4	FFFFFFFF	 	 
- stack 3: 0x5F0
- stack 2: 0x0
- stack 1: 0xE
- stack 0: 0xFFFFFFFF
3174	 3FD	AND		 	  ;; # mask to 32 bits
- stack 2: 0x5F0
- stack 1: 0x0
- stack 0: 0xE
3175	 3FE	SUB		 	 
- stack 1: 0x5F0
- stack 0: 0xE
3176	 3FF	PUSH2	0407	 ;; _neq_b97610acfa2133320fdf536d4413dd3d282e7c65569857f929cf4e646c07f66f	 
- stack 2: 0x5F0
- stack 1: 0xE
- stack 0: 0x407
3177	 402	JUMPI		 	 
- stack 0: 0x5F0
3178	 407	JUMPDEST		 ;; _neq_b97610acfa2133320fdf536d4413dd3d282e7c65569857f929cf4e646c07f66f	 
- stack 0: 0x5F0
3179	 408	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x5F0
- stack 0: 0x5F0
3180	 409	MLOAD		 	 
- stack 1: 0x5F0
- stack 0: 0x3EB001800210000003406280053004200660000042B0001002100000034062C
3181	 40A	PUSH1	E0	 	 
- stack 2: 0x5F0
- stack 1: 0x3EB001800210000003406280053004200660000042B0001002100000034062C
- stack 0: 0xE0
3182	 40C	SHR		 	 
- stack 1: 0x5F0
- stack 0: 0x3EB0018
3183	 40D	PUSH2	FFFF	 	 
- stack 2: 0x5F0
- stack 1: 0x3EB0018
- stack 0: 0xFFFF
3184	 410	AND		 	 
- stack 1: 0x5F0
- stack 0: 0x18
3185	 411	PUSH1	01	 	 
- stack 2: 0x5F0
- stack 1: 0x18
- stack 0: 0x1
3186	 413	SIGNEXTEND		 	 
- stack 1: 0x5F0
- stack 0: 0x18
3187	 414	ADD		 	 
- stack 0: 0x608
3188	 415	PUSH4	FFFFFFFF	 	 
- stack 1: 0x608
- stack 0: 0xFFFFFFFF
3189	 41A	AND		 	  ;; # mask to 32 bits
- stack 0: 0x608
3190	 41B	DUP1		 	  ;; # executing pc
- stack 1: 0x608
- stack 0: 0x608
3191	 41C	MLOAD		 	 
- stack 1: 0x608
- stack 0: 0x2100000034062C005300420066000004360000006600006574796D00007473
3192	 41D	PUSH1	F0	 	 
- stack 2: 0x608
- stack 1: 0x2100000034062C005300420066000004360000006600006574796D00007473
- stack 0: 0xF0
3193	 41F	SHR		 	 
- stack 1: 0x608
- stack 0: 0x21
3194	 420	JUMP		 	 
- stack 0: 0x608
3195	 21	JUMPDEST		 ;; __riscvimpl_LUI_5b7	  ;; # instr: lui a1,0x0(ignore imm)
- stack 0: 0x608
3196	 22	PUSH4	00000000	 	 
- stack 1: 0x608
- stack 0: 0x0
3197	 27	PUSH2	0160	 	 
- stack 2: 0x608
- stack 1: 0x0
- stack 0: 0x160
3198	 2A	MSTORE		 	  ;; # store to x11
- stack 0: 0x608
3199	 2B	PUSH1	04	 	 
- stack 1: 0x608
- stack 0: 0x4
3200	 2D	ADD		 	 
- stack 0: 0x60C
3201	 2E	DUP1		 	  ;; # executing pc
- stack 1: 0x60C
- stack 0: 0x60C
3202	 2F	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34062C005300420066000004360000006600006574796D0000747300525245
3203	 30	PUSH1	F0	 	 
- stack 2: 0x60C
- stack 1: 0x34062C005300420066000004360000006600006574796D0000747300525245
- stack 0: 0xF0
3204	 32	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x34
3205	 33	JUMP		 	 
- stack 0: 0x60C
3206	 34	JUMPDEST		 ;; __riscvimpl_ADDI_11_11_0	  ;; # instr: addi a1,a1,1568(ignore imm)
- stack 0: 0x60C
3207	 35	DUP1		 	  ;; # get IMM from PC
- stack 1: 0x60C
- stack 0: 0x60C
3208	 36	MLOAD		 	 
- stack 1: 0x60C
- stack 0: 0x34062C005300420066000004360000006600006574796D0000747300525245
3209	 37	PUSH1	E0	 	 
- stack 2: 0x60C
- stack 1: 0x34062C005300420066000004360000006600006574796D0000747300525245
- stack 0: 0xE0
3210	 39	SHR		 	 
- stack 1: 0x60C
- stack 0: 0x34062C
3211	 3A	PUSH2	FFFF	 	 
- stack 2: 0x60C
- stack 1: 0x34062C
- stack 0: 0xFFFF
3212	 3D	AND		 	 
- stack 1: 0x60C
- stack 0: 0x62C
3213	 3E	PUSH1	01	 	 
- stack 2: 0x60C
- stack 1: 0x62C
- stack 0: 0x1
3214	 40	SIGNEXTEND		 	 
- stack 1: 0x60C
- stack 0: 0x62C
3215	 41	PUSH2	0160	 	 
- stack 2: 0x60C
- stack 1: 0x62C
- stack 0: 0x160
3216	 44	MLOAD		 	  ;; # read from x11
- stack 2: 0x60C
- stack 1: 0x62C
- stack 0: 0x0
3217	 45	ADD		 	  ;; # ADDI 11
- stack 1: 0x60C
- stack 0: 0x62C
3218	 46	PUSH2	0160	 	 
- stack 2: 0x60C
- stack 1: 0x62C
- stack 0: 0x160
3219	 49	MSTORE		 	  ;; # store to x11
- stack 0: 0x60C
3220	 4A	PUSH1	04	 	 
- stack 1: 0x60C
- stack 0: 0x4
3221	 4C	ADD		 	 
- stack 0: 0x610
3222	 4D	DUP1		 	  ;; # executing pc
- stack 1: 0x610
- stack 0: 0x610
3223	 4E	MLOAD		 	 
- stack 1: 0x610
- stack 0: 0x5300420066000004360000006600006574796D000074730052524500004B4F
3224	 4F	PUSH1	F0	 	 
- stack 2: 0x610
- stack 1: 0x5300420066000004360000006600006574796D000074730052524500004B4F
- stack 0: 0xF0
3225	 51	SHR		 	 
- stack 1: 0x610
- stack 0: 0x53
3226	 52	JUMP		 	 
- stack 0: 0x610
3227	 53	JUMPDEST		 ;; __riscvimpl_LUI_42537	  ;; # instr: lui a0,0x42(ignore imm)
- stack 0: 0x610
3228	 54	PUSH4	00042000	 	 
- stack 1: 0x610
- stack 0: 0x42000
3229	 59	PUSH2	0140	 	 
- stack 2: 0x610
- stack 1: 0x42000
- stack 0: 0x140
3230	 5C	MSTORE		 	  ;; # store to x10
- stack 0: 0x610
3231	 5D	PUSH1	04	 	 
- stack 1: 0x610
- stack 0: 0x4
3232	 5F	ADD		 	 
- stack 0: 0x614
3233	 60	DUP1		 	  ;; # executing pc
- stack 1: 0x614
- stack 0: 0x614
3234	 61	MLOAD		 	 
- stack 1: 0x614
- stack 0: 0x66000004360000006600006574796D000074730052524500004B4F00000000
3235	 62	PUSH1	F0	 	 
- stack 2: 0x614
- stack 1: 0x66000004360000006600006574796D000074730052524500004B4F00000000
- stack 0: 0xF0
3236	 64	SHR		 	 
- stack 1: 0x614
- stack 0: 0x66
3237	 65	JUMP		 	 
- stack 0: 0x614
3238	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x614
3239	 67	PUSH2	0140	 	 
- stack 1: 0x614
- stack 0: 0x140
3240	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x614
- stack 0: 0x42000
3241	 6B	PUSH2	0075	 ;; _ecall_083b61ee6a0b0fa5653b9f06053037a999fee9eba3be669e181f49fe80163d36	 
- stack 2: 0x614
- stack 1: 0x42000
- stack 0: 0x75
3242	 6E	JUMPI		 	 
- stack 0: 0x614
3243	 75	JUMPDEST		 ;; _ecall_083b61ee6a0b0fa5653b9f06053037a999fee9eba3be669e181f49fe80163d36	 
- stack 0: 0x614
3244	 76	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3245	 78	PUSH2	0160	 	 
- stack 2: 0x614
- stack 1: 0x4
- stack 0: 0x160
3246	 7B	MLOAD		 	  ;; # read from x11
- stack 2: 0x614
- stack 1: 0x4
- stack 0: 0x62C
3247	 7C	LOG0		 	 
*** PRINT: OK
- stack 0: 0x614
3248	 7D	PUSH1	04	 	 
- stack 1: 0x614
- stack 0: 0x4
3249	 7F	ADD		 	 
- stack 0: 0x618
3250	 80	DUP1		 	  ;; # executing pc
- stack 1: 0x618
- stack 0: 0x618
3251	 81	MLOAD		 	 
- stack 1: 0x618
- stack 0: 0x4360000006600006574796D000074730052524500004B4F0000000000000000
3252	 82	PUSH1	F0	 	 
- stack 2: 0x618
- stack 1: 0x4360000006600006574796D000074730052524500004B4F0000000000000000
- stack 0: 0xF0
3253	 84	SHR		 	 
- stack 1: 0x618
- stack 0: 0x436
3254	 85	JUMP		 	 
- stack 0: 0x618
3255	 436	JUMPDEST		 ;; __riscvimpl_LUI_537	  ;; # instr: lui a0,0x0(ignore imm)
- stack 0: 0x618
3256	 437	PUSH4	00000000	 	 
- stack 1: 0x618
- stack 0: 0x0
3257	 43C	PUSH2	0140	 	 
- stack 2: 0x618
- stack 1: 0x0
- stack 0: 0x140
3258	 43F	MSTORE		 	  ;; # store to x10
- stack 0: 0x618
3259	 440	PUSH1	04	 	 
- stack 1: 0x618
- stack 0: 0x4
3260	 442	ADD		 	 
- stack 0: 0x61C
3261	 443	DUP1		 	  ;; # executing pc
- stack 1: 0x61C
- stack 0: 0x61C
3262	 444	MLOAD		 	 
- stack 1: 0x61C
- stack 0: 0x6600006574796D000074730052524500004B4F000000000000000000000000
3263	 445	PUSH1	F0	 	 
- stack 2: 0x61C
- stack 1: 0x6600006574796D000074730052524500004B4F000000000000000000000000
- stack 0: 0xF0
3264	 447	SHR		 	 
- stack 1: 0x61C
- stack 0: 0x66
3265	 448	JUMP		 	 
- stack 0: 0x61C
3266	 66	JUMPDEST		 ;; __riscvimpl_ECALL_0_0_0	  ;; # instr: ecall(ignore imm)
- stack 0: 0x61C
3267	 67	PUSH2	0140	 	 
- stack 1: 0x61C
- stack 0: 0x140
3268	 6A	MLOAD		 	  ;; # read from x10
- stack 1: 0x61C
- stack 0: 0x0
3269	 6B	PUSH2	0075	 ;; _ecall_083b61ee6a0b0fa5653b9f06053037a999fee9eba3be669e181f49fe80163d36	 
- stack 2: 0x61C
- stack 1: 0x0
- stack 0: 0x75
3270	 6E	JUMPI		 	 
- stack 0: 0x61C
3271	 6F	PUSH1	20	 	 
- stack 1: 0x61C
- stack 0: 0x20
3272	 71	PUSH2	0160	 	 
- stack 2: 0x61C
- stack 1: 0x20
- stack 0: 0x160
3273	 74	RETURN		 	 
Final bytecode length; 1658
Returned: 000000000000000000000000000000000000000000000000000000000000062c
gasUsed : 11835
** HOT: 400 - range: 400,404,408,40c,410,414,418,41c,420,424,428
** HOT: 42c - range: 42c,430,434,438,43c,440,444
** HOT: 448 - range: 448,44c,450,454,458,45c,460
** HOT: 464 - range: 464,468,46c,470,474,478,47c
** HOT: 480 - range: 480,484,488,48c,490,494,498
** HOT: 49c - range: 49c,4a0,4a4,4a8,4ac,4b0,4b4,4b8
** HOT: 4a0 - range: 4a0,4a4,4a8,4ac,4b0,4b4,4b8
** HOT: 4bc - range: 4bc,4c0,4c4,4c8
** HOT: 4cc - range: 4cc,4d0,4d4,4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4d0 - range: 4d0,4d4,4d8,4dc,4e0,4e4,4e8,4ec
** HOT: 4f0 - range: 4f0,4f4,4f8,4fc
** HOT: 500 - range: 500,504,508,50c,510,514,518,51c,520,524
** HOT: 504 - range: 504,508,50c,510,514,518,51c,520,524
** HOT: 528 - range: 528,52c,530,534
** HOT: 538 - range: 538,53c,540,544,548,54c,550
** HOT: 53c - range: 53c,540,544,548,54c,550
** HOT: 554 - range: 554,558,55c,560
** HOT: 564 - range: 564,568,56c,570,574,578,57c,580
** HOT: 568 - range: 568,56c,570,574,578,57c,580
** HOT: 584 - range: 584,588,58c,590
** HOT: 594 - range: 594,598,59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 598 - range: 598,59c,5a0,5a4,5a8,5ac,5b0,5b4
** HOT: 5b8 - range: 5b8,5bc,5c0,5c4
** HOT: 5c8 - range: 5c8,5cc,5d0,5d4
** HOT: 5d8 - range: 5d8,5dc,5e0,5e4,5e8,5ec
